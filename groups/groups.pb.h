// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: groups/groups.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_groups_2fgroups_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_groups_2fgroups_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "common/health.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_groups_2fgroups_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_groups_2fgroups_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[36]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_groups_2fgroups_2eproto;
namespace mruv {
namespace groups {
class AddMemberRequest;
class AddMemberRequestDefaultTypeInternal;
extern AddMemberRequestDefaultTypeInternal _AddMemberRequest_default_instance_;
class AddMemberResponse;
class AddMemberResponseDefaultTypeInternal;
extern AddMemberResponseDefaultTypeInternal _AddMemberResponse_default_instance_;
class AddPermissionRequest;
class AddPermissionRequestDefaultTypeInternal;
extern AddPermissionRequestDefaultTypeInternal _AddPermissionRequest_default_instance_;
class AddPermissionResponse;
class AddPermissionResponseDefaultTypeInternal;
extern AddPermissionResponseDefaultTypeInternal _AddPermissionResponse_default_instance_;
class AddSubgroupRequest;
class AddSubgroupRequestDefaultTypeInternal;
extern AddSubgroupRequestDefaultTypeInternal _AddSubgroupRequest_default_instance_;
class AddSubgroupResponse;
class AddSubgroupResponseDefaultTypeInternal;
extern AddSubgroupResponseDefaultTypeInternal _AddSubgroupResponse_default_instance_;
class AssignOwnerRequest;
class AssignOwnerRequestDefaultTypeInternal;
extern AssignOwnerRequestDefaultTypeInternal _AssignOwnerRequest_default_instance_;
class AssignOwnerResponse;
class AssignOwnerResponseDefaultTypeInternal;
extern AssignOwnerResponseDefaultTypeInternal _AssignOwnerResponse_default_instance_;
class CreateGroupRequest;
class CreateGroupRequestDefaultTypeInternal;
extern CreateGroupRequestDefaultTypeInternal _CreateGroupRequest_default_instance_;
class CreateGroupResponse;
class CreateGroupResponseDefaultTypeInternal;
extern CreateGroupResponseDefaultTypeInternal _CreateGroupResponse_default_instance_;
class DeleteGroupRequest;
class DeleteGroupRequestDefaultTypeInternal;
extern DeleteGroupRequestDefaultTypeInternal _DeleteGroupRequest_default_instance_;
class DeleteGroupResponse;
class DeleteGroupResponseDefaultTypeInternal;
extern DeleteGroupResponseDefaultTypeInternal _DeleteGroupResponse_default_instance_;
class GetGroupRequest;
class GetGroupRequestDefaultTypeInternal;
extern GetGroupRequestDefaultTypeInternal _GetGroupRequest_default_instance_;
class GetGroupResponse;
class GetGroupResponseDefaultTypeInternal;
extern GetGroupResponseDefaultTypeInternal _GetGroupResponse_default_instance_;
class GetGroupsRequest;
class GetGroupsRequestDefaultTypeInternal;
extern GetGroupsRequestDefaultTypeInternal _GetGroupsRequest_default_instance_;
class GetGroupsResponse;
class GetGroupsResponseDefaultTypeInternal;
extern GetGroupsResponseDefaultTypeInternal _GetGroupsResponse_default_instance_;
class GetGroupsResponse_Group;
class GetGroupsResponse_GroupDefaultTypeInternal;
extern GetGroupsResponse_GroupDefaultTypeInternal _GetGroupsResponse_Group_default_instance_;
class GetMembersRequest;
class GetMembersRequestDefaultTypeInternal;
extern GetMembersRequestDefaultTypeInternal _GetMembersRequest_default_instance_;
class GetMembersResponse;
class GetMembersResponseDefaultTypeInternal;
extern GetMembersResponseDefaultTypeInternal _GetMembersResponse_default_instance_;
class GetOwnerRequest;
class GetOwnerRequestDefaultTypeInternal;
extern GetOwnerRequestDefaultTypeInternal _GetOwnerRequest_default_instance_;
class GetOwnerResponse;
class GetOwnerResponseDefaultTypeInternal;
extern GetOwnerResponseDefaultTypeInternal _GetOwnerResponse_default_instance_;
class GetPermissionsRequest;
class GetPermissionsRequestDefaultTypeInternal;
extern GetPermissionsRequestDefaultTypeInternal _GetPermissionsRequest_default_instance_;
class GetPermissionsResponse;
class GetPermissionsResponseDefaultTypeInternal;
extern GetPermissionsResponseDefaultTypeInternal _GetPermissionsResponse_default_instance_;
class GetPermissionsResponse_Permission;
class GetPermissionsResponse_PermissionDefaultTypeInternal;
extern GetPermissionsResponse_PermissionDefaultTypeInternal _GetPermissionsResponse_Permission_default_instance_;
class GetSubgroupsRequest;
class GetSubgroupsRequestDefaultTypeInternal;
extern GetSubgroupsRequestDefaultTypeInternal _GetSubgroupsRequest_default_instance_;
class GetSubgroupsResponse;
class GetSubgroupsResponseDefaultTypeInternal;
extern GetSubgroupsResponseDefaultTypeInternal _GetSubgroupsResponse_default_instance_;
class IsPermittedRequest;
class IsPermittedRequestDefaultTypeInternal;
extern IsPermittedRequestDefaultTypeInternal _IsPermittedRequest_default_instance_;
class IsPermittedResponse;
class IsPermittedResponseDefaultTypeInternal;
extern IsPermittedResponseDefaultTypeInternal _IsPermittedResponse_default_instance_;
class RemoveMemberRequest;
class RemoveMemberRequestDefaultTypeInternal;
extern RemoveMemberRequestDefaultTypeInternal _RemoveMemberRequest_default_instance_;
class RemoveMemberResponse;
class RemoveMemberResponseDefaultTypeInternal;
extern RemoveMemberResponseDefaultTypeInternal _RemoveMemberResponse_default_instance_;
class RemovePermissionRequest;
class RemovePermissionRequestDefaultTypeInternal;
extern RemovePermissionRequestDefaultTypeInternal _RemovePermissionRequest_default_instance_;
class RemovePermissionResponse;
class RemovePermissionResponseDefaultTypeInternal;
extern RemovePermissionResponseDefaultTypeInternal _RemovePermissionResponse_default_instance_;
class RemoveSubgroupRequest;
class RemoveSubgroupRequestDefaultTypeInternal;
extern RemoveSubgroupRequestDefaultTypeInternal _RemoveSubgroupRequest_default_instance_;
class RemoveSubgroupResponse;
class RemoveSubgroupResponseDefaultTypeInternal;
extern RemoveSubgroupResponseDefaultTypeInternal _RemoveSubgroupResponse_default_instance_;
class UpdateGroupRequest;
class UpdateGroupRequestDefaultTypeInternal;
extern UpdateGroupRequestDefaultTypeInternal _UpdateGroupRequest_default_instance_;
class UpdateGroupResponse;
class UpdateGroupResponseDefaultTypeInternal;
extern UpdateGroupResponseDefaultTypeInternal _UpdateGroupResponse_default_instance_;
}  // namespace groups
}  // namespace mruv
PROTOBUF_NAMESPACE_OPEN
template<> ::mruv::groups::AddMemberRequest* Arena::CreateMaybeMessage<::mruv::groups::AddMemberRequest>(Arena*);
template<> ::mruv::groups::AddMemberResponse* Arena::CreateMaybeMessage<::mruv::groups::AddMemberResponse>(Arena*);
template<> ::mruv::groups::AddPermissionRequest* Arena::CreateMaybeMessage<::mruv::groups::AddPermissionRequest>(Arena*);
template<> ::mruv::groups::AddPermissionResponse* Arena::CreateMaybeMessage<::mruv::groups::AddPermissionResponse>(Arena*);
template<> ::mruv::groups::AddSubgroupRequest* Arena::CreateMaybeMessage<::mruv::groups::AddSubgroupRequest>(Arena*);
template<> ::mruv::groups::AddSubgroupResponse* Arena::CreateMaybeMessage<::mruv::groups::AddSubgroupResponse>(Arena*);
template<> ::mruv::groups::AssignOwnerRequest* Arena::CreateMaybeMessage<::mruv::groups::AssignOwnerRequest>(Arena*);
template<> ::mruv::groups::AssignOwnerResponse* Arena::CreateMaybeMessage<::mruv::groups::AssignOwnerResponse>(Arena*);
template<> ::mruv::groups::CreateGroupRequest* Arena::CreateMaybeMessage<::mruv::groups::CreateGroupRequest>(Arena*);
template<> ::mruv::groups::CreateGroupResponse* Arena::CreateMaybeMessage<::mruv::groups::CreateGroupResponse>(Arena*);
template<> ::mruv::groups::DeleteGroupRequest* Arena::CreateMaybeMessage<::mruv::groups::DeleteGroupRequest>(Arena*);
template<> ::mruv::groups::DeleteGroupResponse* Arena::CreateMaybeMessage<::mruv::groups::DeleteGroupResponse>(Arena*);
template<> ::mruv::groups::GetGroupRequest* Arena::CreateMaybeMessage<::mruv::groups::GetGroupRequest>(Arena*);
template<> ::mruv::groups::GetGroupResponse* Arena::CreateMaybeMessage<::mruv::groups::GetGroupResponse>(Arena*);
template<> ::mruv::groups::GetGroupsRequest* Arena::CreateMaybeMessage<::mruv::groups::GetGroupsRequest>(Arena*);
template<> ::mruv::groups::GetGroupsResponse* Arena::CreateMaybeMessage<::mruv::groups::GetGroupsResponse>(Arena*);
template<> ::mruv::groups::GetGroupsResponse_Group* Arena::CreateMaybeMessage<::mruv::groups::GetGroupsResponse_Group>(Arena*);
template<> ::mruv::groups::GetMembersRequest* Arena::CreateMaybeMessage<::mruv::groups::GetMembersRequest>(Arena*);
template<> ::mruv::groups::GetMembersResponse* Arena::CreateMaybeMessage<::mruv::groups::GetMembersResponse>(Arena*);
template<> ::mruv::groups::GetOwnerRequest* Arena::CreateMaybeMessage<::mruv::groups::GetOwnerRequest>(Arena*);
template<> ::mruv::groups::GetOwnerResponse* Arena::CreateMaybeMessage<::mruv::groups::GetOwnerResponse>(Arena*);
template<> ::mruv::groups::GetPermissionsRequest* Arena::CreateMaybeMessage<::mruv::groups::GetPermissionsRequest>(Arena*);
template<> ::mruv::groups::GetPermissionsResponse* Arena::CreateMaybeMessage<::mruv::groups::GetPermissionsResponse>(Arena*);
template<> ::mruv::groups::GetPermissionsResponse_Permission* Arena::CreateMaybeMessage<::mruv::groups::GetPermissionsResponse_Permission>(Arena*);
template<> ::mruv::groups::GetSubgroupsRequest* Arena::CreateMaybeMessage<::mruv::groups::GetSubgroupsRequest>(Arena*);
template<> ::mruv::groups::GetSubgroupsResponse* Arena::CreateMaybeMessage<::mruv::groups::GetSubgroupsResponse>(Arena*);
template<> ::mruv::groups::IsPermittedRequest* Arena::CreateMaybeMessage<::mruv::groups::IsPermittedRequest>(Arena*);
template<> ::mruv::groups::IsPermittedResponse* Arena::CreateMaybeMessage<::mruv::groups::IsPermittedResponse>(Arena*);
template<> ::mruv::groups::RemoveMemberRequest* Arena::CreateMaybeMessage<::mruv::groups::RemoveMemberRequest>(Arena*);
template<> ::mruv::groups::RemoveMemberResponse* Arena::CreateMaybeMessage<::mruv::groups::RemoveMemberResponse>(Arena*);
template<> ::mruv::groups::RemovePermissionRequest* Arena::CreateMaybeMessage<::mruv::groups::RemovePermissionRequest>(Arena*);
template<> ::mruv::groups::RemovePermissionResponse* Arena::CreateMaybeMessage<::mruv::groups::RemovePermissionResponse>(Arena*);
template<> ::mruv::groups::RemoveSubgroupRequest* Arena::CreateMaybeMessage<::mruv::groups::RemoveSubgroupRequest>(Arena*);
template<> ::mruv::groups::RemoveSubgroupResponse* Arena::CreateMaybeMessage<::mruv::groups::RemoveSubgroupResponse>(Arena*);
template<> ::mruv::groups::UpdateGroupRequest* Arena::CreateMaybeMessage<::mruv::groups::UpdateGroupRequest>(Arena*);
template<> ::mruv::groups::UpdateGroupResponse* Arena::CreateMaybeMessage<::mruv::groups::UpdateGroupResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mruv {
namespace groups {

enum OwnerType : int {
  OWNER_TYPE_UNKNOWN = 0,
  OWNER_TYPE_ACCOUNT = 1,
  OWNER_TYPE_CHARACTER = 2,
  OWNER_TYPE_GROUP = 3,
  OwnerType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OwnerType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OwnerType_IsValid(int value);
constexpr OwnerType OwnerType_MIN = OWNER_TYPE_UNKNOWN;
constexpr OwnerType OwnerType_MAX = OWNER_TYPE_GROUP;
constexpr int OwnerType_ARRAYSIZE = OwnerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OwnerType_descriptor();
template<typename T>
inline const std::string& OwnerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OwnerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OwnerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OwnerType_descriptor(), enum_t_value);
}
inline bool OwnerType_Parse(
    const std::string& name, OwnerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OwnerType>(
    OwnerType_descriptor(), name, value);
}
enum MemberType : int {
  MEMBER_TYPE_UNKNOWN = 0,
  MEMBER_TYPE_ACCOUNT = 1,
  MEMBER_TYPE_CHARACTER = 2,
  MemberType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MemberType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MemberType_IsValid(int value);
constexpr MemberType MemberType_MIN = MEMBER_TYPE_UNKNOWN;
constexpr MemberType MemberType_MAX = MEMBER_TYPE_CHARACTER;
constexpr int MemberType_ARRAYSIZE = MemberType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MemberType_descriptor();
template<typename T>
inline const std::string& MemberType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MemberType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MemberType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MemberType_descriptor(), enum_t_value);
}
inline bool MemberType_Parse(
    const std::string& name, MemberType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MemberType>(
    MemberType_descriptor(), name, value);
}
// ===================================================================

class CreateGroupRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.groups.CreateGroupRequest) */ {
 public:
  CreateGroupRequest();
  virtual ~CreateGroupRequest();

  CreateGroupRequest(const CreateGroupRequest& from);
  CreateGroupRequest(CreateGroupRequest&& from) noexcept
    : CreateGroupRequest() {
    *this = ::std::move(from);
  }

  inline CreateGroupRequest& operator=(const CreateGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateGroupRequest& operator=(CreateGroupRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateGroupRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateGroupRequest* internal_default_instance() {
    return reinterpret_cast<const CreateGroupRequest*>(
               &_CreateGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateGroupRequest& a, CreateGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateGroupRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateGroupRequest* New() const final {
    return CreateMaybeMessage<CreateGroupRequest>(nullptr);
  }

  CreateGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateGroupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateGroupRequest& from);
  void MergeFrom(const CreateGroupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateGroupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.groups.CreateGroupRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_groups_2fgroups_2eproto);
    return ::descriptor_table_groups_2fgroups_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // @@protoc_insertion_point(class_scope:mruv.groups.CreateGroupRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_groups_2fgroups_2eproto;
};
// -------------------------------------------------------------------

class CreateGroupResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.groups.CreateGroupResponse) */ {
 public:
  CreateGroupResponse();
  virtual ~CreateGroupResponse();

  CreateGroupResponse(const CreateGroupResponse& from);
  CreateGroupResponse(CreateGroupResponse&& from) noexcept
    : CreateGroupResponse() {
    *this = ::std::move(from);
  }

  inline CreateGroupResponse& operator=(const CreateGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateGroupResponse& operator=(CreateGroupResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateGroupResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateGroupResponse* internal_default_instance() {
    return reinterpret_cast<const CreateGroupResponse*>(
               &_CreateGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateGroupResponse& a, CreateGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateGroupResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateGroupResponse* New() const final {
    return CreateMaybeMessage<CreateGroupResponse>(nullptr);
  }

  CreateGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateGroupResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateGroupResponse& from);
  void MergeFrom(const CreateGroupResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateGroupResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.groups.CreateGroupResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_groups_2fgroups_2eproto);
    return ::descriptor_table_groups_2fgroups_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
  };
  // uint32 group_id = 1;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.groups.CreateGroupResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_groups_2fgroups_2eproto;
};
// -------------------------------------------------------------------

class GetGroupRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.groups.GetGroupRequest) */ {
 public:
  GetGroupRequest();
  virtual ~GetGroupRequest();

  GetGroupRequest(const GetGroupRequest& from);
  GetGroupRequest(GetGroupRequest&& from) noexcept
    : GetGroupRequest() {
    *this = ::std::move(from);
  }

  inline GetGroupRequest& operator=(const GetGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupRequest& operator=(GetGroupRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGroupRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGroupRequest* internal_default_instance() {
    return reinterpret_cast<const GetGroupRequest*>(
               &_GetGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetGroupRequest& a, GetGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGroupRequest* New() const final {
    return CreateMaybeMessage<GetGroupRequest>(nullptr);
  }

  GetGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGroupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGroupRequest& from);
  void MergeFrom(const GetGroupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.groups.GetGroupRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_groups_2fgroups_2eproto);
    return ::descriptor_table_groups_2fgroups_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
  };
  // uint32 group_id = 1;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.groups.GetGroupRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_groups_2fgroups_2eproto;
};
// -------------------------------------------------------------------

class GetGroupResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.groups.GetGroupResponse) */ {
 public:
  GetGroupResponse();
  virtual ~GetGroupResponse();

  GetGroupResponse(const GetGroupResponse& from);
  GetGroupResponse(GetGroupResponse&& from) noexcept
    : GetGroupResponse() {
    *this = ::std::move(from);
  }

  inline GetGroupResponse& operator=(const GetGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupResponse& operator=(GetGroupResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGroupResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGroupResponse* internal_default_instance() {
    return reinterpret_cast<const GetGroupResponse*>(
               &_GetGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetGroupResponse& a, GetGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGroupResponse* New() const final {
    return CreateMaybeMessage<GetGroupResponse>(nullptr);
  }

  GetGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGroupResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGroupResponse& from);
  void MergeFrom(const GetGroupResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.groups.GetGroupResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_groups_2fgroups_2eproto);
    return ::descriptor_table_groups_2fgroups_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // @@protoc_insertion_point(class_scope:mruv.groups.GetGroupResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_groups_2fgroups_2eproto;
};
// -------------------------------------------------------------------

class UpdateGroupRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.groups.UpdateGroupRequest) */ {
 public:
  UpdateGroupRequest();
  virtual ~UpdateGroupRequest();

  UpdateGroupRequest(const UpdateGroupRequest& from);
  UpdateGroupRequest(UpdateGroupRequest&& from) noexcept
    : UpdateGroupRequest() {
    *this = ::std::move(from);
  }

  inline UpdateGroupRequest& operator=(const UpdateGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateGroupRequest& operator=(UpdateGroupRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateGroupRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateGroupRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateGroupRequest*>(
               &_UpdateGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UpdateGroupRequest& a, UpdateGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateGroupRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateGroupRequest* New() const final {
    return CreateMaybeMessage<UpdateGroupRequest>(nullptr);
  }

  UpdateGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateGroupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateGroupRequest& from);
  void MergeFrom(const UpdateGroupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateGroupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.groups.UpdateGroupRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_groups_2fgroups_2eproto);
    return ::descriptor_table_groups_2fgroups_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kGroupIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // uint32 group_id = 1;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.groups.UpdateGroupRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_groups_2fgroups_2eproto;
};
// -------------------------------------------------------------------

class UpdateGroupResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.groups.UpdateGroupResponse) */ {
 public:
  UpdateGroupResponse();
  virtual ~UpdateGroupResponse();

  UpdateGroupResponse(const UpdateGroupResponse& from);
  UpdateGroupResponse(UpdateGroupResponse&& from) noexcept
    : UpdateGroupResponse() {
    *this = ::std::move(from);
  }

  inline UpdateGroupResponse& operator=(const UpdateGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateGroupResponse& operator=(UpdateGroupResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateGroupResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateGroupResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateGroupResponse*>(
               &_UpdateGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UpdateGroupResponse& a, UpdateGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateGroupResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateGroupResponse* New() const final {
    return CreateMaybeMessage<UpdateGroupResponse>(nullptr);
  }

  UpdateGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateGroupResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateGroupResponse& from);
  void MergeFrom(const UpdateGroupResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateGroupResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.groups.UpdateGroupResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_groups_2fgroups_2eproto);
    return ::descriptor_table_groups_2fgroups_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.groups.UpdateGroupResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_groups_2fgroups_2eproto;
};
// -------------------------------------------------------------------

class DeleteGroupRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.groups.DeleteGroupRequest) */ {
 public:
  DeleteGroupRequest();
  virtual ~DeleteGroupRequest();

  DeleteGroupRequest(const DeleteGroupRequest& from);
  DeleteGroupRequest(DeleteGroupRequest&& from) noexcept
    : DeleteGroupRequest() {
    *this = ::std::move(from);
  }

  inline DeleteGroupRequest& operator=(const DeleteGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteGroupRequest& operator=(DeleteGroupRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteGroupRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteGroupRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteGroupRequest*>(
               &_DeleteGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DeleteGroupRequest& a, DeleteGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteGroupRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteGroupRequest* New() const final {
    return CreateMaybeMessage<DeleteGroupRequest>(nullptr);
  }

  DeleteGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteGroupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteGroupRequest& from);
  void MergeFrom(const DeleteGroupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteGroupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.groups.DeleteGroupRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_groups_2fgroups_2eproto);
    return ::descriptor_table_groups_2fgroups_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
  };
  // uint32 group_id = 1;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.groups.DeleteGroupRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_groups_2fgroups_2eproto;
};
// -------------------------------------------------------------------

class DeleteGroupResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.groups.DeleteGroupResponse) */ {
 public:
  DeleteGroupResponse();
  virtual ~DeleteGroupResponse();

  DeleteGroupResponse(const DeleteGroupResponse& from);
  DeleteGroupResponse(DeleteGroupResponse&& from) noexcept
    : DeleteGroupResponse() {
    *this = ::std::move(from);
  }

  inline DeleteGroupResponse& operator=(const DeleteGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteGroupResponse& operator=(DeleteGroupResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteGroupResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteGroupResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteGroupResponse*>(
               &_DeleteGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeleteGroupResponse& a, DeleteGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteGroupResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteGroupResponse* New() const final {
    return CreateMaybeMessage<DeleteGroupResponse>(nullptr);
  }

  DeleteGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteGroupResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteGroupResponse& from);
  void MergeFrom(const DeleteGroupResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteGroupResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.groups.DeleteGroupResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_groups_2fgroups_2eproto);
    return ::descriptor_table_groups_2fgroups_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.groups.DeleteGroupResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_groups_2fgroups_2eproto;
};
// -------------------------------------------------------------------

class GetGroupsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.groups.GetGroupsRequest) */ {
 public:
  GetGroupsRequest();
  virtual ~GetGroupsRequest();

  GetGroupsRequest(const GetGroupsRequest& from);
  GetGroupsRequest(GetGroupsRequest&& from) noexcept
    : GetGroupsRequest() {
    *this = ::std::move(from);
  }

  inline GetGroupsRequest& operator=(const GetGroupsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupsRequest& operator=(GetGroupsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGroupsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGroupsRequest* internal_default_instance() {
    return reinterpret_cast<const GetGroupsRequest*>(
               &_GetGroupsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetGroupsRequest& a, GetGroupsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGroupsRequest* New() const final {
    return CreateMaybeMessage<GetGroupsRequest>(nullptr);
  }

  GetGroupsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGroupsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGroupsRequest& from);
  void MergeFrom(const GetGroupsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.groups.GetGroupsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_groups_2fgroups_2eproto);
    return ::descriptor_table_groups_2fgroups_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLimitFieldNumber = 1,
    kBeginFromFieldNumber = 2,
  };
  // uint32 limit = 1;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 begin_from = 2;
  void clear_begin_from();
  ::PROTOBUF_NAMESPACE_ID::uint32 begin_from() const;
  void set_begin_from(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_begin_from() const;
  void _internal_set_begin_from(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.groups.GetGroupsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 limit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 begin_from_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_groups_2fgroups_2eproto;
};
// -------------------------------------------------------------------

class GetGroupsResponse_Group :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.groups.GetGroupsResponse.Group) */ {
 public:
  GetGroupsResponse_Group();
  virtual ~GetGroupsResponse_Group();

  GetGroupsResponse_Group(const GetGroupsResponse_Group& from);
  GetGroupsResponse_Group(GetGroupsResponse_Group&& from) noexcept
    : GetGroupsResponse_Group() {
    *this = ::std::move(from);
  }

  inline GetGroupsResponse_Group& operator=(const GetGroupsResponse_Group& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupsResponse_Group& operator=(GetGroupsResponse_Group&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGroupsResponse_Group& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGroupsResponse_Group* internal_default_instance() {
    return reinterpret_cast<const GetGroupsResponse_Group*>(
               &_GetGroupsResponse_Group_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetGroupsResponse_Group& a, GetGroupsResponse_Group& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupsResponse_Group* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGroupsResponse_Group* New() const final {
    return CreateMaybeMessage<GetGroupsResponse_Group>(nullptr);
  }

  GetGroupsResponse_Group* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGroupsResponse_Group>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGroupsResponse_Group& from);
  void MergeFrom(const GetGroupsResponse_Group& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupsResponse_Group* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.groups.GetGroupsResponse.Group";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_groups_2fgroups_2eproto);
    return ::descriptor_table_groups_2fgroups_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.groups.GetGroupsResponse.Group)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_groups_2fgroups_2eproto;
};
// -------------------------------------------------------------------

class GetGroupsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.groups.GetGroupsResponse) */ {
 public:
  GetGroupsResponse();
  virtual ~GetGroupsResponse();

  GetGroupsResponse(const GetGroupsResponse& from);
  GetGroupsResponse(GetGroupsResponse&& from) noexcept
    : GetGroupsResponse() {
    *this = ::std::move(from);
  }

  inline GetGroupsResponse& operator=(const GetGroupsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupsResponse& operator=(GetGroupsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGroupsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGroupsResponse* internal_default_instance() {
    return reinterpret_cast<const GetGroupsResponse*>(
               &_GetGroupsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetGroupsResponse& a, GetGroupsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGroupsResponse* New() const final {
    return CreateMaybeMessage<GetGroupsResponse>(nullptr);
  }

  GetGroupsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGroupsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGroupsResponse& from);
  void MergeFrom(const GetGroupsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.groups.GetGroupsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_groups_2fgroups_2eproto);
    return ::descriptor_table_groups_2fgroups_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetGroupsResponse_Group Group;

  // accessors -------------------------------------------------------

  enum : int {
    kGroupsFieldNumber = 1,
  };
  // repeated .mruv.groups.GetGroupsResponse.Group groups = 1;
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  ::mruv::groups::GetGroupsResponse_Group* mutable_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::groups::GetGroupsResponse_Group >*
      mutable_groups();
  private:
  const ::mruv::groups::GetGroupsResponse_Group& _internal_groups(int index) const;
  ::mruv::groups::GetGroupsResponse_Group* _internal_add_groups();
  public:
  const ::mruv::groups::GetGroupsResponse_Group& groups(int index) const;
  ::mruv::groups::GetGroupsResponse_Group* add_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::groups::GetGroupsResponse_Group >&
      groups() const;

  // @@protoc_insertion_point(class_scope:mruv.groups.GetGroupsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::groups::GetGroupsResponse_Group > groups_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_groups_2fgroups_2eproto;
};
// -------------------------------------------------------------------

class AssignOwnerRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.groups.AssignOwnerRequest) */ {
 public:
  AssignOwnerRequest();
  virtual ~AssignOwnerRequest();

  AssignOwnerRequest(const AssignOwnerRequest& from);
  AssignOwnerRequest(AssignOwnerRequest&& from) noexcept
    : AssignOwnerRequest() {
    *this = ::std::move(from);
  }

  inline AssignOwnerRequest& operator=(const AssignOwnerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssignOwnerRequest& operator=(AssignOwnerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AssignOwnerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AssignOwnerRequest* internal_default_instance() {
    return reinterpret_cast<const AssignOwnerRequest*>(
               &_AssignOwnerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(AssignOwnerRequest& a, AssignOwnerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AssignOwnerRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AssignOwnerRequest* New() const final {
    return CreateMaybeMessage<AssignOwnerRequest>(nullptr);
  }

  AssignOwnerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AssignOwnerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AssignOwnerRequest& from);
  void MergeFrom(const AssignOwnerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssignOwnerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.groups.AssignOwnerRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_groups_2fgroups_2eproto);
    return ::descriptor_table_groups_2fgroups_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kOwnerIdFieldNumber = 2,
    kOwnerTypeFieldNumber = 3,
  };
  // uint32 group_id = 1;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 owner_id = 2;
  void clear_owner_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_id() const;
  void set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_owner_id() const;
  void _internal_set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .mruv.groups.OwnerType owner_type = 3;
  void clear_owner_type();
  ::mruv::groups::OwnerType owner_type() const;
  void set_owner_type(::mruv::groups::OwnerType value);
  private:
  ::mruv::groups::OwnerType _internal_owner_type() const;
  void _internal_set_owner_type(::mruv::groups::OwnerType value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.groups.AssignOwnerRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_id_;
  int owner_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_groups_2fgroups_2eproto;
};
// -------------------------------------------------------------------

class AssignOwnerResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.groups.AssignOwnerResponse) */ {
 public:
  AssignOwnerResponse();
  virtual ~AssignOwnerResponse();

  AssignOwnerResponse(const AssignOwnerResponse& from);
  AssignOwnerResponse(AssignOwnerResponse&& from) noexcept
    : AssignOwnerResponse() {
    *this = ::std::move(from);
  }

  inline AssignOwnerResponse& operator=(const AssignOwnerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssignOwnerResponse& operator=(AssignOwnerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AssignOwnerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AssignOwnerResponse* internal_default_instance() {
    return reinterpret_cast<const AssignOwnerResponse*>(
               &_AssignOwnerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(AssignOwnerResponse& a, AssignOwnerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AssignOwnerResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AssignOwnerResponse* New() const final {
    return CreateMaybeMessage<AssignOwnerResponse>(nullptr);
  }

  AssignOwnerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AssignOwnerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AssignOwnerResponse& from);
  void MergeFrom(const AssignOwnerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssignOwnerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.groups.AssignOwnerResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_groups_2fgroups_2eproto);
    return ::descriptor_table_groups_2fgroups_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.groups.AssignOwnerResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_groups_2fgroups_2eproto;
};
// -------------------------------------------------------------------

class GetOwnerRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.groups.GetOwnerRequest) */ {
 public:
  GetOwnerRequest();
  virtual ~GetOwnerRequest();

  GetOwnerRequest(const GetOwnerRequest& from);
  GetOwnerRequest(GetOwnerRequest&& from) noexcept
    : GetOwnerRequest() {
    *this = ::std::move(from);
  }

  inline GetOwnerRequest& operator=(const GetOwnerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOwnerRequest& operator=(GetOwnerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetOwnerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOwnerRequest* internal_default_instance() {
    return reinterpret_cast<const GetOwnerRequest*>(
               &_GetOwnerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetOwnerRequest& a, GetOwnerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOwnerRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOwnerRequest* New() const final {
    return CreateMaybeMessage<GetOwnerRequest>(nullptr);
  }

  GetOwnerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOwnerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetOwnerRequest& from);
  void MergeFrom(const GetOwnerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOwnerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.groups.GetOwnerRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_groups_2fgroups_2eproto);
    return ::descriptor_table_groups_2fgroups_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
  };
  // uint32 group_id = 1;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.groups.GetOwnerRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_groups_2fgroups_2eproto;
};
// -------------------------------------------------------------------

class GetOwnerResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.groups.GetOwnerResponse) */ {
 public:
  GetOwnerResponse();
  virtual ~GetOwnerResponse();

  GetOwnerResponse(const GetOwnerResponse& from);
  GetOwnerResponse(GetOwnerResponse&& from) noexcept
    : GetOwnerResponse() {
    *this = ::std::move(from);
  }

  inline GetOwnerResponse& operator=(const GetOwnerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOwnerResponse& operator=(GetOwnerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetOwnerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOwnerResponse* internal_default_instance() {
    return reinterpret_cast<const GetOwnerResponse*>(
               &_GetOwnerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GetOwnerResponse& a, GetOwnerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOwnerResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOwnerResponse* New() const final {
    return CreateMaybeMessage<GetOwnerResponse>(nullptr);
  }

  GetOwnerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOwnerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetOwnerResponse& from);
  void MergeFrom(const GetOwnerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOwnerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.groups.GetOwnerResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_groups_2fgroups_2eproto);
    return ::descriptor_table_groups_2fgroups_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerIdFieldNumber = 1,
    kOwnerTypeFieldNumber = 2,
  };
  // uint32 owner_id = 1;
  void clear_owner_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_id() const;
  void set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_owner_id() const;
  void _internal_set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .mruv.groups.OwnerType owner_type = 2;
  void clear_owner_type();
  ::mruv::groups::OwnerType owner_type() const;
  void set_owner_type(::mruv::groups::OwnerType value);
  private:
  ::mruv::groups::OwnerType _internal_owner_type() const;
  void _internal_set_owner_type(::mruv::groups::OwnerType value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.groups.GetOwnerResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_id_;
  int owner_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_groups_2fgroups_2eproto;
};
// -------------------------------------------------------------------

class AddMemberRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.groups.AddMemberRequest) */ {
 public:
  AddMemberRequest();
  virtual ~AddMemberRequest();

  AddMemberRequest(const AddMemberRequest& from);
  AddMemberRequest(AddMemberRequest&& from) noexcept
    : AddMemberRequest() {
    *this = ::std::move(from);
  }

  inline AddMemberRequest& operator=(const AddMemberRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddMemberRequest& operator=(AddMemberRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddMemberRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddMemberRequest* internal_default_instance() {
    return reinterpret_cast<const AddMemberRequest*>(
               &_AddMemberRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(AddMemberRequest& a, AddMemberRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddMemberRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddMemberRequest* New() const final {
    return CreateMaybeMessage<AddMemberRequest>(nullptr);
  }

  AddMemberRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddMemberRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddMemberRequest& from);
  void MergeFrom(const AddMemberRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddMemberRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.groups.AddMemberRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_groups_2fgroups_2eproto);
    return ::descriptor_table_groups_2fgroups_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kMemberIdFieldNumber = 2,
  };
  // uint32 group_id = 1;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 member_id = 2;
  void clear_member_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 member_id() const;
  void set_member_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_member_id() const;
  void _internal_set_member_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.groups.AddMemberRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 member_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_groups_2fgroups_2eproto;
};
// -------------------------------------------------------------------

class AddMemberResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.groups.AddMemberResponse) */ {
 public:
  AddMemberResponse();
  virtual ~AddMemberResponse();

  AddMemberResponse(const AddMemberResponse& from);
  AddMemberResponse(AddMemberResponse&& from) noexcept
    : AddMemberResponse() {
    *this = ::std::move(from);
  }

  inline AddMemberResponse& operator=(const AddMemberResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddMemberResponse& operator=(AddMemberResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddMemberResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddMemberResponse* internal_default_instance() {
    return reinterpret_cast<const AddMemberResponse*>(
               &_AddMemberResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(AddMemberResponse& a, AddMemberResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddMemberResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddMemberResponse* New() const final {
    return CreateMaybeMessage<AddMemberResponse>(nullptr);
  }

  AddMemberResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddMemberResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddMemberResponse& from);
  void MergeFrom(const AddMemberResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddMemberResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.groups.AddMemberResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_groups_2fgroups_2eproto);
    return ::descriptor_table_groups_2fgroups_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.groups.AddMemberResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_groups_2fgroups_2eproto;
};
// -------------------------------------------------------------------

class GetMembersRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.groups.GetMembersRequest) */ {
 public:
  GetMembersRequest();
  virtual ~GetMembersRequest();

  GetMembersRequest(const GetMembersRequest& from);
  GetMembersRequest(GetMembersRequest&& from) noexcept
    : GetMembersRequest() {
    *this = ::std::move(from);
  }

  inline GetMembersRequest& operator=(const GetMembersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMembersRequest& operator=(GetMembersRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMembersRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMembersRequest* internal_default_instance() {
    return reinterpret_cast<const GetMembersRequest*>(
               &_GetMembersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GetMembersRequest& a, GetMembersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMembersRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMembersRequest* New() const final {
    return CreateMaybeMessage<GetMembersRequest>(nullptr);
  }

  GetMembersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMembersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMembersRequest& from);
  void MergeFrom(const GetMembersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMembersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.groups.GetMembersRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_groups_2fgroups_2eproto);
    return ::descriptor_table_groups_2fgroups_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
  };
  // uint32 group_id = 1;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.groups.GetMembersRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_groups_2fgroups_2eproto;
};
// -------------------------------------------------------------------

class GetMembersResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.groups.GetMembersResponse) */ {
 public:
  GetMembersResponse();
  virtual ~GetMembersResponse();

  GetMembersResponse(const GetMembersResponse& from);
  GetMembersResponse(GetMembersResponse&& from) noexcept
    : GetMembersResponse() {
    *this = ::std::move(from);
  }

  inline GetMembersResponse& operator=(const GetMembersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMembersResponse& operator=(GetMembersResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMembersResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMembersResponse* internal_default_instance() {
    return reinterpret_cast<const GetMembersResponse*>(
               &_GetMembersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GetMembersResponse& a, GetMembersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMembersResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMembersResponse* New() const final {
    return CreateMaybeMessage<GetMembersResponse>(nullptr);
  }

  GetMembersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMembersResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMembersResponse& from);
  void MergeFrom(const GetMembersResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMembersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.groups.GetMembersResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_groups_2fgroups_2eproto);
    return ::descriptor_table_groups_2fgroups_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberIdsFieldNumber = 2,
    kMemberTypeFieldNumber = 1,
  };
  // repeated uint32 member_ids = 2;
  int member_ids_size() const;
  private:
  int _internal_member_ids_size() const;
  public:
  void clear_member_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_member_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_member_ids() const;
  void _internal_add_member_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_member_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 member_ids(int index) const;
  void set_member_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_member_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      member_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_member_ids();

  // .mruv.groups.MemberType member_type = 1;
  void clear_member_type();
  ::mruv::groups::MemberType member_type() const;
  void set_member_type(::mruv::groups::MemberType value);
  private:
  ::mruv::groups::MemberType _internal_member_type() const;
  void _internal_set_member_type(::mruv::groups::MemberType value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.groups.GetMembersResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > member_ids_;
  mutable std::atomic<int> _member_ids_cached_byte_size_;
  int member_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_groups_2fgroups_2eproto;
};
// -------------------------------------------------------------------

class RemoveMemberRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.groups.RemoveMemberRequest) */ {
 public:
  RemoveMemberRequest();
  virtual ~RemoveMemberRequest();

  RemoveMemberRequest(const RemoveMemberRequest& from);
  RemoveMemberRequest(RemoveMemberRequest&& from) noexcept
    : RemoveMemberRequest() {
    *this = ::std::move(from);
  }

  inline RemoveMemberRequest& operator=(const RemoveMemberRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveMemberRequest& operator=(RemoveMemberRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveMemberRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveMemberRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveMemberRequest*>(
               &_RemoveMemberRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(RemoveMemberRequest& a, RemoveMemberRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveMemberRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveMemberRequest* New() const final {
    return CreateMaybeMessage<RemoveMemberRequest>(nullptr);
  }

  RemoveMemberRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveMemberRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveMemberRequest& from);
  void MergeFrom(const RemoveMemberRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveMemberRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.groups.RemoveMemberRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_groups_2fgroups_2eproto);
    return ::descriptor_table_groups_2fgroups_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kMemberIdFieldNumber = 2,
  };
  // uint32 group_id = 1;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 member_id = 2;
  void clear_member_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 member_id() const;
  void set_member_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_member_id() const;
  void _internal_set_member_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.groups.RemoveMemberRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 member_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_groups_2fgroups_2eproto;
};
// -------------------------------------------------------------------

class RemoveMemberResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.groups.RemoveMemberResponse) */ {
 public:
  RemoveMemberResponse();
  virtual ~RemoveMemberResponse();

  RemoveMemberResponse(const RemoveMemberResponse& from);
  RemoveMemberResponse(RemoveMemberResponse&& from) noexcept
    : RemoveMemberResponse() {
    *this = ::std::move(from);
  }

  inline RemoveMemberResponse& operator=(const RemoveMemberResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveMemberResponse& operator=(RemoveMemberResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveMemberResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveMemberResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveMemberResponse*>(
               &_RemoveMemberResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(RemoveMemberResponse& a, RemoveMemberResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveMemberResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveMemberResponse* New() const final {
    return CreateMaybeMessage<RemoveMemberResponse>(nullptr);
  }

  RemoveMemberResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveMemberResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveMemberResponse& from);
  void MergeFrom(const RemoveMemberResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveMemberResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.groups.RemoveMemberResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_groups_2fgroups_2eproto);
    return ::descriptor_table_groups_2fgroups_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.groups.RemoveMemberResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_groups_2fgroups_2eproto;
};
// -------------------------------------------------------------------

class AddPermissionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.groups.AddPermissionRequest) */ {
 public:
  AddPermissionRequest();
  virtual ~AddPermissionRequest();

  AddPermissionRequest(const AddPermissionRequest& from);
  AddPermissionRequest(AddPermissionRequest&& from) noexcept
    : AddPermissionRequest() {
    *this = ::std::move(from);
  }

  inline AddPermissionRequest& operator=(const AddPermissionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddPermissionRequest& operator=(AddPermissionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddPermissionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddPermissionRequest* internal_default_instance() {
    return reinterpret_cast<const AddPermissionRequest*>(
               &_AddPermissionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(AddPermissionRequest& a, AddPermissionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddPermissionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddPermissionRequest* New() const final {
    return CreateMaybeMessage<AddPermissionRequest>(nullptr);
  }

  AddPermissionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddPermissionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddPermissionRequest& from);
  void MergeFrom(const AddPermissionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddPermissionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.groups.AddPermissionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_groups_2fgroups_2eproto);
    return ::descriptor_table_groups_2fgroups_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kDefinitionFieldNumber = 3,
    kGroupIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string definition = 3;
  void clear_definition();
  const std::string& definition() const;
  void set_definition(const std::string& value);
  void set_definition(std::string&& value);
  void set_definition(const char* value);
  void set_definition(const char* value, size_t size);
  std::string* mutable_definition();
  std::string* release_definition();
  void set_allocated_definition(std::string* definition);
  private:
  const std::string& _internal_definition() const;
  void _internal_set_definition(const std::string& value);
  std::string* _internal_mutable_definition();
  public:

  // uint32 group_id = 1;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.groups.AddPermissionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr definition_;
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_groups_2fgroups_2eproto;
};
// -------------------------------------------------------------------

class AddPermissionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.groups.AddPermissionResponse) */ {
 public:
  AddPermissionResponse();
  virtual ~AddPermissionResponse();

  AddPermissionResponse(const AddPermissionResponse& from);
  AddPermissionResponse(AddPermissionResponse&& from) noexcept
    : AddPermissionResponse() {
    *this = ::std::move(from);
  }

  inline AddPermissionResponse& operator=(const AddPermissionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddPermissionResponse& operator=(AddPermissionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddPermissionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddPermissionResponse* internal_default_instance() {
    return reinterpret_cast<const AddPermissionResponse*>(
               &_AddPermissionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(AddPermissionResponse& a, AddPermissionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddPermissionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddPermissionResponse* New() const final {
    return CreateMaybeMessage<AddPermissionResponse>(nullptr);
  }

  AddPermissionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddPermissionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddPermissionResponse& from);
  void MergeFrom(const AddPermissionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddPermissionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.groups.AddPermissionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_groups_2fgroups_2eproto);
    return ::descriptor_table_groups_2fgroups_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPermissionIdFieldNumber = 1,
  };
  // uint32 permission_id = 1;
  void clear_permission_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 permission_id() const;
  void set_permission_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_permission_id() const;
  void _internal_set_permission_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.groups.AddPermissionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 permission_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_groups_2fgroups_2eproto;
};
// -------------------------------------------------------------------

class GetPermissionsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.groups.GetPermissionsRequest) */ {
 public:
  GetPermissionsRequest();
  virtual ~GetPermissionsRequest();

  GetPermissionsRequest(const GetPermissionsRequest& from);
  GetPermissionsRequest(GetPermissionsRequest&& from) noexcept
    : GetPermissionsRequest() {
    *this = ::std::move(from);
  }

  inline GetPermissionsRequest& operator=(const GetPermissionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPermissionsRequest& operator=(GetPermissionsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPermissionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPermissionsRequest* internal_default_instance() {
    return reinterpret_cast<const GetPermissionsRequest*>(
               &_GetPermissionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(GetPermissionsRequest& a, GetPermissionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPermissionsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPermissionsRequest* New() const final {
    return CreateMaybeMessage<GetPermissionsRequest>(nullptr);
  }

  GetPermissionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPermissionsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPermissionsRequest& from);
  void MergeFrom(const GetPermissionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPermissionsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.groups.GetPermissionsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_groups_2fgroups_2eproto);
    return ::descriptor_table_groups_2fgroups_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
  };
  // uint32 group_id = 1;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.groups.GetPermissionsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_groups_2fgroups_2eproto;
};
// -------------------------------------------------------------------

class GetPermissionsResponse_Permission :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.groups.GetPermissionsResponse.Permission) */ {
 public:
  GetPermissionsResponse_Permission();
  virtual ~GetPermissionsResponse_Permission();

  GetPermissionsResponse_Permission(const GetPermissionsResponse_Permission& from);
  GetPermissionsResponse_Permission(GetPermissionsResponse_Permission&& from) noexcept
    : GetPermissionsResponse_Permission() {
    *this = ::std::move(from);
  }

  inline GetPermissionsResponse_Permission& operator=(const GetPermissionsResponse_Permission& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPermissionsResponse_Permission& operator=(GetPermissionsResponse_Permission&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPermissionsResponse_Permission& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPermissionsResponse_Permission* internal_default_instance() {
    return reinterpret_cast<const GetPermissionsResponse_Permission*>(
               &_GetPermissionsResponse_Permission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(GetPermissionsResponse_Permission& a, GetPermissionsResponse_Permission& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPermissionsResponse_Permission* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPermissionsResponse_Permission* New() const final {
    return CreateMaybeMessage<GetPermissionsResponse_Permission>(nullptr);
  }

  GetPermissionsResponse_Permission* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPermissionsResponse_Permission>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPermissionsResponse_Permission& from);
  void MergeFrom(const GetPermissionsResponse_Permission& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPermissionsResponse_Permission* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.groups.GetPermissionsResponse.Permission";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_groups_2fgroups_2eproto);
    return ::descriptor_table_groups_2fgroups_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kDefinitionFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string definition = 3;
  void clear_definition();
  const std::string& definition() const;
  void set_definition(const std::string& value);
  void set_definition(std::string&& value);
  void set_definition(const char* value);
  void set_definition(const char* value, size_t size);
  std::string* mutable_definition();
  std::string* release_definition();
  void set_allocated_definition(std::string* definition);
  private:
  const std::string& _internal_definition() const;
  void _internal_set_definition(const std::string& value);
  std::string* _internal_mutable_definition();
  public:

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.groups.GetPermissionsResponse.Permission)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr definition_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_groups_2fgroups_2eproto;
};
// -------------------------------------------------------------------

class GetPermissionsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.groups.GetPermissionsResponse) */ {
 public:
  GetPermissionsResponse();
  virtual ~GetPermissionsResponse();

  GetPermissionsResponse(const GetPermissionsResponse& from);
  GetPermissionsResponse(GetPermissionsResponse&& from) noexcept
    : GetPermissionsResponse() {
    *this = ::std::move(from);
  }

  inline GetPermissionsResponse& operator=(const GetPermissionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPermissionsResponse& operator=(GetPermissionsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPermissionsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPermissionsResponse* internal_default_instance() {
    return reinterpret_cast<const GetPermissionsResponse*>(
               &_GetPermissionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(GetPermissionsResponse& a, GetPermissionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPermissionsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPermissionsResponse* New() const final {
    return CreateMaybeMessage<GetPermissionsResponse>(nullptr);
  }

  GetPermissionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPermissionsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPermissionsResponse& from);
  void MergeFrom(const GetPermissionsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPermissionsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.groups.GetPermissionsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_groups_2fgroups_2eproto);
    return ::descriptor_table_groups_2fgroups_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetPermissionsResponse_Permission Permission;

  // accessors -------------------------------------------------------

  enum : int {
    kPermissionsFieldNumber = 1,
  };
  // repeated .mruv.groups.GetPermissionsResponse.Permission permissions = 1;
  int permissions_size() const;
  private:
  int _internal_permissions_size() const;
  public:
  void clear_permissions();
  ::mruv::groups::GetPermissionsResponse_Permission* mutable_permissions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::groups::GetPermissionsResponse_Permission >*
      mutable_permissions();
  private:
  const ::mruv::groups::GetPermissionsResponse_Permission& _internal_permissions(int index) const;
  ::mruv::groups::GetPermissionsResponse_Permission* _internal_add_permissions();
  public:
  const ::mruv::groups::GetPermissionsResponse_Permission& permissions(int index) const;
  ::mruv::groups::GetPermissionsResponse_Permission* add_permissions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::groups::GetPermissionsResponse_Permission >&
      permissions() const;

  // @@protoc_insertion_point(class_scope:mruv.groups.GetPermissionsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::groups::GetPermissionsResponse_Permission > permissions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_groups_2fgroups_2eproto;
};
// -------------------------------------------------------------------

class RemovePermissionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.groups.RemovePermissionRequest) */ {
 public:
  RemovePermissionRequest();
  virtual ~RemovePermissionRequest();

  RemovePermissionRequest(const RemovePermissionRequest& from);
  RemovePermissionRequest(RemovePermissionRequest&& from) noexcept
    : RemovePermissionRequest() {
    *this = ::std::move(from);
  }

  inline RemovePermissionRequest& operator=(const RemovePermissionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemovePermissionRequest& operator=(RemovePermissionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemovePermissionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemovePermissionRequest* internal_default_instance() {
    return reinterpret_cast<const RemovePermissionRequest*>(
               &_RemovePermissionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(RemovePermissionRequest& a, RemovePermissionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemovePermissionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemovePermissionRequest* New() const final {
    return CreateMaybeMessage<RemovePermissionRequest>(nullptr);
  }

  RemovePermissionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemovePermissionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemovePermissionRequest& from);
  void MergeFrom(const RemovePermissionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemovePermissionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.groups.RemovePermissionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_groups_2fgroups_2eproto);
    return ::descriptor_table_groups_2fgroups_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kPermissionIdFieldNumber = 2,
  };
  // uint32 group_id = 1;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 permission_id = 2;
  void clear_permission_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 permission_id() const;
  void set_permission_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_permission_id() const;
  void _internal_set_permission_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.groups.RemovePermissionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 permission_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_groups_2fgroups_2eproto;
};
// -------------------------------------------------------------------

class RemovePermissionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.groups.RemovePermissionResponse) */ {
 public:
  RemovePermissionResponse();
  virtual ~RemovePermissionResponse();

  RemovePermissionResponse(const RemovePermissionResponse& from);
  RemovePermissionResponse(RemovePermissionResponse&& from) noexcept
    : RemovePermissionResponse() {
    *this = ::std::move(from);
  }

  inline RemovePermissionResponse& operator=(const RemovePermissionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemovePermissionResponse& operator=(RemovePermissionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemovePermissionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemovePermissionResponse* internal_default_instance() {
    return reinterpret_cast<const RemovePermissionResponse*>(
               &_RemovePermissionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(RemovePermissionResponse& a, RemovePermissionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemovePermissionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemovePermissionResponse* New() const final {
    return CreateMaybeMessage<RemovePermissionResponse>(nullptr);
  }

  RemovePermissionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemovePermissionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemovePermissionResponse& from);
  void MergeFrom(const RemovePermissionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemovePermissionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.groups.RemovePermissionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_groups_2fgroups_2eproto);
    return ::descriptor_table_groups_2fgroups_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.groups.RemovePermissionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_groups_2fgroups_2eproto;
};
// -------------------------------------------------------------------

class AddSubgroupRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.groups.AddSubgroupRequest) */ {
 public:
  AddSubgroupRequest();
  virtual ~AddSubgroupRequest();

  AddSubgroupRequest(const AddSubgroupRequest& from);
  AddSubgroupRequest(AddSubgroupRequest&& from) noexcept
    : AddSubgroupRequest() {
    *this = ::std::move(from);
  }

  inline AddSubgroupRequest& operator=(const AddSubgroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddSubgroupRequest& operator=(AddSubgroupRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddSubgroupRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddSubgroupRequest* internal_default_instance() {
    return reinterpret_cast<const AddSubgroupRequest*>(
               &_AddSubgroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(AddSubgroupRequest& a, AddSubgroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddSubgroupRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddSubgroupRequest* New() const final {
    return CreateMaybeMessage<AddSubgroupRequest>(nullptr);
  }

  AddSubgroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddSubgroupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddSubgroupRequest& from);
  void MergeFrom(const AddSubgroupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddSubgroupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.groups.AddSubgroupRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_groups_2fgroups_2eproto);
    return ::descriptor_table_groups_2fgroups_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kSubgroupIdFieldNumber = 2,
  };
  // uint32 group_id = 1;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 subgroup_id = 2;
  void clear_subgroup_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 subgroup_id() const;
  void set_subgroup_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_subgroup_id() const;
  void _internal_set_subgroup_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.groups.AddSubgroupRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 subgroup_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_groups_2fgroups_2eproto;
};
// -------------------------------------------------------------------

class AddSubgroupResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.groups.AddSubgroupResponse) */ {
 public:
  AddSubgroupResponse();
  virtual ~AddSubgroupResponse();

  AddSubgroupResponse(const AddSubgroupResponse& from);
  AddSubgroupResponse(AddSubgroupResponse&& from) noexcept
    : AddSubgroupResponse() {
    *this = ::std::move(from);
  }

  inline AddSubgroupResponse& operator=(const AddSubgroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddSubgroupResponse& operator=(AddSubgroupResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddSubgroupResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddSubgroupResponse* internal_default_instance() {
    return reinterpret_cast<const AddSubgroupResponse*>(
               &_AddSubgroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(AddSubgroupResponse& a, AddSubgroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddSubgroupResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddSubgroupResponse* New() const final {
    return CreateMaybeMessage<AddSubgroupResponse>(nullptr);
  }

  AddSubgroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddSubgroupResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddSubgroupResponse& from);
  void MergeFrom(const AddSubgroupResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddSubgroupResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.groups.AddSubgroupResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_groups_2fgroups_2eproto);
    return ::descriptor_table_groups_2fgroups_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.groups.AddSubgroupResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_groups_2fgroups_2eproto;
};
// -------------------------------------------------------------------

class GetSubgroupsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.groups.GetSubgroupsRequest) */ {
 public:
  GetSubgroupsRequest();
  virtual ~GetSubgroupsRequest();

  GetSubgroupsRequest(const GetSubgroupsRequest& from);
  GetSubgroupsRequest(GetSubgroupsRequest&& from) noexcept
    : GetSubgroupsRequest() {
    *this = ::std::move(from);
  }

  inline GetSubgroupsRequest& operator=(const GetSubgroupsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSubgroupsRequest& operator=(GetSubgroupsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSubgroupsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSubgroupsRequest* internal_default_instance() {
    return reinterpret_cast<const GetSubgroupsRequest*>(
               &_GetSubgroupsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(GetSubgroupsRequest& a, GetSubgroupsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSubgroupsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSubgroupsRequest* New() const final {
    return CreateMaybeMessage<GetSubgroupsRequest>(nullptr);
  }

  GetSubgroupsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSubgroupsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSubgroupsRequest& from);
  void MergeFrom(const GetSubgroupsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSubgroupsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.groups.GetSubgroupsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_groups_2fgroups_2eproto);
    return ::descriptor_table_groups_2fgroups_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
  };
  // uint32 group_id = 1;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.groups.GetSubgroupsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_groups_2fgroups_2eproto;
};
// -------------------------------------------------------------------

class GetSubgroupsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.groups.GetSubgroupsResponse) */ {
 public:
  GetSubgroupsResponse();
  virtual ~GetSubgroupsResponse();

  GetSubgroupsResponse(const GetSubgroupsResponse& from);
  GetSubgroupsResponse(GetSubgroupsResponse&& from) noexcept
    : GetSubgroupsResponse() {
    *this = ::std::move(from);
  }

  inline GetSubgroupsResponse& operator=(const GetSubgroupsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSubgroupsResponse& operator=(GetSubgroupsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSubgroupsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSubgroupsResponse* internal_default_instance() {
    return reinterpret_cast<const GetSubgroupsResponse*>(
               &_GetSubgroupsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(GetSubgroupsResponse& a, GetSubgroupsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSubgroupsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSubgroupsResponse* New() const final {
    return CreateMaybeMessage<GetSubgroupsResponse>(nullptr);
  }

  GetSubgroupsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSubgroupsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSubgroupsResponse& from);
  void MergeFrom(const GetSubgroupsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSubgroupsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.groups.GetSubgroupsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_groups_2fgroups_2eproto);
    return ::descriptor_table_groups_2fgroups_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubgroupIdsFieldNumber = 1,
  };
  // repeated uint32 subgroup_ids = 1;
  int subgroup_ids_size() const;
  private:
  int _internal_subgroup_ids_size() const;
  public:
  void clear_subgroup_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_subgroup_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_subgroup_ids() const;
  void _internal_add_subgroup_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_subgroup_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 subgroup_ids(int index) const;
  void set_subgroup_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_subgroup_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      subgroup_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_subgroup_ids();

  // @@protoc_insertion_point(class_scope:mruv.groups.GetSubgroupsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > subgroup_ids_;
  mutable std::atomic<int> _subgroup_ids_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_groups_2fgroups_2eproto;
};
// -------------------------------------------------------------------

class RemoveSubgroupRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.groups.RemoveSubgroupRequest) */ {
 public:
  RemoveSubgroupRequest();
  virtual ~RemoveSubgroupRequest();

  RemoveSubgroupRequest(const RemoveSubgroupRequest& from);
  RemoveSubgroupRequest(RemoveSubgroupRequest&& from) noexcept
    : RemoveSubgroupRequest() {
    *this = ::std::move(from);
  }

  inline RemoveSubgroupRequest& operator=(const RemoveSubgroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveSubgroupRequest& operator=(RemoveSubgroupRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveSubgroupRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveSubgroupRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveSubgroupRequest*>(
               &_RemoveSubgroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(RemoveSubgroupRequest& a, RemoveSubgroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveSubgroupRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveSubgroupRequest* New() const final {
    return CreateMaybeMessage<RemoveSubgroupRequest>(nullptr);
  }

  RemoveSubgroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveSubgroupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveSubgroupRequest& from);
  void MergeFrom(const RemoveSubgroupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveSubgroupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.groups.RemoveSubgroupRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_groups_2fgroups_2eproto);
    return ::descriptor_table_groups_2fgroups_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kSubgroupIdFieldNumber = 2,
  };
  // uint32 group_id = 1;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 subgroup_id = 2;
  void clear_subgroup_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 subgroup_id() const;
  void set_subgroup_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_subgroup_id() const;
  void _internal_set_subgroup_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.groups.RemoveSubgroupRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 subgroup_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_groups_2fgroups_2eproto;
};
// -------------------------------------------------------------------

class RemoveSubgroupResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.groups.RemoveSubgroupResponse) */ {
 public:
  RemoveSubgroupResponse();
  virtual ~RemoveSubgroupResponse();

  RemoveSubgroupResponse(const RemoveSubgroupResponse& from);
  RemoveSubgroupResponse(RemoveSubgroupResponse&& from) noexcept
    : RemoveSubgroupResponse() {
    *this = ::std::move(from);
  }

  inline RemoveSubgroupResponse& operator=(const RemoveSubgroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveSubgroupResponse& operator=(RemoveSubgroupResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveSubgroupResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveSubgroupResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveSubgroupResponse*>(
               &_RemoveSubgroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(RemoveSubgroupResponse& a, RemoveSubgroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveSubgroupResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveSubgroupResponse* New() const final {
    return CreateMaybeMessage<RemoveSubgroupResponse>(nullptr);
  }

  RemoveSubgroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveSubgroupResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveSubgroupResponse& from);
  void MergeFrom(const RemoveSubgroupResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveSubgroupResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.groups.RemoveSubgroupResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_groups_2fgroups_2eproto);
    return ::descriptor_table_groups_2fgroups_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.groups.RemoveSubgroupResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_groups_2fgroups_2eproto;
};
// -------------------------------------------------------------------

class IsPermittedRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.groups.IsPermittedRequest) */ {
 public:
  IsPermittedRequest();
  virtual ~IsPermittedRequest();

  IsPermittedRequest(const IsPermittedRequest& from);
  IsPermittedRequest(IsPermittedRequest&& from) noexcept
    : IsPermittedRequest() {
    *this = ::std::move(from);
  }

  inline IsPermittedRequest& operator=(const IsPermittedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsPermittedRequest& operator=(IsPermittedRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IsPermittedRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IsPermittedRequest* internal_default_instance() {
    return reinterpret_cast<const IsPermittedRequest*>(
               &_IsPermittedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(IsPermittedRequest& a, IsPermittedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IsPermittedRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IsPermittedRequest* New() const final {
    return CreateMaybeMessage<IsPermittedRequest>(nullptr);
  }

  IsPermittedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IsPermittedRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IsPermittedRequest& from);
  void MergeFrom(const IsPermittedRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IsPermittedRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.groups.IsPermittedRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_groups_2fgroups_2eproto);
    return ::descriptor_table_groups_2fgroups_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 3,
    kMemberIdFieldNumber = 1,
    kMemberTypeFieldNumber = 2,
  };
  // string action = 3;
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // uint32 member_id = 1;
  void clear_member_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 member_id() const;
  void set_member_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_member_id() const;
  void _internal_set_member_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .mruv.groups.MemberType member_type = 2;
  void clear_member_type();
  ::mruv::groups::MemberType member_type() const;
  void set_member_type(::mruv::groups::MemberType value);
  private:
  ::mruv::groups::MemberType _internal_member_type() const;
  void _internal_set_member_type(::mruv::groups::MemberType value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.groups.IsPermittedRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::PROTOBUF_NAMESPACE_ID::uint32 member_id_;
  int member_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_groups_2fgroups_2eproto;
};
// -------------------------------------------------------------------

class IsPermittedResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.groups.IsPermittedResponse) */ {
 public:
  IsPermittedResponse();
  virtual ~IsPermittedResponse();

  IsPermittedResponse(const IsPermittedResponse& from);
  IsPermittedResponse(IsPermittedResponse&& from) noexcept
    : IsPermittedResponse() {
    *this = ::std::move(from);
  }

  inline IsPermittedResponse& operator=(const IsPermittedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsPermittedResponse& operator=(IsPermittedResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IsPermittedResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IsPermittedResponse* internal_default_instance() {
    return reinterpret_cast<const IsPermittedResponse*>(
               &_IsPermittedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(IsPermittedResponse& a, IsPermittedResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IsPermittedResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IsPermittedResponse* New() const final {
    return CreateMaybeMessage<IsPermittedResponse>(nullptr);
  }

  IsPermittedResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IsPermittedResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IsPermittedResponse& from);
  void MergeFrom(const IsPermittedResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IsPermittedResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.groups.IsPermittedResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_groups_2fgroups_2eproto);
    return ::descriptor_table_groups_2fgroups_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPermittedFieldNumber = 1,
  };
  // bool permitted = 1;
  void clear_permitted();
  bool permitted() const;
  void set_permitted(bool value);
  private:
  bool _internal_permitted() const;
  void _internal_set_permitted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.groups.IsPermittedResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool permitted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_groups_2fgroups_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateGroupRequest

// string name = 1;
inline void CreateGroupRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateGroupRequest::name() const {
  // @@protoc_insertion_point(field_get:mruv.groups.CreateGroupRequest.name)
  return _internal_name();
}
inline void CreateGroupRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mruv.groups.CreateGroupRequest.name)
}
inline std::string* CreateGroupRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mruv.groups.CreateGroupRequest.name)
  return _internal_mutable_name();
}
inline const std::string& CreateGroupRequest::_internal_name() const {
  return name_.GetNoArena();
}
inline void CreateGroupRequest::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateGroupRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.groups.CreateGroupRequest.name)
}
inline void CreateGroupRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.groups.CreateGroupRequest.name)
}
inline void CreateGroupRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.groups.CreateGroupRequest.name)
}
inline std::string* CreateGroupRequest::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateGroupRequest::release_name() {
  // @@protoc_insertion_point(field_release:mruv.groups.CreateGroupRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateGroupRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mruv.groups.CreateGroupRequest.name)
}

// string description = 2;
inline void CreateGroupRequest::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateGroupRequest::description() const {
  // @@protoc_insertion_point(field_get:mruv.groups.CreateGroupRequest.description)
  return _internal_description();
}
inline void CreateGroupRequest::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:mruv.groups.CreateGroupRequest.description)
}
inline std::string* CreateGroupRequest::mutable_description() {
  // @@protoc_insertion_point(field_mutable:mruv.groups.CreateGroupRequest.description)
  return _internal_mutable_description();
}
inline const std::string& CreateGroupRequest::_internal_description() const {
  return description_.GetNoArena();
}
inline void CreateGroupRequest::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateGroupRequest::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.groups.CreateGroupRequest.description)
}
inline void CreateGroupRequest::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.groups.CreateGroupRequest.description)
}
inline void CreateGroupRequest::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.groups.CreateGroupRequest.description)
}
inline std::string* CreateGroupRequest::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateGroupRequest::release_description() {
  // @@protoc_insertion_point(field_release:mruv.groups.CreateGroupRequest.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateGroupRequest::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:mruv.groups.CreateGroupRequest.description)
}

// -------------------------------------------------------------------

// CreateGroupResponse

// uint32 group_id = 1;
inline void CreateGroupResponse::clear_group_id() {
  group_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateGroupResponse::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateGroupResponse::group_id() const {
  // @@protoc_insertion_point(field_get:mruv.groups.CreateGroupResponse.group_id)
  return _internal_group_id();
}
inline void CreateGroupResponse::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  group_id_ = value;
}
inline void CreateGroupResponse::set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:mruv.groups.CreateGroupResponse.group_id)
}

// -------------------------------------------------------------------

// GetGroupRequest

// uint32 group_id = 1;
inline void GetGroupRequest::clear_group_id() {
  group_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetGroupRequest::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetGroupRequest::group_id() const {
  // @@protoc_insertion_point(field_get:mruv.groups.GetGroupRequest.group_id)
  return _internal_group_id();
}
inline void GetGroupRequest::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  group_id_ = value;
}
inline void GetGroupRequest::set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:mruv.groups.GetGroupRequest.group_id)
}

// -------------------------------------------------------------------

// GetGroupResponse

// string name = 1;
inline void GetGroupResponse::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetGroupResponse::name() const {
  // @@protoc_insertion_point(field_get:mruv.groups.GetGroupResponse.name)
  return _internal_name();
}
inline void GetGroupResponse::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mruv.groups.GetGroupResponse.name)
}
inline std::string* GetGroupResponse::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mruv.groups.GetGroupResponse.name)
  return _internal_mutable_name();
}
inline const std::string& GetGroupResponse::_internal_name() const {
  return name_.GetNoArena();
}
inline void GetGroupResponse::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetGroupResponse::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.groups.GetGroupResponse.name)
}
inline void GetGroupResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.groups.GetGroupResponse.name)
}
inline void GetGroupResponse::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.groups.GetGroupResponse.name)
}
inline std::string* GetGroupResponse::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetGroupResponse::release_name() {
  // @@protoc_insertion_point(field_release:mruv.groups.GetGroupResponse.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetGroupResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mruv.groups.GetGroupResponse.name)
}

// string description = 2;
inline void GetGroupResponse::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetGroupResponse::description() const {
  // @@protoc_insertion_point(field_get:mruv.groups.GetGroupResponse.description)
  return _internal_description();
}
inline void GetGroupResponse::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:mruv.groups.GetGroupResponse.description)
}
inline std::string* GetGroupResponse::mutable_description() {
  // @@protoc_insertion_point(field_mutable:mruv.groups.GetGroupResponse.description)
  return _internal_mutable_description();
}
inline const std::string& GetGroupResponse::_internal_description() const {
  return description_.GetNoArena();
}
inline void GetGroupResponse::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetGroupResponse::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.groups.GetGroupResponse.description)
}
inline void GetGroupResponse::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.groups.GetGroupResponse.description)
}
inline void GetGroupResponse::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.groups.GetGroupResponse.description)
}
inline std::string* GetGroupResponse::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetGroupResponse::release_description() {
  // @@protoc_insertion_point(field_release:mruv.groups.GetGroupResponse.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetGroupResponse::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:mruv.groups.GetGroupResponse.description)
}

// -------------------------------------------------------------------

// UpdateGroupRequest

// uint32 group_id = 1;
inline void UpdateGroupRequest::clear_group_id() {
  group_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateGroupRequest::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateGroupRequest::group_id() const {
  // @@protoc_insertion_point(field_get:mruv.groups.UpdateGroupRequest.group_id)
  return _internal_group_id();
}
inline void UpdateGroupRequest::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  group_id_ = value;
}
inline void UpdateGroupRequest::set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:mruv.groups.UpdateGroupRequest.group_id)
}

// string name = 2;
inline void UpdateGroupRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpdateGroupRequest::name() const {
  // @@protoc_insertion_point(field_get:mruv.groups.UpdateGroupRequest.name)
  return _internal_name();
}
inline void UpdateGroupRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mruv.groups.UpdateGroupRequest.name)
}
inline std::string* UpdateGroupRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mruv.groups.UpdateGroupRequest.name)
  return _internal_mutable_name();
}
inline const std::string& UpdateGroupRequest::_internal_name() const {
  return name_.GetNoArena();
}
inline void UpdateGroupRequest::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpdateGroupRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.groups.UpdateGroupRequest.name)
}
inline void UpdateGroupRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.groups.UpdateGroupRequest.name)
}
inline void UpdateGroupRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.groups.UpdateGroupRequest.name)
}
inline std::string* UpdateGroupRequest::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateGroupRequest::release_name() {
  // @@protoc_insertion_point(field_release:mruv.groups.UpdateGroupRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateGroupRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mruv.groups.UpdateGroupRequest.name)
}

// string description = 3;
inline void UpdateGroupRequest::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpdateGroupRequest::description() const {
  // @@protoc_insertion_point(field_get:mruv.groups.UpdateGroupRequest.description)
  return _internal_description();
}
inline void UpdateGroupRequest::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:mruv.groups.UpdateGroupRequest.description)
}
inline std::string* UpdateGroupRequest::mutable_description() {
  // @@protoc_insertion_point(field_mutable:mruv.groups.UpdateGroupRequest.description)
  return _internal_mutable_description();
}
inline const std::string& UpdateGroupRequest::_internal_description() const {
  return description_.GetNoArena();
}
inline void UpdateGroupRequest::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpdateGroupRequest::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.groups.UpdateGroupRequest.description)
}
inline void UpdateGroupRequest::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.groups.UpdateGroupRequest.description)
}
inline void UpdateGroupRequest::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.groups.UpdateGroupRequest.description)
}
inline std::string* UpdateGroupRequest::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateGroupRequest::release_description() {
  // @@protoc_insertion_point(field_release:mruv.groups.UpdateGroupRequest.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateGroupRequest::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:mruv.groups.UpdateGroupRequest.description)
}

// -------------------------------------------------------------------

// UpdateGroupResponse

// -------------------------------------------------------------------

// DeleteGroupRequest

// uint32 group_id = 1;
inline void DeleteGroupRequest::clear_group_id() {
  group_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteGroupRequest::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteGroupRequest::group_id() const {
  // @@protoc_insertion_point(field_get:mruv.groups.DeleteGroupRequest.group_id)
  return _internal_group_id();
}
inline void DeleteGroupRequest::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  group_id_ = value;
}
inline void DeleteGroupRequest::set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:mruv.groups.DeleteGroupRequest.group_id)
}

// -------------------------------------------------------------------

// DeleteGroupResponse

// -------------------------------------------------------------------

// GetGroupsRequest

// uint32 limit = 1;
inline void GetGroupsRequest::clear_limit() {
  limit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetGroupsRequest::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetGroupsRequest::limit() const {
  // @@protoc_insertion_point(field_get:mruv.groups.GetGroupsRequest.limit)
  return _internal_limit();
}
inline void GetGroupsRequest::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  limit_ = value;
}
inline void GetGroupsRequest::set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:mruv.groups.GetGroupsRequest.limit)
}

// uint32 begin_from = 2;
inline void GetGroupsRequest::clear_begin_from() {
  begin_from_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetGroupsRequest::_internal_begin_from() const {
  return begin_from_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetGroupsRequest::begin_from() const {
  // @@protoc_insertion_point(field_get:mruv.groups.GetGroupsRequest.begin_from)
  return _internal_begin_from();
}
inline void GetGroupsRequest::_internal_set_begin_from(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  begin_from_ = value;
}
inline void GetGroupsRequest::set_begin_from(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_begin_from(value);
  // @@protoc_insertion_point(field_set:mruv.groups.GetGroupsRequest.begin_from)
}

// -------------------------------------------------------------------

// GetGroupsResponse_Group

// uint32 id = 1;
inline void GetGroupsResponse_Group::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetGroupsResponse_Group::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetGroupsResponse_Group::id() const {
  // @@protoc_insertion_point(field_get:mruv.groups.GetGroupsResponse.Group.id)
  return _internal_id();
}
inline void GetGroupsResponse_Group::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void GetGroupsResponse_Group::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.groups.GetGroupsResponse.Group.id)
}

// string name = 2;
inline void GetGroupsResponse_Group::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetGroupsResponse_Group::name() const {
  // @@protoc_insertion_point(field_get:mruv.groups.GetGroupsResponse.Group.name)
  return _internal_name();
}
inline void GetGroupsResponse_Group::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mruv.groups.GetGroupsResponse.Group.name)
}
inline std::string* GetGroupsResponse_Group::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mruv.groups.GetGroupsResponse.Group.name)
  return _internal_mutable_name();
}
inline const std::string& GetGroupsResponse_Group::_internal_name() const {
  return name_.GetNoArena();
}
inline void GetGroupsResponse_Group::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetGroupsResponse_Group::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.groups.GetGroupsResponse.Group.name)
}
inline void GetGroupsResponse_Group::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.groups.GetGroupsResponse.Group.name)
}
inline void GetGroupsResponse_Group::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.groups.GetGroupsResponse.Group.name)
}
inline std::string* GetGroupsResponse_Group::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetGroupsResponse_Group::release_name() {
  // @@protoc_insertion_point(field_release:mruv.groups.GetGroupsResponse.Group.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetGroupsResponse_Group::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mruv.groups.GetGroupsResponse.Group.name)
}

// string description = 3;
inline void GetGroupsResponse_Group::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetGroupsResponse_Group::description() const {
  // @@protoc_insertion_point(field_get:mruv.groups.GetGroupsResponse.Group.description)
  return _internal_description();
}
inline void GetGroupsResponse_Group::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:mruv.groups.GetGroupsResponse.Group.description)
}
inline std::string* GetGroupsResponse_Group::mutable_description() {
  // @@protoc_insertion_point(field_mutable:mruv.groups.GetGroupsResponse.Group.description)
  return _internal_mutable_description();
}
inline const std::string& GetGroupsResponse_Group::_internal_description() const {
  return description_.GetNoArena();
}
inline void GetGroupsResponse_Group::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetGroupsResponse_Group::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.groups.GetGroupsResponse.Group.description)
}
inline void GetGroupsResponse_Group::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.groups.GetGroupsResponse.Group.description)
}
inline void GetGroupsResponse_Group::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.groups.GetGroupsResponse.Group.description)
}
inline std::string* GetGroupsResponse_Group::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetGroupsResponse_Group::release_description() {
  // @@protoc_insertion_point(field_release:mruv.groups.GetGroupsResponse.Group.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetGroupsResponse_Group::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:mruv.groups.GetGroupsResponse.Group.description)
}

// -------------------------------------------------------------------

// GetGroupsResponse

// repeated .mruv.groups.GetGroupsResponse.Group groups = 1;
inline int GetGroupsResponse::_internal_groups_size() const {
  return groups_.size();
}
inline int GetGroupsResponse::groups_size() const {
  return _internal_groups_size();
}
inline void GetGroupsResponse::clear_groups() {
  groups_.Clear();
}
inline ::mruv::groups::GetGroupsResponse_Group* GetGroupsResponse::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:mruv.groups.GetGroupsResponse.groups)
  return groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::groups::GetGroupsResponse_Group >*
GetGroupsResponse::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:mruv.groups.GetGroupsResponse.groups)
  return &groups_;
}
inline const ::mruv::groups::GetGroupsResponse_Group& GetGroupsResponse::_internal_groups(int index) const {
  return groups_.Get(index);
}
inline const ::mruv::groups::GetGroupsResponse_Group& GetGroupsResponse::groups(int index) const {
  // @@protoc_insertion_point(field_get:mruv.groups.GetGroupsResponse.groups)
  return _internal_groups(index);
}
inline ::mruv::groups::GetGroupsResponse_Group* GetGroupsResponse::_internal_add_groups() {
  return groups_.Add();
}
inline ::mruv::groups::GetGroupsResponse_Group* GetGroupsResponse::add_groups() {
  // @@protoc_insertion_point(field_add:mruv.groups.GetGroupsResponse.groups)
  return _internal_add_groups();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::groups::GetGroupsResponse_Group >&
GetGroupsResponse::groups() const {
  // @@protoc_insertion_point(field_list:mruv.groups.GetGroupsResponse.groups)
  return groups_;
}

// -------------------------------------------------------------------

// AssignOwnerRequest

// uint32 group_id = 1;
inline void AssignOwnerRequest::clear_group_id() {
  group_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AssignOwnerRequest::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AssignOwnerRequest::group_id() const {
  // @@protoc_insertion_point(field_get:mruv.groups.AssignOwnerRequest.group_id)
  return _internal_group_id();
}
inline void AssignOwnerRequest::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  group_id_ = value;
}
inline void AssignOwnerRequest::set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:mruv.groups.AssignOwnerRequest.group_id)
}

// .mruv.groups.OwnerType owner_type = 3;
inline void AssignOwnerRequest::clear_owner_type() {
  owner_type_ = 0;
}
inline ::mruv::groups::OwnerType AssignOwnerRequest::_internal_owner_type() const {
  return static_cast< ::mruv::groups::OwnerType >(owner_type_);
}
inline ::mruv::groups::OwnerType AssignOwnerRequest::owner_type() const {
  // @@protoc_insertion_point(field_get:mruv.groups.AssignOwnerRequest.owner_type)
  return _internal_owner_type();
}
inline void AssignOwnerRequest::_internal_set_owner_type(::mruv::groups::OwnerType value) {
  
  owner_type_ = value;
}
inline void AssignOwnerRequest::set_owner_type(::mruv::groups::OwnerType value) {
  _internal_set_owner_type(value);
  // @@protoc_insertion_point(field_set:mruv.groups.AssignOwnerRequest.owner_type)
}

// uint32 owner_id = 2;
inline void AssignOwnerRequest::clear_owner_id() {
  owner_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AssignOwnerRequest::_internal_owner_id() const {
  return owner_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AssignOwnerRequest::owner_id() const {
  // @@protoc_insertion_point(field_get:mruv.groups.AssignOwnerRequest.owner_id)
  return _internal_owner_id();
}
inline void AssignOwnerRequest::_internal_set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  owner_id_ = value;
}
inline void AssignOwnerRequest::set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_owner_id(value);
  // @@protoc_insertion_point(field_set:mruv.groups.AssignOwnerRequest.owner_id)
}

// -------------------------------------------------------------------

// AssignOwnerResponse

// -------------------------------------------------------------------

// GetOwnerRequest

// uint32 group_id = 1;
inline void GetOwnerRequest::clear_group_id() {
  group_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOwnerRequest::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOwnerRequest::group_id() const {
  // @@protoc_insertion_point(field_get:mruv.groups.GetOwnerRequest.group_id)
  return _internal_group_id();
}
inline void GetOwnerRequest::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  group_id_ = value;
}
inline void GetOwnerRequest::set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:mruv.groups.GetOwnerRequest.group_id)
}

// -------------------------------------------------------------------

// GetOwnerResponse

// uint32 owner_id = 1;
inline void GetOwnerResponse::clear_owner_id() {
  owner_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOwnerResponse::_internal_owner_id() const {
  return owner_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOwnerResponse::owner_id() const {
  // @@protoc_insertion_point(field_get:mruv.groups.GetOwnerResponse.owner_id)
  return _internal_owner_id();
}
inline void GetOwnerResponse::_internal_set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  owner_id_ = value;
}
inline void GetOwnerResponse::set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_owner_id(value);
  // @@protoc_insertion_point(field_set:mruv.groups.GetOwnerResponse.owner_id)
}

// .mruv.groups.OwnerType owner_type = 2;
inline void GetOwnerResponse::clear_owner_type() {
  owner_type_ = 0;
}
inline ::mruv::groups::OwnerType GetOwnerResponse::_internal_owner_type() const {
  return static_cast< ::mruv::groups::OwnerType >(owner_type_);
}
inline ::mruv::groups::OwnerType GetOwnerResponse::owner_type() const {
  // @@protoc_insertion_point(field_get:mruv.groups.GetOwnerResponse.owner_type)
  return _internal_owner_type();
}
inline void GetOwnerResponse::_internal_set_owner_type(::mruv::groups::OwnerType value) {
  
  owner_type_ = value;
}
inline void GetOwnerResponse::set_owner_type(::mruv::groups::OwnerType value) {
  _internal_set_owner_type(value);
  // @@protoc_insertion_point(field_set:mruv.groups.GetOwnerResponse.owner_type)
}

// -------------------------------------------------------------------

// AddMemberRequest

// uint32 group_id = 1;
inline void AddMemberRequest::clear_group_id() {
  group_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddMemberRequest::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddMemberRequest::group_id() const {
  // @@protoc_insertion_point(field_get:mruv.groups.AddMemberRequest.group_id)
  return _internal_group_id();
}
inline void AddMemberRequest::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  group_id_ = value;
}
inline void AddMemberRequest::set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:mruv.groups.AddMemberRequest.group_id)
}

// uint32 member_id = 2;
inline void AddMemberRequest::clear_member_id() {
  member_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddMemberRequest::_internal_member_id() const {
  return member_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddMemberRequest::member_id() const {
  // @@protoc_insertion_point(field_get:mruv.groups.AddMemberRequest.member_id)
  return _internal_member_id();
}
inline void AddMemberRequest::_internal_set_member_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  member_id_ = value;
}
inline void AddMemberRequest::set_member_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_member_id(value);
  // @@protoc_insertion_point(field_set:mruv.groups.AddMemberRequest.member_id)
}

// -------------------------------------------------------------------

// AddMemberResponse

// -------------------------------------------------------------------

// GetMembersRequest

// uint32 group_id = 1;
inline void GetMembersRequest::clear_group_id() {
  group_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetMembersRequest::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetMembersRequest::group_id() const {
  // @@protoc_insertion_point(field_get:mruv.groups.GetMembersRequest.group_id)
  return _internal_group_id();
}
inline void GetMembersRequest::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  group_id_ = value;
}
inline void GetMembersRequest::set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:mruv.groups.GetMembersRequest.group_id)
}

// -------------------------------------------------------------------

// GetMembersResponse

// .mruv.groups.MemberType member_type = 1;
inline void GetMembersResponse::clear_member_type() {
  member_type_ = 0;
}
inline ::mruv::groups::MemberType GetMembersResponse::_internal_member_type() const {
  return static_cast< ::mruv::groups::MemberType >(member_type_);
}
inline ::mruv::groups::MemberType GetMembersResponse::member_type() const {
  // @@protoc_insertion_point(field_get:mruv.groups.GetMembersResponse.member_type)
  return _internal_member_type();
}
inline void GetMembersResponse::_internal_set_member_type(::mruv::groups::MemberType value) {
  
  member_type_ = value;
}
inline void GetMembersResponse::set_member_type(::mruv::groups::MemberType value) {
  _internal_set_member_type(value);
  // @@protoc_insertion_point(field_set:mruv.groups.GetMembersResponse.member_type)
}

// repeated uint32 member_ids = 2;
inline int GetMembersResponse::_internal_member_ids_size() const {
  return member_ids_.size();
}
inline int GetMembersResponse::member_ids_size() const {
  return _internal_member_ids_size();
}
inline void GetMembersResponse::clear_member_ids() {
  member_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetMembersResponse::_internal_member_ids(int index) const {
  return member_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetMembersResponse::member_ids(int index) const {
  // @@protoc_insertion_point(field_get:mruv.groups.GetMembersResponse.member_ids)
  return _internal_member_ids(index);
}
inline void GetMembersResponse::set_member_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  member_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:mruv.groups.GetMembersResponse.member_ids)
}
inline void GetMembersResponse::_internal_add_member_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  member_ids_.Add(value);
}
inline void GetMembersResponse::add_member_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_member_ids(value);
  // @@protoc_insertion_point(field_add:mruv.groups.GetMembersResponse.member_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
GetMembersResponse::_internal_member_ids() const {
  return member_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
GetMembersResponse::member_ids() const {
  // @@protoc_insertion_point(field_list:mruv.groups.GetMembersResponse.member_ids)
  return _internal_member_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
GetMembersResponse::_internal_mutable_member_ids() {
  return &member_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
GetMembersResponse::mutable_member_ids() {
  // @@protoc_insertion_point(field_mutable_list:mruv.groups.GetMembersResponse.member_ids)
  return _internal_mutable_member_ids();
}

// -------------------------------------------------------------------

// RemoveMemberRequest

// uint32 group_id = 1;
inline void RemoveMemberRequest::clear_group_id() {
  group_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RemoveMemberRequest::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RemoveMemberRequest::group_id() const {
  // @@protoc_insertion_point(field_get:mruv.groups.RemoveMemberRequest.group_id)
  return _internal_group_id();
}
inline void RemoveMemberRequest::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  group_id_ = value;
}
inline void RemoveMemberRequest::set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:mruv.groups.RemoveMemberRequest.group_id)
}

// uint32 member_id = 2;
inline void RemoveMemberRequest::clear_member_id() {
  member_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RemoveMemberRequest::_internal_member_id() const {
  return member_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RemoveMemberRequest::member_id() const {
  // @@protoc_insertion_point(field_get:mruv.groups.RemoveMemberRequest.member_id)
  return _internal_member_id();
}
inline void RemoveMemberRequest::_internal_set_member_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  member_id_ = value;
}
inline void RemoveMemberRequest::set_member_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_member_id(value);
  // @@protoc_insertion_point(field_set:mruv.groups.RemoveMemberRequest.member_id)
}

// -------------------------------------------------------------------

// RemoveMemberResponse

// -------------------------------------------------------------------

// AddPermissionRequest

// uint32 group_id = 1;
inline void AddPermissionRequest::clear_group_id() {
  group_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddPermissionRequest::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddPermissionRequest::group_id() const {
  // @@protoc_insertion_point(field_get:mruv.groups.AddPermissionRequest.group_id)
  return _internal_group_id();
}
inline void AddPermissionRequest::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  group_id_ = value;
}
inline void AddPermissionRequest::set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:mruv.groups.AddPermissionRequest.group_id)
}

// string name = 2;
inline void AddPermissionRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddPermissionRequest::name() const {
  // @@protoc_insertion_point(field_get:mruv.groups.AddPermissionRequest.name)
  return _internal_name();
}
inline void AddPermissionRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mruv.groups.AddPermissionRequest.name)
}
inline std::string* AddPermissionRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mruv.groups.AddPermissionRequest.name)
  return _internal_mutable_name();
}
inline const std::string& AddPermissionRequest::_internal_name() const {
  return name_.GetNoArena();
}
inline void AddPermissionRequest::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddPermissionRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.groups.AddPermissionRequest.name)
}
inline void AddPermissionRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.groups.AddPermissionRequest.name)
}
inline void AddPermissionRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.groups.AddPermissionRequest.name)
}
inline std::string* AddPermissionRequest::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddPermissionRequest::release_name() {
  // @@protoc_insertion_point(field_release:mruv.groups.AddPermissionRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddPermissionRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mruv.groups.AddPermissionRequest.name)
}

// string definition = 3;
inline void AddPermissionRequest::clear_definition() {
  definition_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddPermissionRequest::definition() const {
  // @@protoc_insertion_point(field_get:mruv.groups.AddPermissionRequest.definition)
  return _internal_definition();
}
inline void AddPermissionRequest::set_definition(const std::string& value) {
  _internal_set_definition(value);
  // @@protoc_insertion_point(field_set:mruv.groups.AddPermissionRequest.definition)
}
inline std::string* AddPermissionRequest::mutable_definition() {
  // @@protoc_insertion_point(field_mutable:mruv.groups.AddPermissionRequest.definition)
  return _internal_mutable_definition();
}
inline const std::string& AddPermissionRequest::_internal_definition() const {
  return definition_.GetNoArena();
}
inline void AddPermissionRequest::_internal_set_definition(const std::string& value) {
  
  definition_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddPermissionRequest::set_definition(std::string&& value) {
  
  definition_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.groups.AddPermissionRequest.definition)
}
inline void AddPermissionRequest::set_definition(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  definition_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.groups.AddPermissionRequest.definition)
}
inline void AddPermissionRequest::set_definition(const char* value, size_t size) {
  
  definition_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.groups.AddPermissionRequest.definition)
}
inline std::string* AddPermissionRequest::_internal_mutable_definition() {
  
  return definition_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddPermissionRequest::release_definition() {
  // @@protoc_insertion_point(field_release:mruv.groups.AddPermissionRequest.definition)
  
  return definition_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddPermissionRequest::set_allocated_definition(std::string* definition) {
  if (definition != nullptr) {
    
  } else {
    
  }
  definition_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), definition);
  // @@protoc_insertion_point(field_set_allocated:mruv.groups.AddPermissionRequest.definition)
}

// -------------------------------------------------------------------

// AddPermissionResponse

// uint32 permission_id = 1;
inline void AddPermissionResponse::clear_permission_id() {
  permission_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddPermissionResponse::_internal_permission_id() const {
  return permission_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddPermissionResponse::permission_id() const {
  // @@protoc_insertion_point(field_get:mruv.groups.AddPermissionResponse.permission_id)
  return _internal_permission_id();
}
inline void AddPermissionResponse::_internal_set_permission_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  permission_id_ = value;
}
inline void AddPermissionResponse::set_permission_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_permission_id(value);
  // @@protoc_insertion_point(field_set:mruv.groups.AddPermissionResponse.permission_id)
}

// -------------------------------------------------------------------

// GetPermissionsRequest

// uint32 group_id = 1;
inline void GetPermissionsRequest::clear_group_id() {
  group_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetPermissionsRequest::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetPermissionsRequest::group_id() const {
  // @@protoc_insertion_point(field_get:mruv.groups.GetPermissionsRequest.group_id)
  return _internal_group_id();
}
inline void GetPermissionsRequest::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  group_id_ = value;
}
inline void GetPermissionsRequest::set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:mruv.groups.GetPermissionsRequest.group_id)
}

// -------------------------------------------------------------------

// GetPermissionsResponse_Permission

// uint32 id = 1;
inline void GetPermissionsResponse_Permission::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetPermissionsResponse_Permission::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetPermissionsResponse_Permission::id() const {
  // @@protoc_insertion_point(field_get:mruv.groups.GetPermissionsResponse.Permission.id)
  return _internal_id();
}
inline void GetPermissionsResponse_Permission::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void GetPermissionsResponse_Permission::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.groups.GetPermissionsResponse.Permission.id)
}

// string name = 2;
inline void GetPermissionsResponse_Permission::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetPermissionsResponse_Permission::name() const {
  // @@protoc_insertion_point(field_get:mruv.groups.GetPermissionsResponse.Permission.name)
  return _internal_name();
}
inline void GetPermissionsResponse_Permission::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mruv.groups.GetPermissionsResponse.Permission.name)
}
inline std::string* GetPermissionsResponse_Permission::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mruv.groups.GetPermissionsResponse.Permission.name)
  return _internal_mutable_name();
}
inline const std::string& GetPermissionsResponse_Permission::_internal_name() const {
  return name_.GetNoArena();
}
inline void GetPermissionsResponse_Permission::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetPermissionsResponse_Permission::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.groups.GetPermissionsResponse.Permission.name)
}
inline void GetPermissionsResponse_Permission::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.groups.GetPermissionsResponse.Permission.name)
}
inline void GetPermissionsResponse_Permission::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.groups.GetPermissionsResponse.Permission.name)
}
inline std::string* GetPermissionsResponse_Permission::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetPermissionsResponse_Permission::release_name() {
  // @@protoc_insertion_point(field_release:mruv.groups.GetPermissionsResponse.Permission.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetPermissionsResponse_Permission::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mruv.groups.GetPermissionsResponse.Permission.name)
}

// string definition = 3;
inline void GetPermissionsResponse_Permission::clear_definition() {
  definition_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetPermissionsResponse_Permission::definition() const {
  // @@protoc_insertion_point(field_get:mruv.groups.GetPermissionsResponse.Permission.definition)
  return _internal_definition();
}
inline void GetPermissionsResponse_Permission::set_definition(const std::string& value) {
  _internal_set_definition(value);
  // @@protoc_insertion_point(field_set:mruv.groups.GetPermissionsResponse.Permission.definition)
}
inline std::string* GetPermissionsResponse_Permission::mutable_definition() {
  // @@protoc_insertion_point(field_mutable:mruv.groups.GetPermissionsResponse.Permission.definition)
  return _internal_mutable_definition();
}
inline const std::string& GetPermissionsResponse_Permission::_internal_definition() const {
  return definition_.GetNoArena();
}
inline void GetPermissionsResponse_Permission::_internal_set_definition(const std::string& value) {
  
  definition_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetPermissionsResponse_Permission::set_definition(std::string&& value) {
  
  definition_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.groups.GetPermissionsResponse.Permission.definition)
}
inline void GetPermissionsResponse_Permission::set_definition(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  definition_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.groups.GetPermissionsResponse.Permission.definition)
}
inline void GetPermissionsResponse_Permission::set_definition(const char* value, size_t size) {
  
  definition_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.groups.GetPermissionsResponse.Permission.definition)
}
inline std::string* GetPermissionsResponse_Permission::_internal_mutable_definition() {
  
  return definition_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetPermissionsResponse_Permission::release_definition() {
  // @@protoc_insertion_point(field_release:mruv.groups.GetPermissionsResponse.Permission.definition)
  
  return definition_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetPermissionsResponse_Permission::set_allocated_definition(std::string* definition) {
  if (definition != nullptr) {
    
  } else {
    
  }
  definition_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), definition);
  // @@protoc_insertion_point(field_set_allocated:mruv.groups.GetPermissionsResponse.Permission.definition)
}

// -------------------------------------------------------------------

// GetPermissionsResponse

// repeated .mruv.groups.GetPermissionsResponse.Permission permissions = 1;
inline int GetPermissionsResponse::_internal_permissions_size() const {
  return permissions_.size();
}
inline int GetPermissionsResponse::permissions_size() const {
  return _internal_permissions_size();
}
inline void GetPermissionsResponse::clear_permissions() {
  permissions_.Clear();
}
inline ::mruv::groups::GetPermissionsResponse_Permission* GetPermissionsResponse::mutable_permissions(int index) {
  // @@protoc_insertion_point(field_mutable:mruv.groups.GetPermissionsResponse.permissions)
  return permissions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::groups::GetPermissionsResponse_Permission >*
GetPermissionsResponse::mutable_permissions() {
  // @@protoc_insertion_point(field_mutable_list:mruv.groups.GetPermissionsResponse.permissions)
  return &permissions_;
}
inline const ::mruv::groups::GetPermissionsResponse_Permission& GetPermissionsResponse::_internal_permissions(int index) const {
  return permissions_.Get(index);
}
inline const ::mruv::groups::GetPermissionsResponse_Permission& GetPermissionsResponse::permissions(int index) const {
  // @@protoc_insertion_point(field_get:mruv.groups.GetPermissionsResponse.permissions)
  return _internal_permissions(index);
}
inline ::mruv::groups::GetPermissionsResponse_Permission* GetPermissionsResponse::_internal_add_permissions() {
  return permissions_.Add();
}
inline ::mruv::groups::GetPermissionsResponse_Permission* GetPermissionsResponse::add_permissions() {
  // @@protoc_insertion_point(field_add:mruv.groups.GetPermissionsResponse.permissions)
  return _internal_add_permissions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::groups::GetPermissionsResponse_Permission >&
GetPermissionsResponse::permissions() const {
  // @@protoc_insertion_point(field_list:mruv.groups.GetPermissionsResponse.permissions)
  return permissions_;
}

// -------------------------------------------------------------------

// RemovePermissionRequest

// uint32 group_id = 1;
inline void RemovePermissionRequest::clear_group_id() {
  group_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RemovePermissionRequest::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RemovePermissionRequest::group_id() const {
  // @@protoc_insertion_point(field_get:mruv.groups.RemovePermissionRequest.group_id)
  return _internal_group_id();
}
inline void RemovePermissionRequest::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  group_id_ = value;
}
inline void RemovePermissionRequest::set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:mruv.groups.RemovePermissionRequest.group_id)
}

// uint32 permission_id = 2;
inline void RemovePermissionRequest::clear_permission_id() {
  permission_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RemovePermissionRequest::_internal_permission_id() const {
  return permission_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RemovePermissionRequest::permission_id() const {
  // @@protoc_insertion_point(field_get:mruv.groups.RemovePermissionRequest.permission_id)
  return _internal_permission_id();
}
inline void RemovePermissionRequest::_internal_set_permission_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  permission_id_ = value;
}
inline void RemovePermissionRequest::set_permission_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_permission_id(value);
  // @@protoc_insertion_point(field_set:mruv.groups.RemovePermissionRequest.permission_id)
}

// -------------------------------------------------------------------

// RemovePermissionResponse

// -------------------------------------------------------------------

// AddSubgroupRequest

// uint32 group_id = 1;
inline void AddSubgroupRequest::clear_group_id() {
  group_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddSubgroupRequest::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddSubgroupRequest::group_id() const {
  // @@protoc_insertion_point(field_get:mruv.groups.AddSubgroupRequest.group_id)
  return _internal_group_id();
}
inline void AddSubgroupRequest::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  group_id_ = value;
}
inline void AddSubgroupRequest::set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:mruv.groups.AddSubgroupRequest.group_id)
}

// uint32 subgroup_id = 2;
inline void AddSubgroupRequest::clear_subgroup_id() {
  subgroup_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddSubgroupRequest::_internal_subgroup_id() const {
  return subgroup_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddSubgroupRequest::subgroup_id() const {
  // @@protoc_insertion_point(field_get:mruv.groups.AddSubgroupRequest.subgroup_id)
  return _internal_subgroup_id();
}
inline void AddSubgroupRequest::_internal_set_subgroup_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  subgroup_id_ = value;
}
inline void AddSubgroupRequest::set_subgroup_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_subgroup_id(value);
  // @@protoc_insertion_point(field_set:mruv.groups.AddSubgroupRequest.subgroup_id)
}

// -------------------------------------------------------------------

// AddSubgroupResponse

// -------------------------------------------------------------------

// GetSubgroupsRequest

// uint32 group_id = 1;
inline void GetSubgroupsRequest::clear_group_id() {
  group_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetSubgroupsRequest::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetSubgroupsRequest::group_id() const {
  // @@protoc_insertion_point(field_get:mruv.groups.GetSubgroupsRequest.group_id)
  return _internal_group_id();
}
inline void GetSubgroupsRequest::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  group_id_ = value;
}
inline void GetSubgroupsRequest::set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:mruv.groups.GetSubgroupsRequest.group_id)
}

// -------------------------------------------------------------------

// GetSubgroupsResponse

// repeated uint32 subgroup_ids = 1;
inline int GetSubgroupsResponse::_internal_subgroup_ids_size() const {
  return subgroup_ids_.size();
}
inline int GetSubgroupsResponse::subgroup_ids_size() const {
  return _internal_subgroup_ids_size();
}
inline void GetSubgroupsResponse::clear_subgroup_ids() {
  subgroup_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetSubgroupsResponse::_internal_subgroup_ids(int index) const {
  return subgroup_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetSubgroupsResponse::subgroup_ids(int index) const {
  // @@protoc_insertion_point(field_get:mruv.groups.GetSubgroupsResponse.subgroup_ids)
  return _internal_subgroup_ids(index);
}
inline void GetSubgroupsResponse::set_subgroup_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  subgroup_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:mruv.groups.GetSubgroupsResponse.subgroup_ids)
}
inline void GetSubgroupsResponse::_internal_add_subgroup_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  subgroup_ids_.Add(value);
}
inline void GetSubgroupsResponse::add_subgroup_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_subgroup_ids(value);
  // @@protoc_insertion_point(field_add:mruv.groups.GetSubgroupsResponse.subgroup_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
GetSubgroupsResponse::_internal_subgroup_ids() const {
  return subgroup_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
GetSubgroupsResponse::subgroup_ids() const {
  // @@protoc_insertion_point(field_list:mruv.groups.GetSubgroupsResponse.subgroup_ids)
  return _internal_subgroup_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
GetSubgroupsResponse::_internal_mutable_subgroup_ids() {
  return &subgroup_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
GetSubgroupsResponse::mutable_subgroup_ids() {
  // @@protoc_insertion_point(field_mutable_list:mruv.groups.GetSubgroupsResponse.subgroup_ids)
  return _internal_mutable_subgroup_ids();
}

// -------------------------------------------------------------------

// RemoveSubgroupRequest

// uint32 group_id = 1;
inline void RemoveSubgroupRequest::clear_group_id() {
  group_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RemoveSubgroupRequest::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RemoveSubgroupRequest::group_id() const {
  // @@protoc_insertion_point(field_get:mruv.groups.RemoveSubgroupRequest.group_id)
  return _internal_group_id();
}
inline void RemoveSubgroupRequest::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  group_id_ = value;
}
inline void RemoveSubgroupRequest::set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:mruv.groups.RemoveSubgroupRequest.group_id)
}

// uint32 subgroup_id = 2;
inline void RemoveSubgroupRequest::clear_subgroup_id() {
  subgroup_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RemoveSubgroupRequest::_internal_subgroup_id() const {
  return subgroup_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RemoveSubgroupRequest::subgroup_id() const {
  // @@protoc_insertion_point(field_get:mruv.groups.RemoveSubgroupRequest.subgroup_id)
  return _internal_subgroup_id();
}
inline void RemoveSubgroupRequest::_internal_set_subgroup_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  subgroup_id_ = value;
}
inline void RemoveSubgroupRequest::set_subgroup_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_subgroup_id(value);
  // @@protoc_insertion_point(field_set:mruv.groups.RemoveSubgroupRequest.subgroup_id)
}

// -------------------------------------------------------------------

// RemoveSubgroupResponse

// -------------------------------------------------------------------

// IsPermittedRequest

// uint32 member_id = 1;
inline void IsPermittedRequest::clear_member_id() {
  member_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IsPermittedRequest::_internal_member_id() const {
  return member_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IsPermittedRequest::member_id() const {
  // @@protoc_insertion_point(field_get:mruv.groups.IsPermittedRequest.member_id)
  return _internal_member_id();
}
inline void IsPermittedRequest::_internal_set_member_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  member_id_ = value;
}
inline void IsPermittedRequest::set_member_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_member_id(value);
  // @@protoc_insertion_point(field_set:mruv.groups.IsPermittedRequest.member_id)
}

// .mruv.groups.MemberType member_type = 2;
inline void IsPermittedRequest::clear_member_type() {
  member_type_ = 0;
}
inline ::mruv::groups::MemberType IsPermittedRequest::_internal_member_type() const {
  return static_cast< ::mruv::groups::MemberType >(member_type_);
}
inline ::mruv::groups::MemberType IsPermittedRequest::member_type() const {
  // @@protoc_insertion_point(field_get:mruv.groups.IsPermittedRequest.member_type)
  return _internal_member_type();
}
inline void IsPermittedRequest::_internal_set_member_type(::mruv::groups::MemberType value) {
  
  member_type_ = value;
}
inline void IsPermittedRequest::set_member_type(::mruv::groups::MemberType value) {
  _internal_set_member_type(value);
  // @@protoc_insertion_point(field_set:mruv.groups.IsPermittedRequest.member_type)
}

// string action = 3;
inline void IsPermittedRequest::clear_action() {
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IsPermittedRequest::action() const {
  // @@protoc_insertion_point(field_get:mruv.groups.IsPermittedRequest.action)
  return _internal_action();
}
inline void IsPermittedRequest::set_action(const std::string& value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:mruv.groups.IsPermittedRequest.action)
}
inline std::string* IsPermittedRequest::mutable_action() {
  // @@protoc_insertion_point(field_mutable:mruv.groups.IsPermittedRequest.action)
  return _internal_mutable_action();
}
inline const std::string& IsPermittedRequest::_internal_action() const {
  return action_.GetNoArena();
}
inline void IsPermittedRequest::_internal_set_action(const std::string& value) {
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void IsPermittedRequest::set_action(std::string&& value) {
  
  action_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.groups.IsPermittedRequest.action)
}
inline void IsPermittedRequest::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.groups.IsPermittedRequest.action)
}
inline void IsPermittedRequest::set_action(const char* value, size_t size) {
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.groups.IsPermittedRequest.action)
}
inline std::string* IsPermittedRequest::_internal_mutable_action() {
  
  return action_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IsPermittedRequest::release_action() {
  // @@protoc_insertion_point(field_release:mruv.groups.IsPermittedRequest.action)
  
  return action_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IsPermittedRequest::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:mruv.groups.IsPermittedRequest.action)
}

// -------------------------------------------------------------------

// IsPermittedResponse

// bool permitted = 1;
inline void IsPermittedResponse::clear_permitted() {
  permitted_ = false;
}
inline bool IsPermittedResponse::_internal_permitted() const {
  return permitted_;
}
inline bool IsPermittedResponse::permitted() const {
  // @@protoc_insertion_point(field_get:mruv.groups.IsPermittedResponse.permitted)
  return _internal_permitted();
}
inline void IsPermittedResponse::_internal_set_permitted(bool value) {
  
  permitted_ = value;
}
inline void IsPermittedResponse::set_permitted(bool value) {
  _internal_set_permitted(value);
  // @@protoc_insertion_point(field_set:mruv.groups.IsPermittedResponse.permitted)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace groups
}  // namespace mruv

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mruv::groups::OwnerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mruv::groups::OwnerType>() {
  return ::mruv::groups::OwnerType_descriptor();
}
template <> struct is_proto_enum< ::mruv::groups::MemberType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mruv::groups::MemberType>() {
  return ::mruv::groups::MemberType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_groups_2fgroups_2eproto
