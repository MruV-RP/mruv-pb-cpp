// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: groups/groups.proto

#include "groups/groups.pb.h"
#include "groups/groups.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace mruv {
namespace groups {

static const char* MruVGroupsService_method_names[] = {
  "/mruv.groups.MruVGroupsService/CreateGroup",
  "/mruv.groups.MruVGroupsService/GetGroup",
  "/mruv.groups.MruVGroupsService/UpdateGroup",
  "/mruv.groups.MruVGroupsService/DeleteGroup",
  "/mruv.groups.MruVGroupsService/GetGroups",
  "/mruv.groups.MruVGroupsService/AssignOwner",
  "/mruv.groups.MruVGroupsService/GetOwner",
  "/mruv.groups.MruVGroupsService/AddMember",
  "/mruv.groups.MruVGroupsService/GetMembers",
  "/mruv.groups.MruVGroupsService/RemoveMember",
  "/mruv.groups.MruVGroupsService/AddPermission",
  "/mruv.groups.MruVGroupsService/GetPermissions",
  "/mruv.groups.MruVGroupsService/RemovePermission",
  "/mruv.groups.MruVGroupsService/AddSubgroup",
  "/mruv.groups.MruVGroupsService/GetSubgroups",
  "/mruv.groups.MruVGroupsService/RemoveSubgroup",
  "/mruv.groups.MruVGroupsService/IsPermitted",
  "/mruv.groups.MruVGroupsService/GetServiceStatus",
  "/mruv.groups.MruVGroupsService/GetServiceVersion",
};

std::unique_ptr< MruVGroupsService::Stub> MruVGroupsService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MruVGroupsService::Stub> stub(new MruVGroupsService::Stub(channel));
  return stub;
}

MruVGroupsService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateGroup_(MruVGroupsService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetGroup_(MruVGroupsService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateGroup_(MruVGroupsService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteGroup_(MruVGroupsService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetGroups_(MruVGroupsService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AssignOwner_(MruVGroupsService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOwner_(MruVGroupsService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddMember_(MruVGroupsService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMembers_(MruVGroupsService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveMember_(MruVGroupsService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddPermission_(MruVGroupsService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPermissions_(MruVGroupsService_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemovePermission_(MruVGroupsService_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddSubgroup_(MruVGroupsService_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSubgroups_(MruVGroupsService_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveSubgroup_(MruVGroupsService_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsPermitted_(MruVGroupsService_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetServiceStatus_(MruVGroupsService_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetServiceVersion_(MruVGroupsService_method_names[18], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MruVGroupsService::Stub::CreateGroup(::grpc::ClientContext* context, const ::mruv::groups::CreateGroupRequest& request, ::mruv::groups::CreateGroupResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateGroup_, context, request, response);
}

void MruVGroupsService::Stub::experimental_async::CreateGroup(::grpc::ClientContext* context, const ::mruv::groups::CreateGroupRequest* request, ::mruv::groups::CreateGroupResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateGroup_, context, request, response, std::move(f));
}

void MruVGroupsService::Stub::experimental_async::CreateGroup(::grpc::ClientContext* context, const ::mruv::groups::CreateGroupRequest* request, ::mruv::groups::CreateGroupResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateGroup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::groups::CreateGroupResponse>* MruVGroupsService::Stub::PrepareAsyncCreateGroupRaw(::grpc::ClientContext* context, const ::mruv::groups::CreateGroupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mruv::groups::CreateGroupResponse>::Create(channel_.get(), cq, rpcmethod_CreateGroup_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::mruv::groups::CreateGroupResponse>* MruVGroupsService::Stub::AsyncCreateGroupRaw(::grpc::ClientContext* context, const ::mruv::groups::CreateGroupRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateGroupRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MruVGroupsService::Stub::GetGroup(::grpc::ClientContext* context, const ::mruv::groups::GetGroupRequest& request, ::mruv::groups::GetGroupResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetGroup_, context, request, response);
}

void MruVGroupsService::Stub::experimental_async::GetGroup(::grpc::ClientContext* context, const ::mruv::groups::GetGroupRequest* request, ::mruv::groups::GetGroupResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetGroup_, context, request, response, std::move(f));
}

void MruVGroupsService::Stub::experimental_async::GetGroup(::grpc::ClientContext* context, const ::mruv::groups::GetGroupRequest* request, ::mruv::groups::GetGroupResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetGroup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::groups::GetGroupResponse>* MruVGroupsService::Stub::PrepareAsyncGetGroupRaw(::grpc::ClientContext* context, const ::mruv::groups::GetGroupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mruv::groups::GetGroupResponse>::Create(channel_.get(), cq, rpcmethod_GetGroup_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::mruv::groups::GetGroupResponse>* MruVGroupsService::Stub::AsyncGetGroupRaw(::grpc::ClientContext* context, const ::mruv::groups::GetGroupRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetGroupRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MruVGroupsService::Stub::UpdateGroup(::grpc::ClientContext* context, const ::mruv::groups::UpdateGroupRequest& request, ::mruv::groups::UpdateGroupResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateGroup_, context, request, response);
}

void MruVGroupsService::Stub::experimental_async::UpdateGroup(::grpc::ClientContext* context, const ::mruv::groups::UpdateGroupRequest* request, ::mruv::groups::UpdateGroupResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateGroup_, context, request, response, std::move(f));
}

void MruVGroupsService::Stub::experimental_async::UpdateGroup(::grpc::ClientContext* context, const ::mruv::groups::UpdateGroupRequest* request, ::mruv::groups::UpdateGroupResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateGroup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::groups::UpdateGroupResponse>* MruVGroupsService::Stub::PrepareAsyncUpdateGroupRaw(::grpc::ClientContext* context, const ::mruv::groups::UpdateGroupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mruv::groups::UpdateGroupResponse>::Create(channel_.get(), cq, rpcmethod_UpdateGroup_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::mruv::groups::UpdateGroupResponse>* MruVGroupsService::Stub::AsyncUpdateGroupRaw(::grpc::ClientContext* context, const ::mruv::groups::UpdateGroupRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateGroupRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MruVGroupsService::Stub::DeleteGroup(::grpc::ClientContext* context, const ::mruv::groups::DeleteGroupRequest& request, ::mruv::groups::DeleteGroupResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteGroup_, context, request, response);
}

void MruVGroupsService::Stub::experimental_async::DeleteGroup(::grpc::ClientContext* context, const ::mruv::groups::DeleteGroupRequest* request, ::mruv::groups::DeleteGroupResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteGroup_, context, request, response, std::move(f));
}

void MruVGroupsService::Stub::experimental_async::DeleteGroup(::grpc::ClientContext* context, const ::mruv::groups::DeleteGroupRequest* request, ::mruv::groups::DeleteGroupResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteGroup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::groups::DeleteGroupResponse>* MruVGroupsService::Stub::PrepareAsyncDeleteGroupRaw(::grpc::ClientContext* context, const ::mruv::groups::DeleteGroupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mruv::groups::DeleteGroupResponse>::Create(channel_.get(), cq, rpcmethod_DeleteGroup_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::mruv::groups::DeleteGroupResponse>* MruVGroupsService::Stub::AsyncDeleteGroupRaw(::grpc::ClientContext* context, const ::mruv::groups::DeleteGroupRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteGroupRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MruVGroupsService::Stub::GetGroups(::grpc::ClientContext* context, const ::mruv::groups::GetGroupsRequest& request, ::mruv::groups::GetGroupsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetGroups_, context, request, response);
}

void MruVGroupsService::Stub::experimental_async::GetGroups(::grpc::ClientContext* context, const ::mruv::groups::GetGroupsRequest* request, ::mruv::groups::GetGroupsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetGroups_, context, request, response, std::move(f));
}

void MruVGroupsService::Stub::experimental_async::GetGroups(::grpc::ClientContext* context, const ::mruv::groups::GetGroupsRequest* request, ::mruv::groups::GetGroupsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetGroups_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::groups::GetGroupsResponse>* MruVGroupsService::Stub::PrepareAsyncGetGroupsRaw(::grpc::ClientContext* context, const ::mruv::groups::GetGroupsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mruv::groups::GetGroupsResponse>::Create(channel_.get(), cq, rpcmethod_GetGroups_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::mruv::groups::GetGroupsResponse>* MruVGroupsService::Stub::AsyncGetGroupsRaw(::grpc::ClientContext* context, const ::mruv::groups::GetGroupsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetGroupsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MruVGroupsService::Stub::AssignOwner(::grpc::ClientContext* context, const ::mruv::groups::AssignOwnerRequest& request, ::mruv::groups::AssignOwnerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AssignOwner_, context, request, response);
}

void MruVGroupsService::Stub::experimental_async::AssignOwner(::grpc::ClientContext* context, const ::mruv::groups::AssignOwnerRequest* request, ::mruv::groups::AssignOwnerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AssignOwner_, context, request, response, std::move(f));
}

void MruVGroupsService::Stub::experimental_async::AssignOwner(::grpc::ClientContext* context, const ::mruv::groups::AssignOwnerRequest* request, ::mruv::groups::AssignOwnerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AssignOwner_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::groups::AssignOwnerResponse>* MruVGroupsService::Stub::PrepareAsyncAssignOwnerRaw(::grpc::ClientContext* context, const ::mruv::groups::AssignOwnerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mruv::groups::AssignOwnerResponse>::Create(channel_.get(), cq, rpcmethod_AssignOwner_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::mruv::groups::AssignOwnerResponse>* MruVGroupsService::Stub::AsyncAssignOwnerRaw(::grpc::ClientContext* context, const ::mruv::groups::AssignOwnerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAssignOwnerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MruVGroupsService::Stub::GetOwner(::grpc::ClientContext* context, const ::mruv::groups::GetOwnerRequest& request, ::mruv::groups::GetOwnerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetOwner_, context, request, response);
}

void MruVGroupsService::Stub::experimental_async::GetOwner(::grpc::ClientContext* context, const ::mruv::groups::GetOwnerRequest* request, ::mruv::groups::GetOwnerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetOwner_, context, request, response, std::move(f));
}

void MruVGroupsService::Stub::experimental_async::GetOwner(::grpc::ClientContext* context, const ::mruv::groups::GetOwnerRequest* request, ::mruv::groups::GetOwnerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetOwner_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::groups::GetOwnerResponse>* MruVGroupsService::Stub::PrepareAsyncGetOwnerRaw(::grpc::ClientContext* context, const ::mruv::groups::GetOwnerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mruv::groups::GetOwnerResponse>::Create(channel_.get(), cq, rpcmethod_GetOwner_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::mruv::groups::GetOwnerResponse>* MruVGroupsService::Stub::AsyncGetOwnerRaw(::grpc::ClientContext* context, const ::mruv::groups::GetOwnerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetOwnerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MruVGroupsService::Stub::AddMember(::grpc::ClientContext* context, const ::mruv::groups::AddMemberRequest& request, ::mruv::groups::AddMemberResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddMember_, context, request, response);
}

void MruVGroupsService::Stub::experimental_async::AddMember(::grpc::ClientContext* context, const ::mruv::groups::AddMemberRequest* request, ::mruv::groups::AddMemberResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddMember_, context, request, response, std::move(f));
}

void MruVGroupsService::Stub::experimental_async::AddMember(::grpc::ClientContext* context, const ::mruv::groups::AddMemberRequest* request, ::mruv::groups::AddMemberResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddMember_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::groups::AddMemberResponse>* MruVGroupsService::Stub::PrepareAsyncAddMemberRaw(::grpc::ClientContext* context, const ::mruv::groups::AddMemberRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mruv::groups::AddMemberResponse>::Create(channel_.get(), cq, rpcmethod_AddMember_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::mruv::groups::AddMemberResponse>* MruVGroupsService::Stub::AsyncAddMemberRaw(::grpc::ClientContext* context, const ::mruv::groups::AddMemberRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddMemberRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MruVGroupsService::Stub::GetMembers(::grpc::ClientContext* context, const ::mruv::groups::GetMembersRequest& request, ::mruv::groups::GetMembersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetMembers_, context, request, response);
}

void MruVGroupsService::Stub::experimental_async::GetMembers(::grpc::ClientContext* context, const ::mruv::groups::GetMembersRequest* request, ::mruv::groups::GetMembersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMembers_, context, request, response, std::move(f));
}

void MruVGroupsService::Stub::experimental_async::GetMembers(::grpc::ClientContext* context, const ::mruv::groups::GetMembersRequest* request, ::mruv::groups::GetMembersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMembers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::groups::GetMembersResponse>* MruVGroupsService::Stub::PrepareAsyncGetMembersRaw(::grpc::ClientContext* context, const ::mruv::groups::GetMembersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mruv::groups::GetMembersResponse>::Create(channel_.get(), cq, rpcmethod_GetMembers_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::mruv::groups::GetMembersResponse>* MruVGroupsService::Stub::AsyncGetMembersRaw(::grpc::ClientContext* context, const ::mruv::groups::GetMembersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMembersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MruVGroupsService::Stub::RemoveMember(::grpc::ClientContext* context, const ::mruv::groups::RemoveMemberRequest& request, ::mruv::groups::RemoveMemberResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemoveMember_, context, request, response);
}

void MruVGroupsService::Stub::experimental_async::RemoveMember(::grpc::ClientContext* context, const ::mruv::groups::RemoveMemberRequest* request, ::mruv::groups::RemoveMemberResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveMember_, context, request, response, std::move(f));
}

void MruVGroupsService::Stub::experimental_async::RemoveMember(::grpc::ClientContext* context, const ::mruv::groups::RemoveMemberRequest* request, ::mruv::groups::RemoveMemberResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveMember_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::groups::RemoveMemberResponse>* MruVGroupsService::Stub::PrepareAsyncRemoveMemberRaw(::grpc::ClientContext* context, const ::mruv::groups::RemoveMemberRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mruv::groups::RemoveMemberResponse>::Create(channel_.get(), cq, rpcmethod_RemoveMember_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::mruv::groups::RemoveMemberResponse>* MruVGroupsService::Stub::AsyncRemoveMemberRaw(::grpc::ClientContext* context, const ::mruv::groups::RemoveMemberRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveMemberRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MruVGroupsService::Stub::AddPermission(::grpc::ClientContext* context, const ::mruv::groups::AddPermissionRequest& request, ::mruv::groups::AddPermissionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddPermission_, context, request, response);
}

void MruVGroupsService::Stub::experimental_async::AddPermission(::grpc::ClientContext* context, const ::mruv::groups::AddPermissionRequest* request, ::mruv::groups::AddPermissionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddPermission_, context, request, response, std::move(f));
}

void MruVGroupsService::Stub::experimental_async::AddPermission(::grpc::ClientContext* context, const ::mruv::groups::AddPermissionRequest* request, ::mruv::groups::AddPermissionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddPermission_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::groups::AddPermissionResponse>* MruVGroupsService::Stub::PrepareAsyncAddPermissionRaw(::grpc::ClientContext* context, const ::mruv::groups::AddPermissionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mruv::groups::AddPermissionResponse>::Create(channel_.get(), cq, rpcmethod_AddPermission_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::mruv::groups::AddPermissionResponse>* MruVGroupsService::Stub::AsyncAddPermissionRaw(::grpc::ClientContext* context, const ::mruv::groups::AddPermissionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddPermissionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MruVGroupsService::Stub::GetPermissions(::grpc::ClientContext* context, const ::mruv::groups::GetPermissionsRequest& request, ::mruv::groups::GetPermissionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetPermissions_, context, request, response);
}

void MruVGroupsService::Stub::experimental_async::GetPermissions(::grpc::ClientContext* context, const ::mruv::groups::GetPermissionsRequest* request, ::mruv::groups::GetPermissionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPermissions_, context, request, response, std::move(f));
}

void MruVGroupsService::Stub::experimental_async::GetPermissions(::grpc::ClientContext* context, const ::mruv::groups::GetPermissionsRequest* request, ::mruv::groups::GetPermissionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPermissions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::groups::GetPermissionsResponse>* MruVGroupsService::Stub::PrepareAsyncGetPermissionsRaw(::grpc::ClientContext* context, const ::mruv::groups::GetPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mruv::groups::GetPermissionsResponse>::Create(channel_.get(), cq, rpcmethod_GetPermissions_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::mruv::groups::GetPermissionsResponse>* MruVGroupsService::Stub::AsyncGetPermissionsRaw(::grpc::ClientContext* context, const ::mruv::groups::GetPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPermissionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MruVGroupsService::Stub::RemovePermission(::grpc::ClientContext* context, const ::mruv::groups::RemovePermissionRequest& request, ::mruv::groups::RemovePermissionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemovePermission_, context, request, response);
}

void MruVGroupsService::Stub::experimental_async::RemovePermission(::grpc::ClientContext* context, const ::mruv::groups::RemovePermissionRequest* request, ::mruv::groups::RemovePermissionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemovePermission_, context, request, response, std::move(f));
}

void MruVGroupsService::Stub::experimental_async::RemovePermission(::grpc::ClientContext* context, const ::mruv::groups::RemovePermissionRequest* request, ::mruv::groups::RemovePermissionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemovePermission_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::groups::RemovePermissionResponse>* MruVGroupsService::Stub::PrepareAsyncRemovePermissionRaw(::grpc::ClientContext* context, const ::mruv::groups::RemovePermissionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mruv::groups::RemovePermissionResponse>::Create(channel_.get(), cq, rpcmethod_RemovePermission_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::mruv::groups::RemovePermissionResponse>* MruVGroupsService::Stub::AsyncRemovePermissionRaw(::grpc::ClientContext* context, const ::mruv::groups::RemovePermissionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemovePermissionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MruVGroupsService::Stub::AddSubgroup(::grpc::ClientContext* context, const ::mruv::groups::AddSubgroupRequest& request, ::mruv::groups::AddSubgroupResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddSubgroup_, context, request, response);
}

void MruVGroupsService::Stub::experimental_async::AddSubgroup(::grpc::ClientContext* context, const ::mruv::groups::AddSubgroupRequest* request, ::mruv::groups::AddSubgroupResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddSubgroup_, context, request, response, std::move(f));
}

void MruVGroupsService::Stub::experimental_async::AddSubgroup(::grpc::ClientContext* context, const ::mruv::groups::AddSubgroupRequest* request, ::mruv::groups::AddSubgroupResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddSubgroup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::groups::AddSubgroupResponse>* MruVGroupsService::Stub::PrepareAsyncAddSubgroupRaw(::grpc::ClientContext* context, const ::mruv::groups::AddSubgroupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mruv::groups::AddSubgroupResponse>::Create(channel_.get(), cq, rpcmethod_AddSubgroup_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::mruv::groups::AddSubgroupResponse>* MruVGroupsService::Stub::AsyncAddSubgroupRaw(::grpc::ClientContext* context, const ::mruv::groups::AddSubgroupRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddSubgroupRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MruVGroupsService::Stub::GetSubgroups(::grpc::ClientContext* context, const ::mruv::groups::GetSubgroupsRequest& request, ::mruv::groups::GetSubgroupsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetSubgroups_, context, request, response);
}

void MruVGroupsService::Stub::experimental_async::GetSubgroups(::grpc::ClientContext* context, const ::mruv::groups::GetSubgroupsRequest* request, ::mruv::groups::GetSubgroupsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetSubgroups_, context, request, response, std::move(f));
}

void MruVGroupsService::Stub::experimental_async::GetSubgroups(::grpc::ClientContext* context, const ::mruv::groups::GetSubgroupsRequest* request, ::mruv::groups::GetSubgroupsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetSubgroups_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::groups::GetSubgroupsResponse>* MruVGroupsService::Stub::PrepareAsyncGetSubgroupsRaw(::grpc::ClientContext* context, const ::mruv::groups::GetSubgroupsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mruv::groups::GetSubgroupsResponse>::Create(channel_.get(), cq, rpcmethod_GetSubgroups_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::mruv::groups::GetSubgroupsResponse>* MruVGroupsService::Stub::AsyncGetSubgroupsRaw(::grpc::ClientContext* context, const ::mruv::groups::GetSubgroupsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSubgroupsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MruVGroupsService::Stub::RemoveSubgroup(::grpc::ClientContext* context, const ::mruv::groups::RemoveSubgroupRequest& request, ::mruv::groups::RemoveSubgroupResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemoveSubgroup_, context, request, response);
}

void MruVGroupsService::Stub::experimental_async::RemoveSubgroup(::grpc::ClientContext* context, const ::mruv::groups::RemoveSubgroupRequest* request, ::mruv::groups::RemoveSubgroupResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveSubgroup_, context, request, response, std::move(f));
}

void MruVGroupsService::Stub::experimental_async::RemoveSubgroup(::grpc::ClientContext* context, const ::mruv::groups::RemoveSubgroupRequest* request, ::mruv::groups::RemoveSubgroupResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveSubgroup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::groups::RemoveSubgroupResponse>* MruVGroupsService::Stub::PrepareAsyncRemoveSubgroupRaw(::grpc::ClientContext* context, const ::mruv::groups::RemoveSubgroupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mruv::groups::RemoveSubgroupResponse>::Create(channel_.get(), cq, rpcmethod_RemoveSubgroup_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::mruv::groups::RemoveSubgroupResponse>* MruVGroupsService::Stub::AsyncRemoveSubgroupRaw(::grpc::ClientContext* context, const ::mruv::groups::RemoveSubgroupRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveSubgroupRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MruVGroupsService::Stub::IsPermitted(::grpc::ClientContext* context, const ::mruv::groups::IsPermittedRequest& request, ::mruv::groups::IsPermittedResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_IsPermitted_, context, request, response);
}

void MruVGroupsService::Stub::experimental_async::IsPermitted(::grpc::ClientContext* context, const ::mruv::groups::IsPermittedRequest* request, ::mruv::groups::IsPermittedResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_IsPermitted_, context, request, response, std::move(f));
}

void MruVGroupsService::Stub::experimental_async::IsPermitted(::grpc::ClientContext* context, const ::mruv::groups::IsPermittedRequest* request, ::mruv::groups::IsPermittedResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_IsPermitted_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::groups::IsPermittedResponse>* MruVGroupsService::Stub::PrepareAsyncIsPermittedRaw(::grpc::ClientContext* context, const ::mruv::groups::IsPermittedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mruv::groups::IsPermittedResponse>::Create(channel_.get(), cq, rpcmethod_IsPermitted_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::mruv::groups::IsPermittedResponse>* MruVGroupsService::Stub::AsyncIsPermittedRaw(::grpc::ClientContext* context, const ::mruv::groups::IsPermittedRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIsPermittedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MruVGroupsService::Stub::GetServiceStatus(::grpc::ClientContext* context, const ::mruv::common::ServiceStatusRequest& request, ::mruv::common::ServiceStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetServiceStatus_, context, request, response);
}

void MruVGroupsService::Stub::experimental_async::GetServiceStatus(::grpc::ClientContext* context, const ::mruv::common::ServiceStatusRequest* request, ::mruv::common::ServiceStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetServiceStatus_, context, request, response, std::move(f));
}

void MruVGroupsService::Stub::experimental_async::GetServiceStatus(::grpc::ClientContext* context, const ::mruv::common::ServiceStatusRequest* request, ::mruv::common::ServiceStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetServiceStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::common::ServiceStatusResponse>* MruVGroupsService::Stub::PrepareAsyncGetServiceStatusRaw(::grpc::ClientContext* context, const ::mruv::common::ServiceStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mruv::common::ServiceStatusResponse>::Create(channel_.get(), cq, rpcmethod_GetServiceStatus_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::mruv::common::ServiceStatusResponse>* MruVGroupsService::Stub::AsyncGetServiceStatusRaw(::grpc::ClientContext* context, const ::mruv::common::ServiceStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetServiceStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MruVGroupsService::Stub::GetServiceVersion(::grpc::ClientContext* context, const ::mruv::common::VersionRequest& request, ::mruv::common::VersionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetServiceVersion_, context, request, response);
}

void MruVGroupsService::Stub::experimental_async::GetServiceVersion(::grpc::ClientContext* context, const ::mruv::common::VersionRequest* request, ::mruv::common::VersionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetServiceVersion_, context, request, response, std::move(f));
}

void MruVGroupsService::Stub::experimental_async::GetServiceVersion(::grpc::ClientContext* context, const ::mruv::common::VersionRequest* request, ::mruv::common::VersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetServiceVersion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::common::VersionResponse>* MruVGroupsService::Stub::PrepareAsyncGetServiceVersionRaw(::grpc::ClientContext* context, const ::mruv::common::VersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mruv::common::VersionResponse>::Create(channel_.get(), cq, rpcmethod_GetServiceVersion_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::mruv::common::VersionResponse>* MruVGroupsService::Stub::AsyncGetServiceVersionRaw(::grpc::ClientContext* context, const ::mruv::common::VersionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetServiceVersionRaw(context, request, cq);
  result->StartCall();
  return result;
}

MruVGroupsService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVGroupsService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVGroupsService::Service, ::mruv::groups::CreateGroupRequest, ::mruv::groups::CreateGroupResponse>(
          [](MruVGroupsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mruv::groups::CreateGroupRequest* req,
             ::mruv::groups::CreateGroupResponse* resp) {
               return service->CreateGroup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVGroupsService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVGroupsService::Service, ::mruv::groups::GetGroupRequest, ::mruv::groups::GetGroupResponse>(
          [](MruVGroupsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mruv::groups::GetGroupRequest* req,
             ::mruv::groups::GetGroupResponse* resp) {
               return service->GetGroup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVGroupsService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVGroupsService::Service, ::mruv::groups::UpdateGroupRequest, ::mruv::groups::UpdateGroupResponse>(
          [](MruVGroupsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mruv::groups::UpdateGroupRequest* req,
             ::mruv::groups::UpdateGroupResponse* resp) {
               return service->UpdateGroup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVGroupsService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVGroupsService::Service, ::mruv::groups::DeleteGroupRequest, ::mruv::groups::DeleteGroupResponse>(
          [](MruVGroupsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mruv::groups::DeleteGroupRequest* req,
             ::mruv::groups::DeleteGroupResponse* resp) {
               return service->DeleteGroup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVGroupsService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVGroupsService::Service, ::mruv::groups::GetGroupsRequest, ::mruv::groups::GetGroupsResponse>(
          [](MruVGroupsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mruv::groups::GetGroupsRequest* req,
             ::mruv::groups::GetGroupsResponse* resp) {
               return service->GetGroups(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVGroupsService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVGroupsService::Service, ::mruv::groups::AssignOwnerRequest, ::mruv::groups::AssignOwnerResponse>(
          [](MruVGroupsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mruv::groups::AssignOwnerRequest* req,
             ::mruv::groups::AssignOwnerResponse* resp) {
               return service->AssignOwner(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVGroupsService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVGroupsService::Service, ::mruv::groups::GetOwnerRequest, ::mruv::groups::GetOwnerResponse>(
          [](MruVGroupsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mruv::groups::GetOwnerRequest* req,
             ::mruv::groups::GetOwnerResponse* resp) {
               return service->GetOwner(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVGroupsService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVGroupsService::Service, ::mruv::groups::AddMemberRequest, ::mruv::groups::AddMemberResponse>(
          [](MruVGroupsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mruv::groups::AddMemberRequest* req,
             ::mruv::groups::AddMemberResponse* resp) {
               return service->AddMember(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVGroupsService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVGroupsService::Service, ::mruv::groups::GetMembersRequest, ::mruv::groups::GetMembersResponse>(
          [](MruVGroupsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mruv::groups::GetMembersRequest* req,
             ::mruv::groups::GetMembersResponse* resp) {
               return service->GetMembers(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVGroupsService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVGroupsService::Service, ::mruv::groups::RemoveMemberRequest, ::mruv::groups::RemoveMemberResponse>(
          [](MruVGroupsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mruv::groups::RemoveMemberRequest* req,
             ::mruv::groups::RemoveMemberResponse* resp) {
               return service->RemoveMember(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVGroupsService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVGroupsService::Service, ::mruv::groups::AddPermissionRequest, ::mruv::groups::AddPermissionResponse>(
          [](MruVGroupsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mruv::groups::AddPermissionRequest* req,
             ::mruv::groups::AddPermissionResponse* resp) {
               return service->AddPermission(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVGroupsService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVGroupsService::Service, ::mruv::groups::GetPermissionsRequest, ::mruv::groups::GetPermissionsResponse>(
          [](MruVGroupsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mruv::groups::GetPermissionsRequest* req,
             ::mruv::groups::GetPermissionsResponse* resp) {
               return service->GetPermissions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVGroupsService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVGroupsService::Service, ::mruv::groups::RemovePermissionRequest, ::mruv::groups::RemovePermissionResponse>(
          [](MruVGroupsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mruv::groups::RemovePermissionRequest* req,
             ::mruv::groups::RemovePermissionResponse* resp) {
               return service->RemovePermission(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVGroupsService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVGroupsService::Service, ::mruv::groups::AddSubgroupRequest, ::mruv::groups::AddSubgroupResponse>(
          [](MruVGroupsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mruv::groups::AddSubgroupRequest* req,
             ::mruv::groups::AddSubgroupResponse* resp) {
               return service->AddSubgroup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVGroupsService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVGroupsService::Service, ::mruv::groups::GetSubgroupsRequest, ::mruv::groups::GetSubgroupsResponse>(
          [](MruVGroupsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mruv::groups::GetSubgroupsRequest* req,
             ::mruv::groups::GetSubgroupsResponse* resp) {
               return service->GetSubgroups(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVGroupsService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVGroupsService::Service, ::mruv::groups::RemoveSubgroupRequest, ::mruv::groups::RemoveSubgroupResponse>(
          [](MruVGroupsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mruv::groups::RemoveSubgroupRequest* req,
             ::mruv::groups::RemoveSubgroupResponse* resp) {
               return service->RemoveSubgroup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVGroupsService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVGroupsService::Service, ::mruv::groups::IsPermittedRequest, ::mruv::groups::IsPermittedResponse>(
          [](MruVGroupsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mruv::groups::IsPermittedRequest* req,
             ::mruv::groups::IsPermittedResponse* resp) {
               return service->IsPermitted(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVGroupsService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVGroupsService::Service, ::mruv::common::ServiceStatusRequest, ::mruv::common::ServiceStatusResponse>(
          [](MruVGroupsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mruv::common::ServiceStatusRequest* req,
             ::mruv::common::ServiceStatusResponse* resp) {
               return service->GetServiceStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVGroupsService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVGroupsService::Service, ::mruv::common::VersionRequest, ::mruv::common::VersionResponse>(
          [](MruVGroupsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mruv::common::VersionRequest* req,
             ::mruv::common::VersionResponse* resp) {
               return service->GetServiceVersion(ctx, req, resp);
             }, this)));
}

MruVGroupsService::Service::~Service() {
}

::grpc::Status MruVGroupsService::Service::CreateGroup(::grpc::ServerContext* context, const ::mruv::groups::CreateGroupRequest* request, ::mruv::groups::CreateGroupResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVGroupsService::Service::GetGroup(::grpc::ServerContext* context, const ::mruv::groups::GetGroupRequest* request, ::mruv::groups::GetGroupResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVGroupsService::Service::UpdateGroup(::grpc::ServerContext* context, const ::mruv::groups::UpdateGroupRequest* request, ::mruv::groups::UpdateGroupResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVGroupsService::Service::DeleteGroup(::grpc::ServerContext* context, const ::mruv::groups::DeleteGroupRequest* request, ::mruv::groups::DeleteGroupResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVGroupsService::Service::GetGroups(::grpc::ServerContext* context, const ::mruv::groups::GetGroupsRequest* request, ::mruv::groups::GetGroupsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVGroupsService::Service::AssignOwner(::grpc::ServerContext* context, const ::mruv::groups::AssignOwnerRequest* request, ::mruv::groups::AssignOwnerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVGroupsService::Service::GetOwner(::grpc::ServerContext* context, const ::mruv::groups::GetOwnerRequest* request, ::mruv::groups::GetOwnerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVGroupsService::Service::AddMember(::grpc::ServerContext* context, const ::mruv::groups::AddMemberRequest* request, ::mruv::groups::AddMemberResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVGroupsService::Service::GetMembers(::grpc::ServerContext* context, const ::mruv::groups::GetMembersRequest* request, ::mruv::groups::GetMembersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVGroupsService::Service::RemoveMember(::grpc::ServerContext* context, const ::mruv::groups::RemoveMemberRequest* request, ::mruv::groups::RemoveMemberResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVGroupsService::Service::AddPermission(::grpc::ServerContext* context, const ::mruv::groups::AddPermissionRequest* request, ::mruv::groups::AddPermissionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVGroupsService::Service::GetPermissions(::grpc::ServerContext* context, const ::mruv::groups::GetPermissionsRequest* request, ::mruv::groups::GetPermissionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVGroupsService::Service::RemovePermission(::grpc::ServerContext* context, const ::mruv::groups::RemovePermissionRequest* request, ::mruv::groups::RemovePermissionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVGroupsService::Service::AddSubgroup(::grpc::ServerContext* context, const ::mruv::groups::AddSubgroupRequest* request, ::mruv::groups::AddSubgroupResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVGroupsService::Service::GetSubgroups(::grpc::ServerContext* context, const ::mruv::groups::GetSubgroupsRequest* request, ::mruv::groups::GetSubgroupsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVGroupsService::Service::RemoveSubgroup(::grpc::ServerContext* context, const ::mruv::groups::RemoveSubgroupRequest* request, ::mruv::groups::RemoveSubgroupResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVGroupsService::Service::IsPermitted(::grpc::ServerContext* context, const ::mruv::groups::IsPermittedRequest* request, ::mruv::groups::IsPermittedResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVGroupsService::Service::GetServiceStatus(::grpc::ServerContext* context, const ::mruv::common::ServiceStatusRequest* request, ::mruv::common::ServiceStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVGroupsService::Service::GetServiceVersion(::grpc::ServerContext* context, const ::mruv::common::VersionRequest* request, ::mruv::common::VersionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mruv
}  // namespace groups

