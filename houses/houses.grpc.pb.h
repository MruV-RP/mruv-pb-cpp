// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: houses/houses.proto
#ifndef GRPC_houses_2fhouses_2eproto__INCLUDED
#define GRPC_houses_2fhouses_2eproto__INCLUDED

#include "houses/houses.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace mruv {
namespace houses {

// The MruV houses service provides procedures for managing houses.
class MruVHousesService final {
 public:
  static constexpr char const* service_full_name() {
    return "mruv.houses.MruVHousesService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Create a house.
    virtual ::grpc::Status CreateHouse(::grpc::ClientContext* context, const ::mruv::houses::CreateHouseRequest& request, ::mruv::houses::CreateHouseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::houses::CreateHouseResponse>> AsyncCreateHouse(::grpc::ClientContext* context, const ::mruv::houses::CreateHouseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::houses::CreateHouseResponse>>(AsyncCreateHouseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::houses::CreateHouseResponse>> PrepareAsyncCreateHouse(::grpc::ClientContext* context, const ::mruv::houses::CreateHouseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::houses::CreateHouseResponse>>(PrepareAsyncCreateHouseRaw(context, request, cq));
    }
    // Get a house.
    virtual ::grpc::Status GetHouse(::grpc::ClientContext* context, const ::mruv::houses::GetHouseRequest& request, ::mruv::houses::GetHouseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::houses::GetHouseResponse>> AsyncGetHouse(::grpc::ClientContext* context, const ::mruv::houses::GetHouseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::houses::GetHouseResponse>>(AsyncGetHouseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::houses::GetHouseResponse>> PrepareAsyncGetHouse(::grpc::ClientContext* context, const ::mruv::houses::GetHouseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::houses::GetHouseResponse>>(PrepareAsyncGetHouseRaw(context, request, cq));
    }
    // Update a house.
    virtual ::grpc::Status UpdateHouse(::grpc::ClientContext* context, const ::mruv::houses::UpdateHouseRequest& request, ::mruv::houses::UpdateHouseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::houses::UpdateHouseResponse>> AsyncUpdateHouse(::grpc::ClientContext* context, const ::mruv::houses::UpdateHouseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::houses::UpdateHouseResponse>>(AsyncUpdateHouseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::houses::UpdateHouseResponse>> PrepareAsyncUpdateHouse(::grpc::ClientContext* context, const ::mruv::houses::UpdateHouseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::houses::UpdateHouseResponse>>(PrepareAsyncUpdateHouseRaw(context, request, cq));
    }
    // Delete a house.
    virtual ::grpc::Status DeleteHouse(::grpc::ClientContext* context, const ::mruv::houses::DeleteHouseRequest& request, ::mruv::houses::DeleteHouseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::houses::DeleteHouseResponse>> AsyncDeleteHouse(::grpc::ClientContext* context, const ::mruv::houses::DeleteHouseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::houses::DeleteHouseResponse>>(AsyncDeleteHouseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::houses::DeleteHouseResponse>> PrepareAsyncDeleteHouse(::grpc::ClientContext* context, const ::mruv::houses::DeleteHouseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::houses::DeleteHouseResponse>>(PrepareAsyncDeleteHouseRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Create a house.
      virtual void CreateHouse(::grpc::ClientContext* context, const ::mruv::houses::CreateHouseRequest* request, ::mruv::houses::CreateHouseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateHouse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::houses::CreateHouseResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateHouse(::grpc::ClientContext* context, const ::mruv::houses::CreateHouseRequest* request, ::mruv::houses::CreateHouseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateHouse(::grpc::ClientContext* context, const ::mruv::houses::CreateHouseRequest* request, ::mruv::houses::CreateHouseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateHouse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::houses::CreateHouseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateHouse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::houses::CreateHouseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get a house.
      virtual void GetHouse(::grpc::ClientContext* context, const ::mruv::houses::GetHouseRequest* request, ::mruv::houses::GetHouseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetHouse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::houses::GetHouseResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetHouse(::grpc::ClientContext* context, const ::mruv::houses::GetHouseRequest* request, ::mruv::houses::GetHouseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetHouse(::grpc::ClientContext* context, const ::mruv::houses::GetHouseRequest* request, ::mruv::houses::GetHouseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetHouse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::houses::GetHouseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetHouse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::houses::GetHouseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Update a house.
      virtual void UpdateHouse(::grpc::ClientContext* context, const ::mruv::houses::UpdateHouseRequest* request, ::mruv::houses::UpdateHouseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateHouse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::houses::UpdateHouseResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateHouse(::grpc::ClientContext* context, const ::mruv::houses::UpdateHouseRequest* request, ::mruv::houses::UpdateHouseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateHouse(::grpc::ClientContext* context, const ::mruv::houses::UpdateHouseRequest* request, ::mruv::houses::UpdateHouseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateHouse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::houses::UpdateHouseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateHouse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::houses::UpdateHouseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Delete a house.
      virtual void DeleteHouse(::grpc::ClientContext* context, const ::mruv::houses::DeleteHouseRequest* request, ::mruv::houses::DeleteHouseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteHouse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::houses::DeleteHouseResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteHouse(::grpc::ClientContext* context, const ::mruv::houses::DeleteHouseRequest* request, ::mruv::houses::DeleteHouseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteHouse(::grpc::ClientContext* context, const ::mruv::houses::DeleteHouseRequest* request, ::mruv::houses::DeleteHouseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteHouse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::houses::DeleteHouseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteHouse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::houses::DeleteHouseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::houses::CreateHouseResponse>* AsyncCreateHouseRaw(::grpc::ClientContext* context, const ::mruv::houses::CreateHouseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::houses::CreateHouseResponse>* PrepareAsyncCreateHouseRaw(::grpc::ClientContext* context, const ::mruv::houses::CreateHouseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::houses::GetHouseResponse>* AsyncGetHouseRaw(::grpc::ClientContext* context, const ::mruv::houses::GetHouseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::houses::GetHouseResponse>* PrepareAsyncGetHouseRaw(::grpc::ClientContext* context, const ::mruv::houses::GetHouseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::houses::UpdateHouseResponse>* AsyncUpdateHouseRaw(::grpc::ClientContext* context, const ::mruv::houses::UpdateHouseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::houses::UpdateHouseResponse>* PrepareAsyncUpdateHouseRaw(::grpc::ClientContext* context, const ::mruv::houses::UpdateHouseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::houses::DeleteHouseResponse>* AsyncDeleteHouseRaw(::grpc::ClientContext* context, const ::mruv::houses::DeleteHouseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::houses::DeleteHouseResponse>* PrepareAsyncDeleteHouseRaw(::grpc::ClientContext* context, const ::mruv::houses::DeleteHouseRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateHouse(::grpc::ClientContext* context, const ::mruv::houses::CreateHouseRequest& request, ::mruv::houses::CreateHouseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::houses::CreateHouseResponse>> AsyncCreateHouse(::grpc::ClientContext* context, const ::mruv::houses::CreateHouseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::houses::CreateHouseResponse>>(AsyncCreateHouseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::houses::CreateHouseResponse>> PrepareAsyncCreateHouse(::grpc::ClientContext* context, const ::mruv::houses::CreateHouseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::houses::CreateHouseResponse>>(PrepareAsyncCreateHouseRaw(context, request, cq));
    }
    ::grpc::Status GetHouse(::grpc::ClientContext* context, const ::mruv::houses::GetHouseRequest& request, ::mruv::houses::GetHouseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::houses::GetHouseResponse>> AsyncGetHouse(::grpc::ClientContext* context, const ::mruv::houses::GetHouseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::houses::GetHouseResponse>>(AsyncGetHouseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::houses::GetHouseResponse>> PrepareAsyncGetHouse(::grpc::ClientContext* context, const ::mruv::houses::GetHouseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::houses::GetHouseResponse>>(PrepareAsyncGetHouseRaw(context, request, cq));
    }
    ::grpc::Status UpdateHouse(::grpc::ClientContext* context, const ::mruv::houses::UpdateHouseRequest& request, ::mruv::houses::UpdateHouseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::houses::UpdateHouseResponse>> AsyncUpdateHouse(::grpc::ClientContext* context, const ::mruv::houses::UpdateHouseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::houses::UpdateHouseResponse>>(AsyncUpdateHouseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::houses::UpdateHouseResponse>> PrepareAsyncUpdateHouse(::grpc::ClientContext* context, const ::mruv::houses::UpdateHouseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::houses::UpdateHouseResponse>>(PrepareAsyncUpdateHouseRaw(context, request, cq));
    }
    ::grpc::Status DeleteHouse(::grpc::ClientContext* context, const ::mruv::houses::DeleteHouseRequest& request, ::mruv::houses::DeleteHouseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::houses::DeleteHouseResponse>> AsyncDeleteHouse(::grpc::ClientContext* context, const ::mruv::houses::DeleteHouseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::houses::DeleteHouseResponse>>(AsyncDeleteHouseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::houses::DeleteHouseResponse>> PrepareAsyncDeleteHouse(::grpc::ClientContext* context, const ::mruv::houses::DeleteHouseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::houses::DeleteHouseResponse>>(PrepareAsyncDeleteHouseRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateHouse(::grpc::ClientContext* context, const ::mruv::houses::CreateHouseRequest* request, ::mruv::houses::CreateHouseResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateHouse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::houses::CreateHouseResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateHouse(::grpc::ClientContext* context, const ::mruv::houses::CreateHouseRequest* request, ::mruv::houses::CreateHouseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateHouse(::grpc::ClientContext* context, const ::mruv::houses::CreateHouseRequest* request, ::mruv::houses::CreateHouseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateHouse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::houses::CreateHouseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateHouse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::houses::CreateHouseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetHouse(::grpc::ClientContext* context, const ::mruv::houses::GetHouseRequest* request, ::mruv::houses::GetHouseResponse* response, std::function<void(::grpc::Status)>) override;
      void GetHouse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::houses::GetHouseResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetHouse(::grpc::ClientContext* context, const ::mruv::houses::GetHouseRequest* request, ::mruv::houses::GetHouseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetHouse(::grpc::ClientContext* context, const ::mruv::houses::GetHouseRequest* request, ::mruv::houses::GetHouseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetHouse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::houses::GetHouseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetHouse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::houses::GetHouseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateHouse(::grpc::ClientContext* context, const ::mruv::houses::UpdateHouseRequest* request, ::mruv::houses::UpdateHouseResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateHouse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::houses::UpdateHouseResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateHouse(::grpc::ClientContext* context, const ::mruv::houses::UpdateHouseRequest* request, ::mruv::houses::UpdateHouseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateHouse(::grpc::ClientContext* context, const ::mruv::houses::UpdateHouseRequest* request, ::mruv::houses::UpdateHouseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateHouse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::houses::UpdateHouseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateHouse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::houses::UpdateHouseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteHouse(::grpc::ClientContext* context, const ::mruv::houses::DeleteHouseRequest* request, ::mruv::houses::DeleteHouseResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteHouse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::houses::DeleteHouseResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteHouse(::grpc::ClientContext* context, const ::mruv::houses::DeleteHouseRequest* request, ::mruv::houses::DeleteHouseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteHouse(::grpc::ClientContext* context, const ::mruv::houses::DeleteHouseRequest* request, ::mruv::houses::DeleteHouseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteHouse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::houses::DeleteHouseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteHouse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::houses::DeleteHouseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mruv::houses::CreateHouseResponse>* AsyncCreateHouseRaw(::grpc::ClientContext* context, const ::mruv::houses::CreateHouseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::houses::CreateHouseResponse>* PrepareAsyncCreateHouseRaw(::grpc::ClientContext* context, const ::mruv::houses::CreateHouseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::houses::GetHouseResponse>* AsyncGetHouseRaw(::grpc::ClientContext* context, const ::mruv::houses::GetHouseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::houses::GetHouseResponse>* PrepareAsyncGetHouseRaw(::grpc::ClientContext* context, const ::mruv::houses::GetHouseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::houses::UpdateHouseResponse>* AsyncUpdateHouseRaw(::grpc::ClientContext* context, const ::mruv::houses::UpdateHouseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::houses::UpdateHouseResponse>* PrepareAsyncUpdateHouseRaw(::grpc::ClientContext* context, const ::mruv::houses::UpdateHouseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::houses::DeleteHouseResponse>* AsyncDeleteHouseRaw(::grpc::ClientContext* context, const ::mruv::houses::DeleteHouseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::houses::DeleteHouseResponse>* PrepareAsyncDeleteHouseRaw(::grpc::ClientContext* context, const ::mruv::houses::DeleteHouseRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateHouse_;
    const ::grpc::internal::RpcMethod rpcmethod_GetHouse_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateHouse_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteHouse_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Create a house.
    virtual ::grpc::Status CreateHouse(::grpc::ServerContext* context, const ::mruv::houses::CreateHouseRequest* request, ::mruv::houses::CreateHouseResponse* response);
    // Get a house.
    virtual ::grpc::Status GetHouse(::grpc::ServerContext* context, const ::mruv::houses::GetHouseRequest* request, ::mruv::houses::GetHouseResponse* response);
    // Update a house.
    virtual ::grpc::Status UpdateHouse(::grpc::ServerContext* context, const ::mruv::houses::UpdateHouseRequest* request, ::mruv::houses::UpdateHouseResponse* response);
    // Delete a house.
    virtual ::grpc::Status DeleteHouse(::grpc::ServerContext* context, const ::mruv::houses::DeleteHouseRequest* request, ::mruv::houses::DeleteHouseResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateHouse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateHouse() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateHouse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateHouse(::grpc::ServerContext* /*context*/, const ::mruv::houses::CreateHouseRequest* /*request*/, ::mruv::houses::CreateHouseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateHouse(::grpc::ServerContext* context, ::mruv::houses::CreateHouseRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::houses::CreateHouseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetHouse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetHouse() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetHouse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHouse(::grpc::ServerContext* /*context*/, const ::mruv::houses::GetHouseRequest* /*request*/, ::mruv::houses::GetHouseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetHouse(::grpc::ServerContext* context, ::mruv::houses::GetHouseRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::houses::GetHouseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateHouse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateHouse() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateHouse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateHouse(::grpc::ServerContext* /*context*/, const ::mruv::houses::UpdateHouseRequest* /*request*/, ::mruv::houses::UpdateHouseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateHouse(::grpc::ServerContext* context, ::mruv::houses::UpdateHouseRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::houses::UpdateHouseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteHouse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteHouse() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteHouse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteHouse(::grpc::ServerContext* /*context*/, const ::mruv::houses::DeleteHouseRequest* /*request*/, ::mruv::houses::DeleteHouseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteHouse(::grpc::ServerContext* context, ::mruv::houses::DeleteHouseRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::houses::DeleteHouseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateHouse<WithAsyncMethod_GetHouse<WithAsyncMethod_UpdateHouse<WithAsyncMethod_DeleteHouse<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateHouse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateHouse() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::houses::CreateHouseRequest, ::mruv::houses::CreateHouseResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::houses::CreateHouseRequest* request, ::mruv::houses::CreateHouseResponse* response) { return this->CreateHouse(context, request, response); }));}
    void SetMessageAllocatorFor_CreateHouse(
        ::grpc::experimental::MessageAllocator< ::mruv::houses::CreateHouseRequest, ::mruv::houses::CreateHouseResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::houses::CreateHouseRequest, ::mruv::houses::CreateHouseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateHouse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateHouse(::grpc::ServerContext* /*context*/, const ::mruv::houses::CreateHouseRequest* /*request*/, ::mruv::houses::CreateHouseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateHouse(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::houses::CreateHouseRequest* /*request*/, ::mruv::houses::CreateHouseResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateHouse(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::houses::CreateHouseRequest* /*request*/, ::mruv::houses::CreateHouseResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetHouse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetHouse() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::houses::GetHouseRequest, ::mruv::houses::GetHouseResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::houses::GetHouseRequest* request, ::mruv::houses::GetHouseResponse* response) { return this->GetHouse(context, request, response); }));}
    void SetMessageAllocatorFor_GetHouse(
        ::grpc::experimental::MessageAllocator< ::mruv::houses::GetHouseRequest, ::mruv::houses::GetHouseResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::houses::GetHouseRequest, ::mruv::houses::GetHouseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetHouse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHouse(::grpc::ServerContext* /*context*/, const ::mruv::houses::GetHouseRequest* /*request*/, ::mruv::houses::GetHouseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetHouse(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::houses::GetHouseRequest* /*request*/, ::mruv::houses::GetHouseResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetHouse(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::houses::GetHouseRequest* /*request*/, ::mruv::houses::GetHouseResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateHouse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateHouse() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::houses::UpdateHouseRequest, ::mruv::houses::UpdateHouseResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::houses::UpdateHouseRequest* request, ::mruv::houses::UpdateHouseResponse* response) { return this->UpdateHouse(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateHouse(
        ::grpc::experimental::MessageAllocator< ::mruv::houses::UpdateHouseRequest, ::mruv::houses::UpdateHouseResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::houses::UpdateHouseRequest, ::mruv::houses::UpdateHouseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateHouse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateHouse(::grpc::ServerContext* /*context*/, const ::mruv::houses::UpdateHouseRequest* /*request*/, ::mruv::houses::UpdateHouseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateHouse(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::houses::UpdateHouseRequest* /*request*/, ::mruv::houses::UpdateHouseResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateHouse(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::houses::UpdateHouseRequest* /*request*/, ::mruv::houses::UpdateHouseResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteHouse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteHouse() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::houses::DeleteHouseRequest, ::mruv::houses::DeleteHouseResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::houses::DeleteHouseRequest* request, ::mruv::houses::DeleteHouseResponse* response) { return this->DeleteHouse(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteHouse(
        ::grpc::experimental::MessageAllocator< ::mruv::houses::DeleteHouseRequest, ::mruv::houses::DeleteHouseResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::houses::DeleteHouseRequest, ::mruv::houses::DeleteHouseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteHouse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteHouse(::grpc::ServerContext* /*context*/, const ::mruv::houses::DeleteHouseRequest* /*request*/, ::mruv::houses::DeleteHouseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteHouse(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::houses::DeleteHouseRequest* /*request*/, ::mruv::houses::DeleteHouseResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteHouse(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::houses::DeleteHouseRequest* /*request*/, ::mruv::houses::DeleteHouseResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_CreateHouse<ExperimentalWithCallbackMethod_GetHouse<ExperimentalWithCallbackMethod_UpdateHouse<ExperimentalWithCallbackMethod_DeleteHouse<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_CreateHouse<ExperimentalWithCallbackMethod_GetHouse<ExperimentalWithCallbackMethod_UpdateHouse<ExperimentalWithCallbackMethod_DeleteHouse<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateHouse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateHouse() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateHouse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateHouse(::grpc::ServerContext* /*context*/, const ::mruv::houses::CreateHouseRequest* /*request*/, ::mruv::houses::CreateHouseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetHouse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetHouse() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetHouse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHouse(::grpc::ServerContext* /*context*/, const ::mruv::houses::GetHouseRequest* /*request*/, ::mruv::houses::GetHouseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateHouse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateHouse() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateHouse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateHouse(::grpc::ServerContext* /*context*/, const ::mruv::houses::UpdateHouseRequest* /*request*/, ::mruv::houses::UpdateHouseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteHouse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteHouse() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteHouse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteHouse(::grpc::ServerContext* /*context*/, const ::mruv::houses::DeleteHouseRequest* /*request*/, ::mruv::houses::DeleteHouseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateHouse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateHouse() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateHouse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateHouse(::grpc::ServerContext* /*context*/, const ::mruv::houses::CreateHouseRequest* /*request*/, ::mruv::houses::CreateHouseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateHouse(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetHouse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetHouse() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetHouse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHouse(::grpc::ServerContext* /*context*/, const ::mruv::houses::GetHouseRequest* /*request*/, ::mruv::houses::GetHouseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetHouse(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateHouse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateHouse() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateHouse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateHouse(::grpc::ServerContext* /*context*/, const ::mruv::houses::UpdateHouseRequest* /*request*/, ::mruv::houses::UpdateHouseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateHouse(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteHouse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteHouse() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteHouse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteHouse(::grpc::ServerContext* /*context*/, const ::mruv::houses::DeleteHouseRequest* /*request*/, ::mruv::houses::DeleteHouseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteHouse(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateHouse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateHouse() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateHouse(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateHouse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateHouse(::grpc::ServerContext* /*context*/, const ::mruv::houses::CreateHouseRequest* /*request*/, ::mruv::houses::CreateHouseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateHouse(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateHouse(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetHouse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetHouse() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetHouse(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetHouse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHouse(::grpc::ServerContext* /*context*/, const ::mruv::houses::GetHouseRequest* /*request*/, ::mruv::houses::GetHouseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetHouse(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetHouse(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateHouse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateHouse() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateHouse(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateHouse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateHouse(::grpc::ServerContext* /*context*/, const ::mruv::houses::UpdateHouseRequest* /*request*/, ::mruv::houses::UpdateHouseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateHouse(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateHouse(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteHouse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteHouse() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteHouse(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteHouse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteHouse(::grpc::ServerContext* /*context*/, const ::mruv::houses::DeleteHouseRequest* /*request*/, ::mruv::houses::DeleteHouseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteHouse(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteHouse(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateHouse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateHouse() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::mruv::houses::CreateHouseRequest, ::mruv::houses::CreateHouseResponse>(std::bind(&WithStreamedUnaryMethod_CreateHouse<BaseClass>::StreamedCreateHouse, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateHouse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateHouse(::grpc::ServerContext* /*context*/, const ::mruv::houses::CreateHouseRequest* /*request*/, ::mruv::houses::CreateHouseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateHouse(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::houses::CreateHouseRequest,::mruv::houses::CreateHouseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetHouse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetHouse() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::mruv::houses::GetHouseRequest, ::mruv::houses::GetHouseResponse>(std::bind(&WithStreamedUnaryMethod_GetHouse<BaseClass>::StreamedGetHouse, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetHouse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetHouse(::grpc::ServerContext* /*context*/, const ::mruv::houses::GetHouseRequest* /*request*/, ::mruv::houses::GetHouseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetHouse(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::houses::GetHouseRequest,::mruv::houses::GetHouseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateHouse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateHouse() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::mruv::houses::UpdateHouseRequest, ::mruv::houses::UpdateHouseResponse>(std::bind(&WithStreamedUnaryMethod_UpdateHouse<BaseClass>::StreamedUpdateHouse, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateHouse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateHouse(::grpc::ServerContext* /*context*/, const ::mruv::houses::UpdateHouseRequest* /*request*/, ::mruv::houses::UpdateHouseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateHouse(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::houses::UpdateHouseRequest,::mruv::houses::UpdateHouseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteHouse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteHouse() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::mruv::houses::DeleteHouseRequest, ::mruv::houses::DeleteHouseResponse>(std::bind(&WithStreamedUnaryMethod_DeleteHouse<BaseClass>::StreamedDeleteHouse, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteHouse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteHouse(::grpc::ServerContext* /*context*/, const ::mruv::houses::DeleteHouseRequest* /*request*/, ::mruv::houses::DeleteHouseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteHouse(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::houses::DeleteHouseRequest,::mruv::houses::DeleteHouseResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateHouse<WithStreamedUnaryMethod_GetHouse<WithStreamedUnaryMethod_UpdateHouse<WithStreamedUnaryMethod_DeleteHouse<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateHouse<WithStreamedUnaryMethod_GetHouse<WithStreamedUnaryMethod_UpdateHouse<WithStreamedUnaryMethod_DeleteHouse<Service > > > > StreamedService;
};

}  // namespace houses
}  // namespace mruv


#endif  // GRPC_houses_2fhouses_2eproto__INCLUDED
