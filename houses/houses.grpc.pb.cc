// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: houses/houses.proto

#include "houses/houses.pb.h"
#include "houses/houses.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace mruv {
namespace houses {

static const char* MruVHousesService_method_names[] = {
  "/mruv.houses.MruVHousesService/CreateHouse",
  "/mruv.houses.MruVHousesService/GetHouse",
  "/mruv.houses.MruVHousesService/UpdateHouse",
  "/mruv.houses.MruVHousesService/DeleteHouse",
};

std::unique_ptr< MruVHousesService::Stub> MruVHousesService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MruVHousesService::Stub> stub(new MruVHousesService::Stub(channel));
  return stub;
}

MruVHousesService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateHouse_(MruVHousesService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetHouse_(MruVHousesService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateHouse_(MruVHousesService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteHouse_(MruVHousesService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MruVHousesService::Stub::CreateHouse(::grpc::ClientContext* context, const ::mruv::houses::CreateHouseRequest& request, ::mruv::houses::CreateHouseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateHouse_, context, request, response);
}

void MruVHousesService::Stub::experimental_async::CreateHouse(::grpc::ClientContext* context, const ::mruv::houses::CreateHouseRequest* request, ::mruv::houses::CreateHouseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateHouse_, context, request, response, std::move(f));
}

void MruVHousesService::Stub::experimental_async::CreateHouse(::grpc::ClientContext* context, const ::mruv::houses::CreateHouseRequest* request, ::mruv::houses::CreateHouseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateHouse_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::houses::CreateHouseResponse>* MruVHousesService::Stub::PrepareAsyncCreateHouseRaw(::grpc::ClientContext* context, const ::mruv::houses::CreateHouseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mruv::houses::CreateHouseResponse>::Create(channel_.get(), cq, rpcmethod_CreateHouse_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::mruv::houses::CreateHouseResponse>* MruVHousesService::Stub::AsyncCreateHouseRaw(::grpc::ClientContext* context, const ::mruv::houses::CreateHouseRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateHouseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MruVHousesService::Stub::GetHouse(::grpc::ClientContext* context, const ::mruv::houses::GetHouseRequest& request, ::mruv::houses::GetHouseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetHouse_, context, request, response);
}

void MruVHousesService::Stub::experimental_async::GetHouse(::grpc::ClientContext* context, const ::mruv::houses::GetHouseRequest* request, ::mruv::houses::GetHouseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetHouse_, context, request, response, std::move(f));
}

void MruVHousesService::Stub::experimental_async::GetHouse(::grpc::ClientContext* context, const ::mruv::houses::GetHouseRequest* request, ::mruv::houses::GetHouseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetHouse_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::houses::GetHouseResponse>* MruVHousesService::Stub::PrepareAsyncGetHouseRaw(::grpc::ClientContext* context, const ::mruv::houses::GetHouseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mruv::houses::GetHouseResponse>::Create(channel_.get(), cq, rpcmethod_GetHouse_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::mruv::houses::GetHouseResponse>* MruVHousesService::Stub::AsyncGetHouseRaw(::grpc::ClientContext* context, const ::mruv::houses::GetHouseRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetHouseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MruVHousesService::Stub::UpdateHouse(::grpc::ClientContext* context, const ::mruv::houses::UpdateHouseRequest& request, ::mruv::houses::UpdateHouseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateHouse_, context, request, response);
}

void MruVHousesService::Stub::experimental_async::UpdateHouse(::grpc::ClientContext* context, const ::mruv::houses::UpdateHouseRequest* request, ::mruv::houses::UpdateHouseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateHouse_, context, request, response, std::move(f));
}

void MruVHousesService::Stub::experimental_async::UpdateHouse(::grpc::ClientContext* context, const ::mruv::houses::UpdateHouseRequest* request, ::mruv::houses::UpdateHouseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateHouse_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::houses::UpdateHouseResponse>* MruVHousesService::Stub::PrepareAsyncUpdateHouseRaw(::grpc::ClientContext* context, const ::mruv::houses::UpdateHouseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mruv::houses::UpdateHouseResponse>::Create(channel_.get(), cq, rpcmethod_UpdateHouse_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::mruv::houses::UpdateHouseResponse>* MruVHousesService::Stub::AsyncUpdateHouseRaw(::grpc::ClientContext* context, const ::mruv::houses::UpdateHouseRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateHouseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MruVHousesService::Stub::DeleteHouse(::grpc::ClientContext* context, const ::mruv::houses::DeleteHouseRequest& request, ::mruv::houses::DeleteHouseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteHouse_, context, request, response);
}

void MruVHousesService::Stub::experimental_async::DeleteHouse(::grpc::ClientContext* context, const ::mruv::houses::DeleteHouseRequest* request, ::mruv::houses::DeleteHouseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteHouse_, context, request, response, std::move(f));
}

void MruVHousesService::Stub::experimental_async::DeleteHouse(::grpc::ClientContext* context, const ::mruv::houses::DeleteHouseRequest* request, ::mruv::houses::DeleteHouseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteHouse_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::houses::DeleteHouseResponse>* MruVHousesService::Stub::PrepareAsyncDeleteHouseRaw(::grpc::ClientContext* context, const ::mruv::houses::DeleteHouseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mruv::houses::DeleteHouseResponse>::Create(channel_.get(), cq, rpcmethod_DeleteHouse_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::mruv::houses::DeleteHouseResponse>* MruVHousesService::Stub::AsyncDeleteHouseRaw(::grpc::ClientContext* context, const ::mruv::houses::DeleteHouseRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteHouseRaw(context, request, cq);
  result->StartCall();
  return result;
}

MruVHousesService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVHousesService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVHousesService::Service, ::mruv::houses::CreateHouseRequest, ::mruv::houses::CreateHouseResponse>(
          [](MruVHousesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mruv::houses::CreateHouseRequest* req,
             ::mruv::houses::CreateHouseResponse* resp) {
               return service->CreateHouse(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVHousesService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVHousesService::Service, ::mruv::houses::GetHouseRequest, ::mruv::houses::GetHouseResponse>(
          [](MruVHousesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mruv::houses::GetHouseRequest* req,
             ::mruv::houses::GetHouseResponse* resp) {
               return service->GetHouse(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVHousesService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVHousesService::Service, ::mruv::houses::UpdateHouseRequest, ::mruv::houses::UpdateHouseResponse>(
          [](MruVHousesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mruv::houses::UpdateHouseRequest* req,
             ::mruv::houses::UpdateHouseResponse* resp) {
               return service->UpdateHouse(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVHousesService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVHousesService::Service, ::mruv::houses::DeleteHouseRequest, ::mruv::houses::DeleteHouseResponse>(
          [](MruVHousesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mruv::houses::DeleteHouseRequest* req,
             ::mruv::houses::DeleteHouseResponse* resp) {
               return service->DeleteHouse(ctx, req, resp);
             }, this)));
}

MruVHousesService::Service::~Service() {
}

::grpc::Status MruVHousesService::Service::CreateHouse(::grpc::ServerContext* context, const ::mruv::houses::CreateHouseRequest* request, ::mruv::houses::CreateHouseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVHousesService::Service::GetHouse(::grpc::ServerContext* context, const ::mruv::houses::GetHouseRequest* request, ::mruv::houses::GetHouseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVHousesService::Service::UpdateHouse(::grpc::ServerContext* context, const ::mruv::houses::UpdateHouseRequest* request, ::mruv::houses::UpdateHouseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVHousesService::Service::DeleteHouse(::grpc::ServerContext* context, const ::mruv::houses::DeleteHouseRequest* request, ::mruv::houses::DeleteHouseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mruv
}  // namespace houses

