// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: plots/plots.proto
#ifndef GRPC_plots_2fplots_2eproto__INCLUDED
#define GRPC_plots_2fplots_2eproto__INCLUDED

#include "plots/plots.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace mruv {
namespace plots {

// The MruV plots service provides procedures for managing buildings plots and other areas.
class MruVPlotsService final {
 public:
  static constexpr char const* service_full_name() {
    return "mruv.plots.MruVPlotsService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Create a plot.
    virtual ::grpc::Status CreatePlot(::grpc::ClientContext* context, const ::mruv::plots::CreatePlotRequest& request, ::mruv::plots::CreatePlotResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::plots::CreatePlotResponse>> AsyncCreatePlot(::grpc::ClientContext* context, const ::mruv::plots::CreatePlotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::plots::CreatePlotResponse>>(AsyncCreatePlotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::plots::CreatePlotResponse>> PrepareAsyncCreatePlot(::grpc::ClientContext* context, const ::mruv::plots::CreatePlotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::plots::CreatePlotResponse>>(PrepareAsyncCreatePlotRaw(context, request, cq));
    }
    // Get a plot.
    virtual ::grpc::Status GetPlot(::grpc::ClientContext* context, const ::mruv::plots::GetPlotRequest& request, ::mruv::plots::GetPlotResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::plots::GetPlotResponse>> AsyncGetPlot(::grpc::ClientContext* context, const ::mruv::plots::GetPlotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::plots::GetPlotResponse>>(AsyncGetPlotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::plots::GetPlotResponse>> PrepareAsyncGetPlot(::grpc::ClientContext* context, const ::mruv::plots::GetPlotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::plots::GetPlotResponse>>(PrepareAsyncGetPlotRaw(context, request, cq));
    }
    // Update a plot.
    virtual ::grpc::Status UpdatePlot(::grpc::ClientContext* context, const ::mruv::plots::UpdatePlotRequest& request, ::mruv::plots::UpdatePlotResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::plots::UpdatePlotResponse>> AsyncUpdatePlot(::grpc::ClientContext* context, const ::mruv::plots::UpdatePlotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::plots::UpdatePlotResponse>>(AsyncUpdatePlotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::plots::UpdatePlotResponse>> PrepareAsyncUpdatePlot(::grpc::ClientContext* context, const ::mruv::plots::UpdatePlotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::plots::UpdatePlotResponse>>(PrepareAsyncUpdatePlotRaw(context, request, cq));
    }
    // Delete a plot.
    virtual ::grpc::Status DeletePlot(::grpc::ClientContext* context, const ::mruv::plots::DeletePlotRequest& request, ::mruv::plots::DeletePlotResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::plots::DeletePlotResponse>> AsyncDeletePlot(::grpc::ClientContext* context, const ::mruv::plots::DeletePlotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::plots::DeletePlotResponse>>(AsyncDeletePlotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::plots::DeletePlotResponse>> PrepareAsyncDeletePlot(::grpc::ClientContext* context, const ::mruv::plots::DeletePlotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::plots::DeletePlotResponse>>(PrepareAsyncDeletePlotRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Create a plot.
      virtual void CreatePlot(::grpc::ClientContext* context, const ::mruv::plots::CreatePlotRequest* request, ::mruv::plots::CreatePlotResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreatePlot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::plots::CreatePlotResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreatePlot(::grpc::ClientContext* context, const ::mruv::plots::CreatePlotRequest* request, ::mruv::plots::CreatePlotResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreatePlot(::grpc::ClientContext* context, const ::mruv::plots::CreatePlotRequest* request, ::mruv::plots::CreatePlotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreatePlot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::plots::CreatePlotResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreatePlot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::plots::CreatePlotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get a plot.
      virtual void GetPlot(::grpc::ClientContext* context, const ::mruv::plots::GetPlotRequest* request, ::mruv::plots::GetPlotResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPlot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::plots::GetPlotResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetPlot(::grpc::ClientContext* context, const ::mruv::plots::GetPlotRequest* request, ::mruv::plots::GetPlotResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetPlot(::grpc::ClientContext* context, const ::mruv::plots::GetPlotRequest* request, ::mruv::plots::GetPlotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetPlot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::plots::GetPlotResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetPlot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::plots::GetPlotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Update a plot.
      virtual void UpdatePlot(::grpc::ClientContext* context, const ::mruv::plots::UpdatePlotRequest* request, ::mruv::plots::UpdatePlotResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdatePlot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::plots::UpdatePlotResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdatePlot(::grpc::ClientContext* context, const ::mruv::plots::UpdatePlotRequest* request, ::mruv::plots::UpdatePlotResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdatePlot(::grpc::ClientContext* context, const ::mruv::plots::UpdatePlotRequest* request, ::mruv::plots::UpdatePlotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdatePlot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::plots::UpdatePlotResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdatePlot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::plots::UpdatePlotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Delete a plot.
      virtual void DeletePlot(::grpc::ClientContext* context, const ::mruv::plots::DeletePlotRequest* request, ::mruv::plots::DeletePlotResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeletePlot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::plots::DeletePlotResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeletePlot(::grpc::ClientContext* context, const ::mruv::plots::DeletePlotRequest* request, ::mruv::plots::DeletePlotResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeletePlot(::grpc::ClientContext* context, const ::mruv::plots::DeletePlotRequest* request, ::mruv::plots::DeletePlotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeletePlot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::plots::DeletePlotResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeletePlot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::plots::DeletePlotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::plots::CreatePlotResponse>* AsyncCreatePlotRaw(::grpc::ClientContext* context, const ::mruv::plots::CreatePlotRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::plots::CreatePlotResponse>* PrepareAsyncCreatePlotRaw(::grpc::ClientContext* context, const ::mruv::plots::CreatePlotRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::plots::GetPlotResponse>* AsyncGetPlotRaw(::grpc::ClientContext* context, const ::mruv::plots::GetPlotRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::plots::GetPlotResponse>* PrepareAsyncGetPlotRaw(::grpc::ClientContext* context, const ::mruv::plots::GetPlotRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::plots::UpdatePlotResponse>* AsyncUpdatePlotRaw(::grpc::ClientContext* context, const ::mruv::plots::UpdatePlotRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::plots::UpdatePlotResponse>* PrepareAsyncUpdatePlotRaw(::grpc::ClientContext* context, const ::mruv::plots::UpdatePlotRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::plots::DeletePlotResponse>* AsyncDeletePlotRaw(::grpc::ClientContext* context, const ::mruv::plots::DeletePlotRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::plots::DeletePlotResponse>* PrepareAsyncDeletePlotRaw(::grpc::ClientContext* context, const ::mruv::plots::DeletePlotRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreatePlot(::grpc::ClientContext* context, const ::mruv::plots::CreatePlotRequest& request, ::mruv::plots::CreatePlotResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::plots::CreatePlotResponse>> AsyncCreatePlot(::grpc::ClientContext* context, const ::mruv::plots::CreatePlotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::plots::CreatePlotResponse>>(AsyncCreatePlotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::plots::CreatePlotResponse>> PrepareAsyncCreatePlot(::grpc::ClientContext* context, const ::mruv::plots::CreatePlotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::plots::CreatePlotResponse>>(PrepareAsyncCreatePlotRaw(context, request, cq));
    }
    ::grpc::Status GetPlot(::grpc::ClientContext* context, const ::mruv::plots::GetPlotRequest& request, ::mruv::plots::GetPlotResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::plots::GetPlotResponse>> AsyncGetPlot(::grpc::ClientContext* context, const ::mruv::plots::GetPlotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::plots::GetPlotResponse>>(AsyncGetPlotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::plots::GetPlotResponse>> PrepareAsyncGetPlot(::grpc::ClientContext* context, const ::mruv::plots::GetPlotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::plots::GetPlotResponse>>(PrepareAsyncGetPlotRaw(context, request, cq));
    }
    ::grpc::Status UpdatePlot(::grpc::ClientContext* context, const ::mruv::plots::UpdatePlotRequest& request, ::mruv::plots::UpdatePlotResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::plots::UpdatePlotResponse>> AsyncUpdatePlot(::grpc::ClientContext* context, const ::mruv::plots::UpdatePlotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::plots::UpdatePlotResponse>>(AsyncUpdatePlotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::plots::UpdatePlotResponse>> PrepareAsyncUpdatePlot(::grpc::ClientContext* context, const ::mruv::plots::UpdatePlotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::plots::UpdatePlotResponse>>(PrepareAsyncUpdatePlotRaw(context, request, cq));
    }
    ::grpc::Status DeletePlot(::grpc::ClientContext* context, const ::mruv::plots::DeletePlotRequest& request, ::mruv::plots::DeletePlotResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::plots::DeletePlotResponse>> AsyncDeletePlot(::grpc::ClientContext* context, const ::mruv::plots::DeletePlotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::plots::DeletePlotResponse>>(AsyncDeletePlotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::plots::DeletePlotResponse>> PrepareAsyncDeletePlot(::grpc::ClientContext* context, const ::mruv::plots::DeletePlotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::plots::DeletePlotResponse>>(PrepareAsyncDeletePlotRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreatePlot(::grpc::ClientContext* context, const ::mruv::plots::CreatePlotRequest* request, ::mruv::plots::CreatePlotResponse* response, std::function<void(::grpc::Status)>) override;
      void CreatePlot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::plots::CreatePlotResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreatePlot(::grpc::ClientContext* context, const ::mruv::plots::CreatePlotRequest* request, ::mruv::plots::CreatePlotResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreatePlot(::grpc::ClientContext* context, const ::mruv::plots::CreatePlotRequest* request, ::mruv::plots::CreatePlotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreatePlot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::plots::CreatePlotResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreatePlot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::plots::CreatePlotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetPlot(::grpc::ClientContext* context, const ::mruv::plots::GetPlotRequest* request, ::mruv::plots::GetPlotResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPlot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::plots::GetPlotResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetPlot(::grpc::ClientContext* context, const ::mruv::plots::GetPlotRequest* request, ::mruv::plots::GetPlotResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetPlot(::grpc::ClientContext* context, const ::mruv::plots::GetPlotRequest* request, ::mruv::plots::GetPlotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetPlot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::plots::GetPlotResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetPlot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::plots::GetPlotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdatePlot(::grpc::ClientContext* context, const ::mruv::plots::UpdatePlotRequest* request, ::mruv::plots::UpdatePlotResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdatePlot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::plots::UpdatePlotResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdatePlot(::grpc::ClientContext* context, const ::mruv::plots::UpdatePlotRequest* request, ::mruv::plots::UpdatePlotResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdatePlot(::grpc::ClientContext* context, const ::mruv::plots::UpdatePlotRequest* request, ::mruv::plots::UpdatePlotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdatePlot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::plots::UpdatePlotResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdatePlot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::plots::UpdatePlotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeletePlot(::grpc::ClientContext* context, const ::mruv::plots::DeletePlotRequest* request, ::mruv::plots::DeletePlotResponse* response, std::function<void(::grpc::Status)>) override;
      void DeletePlot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::plots::DeletePlotResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeletePlot(::grpc::ClientContext* context, const ::mruv::plots::DeletePlotRequest* request, ::mruv::plots::DeletePlotResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeletePlot(::grpc::ClientContext* context, const ::mruv::plots::DeletePlotRequest* request, ::mruv::plots::DeletePlotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeletePlot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::plots::DeletePlotResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeletePlot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::plots::DeletePlotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mruv::plots::CreatePlotResponse>* AsyncCreatePlotRaw(::grpc::ClientContext* context, const ::mruv::plots::CreatePlotRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::plots::CreatePlotResponse>* PrepareAsyncCreatePlotRaw(::grpc::ClientContext* context, const ::mruv::plots::CreatePlotRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::plots::GetPlotResponse>* AsyncGetPlotRaw(::grpc::ClientContext* context, const ::mruv::plots::GetPlotRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::plots::GetPlotResponse>* PrepareAsyncGetPlotRaw(::grpc::ClientContext* context, const ::mruv::plots::GetPlotRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::plots::UpdatePlotResponse>* AsyncUpdatePlotRaw(::grpc::ClientContext* context, const ::mruv::plots::UpdatePlotRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::plots::UpdatePlotResponse>* PrepareAsyncUpdatePlotRaw(::grpc::ClientContext* context, const ::mruv::plots::UpdatePlotRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::plots::DeletePlotResponse>* AsyncDeletePlotRaw(::grpc::ClientContext* context, const ::mruv::plots::DeletePlotRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::plots::DeletePlotResponse>* PrepareAsyncDeletePlotRaw(::grpc::ClientContext* context, const ::mruv::plots::DeletePlotRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreatePlot_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPlot_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdatePlot_;
    const ::grpc::internal::RpcMethod rpcmethod_DeletePlot_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Create a plot.
    virtual ::grpc::Status CreatePlot(::grpc::ServerContext* context, const ::mruv::plots::CreatePlotRequest* request, ::mruv::plots::CreatePlotResponse* response);
    // Get a plot.
    virtual ::grpc::Status GetPlot(::grpc::ServerContext* context, const ::mruv::plots::GetPlotRequest* request, ::mruv::plots::GetPlotResponse* response);
    // Update a plot.
    virtual ::grpc::Status UpdatePlot(::grpc::ServerContext* context, const ::mruv::plots::UpdatePlotRequest* request, ::mruv::plots::UpdatePlotResponse* response);
    // Delete a plot.
    virtual ::grpc::Status DeletePlot(::grpc::ServerContext* context, const ::mruv::plots::DeletePlotRequest* request, ::mruv::plots::DeletePlotResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreatePlot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreatePlot() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreatePlot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePlot(::grpc::ServerContext* /*context*/, const ::mruv::plots::CreatePlotRequest* /*request*/, ::mruv::plots::CreatePlotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreatePlot(::grpc::ServerContext* context, ::mruv::plots::CreatePlotRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::plots::CreatePlotResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPlot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPlot() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetPlot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPlot(::grpc::ServerContext* /*context*/, const ::mruv::plots::GetPlotRequest* /*request*/, ::mruv::plots::GetPlotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPlot(::grpc::ServerContext* context, ::mruv::plots::GetPlotRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::plots::GetPlotResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdatePlot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdatePlot() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdatePlot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePlot(::grpc::ServerContext* /*context*/, const ::mruv::plots::UpdatePlotRequest* /*request*/, ::mruv::plots::UpdatePlotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdatePlot(::grpc::ServerContext* context, ::mruv::plots::UpdatePlotRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::plots::UpdatePlotResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeletePlot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeletePlot() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeletePlot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePlot(::grpc::ServerContext* /*context*/, const ::mruv::plots::DeletePlotRequest* /*request*/, ::mruv::plots::DeletePlotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeletePlot(::grpc::ServerContext* context, ::mruv::plots::DeletePlotRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::plots::DeletePlotResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreatePlot<WithAsyncMethod_GetPlot<WithAsyncMethod_UpdatePlot<WithAsyncMethod_DeletePlot<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreatePlot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreatePlot() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::plots::CreatePlotRequest, ::mruv::plots::CreatePlotResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::plots::CreatePlotRequest* request, ::mruv::plots::CreatePlotResponse* response) { return this->CreatePlot(context, request, response); }));}
    void SetMessageAllocatorFor_CreatePlot(
        ::grpc::experimental::MessageAllocator< ::mruv::plots::CreatePlotRequest, ::mruv::plots::CreatePlotResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::plots::CreatePlotRequest, ::mruv::plots::CreatePlotResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreatePlot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePlot(::grpc::ServerContext* /*context*/, const ::mruv::plots::CreatePlotRequest* /*request*/, ::mruv::plots::CreatePlotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreatePlot(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::plots::CreatePlotRequest* /*request*/, ::mruv::plots::CreatePlotResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreatePlot(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::plots::CreatePlotRequest* /*request*/, ::mruv::plots::CreatePlotResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetPlot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetPlot() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::plots::GetPlotRequest, ::mruv::plots::GetPlotResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::plots::GetPlotRequest* request, ::mruv::plots::GetPlotResponse* response) { return this->GetPlot(context, request, response); }));}
    void SetMessageAllocatorFor_GetPlot(
        ::grpc::experimental::MessageAllocator< ::mruv::plots::GetPlotRequest, ::mruv::plots::GetPlotResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::plots::GetPlotRequest, ::mruv::plots::GetPlotResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetPlot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPlot(::grpc::ServerContext* /*context*/, const ::mruv::plots::GetPlotRequest* /*request*/, ::mruv::plots::GetPlotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPlot(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::plots::GetPlotRequest* /*request*/, ::mruv::plots::GetPlotResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPlot(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::plots::GetPlotRequest* /*request*/, ::mruv::plots::GetPlotResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdatePlot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdatePlot() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::plots::UpdatePlotRequest, ::mruv::plots::UpdatePlotResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::plots::UpdatePlotRequest* request, ::mruv::plots::UpdatePlotResponse* response) { return this->UpdatePlot(context, request, response); }));}
    void SetMessageAllocatorFor_UpdatePlot(
        ::grpc::experimental::MessageAllocator< ::mruv::plots::UpdatePlotRequest, ::mruv::plots::UpdatePlotResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::plots::UpdatePlotRequest, ::mruv::plots::UpdatePlotResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdatePlot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePlot(::grpc::ServerContext* /*context*/, const ::mruv::plots::UpdatePlotRequest* /*request*/, ::mruv::plots::UpdatePlotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdatePlot(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::plots::UpdatePlotRequest* /*request*/, ::mruv::plots::UpdatePlotResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdatePlot(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::plots::UpdatePlotRequest* /*request*/, ::mruv::plots::UpdatePlotResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeletePlot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeletePlot() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::plots::DeletePlotRequest, ::mruv::plots::DeletePlotResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::plots::DeletePlotRequest* request, ::mruv::plots::DeletePlotResponse* response) { return this->DeletePlot(context, request, response); }));}
    void SetMessageAllocatorFor_DeletePlot(
        ::grpc::experimental::MessageAllocator< ::mruv::plots::DeletePlotRequest, ::mruv::plots::DeletePlotResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::plots::DeletePlotRequest, ::mruv::plots::DeletePlotResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeletePlot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePlot(::grpc::ServerContext* /*context*/, const ::mruv::plots::DeletePlotRequest* /*request*/, ::mruv::plots::DeletePlotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeletePlot(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::plots::DeletePlotRequest* /*request*/, ::mruv::plots::DeletePlotResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeletePlot(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::plots::DeletePlotRequest* /*request*/, ::mruv::plots::DeletePlotResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_CreatePlot<ExperimentalWithCallbackMethod_GetPlot<ExperimentalWithCallbackMethod_UpdatePlot<ExperimentalWithCallbackMethod_DeletePlot<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_CreatePlot<ExperimentalWithCallbackMethod_GetPlot<ExperimentalWithCallbackMethod_UpdatePlot<ExperimentalWithCallbackMethod_DeletePlot<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreatePlot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreatePlot() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreatePlot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePlot(::grpc::ServerContext* /*context*/, const ::mruv::plots::CreatePlotRequest* /*request*/, ::mruv::plots::CreatePlotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPlot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPlot() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetPlot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPlot(::grpc::ServerContext* /*context*/, const ::mruv::plots::GetPlotRequest* /*request*/, ::mruv::plots::GetPlotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdatePlot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdatePlot() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdatePlot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePlot(::grpc::ServerContext* /*context*/, const ::mruv::plots::UpdatePlotRequest* /*request*/, ::mruv::plots::UpdatePlotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeletePlot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeletePlot() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeletePlot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePlot(::grpc::ServerContext* /*context*/, const ::mruv::plots::DeletePlotRequest* /*request*/, ::mruv::plots::DeletePlotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreatePlot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreatePlot() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreatePlot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePlot(::grpc::ServerContext* /*context*/, const ::mruv::plots::CreatePlotRequest* /*request*/, ::mruv::plots::CreatePlotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreatePlot(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPlot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPlot() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetPlot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPlot(::grpc::ServerContext* /*context*/, const ::mruv::plots::GetPlotRequest* /*request*/, ::mruv::plots::GetPlotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPlot(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdatePlot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdatePlot() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdatePlot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePlot(::grpc::ServerContext* /*context*/, const ::mruv::plots::UpdatePlotRequest* /*request*/, ::mruv::plots::UpdatePlotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdatePlot(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeletePlot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeletePlot() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeletePlot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePlot(::grpc::ServerContext* /*context*/, const ::mruv::plots::DeletePlotRequest* /*request*/, ::mruv::plots::DeletePlotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeletePlot(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreatePlot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreatePlot() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreatePlot(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreatePlot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePlot(::grpc::ServerContext* /*context*/, const ::mruv::plots::CreatePlotRequest* /*request*/, ::mruv::plots::CreatePlotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreatePlot(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreatePlot(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetPlot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetPlot() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPlot(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetPlot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPlot(::grpc::ServerContext* /*context*/, const ::mruv::plots::GetPlotRequest* /*request*/, ::mruv::plots::GetPlotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPlot(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPlot(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdatePlot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdatePlot() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdatePlot(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdatePlot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePlot(::grpc::ServerContext* /*context*/, const ::mruv::plots::UpdatePlotRequest* /*request*/, ::mruv::plots::UpdatePlotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdatePlot(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdatePlot(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeletePlot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeletePlot() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeletePlot(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeletePlot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePlot(::grpc::ServerContext* /*context*/, const ::mruv::plots::DeletePlotRequest* /*request*/, ::mruv::plots::DeletePlotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeletePlot(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeletePlot(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreatePlot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreatePlot() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::mruv::plots::CreatePlotRequest, ::mruv::plots::CreatePlotResponse>(std::bind(&WithStreamedUnaryMethod_CreatePlot<BaseClass>::StreamedCreatePlot, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreatePlot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreatePlot(::grpc::ServerContext* /*context*/, const ::mruv::plots::CreatePlotRequest* /*request*/, ::mruv::plots::CreatePlotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreatePlot(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::plots::CreatePlotRequest,::mruv::plots::CreatePlotResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPlot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPlot() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::mruv::plots::GetPlotRequest, ::mruv::plots::GetPlotResponse>(std::bind(&WithStreamedUnaryMethod_GetPlot<BaseClass>::StreamedGetPlot, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetPlot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPlot(::grpc::ServerContext* /*context*/, const ::mruv::plots::GetPlotRequest* /*request*/, ::mruv::plots::GetPlotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPlot(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::plots::GetPlotRequest,::mruv::plots::GetPlotResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdatePlot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdatePlot() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::mruv::plots::UpdatePlotRequest, ::mruv::plots::UpdatePlotResponse>(std::bind(&WithStreamedUnaryMethod_UpdatePlot<BaseClass>::StreamedUpdatePlot, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdatePlot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdatePlot(::grpc::ServerContext* /*context*/, const ::mruv::plots::UpdatePlotRequest* /*request*/, ::mruv::plots::UpdatePlotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdatePlot(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::plots::UpdatePlotRequest,::mruv::plots::UpdatePlotResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeletePlot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeletePlot() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::mruv::plots::DeletePlotRequest, ::mruv::plots::DeletePlotResponse>(std::bind(&WithStreamedUnaryMethod_DeletePlot<BaseClass>::StreamedDeletePlot, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeletePlot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeletePlot(::grpc::ServerContext* /*context*/, const ::mruv::plots::DeletePlotRequest* /*request*/, ::mruv::plots::DeletePlotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeletePlot(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::plots::DeletePlotRequest,::mruv::plots::DeletePlotResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreatePlot<WithStreamedUnaryMethod_GetPlot<WithStreamedUnaryMethod_UpdatePlot<WithStreamedUnaryMethod_DeletePlot<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreatePlot<WithStreamedUnaryMethod_GetPlot<WithStreamedUnaryMethod_UpdatePlot<WithStreamedUnaryMethod_DeletePlot<Service > > > > StreamedService;
};

}  // namespace plots
}  // namespace mruv


#endif  // GRPC_plots_2fplots_2eproto__INCLUDED
