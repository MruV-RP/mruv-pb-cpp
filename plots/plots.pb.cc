// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plots/plots.proto

#include "plots/plots.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_2fspatial_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position_common_2fspatial_2eproto;
namespace mruv {
namespace plots {
class PlotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Plot> _instance;
} _Plot_default_instance_;
class CreatePlotRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreatePlotRequest> _instance;
} _CreatePlotRequest_default_instance_;
class CreatePlotResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreatePlotResponse> _instance;
} _CreatePlotResponse_default_instance_;
class GetPlotRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPlotRequest> _instance;
} _GetPlotRequest_default_instance_;
class GetPlotResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPlotResponse> _instance;
} _GetPlotResponse_default_instance_;
class UpdatePlotRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdatePlotRequest> _instance;
} _UpdatePlotRequest_default_instance_;
class UpdatePlotResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdatePlotResponse> _instance;
} _UpdatePlotResponse_default_instance_;
class DeletePlotRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeletePlotRequest> _instance;
} _DeletePlotRequest_default_instance_;
class DeletePlotResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeletePlotResponse> _instance;
} _DeletePlotResponse_default_instance_;
}  // namespace plots
}  // namespace mruv
static void InitDefaultsscc_info_CreatePlotRequest_plots_2fplots_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::plots::_CreatePlotRequest_default_instance_;
    new (ptr) ::mruv::plots::CreatePlotRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::plots::CreatePlotRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreatePlotRequest_plots_2fplots_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreatePlotRequest_plots_2fplots_2eproto}, {
      &scc_info_Position_common_2fspatial_2eproto.base,}};

static void InitDefaultsscc_info_CreatePlotResponse_plots_2fplots_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::plots::_CreatePlotResponse_default_instance_;
    new (ptr) ::mruv::plots::CreatePlotResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::plots::CreatePlotResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreatePlotResponse_plots_2fplots_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreatePlotResponse_plots_2fplots_2eproto}, {}};

static void InitDefaultsscc_info_DeletePlotRequest_plots_2fplots_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::plots::_DeletePlotRequest_default_instance_;
    new (ptr) ::mruv::plots::DeletePlotRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::plots::DeletePlotRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeletePlotRequest_plots_2fplots_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeletePlotRequest_plots_2fplots_2eproto}, {}};

static void InitDefaultsscc_info_DeletePlotResponse_plots_2fplots_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::plots::_DeletePlotResponse_default_instance_;
    new (ptr) ::mruv::plots::DeletePlotResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::plots::DeletePlotResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeletePlotResponse_plots_2fplots_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeletePlotResponse_plots_2fplots_2eproto}, {}};

static void InitDefaultsscc_info_GetPlotRequest_plots_2fplots_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::plots::_GetPlotRequest_default_instance_;
    new (ptr) ::mruv::plots::GetPlotRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::plots::GetPlotRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetPlotRequest_plots_2fplots_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetPlotRequest_plots_2fplots_2eproto}, {}};

static void InitDefaultsscc_info_GetPlotResponse_plots_2fplots_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::plots::_GetPlotResponse_default_instance_;
    new (ptr) ::mruv::plots::GetPlotResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::plots::GetPlotResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetPlotResponse_plots_2fplots_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetPlotResponse_plots_2fplots_2eproto}, {
      &scc_info_Position_common_2fspatial_2eproto.base,}};

static void InitDefaultsscc_info_Plot_plots_2fplots_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::plots::_Plot_default_instance_;
    new (ptr) ::mruv::plots::Plot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::plots::Plot::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Plot_plots_2fplots_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Plot_plots_2fplots_2eproto}, {
      &scc_info_Position_common_2fspatial_2eproto.base,}};

static void InitDefaultsscc_info_UpdatePlotRequest_plots_2fplots_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::plots::_UpdatePlotRequest_default_instance_;
    new (ptr) ::mruv::plots::UpdatePlotRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::plots::UpdatePlotRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdatePlotRequest_plots_2fplots_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdatePlotRequest_plots_2fplots_2eproto}, {}};

static void InitDefaultsscc_info_UpdatePlotResponse_plots_2fplots_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::plots::_UpdatePlotResponse_default_instance_;
    new (ptr) ::mruv::plots::UpdatePlotResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::plots::UpdatePlotResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdatePlotResponse_plots_2fplots_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdatePlotResponse_plots_2fplots_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_plots_2fplots_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_plots_2fplots_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_plots_2fplots_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_plots_2fplots_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::plots::Plot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::plots::Plot, name_),
  PROTOBUF_FIELD_OFFSET(::mruv::plots::Plot, description_),
  PROTOBUF_FIELD_OFFSET(::mruv::plots::Plot, points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::plots::CreatePlotRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::plots::CreatePlotRequest, name_),
  PROTOBUF_FIELD_OFFSET(::mruv::plots::CreatePlotRequest, description_),
  PROTOBUF_FIELD_OFFSET(::mruv::plots::CreatePlotRequest, points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::plots::CreatePlotResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::plots::CreatePlotResponse, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::plots::GetPlotRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::plots::GetPlotRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::plots::GetPlotResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::plots::GetPlotResponse, name_),
  PROTOBUF_FIELD_OFFSET(::mruv::plots::GetPlotResponse, description_),
  PROTOBUF_FIELD_OFFSET(::mruv::plots::GetPlotResponse, points_),
  PROTOBUF_FIELD_OFFSET(::mruv::plots::GetPlotResponse, area_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::plots::UpdatePlotRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::plots::UpdatePlotRequest, id_),
  PROTOBUF_FIELD_OFFSET(::mruv::plots::UpdatePlotRequest, name_),
  PROTOBUF_FIELD_OFFSET(::mruv::plots::UpdatePlotRequest, description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::plots::UpdatePlotResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::plots::DeletePlotRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::plots::DeletePlotRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::plots::DeletePlotResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mruv::plots::Plot)},
  { 8, -1, sizeof(::mruv::plots::CreatePlotRequest)},
  { 16, -1, sizeof(::mruv::plots::CreatePlotResponse)},
  { 22, -1, sizeof(::mruv::plots::GetPlotRequest)},
  { 28, -1, sizeof(::mruv::plots::GetPlotResponse)},
  { 37, -1, sizeof(::mruv::plots::UpdatePlotRequest)},
  { 45, -1, sizeof(::mruv::plots::UpdatePlotResponse)},
  { 50, -1, sizeof(::mruv::plots::DeletePlotRequest)},
  { 56, -1, sizeof(::mruv::plots::DeletePlotResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::plots::_Plot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::plots::_CreatePlotRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::plots::_CreatePlotResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::plots::_GetPlotRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::plots::_GetPlotResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::plots::_UpdatePlotRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::plots::_UpdatePlotResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::plots::_DeletePlotRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::plots::_DeletePlotResponse_default_instance_),
};

const char descriptor_table_protodef_plots_2fplots_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021plots/plots.proto\022\nmruv.plots\032\034google/"
  "api/annotations.proto\032\024common/spatial.pr"
  "oto\"I\n\004Plot\022\014\n\004name\030\001 \001(\t\022\023\n\013description"
  "\030\002 \001(\t\022\036\n\006points\030\003 \003(\0132\016.mruv.Position\"V"
  "\n\021CreatePlotRequest\022\014\n\004name\030\001 \001(\t\022\023\n\013des"
  "cription\030\002 \001(\t\022\036\n\006points\030\003 \003(\0132\016.mruv.Po"
  "sition\" \n\022CreatePlotResponse\022\n\n\002id\030\001 \001(\r"
  "\"\034\n\016GetPlotRequest\022\n\n\002id\030\001 \001(\r\"b\n\017GetPlo"
  "tResponse\022\014\n\004name\030\001 \001(\t\022\023\n\013description\030\002"
  " \001(\t\022\036\n\006points\030\003 \003(\0132\016.mruv.Position\022\014\n\004"
  "area\030\004 \001(\001\"B\n\021UpdatePlotRequest\022\n\n\002id\030\001 "
  "\001(\r\022\014\n\004name\030\002 \001(\t\022\023\n\013description\030\003 \001(\t\"\024"
  "\n\022UpdatePlotResponse\"\037\n\021DeletePlotReques"
  "t\022\n\n\002id\030\001 \001(\r\"\024\n\022DeletePlotResponse2\230\003\n\020"
  "MruVPlotsService\022^\n\nCreatePlot\022\035.mruv.pl"
  "ots.CreatePlotRequest\032\036.mruv.plots.Creat"
  "ePlotResponse\"\021\202\323\344\223\002\013\"\t/v1/plots\022Z\n\007GetP"
  "lot\022\032.mruv.plots.GetPlotRequest\032\033.mruv.p"
  "lots.GetPlotResponse\"\026\202\323\344\223\002\020\022\016/v1/plots/"
  "{id}\022c\n\nUpdatePlot\022\035.mruv.plots.UpdatePl"
  "otRequest\032\036.mruv.plots.UpdatePlotRespons"
  "e\"\026\202\323\344\223\002\0202\016/v1/plots/{id}\022c\n\nDeletePlot\022"
  "\035.mruv.plots.DeletePlotRequest\032\036.mruv.pl"
  "ots.DeletePlotResponse\"\026\202\323\344\223\002\020*\016/v1/plot"
  "s/{id}B%Z#github.com/MruV-RP/mruv-pb-go/"
  "plotsb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_plots_2fplots_2eproto_deps[2] = {
  &::descriptor_table_common_2fspatial_2eproto,
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_plots_2fplots_2eproto_sccs[9] = {
  &scc_info_CreatePlotRequest_plots_2fplots_2eproto.base,
  &scc_info_CreatePlotResponse_plots_2fplots_2eproto.base,
  &scc_info_DeletePlotRequest_plots_2fplots_2eproto.base,
  &scc_info_DeletePlotResponse_plots_2fplots_2eproto.base,
  &scc_info_GetPlotRequest_plots_2fplots_2eproto.base,
  &scc_info_GetPlotResponse_plots_2fplots_2eproto.base,
  &scc_info_Plot_plots_2fplots_2eproto.base,
  &scc_info_UpdatePlotRequest_plots_2fplots_2eproto.base,
  &scc_info_UpdatePlotResponse_plots_2fplots_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_plots_2fplots_2eproto_once;
static bool descriptor_table_plots_2fplots_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_plots_2fplots_2eproto = {
  &descriptor_table_plots_2fplots_2eproto_initialized, descriptor_table_protodef_plots_2fplots_2eproto, "plots/plots.proto", 1013,
  &descriptor_table_plots_2fplots_2eproto_once, descriptor_table_plots_2fplots_2eproto_sccs, descriptor_table_plots_2fplots_2eproto_deps, 9, 2,
  schemas, file_default_instances, TableStruct_plots_2fplots_2eproto::offsets,
  file_level_metadata_plots_2fplots_2eproto, 9, file_level_enum_descriptors_plots_2fplots_2eproto, file_level_service_descriptors_plots_2fplots_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_plots_2fplots_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_plots_2fplots_2eproto), true);
namespace mruv {
namespace plots {

// ===================================================================

void Plot::InitAsDefaultInstance() {
}
class Plot::_Internal {
 public:
};

void Plot::clear_points() {
  points_.Clear();
}
Plot::Plot()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.plots.Plot)
}
Plot::Plot(const Plot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      points_(from.points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  // @@protoc_insertion_point(copy_constructor:mruv.plots.Plot)
}

void Plot::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Plot_plots_2fplots_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Plot::~Plot() {
  // @@protoc_insertion_point(destructor:mruv.plots.Plot)
  SharedDtor();
}

void Plot::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Plot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Plot& Plot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Plot_plots_2fplots_2eproto.base);
  return *internal_default_instance();
}


void Plot::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.plots.Plot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Plot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.plots.Plot.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.plots.Plot.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mruv.Position points = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Plot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.plots.Plot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.plots.Plot.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.plots.Plot.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // repeated .mruv.Position points = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.plots.Plot)
  return target;
}

size_t Plot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.plots.Plot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mruv.Position points = 3;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Plot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.plots.Plot)
  GOOGLE_DCHECK_NE(&from, this);
  const Plot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Plot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.plots.Plot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.plots.Plot)
    MergeFrom(*source);
  }
}

void Plot::MergeFrom(const Plot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.plots.Plot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
}

void Plot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.plots.Plot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plot::CopyFrom(const Plot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.plots.Plot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plot::IsInitialized() const {
  return true;
}

void Plot::InternalSwap(Plot* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Plot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreatePlotRequest::InitAsDefaultInstance() {
}
class CreatePlotRequest::_Internal {
 public:
};

void CreatePlotRequest::clear_points() {
  points_.Clear();
}
CreatePlotRequest::CreatePlotRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.plots.CreatePlotRequest)
}
CreatePlotRequest::CreatePlotRequest(const CreatePlotRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      points_(from.points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  // @@protoc_insertion_point(copy_constructor:mruv.plots.CreatePlotRequest)
}

void CreatePlotRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreatePlotRequest_plots_2fplots_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreatePlotRequest::~CreatePlotRequest() {
  // @@protoc_insertion_point(destructor:mruv.plots.CreatePlotRequest)
  SharedDtor();
}

void CreatePlotRequest::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreatePlotRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreatePlotRequest& CreatePlotRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreatePlotRequest_plots_2fplots_2eproto.base);
  return *internal_default_instance();
}


void CreatePlotRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.plots.CreatePlotRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CreatePlotRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.plots.CreatePlotRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.plots.CreatePlotRequest.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mruv.Position points = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreatePlotRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.plots.CreatePlotRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.plots.CreatePlotRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.plots.CreatePlotRequest.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // repeated .mruv.Position points = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.plots.CreatePlotRequest)
  return target;
}

size_t CreatePlotRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.plots.CreatePlotRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mruv.Position points = 3;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreatePlotRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.plots.CreatePlotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreatePlotRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreatePlotRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.plots.CreatePlotRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.plots.CreatePlotRequest)
    MergeFrom(*source);
  }
}

void CreatePlotRequest::MergeFrom(const CreatePlotRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.plots.CreatePlotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
}

void CreatePlotRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.plots.CreatePlotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatePlotRequest::CopyFrom(const CreatePlotRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.plots.CreatePlotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePlotRequest::IsInitialized() const {
  return true;
}

void CreatePlotRequest::InternalSwap(CreatePlotRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CreatePlotRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreatePlotResponse::InitAsDefaultInstance() {
}
class CreatePlotResponse::_Internal {
 public:
};

CreatePlotResponse::CreatePlotResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.plots.CreatePlotResponse)
}
CreatePlotResponse::CreatePlotResponse(const CreatePlotResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.plots.CreatePlotResponse)
}

void CreatePlotResponse::SharedCtor() {
  id_ = 0u;
}

CreatePlotResponse::~CreatePlotResponse() {
  // @@protoc_insertion_point(destructor:mruv.plots.CreatePlotResponse)
  SharedDtor();
}

void CreatePlotResponse::SharedDtor() {
}

void CreatePlotResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreatePlotResponse& CreatePlotResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreatePlotResponse_plots_2fplots_2eproto.base);
  return *internal_default_instance();
}


void CreatePlotResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.plots.CreatePlotResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear();
}

const char* CreatePlotResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreatePlotResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.plots.CreatePlotResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.plots.CreatePlotResponse)
  return target;
}

size_t CreatePlotResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.plots.CreatePlotResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreatePlotResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.plots.CreatePlotResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreatePlotResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreatePlotResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.plots.CreatePlotResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.plots.CreatePlotResponse)
    MergeFrom(*source);
  }
}

void CreatePlotResponse::MergeFrom(const CreatePlotResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.plots.CreatePlotResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void CreatePlotResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.plots.CreatePlotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatePlotResponse::CopyFrom(const CreatePlotResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.plots.CreatePlotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePlotResponse::IsInitialized() const {
  return true;
}

void CreatePlotResponse::InternalSwap(CreatePlotResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreatePlotResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPlotRequest::InitAsDefaultInstance() {
}
class GetPlotRequest::_Internal {
 public:
};

GetPlotRequest::GetPlotRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.plots.GetPlotRequest)
}
GetPlotRequest::GetPlotRequest(const GetPlotRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.plots.GetPlotRequest)
}

void GetPlotRequest::SharedCtor() {
  id_ = 0u;
}

GetPlotRequest::~GetPlotRequest() {
  // @@protoc_insertion_point(destructor:mruv.plots.GetPlotRequest)
  SharedDtor();
}

void GetPlotRequest::SharedDtor() {
}

void GetPlotRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPlotRequest& GetPlotRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPlotRequest_plots_2fplots_2eproto.base);
  return *internal_default_instance();
}


void GetPlotRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.plots.GetPlotRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear();
}

const char* GetPlotRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPlotRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.plots.GetPlotRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.plots.GetPlotRequest)
  return target;
}

size_t GetPlotRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.plots.GetPlotRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPlotRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.plots.GetPlotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPlotRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPlotRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.plots.GetPlotRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.plots.GetPlotRequest)
    MergeFrom(*source);
  }
}

void GetPlotRequest::MergeFrom(const GetPlotRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.plots.GetPlotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetPlotRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.plots.GetPlotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPlotRequest::CopyFrom(const GetPlotRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.plots.GetPlotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPlotRequest::IsInitialized() const {
  return true;
}

void GetPlotRequest::InternalSwap(GetPlotRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPlotRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPlotResponse::InitAsDefaultInstance() {
}
class GetPlotResponse::_Internal {
 public:
};

void GetPlotResponse::clear_points() {
  points_.Clear();
}
GetPlotResponse::GetPlotResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.plots.GetPlotResponse)
}
GetPlotResponse::GetPlotResponse(const GetPlotResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      points_(from.points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  area_ = from.area_;
  // @@protoc_insertion_point(copy_constructor:mruv.plots.GetPlotResponse)
}

void GetPlotResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetPlotResponse_plots_2fplots_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  area_ = 0;
}

GetPlotResponse::~GetPlotResponse() {
  // @@protoc_insertion_point(destructor:mruv.plots.GetPlotResponse)
  SharedDtor();
}

void GetPlotResponse::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetPlotResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPlotResponse& GetPlotResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPlotResponse_plots_2fplots_2eproto.base);
  return *internal_default_instance();
}


void GetPlotResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.plots.GetPlotResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  area_ = 0;
  _internal_metadata_.Clear();
}

const char* GetPlotResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.plots.GetPlotResponse.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.plots.GetPlotResponse.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mruv.Position points = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // double area = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          area_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPlotResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.plots.GetPlotResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.plots.GetPlotResponse.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.plots.GetPlotResponse.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // repeated .mruv.Position points = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_points(i), target, stream);
  }

  // double area = 4;
  if (!(this->area() <= 0 && this->area() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_area(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.plots.GetPlotResponse)
  return target;
}

size_t GetPlotResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.plots.GetPlotResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mruv.Position points = 3;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // double area = 4;
  if (!(this->area() <= 0 && this->area() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPlotResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.plots.GetPlotResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPlotResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPlotResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.plots.GetPlotResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.plots.GetPlotResponse)
    MergeFrom(*source);
  }
}

void GetPlotResponse::MergeFrom(const GetPlotResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.plots.GetPlotResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (!(from.area() <= 0 && from.area() >= 0)) {
    _internal_set_area(from._internal_area());
  }
}

void GetPlotResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.plots.GetPlotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPlotResponse::CopyFrom(const GetPlotResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.plots.GetPlotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPlotResponse::IsInitialized() const {
  return true;
}

void GetPlotResponse::InternalSwap(GetPlotResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(area_, other->area_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPlotResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdatePlotRequest::InitAsDefaultInstance() {
}
class UpdatePlotRequest::_Internal {
 public:
};

UpdatePlotRequest::UpdatePlotRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.plots.UpdatePlotRequest)
}
UpdatePlotRequest::UpdatePlotRequest(const UpdatePlotRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.plots.UpdatePlotRequest)
}

void UpdatePlotRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdatePlotRequest_plots_2fplots_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
}

UpdatePlotRequest::~UpdatePlotRequest() {
  // @@protoc_insertion_point(destructor:mruv.plots.UpdatePlotRequest)
  SharedDtor();
}

void UpdatePlotRequest::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdatePlotRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdatePlotRequest& UpdatePlotRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdatePlotRequest_plots_2fplots_2eproto.base);
  return *internal_default_instance();
}


void UpdatePlotRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.plots.UpdatePlotRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
  _internal_metadata_.Clear();
}

const char* UpdatePlotRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.plots.UpdatePlotRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.plots.UpdatePlotRequest.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdatePlotRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.plots.UpdatePlotRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.plots.UpdatePlotRequest.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.plots.UpdatePlotRequest.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.plots.UpdatePlotRequest)
  return target;
}

size_t UpdatePlotRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.plots.UpdatePlotRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdatePlotRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.plots.UpdatePlotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdatePlotRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdatePlotRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.plots.UpdatePlotRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.plots.UpdatePlotRequest)
    MergeFrom(*source);
  }
}

void UpdatePlotRequest::MergeFrom(const UpdatePlotRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.plots.UpdatePlotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void UpdatePlotRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.plots.UpdatePlotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePlotRequest::CopyFrom(const UpdatePlotRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.plots.UpdatePlotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePlotRequest::IsInitialized() const {
  return true;
}

void UpdatePlotRequest::InternalSwap(UpdatePlotRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdatePlotRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdatePlotResponse::InitAsDefaultInstance() {
}
class UpdatePlotResponse::_Internal {
 public:
};

UpdatePlotResponse::UpdatePlotResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.plots.UpdatePlotResponse)
}
UpdatePlotResponse::UpdatePlotResponse(const UpdatePlotResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.plots.UpdatePlotResponse)
}

void UpdatePlotResponse::SharedCtor() {
}

UpdatePlotResponse::~UpdatePlotResponse() {
  // @@protoc_insertion_point(destructor:mruv.plots.UpdatePlotResponse)
  SharedDtor();
}

void UpdatePlotResponse::SharedDtor() {
}

void UpdatePlotResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdatePlotResponse& UpdatePlotResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdatePlotResponse_plots_2fplots_2eproto.base);
  return *internal_default_instance();
}


void UpdatePlotResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.plots.UpdatePlotResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* UpdatePlotResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdatePlotResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.plots.UpdatePlotResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.plots.UpdatePlotResponse)
  return target;
}

size_t UpdatePlotResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.plots.UpdatePlotResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdatePlotResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.plots.UpdatePlotResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdatePlotResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdatePlotResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.plots.UpdatePlotResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.plots.UpdatePlotResponse)
    MergeFrom(*source);
  }
}

void UpdatePlotResponse::MergeFrom(const UpdatePlotResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.plots.UpdatePlotResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UpdatePlotResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.plots.UpdatePlotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePlotResponse::CopyFrom(const UpdatePlotResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.plots.UpdatePlotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePlotResponse::IsInitialized() const {
  return true;
}

void UpdatePlotResponse::InternalSwap(UpdatePlotResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdatePlotResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeletePlotRequest::InitAsDefaultInstance() {
}
class DeletePlotRequest::_Internal {
 public:
};

DeletePlotRequest::DeletePlotRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.plots.DeletePlotRequest)
}
DeletePlotRequest::DeletePlotRequest(const DeletePlotRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.plots.DeletePlotRequest)
}

void DeletePlotRequest::SharedCtor() {
  id_ = 0u;
}

DeletePlotRequest::~DeletePlotRequest() {
  // @@protoc_insertion_point(destructor:mruv.plots.DeletePlotRequest)
  SharedDtor();
}

void DeletePlotRequest::SharedDtor() {
}

void DeletePlotRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeletePlotRequest& DeletePlotRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeletePlotRequest_plots_2fplots_2eproto.base);
  return *internal_default_instance();
}


void DeletePlotRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.plots.DeletePlotRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear();
}

const char* DeletePlotRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeletePlotRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.plots.DeletePlotRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.plots.DeletePlotRequest)
  return target;
}

size_t DeletePlotRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.plots.DeletePlotRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeletePlotRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.plots.DeletePlotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeletePlotRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeletePlotRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.plots.DeletePlotRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.plots.DeletePlotRequest)
    MergeFrom(*source);
  }
}

void DeletePlotRequest::MergeFrom(const DeletePlotRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.plots.DeletePlotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void DeletePlotRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.plots.DeletePlotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeletePlotRequest::CopyFrom(const DeletePlotRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.plots.DeletePlotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletePlotRequest::IsInitialized() const {
  return true;
}

void DeletePlotRequest::InternalSwap(DeletePlotRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeletePlotRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeletePlotResponse::InitAsDefaultInstance() {
}
class DeletePlotResponse::_Internal {
 public:
};

DeletePlotResponse::DeletePlotResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.plots.DeletePlotResponse)
}
DeletePlotResponse::DeletePlotResponse(const DeletePlotResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.plots.DeletePlotResponse)
}

void DeletePlotResponse::SharedCtor() {
}

DeletePlotResponse::~DeletePlotResponse() {
  // @@protoc_insertion_point(destructor:mruv.plots.DeletePlotResponse)
  SharedDtor();
}

void DeletePlotResponse::SharedDtor() {
}

void DeletePlotResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeletePlotResponse& DeletePlotResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeletePlotResponse_plots_2fplots_2eproto.base);
  return *internal_default_instance();
}


void DeletePlotResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.plots.DeletePlotResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* DeletePlotResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeletePlotResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.plots.DeletePlotResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.plots.DeletePlotResponse)
  return target;
}

size_t DeletePlotResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.plots.DeletePlotResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeletePlotResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.plots.DeletePlotResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeletePlotResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeletePlotResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.plots.DeletePlotResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.plots.DeletePlotResponse)
    MergeFrom(*source);
  }
}

void DeletePlotResponse::MergeFrom(const DeletePlotResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.plots.DeletePlotResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeletePlotResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.plots.DeletePlotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeletePlotResponse::CopyFrom(const DeletePlotResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.plots.DeletePlotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletePlotResponse::IsInitialized() const {
  return true;
}

void DeletePlotResponse::InternalSwap(DeletePlotResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeletePlotResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace plots
}  // namespace mruv
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mruv::plots::Plot* Arena::CreateMaybeMessage< ::mruv::plots::Plot >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::plots::Plot >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::plots::CreatePlotRequest* Arena::CreateMaybeMessage< ::mruv::plots::CreatePlotRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::plots::CreatePlotRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::plots::CreatePlotResponse* Arena::CreateMaybeMessage< ::mruv::plots::CreatePlotResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::plots::CreatePlotResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::plots::GetPlotRequest* Arena::CreateMaybeMessage< ::mruv::plots::GetPlotRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::plots::GetPlotRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::plots::GetPlotResponse* Arena::CreateMaybeMessage< ::mruv::plots::GetPlotResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::plots::GetPlotResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::plots::UpdatePlotRequest* Arena::CreateMaybeMessage< ::mruv::plots::UpdatePlotRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::plots::UpdatePlotRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::plots::UpdatePlotResponse* Arena::CreateMaybeMessage< ::mruv::plots::UpdatePlotResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::plots::UpdatePlotResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::plots::DeletePlotRequest* Arena::CreateMaybeMessage< ::mruv::plots::DeletePlotRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::plots::DeletePlotRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::plots::DeletePlotResponse* Arena::CreateMaybeMessage< ::mruv::plots::DeletePlotResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::plots::DeletePlotResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
