// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: entrances/entrances.proto

#include "entrances/entrances.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_entrances_2fentrances_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Entrance_entrances_2fentrances_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_entrances_2fentrances_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FetchAllEntrancesResponse_EntrancesEntry_DoNotUse_entrances_2fentrances_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_spots_2fspots_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Spot_spots_2fspots_2eproto;
namespace mruv {
namespace entrances {
class EntranceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Entrance> _instance;
} _Entrance_default_instance_;
class CreateEntranceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateEntranceRequest> _instance;
} _CreateEntranceRequest_default_instance_;
class CreateEntranceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateEntranceResponse> _instance;
} _CreateEntranceResponse_default_instance_;
class GetEntranceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetEntranceRequest> _instance;
} _GetEntranceRequest_default_instance_;
class GetEntranceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetEntranceResponse> _instance;
} _GetEntranceResponse_default_instance_;
class UpdateEntranceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateEntranceRequest> _instance;
} _UpdateEntranceRequest_default_instance_;
class UpdateEntranceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateEntranceResponse> _instance;
} _UpdateEntranceResponse_default_instance_;
class DeleteEntranceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteEntranceRequest> _instance;
} _DeleteEntranceRequest_default_instance_;
class DeleteEntranceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteEntranceResponse> _instance;
} _DeleteEntranceResponse_default_instance_;
class LockRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LockRequest> _instance;
} _LockRequest_default_instance_;
class LockResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LockResponse> _instance;
} _LockResponse_default_instance_;
class UnlockRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnlockRequest> _instance;
} _UnlockRequest_default_instance_;
class UnlockResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnlockResponse> _instance;
} _UnlockResponse_default_instance_;
class FindNearestEntranceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FindNearestEntranceRequest> _instance;
} _FindNearestEntranceRequest_default_instance_;
class FindNearestEntranceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FindNearestEntranceResponse> _instance;
} _FindNearestEntranceResponse_default_instance_;
class EnterRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnterRequest> _instance;
} _EnterRequest_default_instance_;
class EnterResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnterResponse> _instance;
} _EnterResponse_default_instance_;
class ExitRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExitRequest> _instance;
} _ExitRequest_default_instance_;
class ExitResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExitResponse> _instance;
} _ExitResponse_default_instance_;
class FetchAllEntrancesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FetchAllEntrancesRequest> _instance;
} _FetchAllEntrancesRequest_default_instance_;
class FetchAllEntrancesResponse_EntrancesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FetchAllEntrancesResponse_EntrancesEntry_DoNotUse> _instance;
} _FetchAllEntrancesResponse_EntrancesEntry_DoNotUse_default_instance_;
class FetchAllEntrancesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FetchAllEntrancesResponse> _instance;
} _FetchAllEntrancesResponse_default_instance_;
}  // namespace entrances
}  // namespace mruv
static void InitDefaultsscc_info_CreateEntranceRequest_entrances_2fentrances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::entrances::_CreateEntranceRequest_default_instance_;
    new (ptr) ::mruv::entrances::CreateEntranceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::entrances::CreateEntranceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateEntranceRequest_entrances_2fentrances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateEntranceRequest_entrances_2fentrances_2eproto}, {
      &scc_info_Spot_spots_2fspots_2eproto.base,}};

static void InitDefaultsscc_info_CreateEntranceResponse_entrances_2fentrances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::entrances::_CreateEntranceResponse_default_instance_;
    new (ptr) ::mruv::entrances::CreateEntranceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::entrances::CreateEntranceResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateEntranceResponse_entrances_2fentrances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateEntranceResponse_entrances_2fentrances_2eproto}, {}};

static void InitDefaultsscc_info_DeleteEntranceRequest_entrances_2fentrances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::entrances::_DeleteEntranceRequest_default_instance_;
    new (ptr) ::mruv::entrances::DeleteEntranceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::entrances::DeleteEntranceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteEntranceRequest_entrances_2fentrances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteEntranceRequest_entrances_2fentrances_2eproto}, {}};

static void InitDefaultsscc_info_DeleteEntranceResponse_entrances_2fentrances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::entrances::_DeleteEntranceResponse_default_instance_;
    new (ptr) ::mruv::entrances::DeleteEntranceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::entrances::DeleteEntranceResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteEntranceResponse_entrances_2fentrances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteEntranceResponse_entrances_2fentrances_2eproto}, {}};

static void InitDefaultsscc_info_EnterRequest_entrances_2fentrances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::entrances::_EnterRequest_default_instance_;
    new (ptr) ::mruv::entrances::EnterRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::entrances::EnterRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnterRequest_entrances_2fentrances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnterRequest_entrances_2fentrances_2eproto}, {}};

static void InitDefaultsscc_info_EnterResponse_entrances_2fentrances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::entrances::_EnterResponse_default_instance_;
    new (ptr) ::mruv::entrances::EnterResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::entrances::EnterResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnterResponse_entrances_2fentrances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnterResponse_entrances_2fentrances_2eproto}, {}};

static void InitDefaultsscc_info_Entrance_entrances_2fentrances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::entrances::_Entrance_default_instance_;
    new (ptr) ::mruv::entrances::Entrance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::entrances::Entrance::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Entrance_entrances_2fentrances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Entrance_entrances_2fentrances_2eproto}, {
      &scc_info_Spot_spots_2fspots_2eproto.base,}};

static void InitDefaultsscc_info_ExitRequest_entrances_2fentrances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::entrances::_ExitRequest_default_instance_;
    new (ptr) ::mruv::entrances::ExitRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::entrances::ExitRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExitRequest_entrances_2fentrances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ExitRequest_entrances_2fentrances_2eproto}, {}};

static void InitDefaultsscc_info_ExitResponse_entrances_2fentrances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::entrances::_ExitResponse_default_instance_;
    new (ptr) ::mruv::entrances::ExitResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::entrances::ExitResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExitResponse_entrances_2fentrances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ExitResponse_entrances_2fentrances_2eproto}, {}};

static void InitDefaultsscc_info_FetchAllEntrancesRequest_entrances_2fentrances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::entrances::_FetchAllEntrancesRequest_default_instance_;
    new (ptr) ::mruv::entrances::FetchAllEntrancesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::entrances::FetchAllEntrancesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FetchAllEntrancesRequest_entrances_2fentrances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FetchAllEntrancesRequest_entrances_2fentrances_2eproto}, {}};

static void InitDefaultsscc_info_FetchAllEntrancesResponse_entrances_2fentrances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::entrances::_FetchAllEntrancesResponse_default_instance_;
    new (ptr) ::mruv::entrances::FetchAllEntrancesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::entrances::FetchAllEntrancesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FetchAllEntrancesResponse_entrances_2fentrances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FetchAllEntrancesResponse_entrances_2fentrances_2eproto}, {
      &scc_info_FetchAllEntrancesResponse_EntrancesEntry_DoNotUse_entrances_2fentrances_2eproto.base,}};

static void InitDefaultsscc_info_FetchAllEntrancesResponse_EntrancesEntry_DoNotUse_entrances_2fentrances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::entrances::_FetchAllEntrancesResponse_EntrancesEntry_DoNotUse_default_instance_;
    new (ptr) ::mruv::entrances::FetchAllEntrancesResponse_EntrancesEntry_DoNotUse();
  }
  ::mruv::entrances::FetchAllEntrancesResponse_EntrancesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FetchAllEntrancesResponse_EntrancesEntry_DoNotUse_entrances_2fentrances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FetchAllEntrancesResponse_EntrancesEntry_DoNotUse_entrances_2fentrances_2eproto}, {
      &scc_info_Entrance_entrances_2fentrances_2eproto.base,}};

static void InitDefaultsscc_info_FindNearestEntranceRequest_entrances_2fentrances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::entrances::_FindNearestEntranceRequest_default_instance_;
    new (ptr) ::mruv::entrances::FindNearestEntranceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::entrances::FindNearestEntranceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FindNearestEntranceRequest_entrances_2fentrances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FindNearestEntranceRequest_entrances_2fentrances_2eproto}, {}};

static void InitDefaultsscc_info_FindNearestEntranceResponse_entrances_2fentrances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::entrances::_FindNearestEntranceResponse_default_instance_;
    new (ptr) ::mruv::entrances::FindNearestEntranceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::entrances::FindNearestEntranceResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FindNearestEntranceResponse_entrances_2fentrances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FindNearestEntranceResponse_entrances_2fentrances_2eproto}, {}};

static void InitDefaultsscc_info_GetEntranceRequest_entrances_2fentrances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::entrances::_GetEntranceRequest_default_instance_;
    new (ptr) ::mruv::entrances::GetEntranceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::entrances::GetEntranceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetEntranceRequest_entrances_2fentrances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetEntranceRequest_entrances_2fentrances_2eproto}, {}};

static void InitDefaultsscc_info_GetEntranceResponse_entrances_2fentrances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::entrances::_GetEntranceResponse_default_instance_;
    new (ptr) ::mruv::entrances::GetEntranceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::entrances::GetEntranceResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetEntranceResponse_entrances_2fentrances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetEntranceResponse_entrances_2fentrances_2eproto}, {
      &scc_info_Spot_spots_2fspots_2eproto.base,}};

static void InitDefaultsscc_info_LockRequest_entrances_2fentrances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::entrances::_LockRequest_default_instance_;
    new (ptr) ::mruv::entrances::LockRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::entrances::LockRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LockRequest_entrances_2fentrances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LockRequest_entrances_2fentrances_2eproto}, {}};

static void InitDefaultsscc_info_LockResponse_entrances_2fentrances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::entrances::_LockResponse_default_instance_;
    new (ptr) ::mruv::entrances::LockResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::entrances::LockResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LockResponse_entrances_2fentrances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LockResponse_entrances_2fentrances_2eproto}, {}};

static void InitDefaultsscc_info_UnlockRequest_entrances_2fentrances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::entrances::_UnlockRequest_default_instance_;
    new (ptr) ::mruv::entrances::UnlockRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::entrances::UnlockRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnlockRequest_entrances_2fentrances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnlockRequest_entrances_2fentrances_2eproto}, {}};

static void InitDefaultsscc_info_UnlockResponse_entrances_2fentrances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::entrances::_UnlockResponse_default_instance_;
    new (ptr) ::mruv::entrances::UnlockResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::entrances::UnlockResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnlockResponse_entrances_2fentrances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnlockResponse_entrances_2fentrances_2eproto}, {}};

static void InitDefaultsscc_info_UpdateEntranceRequest_entrances_2fentrances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::entrances::_UpdateEntranceRequest_default_instance_;
    new (ptr) ::mruv::entrances::UpdateEntranceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::entrances::UpdateEntranceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateEntranceRequest_entrances_2fentrances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateEntranceRequest_entrances_2fentrances_2eproto}, {}};

static void InitDefaultsscc_info_UpdateEntranceResponse_entrances_2fentrances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::entrances::_UpdateEntranceResponse_default_instance_;
    new (ptr) ::mruv::entrances::UpdateEntranceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::entrances::UpdateEntranceResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateEntranceResponse_entrances_2fentrances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateEntranceResponse_entrances_2fentrances_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_entrances_2fentrances_2eproto[22];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_entrances_2fentrances_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_entrances_2fentrances_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_entrances_2fentrances_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::Entrance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::Entrance, name_),
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::Entrance, out_),
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::Entrance, in_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::CreateEntranceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::CreateEntranceRequest, name_),
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::CreateEntranceRequest, out_),
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::CreateEntranceRequest, in_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::CreateEntranceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::CreateEntranceResponse, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::GetEntranceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::GetEntranceRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::GetEntranceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::GetEntranceResponse, name_),
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::GetEntranceResponse, in_spot_),
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::GetEntranceResponse, out_spot_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::UpdateEntranceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::UpdateEntranceRequest, id_),
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::UpdateEntranceRequest, in_spot_id_),
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::UpdateEntranceRequest, out_spot_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::UpdateEntranceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::DeleteEntranceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::DeleteEntranceRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::DeleteEntranceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::LockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::LockRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::LockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::UnlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::UnlockRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::UnlockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::FindNearestEntranceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::FindNearestEntranceRequest, x_),
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::FindNearestEntranceRequest, y_),
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::FindNearestEntranceRequest, z_),
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::FindNearestEntranceRequest, max_distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::FindNearestEntranceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::FindNearestEntranceResponse, id_),
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::FindNearestEntranceResponse, distance_),
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::FindNearestEntranceResponse, inside_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::EnterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::EnterRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::EnterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::ExitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::ExitRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::ExitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::FetchAllEntrancesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::FetchAllEntrancesRequest, chunk_size_),
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::FetchAllEntrancesResponse_EntrancesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::FetchAllEntrancesResponse_EntrancesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::FetchAllEntrancesResponse_EntrancesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::FetchAllEntrancesResponse_EntrancesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::FetchAllEntrancesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::FetchAllEntrancesResponse, entrances_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mruv::entrances::Entrance)},
  { 8, -1, sizeof(::mruv::entrances::CreateEntranceRequest)},
  { 16, -1, sizeof(::mruv::entrances::CreateEntranceResponse)},
  { 22, -1, sizeof(::mruv::entrances::GetEntranceRequest)},
  { 28, -1, sizeof(::mruv::entrances::GetEntranceResponse)},
  { 36, -1, sizeof(::mruv::entrances::UpdateEntranceRequest)},
  { 44, -1, sizeof(::mruv::entrances::UpdateEntranceResponse)},
  { 49, -1, sizeof(::mruv::entrances::DeleteEntranceRequest)},
  { 55, -1, sizeof(::mruv::entrances::DeleteEntranceResponse)},
  { 60, -1, sizeof(::mruv::entrances::LockRequest)},
  { 66, -1, sizeof(::mruv::entrances::LockResponse)},
  { 71, -1, sizeof(::mruv::entrances::UnlockRequest)},
  { 77, -1, sizeof(::mruv::entrances::UnlockResponse)},
  { 82, -1, sizeof(::mruv::entrances::FindNearestEntranceRequest)},
  { 91, -1, sizeof(::mruv::entrances::FindNearestEntranceResponse)},
  { 99, -1, sizeof(::mruv::entrances::EnterRequest)},
  { 105, -1, sizeof(::mruv::entrances::EnterResponse)},
  { 110, -1, sizeof(::mruv::entrances::ExitRequest)},
  { 116, -1, sizeof(::mruv::entrances::ExitResponse)},
  { 121, -1, sizeof(::mruv::entrances::FetchAllEntrancesRequest)},
  { 127, 134, sizeof(::mruv::entrances::FetchAllEntrancesResponse_EntrancesEntry_DoNotUse)},
  { 136, -1, sizeof(::mruv::entrances::FetchAllEntrancesResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::entrances::_Entrance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::entrances::_CreateEntranceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::entrances::_CreateEntranceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::entrances::_GetEntranceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::entrances::_GetEntranceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::entrances::_UpdateEntranceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::entrances::_UpdateEntranceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::entrances::_DeleteEntranceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::entrances::_DeleteEntranceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::entrances::_LockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::entrances::_LockResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::entrances::_UnlockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::entrances::_UnlockResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::entrances::_FindNearestEntranceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::entrances::_FindNearestEntranceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::entrances::_EnterRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::entrances::_EnterResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::entrances::_ExitRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::entrances::_ExitResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::entrances::_FetchAllEntrancesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::entrances::_FetchAllEntrancesResponse_EntrancesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::entrances::_FetchAllEntrancesResponse_default_instance_),
};

const char descriptor_table_protodef_entrances_2fentrances_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031entrances/entrances.proto\022\016mruv.entran"
  "ces\032\034google/api/annotations.proto\032\021spots"
  "/spots.proto\"U\n\010Entrance\022\014\n\004name\030\001 \001(\t\022\035"
  "\n\003out\030\002 \001(\0132\020.mruv.spots.Spot\022\034\n\002in\030\003 \001("
  "\0132\020.mruv.spots.Spot\"b\n\025CreateEntranceReq"
  "uest\022\014\n\004name\030\001 \001(\t\022\035\n\003out\030\002 \001(\0132\020.mruv.s"
  "pots.Spot\022\034\n\002in\030\003 \001(\0132\020.mruv.spots.Spot\""
  "$\n\026CreateEntranceResponse\022\n\n\002id\030\001 \001(\r\" \n"
  "\022GetEntranceRequest\022\n\n\002id\030\001 \001(\r\"j\n\023GetEn"
  "tranceResponse\022\014\n\004name\030\001 \001(\t\022!\n\007in_spot\030"
  "\002 \001(\0132\020.mruv.spots.Spot\022\"\n\010out_spot\030\003 \001("
  "\0132\020.mruv.spots.Spot\"L\n\025UpdateEntranceReq"
  "uest\022\n\n\002id\030\001 \001(\r\022\022\n\nin_spot_id\030\002 \001(\r\022\023\n\013"
  "out_spot_id\030\003 \001(\r\"\030\n\026UpdateEntranceRespo"
  "nse\"#\n\025DeleteEntranceRequest\022\n\n\002id\030\001 \001(\r"
  "\"\030\n\026DeleteEntranceResponse\"\031\n\013LockReques"
  "t\022\n\n\002id\030\001 \001(\r\"\016\n\014LockResponse\"\033\n\rUnlockR"
  "equest\022\n\n\002id\030\001 \001(\r\"\020\n\016UnlockResponse\"S\n\032"
  "FindNearestEntranceRequest\022\t\n\001x\030\001 \001(\002\022\t\n"
  "\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\024\n\014max_distance\030\004 \001("
  "\002\"K\n\033FindNearestEntranceResponse\022\n\n\002id\030\001"
  " \001(\r\022\020\n\010distance\030\002 \001(\002\022\016\n\006inside\030\003 \001(\010\"\032"
  "\n\014EnterRequest\022\n\n\002id\030\001 \001(\r\"\017\n\rEnterRespo"
  "nse\"\031\n\013ExitRequest\022\n\n\002id\030\001 \001(\r\"\016\n\014ExitRe"
  "sponse\".\n\030FetchAllEntrancesRequest\022\022\n\nch"
  "unk_size\030\001 \001(\r\"\264\001\n\031FetchAllEntrancesResp"
  "onse\022K\n\tentrances\030\001 \003(\01328.mruv.entrances"
  ".FetchAllEntrancesResponse.EntrancesEntr"
  "y\032J\n\016EntrancesEntry\022\013\n\003key\030\001 \001(\r\022\'\n\005valu"
  "e\030\002 \001(\0132\030.mruv.entrances.Entrance:\0028\0012\237\t"
  "\n\024MruVEntrancesService\022y\n\016CreateEntrance"
  "\022%.mruv.entrances.CreateEntranceRequest\032"
  "&.mruv.entrances.CreateEntranceResponse\""
  "\030\202\323\344\223\002\022\"\r/v1/entrances:\001*\022r\n\013GetEntrance"
  "\022\".mruv.entrances.GetEntranceRequest\032#.m"
  "ruv.entrances.GetEntranceResponse\"\032\202\323\344\223\002"
  "\024\022\022/v1/entrances/{id}\022~\n\016UpdateEntrance\022"
  "%.mruv.entrances.UpdateEntranceRequest\032&"
  ".mruv.entrances.UpdateEntranceResponse\"\035"
  "\202\323\344\223\002\0272\022/v1/entrances/{id}:\001*\022{\n\016DeleteE"
  "ntrance\022%.mruv.entrances.DeleteEntranceR"
  "equest\032&.mruv.entrances.DeleteEntranceRe"
  "sponse\"\032\202\323\344\223\002\024*\022/v1/entrances/{id}\022e\n\004Lo"
  "ck\022\033.mruv.entrances.LockRequest\032\034.mruv.e"
  "ntrances.LockResponse\"\"\202\323\344\223\002\034\"\027/v1/entra"
  "nces/{id}/lock:\001*\022m\n\006Unlock\022\035.mruv.entra"
  "nces.UnlockRequest\032\036.mruv.entrances.Unlo"
  "ckResponse\"$\202\323\344\223\002\036\"\031/v1/entrances/{id}/u"
  "nlock:\001*\022\215\001\n\023FindNearestEntrance\022*.mruv."
  "entrances.FindNearestEntranceRequest\032+.m"
  "ruv.entrances.FindNearestEntranceRespons"
  "e\"\035\202\323\344\223\002\027\022\025/v1/entrances/nearest\022i\n\005Ente"
  "r\022\034.mruv.entrances.EnterRequest\032\035.mruv.e"
  "ntrances.EnterResponse\"#\202\323\344\223\002\035\"\030/v1/entr"
  "ances/{id}/enter:\001*\022e\n\004Exit\022\033.mruv.entra"
  "nces.ExitRequest\032\034.mruv.entrances.ExitRe"
  "sponse\"\"\202\323\344\223\002\034\"\027/v1/entrances/{id}/exit:"
  "\001*\022c\n\010FetchAll\022(.mruv.entrances.FetchAll"
  "EntrancesRequest\032).mruv.entrances.FetchA"
  "llEntrancesResponse\"\0000\001B)Z\'github.com/Mr"
  "uV-RP/mruv-pb-go/entrancesb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_entrances_2fentrances_2eproto_deps[2] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_spots_2fspots_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_entrances_2fentrances_2eproto_sccs[22] = {
  &scc_info_CreateEntranceRequest_entrances_2fentrances_2eproto.base,
  &scc_info_CreateEntranceResponse_entrances_2fentrances_2eproto.base,
  &scc_info_DeleteEntranceRequest_entrances_2fentrances_2eproto.base,
  &scc_info_DeleteEntranceResponse_entrances_2fentrances_2eproto.base,
  &scc_info_EnterRequest_entrances_2fentrances_2eproto.base,
  &scc_info_EnterResponse_entrances_2fentrances_2eproto.base,
  &scc_info_Entrance_entrances_2fentrances_2eproto.base,
  &scc_info_ExitRequest_entrances_2fentrances_2eproto.base,
  &scc_info_ExitResponse_entrances_2fentrances_2eproto.base,
  &scc_info_FetchAllEntrancesRequest_entrances_2fentrances_2eproto.base,
  &scc_info_FetchAllEntrancesResponse_entrances_2fentrances_2eproto.base,
  &scc_info_FetchAllEntrancesResponse_EntrancesEntry_DoNotUse_entrances_2fentrances_2eproto.base,
  &scc_info_FindNearestEntranceRequest_entrances_2fentrances_2eproto.base,
  &scc_info_FindNearestEntranceResponse_entrances_2fentrances_2eproto.base,
  &scc_info_GetEntranceRequest_entrances_2fentrances_2eproto.base,
  &scc_info_GetEntranceResponse_entrances_2fentrances_2eproto.base,
  &scc_info_LockRequest_entrances_2fentrances_2eproto.base,
  &scc_info_LockResponse_entrances_2fentrances_2eproto.base,
  &scc_info_UnlockRequest_entrances_2fentrances_2eproto.base,
  &scc_info_UnlockResponse_entrances_2fentrances_2eproto.base,
  &scc_info_UpdateEntranceRequest_entrances_2fentrances_2eproto.base,
  &scc_info_UpdateEntranceResponse_entrances_2fentrances_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_entrances_2fentrances_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_entrances_2fentrances_2eproto = {
  false, false, descriptor_table_protodef_entrances_2fentrances_2eproto, "entrances/entrances.proto", 2434,
  &descriptor_table_entrances_2fentrances_2eproto_once, descriptor_table_entrances_2fentrances_2eproto_sccs, descriptor_table_entrances_2fentrances_2eproto_deps, 22, 2,
  schemas, file_default_instances, TableStruct_entrances_2fentrances_2eproto::offsets,
  file_level_metadata_entrances_2fentrances_2eproto, 22, file_level_enum_descriptors_entrances_2fentrances_2eproto, file_level_service_descriptors_entrances_2fentrances_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_entrances_2fentrances_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_entrances_2fentrances_2eproto)), true);
namespace mruv {
namespace entrances {

// ===================================================================

void Entrance::InitAsDefaultInstance() {
  ::mruv::entrances::_Entrance_default_instance_._instance.get_mutable()->out_ = const_cast< ::mruv::spots::Spot*>(
      ::mruv::spots::Spot::internal_default_instance());
  ::mruv::entrances::_Entrance_default_instance_._instance.get_mutable()->in_ = const_cast< ::mruv::spots::Spot*>(
      ::mruv::spots::Spot::internal_default_instance());
}
class Entrance::_Internal {
 public:
  static const ::mruv::spots::Spot& out(const Entrance* msg);
  static const ::mruv::spots::Spot& in(const Entrance* msg);
};

const ::mruv::spots::Spot&
Entrance::_Internal::out(const Entrance* msg) {
  return *msg->out_;
}
const ::mruv::spots::Spot&
Entrance::_Internal::in(const Entrance* msg) {
  return *msg->in_;
}
void Entrance::clear_out() {
  if (GetArena() == nullptr && out_ != nullptr) {
    delete out_;
  }
  out_ = nullptr;
}
void Entrance::clear_in() {
  if (GetArena() == nullptr && in_ != nullptr) {
    delete in_;
  }
  in_ = nullptr;
}
Entrance::Entrance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.entrances.Entrance)
}
Entrance::Entrance(const Entrance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_out()) {
    out_ = new ::mruv::spots::Spot(*from.out_);
  } else {
    out_ = nullptr;
  }
  if (from._internal_has_in()) {
    in_ = new ::mruv::spots::Spot(*from.in_);
  } else {
    in_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mruv.entrances.Entrance)
}

void Entrance::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Entrance_entrances_2fentrances_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&out_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&in_) -
      reinterpret_cast<char*>(&out_)) + sizeof(in_));
}

Entrance::~Entrance() {
  // @@protoc_insertion_point(destructor:mruv.entrances.Entrance)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Entrance::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete out_;
  if (this != internal_default_instance()) delete in_;
}

void Entrance::ArenaDtor(void* object) {
  Entrance* _this = reinterpret_cast< Entrance* >(object);
  (void)_this;
}
void Entrance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Entrance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Entrance& Entrance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Entrance_entrances_2fentrances_2eproto.base);
  return *internal_default_instance();
}


void Entrance::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.entrances.Entrance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && out_ != nullptr) {
    delete out_;
  }
  out_ = nullptr;
  if (GetArena() == nullptr && in_ != nullptr) {
    delete in_;
  }
  in_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Entrance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.entrances.Entrance.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mruv.spots.Spot out = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_out(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mruv.spots.Spot in = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_in(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Entrance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.entrances.Entrance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.entrances.Entrance.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .mruv.spots.Spot out = 2;
  if (this->has_out()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::out(this), target, stream);
  }

  // .mruv.spots.Spot in = 3;
  if (this->has_in()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::in(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.entrances.Entrance)
  return target;
}

size_t Entrance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.entrances.Entrance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .mruv.spots.Spot out = 2;
  if (this->has_out()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *out_);
  }

  // .mruv.spots.Spot in = 3;
  if (this->has_in()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *in_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Entrance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.entrances.Entrance)
  GOOGLE_DCHECK_NE(&from, this);
  const Entrance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Entrance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.entrances.Entrance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.entrances.Entrance)
    MergeFrom(*source);
  }
}

void Entrance::MergeFrom(const Entrance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.entrances.Entrance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_out()) {
    _internal_mutable_out()->::mruv::spots::Spot::MergeFrom(from._internal_out());
  }
  if (from.has_in()) {
    _internal_mutable_in()->::mruv::spots::Spot::MergeFrom(from._internal_in());
  }
}

void Entrance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.entrances.Entrance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entrance::CopyFrom(const Entrance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.entrances.Entrance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entrance::IsInitialized() const {
  return true;
}

void Entrance::InternalSwap(Entrance* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Entrance, in_)
      + sizeof(Entrance::in_)
      - PROTOBUF_FIELD_OFFSET(Entrance, out_)>(
          reinterpret_cast<char*>(&out_),
          reinterpret_cast<char*>(&other->out_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Entrance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateEntranceRequest::InitAsDefaultInstance() {
  ::mruv::entrances::_CreateEntranceRequest_default_instance_._instance.get_mutable()->out_ = const_cast< ::mruv::spots::Spot*>(
      ::mruv::spots::Spot::internal_default_instance());
  ::mruv::entrances::_CreateEntranceRequest_default_instance_._instance.get_mutable()->in_ = const_cast< ::mruv::spots::Spot*>(
      ::mruv::spots::Spot::internal_default_instance());
}
class CreateEntranceRequest::_Internal {
 public:
  static const ::mruv::spots::Spot& out(const CreateEntranceRequest* msg);
  static const ::mruv::spots::Spot& in(const CreateEntranceRequest* msg);
};

const ::mruv::spots::Spot&
CreateEntranceRequest::_Internal::out(const CreateEntranceRequest* msg) {
  return *msg->out_;
}
const ::mruv::spots::Spot&
CreateEntranceRequest::_Internal::in(const CreateEntranceRequest* msg) {
  return *msg->in_;
}
void CreateEntranceRequest::clear_out() {
  if (GetArena() == nullptr && out_ != nullptr) {
    delete out_;
  }
  out_ = nullptr;
}
void CreateEntranceRequest::clear_in() {
  if (GetArena() == nullptr && in_ != nullptr) {
    delete in_;
  }
  in_ = nullptr;
}
CreateEntranceRequest::CreateEntranceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.entrances.CreateEntranceRequest)
}
CreateEntranceRequest::CreateEntranceRequest(const CreateEntranceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_out()) {
    out_ = new ::mruv::spots::Spot(*from.out_);
  } else {
    out_ = nullptr;
  }
  if (from._internal_has_in()) {
    in_ = new ::mruv::spots::Spot(*from.in_);
  } else {
    in_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mruv.entrances.CreateEntranceRequest)
}

void CreateEntranceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateEntranceRequest_entrances_2fentrances_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&out_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&in_) -
      reinterpret_cast<char*>(&out_)) + sizeof(in_));
}

CreateEntranceRequest::~CreateEntranceRequest() {
  // @@protoc_insertion_point(destructor:mruv.entrances.CreateEntranceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateEntranceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete out_;
  if (this != internal_default_instance()) delete in_;
}

void CreateEntranceRequest::ArenaDtor(void* object) {
  CreateEntranceRequest* _this = reinterpret_cast< CreateEntranceRequest* >(object);
  (void)_this;
}
void CreateEntranceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateEntranceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateEntranceRequest& CreateEntranceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateEntranceRequest_entrances_2fentrances_2eproto.base);
  return *internal_default_instance();
}


void CreateEntranceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.entrances.CreateEntranceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && out_ != nullptr) {
    delete out_;
  }
  out_ = nullptr;
  if (GetArena() == nullptr && in_ != nullptr) {
    delete in_;
  }
  in_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateEntranceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.entrances.CreateEntranceRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mruv.spots.Spot out = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_out(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mruv.spots.Spot in = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_in(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateEntranceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.entrances.CreateEntranceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.entrances.CreateEntranceRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .mruv.spots.Spot out = 2;
  if (this->has_out()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::out(this), target, stream);
  }

  // .mruv.spots.Spot in = 3;
  if (this->has_in()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::in(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.entrances.CreateEntranceRequest)
  return target;
}

size_t CreateEntranceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.entrances.CreateEntranceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .mruv.spots.Spot out = 2;
  if (this->has_out()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *out_);
  }

  // .mruv.spots.Spot in = 3;
  if (this->has_in()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *in_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateEntranceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.entrances.CreateEntranceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateEntranceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateEntranceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.entrances.CreateEntranceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.entrances.CreateEntranceRequest)
    MergeFrom(*source);
  }
}

void CreateEntranceRequest::MergeFrom(const CreateEntranceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.entrances.CreateEntranceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_out()) {
    _internal_mutable_out()->::mruv::spots::Spot::MergeFrom(from._internal_out());
  }
  if (from.has_in()) {
    _internal_mutable_in()->::mruv::spots::Spot::MergeFrom(from._internal_in());
  }
}

void CreateEntranceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.entrances.CreateEntranceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateEntranceRequest::CopyFrom(const CreateEntranceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.entrances.CreateEntranceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateEntranceRequest::IsInitialized() const {
  return true;
}

void CreateEntranceRequest::InternalSwap(CreateEntranceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateEntranceRequest, in_)
      + sizeof(CreateEntranceRequest::in_)
      - PROTOBUF_FIELD_OFFSET(CreateEntranceRequest, out_)>(
          reinterpret_cast<char*>(&out_),
          reinterpret_cast<char*>(&other->out_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateEntranceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateEntranceResponse::InitAsDefaultInstance() {
}
class CreateEntranceResponse::_Internal {
 public:
};

CreateEntranceResponse::CreateEntranceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.entrances.CreateEntranceResponse)
}
CreateEntranceResponse::CreateEntranceResponse(const CreateEntranceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.entrances.CreateEntranceResponse)
}

void CreateEntranceResponse::SharedCtor() {
  id_ = 0u;
}

CreateEntranceResponse::~CreateEntranceResponse() {
  // @@protoc_insertion_point(destructor:mruv.entrances.CreateEntranceResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateEntranceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CreateEntranceResponse::ArenaDtor(void* object) {
  CreateEntranceResponse* _this = reinterpret_cast< CreateEntranceResponse* >(object);
  (void)_this;
}
void CreateEntranceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateEntranceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateEntranceResponse& CreateEntranceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateEntranceResponse_entrances_2fentrances_2eproto.base);
  return *internal_default_instance();
}


void CreateEntranceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.entrances.CreateEntranceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateEntranceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateEntranceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.entrances.CreateEntranceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.entrances.CreateEntranceResponse)
  return target;
}

size_t CreateEntranceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.entrances.CreateEntranceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateEntranceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.entrances.CreateEntranceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateEntranceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateEntranceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.entrances.CreateEntranceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.entrances.CreateEntranceResponse)
    MergeFrom(*source);
  }
}

void CreateEntranceResponse::MergeFrom(const CreateEntranceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.entrances.CreateEntranceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void CreateEntranceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.entrances.CreateEntranceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateEntranceResponse::CopyFrom(const CreateEntranceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.entrances.CreateEntranceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateEntranceResponse::IsInitialized() const {
  return true;
}

void CreateEntranceResponse::InternalSwap(CreateEntranceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateEntranceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetEntranceRequest::InitAsDefaultInstance() {
}
class GetEntranceRequest::_Internal {
 public:
};

GetEntranceRequest::GetEntranceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.entrances.GetEntranceRequest)
}
GetEntranceRequest::GetEntranceRequest(const GetEntranceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.entrances.GetEntranceRequest)
}

void GetEntranceRequest::SharedCtor() {
  id_ = 0u;
}

GetEntranceRequest::~GetEntranceRequest() {
  // @@protoc_insertion_point(destructor:mruv.entrances.GetEntranceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetEntranceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetEntranceRequest::ArenaDtor(void* object) {
  GetEntranceRequest* _this = reinterpret_cast< GetEntranceRequest* >(object);
  (void)_this;
}
void GetEntranceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetEntranceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetEntranceRequest& GetEntranceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetEntranceRequest_entrances_2fentrances_2eproto.base);
  return *internal_default_instance();
}


void GetEntranceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.entrances.GetEntranceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetEntranceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetEntranceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.entrances.GetEntranceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.entrances.GetEntranceRequest)
  return target;
}

size_t GetEntranceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.entrances.GetEntranceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetEntranceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.entrances.GetEntranceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetEntranceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetEntranceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.entrances.GetEntranceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.entrances.GetEntranceRequest)
    MergeFrom(*source);
  }
}

void GetEntranceRequest::MergeFrom(const GetEntranceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.entrances.GetEntranceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetEntranceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.entrances.GetEntranceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEntranceRequest::CopyFrom(const GetEntranceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.entrances.GetEntranceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEntranceRequest::IsInitialized() const {
  return true;
}

void GetEntranceRequest::InternalSwap(GetEntranceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEntranceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetEntranceResponse::InitAsDefaultInstance() {
  ::mruv::entrances::_GetEntranceResponse_default_instance_._instance.get_mutable()->in_spot_ = const_cast< ::mruv::spots::Spot*>(
      ::mruv::spots::Spot::internal_default_instance());
  ::mruv::entrances::_GetEntranceResponse_default_instance_._instance.get_mutable()->out_spot_ = const_cast< ::mruv::spots::Spot*>(
      ::mruv::spots::Spot::internal_default_instance());
}
class GetEntranceResponse::_Internal {
 public:
  static const ::mruv::spots::Spot& in_spot(const GetEntranceResponse* msg);
  static const ::mruv::spots::Spot& out_spot(const GetEntranceResponse* msg);
};

const ::mruv::spots::Spot&
GetEntranceResponse::_Internal::in_spot(const GetEntranceResponse* msg) {
  return *msg->in_spot_;
}
const ::mruv::spots::Spot&
GetEntranceResponse::_Internal::out_spot(const GetEntranceResponse* msg) {
  return *msg->out_spot_;
}
void GetEntranceResponse::clear_in_spot() {
  if (GetArena() == nullptr && in_spot_ != nullptr) {
    delete in_spot_;
  }
  in_spot_ = nullptr;
}
void GetEntranceResponse::clear_out_spot() {
  if (GetArena() == nullptr && out_spot_ != nullptr) {
    delete out_spot_;
  }
  out_spot_ = nullptr;
}
GetEntranceResponse::GetEntranceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.entrances.GetEntranceResponse)
}
GetEntranceResponse::GetEntranceResponse(const GetEntranceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_in_spot()) {
    in_spot_ = new ::mruv::spots::Spot(*from.in_spot_);
  } else {
    in_spot_ = nullptr;
  }
  if (from._internal_has_out_spot()) {
    out_spot_ = new ::mruv::spots::Spot(*from.out_spot_);
  } else {
    out_spot_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mruv.entrances.GetEntranceResponse)
}

void GetEntranceResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetEntranceResponse_entrances_2fentrances_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&in_spot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&out_spot_) -
      reinterpret_cast<char*>(&in_spot_)) + sizeof(out_spot_));
}

GetEntranceResponse::~GetEntranceResponse() {
  // @@protoc_insertion_point(destructor:mruv.entrances.GetEntranceResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetEntranceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete in_spot_;
  if (this != internal_default_instance()) delete out_spot_;
}

void GetEntranceResponse::ArenaDtor(void* object) {
  GetEntranceResponse* _this = reinterpret_cast< GetEntranceResponse* >(object);
  (void)_this;
}
void GetEntranceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetEntranceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetEntranceResponse& GetEntranceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetEntranceResponse_entrances_2fentrances_2eproto.base);
  return *internal_default_instance();
}


void GetEntranceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.entrances.GetEntranceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && in_spot_ != nullptr) {
    delete in_spot_;
  }
  in_spot_ = nullptr;
  if (GetArena() == nullptr && out_spot_ != nullptr) {
    delete out_spot_;
  }
  out_spot_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetEntranceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.entrances.GetEntranceResponse.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mruv.spots.Spot in_spot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_in_spot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mruv.spots.Spot out_spot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_out_spot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetEntranceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.entrances.GetEntranceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.entrances.GetEntranceResponse.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .mruv.spots.Spot in_spot = 2;
  if (this->has_in_spot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::in_spot(this), target, stream);
  }

  // .mruv.spots.Spot out_spot = 3;
  if (this->has_out_spot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::out_spot(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.entrances.GetEntranceResponse)
  return target;
}

size_t GetEntranceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.entrances.GetEntranceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .mruv.spots.Spot in_spot = 2;
  if (this->has_in_spot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *in_spot_);
  }

  // .mruv.spots.Spot out_spot = 3;
  if (this->has_out_spot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *out_spot_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetEntranceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.entrances.GetEntranceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetEntranceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetEntranceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.entrances.GetEntranceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.entrances.GetEntranceResponse)
    MergeFrom(*source);
  }
}

void GetEntranceResponse::MergeFrom(const GetEntranceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.entrances.GetEntranceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_in_spot()) {
    _internal_mutable_in_spot()->::mruv::spots::Spot::MergeFrom(from._internal_in_spot());
  }
  if (from.has_out_spot()) {
    _internal_mutable_out_spot()->::mruv::spots::Spot::MergeFrom(from._internal_out_spot());
  }
}

void GetEntranceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.entrances.GetEntranceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEntranceResponse::CopyFrom(const GetEntranceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.entrances.GetEntranceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEntranceResponse::IsInitialized() const {
  return true;
}

void GetEntranceResponse::InternalSwap(GetEntranceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetEntranceResponse, out_spot_)
      + sizeof(GetEntranceResponse::out_spot_)
      - PROTOBUF_FIELD_OFFSET(GetEntranceResponse, in_spot_)>(
          reinterpret_cast<char*>(&in_spot_),
          reinterpret_cast<char*>(&other->in_spot_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEntranceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateEntranceRequest::InitAsDefaultInstance() {
}
class UpdateEntranceRequest::_Internal {
 public:
};

UpdateEntranceRequest::UpdateEntranceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.entrances.UpdateEntranceRequest)
}
UpdateEntranceRequest::UpdateEntranceRequest(const UpdateEntranceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&out_spot_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(out_spot_id_));
  // @@protoc_insertion_point(copy_constructor:mruv.entrances.UpdateEntranceRequest)
}

void UpdateEntranceRequest::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&out_spot_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(out_spot_id_));
}

UpdateEntranceRequest::~UpdateEntranceRequest() {
  // @@protoc_insertion_point(destructor:mruv.entrances.UpdateEntranceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateEntranceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UpdateEntranceRequest::ArenaDtor(void* object) {
  UpdateEntranceRequest* _this = reinterpret_cast< UpdateEntranceRequest* >(object);
  (void)_this;
}
void UpdateEntranceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateEntranceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateEntranceRequest& UpdateEntranceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateEntranceRequest_entrances_2fentrances_2eproto.base);
  return *internal_default_instance();
}


void UpdateEntranceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.entrances.UpdateEntranceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&out_spot_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(out_spot_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateEntranceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 in_spot_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          in_spot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 out_spot_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          out_spot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateEntranceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.entrances.UpdateEntranceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 in_spot_id = 2;
  if (this->in_spot_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_in_spot_id(), target);
  }

  // uint32 out_spot_id = 3;
  if (this->out_spot_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_out_spot_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.entrances.UpdateEntranceRequest)
  return target;
}

size_t UpdateEntranceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.entrances.UpdateEntranceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 in_spot_id = 2;
  if (this->in_spot_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_in_spot_id());
  }

  // uint32 out_spot_id = 3;
  if (this->out_spot_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_out_spot_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateEntranceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.entrances.UpdateEntranceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateEntranceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateEntranceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.entrances.UpdateEntranceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.entrances.UpdateEntranceRequest)
    MergeFrom(*source);
  }
}

void UpdateEntranceRequest::MergeFrom(const UpdateEntranceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.entrances.UpdateEntranceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.in_spot_id() != 0) {
    _internal_set_in_spot_id(from._internal_in_spot_id());
  }
  if (from.out_spot_id() != 0) {
    _internal_set_out_spot_id(from._internal_out_spot_id());
  }
}

void UpdateEntranceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.entrances.UpdateEntranceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateEntranceRequest::CopyFrom(const UpdateEntranceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.entrances.UpdateEntranceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateEntranceRequest::IsInitialized() const {
  return true;
}

void UpdateEntranceRequest::InternalSwap(UpdateEntranceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateEntranceRequest, out_spot_id_)
      + sizeof(UpdateEntranceRequest::out_spot_id_)
      - PROTOBUF_FIELD_OFFSET(UpdateEntranceRequest, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateEntranceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateEntranceResponse::InitAsDefaultInstance() {
}
class UpdateEntranceResponse::_Internal {
 public:
};

UpdateEntranceResponse::UpdateEntranceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.entrances.UpdateEntranceResponse)
}
UpdateEntranceResponse::UpdateEntranceResponse(const UpdateEntranceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.entrances.UpdateEntranceResponse)
}

void UpdateEntranceResponse::SharedCtor() {
}

UpdateEntranceResponse::~UpdateEntranceResponse() {
  // @@protoc_insertion_point(destructor:mruv.entrances.UpdateEntranceResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateEntranceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UpdateEntranceResponse::ArenaDtor(void* object) {
  UpdateEntranceResponse* _this = reinterpret_cast< UpdateEntranceResponse* >(object);
  (void)_this;
}
void UpdateEntranceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateEntranceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateEntranceResponse& UpdateEntranceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateEntranceResponse_entrances_2fentrances_2eproto.base);
  return *internal_default_instance();
}


void UpdateEntranceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.entrances.UpdateEntranceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateEntranceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateEntranceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.entrances.UpdateEntranceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.entrances.UpdateEntranceResponse)
  return target;
}

size_t UpdateEntranceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.entrances.UpdateEntranceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateEntranceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.entrances.UpdateEntranceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateEntranceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateEntranceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.entrances.UpdateEntranceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.entrances.UpdateEntranceResponse)
    MergeFrom(*source);
  }
}

void UpdateEntranceResponse::MergeFrom(const UpdateEntranceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.entrances.UpdateEntranceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UpdateEntranceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.entrances.UpdateEntranceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateEntranceResponse::CopyFrom(const UpdateEntranceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.entrances.UpdateEntranceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateEntranceResponse::IsInitialized() const {
  return true;
}

void UpdateEntranceResponse::InternalSwap(UpdateEntranceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateEntranceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteEntranceRequest::InitAsDefaultInstance() {
}
class DeleteEntranceRequest::_Internal {
 public:
};

DeleteEntranceRequest::DeleteEntranceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.entrances.DeleteEntranceRequest)
}
DeleteEntranceRequest::DeleteEntranceRequest(const DeleteEntranceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.entrances.DeleteEntranceRequest)
}

void DeleteEntranceRequest::SharedCtor() {
  id_ = 0u;
}

DeleteEntranceRequest::~DeleteEntranceRequest() {
  // @@protoc_insertion_point(destructor:mruv.entrances.DeleteEntranceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteEntranceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteEntranceRequest::ArenaDtor(void* object) {
  DeleteEntranceRequest* _this = reinterpret_cast< DeleteEntranceRequest* >(object);
  (void)_this;
}
void DeleteEntranceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteEntranceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteEntranceRequest& DeleteEntranceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteEntranceRequest_entrances_2fentrances_2eproto.base);
  return *internal_default_instance();
}


void DeleteEntranceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.entrances.DeleteEntranceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteEntranceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteEntranceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.entrances.DeleteEntranceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.entrances.DeleteEntranceRequest)
  return target;
}

size_t DeleteEntranceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.entrances.DeleteEntranceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteEntranceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.entrances.DeleteEntranceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteEntranceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteEntranceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.entrances.DeleteEntranceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.entrances.DeleteEntranceRequest)
    MergeFrom(*source);
  }
}

void DeleteEntranceRequest::MergeFrom(const DeleteEntranceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.entrances.DeleteEntranceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void DeleteEntranceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.entrances.DeleteEntranceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteEntranceRequest::CopyFrom(const DeleteEntranceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.entrances.DeleteEntranceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteEntranceRequest::IsInitialized() const {
  return true;
}

void DeleteEntranceRequest::InternalSwap(DeleteEntranceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteEntranceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteEntranceResponse::InitAsDefaultInstance() {
}
class DeleteEntranceResponse::_Internal {
 public:
};

DeleteEntranceResponse::DeleteEntranceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.entrances.DeleteEntranceResponse)
}
DeleteEntranceResponse::DeleteEntranceResponse(const DeleteEntranceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.entrances.DeleteEntranceResponse)
}

void DeleteEntranceResponse::SharedCtor() {
}

DeleteEntranceResponse::~DeleteEntranceResponse() {
  // @@protoc_insertion_point(destructor:mruv.entrances.DeleteEntranceResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteEntranceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteEntranceResponse::ArenaDtor(void* object) {
  DeleteEntranceResponse* _this = reinterpret_cast< DeleteEntranceResponse* >(object);
  (void)_this;
}
void DeleteEntranceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteEntranceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteEntranceResponse& DeleteEntranceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteEntranceResponse_entrances_2fentrances_2eproto.base);
  return *internal_default_instance();
}


void DeleteEntranceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.entrances.DeleteEntranceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteEntranceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteEntranceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.entrances.DeleteEntranceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.entrances.DeleteEntranceResponse)
  return target;
}

size_t DeleteEntranceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.entrances.DeleteEntranceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteEntranceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.entrances.DeleteEntranceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteEntranceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteEntranceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.entrances.DeleteEntranceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.entrances.DeleteEntranceResponse)
    MergeFrom(*source);
  }
}

void DeleteEntranceResponse::MergeFrom(const DeleteEntranceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.entrances.DeleteEntranceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteEntranceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.entrances.DeleteEntranceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteEntranceResponse::CopyFrom(const DeleteEntranceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.entrances.DeleteEntranceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteEntranceResponse::IsInitialized() const {
  return true;
}

void DeleteEntranceResponse::InternalSwap(DeleteEntranceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteEntranceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LockRequest::InitAsDefaultInstance() {
}
class LockRequest::_Internal {
 public:
};

LockRequest::LockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.entrances.LockRequest)
}
LockRequest::LockRequest(const LockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.entrances.LockRequest)
}

void LockRequest::SharedCtor() {
  id_ = 0u;
}

LockRequest::~LockRequest() {
  // @@protoc_insertion_point(destructor:mruv.entrances.LockRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LockRequest::ArenaDtor(void* object) {
  LockRequest* _this = reinterpret_cast< LockRequest* >(object);
  (void)_this;
}
void LockRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LockRequest& LockRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LockRequest_entrances_2fentrances_2eproto.base);
  return *internal_default_instance();
}


void LockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.entrances.LockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LockRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.entrances.LockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.entrances.LockRequest)
  return target;
}

size_t LockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.entrances.LockRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LockRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.entrances.LockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LockRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LockRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.entrances.LockRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.entrances.LockRequest)
    MergeFrom(*source);
  }
}

void LockRequest::MergeFrom(const LockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.entrances.LockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void LockRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.entrances.LockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LockRequest::CopyFrom(const LockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.entrances.LockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockRequest::IsInitialized() const {
  return true;
}

void LockRequest::InternalSwap(LockRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LockRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LockResponse::InitAsDefaultInstance() {
}
class LockResponse::_Internal {
 public:
};

LockResponse::LockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.entrances.LockResponse)
}
LockResponse::LockResponse(const LockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.entrances.LockResponse)
}

void LockResponse::SharedCtor() {
}

LockResponse::~LockResponse() {
  // @@protoc_insertion_point(destructor:mruv.entrances.LockResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LockResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LockResponse::ArenaDtor(void* object) {
  LockResponse* _this = reinterpret_cast< LockResponse* >(object);
  (void)_this;
}
void LockResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LockResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LockResponse& LockResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LockResponse_entrances_2fentrances_2eproto.base);
  return *internal_default_instance();
}


void LockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.entrances.LockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LockResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LockResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.entrances.LockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.entrances.LockResponse)
  return target;
}

size_t LockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.entrances.LockResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LockResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.entrances.LockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LockResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LockResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.entrances.LockResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.entrances.LockResponse)
    MergeFrom(*source);
  }
}

void LockResponse::MergeFrom(const LockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.entrances.LockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LockResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.entrances.LockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LockResponse::CopyFrom(const LockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.entrances.LockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockResponse::IsInitialized() const {
  return true;
}

void LockResponse::InternalSwap(LockResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LockResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnlockRequest::InitAsDefaultInstance() {
}
class UnlockRequest::_Internal {
 public:
};

UnlockRequest::UnlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.entrances.UnlockRequest)
}
UnlockRequest::UnlockRequest(const UnlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.entrances.UnlockRequest)
}

void UnlockRequest::SharedCtor() {
  id_ = 0u;
}

UnlockRequest::~UnlockRequest() {
  // @@protoc_insertion_point(destructor:mruv.entrances.UnlockRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnlockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnlockRequest::ArenaDtor(void* object) {
  UnlockRequest* _this = reinterpret_cast< UnlockRequest* >(object);
  (void)_this;
}
void UnlockRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnlockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnlockRequest& UnlockRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnlockRequest_entrances_2fentrances_2eproto.base);
  return *internal_default_instance();
}


void UnlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.entrances.UnlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnlockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnlockRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.entrances.UnlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.entrances.UnlockRequest)
  return target;
}

size_t UnlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.entrances.UnlockRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnlockRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.entrances.UnlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnlockRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnlockRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.entrances.UnlockRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.entrances.UnlockRequest)
    MergeFrom(*source);
  }
}

void UnlockRequest::MergeFrom(const UnlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.entrances.UnlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void UnlockRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.entrances.UnlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnlockRequest::CopyFrom(const UnlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.entrances.UnlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnlockRequest::IsInitialized() const {
  return true;
}

void UnlockRequest::InternalSwap(UnlockRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnlockRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnlockResponse::InitAsDefaultInstance() {
}
class UnlockResponse::_Internal {
 public:
};

UnlockResponse::UnlockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.entrances.UnlockResponse)
}
UnlockResponse::UnlockResponse(const UnlockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.entrances.UnlockResponse)
}

void UnlockResponse::SharedCtor() {
}

UnlockResponse::~UnlockResponse() {
  // @@protoc_insertion_point(destructor:mruv.entrances.UnlockResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnlockResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnlockResponse::ArenaDtor(void* object) {
  UnlockResponse* _this = reinterpret_cast< UnlockResponse* >(object);
  (void)_this;
}
void UnlockResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnlockResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnlockResponse& UnlockResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnlockResponse_entrances_2fentrances_2eproto.base);
  return *internal_default_instance();
}


void UnlockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.entrances.UnlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnlockResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnlockResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.entrances.UnlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.entrances.UnlockResponse)
  return target;
}

size_t UnlockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.entrances.UnlockResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnlockResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.entrances.UnlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UnlockResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnlockResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.entrances.UnlockResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.entrances.UnlockResponse)
    MergeFrom(*source);
  }
}

void UnlockResponse::MergeFrom(const UnlockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.entrances.UnlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UnlockResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.entrances.UnlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnlockResponse::CopyFrom(const UnlockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.entrances.UnlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnlockResponse::IsInitialized() const {
  return true;
}

void UnlockResponse::InternalSwap(UnlockResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnlockResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FindNearestEntranceRequest::InitAsDefaultInstance() {
}
class FindNearestEntranceRequest::_Internal {
 public:
};

FindNearestEntranceRequest::FindNearestEntranceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.entrances.FindNearestEntranceRequest)
}
FindNearestEntranceRequest::FindNearestEntranceRequest(const FindNearestEntranceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_distance_) -
    reinterpret_cast<char*>(&x_)) + sizeof(max_distance_));
  // @@protoc_insertion_point(copy_constructor:mruv.entrances.FindNearestEntranceRequest)
}

void FindNearestEntranceRequest::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_distance_) -
      reinterpret_cast<char*>(&x_)) + sizeof(max_distance_));
}

FindNearestEntranceRequest::~FindNearestEntranceRequest() {
  // @@protoc_insertion_point(destructor:mruv.entrances.FindNearestEntranceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FindNearestEntranceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FindNearestEntranceRequest::ArenaDtor(void* object) {
  FindNearestEntranceRequest* _this = reinterpret_cast< FindNearestEntranceRequest* >(object);
  (void)_this;
}
void FindNearestEntranceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FindNearestEntranceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FindNearestEntranceRequest& FindNearestEntranceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FindNearestEntranceRequest_entrances_2fentrances_2eproto.base);
  return *internal_default_instance();
}


void FindNearestEntranceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.entrances.FindNearestEntranceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_distance_) -
      reinterpret_cast<char*>(&x_)) + sizeof(max_distance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FindNearestEntranceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float max_distance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          max_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FindNearestEntranceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.entrances.FindNearestEntranceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  // float max_distance = 4;
  if (!(this->max_distance() <= 0 && this->max_distance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_max_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.entrances.FindNearestEntranceRequest)
  return target;
}

size_t FindNearestEntranceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.entrances.FindNearestEntranceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  // float max_distance = 4;
  if (!(this->max_distance() <= 0 && this->max_distance() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FindNearestEntranceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.entrances.FindNearestEntranceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FindNearestEntranceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FindNearestEntranceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.entrances.FindNearestEntranceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.entrances.FindNearestEntranceRequest)
    MergeFrom(*source);
  }
}

void FindNearestEntranceRequest::MergeFrom(const FindNearestEntranceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.entrances.FindNearestEntranceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  if (!(from.max_distance() <= 0 && from.max_distance() >= 0)) {
    _internal_set_max_distance(from._internal_max_distance());
  }
}

void FindNearestEntranceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.entrances.FindNearestEntranceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindNearestEntranceRequest::CopyFrom(const FindNearestEntranceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.entrances.FindNearestEntranceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindNearestEntranceRequest::IsInitialized() const {
  return true;
}

void FindNearestEntranceRequest::InternalSwap(FindNearestEntranceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FindNearestEntranceRequest, max_distance_)
      + sizeof(FindNearestEntranceRequest::max_distance_)
      - PROTOBUF_FIELD_OFFSET(FindNearestEntranceRequest, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FindNearestEntranceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FindNearestEntranceResponse::InitAsDefaultInstance() {
}
class FindNearestEntranceResponse::_Internal {
 public:
};

FindNearestEntranceResponse::FindNearestEntranceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.entrances.FindNearestEntranceResponse)
}
FindNearestEntranceResponse::FindNearestEntranceResponse(const FindNearestEntranceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&inside_) -
    reinterpret_cast<char*>(&id_)) + sizeof(inside_));
  // @@protoc_insertion_point(copy_constructor:mruv.entrances.FindNearestEntranceResponse)
}

void FindNearestEntranceResponse::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inside_) -
      reinterpret_cast<char*>(&id_)) + sizeof(inside_));
}

FindNearestEntranceResponse::~FindNearestEntranceResponse() {
  // @@protoc_insertion_point(destructor:mruv.entrances.FindNearestEntranceResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FindNearestEntranceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FindNearestEntranceResponse::ArenaDtor(void* object) {
  FindNearestEntranceResponse* _this = reinterpret_cast< FindNearestEntranceResponse* >(object);
  (void)_this;
}
void FindNearestEntranceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FindNearestEntranceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FindNearestEntranceResponse& FindNearestEntranceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FindNearestEntranceResponse_entrances_2fentrances_2eproto.base);
  return *internal_default_instance();
}


void FindNearestEntranceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.entrances.FindNearestEntranceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inside_) -
      reinterpret_cast<char*>(&id_)) + sizeof(inside_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FindNearestEntranceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float distance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool inside = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          inside_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FindNearestEntranceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.entrances.FindNearestEntranceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // float distance = 2;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_distance(), target);
  }

  // bool inside = 3;
  if (this->inside() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_inside(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.entrances.FindNearestEntranceResponse)
  return target;
}

size_t FindNearestEntranceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.entrances.FindNearestEntranceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // float distance = 2;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    total_size += 1 + 4;
  }

  // bool inside = 3;
  if (this->inside() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FindNearestEntranceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.entrances.FindNearestEntranceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FindNearestEntranceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FindNearestEntranceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.entrances.FindNearestEntranceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.entrances.FindNearestEntranceResponse)
    MergeFrom(*source);
  }
}

void FindNearestEntranceResponse::MergeFrom(const FindNearestEntranceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.entrances.FindNearestEntranceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (!(from.distance() <= 0 && from.distance() >= 0)) {
    _internal_set_distance(from._internal_distance());
  }
  if (from.inside() != 0) {
    _internal_set_inside(from._internal_inside());
  }
}

void FindNearestEntranceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.entrances.FindNearestEntranceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindNearestEntranceResponse::CopyFrom(const FindNearestEntranceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.entrances.FindNearestEntranceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindNearestEntranceResponse::IsInitialized() const {
  return true;
}

void FindNearestEntranceResponse::InternalSwap(FindNearestEntranceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FindNearestEntranceResponse, inside_)
      + sizeof(FindNearestEntranceResponse::inside_)
      - PROTOBUF_FIELD_OFFSET(FindNearestEntranceResponse, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FindNearestEntranceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnterRequest::InitAsDefaultInstance() {
}
class EnterRequest::_Internal {
 public:
};

EnterRequest::EnterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.entrances.EnterRequest)
}
EnterRequest::EnterRequest(const EnterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.entrances.EnterRequest)
}

void EnterRequest::SharedCtor() {
  id_ = 0u;
}

EnterRequest::~EnterRequest() {
  // @@protoc_insertion_point(destructor:mruv.entrances.EnterRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EnterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnterRequest::ArenaDtor(void* object) {
  EnterRequest* _this = reinterpret_cast< EnterRequest* >(object);
  (void)_this;
}
void EnterRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnterRequest& EnterRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnterRequest_entrances_2fentrances_2eproto.base);
  return *internal_default_instance();
}


void EnterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.entrances.EnterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnterRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnterRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.entrances.EnterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.entrances.EnterRequest)
  return target;
}

size_t EnterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.entrances.EnterRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnterRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.entrances.EnterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EnterRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnterRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.entrances.EnterRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.entrances.EnterRequest)
    MergeFrom(*source);
  }
}

void EnterRequest::MergeFrom(const EnterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.entrances.EnterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void EnterRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.entrances.EnterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterRequest::CopyFrom(const EnterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.entrances.EnterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterRequest::IsInitialized() const {
  return true;
}

void EnterRequest::InternalSwap(EnterRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnterRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnterResponse::InitAsDefaultInstance() {
}
class EnterResponse::_Internal {
 public:
};

EnterResponse::EnterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.entrances.EnterResponse)
}
EnterResponse::EnterResponse(const EnterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.entrances.EnterResponse)
}

void EnterResponse::SharedCtor() {
}

EnterResponse::~EnterResponse() {
  // @@protoc_insertion_point(destructor:mruv.entrances.EnterResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EnterResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnterResponse::ArenaDtor(void* object) {
  EnterResponse* _this = reinterpret_cast< EnterResponse* >(object);
  (void)_this;
}
void EnterResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnterResponse& EnterResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnterResponse_entrances_2fentrances_2eproto.base);
  return *internal_default_instance();
}


void EnterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.entrances.EnterResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnterResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnterResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.entrances.EnterResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.entrances.EnterResponse)
  return target;
}

size_t EnterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.entrances.EnterResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnterResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.entrances.EnterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EnterResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnterResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.entrances.EnterResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.entrances.EnterResponse)
    MergeFrom(*source);
  }
}

void EnterResponse::MergeFrom(const EnterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.entrances.EnterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EnterResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.entrances.EnterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterResponse::CopyFrom(const EnterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.entrances.EnterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterResponse::IsInitialized() const {
  return true;
}

void EnterResponse::InternalSwap(EnterResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnterResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExitRequest::InitAsDefaultInstance() {
}
class ExitRequest::_Internal {
 public:
};

ExitRequest::ExitRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.entrances.ExitRequest)
}
ExitRequest::ExitRequest(const ExitRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.entrances.ExitRequest)
}

void ExitRequest::SharedCtor() {
  id_ = 0u;
}

ExitRequest::~ExitRequest() {
  // @@protoc_insertion_point(destructor:mruv.entrances.ExitRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExitRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ExitRequest::ArenaDtor(void* object) {
  ExitRequest* _this = reinterpret_cast< ExitRequest* >(object);
  (void)_this;
}
void ExitRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExitRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExitRequest& ExitRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExitRequest_entrances_2fentrances_2eproto.base);
  return *internal_default_instance();
}


void ExitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.entrances.ExitRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExitRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExitRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.entrances.ExitRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.entrances.ExitRequest)
  return target;
}

size_t ExitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.entrances.ExitRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExitRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.entrances.ExitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ExitRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExitRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.entrances.ExitRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.entrances.ExitRequest)
    MergeFrom(*source);
  }
}

void ExitRequest::MergeFrom(const ExitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.entrances.ExitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void ExitRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.entrances.ExitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExitRequest::CopyFrom(const ExitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.entrances.ExitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExitRequest::IsInitialized() const {
  return true;
}

void ExitRequest::InternalSwap(ExitRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExitRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExitResponse::InitAsDefaultInstance() {
}
class ExitResponse::_Internal {
 public:
};

ExitResponse::ExitResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.entrances.ExitResponse)
}
ExitResponse::ExitResponse(const ExitResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.entrances.ExitResponse)
}

void ExitResponse::SharedCtor() {
}

ExitResponse::~ExitResponse() {
  // @@protoc_insertion_point(destructor:mruv.entrances.ExitResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExitResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ExitResponse::ArenaDtor(void* object) {
  ExitResponse* _this = reinterpret_cast< ExitResponse* >(object);
  (void)_this;
}
void ExitResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExitResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExitResponse& ExitResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExitResponse_entrances_2fentrances_2eproto.base);
  return *internal_default_instance();
}


void ExitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.entrances.ExitResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExitResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExitResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.entrances.ExitResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.entrances.ExitResponse)
  return target;
}

size_t ExitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.entrances.ExitResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExitResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.entrances.ExitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ExitResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExitResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.entrances.ExitResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.entrances.ExitResponse)
    MergeFrom(*source);
  }
}

void ExitResponse::MergeFrom(const ExitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.entrances.ExitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ExitResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.entrances.ExitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExitResponse::CopyFrom(const ExitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.entrances.ExitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExitResponse::IsInitialized() const {
  return true;
}

void ExitResponse::InternalSwap(ExitResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExitResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FetchAllEntrancesRequest::InitAsDefaultInstance() {
}
class FetchAllEntrancesRequest::_Internal {
 public:
};

FetchAllEntrancesRequest::FetchAllEntrancesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.entrances.FetchAllEntrancesRequest)
}
FetchAllEntrancesRequest::FetchAllEntrancesRequest(const FetchAllEntrancesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chunk_size_ = from.chunk_size_;
  // @@protoc_insertion_point(copy_constructor:mruv.entrances.FetchAllEntrancesRequest)
}

void FetchAllEntrancesRequest::SharedCtor() {
  chunk_size_ = 0u;
}

FetchAllEntrancesRequest::~FetchAllEntrancesRequest() {
  // @@protoc_insertion_point(destructor:mruv.entrances.FetchAllEntrancesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FetchAllEntrancesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FetchAllEntrancesRequest::ArenaDtor(void* object) {
  FetchAllEntrancesRequest* _this = reinterpret_cast< FetchAllEntrancesRequest* >(object);
  (void)_this;
}
void FetchAllEntrancesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchAllEntrancesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FetchAllEntrancesRequest& FetchAllEntrancesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FetchAllEntrancesRequest_entrances_2fentrances_2eproto.base);
  return *internal_default_instance();
}


void FetchAllEntrancesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.entrances.FetchAllEntrancesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chunk_size_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchAllEntrancesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 chunk_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chunk_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchAllEntrancesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.entrances.FetchAllEntrancesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 chunk_size = 1;
  if (this->chunk_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_chunk_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.entrances.FetchAllEntrancesRequest)
  return target;
}

size_t FetchAllEntrancesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.entrances.FetchAllEntrancesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 chunk_size = 1;
  if (this->chunk_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chunk_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchAllEntrancesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.entrances.FetchAllEntrancesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchAllEntrancesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchAllEntrancesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.entrances.FetchAllEntrancesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.entrances.FetchAllEntrancesRequest)
    MergeFrom(*source);
  }
}

void FetchAllEntrancesRequest::MergeFrom(const FetchAllEntrancesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.entrances.FetchAllEntrancesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chunk_size() != 0) {
    _internal_set_chunk_size(from._internal_chunk_size());
  }
}

void FetchAllEntrancesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.entrances.FetchAllEntrancesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchAllEntrancesRequest::CopyFrom(const FetchAllEntrancesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.entrances.FetchAllEntrancesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchAllEntrancesRequest::IsInitialized() const {
  return true;
}

void FetchAllEntrancesRequest::InternalSwap(FetchAllEntrancesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(chunk_size_, other->chunk_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchAllEntrancesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

FetchAllEntrancesResponse_EntrancesEntry_DoNotUse::FetchAllEntrancesResponse_EntrancesEntry_DoNotUse() {}
FetchAllEntrancesResponse_EntrancesEntry_DoNotUse::FetchAllEntrancesResponse_EntrancesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FetchAllEntrancesResponse_EntrancesEntry_DoNotUse::MergeFrom(const FetchAllEntrancesResponse_EntrancesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FetchAllEntrancesResponse_EntrancesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void FetchAllEntrancesResponse_EntrancesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void FetchAllEntrancesResponse::InitAsDefaultInstance() {
}
class FetchAllEntrancesResponse::_Internal {
 public:
};

FetchAllEntrancesResponse::FetchAllEntrancesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entrances_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.entrances.FetchAllEntrancesResponse)
}
FetchAllEntrancesResponse::FetchAllEntrancesResponse(const FetchAllEntrancesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  entrances_.MergeFrom(from.entrances_);
  // @@protoc_insertion_point(copy_constructor:mruv.entrances.FetchAllEntrancesResponse)
}

void FetchAllEntrancesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FetchAllEntrancesResponse_entrances_2fentrances_2eproto.base);
}

FetchAllEntrancesResponse::~FetchAllEntrancesResponse() {
  // @@protoc_insertion_point(destructor:mruv.entrances.FetchAllEntrancesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FetchAllEntrancesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FetchAllEntrancesResponse::ArenaDtor(void* object) {
  FetchAllEntrancesResponse* _this = reinterpret_cast< FetchAllEntrancesResponse* >(object);
  (void)_this;
}
void FetchAllEntrancesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchAllEntrancesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FetchAllEntrancesResponse& FetchAllEntrancesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FetchAllEntrancesResponse_entrances_2fentrances_2eproto.base);
  return *internal_default_instance();
}


void FetchAllEntrancesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.entrances.FetchAllEntrancesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entrances_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchAllEntrancesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<uint32, .mruv.entrances.Entrance> entrances = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&entrances_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchAllEntrancesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.entrances.FetchAllEntrancesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, .mruv.entrances.Entrance> entrances = 1;
  if (!this->_internal_entrances().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::mruv::entrances::Entrance >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_entrances().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_entrances().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::mruv::entrances::Entrance >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::mruv::entrances::Entrance >::const_iterator
          it = this->_internal_entrances().begin();
          it != this->_internal_entrances().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = FetchAllEntrancesResponse_EntrancesEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::mruv::entrances::Entrance >::const_iterator
          it = this->_internal_entrances().begin();
          it != this->_internal_entrances().end(); ++it) {
        target = FetchAllEntrancesResponse_EntrancesEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.entrances.FetchAllEntrancesResponse)
  return target;
}

size_t FetchAllEntrancesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.entrances.FetchAllEntrancesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .mruv.entrances.Entrance> entrances = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_entrances_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::mruv::entrances::Entrance >::const_iterator
      it = this->_internal_entrances().begin();
      it != this->_internal_entrances().end(); ++it) {
    total_size += FetchAllEntrancesResponse_EntrancesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchAllEntrancesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.entrances.FetchAllEntrancesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchAllEntrancesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchAllEntrancesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.entrances.FetchAllEntrancesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.entrances.FetchAllEntrancesResponse)
    MergeFrom(*source);
  }
}

void FetchAllEntrancesResponse::MergeFrom(const FetchAllEntrancesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.entrances.FetchAllEntrancesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entrances_.MergeFrom(from.entrances_);
}

void FetchAllEntrancesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.entrances.FetchAllEntrancesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchAllEntrancesResponse::CopyFrom(const FetchAllEntrancesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.entrances.FetchAllEntrancesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchAllEntrancesResponse::IsInitialized() const {
  return true;
}

void FetchAllEntrancesResponse::InternalSwap(FetchAllEntrancesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  entrances_.Swap(&other->entrances_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchAllEntrancesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace entrances
}  // namespace mruv
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mruv::entrances::Entrance* Arena::CreateMaybeMessage< ::mruv::entrances::Entrance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::entrances::Entrance >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::entrances::CreateEntranceRequest* Arena::CreateMaybeMessage< ::mruv::entrances::CreateEntranceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::entrances::CreateEntranceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::entrances::CreateEntranceResponse* Arena::CreateMaybeMessage< ::mruv::entrances::CreateEntranceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::entrances::CreateEntranceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::entrances::GetEntranceRequest* Arena::CreateMaybeMessage< ::mruv::entrances::GetEntranceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::entrances::GetEntranceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::entrances::GetEntranceResponse* Arena::CreateMaybeMessage< ::mruv::entrances::GetEntranceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::entrances::GetEntranceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::entrances::UpdateEntranceRequest* Arena::CreateMaybeMessage< ::mruv::entrances::UpdateEntranceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::entrances::UpdateEntranceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::entrances::UpdateEntranceResponse* Arena::CreateMaybeMessage< ::mruv::entrances::UpdateEntranceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::entrances::UpdateEntranceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::entrances::DeleteEntranceRequest* Arena::CreateMaybeMessage< ::mruv::entrances::DeleteEntranceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::entrances::DeleteEntranceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::entrances::DeleteEntranceResponse* Arena::CreateMaybeMessage< ::mruv::entrances::DeleteEntranceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::entrances::DeleteEntranceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::entrances::LockRequest* Arena::CreateMaybeMessage< ::mruv::entrances::LockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::entrances::LockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::entrances::LockResponse* Arena::CreateMaybeMessage< ::mruv::entrances::LockResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::entrances::LockResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::entrances::UnlockRequest* Arena::CreateMaybeMessage< ::mruv::entrances::UnlockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::entrances::UnlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::entrances::UnlockResponse* Arena::CreateMaybeMessage< ::mruv::entrances::UnlockResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::entrances::UnlockResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::entrances::FindNearestEntranceRequest* Arena::CreateMaybeMessage< ::mruv::entrances::FindNearestEntranceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::entrances::FindNearestEntranceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::entrances::FindNearestEntranceResponse* Arena::CreateMaybeMessage< ::mruv::entrances::FindNearestEntranceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::entrances::FindNearestEntranceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::entrances::EnterRequest* Arena::CreateMaybeMessage< ::mruv::entrances::EnterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::entrances::EnterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::entrances::EnterResponse* Arena::CreateMaybeMessage< ::mruv::entrances::EnterResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::entrances::EnterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::entrances::ExitRequest* Arena::CreateMaybeMessage< ::mruv::entrances::ExitRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::entrances::ExitRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::entrances::ExitResponse* Arena::CreateMaybeMessage< ::mruv::entrances::ExitResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::entrances::ExitResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::entrances::FetchAllEntrancesRequest* Arena::CreateMaybeMessage< ::mruv::entrances::FetchAllEntrancesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::entrances::FetchAllEntrancesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::entrances::FetchAllEntrancesResponse_EntrancesEntry_DoNotUse* Arena::CreateMaybeMessage< ::mruv::entrances::FetchAllEntrancesResponse_EntrancesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::entrances::FetchAllEntrancesResponse_EntrancesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::entrances::FetchAllEntrancesResponse* Arena::CreateMaybeMessage< ::mruv::entrances::FetchAllEntrancesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::entrances::FetchAllEntrancesResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
