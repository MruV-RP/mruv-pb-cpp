// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: entrances/entrances.proto

#include "entrances/entrances.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_spots_2fspots_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Spot_spots_2fspots_2eproto;
namespace mruv {
namespace entrances {
class EntranceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Entrance> _instance;
} _Entrance_default_instance_;
class CreateEntranceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateEntranceRequest> _instance;
} _CreateEntranceRequest_default_instance_;
class CreateEntranceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateEntranceResponse> _instance;
} _CreateEntranceResponse_default_instance_;
class GetEntranceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetEntranceRequest> _instance;
} _GetEntranceRequest_default_instance_;
class GetEntranceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetEntranceResponse> _instance;
} _GetEntranceResponse_default_instance_;
class UpdateEntranceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateEntranceRequest> _instance;
} _UpdateEntranceRequest_default_instance_;
class UpdateEntranceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateEntranceResponse> _instance;
} _UpdateEntranceResponse_default_instance_;
class DeleteEntranceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteEntranceRequest> _instance;
} _DeleteEntranceRequest_default_instance_;
class DeleteEntranceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteEntranceResponse> _instance;
} _DeleteEntranceResponse_default_instance_;
class LockRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LockRequest> _instance;
} _LockRequest_default_instance_;
class LockResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LockResponse> _instance;
} _LockResponse_default_instance_;
class UnlockRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnlockRequest> _instance;
} _UnlockRequest_default_instance_;
class UnlockResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnlockResponse> _instance;
} _UnlockResponse_default_instance_;
class FindNearestEntranceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FindNearestEntranceRequest> _instance;
} _FindNearestEntranceRequest_default_instance_;
class FindNearestEntranceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FindNearestEntranceResponse> _instance;
} _FindNearestEntranceResponse_default_instance_;
class EnterRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnterRequest> _instance;
} _EnterRequest_default_instance_;
class EnterResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnterResponse> _instance;
} _EnterResponse_default_instance_;
}  // namespace entrances
}  // namespace mruv
static void InitDefaultsscc_info_CreateEntranceRequest_entrances_2fentrances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::entrances::_CreateEntranceRequest_default_instance_;
    new (ptr) ::mruv::entrances::CreateEntranceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::entrances::CreateEntranceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateEntranceRequest_entrances_2fentrances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateEntranceRequest_entrances_2fentrances_2eproto}, {
      &scc_info_Spot_spots_2fspots_2eproto.base,}};

static void InitDefaultsscc_info_CreateEntranceResponse_entrances_2fentrances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::entrances::_CreateEntranceResponse_default_instance_;
    new (ptr) ::mruv::entrances::CreateEntranceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::entrances::CreateEntranceResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateEntranceResponse_entrances_2fentrances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateEntranceResponse_entrances_2fentrances_2eproto}, {}};

static void InitDefaultsscc_info_DeleteEntranceRequest_entrances_2fentrances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::entrances::_DeleteEntranceRequest_default_instance_;
    new (ptr) ::mruv::entrances::DeleteEntranceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::entrances::DeleteEntranceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteEntranceRequest_entrances_2fentrances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteEntranceRequest_entrances_2fentrances_2eproto}, {}};

static void InitDefaultsscc_info_DeleteEntranceResponse_entrances_2fentrances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::entrances::_DeleteEntranceResponse_default_instance_;
    new (ptr) ::mruv::entrances::DeleteEntranceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::entrances::DeleteEntranceResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteEntranceResponse_entrances_2fentrances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteEntranceResponse_entrances_2fentrances_2eproto}, {}};

static void InitDefaultsscc_info_EnterRequest_entrances_2fentrances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::entrances::_EnterRequest_default_instance_;
    new (ptr) ::mruv::entrances::EnterRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::entrances::EnterRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnterRequest_entrances_2fentrances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnterRequest_entrances_2fentrances_2eproto}, {}};

static void InitDefaultsscc_info_EnterResponse_entrances_2fentrances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::entrances::_EnterResponse_default_instance_;
    new (ptr) ::mruv::entrances::EnterResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::entrances::EnterResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnterResponse_entrances_2fentrances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnterResponse_entrances_2fentrances_2eproto}, {}};

static void InitDefaultsscc_info_Entrance_entrances_2fentrances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::entrances::_Entrance_default_instance_;
    new (ptr) ::mruv::entrances::Entrance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::entrances::Entrance::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Entrance_entrances_2fentrances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Entrance_entrances_2fentrances_2eproto}, {
      &scc_info_Spot_spots_2fspots_2eproto.base,}};

static void InitDefaultsscc_info_FindNearestEntranceRequest_entrances_2fentrances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::entrances::_FindNearestEntranceRequest_default_instance_;
    new (ptr) ::mruv::entrances::FindNearestEntranceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::entrances::FindNearestEntranceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FindNearestEntranceRequest_entrances_2fentrances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FindNearestEntranceRequest_entrances_2fentrances_2eproto}, {}};

static void InitDefaultsscc_info_FindNearestEntranceResponse_entrances_2fentrances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::entrances::_FindNearestEntranceResponse_default_instance_;
    new (ptr) ::mruv::entrances::FindNearestEntranceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::entrances::FindNearestEntranceResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FindNearestEntranceResponse_entrances_2fentrances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FindNearestEntranceResponse_entrances_2fentrances_2eproto}, {}};

static void InitDefaultsscc_info_GetEntranceRequest_entrances_2fentrances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::entrances::_GetEntranceRequest_default_instance_;
    new (ptr) ::mruv::entrances::GetEntranceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::entrances::GetEntranceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetEntranceRequest_entrances_2fentrances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetEntranceRequest_entrances_2fentrances_2eproto}, {}};

static void InitDefaultsscc_info_GetEntranceResponse_entrances_2fentrances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::entrances::_GetEntranceResponse_default_instance_;
    new (ptr) ::mruv::entrances::GetEntranceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::entrances::GetEntranceResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetEntranceResponse_entrances_2fentrances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetEntranceResponse_entrances_2fentrances_2eproto}, {
      &scc_info_Spot_spots_2fspots_2eproto.base,}};

static void InitDefaultsscc_info_LockRequest_entrances_2fentrances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::entrances::_LockRequest_default_instance_;
    new (ptr) ::mruv::entrances::LockRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::entrances::LockRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LockRequest_entrances_2fentrances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LockRequest_entrances_2fentrances_2eproto}, {}};

static void InitDefaultsscc_info_LockResponse_entrances_2fentrances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::entrances::_LockResponse_default_instance_;
    new (ptr) ::mruv::entrances::LockResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::entrances::LockResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LockResponse_entrances_2fentrances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LockResponse_entrances_2fentrances_2eproto}, {}};

static void InitDefaultsscc_info_UnlockRequest_entrances_2fentrances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::entrances::_UnlockRequest_default_instance_;
    new (ptr) ::mruv::entrances::UnlockRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::entrances::UnlockRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnlockRequest_entrances_2fentrances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnlockRequest_entrances_2fentrances_2eproto}, {}};

static void InitDefaultsscc_info_UnlockResponse_entrances_2fentrances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::entrances::_UnlockResponse_default_instance_;
    new (ptr) ::mruv::entrances::UnlockResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::entrances::UnlockResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnlockResponse_entrances_2fentrances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnlockResponse_entrances_2fentrances_2eproto}, {}};

static void InitDefaultsscc_info_UpdateEntranceRequest_entrances_2fentrances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::entrances::_UpdateEntranceRequest_default_instance_;
    new (ptr) ::mruv::entrances::UpdateEntranceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::entrances::UpdateEntranceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateEntranceRequest_entrances_2fentrances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateEntranceRequest_entrances_2fentrances_2eproto}, {}};

static void InitDefaultsscc_info_UpdateEntranceResponse_entrances_2fentrances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::entrances::_UpdateEntranceResponse_default_instance_;
    new (ptr) ::mruv::entrances::UpdateEntranceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::entrances::UpdateEntranceResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateEntranceResponse_entrances_2fentrances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateEntranceResponse_entrances_2fentrances_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_entrances_2fentrances_2eproto[17];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_entrances_2fentrances_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_entrances_2fentrances_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_entrances_2fentrances_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::Entrance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::Entrance, name_),
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::Entrance, out_),
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::Entrance, in_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::CreateEntranceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::CreateEntranceRequest, name_),
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::CreateEntranceRequest, out_),
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::CreateEntranceRequest, in_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::CreateEntranceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::CreateEntranceResponse, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::GetEntranceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::GetEntranceRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::GetEntranceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::GetEntranceResponse, name_),
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::GetEntranceResponse, in_spot_),
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::GetEntranceResponse, out_spot_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::UpdateEntranceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::UpdateEntranceRequest, id_),
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::UpdateEntranceRequest, in_spot_id_),
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::UpdateEntranceRequest, out_spot_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::UpdateEntranceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::DeleteEntranceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::DeleteEntranceRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::DeleteEntranceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::LockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::LockRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::LockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::UnlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::UnlockRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::UnlockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::FindNearestEntranceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::FindNearestEntranceRequest, x_),
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::FindNearestEntranceRequest, y_),
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::FindNearestEntranceRequest, z_),
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::FindNearestEntranceRequest, max_distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::FindNearestEntranceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::FindNearestEntranceResponse, id_),
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::FindNearestEntranceResponse, distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::EnterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::EnterRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::entrances::EnterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mruv::entrances::Entrance)},
  { 8, -1, sizeof(::mruv::entrances::CreateEntranceRequest)},
  { 16, -1, sizeof(::mruv::entrances::CreateEntranceResponse)},
  { 22, -1, sizeof(::mruv::entrances::GetEntranceRequest)},
  { 28, -1, sizeof(::mruv::entrances::GetEntranceResponse)},
  { 36, -1, sizeof(::mruv::entrances::UpdateEntranceRequest)},
  { 44, -1, sizeof(::mruv::entrances::UpdateEntranceResponse)},
  { 49, -1, sizeof(::mruv::entrances::DeleteEntranceRequest)},
  { 55, -1, sizeof(::mruv::entrances::DeleteEntranceResponse)},
  { 60, -1, sizeof(::mruv::entrances::LockRequest)},
  { 66, -1, sizeof(::mruv::entrances::LockResponse)},
  { 71, -1, sizeof(::mruv::entrances::UnlockRequest)},
  { 77, -1, sizeof(::mruv::entrances::UnlockResponse)},
  { 82, -1, sizeof(::mruv::entrances::FindNearestEntranceRequest)},
  { 91, -1, sizeof(::mruv::entrances::FindNearestEntranceResponse)},
  { 98, -1, sizeof(::mruv::entrances::EnterRequest)},
  { 104, -1, sizeof(::mruv::entrances::EnterResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::entrances::_Entrance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::entrances::_CreateEntranceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::entrances::_CreateEntranceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::entrances::_GetEntranceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::entrances::_GetEntranceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::entrances::_UpdateEntranceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::entrances::_UpdateEntranceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::entrances::_DeleteEntranceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::entrances::_DeleteEntranceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::entrances::_LockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::entrances::_LockResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::entrances::_UnlockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::entrances::_UnlockResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::entrances::_FindNearestEntranceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::entrances::_FindNearestEntranceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::entrances::_EnterRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::entrances::_EnterResponse_default_instance_),
};

const char descriptor_table_protodef_entrances_2fentrances_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031entrances/entrances.proto\022\016mruv.entran"
  "ces\032\034google/api/annotations.proto\032\021spots"
  "/spots.proto\"U\n\010Entrance\022\014\n\004name\030\001 \001(\t\022\035"
  "\n\003out\030\002 \001(\0132\020.mruv.spots.Spot\022\034\n\002in\030\003 \001("
  "\0132\020.mruv.spots.Spot\"b\n\025CreateEntranceReq"
  "uest\022\014\n\004name\030\001 \001(\t\022\035\n\003out\030\002 \001(\0132\020.mruv.s"
  "pots.Spot\022\034\n\002in\030\003 \001(\0132\020.mruv.spots.Spot\""
  "$\n\026CreateEntranceResponse\022\n\n\002id\030\001 \001(\r\" \n"
  "\022GetEntranceRequest\022\n\n\002id\030\001 \001(\r\"j\n\023GetEn"
  "tranceResponse\022\014\n\004name\030\001 \001(\t\022!\n\007in_spot\030"
  "\002 \001(\0132\020.mruv.spots.Spot\022\"\n\010out_spot\030\003 \001("
  "\0132\020.mruv.spots.Spot\"L\n\025UpdateEntranceReq"
  "uest\022\n\n\002id\030\001 \001(\r\022\022\n\nin_spot_id\030\002 \001(\r\022\023\n\013"
  "out_spot_id\030\003 \001(\r\"\030\n\026UpdateEntranceRespo"
  "nse\"#\n\025DeleteEntranceRequest\022\n\n\002id\030\001 \001(\r"
  "\"\030\n\026DeleteEntranceResponse\"\031\n\013LockReques"
  "t\022\n\n\002id\030\001 \001(\r\"\016\n\014LockResponse\"\033\n\rUnlockR"
  "equest\022\n\n\002id\030\001 \001(\r\"\020\n\016UnlockResponse\"S\n\032"
  "FindNearestEntranceRequest\022\t\n\001x\030\001 \001(\002\022\t\n"
  "\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\024\n\014max_distance\030\004 \001("
  "\002\";\n\033FindNearestEntranceResponse\022\n\n\002id\030\001"
  " \001(\r\022\020\n\010distance\030\002 \001(\002\"\032\n\014EnterRequest\022\n"
  "\n\002id\030\001 \001(\r\"\017\n\rEnterResponse2\304\007\n\024MruVEntr"
  "ancesService\022v\n\016CreateEntrance\022%.mruv.en"
  "trances.CreateEntranceRequest\032&.mruv.ent"
  "rances.CreateEntranceResponse\"\025\202\323\344\223\002\017\"\r/"
  "v1/entrances\022r\n\013GetEntrance\022\".mruv.entra"
  "nces.GetEntranceRequest\032#.mruv.entrances"
  ".GetEntranceResponse\"\032\202\323\344\223\002\024\022\022/v1/entran"
  "ces/{id}\022{\n\016UpdateEntrance\022%.mruv.entran"
  "ces.UpdateEntranceRequest\032&.mruv.entranc"
  "es.UpdateEntranceResponse\"\032\202\323\344\223\002\0242\022/v1/e"
  "ntrances/{id}\022{\n\016DeleteEntrance\022%.mruv.e"
  "ntrances.DeleteEntranceRequest\032&.mruv.en"
  "trances.DeleteEntranceResponse\"\032\202\323\344\223\002\024*\022"
  "/v1/entrances/{id}\022b\n\004Lock\022\033.mruv.entran"
  "ces.LockRequest\032\034.mruv.entrances.LockRes"
  "ponse\"\037\202\323\344\223\002\031\"\027/v1/entrances/{id}/lock\022j"
  "\n\006Unlock\022\035.mruv.entrances.UnlockRequest\032"
  "\036.mruv.entrances.UnlockResponse\"!\202\323\344\223\002\033\""
  "\031/v1/entrances/{id}/unlock\022\215\001\n\023FindNeare"
  "stEntrance\022*.mruv.entrances.FindNearestE"
  "ntranceRequest\032+.mruv.entrances.FindNear"
  "estEntranceResponse\"\035\202\323\344\223\002\027\022\025/v1/entranc"
  "es/nearest\022f\n\005Enter\022\034.mruv.entrances.Ent"
  "erRequest\032\035.mruv.entrances.EnterResponse"
  "\" \202\323\344\223\002\032\"\030/v1/entrances/{id}/enterB)Z\'gi"
  "thub.com/MruV-RP/mruv-pb-go/entrancesb\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_entrances_2fentrances_2eproto_deps[2] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_spots_2fspots_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_entrances_2fentrances_2eproto_sccs[17] = {
  &scc_info_CreateEntranceRequest_entrances_2fentrances_2eproto.base,
  &scc_info_CreateEntranceResponse_entrances_2fentrances_2eproto.base,
  &scc_info_DeleteEntranceRequest_entrances_2fentrances_2eproto.base,
  &scc_info_DeleteEntranceResponse_entrances_2fentrances_2eproto.base,
  &scc_info_EnterRequest_entrances_2fentrances_2eproto.base,
  &scc_info_EnterResponse_entrances_2fentrances_2eproto.base,
  &scc_info_Entrance_entrances_2fentrances_2eproto.base,
  &scc_info_FindNearestEntranceRequest_entrances_2fentrances_2eproto.base,
  &scc_info_FindNearestEntranceResponse_entrances_2fentrances_2eproto.base,
  &scc_info_GetEntranceRequest_entrances_2fentrances_2eproto.base,
  &scc_info_GetEntranceResponse_entrances_2fentrances_2eproto.base,
  &scc_info_LockRequest_entrances_2fentrances_2eproto.base,
  &scc_info_LockResponse_entrances_2fentrances_2eproto.base,
  &scc_info_UnlockRequest_entrances_2fentrances_2eproto.base,
  &scc_info_UnlockResponse_entrances_2fentrances_2eproto.base,
  &scc_info_UpdateEntranceRequest_entrances_2fentrances_2eproto.base,
  &scc_info_UpdateEntranceResponse_entrances_2fentrances_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_entrances_2fentrances_2eproto_once;
static bool descriptor_table_entrances_2fentrances_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_entrances_2fentrances_2eproto = {
  &descriptor_table_entrances_2fentrances_2eproto_initialized, descriptor_table_protodef_entrances_2fentrances_2eproto, "entrances/entrances.proto", 1925,
  &descriptor_table_entrances_2fentrances_2eproto_once, descriptor_table_entrances_2fentrances_2eproto_sccs, descriptor_table_entrances_2fentrances_2eproto_deps, 17, 2,
  schemas, file_default_instances, TableStruct_entrances_2fentrances_2eproto::offsets,
  file_level_metadata_entrances_2fentrances_2eproto, 17, file_level_enum_descriptors_entrances_2fentrances_2eproto, file_level_service_descriptors_entrances_2fentrances_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_entrances_2fentrances_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_entrances_2fentrances_2eproto), true);
namespace mruv {
namespace entrances {

// ===================================================================

void Entrance::InitAsDefaultInstance() {
  ::mruv::entrances::_Entrance_default_instance_._instance.get_mutable()->out_ = const_cast< ::mruv::spots::Spot*>(
      ::mruv::spots::Spot::internal_default_instance());
  ::mruv::entrances::_Entrance_default_instance_._instance.get_mutable()->in_ = const_cast< ::mruv::spots::Spot*>(
      ::mruv::spots::Spot::internal_default_instance());
}
class Entrance::_Internal {
 public:
  static const ::mruv::spots::Spot& out(const Entrance* msg);
  static const ::mruv::spots::Spot& in(const Entrance* msg);
};

const ::mruv::spots::Spot&
Entrance::_Internal::out(const Entrance* msg) {
  return *msg->out_;
}
const ::mruv::spots::Spot&
Entrance::_Internal::in(const Entrance* msg) {
  return *msg->in_;
}
void Entrance::clear_out() {
  if (GetArenaNoVirtual() == nullptr && out_ != nullptr) {
    delete out_;
  }
  out_ = nullptr;
}
void Entrance::clear_in() {
  if (GetArenaNoVirtual() == nullptr && in_ != nullptr) {
    delete in_;
  }
  in_ = nullptr;
}
Entrance::Entrance()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.entrances.Entrance)
}
Entrance::Entrance(const Entrance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_out()) {
    out_ = new ::mruv::spots::Spot(*from.out_);
  } else {
    out_ = nullptr;
  }
  if (from._internal_has_in()) {
    in_ = new ::mruv::spots::Spot(*from.in_);
  } else {
    in_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mruv.entrances.Entrance)
}

void Entrance::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Entrance_entrances_2fentrances_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&out_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&in_) -
      reinterpret_cast<char*>(&out_)) + sizeof(in_));
}

Entrance::~Entrance() {
  // @@protoc_insertion_point(destructor:mruv.entrances.Entrance)
  SharedDtor();
}

void Entrance::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete out_;
  if (this != internal_default_instance()) delete in_;
}

void Entrance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Entrance& Entrance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Entrance_entrances_2fentrances_2eproto.base);
  return *internal_default_instance();
}


void Entrance::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.entrances.Entrance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && out_ != nullptr) {
    delete out_;
  }
  out_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && in_ != nullptr) {
    delete in_;
  }
  in_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Entrance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.entrances.Entrance.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mruv.spots.Spot out = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_out(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mruv.spots.Spot in = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_in(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Entrance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.entrances.Entrance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.entrances.Entrance.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .mruv.spots.Spot out = 2;
  if (this->has_out()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::out(this), target, stream);
  }

  // .mruv.spots.Spot in = 3;
  if (this->has_in()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::in(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.entrances.Entrance)
  return target;
}

size_t Entrance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.entrances.Entrance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .mruv.spots.Spot out = 2;
  if (this->has_out()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *out_);
  }

  // .mruv.spots.Spot in = 3;
  if (this->has_in()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *in_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Entrance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.entrances.Entrance)
  GOOGLE_DCHECK_NE(&from, this);
  const Entrance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Entrance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.entrances.Entrance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.entrances.Entrance)
    MergeFrom(*source);
  }
}

void Entrance::MergeFrom(const Entrance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.entrances.Entrance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_out()) {
    _internal_mutable_out()->::mruv::spots::Spot::MergeFrom(from._internal_out());
  }
  if (from.has_in()) {
    _internal_mutable_in()->::mruv::spots::Spot::MergeFrom(from._internal_in());
  }
}

void Entrance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.entrances.Entrance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entrance::CopyFrom(const Entrance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.entrances.Entrance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entrance::IsInitialized() const {
  return true;
}

void Entrance::InternalSwap(Entrance* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(out_, other->out_);
  swap(in_, other->in_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Entrance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateEntranceRequest::InitAsDefaultInstance() {
  ::mruv::entrances::_CreateEntranceRequest_default_instance_._instance.get_mutable()->out_ = const_cast< ::mruv::spots::Spot*>(
      ::mruv::spots::Spot::internal_default_instance());
  ::mruv::entrances::_CreateEntranceRequest_default_instance_._instance.get_mutable()->in_ = const_cast< ::mruv::spots::Spot*>(
      ::mruv::spots::Spot::internal_default_instance());
}
class CreateEntranceRequest::_Internal {
 public:
  static const ::mruv::spots::Spot& out(const CreateEntranceRequest* msg);
  static const ::mruv::spots::Spot& in(const CreateEntranceRequest* msg);
};

const ::mruv::spots::Spot&
CreateEntranceRequest::_Internal::out(const CreateEntranceRequest* msg) {
  return *msg->out_;
}
const ::mruv::spots::Spot&
CreateEntranceRequest::_Internal::in(const CreateEntranceRequest* msg) {
  return *msg->in_;
}
void CreateEntranceRequest::clear_out() {
  if (GetArenaNoVirtual() == nullptr && out_ != nullptr) {
    delete out_;
  }
  out_ = nullptr;
}
void CreateEntranceRequest::clear_in() {
  if (GetArenaNoVirtual() == nullptr && in_ != nullptr) {
    delete in_;
  }
  in_ = nullptr;
}
CreateEntranceRequest::CreateEntranceRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.entrances.CreateEntranceRequest)
}
CreateEntranceRequest::CreateEntranceRequest(const CreateEntranceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_out()) {
    out_ = new ::mruv::spots::Spot(*from.out_);
  } else {
    out_ = nullptr;
  }
  if (from._internal_has_in()) {
    in_ = new ::mruv::spots::Spot(*from.in_);
  } else {
    in_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mruv.entrances.CreateEntranceRequest)
}

void CreateEntranceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateEntranceRequest_entrances_2fentrances_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&out_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&in_) -
      reinterpret_cast<char*>(&out_)) + sizeof(in_));
}

CreateEntranceRequest::~CreateEntranceRequest() {
  // @@protoc_insertion_point(destructor:mruv.entrances.CreateEntranceRequest)
  SharedDtor();
}

void CreateEntranceRequest::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete out_;
  if (this != internal_default_instance()) delete in_;
}

void CreateEntranceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateEntranceRequest& CreateEntranceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateEntranceRequest_entrances_2fentrances_2eproto.base);
  return *internal_default_instance();
}


void CreateEntranceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.entrances.CreateEntranceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && out_ != nullptr) {
    delete out_;
  }
  out_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && in_ != nullptr) {
    delete in_;
  }
  in_ = nullptr;
  _internal_metadata_.Clear();
}

const char* CreateEntranceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.entrances.CreateEntranceRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mruv.spots.Spot out = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_out(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mruv.spots.Spot in = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_in(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateEntranceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.entrances.CreateEntranceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.entrances.CreateEntranceRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .mruv.spots.Spot out = 2;
  if (this->has_out()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::out(this), target, stream);
  }

  // .mruv.spots.Spot in = 3;
  if (this->has_in()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::in(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.entrances.CreateEntranceRequest)
  return target;
}

size_t CreateEntranceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.entrances.CreateEntranceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .mruv.spots.Spot out = 2;
  if (this->has_out()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *out_);
  }

  // .mruv.spots.Spot in = 3;
  if (this->has_in()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *in_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateEntranceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.entrances.CreateEntranceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateEntranceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateEntranceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.entrances.CreateEntranceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.entrances.CreateEntranceRequest)
    MergeFrom(*source);
  }
}

void CreateEntranceRequest::MergeFrom(const CreateEntranceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.entrances.CreateEntranceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_out()) {
    _internal_mutable_out()->::mruv::spots::Spot::MergeFrom(from._internal_out());
  }
  if (from.has_in()) {
    _internal_mutable_in()->::mruv::spots::Spot::MergeFrom(from._internal_in());
  }
}

void CreateEntranceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.entrances.CreateEntranceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateEntranceRequest::CopyFrom(const CreateEntranceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.entrances.CreateEntranceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateEntranceRequest::IsInitialized() const {
  return true;
}

void CreateEntranceRequest::InternalSwap(CreateEntranceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(out_, other->out_);
  swap(in_, other->in_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateEntranceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateEntranceResponse::InitAsDefaultInstance() {
}
class CreateEntranceResponse::_Internal {
 public:
};

CreateEntranceResponse::CreateEntranceResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.entrances.CreateEntranceResponse)
}
CreateEntranceResponse::CreateEntranceResponse(const CreateEntranceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.entrances.CreateEntranceResponse)
}

void CreateEntranceResponse::SharedCtor() {
  id_ = 0u;
}

CreateEntranceResponse::~CreateEntranceResponse() {
  // @@protoc_insertion_point(destructor:mruv.entrances.CreateEntranceResponse)
  SharedDtor();
}

void CreateEntranceResponse::SharedDtor() {
}

void CreateEntranceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateEntranceResponse& CreateEntranceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateEntranceResponse_entrances_2fentrances_2eproto.base);
  return *internal_default_instance();
}


void CreateEntranceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.entrances.CreateEntranceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear();
}

const char* CreateEntranceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateEntranceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.entrances.CreateEntranceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.entrances.CreateEntranceResponse)
  return target;
}

size_t CreateEntranceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.entrances.CreateEntranceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateEntranceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.entrances.CreateEntranceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateEntranceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateEntranceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.entrances.CreateEntranceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.entrances.CreateEntranceResponse)
    MergeFrom(*source);
  }
}

void CreateEntranceResponse::MergeFrom(const CreateEntranceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.entrances.CreateEntranceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void CreateEntranceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.entrances.CreateEntranceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateEntranceResponse::CopyFrom(const CreateEntranceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.entrances.CreateEntranceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateEntranceResponse::IsInitialized() const {
  return true;
}

void CreateEntranceResponse::InternalSwap(CreateEntranceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateEntranceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetEntranceRequest::InitAsDefaultInstance() {
}
class GetEntranceRequest::_Internal {
 public:
};

GetEntranceRequest::GetEntranceRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.entrances.GetEntranceRequest)
}
GetEntranceRequest::GetEntranceRequest(const GetEntranceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.entrances.GetEntranceRequest)
}

void GetEntranceRequest::SharedCtor() {
  id_ = 0u;
}

GetEntranceRequest::~GetEntranceRequest() {
  // @@protoc_insertion_point(destructor:mruv.entrances.GetEntranceRequest)
  SharedDtor();
}

void GetEntranceRequest::SharedDtor() {
}

void GetEntranceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetEntranceRequest& GetEntranceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetEntranceRequest_entrances_2fentrances_2eproto.base);
  return *internal_default_instance();
}


void GetEntranceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.entrances.GetEntranceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear();
}

const char* GetEntranceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetEntranceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.entrances.GetEntranceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.entrances.GetEntranceRequest)
  return target;
}

size_t GetEntranceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.entrances.GetEntranceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetEntranceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.entrances.GetEntranceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetEntranceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetEntranceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.entrances.GetEntranceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.entrances.GetEntranceRequest)
    MergeFrom(*source);
  }
}

void GetEntranceRequest::MergeFrom(const GetEntranceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.entrances.GetEntranceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetEntranceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.entrances.GetEntranceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEntranceRequest::CopyFrom(const GetEntranceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.entrances.GetEntranceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEntranceRequest::IsInitialized() const {
  return true;
}

void GetEntranceRequest::InternalSwap(GetEntranceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEntranceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetEntranceResponse::InitAsDefaultInstance() {
  ::mruv::entrances::_GetEntranceResponse_default_instance_._instance.get_mutable()->in_spot_ = const_cast< ::mruv::spots::Spot*>(
      ::mruv::spots::Spot::internal_default_instance());
  ::mruv::entrances::_GetEntranceResponse_default_instance_._instance.get_mutable()->out_spot_ = const_cast< ::mruv::spots::Spot*>(
      ::mruv::spots::Spot::internal_default_instance());
}
class GetEntranceResponse::_Internal {
 public:
  static const ::mruv::spots::Spot& in_spot(const GetEntranceResponse* msg);
  static const ::mruv::spots::Spot& out_spot(const GetEntranceResponse* msg);
};

const ::mruv::spots::Spot&
GetEntranceResponse::_Internal::in_spot(const GetEntranceResponse* msg) {
  return *msg->in_spot_;
}
const ::mruv::spots::Spot&
GetEntranceResponse::_Internal::out_spot(const GetEntranceResponse* msg) {
  return *msg->out_spot_;
}
void GetEntranceResponse::clear_in_spot() {
  if (GetArenaNoVirtual() == nullptr && in_spot_ != nullptr) {
    delete in_spot_;
  }
  in_spot_ = nullptr;
}
void GetEntranceResponse::clear_out_spot() {
  if (GetArenaNoVirtual() == nullptr && out_spot_ != nullptr) {
    delete out_spot_;
  }
  out_spot_ = nullptr;
}
GetEntranceResponse::GetEntranceResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.entrances.GetEntranceResponse)
}
GetEntranceResponse::GetEntranceResponse(const GetEntranceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_in_spot()) {
    in_spot_ = new ::mruv::spots::Spot(*from.in_spot_);
  } else {
    in_spot_ = nullptr;
  }
  if (from._internal_has_out_spot()) {
    out_spot_ = new ::mruv::spots::Spot(*from.out_spot_);
  } else {
    out_spot_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mruv.entrances.GetEntranceResponse)
}

void GetEntranceResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetEntranceResponse_entrances_2fentrances_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&in_spot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&out_spot_) -
      reinterpret_cast<char*>(&in_spot_)) + sizeof(out_spot_));
}

GetEntranceResponse::~GetEntranceResponse() {
  // @@protoc_insertion_point(destructor:mruv.entrances.GetEntranceResponse)
  SharedDtor();
}

void GetEntranceResponse::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete in_spot_;
  if (this != internal_default_instance()) delete out_spot_;
}

void GetEntranceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetEntranceResponse& GetEntranceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetEntranceResponse_entrances_2fentrances_2eproto.base);
  return *internal_default_instance();
}


void GetEntranceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.entrances.GetEntranceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && in_spot_ != nullptr) {
    delete in_spot_;
  }
  in_spot_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && out_spot_ != nullptr) {
    delete out_spot_;
  }
  out_spot_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetEntranceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.entrances.GetEntranceResponse.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mruv.spots.Spot in_spot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_in_spot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mruv.spots.Spot out_spot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_out_spot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetEntranceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.entrances.GetEntranceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.entrances.GetEntranceResponse.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .mruv.spots.Spot in_spot = 2;
  if (this->has_in_spot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::in_spot(this), target, stream);
  }

  // .mruv.spots.Spot out_spot = 3;
  if (this->has_out_spot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::out_spot(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.entrances.GetEntranceResponse)
  return target;
}

size_t GetEntranceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.entrances.GetEntranceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .mruv.spots.Spot in_spot = 2;
  if (this->has_in_spot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *in_spot_);
  }

  // .mruv.spots.Spot out_spot = 3;
  if (this->has_out_spot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *out_spot_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetEntranceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.entrances.GetEntranceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetEntranceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetEntranceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.entrances.GetEntranceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.entrances.GetEntranceResponse)
    MergeFrom(*source);
  }
}

void GetEntranceResponse::MergeFrom(const GetEntranceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.entrances.GetEntranceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_in_spot()) {
    _internal_mutable_in_spot()->::mruv::spots::Spot::MergeFrom(from._internal_in_spot());
  }
  if (from.has_out_spot()) {
    _internal_mutable_out_spot()->::mruv::spots::Spot::MergeFrom(from._internal_out_spot());
  }
}

void GetEntranceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.entrances.GetEntranceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEntranceResponse::CopyFrom(const GetEntranceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.entrances.GetEntranceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEntranceResponse::IsInitialized() const {
  return true;
}

void GetEntranceResponse::InternalSwap(GetEntranceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(in_spot_, other->in_spot_);
  swap(out_spot_, other->out_spot_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEntranceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateEntranceRequest::InitAsDefaultInstance() {
}
class UpdateEntranceRequest::_Internal {
 public:
};

UpdateEntranceRequest::UpdateEntranceRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.entrances.UpdateEntranceRequest)
}
UpdateEntranceRequest::UpdateEntranceRequest(const UpdateEntranceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&out_spot_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(out_spot_id_));
  // @@protoc_insertion_point(copy_constructor:mruv.entrances.UpdateEntranceRequest)
}

void UpdateEntranceRequest::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&out_spot_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(out_spot_id_));
}

UpdateEntranceRequest::~UpdateEntranceRequest() {
  // @@protoc_insertion_point(destructor:mruv.entrances.UpdateEntranceRequest)
  SharedDtor();
}

void UpdateEntranceRequest::SharedDtor() {
}

void UpdateEntranceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateEntranceRequest& UpdateEntranceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateEntranceRequest_entrances_2fentrances_2eproto.base);
  return *internal_default_instance();
}


void UpdateEntranceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.entrances.UpdateEntranceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&out_spot_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(out_spot_id_));
  _internal_metadata_.Clear();
}

const char* UpdateEntranceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 in_spot_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          in_spot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 out_spot_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          out_spot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateEntranceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.entrances.UpdateEntranceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 in_spot_id = 2;
  if (this->in_spot_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_in_spot_id(), target);
  }

  // uint32 out_spot_id = 3;
  if (this->out_spot_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_out_spot_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.entrances.UpdateEntranceRequest)
  return target;
}

size_t UpdateEntranceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.entrances.UpdateEntranceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 in_spot_id = 2;
  if (this->in_spot_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_in_spot_id());
  }

  // uint32 out_spot_id = 3;
  if (this->out_spot_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_out_spot_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateEntranceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.entrances.UpdateEntranceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateEntranceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateEntranceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.entrances.UpdateEntranceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.entrances.UpdateEntranceRequest)
    MergeFrom(*source);
  }
}

void UpdateEntranceRequest::MergeFrom(const UpdateEntranceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.entrances.UpdateEntranceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.in_spot_id() != 0) {
    _internal_set_in_spot_id(from._internal_in_spot_id());
  }
  if (from.out_spot_id() != 0) {
    _internal_set_out_spot_id(from._internal_out_spot_id());
  }
}

void UpdateEntranceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.entrances.UpdateEntranceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateEntranceRequest::CopyFrom(const UpdateEntranceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.entrances.UpdateEntranceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateEntranceRequest::IsInitialized() const {
  return true;
}

void UpdateEntranceRequest::InternalSwap(UpdateEntranceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(in_spot_id_, other->in_spot_id_);
  swap(out_spot_id_, other->out_spot_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateEntranceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateEntranceResponse::InitAsDefaultInstance() {
}
class UpdateEntranceResponse::_Internal {
 public:
};

UpdateEntranceResponse::UpdateEntranceResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.entrances.UpdateEntranceResponse)
}
UpdateEntranceResponse::UpdateEntranceResponse(const UpdateEntranceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.entrances.UpdateEntranceResponse)
}

void UpdateEntranceResponse::SharedCtor() {
}

UpdateEntranceResponse::~UpdateEntranceResponse() {
  // @@protoc_insertion_point(destructor:mruv.entrances.UpdateEntranceResponse)
  SharedDtor();
}

void UpdateEntranceResponse::SharedDtor() {
}

void UpdateEntranceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateEntranceResponse& UpdateEntranceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateEntranceResponse_entrances_2fentrances_2eproto.base);
  return *internal_default_instance();
}


void UpdateEntranceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.entrances.UpdateEntranceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* UpdateEntranceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateEntranceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.entrances.UpdateEntranceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.entrances.UpdateEntranceResponse)
  return target;
}

size_t UpdateEntranceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.entrances.UpdateEntranceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateEntranceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.entrances.UpdateEntranceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateEntranceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateEntranceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.entrances.UpdateEntranceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.entrances.UpdateEntranceResponse)
    MergeFrom(*source);
  }
}

void UpdateEntranceResponse::MergeFrom(const UpdateEntranceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.entrances.UpdateEntranceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UpdateEntranceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.entrances.UpdateEntranceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateEntranceResponse::CopyFrom(const UpdateEntranceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.entrances.UpdateEntranceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateEntranceResponse::IsInitialized() const {
  return true;
}

void UpdateEntranceResponse::InternalSwap(UpdateEntranceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateEntranceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteEntranceRequest::InitAsDefaultInstance() {
}
class DeleteEntranceRequest::_Internal {
 public:
};

DeleteEntranceRequest::DeleteEntranceRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.entrances.DeleteEntranceRequest)
}
DeleteEntranceRequest::DeleteEntranceRequest(const DeleteEntranceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.entrances.DeleteEntranceRequest)
}

void DeleteEntranceRequest::SharedCtor() {
  id_ = 0u;
}

DeleteEntranceRequest::~DeleteEntranceRequest() {
  // @@protoc_insertion_point(destructor:mruv.entrances.DeleteEntranceRequest)
  SharedDtor();
}

void DeleteEntranceRequest::SharedDtor() {
}

void DeleteEntranceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteEntranceRequest& DeleteEntranceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteEntranceRequest_entrances_2fentrances_2eproto.base);
  return *internal_default_instance();
}


void DeleteEntranceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.entrances.DeleteEntranceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear();
}

const char* DeleteEntranceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteEntranceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.entrances.DeleteEntranceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.entrances.DeleteEntranceRequest)
  return target;
}

size_t DeleteEntranceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.entrances.DeleteEntranceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteEntranceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.entrances.DeleteEntranceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteEntranceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteEntranceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.entrances.DeleteEntranceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.entrances.DeleteEntranceRequest)
    MergeFrom(*source);
  }
}

void DeleteEntranceRequest::MergeFrom(const DeleteEntranceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.entrances.DeleteEntranceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void DeleteEntranceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.entrances.DeleteEntranceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteEntranceRequest::CopyFrom(const DeleteEntranceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.entrances.DeleteEntranceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteEntranceRequest::IsInitialized() const {
  return true;
}

void DeleteEntranceRequest::InternalSwap(DeleteEntranceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteEntranceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteEntranceResponse::InitAsDefaultInstance() {
}
class DeleteEntranceResponse::_Internal {
 public:
};

DeleteEntranceResponse::DeleteEntranceResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.entrances.DeleteEntranceResponse)
}
DeleteEntranceResponse::DeleteEntranceResponse(const DeleteEntranceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.entrances.DeleteEntranceResponse)
}

void DeleteEntranceResponse::SharedCtor() {
}

DeleteEntranceResponse::~DeleteEntranceResponse() {
  // @@protoc_insertion_point(destructor:mruv.entrances.DeleteEntranceResponse)
  SharedDtor();
}

void DeleteEntranceResponse::SharedDtor() {
}

void DeleteEntranceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteEntranceResponse& DeleteEntranceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteEntranceResponse_entrances_2fentrances_2eproto.base);
  return *internal_default_instance();
}


void DeleteEntranceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.entrances.DeleteEntranceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* DeleteEntranceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteEntranceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.entrances.DeleteEntranceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.entrances.DeleteEntranceResponse)
  return target;
}

size_t DeleteEntranceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.entrances.DeleteEntranceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteEntranceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.entrances.DeleteEntranceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteEntranceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteEntranceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.entrances.DeleteEntranceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.entrances.DeleteEntranceResponse)
    MergeFrom(*source);
  }
}

void DeleteEntranceResponse::MergeFrom(const DeleteEntranceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.entrances.DeleteEntranceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteEntranceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.entrances.DeleteEntranceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteEntranceResponse::CopyFrom(const DeleteEntranceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.entrances.DeleteEntranceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteEntranceResponse::IsInitialized() const {
  return true;
}

void DeleteEntranceResponse::InternalSwap(DeleteEntranceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteEntranceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LockRequest::InitAsDefaultInstance() {
}
class LockRequest::_Internal {
 public:
};

LockRequest::LockRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.entrances.LockRequest)
}
LockRequest::LockRequest(const LockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.entrances.LockRequest)
}

void LockRequest::SharedCtor() {
  id_ = 0u;
}

LockRequest::~LockRequest() {
  // @@protoc_insertion_point(destructor:mruv.entrances.LockRequest)
  SharedDtor();
}

void LockRequest::SharedDtor() {
}

void LockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LockRequest& LockRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LockRequest_entrances_2fentrances_2eproto.base);
  return *internal_default_instance();
}


void LockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.entrances.LockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear();
}

const char* LockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LockRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.entrances.LockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.entrances.LockRequest)
  return target;
}

size_t LockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.entrances.LockRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LockRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.entrances.LockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LockRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LockRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.entrances.LockRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.entrances.LockRequest)
    MergeFrom(*source);
  }
}

void LockRequest::MergeFrom(const LockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.entrances.LockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void LockRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.entrances.LockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LockRequest::CopyFrom(const LockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.entrances.LockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockRequest::IsInitialized() const {
  return true;
}

void LockRequest::InternalSwap(LockRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LockRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LockResponse::InitAsDefaultInstance() {
}
class LockResponse::_Internal {
 public:
};

LockResponse::LockResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.entrances.LockResponse)
}
LockResponse::LockResponse(const LockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.entrances.LockResponse)
}

void LockResponse::SharedCtor() {
}

LockResponse::~LockResponse() {
  // @@protoc_insertion_point(destructor:mruv.entrances.LockResponse)
  SharedDtor();
}

void LockResponse::SharedDtor() {
}

void LockResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LockResponse& LockResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LockResponse_entrances_2fentrances_2eproto.base);
  return *internal_default_instance();
}


void LockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.entrances.LockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* LockResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LockResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.entrances.LockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.entrances.LockResponse)
  return target;
}

size_t LockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.entrances.LockResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LockResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.entrances.LockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LockResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LockResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.entrances.LockResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.entrances.LockResponse)
    MergeFrom(*source);
  }
}

void LockResponse::MergeFrom(const LockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.entrances.LockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LockResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.entrances.LockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LockResponse::CopyFrom(const LockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.entrances.LockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockResponse::IsInitialized() const {
  return true;
}

void LockResponse::InternalSwap(LockResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LockResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnlockRequest::InitAsDefaultInstance() {
}
class UnlockRequest::_Internal {
 public:
};

UnlockRequest::UnlockRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.entrances.UnlockRequest)
}
UnlockRequest::UnlockRequest(const UnlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.entrances.UnlockRequest)
}

void UnlockRequest::SharedCtor() {
  id_ = 0u;
}

UnlockRequest::~UnlockRequest() {
  // @@protoc_insertion_point(destructor:mruv.entrances.UnlockRequest)
  SharedDtor();
}

void UnlockRequest::SharedDtor() {
}

void UnlockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnlockRequest& UnlockRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnlockRequest_entrances_2fentrances_2eproto.base);
  return *internal_default_instance();
}


void UnlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.entrances.UnlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear();
}

const char* UnlockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnlockRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.entrances.UnlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.entrances.UnlockRequest)
  return target;
}

size_t UnlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.entrances.UnlockRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnlockRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.entrances.UnlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnlockRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnlockRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.entrances.UnlockRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.entrances.UnlockRequest)
    MergeFrom(*source);
  }
}

void UnlockRequest::MergeFrom(const UnlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.entrances.UnlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void UnlockRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.entrances.UnlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnlockRequest::CopyFrom(const UnlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.entrances.UnlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnlockRequest::IsInitialized() const {
  return true;
}

void UnlockRequest::InternalSwap(UnlockRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnlockRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnlockResponse::InitAsDefaultInstance() {
}
class UnlockResponse::_Internal {
 public:
};

UnlockResponse::UnlockResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.entrances.UnlockResponse)
}
UnlockResponse::UnlockResponse(const UnlockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.entrances.UnlockResponse)
}

void UnlockResponse::SharedCtor() {
}

UnlockResponse::~UnlockResponse() {
  // @@protoc_insertion_point(destructor:mruv.entrances.UnlockResponse)
  SharedDtor();
}

void UnlockResponse::SharedDtor() {
}

void UnlockResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnlockResponse& UnlockResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnlockResponse_entrances_2fentrances_2eproto.base);
  return *internal_default_instance();
}


void UnlockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.entrances.UnlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* UnlockResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnlockResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.entrances.UnlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.entrances.UnlockResponse)
  return target;
}

size_t UnlockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.entrances.UnlockResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnlockResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.entrances.UnlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UnlockResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnlockResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.entrances.UnlockResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.entrances.UnlockResponse)
    MergeFrom(*source);
  }
}

void UnlockResponse::MergeFrom(const UnlockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.entrances.UnlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UnlockResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.entrances.UnlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnlockResponse::CopyFrom(const UnlockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.entrances.UnlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnlockResponse::IsInitialized() const {
  return true;
}

void UnlockResponse::InternalSwap(UnlockResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnlockResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FindNearestEntranceRequest::InitAsDefaultInstance() {
}
class FindNearestEntranceRequest::_Internal {
 public:
};

FindNearestEntranceRequest::FindNearestEntranceRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.entrances.FindNearestEntranceRequest)
}
FindNearestEntranceRequest::FindNearestEntranceRequest(const FindNearestEntranceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_distance_) -
    reinterpret_cast<char*>(&x_)) + sizeof(max_distance_));
  // @@protoc_insertion_point(copy_constructor:mruv.entrances.FindNearestEntranceRequest)
}

void FindNearestEntranceRequest::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_distance_) -
      reinterpret_cast<char*>(&x_)) + sizeof(max_distance_));
}

FindNearestEntranceRequest::~FindNearestEntranceRequest() {
  // @@protoc_insertion_point(destructor:mruv.entrances.FindNearestEntranceRequest)
  SharedDtor();
}

void FindNearestEntranceRequest::SharedDtor() {
}

void FindNearestEntranceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FindNearestEntranceRequest& FindNearestEntranceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FindNearestEntranceRequest_entrances_2fentrances_2eproto.base);
  return *internal_default_instance();
}


void FindNearestEntranceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.entrances.FindNearestEntranceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_distance_) -
      reinterpret_cast<char*>(&x_)) + sizeof(max_distance_));
  _internal_metadata_.Clear();
}

const char* FindNearestEntranceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float max_distance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          max_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FindNearestEntranceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.entrances.FindNearestEntranceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  // float max_distance = 4;
  if (!(this->max_distance() <= 0 && this->max_distance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_max_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.entrances.FindNearestEntranceRequest)
  return target;
}

size_t FindNearestEntranceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.entrances.FindNearestEntranceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  // float max_distance = 4;
  if (!(this->max_distance() <= 0 && this->max_distance() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FindNearestEntranceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.entrances.FindNearestEntranceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FindNearestEntranceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FindNearestEntranceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.entrances.FindNearestEntranceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.entrances.FindNearestEntranceRequest)
    MergeFrom(*source);
  }
}

void FindNearestEntranceRequest::MergeFrom(const FindNearestEntranceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.entrances.FindNearestEntranceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  if (!(from.max_distance() <= 0 && from.max_distance() >= 0)) {
    _internal_set_max_distance(from._internal_max_distance());
  }
}

void FindNearestEntranceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.entrances.FindNearestEntranceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindNearestEntranceRequest::CopyFrom(const FindNearestEntranceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.entrances.FindNearestEntranceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindNearestEntranceRequest::IsInitialized() const {
  return true;
}

void FindNearestEntranceRequest::InternalSwap(FindNearestEntranceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(max_distance_, other->max_distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FindNearestEntranceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FindNearestEntranceResponse::InitAsDefaultInstance() {
}
class FindNearestEntranceResponse::_Internal {
 public:
};

FindNearestEntranceResponse::FindNearestEntranceResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.entrances.FindNearestEntranceResponse)
}
FindNearestEntranceResponse::FindNearestEntranceResponse(const FindNearestEntranceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&id_)) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:mruv.entrances.FindNearestEntranceResponse)
}

void FindNearestEntranceResponse::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&id_)) + sizeof(distance_));
}

FindNearestEntranceResponse::~FindNearestEntranceResponse() {
  // @@protoc_insertion_point(destructor:mruv.entrances.FindNearestEntranceResponse)
  SharedDtor();
}

void FindNearestEntranceResponse::SharedDtor() {
}

void FindNearestEntranceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FindNearestEntranceResponse& FindNearestEntranceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FindNearestEntranceResponse_entrances_2fentrances_2eproto.base);
  return *internal_default_instance();
}


void FindNearestEntranceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.entrances.FindNearestEntranceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&id_)) + sizeof(distance_));
  _internal_metadata_.Clear();
}

const char* FindNearestEntranceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float distance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FindNearestEntranceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.entrances.FindNearestEntranceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // float distance = 2;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.entrances.FindNearestEntranceResponse)
  return target;
}

size_t FindNearestEntranceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.entrances.FindNearestEntranceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // float distance = 2;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FindNearestEntranceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.entrances.FindNearestEntranceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FindNearestEntranceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FindNearestEntranceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.entrances.FindNearestEntranceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.entrances.FindNearestEntranceResponse)
    MergeFrom(*source);
  }
}

void FindNearestEntranceResponse::MergeFrom(const FindNearestEntranceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.entrances.FindNearestEntranceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (!(from.distance() <= 0 && from.distance() >= 0)) {
    _internal_set_distance(from._internal_distance());
  }
}

void FindNearestEntranceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.entrances.FindNearestEntranceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindNearestEntranceResponse::CopyFrom(const FindNearestEntranceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.entrances.FindNearestEntranceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindNearestEntranceResponse::IsInitialized() const {
  return true;
}

void FindNearestEntranceResponse::InternalSwap(FindNearestEntranceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(distance_, other->distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FindNearestEntranceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnterRequest::InitAsDefaultInstance() {
}
class EnterRequest::_Internal {
 public:
};

EnterRequest::EnterRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.entrances.EnterRequest)
}
EnterRequest::EnterRequest(const EnterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.entrances.EnterRequest)
}

void EnterRequest::SharedCtor() {
  id_ = 0u;
}

EnterRequest::~EnterRequest() {
  // @@protoc_insertion_point(destructor:mruv.entrances.EnterRequest)
  SharedDtor();
}

void EnterRequest::SharedDtor() {
}

void EnterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnterRequest& EnterRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnterRequest_entrances_2fentrances_2eproto.base);
  return *internal_default_instance();
}


void EnterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.entrances.EnterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear();
}

const char* EnterRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnterRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.entrances.EnterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.entrances.EnterRequest)
  return target;
}

size_t EnterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.entrances.EnterRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnterRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.entrances.EnterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EnterRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnterRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.entrances.EnterRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.entrances.EnterRequest)
    MergeFrom(*source);
  }
}

void EnterRequest::MergeFrom(const EnterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.entrances.EnterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void EnterRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.entrances.EnterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterRequest::CopyFrom(const EnterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.entrances.EnterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterRequest::IsInitialized() const {
  return true;
}

void EnterRequest::InternalSwap(EnterRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnterRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnterResponse::InitAsDefaultInstance() {
}
class EnterResponse::_Internal {
 public:
};

EnterResponse::EnterResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.entrances.EnterResponse)
}
EnterResponse::EnterResponse(const EnterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.entrances.EnterResponse)
}

void EnterResponse::SharedCtor() {
}

EnterResponse::~EnterResponse() {
  // @@protoc_insertion_point(destructor:mruv.entrances.EnterResponse)
  SharedDtor();
}

void EnterResponse::SharedDtor() {
}

void EnterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnterResponse& EnterResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnterResponse_entrances_2fentrances_2eproto.base);
  return *internal_default_instance();
}


void EnterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.entrances.EnterResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* EnterResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnterResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.entrances.EnterResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.entrances.EnterResponse)
  return target;
}

size_t EnterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.entrances.EnterResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnterResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.entrances.EnterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EnterResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnterResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.entrances.EnterResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.entrances.EnterResponse)
    MergeFrom(*source);
  }
}

void EnterResponse::MergeFrom(const EnterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.entrances.EnterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EnterResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.entrances.EnterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterResponse::CopyFrom(const EnterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.entrances.EnterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterResponse::IsInitialized() const {
  return true;
}

void EnterResponse::InternalSwap(EnterResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnterResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace entrances
}  // namespace mruv
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mruv::entrances::Entrance* Arena::CreateMaybeMessage< ::mruv::entrances::Entrance >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::entrances::Entrance >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::entrances::CreateEntranceRequest* Arena::CreateMaybeMessage< ::mruv::entrances::CreateEntranceRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::entrances::CreateEntranceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::entrances::CreateEntranceResponse* Arena::CreateMaybeMessage< ::mruv::entrances::CreateEntranceResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::entrances::CreateEntranceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::entrances::GetEntranceRequest* Arena::CreateMaybeMessage< ::mruv::entrances::GetEntranceRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::entrances::GetEntranceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::entrances::GetEntranceResponse* Arena::CreateMaybeMessage< ::mruv::entrances::GetEntranceResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::entrances::GetEntranceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::entrances::UpdateEntranceRequest* Arena::CreateMaybeMessage< ::mruv::entrances::UpdateEntranceRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::entrances::UpdateEntranceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::entrances::UpdateEntranceResponse* Arena::CreateMaybeMessage< ::mruv::entrances::UpdateEntranceResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::entrances::UpdateEntranceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::entrances::DeleteEntranceRequest* Arena::CreateMaybeMessage< ::mruv::entrances::DeleteEntranceRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::entrances::DeleteEntranceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::entrances::DeleteEntranceResponse* Arena::CreateMaybeMessage< ::mruv::entrances::DeleteEntranceResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::entrances::DeleteEntranceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::entrances::LockRequest* Arena::CreateMaybeMessage< ::mruv::entrances::LockRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::entrances::LockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::entrances::LockResponse* Arena::CreateMaybeMessage< ::mruv::entrances::LockResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::entrances::LockResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::entrances::UnlockRequest* Arena::CreateMaybeMessage< ::mruv::entrances::UnlockRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::entrances::UnlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::entrances::UnlockResponse* Arena::CreateMaybeMessage< ::mruv::entrances::UnlockResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::entrances::UnlockResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::entrances::FindNearestEntranceRequest* Arena::CreateMaybeMessage< ::mruv::entrances::FindNearestEntranceRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::entrances::FindNearestEntranceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::entrances::FindNearestEntranceResponse* Arena::CreateMaybeMessage< ::mruv::entrances::FindNearestEntranceResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::entrances::FindNearestEntranceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::entrances::EnterRequest* Arena::CreateMaybeMessage< ::mruv::entrances::EnterRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::entrances::EnterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::entrances::EnterResponse* Arena::CreateMaybeMessage< ::mruv::entrances::EnterResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::entrances::EnterResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
