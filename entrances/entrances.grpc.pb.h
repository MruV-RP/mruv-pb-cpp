// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: entrances/entrances.proto
#ifndef GRPC_entrances_2fentrances_2eproto__INCLUDED
#define GRPC_entrances_2fentrances_2eproto__INCLUDED

#include "entrances/entrances.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace mruv {
namespace entrances {

// The MruV entrances service provides procedures for managing an entrances to estates and teleportation to locations.
class MruVEntrancesService final {
 public:
  static constexpr char const* service_full_name() {
    return "mruv.entrances.MruVEntrancesService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Create an entrance to building or teleport to location.
    virtual ::grpc::Status CreateEntrance(::grpc::ClientContext* context, const ::mruv::entrances::CreateEntranceRequest& request, ::mruv::entrances::CreateEntranceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::CreateEntranceResponse>> AsyncCreateEntrance(::grpc::ClientContext* context, const ::mruv::entrances::CreateEntranceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::CreateEntranceResponse>>(AsyncCreateEntranceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::CreateEntranceResponse>> PrepareAsyncCreateEntrance(::grpc::ClientContext* context, const ::mruv::entrances::CreateEntranceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::CreateEntranceResponse>>(PrepareAsyncCreateEntranceRaw(context, request, cq));
    }
    // Get an entrance to building or a teleport to location.
    virtual ::grpc::Status GetEntrance(::grpc::ClientContext* context, const ::mruv::entrances::GetEntranceRequest& request, ::mruv::entrances::GetEntranceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::GetEntranceResponse>> AsyncGetEntrance(::grpc::ClientContext* context, const ::mruv::entrances::GetEntranceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::GetEntranceResponse>>(AsyncGetEntranceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::GetEntranceResponse>> PrepareAsyncGetEntrance(::grpc::ClientContext* context, const ::mruv::entrances::GetEntranceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::GetEntranceResponse>>(PrepareAsyncGetEntranceRaw(context, request, cq));
    }
    // Update an entrance to building or a teleport to location.
    virtual ::grpc::Status UpdateEntrance(::grpc::ClientContext* context, const ::mruv::entrances::UpdateEntranceRequest& request, ::mruv::entrances::UpdateEntranceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::UpdateEntranceResponse>> AsyncUpdateEntrance(::grpc::ClientContext* context, const ::mruv::entrances::UpdateEntranceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::UpdateEntranceResponse>>(AsyncUpdateEntranceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::UpdateEntranceResponse>> PrepareAsyncUpdateEntrance(::grpc::ClientContext* context, const ::mruv::entrances::UpdateEntranceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::UpdateEntranceResponse>>(PrepareAsyncUpdateEntranceRaw(context, request, cq));
    }
    // Delete an entrance to building or a teleport to location.
    virtual ::grpc::Status DeleteEntrance(::grpc::ClientContext* context, const ::mruv::entrances::DeleteEntranceRequest& request, ::mruv::entrances::DeleteEntranceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::DeleteEntranceResponse>> AsyncDeleteEntrance(::grpc::ClientContext* context, const ::mruv::entrances::DeleteEntranceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::DeleteEntranceResponse>>(AsyncDeleteEntranceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::DeleteEntranceResponse>> PrepareAsyncDeleteEntrance(::grpc::ClientContext* context, const ::mruv::entrances::DeleteEntranceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::DeleteEntranceResponse>>(PrepareAsyncDeleteEntranceRaw(context, request, cq));
    }
    // Lock entrance.
    virtual ::grpc::Status Lock(::grpc::ClientContext* context, const ::mruv::entrances::LockRequest& request, ::mruv::entrances::LockResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::LockResponse>> AsyncLock(::grpc::ClientContext* context, const ::mruv::entrances::LockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::LockResponse>>(AsyncLockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::LockResponse>> PrepareAsyncLock(::grpc::ClientContext* context, const ::mruv::entrances::LockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::LockResponse>>(PrepareAsyncLockRaw(context, request, cq));
    }
    // Unload entrance.
    virtual ::grpc::Status Unlock(::grpc::ClientContext* context, const ::mruv::entrances::UnlockRequest& request, ::mruv::entrances::UnlockResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::UnlockResponse>> AsyncUnlock(::grpc::ClientContext* context, const ::mruv::entrances::UnlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::UnlockResponse>>(AsyncUnlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::UnlockResponse>> PrepareAsyncUnlock(::grpc::ClientContext* context, const ::mruv::entrances::UnlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::UnlockResponse>>(PrepareAsyncUnlockRaw(context, request, cq));
    }
    // Find gate that is closest to a specific position.
    virtual ::grpc::Status FindNearestEntrance(::grpc::ClientContext* context, const ::mruv::entrances::FindNearestEntranceRequest& request, ::mruv::entrances::FindNearestEntranceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::FindNearestEntranceResponse>> AsyncFindNearestEntrance(::grpc::ClientContext* context, const ::mruv::entrances::FindNearestEntranceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::FindNearestEntranceResponse>>(AsyncFindNearestEntranceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::FindNearestEntranceResponse>> PrepareAsyncFindNearestEntrance(::grpc::ClientContext* context, const ::mruv::entrances::FindNearestEntranceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::FindNearestEntranceResponse>>(PrepareAsyncFindNearestEntranceRaw(context, request, cq));
    }
    // Enter an entrance
    virtual ::grpc::Status Enter(::grpc::ClientContext* context, const ::mruv::entrances::EnterRequest& request, ::mruv::entrances::EnterResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::EnterResponse>> AsyncEnter(::grpc::ClientContext* context, const ::mruv::entrances::EnterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::EnterResponse>>(AsyncEnterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::EnterResponse>> PrepareAsyncEnter(::grpc::ClientContext* context, const ::mruv::entrances::EnterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::EnterResponse>>(PrepareAsyncEnterRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Create an entrance to building or teleport to location.
      virtual void CreateEntrance(::grpc::ClientContext* context, const ::mruv::entrances::CreateEntranceRequest* request, ::mruv::entrances::CreateEntranceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateEntrance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::CreateEntranceResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateEntrance(::grpc::ClientContext* context, const ::mruv::entrances::CreateEntranceRequest* request, ::mruv::entrances::CreateEntranceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateEntrance(::grpc::ClientContext* context, const ::mruv::entrances::CreateEntranceRequest* request, ::mruv::entrances::CreateEntranceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateEntrance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::CreateEntranceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateEntrance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::CreateEntranceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get an entrance to building or a teleport to location.
      virtual void GetEntrance(::grpc::ClientContext* context, const ::mruv::entrances::GetEntranceRequest* request, ::mruv::entrances::GetEntranceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetEntrance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::GetEntranceResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetEntrance(::grpc::ClientContext* context, const ::mruv::entrances::GetEntranceRequest* request, ::mruv::entrances::GetEntranceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetEntrance(::grpc::ClientContext* context, const ::mruv::entrances::GetEntranceRequest* request, ::mruv::entrances::GetEntranceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetEntrance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::GetEntranceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetEntrance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::GetEntranceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Update an entrance to building or a teleport to location.
      virtual void UpdateEntrance(::grpc::ClientContext* context, const ::mruv::entrances::UpdateEntranceRequest* request, ::mruv::entrances::UpdateEntranceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateEntrance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::UpdateEntranceResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateEntrance(::grpc::ClientContext* context, const ::mruv::entrances::UpdateEntranceRequest* request, ::mruv::entrances::UpdateEntranceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateEntrance(::grpc::ClientContext* context, const ::mruv::entrances::UpdateEntranceRequest* request, ::mruv::entrances::UpdateEntranceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateEntrance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::UpdateEntranceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateEntrance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::UpdateEntranceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Delete an entrance to building or a teleport to location.
      virtual void DeleteEntrance(::grpc::ClientContext* context, const ::mruv::entrances::DeleteEntranceRequest* request, ::mruv::entrances::DeleteEntranceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteEntrance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::DeleteEntranceResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteEntrance(::grpc::ClientContext* context, const ::mruv::entrances::DeleteEntranceRequest* request, ::mruv::entrances::DeleteEntranceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteEntrance(::grpc::ClientContext* context, const ::mruv::entrances::DeleteEntranceRequest* request, ::mruv::entrances::DeleteEntranceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteEntrance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::DeleteEntranceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteEntrance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::DeleteEntranceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Lock entrance.
      virtual void Lock(::grpc::ClientContext* context, const ::mruv::entrances::LockRequest* request, ::mruv::entrances::LockResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Lock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::LockResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Lock(::grpc::ClientContext* context, const ::mruv::entrances::LockRequest* request, ::mruv::entrances::LockResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Lock(::grpc::ClientContext* context, const ::mruv::entrances::LockRequest* request, ::mruv::entrances::LockResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Lock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::LockResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Lock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::LockResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Unload entrance.
      virtual void Unlock(::grpc::ClientContext* context, const ::mruv::entrances::UnlockRequest* request, ::mruv::entrances::UnlockResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Unlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::UnlockResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Unlock(::grpc::ClientContext* context, const ::mruv::entrances::UnlockRequest* request, ::mruv::entrances::UnlockResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Unlock(::grpc::ClientContext* context, const ::mruv::entrances::UnlockRequest* request, ::mruv::entrances::UnlockResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Unlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::UnlockResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Unlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::UnlockResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Find gate that is closest to a specific position.
      virtual void FindNearestEntrance(::grpc::ClientContext* context, const ::mruv::entrances::FindNearestEntranceRequest* request, ::mruv::entrances::FindNearestEntranceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FindNearestEntrance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::FindNearestEntranceResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void FindNearestEntrance(::grpc::ClientContext* context, const ::mruv::entrances::FindNearestEntranceRequest* request, ::mruv::entrances::FindNearestEntranceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void FindNearestEntrance(::grpc::ClientContext* context, const ::mruv::entrances::FindNearestEntranceRequest* request, ::mruv::entrances::FindNearestEntranceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void FindNearestEntrance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::FindNearestEntranceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void FindNearestEntrance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::FindNearestEntranceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Enter an entrance
      virtual void Enter(::grpc::ClientContext* context, const ::mruv::entrances::EnterRequest* request, ::mruv::entrances::EnterResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Enter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::EnterResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Enter(::grpc::ClientContext* context, const ::mruv::entrances::EnterRequest* request, ::mruv::entrances::EnterResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Enter(::grpc::ClientContext* context, const ::mruv::entrances::EnterRequest* request, ::mruv::entrances::EnterResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Enter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::EnterResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Enter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::EnterResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::CreateEntranceResponse>* AsyncCreateEntranceRaw(::grpc::ClientContext* context, const ::mruv::entrances::CreateEntranceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::CreateEntranceResponse>* PrepareAsyncCreateEntranceRaw(::grpc::ClientContext* context, const ::mruv::entrances::CreateEntranceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::GetEntranceResponse>* AsyncGetEntranceRaw(::grpc::ClientContext* context, const ::mruv::entrances::GetEntranceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::GetEntranceResponse>* PrepareAsyncGetEntranceRaw(::grpc::ClientContext* context, const ::mruv::entrances::GetEntranceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::UpdateEntranceResponse>* AsyncUpdateEntranceRaw(::grpc::ClientContext* context, const ::mruv::entrances::UpdateEntranceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::UpdateEntranceResponse>* PrepareAsyncUpdateEntranceRaw(::grpc::ClientContext* context, const ::mruv::entrances::UpdateEntranceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::DeleteEntranceResponse>* AsyncDeleteEntranceRaw(::grpc::ClientContext* context, const ::mruv::entrances::DeleteEntranceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::DeleteEntranceResponse>* PrepareAsyncDeleteEntranceRaw(::grpc::ClientContext* context, const ::mruv::entrances::DeleteEntranceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::LockResponse>* AsyncLockRaw(::grpc::ClientContext* context, const ::mruv::entrances::LockRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::LockResponse>* PrepareAsyncLockRaw(::grpc::ClientContext* context, const ::mruv::entrances::LockRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::UnlockResponse>* AsyncUnlockRaw(::grpc::ClientContext* context, const ::mruv::entrances::UnlockRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::UnlockResponse>* PrepareAsyncUnlockRaw(::grpc::ClientContext* context, const ::mruv::entrances::UnlockRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::FindNearestEntranceResponse>* AsyncFindNearestEntranceRaw(::grpc::ClientContext* context, const ::mruv::entrances::FindNearestEntranceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::FindNearestEntranceResponse>* PrepareAsyncFindNearestEntranceRaw(::grpc::ClientContext* context, const ::mruv::entrances::FindNearestEntranceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::EnterResponse>* AsyncEnterRaw(::grpc::ClientContext* context, const ::mruv::entrances::EnterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::entrances::EnterResponse>* PrepareAsyncEnterRaw(::grpc::ClientContext* context, const ::mruv::entrances::EnterRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateEntrance(::grpc::ClientContext* context, const ::mruv::entrances::CreateEntranceRequest& request, ::mruv::entrances::CreateEntranceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::entrances::CreateEntranceResponse>> AsyncCreateEntrance(::grpc::ClientContext* context, const ::mruv::entrances::CreateEntranceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::entrances::CreateEntranceResponse>>(AsyncCreateEntranceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::entrances::CreateEntranceResponse>> PrepareAsyncCreateEntrance(::grpc::ClientContext* context, const ::mruv::entrances::CreateEntranceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::entrances::CreateEntranceResponse>>(PrepareAsyncCreateEntranceRaw(context, request, cq));
    }
    ::grpc::Status GetEntrance(::grpc::ClientContext* context, const ::mruv::entrances::GetEntranceRequest& request, ::mruv::entrances::GetEntranceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::entrances::GetEntranceResponse>> AsyncGetEntrance(::grpc::ClientContext* context, const ::mruv::entrances::GetEntranceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::entrances::GetEntranceResponse>>(AsyncGetEntranceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::entrances::GetEntranceResponse>> PrepareAsyncGetEntrance(::grpc::ClientContext* context, const ::mruv::entrances::GetEntranceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::entrances::GetEntranceResponse>>(PrepareAsyncGetEntranceRaw(context, request, cq));
    }
    ::grpc::Status UpdateEntrance(::grpc::ClientContext* context, const ::mruv::entrances::UpdateEntranceRequest& request, ::mruv::entrances::UpdateEntranceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::entrances::UpdateEntranceResponse>> AsyncUpdateEntrance(::grpc::ClientContext* context, const ::mruv::entrances::UpdateEntranceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::entrances::UpdateEntranceResponse>>(AsyncUpdateEntranceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::entrances::UpdateEntranceResponse>> PrepareAsyncUpdateEntrance(::grpc::ClientContext* context, const ::mruv::entrances::UpdateEntranceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::entrances::UpdateEntranceResponse>>(PrepareAsyncUpdateEntranceRaw(context, request, cq));
    }
    ::grpc::Status DeleteEntrance(::grpc::ClientContext* context, const ::mruv::entrances::DeleteEntranceRequest& request, ::mruv::entrances::DeleteEntranceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::entrances::DeleteEntranceResponse>> AsyncDeleteEntrance(::grpc::ClientContext* context, const ::mruv::entrances::DeleteEntranceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::entrances::DeleteEntranceResponse>>(AsyncDeleteEntranceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::entrances::DeleteEntranceResponse>> PrepareAsyncDeleteEntrance(::grpc::ClientContext* context, const ::mruv::entrances::DeleteEntranceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::entrances::DeleteEntranceResponse>>(PrepareAsyncDeleteEntranceRaw(context, request, cq));
    }
    ::grpc::Status Lock(::grpc::ClientContext* context, const ::mruv::entrances::LockRequest& request, ::mruv::entrances::LockResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::entrances::LockResponse>> AsyncLock(::grpc::ClientContext* context, const ::mruv::entrances::LockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::entrances::LockResponse>>(AsyncLockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::entrances::LockResponse>> PrepareAsyncLock(::grpc::ClientContext* context, const ::mruv::entrances::LockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::entrances::LockResponse>>(PrepareAsyncLockRaw(context, request, cq));
    }
    ::grpc::Status Unlock(::grpc::ClientContext* context, const ::mruv::entrances::UnlockRequest& request, ::mruv::entrances::UnlockResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::entrances::UnlockResponse>> AsyncUnlock(::grpc::ClientContext* context, const ::mruv::entrances::UnlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::entrances::UnlockResponse>>(AsyncUnlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::entrances::UnlockResponse>> PrepareAsyncUnlock(::grpc::ClientContext* context, const ::mruv::entrances::UnlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::entrances::UnlockResponse>>(PrepareAsyncUnlockRaw(context, request, cq));
    }
    ::grpc::Status FindNearestEntrance(::grpc::ClientContext* context, const ::mruv::entrances::FindNearestEntranceRequest& request, ::mruv::entrances::FindNearestEntranceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::entrances::FindNearestEntranceResponse>> AsyncFindNearestEntrance(::grpc::ClientContext* context, const ::mruv::entrances::FindNearestEntranceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::entrances::FindNearestEntranceResponse>>(AsyncFindNearestEntranceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::entrances::FindNearestEntranceResponse>> PrepareAsyncFindNearestEntrance(::grpc::ClientContext* context, const ::mruv::entrances::FindNearestEntranceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::entrances::FindNearestEntranceResponse>>(PrepareAsyncFindNearestEntranceRaw(context, request, cq));
    }
    ::grpc::Status Enter(::grpc::ClientContext* context, const ::mruv::entrances::EnterRequest& request, ::mruv::entrances::EnterResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::entrances::EnterResponse>> AsyncEnter(::grpc::ClientContext* context, const ::mruv::entrances::EnterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::entrances::EnterResponse>>(AsyncEnterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::entrances::EnterResponse>> PrepareAsyncEnter(::grpc::ClientContext* context, const ::mruv::entrances::EnterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::entrances::EnterResponse>>(PrepareAsyncEnterRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateEntrance(::grpc::ClientContext* context, const ::mruv::entrances::CreateEntranceRequest* request, ::mruv::entrances::CreateEntranceResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateEntrance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::CreateEntranceResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateEntrance(::grpc::ClientContext* context, const ::mruv::entrances::CreateEntranceRequest* request, ::mruv::entrances::CreateEntranceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateEntrance(::grpc::ClientContext* context, const ::mruv::entrances::CreateEntranceRequest* request, ::mruv::entrances::CreateEntranceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateEntrance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::CreateEntranceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateEntrance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::CreateEntranceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetEntrance(::grpc::ClientContext* context, const ::mruv::entrances::GetEntranceRequest* request, ::mruv::entrances::GetEntranceResponse* response, std::function<void(::grpc::Status)>) override;
      void GetEntrance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::GetEntranceResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetEntrance(::grpc::ClientContext* context, const ::mruv::entrances::GetEntranceRequest* request, ::mruv::entrances::GetEntranceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetEntrance(::grpc::ClientContext* context, const ::mruv::entrances::GetEntranceRequest* request, ::mruv::entrances::GetEntranceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetEntrance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::GetEntranceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetEntrance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::GetEntranceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateEntrance(::grpc::ClientContext* context, const ::mruv::entrances::UpdateEntranceRequest* request, ::mruv::entrances::UpdateEntranceResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateEntrance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::UpdateEntranceResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateEntrance(::grpc::ClientContext* context, const ::mruv::entrances::UpdateEntranceRequest* request, ::mruv::entrances::UpdateEntranceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateEntrance(::grpc::ClientContext* context, const ::mruv::entrances::UpdateEntranceRequest* request, ::mruv::entrances::UpdateEntranceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateEntrance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::UpdateEntranceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateEntrance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::UpdateEntranceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteEntrance(::grpc::ClientContext* context, const ::mruv::entrances::DeleteEntranceRequest* request, ::mruv::entrances::DeleteEntranceResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteEntrance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::DeleteEntranceResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteEntrance(::grpc::ClientContext* context, const ::mruv::entrances::DeleteEntranceRequest* request, ::mruv::entrances::DeleteEntranceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteEntrance(::grpc::ClientContext* context, const ::mruv::entrances::DeleteEntranceRequest* request, ::mruv::entrances::DeleteEntranceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteEntrance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::DeleteEntranceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteEntrance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::DeleteEntranceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Lock(::grpc::ClientContext* context, const ::mruv::entrances::LockRequest* request, ::mruv::entrances::LockResponse* response, std::function<void(::grpc::Status)>) override;
      void Lock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::LockResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Lock(::grpc::ClientContext* context, const ::mruv::entrances::LockRequest* request, ::mruv::entrances::LockResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Lock(::grpc::ClientContext* context, const ::mruv::entrances::LockRequest* request, ::mruv::entrances::LockResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Lock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::LockResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Lock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::LockResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Unlock(::grpc::ClientContext* context, const ::mruv::entrances::UnlockRequest* request, ::mruv::entrances::UnlockResponse* response, std::function<void(::grpc::Status)>) override;
      void Unlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::UnlockResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Unlock(::grpc::ClientContext* context, const ::mruv::entrances::UnlockRequest* request, ::mruv::entrances::UnlockResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Unlock(::grpc::ClientContext* context, const ::mruv::entrances::UnlockRequest* request, ::mruv::entrances::UnlockResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Unlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::UnlockResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Unlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::UnlockResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void FindNearestEntrance(::grpc::ClientContext* context, const ::mruv::entrances::FindNearestEntranceRequest* request, ::mruv::entrances::FindNearestEntranceResponse* response, std::function<void(::grpc::Status)>) override;
      void FindNearestEntrance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::FindNearestEntranceResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void FindNearestEntrance(::grpc::ClientContext* context, const ::mruv::entrances::FindNearestEntranceRequest* request, ::mruv::entrances::FindNearestEntranceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void FindNearestEntrance(::grpc::ClientContext* context, const ::mruv::entrances::FindNearestEntranceRequest* request, ::mruv::entrances::FindNearestEntranceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void FindNearestEntrance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::FindNearestEntranceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void FindNearestEntrance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::FindNearestEntranceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Enter(::grpc::ClientContext* context, const ::mruv::entrances::EnterRequest* request, ::mruv::entrances::EnterResponse* response, std::function<void(::grpc::Status)>) override;
      void Enter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::EnterResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Enter(::grpc::ClientContext* context, const ::mruv::entrances::EnterRequest* request, ::mruv::entrances::EnterResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Enter(::grpc::ClientContext* context, const ::mruv::entrances::EnterRequest* request, ::mruv::entrances::EnterResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Enter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::EnterResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Enter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::entrances::EnterResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mruv::entrances::CreateEntranceResponse>* AsyncCreateEntranceRaw(::grpc::ClientContext* context, const ::mruv::entrances::CreateEntranceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::entrances::CreateEntranceResponse>* PrepareAsyncCreateEntranceRaw(::grpc::ClientContext* context, const ::mruv::entrances::CreateEntranceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::entrances::GetEntranceResponse>* AsyncGetEntranceRaw(::grpc::ClientContext* context, const ::mruv::entrances::GetEntranceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::entrances::GetEntranceResponse>* PrepareAsyncGetEntranceRaw(::grpc::ClientContext* context, const ::mruv::entrances::GetEntranceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::entrances::UpdateEntranceResponse>* AsyncUpdateEntranceRaw(::grpc::ClientContext* context, const ::mruv::entrances::UpdateEntranceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::entrances::UpdateEntranceResponse>* PrepareAsyncUpdateEntranceRaw(::grpc::ClientContext* context, const ::mruv::entrances::UpdateEntranceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::entrances::DeleteEntranceResponse>* AsyncDeleteEntranceRaw(::grpc::ClientContext* context, const ::mruv::entrances::DeleteEntranceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::entrances::DeleteEntranceResponse>* PrepareAsyncDeleteEntranceRaw(::grpc::ClientContext* context, const ::mruv::entrances::DeleteEntranceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::entrances::LockResponse>* AsyncLockRaw(::grpc::ClientContext* context, const ::mruv::entrances::LockRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::entrances::LockResponse>* PrepareAsyncLockRaw(::grpc::ClientContext* context, const ::mruv::entrances::LockRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::entrances::UnlockResponse>* AsyncUnlockRaw(::grpc::ClientContext* context, const ::mruv::entrances::UnlockRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::entrances::UnlockResponse>* PrepareAsyncUnlockRaw(::grpc::ClientContext* context, const ::mruv::entrances::UnlockRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::entrances::FindNearestEntranceResponse>* AsyncFindNearestEntranceRaw(::grpc::ClientContext* context, const ::mruv::entrances::FindNearestEntranceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::entrances::FindNearestEntranceResponse>* PrepareAsyncFindNearestEntranceRaw(::grpc::ClientContext* context, const ::mruv::entrances::FindNearestEntranceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::entrances::EnterResponse>* AsyncEnterRaw(::grpc::ClientContext* context, const ::mruv::entrances::EnterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::entrances::EnterResponse>* PrepareAsyncEnterRaw(::grpc::ClientContext* context, const ::mruv::entrances::EnterRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateEntrance_;
    const ::grpc::internal::RpcMethod rpcmethod_GetEntrance_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateEntrance_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteEntrance_;
    const ::grpc::internal::RpcMethod rpcmethod_Lock_;
    const ::grpc::internal::RpcMethod rpcmethod_Unlock_;
    const ::grpc::internal::RpcMethod rpcmethod_FindNearestEntrance_;
    const ::grpc::internal::RpcMethod rpcmethod_Enter_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Create an entrance to building or teleport to location.
    virtual ::grpc::Status CreateEntrance(::grpc::ServerContext* context, const ::mruv::entrances::CreateEntranceRequest* request, ::mruv::entrances::CreateEntranceResponse* response);
    // Get an entrance to building or a teleport to location.
    virtual ::grpc::Status GetEntrance(::grpc::ServerContext* context, const ::mruv::entrances::GetEntranceRequest* request, ::mruv::entrances::GetEntranceResponse* response);
    // Update an entrance to building or a teleport to location.
    virtual ::grpc::Status UpdateEntrance(::grpc::ServerContext* context, const ::mruv::entrances::UpdateEntranceRequest* request, ::mruv::entrances::UpdateEntranceResponse* response);
    // Delete an entrance to building or a teleport to location.
    virtual ::grpc::Status DeleteEntrance(::grpc::ServerContext* context, const ::mruv::entrances::DeleteEntranceRequest* request, ::mruv::entrances::DeleteEntranceResponse* response);
    // Lock entrance.
    virtual ::grpc::Status Lock(::grpc::ServerContext* context, const ::mruv::entrances::LockRequest* request, ::mruv::entrances::LockResponse* response);
    // Unload entrance.
    virtual ::grpc::Status Unlock(::grpc::ServerContext* context, const ::mruv::entrances::UnlockRequest* request, ::mruv::entrances::UnlockResponse* response);
    // Find gate that is closest to a specific position.
    virtual ::grpc::Status FindNearestEntrance(::grpc::ServerContext* context, const ::mruv::entrances::FindNearestEntranceRequest* request, ::mruv::entrances::FindNearestEntranceResponse* response);
    // Enter an entrance
    virtual ::grpc::Status Enter(::grpc::ServerContext* context, const ::mruv::entrances::EnterRequest* request, ::mruv::entrances::EnterResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateEntrance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateEntrance() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateEntrance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateEntrance(::grpc::ServerContext* /*context*/, const ::mruv::entrances::CreateEntranceRequest* /*request*/, ::mruv::entrances::CreateEntranceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateEntrance(::grpc::ServerContext* context, ::mruv::entrances::CreateEntranceRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::entrances::CreateEntranceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetEntrance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetEntrance() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetEntrance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEntrance(::grpc::ServerContext* /*context*/, const ::mruv::entrances::GetEntranceRequest* /*request*/, ::mruv::entrances::GetEntranceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEntrance(::grpc::ServerContext* context, ::mruv::entrances::GetEntranceRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::entrances::GetEntranceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateEntrance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateEntrance() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateEntrance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateEntrance(::grpc::ServerContext* /*context*/, const ::mruv::entrances::UpdateEntranceRequest* /*request*/, ::mruv::entrances::UpdateEntranceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateEntrance(::grpc::ServerContext* context, ::mruv::entrances::UpdateEntranceRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::entrances::UpdateEntranceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteEntrance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteEntrance() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteEntrance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteEntrance(::grpc::ServerContext* /*context*/, const ::mruv::entrances::DeleteEntranceRequest* /*request*/, ::mruv::entrances::DeleteEntranceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteEntrance(::grpc::ServerContext* context, ::mruv::entrances::DeleteEntranceRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::entrances::DeleteEntranceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Lock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Lock() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Lock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Lock(::grpc::ServerContext* /*context*/, const ::mruv::entrances::LockRequest* /*request*/, ::mruv::entrances::LockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLock(::grpc::ServerContext* context, ::mruv::entrances::LockRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::entrances::LockResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Unlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Unlock() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Unlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unlock(::grpc::ServerContext* /*context*/, const ::mruv::entrances::UnlockRequest* /*request*/, ::mruv::entrances::UnlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnlock(::grpc::ServerContext* context, ::mruv::entrances::UnlockRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::entrances::UnlockResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FindNearestEntrance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FindNearestEntrance() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_FindNearestEntrance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindNearestEntrance(::grpc::ServerContext* /*context*/, const ::mruv::entrances::FindNearestEntranceRequest* /*request*/, ::mruv::entrances::FindNearestEntranceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindNearestEntrance(::grpc::ServerContext* context, ::mruv::entrances::FindNearestEntranceRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::entrances::FindNearestEntranceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Enter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Enter() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_Enter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Enter(::grpc::ServerContext* /*context*/, const ::mruv::entrances::EnterRequest* /*request*/, ::mruv::entrances::EnterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEnter(::grpc::ServerContext* context, ::mruv::entrances::EnterRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::entrances::EnterResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateEntrance<WithAsyncMethod_GetEntrance<WithAsyncMethod_UpdateEntrance<WithAsyncMethod_DeleteEntrance<WithAsyncMethod_Lock<WithAsyncMethod_Unlock<WithAsyncMethod_FindNearestEntrance<WithAsyncMethod_Enter<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateEntrance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateEntrance() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::entrances::CreateEntranceRequest, ::mruv::entrances::CreateEntranceResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::entrances::CreateEntranceRequest* request, ::mruv::entrances::CreateEntranceResponse* response) { return this->CreateEntrance(context, request, response); }));}
    void SetMessageAllocatorFor_CreateEntrance(
        ::grpc::experimental::MessageAllocator< ::mruv::entrances::CreateEntranceRequest, ::mruv::entrances::CreateEntranceResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::entrances::CreateEntranceRequest, ::mruv::entrances::CreateEntranceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateEntrance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateEntrance(::grpc::ServerContext* /*context*/, const ::mruv::entrances::CreateEntranceRequest* /*request*/, ::mruv::entrances::CreateEntranceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateEntrance(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::entrances::CreateEntranceRequest* /*request*/, ::mruv::entrances::CreateEntranceResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateEntrance(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::entrances::CreateEntranceRequest* /*request*/, ::mruv::entrances::CreateEntranceResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetEntrance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetEntrance() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::entrances::GetEntranceRequest, ::mruv::entrances::GetEntranceResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::entrances::GetEntranceRequest* request, ::mruv::entrances::GetEntranceResponse* response) { return this->GetEntrance(context, request, response); }));}
    void SetMessageAllocatorFor_GetEntrance(
        ::grpc::experimental::MessageAllocator< ::mruv::entrances::GetEntranceRequest, ::mruv::entrances::GetEntranceResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::entrances::GetEntranceRequest, ::mruv::entrances::GetEntranceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetEntrance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEntrance(::grpc::ServerContext* /*context*/, const ::mruv::entrances::GetEntranceRequest* /*request*/, ::mruv::entrances::GetEntranceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetEntrance(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::entrances::GetEntranceRequest* /*request*/, ::mruv::entrances::GetEntranceResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetEntrance(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::entrances::GetEntranceRequest* /*request*/, ::mruv::entrances::GetEntranceResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateEntrance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateEntrance() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::entrances::UpdateEntranceRequest, ::mruv::entrances::UpdateEntranceResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::entrances::UpdateEntranceRequest* request, ::mruv::entrances::UpdateEntranceResponse* response) { return this->UpdateEntrance(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateEntrance(
        ::grpc::experimental::MessageAllocator< ::mruv::entrances::UpdateEntranceRequest, ::mruv::entrances::UpdateEntranceResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::entrances::UpdateEntranceRequest, ::mruv::entrances::UpdateEntranceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateEntrance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateEntrance(::grpc::ServerContext* /*context*/, const ::mruv::entrances::UpdateEntranceRequest* /*request*/, ::mruv::entrances::UpdateEntranceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateEntrance(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::entrances::UpdateEntranceRequest* /*request*/, ::mruv::entrances::UpdateEntranceResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateEntrance(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::entrances::UpdateEntranceRequest* /*request*/, ::mruv::entrances::UpdateEntranceResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteEntrance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteEntrance() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::entrances::DeleteEntranceRequest, ::mruv::entrances::DeleteEntranceResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::entrances::DeleteEntranceRequest* request, ::mruv::entrances::DeleteEntranceResponse* response) { return this->DeleteEntrance(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteEntrance(
        ::grpc::experimental::MessageAllocator< ::mruv::entrances::DeleteEntranceRequest, ::mruv::entrances::DeleteEntranceResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::entrances::DeleteEntranceRequest, ::mruv::entrances::DeleteEntranceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteEntrance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteEntrance(::grpc::ServerContext* /*context*/, const ::mruv::entrances::DeleteEntranceRequest* /*request*/, ::mruv::entrances::DeleteEntranceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteEntrance(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::entrances::DeleteEntranceRequest* /*request*/, ::mruv::entrances::DeleteEntranceResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteEntrance(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::entrances::DeleteEntranceRequest* /*request*/, ::mruv::entrances::DeleteEntranceResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Lock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Lock() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::entrances::LockRequest, ::mruv::entrances::LockResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::entrances::LockRequest* request, ::mruv::entrances::LockResponse* response) { return this->Lock(context, request, response); }));}
    void SetMessageAllocatorFor_Lock(
        ::grpc::experimental::MessageAllocator< ::mruv::entrances::LockRequest, ::mruv::entrances::LockResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::entrances::LockRequest, ::mruv::entrances::LockResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Lock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Lock(::grpc::ServerContext* /*context*/, const ::mruv::entrances::LockRequest* /*request*/, ::mruv::entrances::LockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Lock(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::entrances::LockRequest* /*request*/, ::mruv::entrances::LockResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Lock(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::entrances::LockRequest* /*request*/, ::mruv::entrances::LockResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Unlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Unlock() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::entrances::UnlockRequest, ::mruv::entrances::UnlockResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::entrances::UnlockRequest* request, ::mruv::entrances::UnlockResponse* response) { return this->Unlock(context, request, response); }));}
    void SetMessageAllocatorFor_Unlock(
        ::grpc::experimental::MessageAllocator< ::mruv::entrances::UnlockRequest, ::mruv::entrances::UnlockResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::entrances::UnlockRequest, ::mruv::entrances::UnlockResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Unlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unlock(::grpc::ServerContext* /*context*/, const ::mruv::entrances::UnlockRequest* /*request*/, ::mruv::entrances::UnlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Unlock(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::entrances::UnlockRequest* /*request*/, ::mruv::entrances::UnlockResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Unlock(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::entrances::UnlockRequest* /*request*/, ::mruv::entrances::UnlockResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_FindNearestEntrance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_FindNearestEntrance() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::entrances::FindNearestEntranceRequest, ::mruv::entrances::FindNearestEntranceResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::entrances::FindNearestEntranceRequest* request, ::mruv::entrances::FindNearestEntranceResponse* response) { return this->FindNearestEntrance(context, request, response); }));}
    void SetMessageAllocatorFor_FindNearestEntrance(
        ::grpc::experimental::MessageAllocator< ::mruv::entrances::FindNearestEntranceRequest, ::mruv::entrances::FindNearestEntranceResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::entrances::FindNearestEntranceRequest, ::mruv::entrances::FindNearestEntranceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_FindNearestEntrance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindNearestEntrance(::grpc::ServerContext* /*context*/, const ::mruv::entrances::FindNearestEntranceRequest* /*request*/, ::mruv::entrances::FindNearestEntranceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* FindNearestEntrance(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::entrances::FindNearestEntranceRequest* /*request*/, ::mruv::entrances::FindNearestEntranceResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* FindNearestEntrance(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::entrances::FindNearestEntranceRequest* /*request*/, ::mruv::entrances::FindNearestEntranceResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Enter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Enter() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::entrances::EnterRequest, ::mruv::entrances::EnterResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::entrances::EnterRequest* request, ::mruv::entrances::EnterResponse* response) { return this->Enter(context, request, response); }));}
    void SetMessageAllocatorFor_Enter(
        ::grpc::experimental::MessageAllocator< ::mruv::entrances::EnterRequest, ::mruv::entrances::EnterResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::entrances::EnterRequest, ::mruv::entrances::EnterResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Enter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Enter(::grpc::ServerContext* /*context*/, const ::mruv::entrances::EnterRequest* /*request*/, ::mruv::entrances::EnterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Enter(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::entrances::EnterRequest* /*request*/, ::mruv::entrances::EnterResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Enter(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::entrances::EnterRequest* /*request*/, ::mruv::entrances::EnterResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_CreateEntrance<ExperimentalWithCallbackMethod_GetEntrance<ExperimentalWithCallbackMethod_UpdateEntrance<ExperimentalWithCallbackMethod_DeleteEntrance<ExperimentalWithCallbackMethod_Lock<ExperimentalWithCallbackMethod_Unlock<ExperimentalWithCallbackMethod_FindNearestEntrance<ExperimentalWithCallbackMethod_Enter<Service > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_CreateEntrance<ExperimentalWithCallbackMethod_GetEntrance<ExperimentalWithCallbackMethod_UpdateEntrance<ExperimentalWithCallbackMethod_DeleteEntrance<ExperimentalWithCallbackMethod_Lock<ExperimentalWithCallbackMethod_Unlock<ExperimentalWithCallbackMethod_FindNearestEntrance<ExperimentalWithCallbackMethod_Enter<Service > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateEntrance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateEntrance() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateEntrance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateEntrance(::grpc::ServerContext* /*context*/, const ::mruv::entrances::CreateEntranceRequest* /*request*/, ::mruv::entrances::CreateEntranceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetEntrance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetEntrance() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetEntrance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEntrance(::grpc::ServerContext* /*context*/, const ::mruv::entrances::GetEntranceRequest* /*request*/, ::mruv::entrances::GetEntranceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateEntrance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateEntrance() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateEntrance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateEntrance(::grpc::ServerContext* /*context*/, const ::mruv::entrances::UpdateEntranceRequest* /*request*/, ::mruv::entrances::UpdateEntranceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteEntrance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteEntrance() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteEntrance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteEntrance(::grpc::ServerContext* /*context*/, const ::mruv::entrances::DeleteEntranceRequest* /*request*/, ::mruv::entrances::DeleteEntranceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Lock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Lock() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Lock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Lock(::grpc::ServerContext* /*context*/, const ::mruv::entrances::LockRequest* /*request*/, ::mruv::entrances::LockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Unlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Unlock() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Unlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unlock(::grpc::ServerContext* /*context*/, const ::mruv::entrances::UnlockRequest* /*request*/, ::mruv::entrances::UnlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FindNearestEntrance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FindNearestEntrance() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_FindNearestEntrance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindNearestEntrance(::grpc::ServerContext* /*context*/, const ::mruv::entrances::FindNearestEntranceRequest* /*request*/, ::mruv::entrances::FindNearestEntranceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Enter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Enter() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_Enter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Enter(::grpc::ServerContext* /*context*/, const ::mruv::entrances::EnterRequest* /*request*/, ::mruv::entrances::EnterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateEntrance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateEntrance() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateEntrance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateEntrance(::grpc::ServerContext* /*context*/, const ::mruv::entrances::CreateEntranceRequest* /*request*/, ::mruv::entrances::CreateEntranceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateEntrance(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetEntrance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetEntrance() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetEntrance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEntrance(::grpc::ServerContext* /*context*/, const ::mruv::entrances::GetEntranceRequest* /*request*/, ::mruv::entrances::GetEntranceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEntrance(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateEntrance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateEntrance() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateEntrance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateEntrance(::grpc::ServerContext* /*context*/, const ::mruv::entrances::UpdateEntranceRequest* /*request*/, ::mruv::entrances::UpdateEntranceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateEntrance(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteEntrance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteEntrance() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteEntrance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteEntrance(::grpc::ServerContext* /*context*/, const ::mruv::entrances::DeleteEntranceRequest* /*request*/, ::mruv::entrances::DeleteEntranceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteEntrance(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Lock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Lock() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Lock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Lock(::grpc::ServerContext* /*context*/, const ::mruv::entrances::LockRequest* /*request*/, ::mruv::entrances::LockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Unlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Unlock() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_Unlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unlock(::grpc::ServerContext* /*context*/, const ::mruv::entrances::UnlockRequest* /*request*/, ::mruv::entrances::UnlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnlock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FindNearestEntrance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FindNearestEntrance() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_FindNearestEntrance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindNearestEntrance(::grpc::ServerContext* /*context*/, const ::mruv::entrances::FindNearestEntranceRequest* /*request*/, ::mruv::entrances::FindNearestEntranceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindNearestEntrance(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Enter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Enter() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_Enter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Enter(::grpc::ServerContext* /*context*/, const ::mruv::entrances::EnterRequest* /*request*/, ::mruv::entrances::EnterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEnter(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateEntrance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateEntrance() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateEntrance(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateEntrance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateEntrance(::grpc::ServerContext* /*context*/, const ::mruv::entrances::CreateEntranceRequest* /*request*/, ::mruv::entrances::CreateEntranceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateEntrance(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateEntrance(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetEntrance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetEntrance() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetEntrance(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetEntrance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEntrance(::grpc::ServerContext* /*context*/, const ::mruv::entrances::GetEntranceRequest* /*request*/, ::mruv::entrances::GetEntranceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetEntrance(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetEntrance(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateEntrance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateEntrance() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateEntrance(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateEntrance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateEntrance(::grpc::ServerContext* /*context*/, const ::mruv::entrances::UpdateEntranceRequest* /*request*/, ::mruv::entrances::UpdateEntranceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateEntrance(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateEntrance(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteEntrance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteEntrance() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteEntrance(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteEntrance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteEntrance(::grpc::ServerContext* /*context*/, const ::mruv::entrances::DeleteEntranceRequest* /*request*/, ::mruv::entrances::DeleteEntranceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteEntrance(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteEntrance(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Lock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Lock() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Lock(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Lock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Lock(::grpc::ServerContext* /*context*/, const ::mruv::entrances::LockRequest* /*request*/, ::mruv::entrances::LockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Lock(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Lock(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Unlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Unlock() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Unlock(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Unlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unlock(::grpc::ServerContext* /*context*/, const ::mruv::entrances::UnlockRequest* /*request*/, ::mruv::entrances::UnlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Unlock(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Unlock(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_FindNearestEntrance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_FindNearestEntrance() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FindNearestEntrance(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_FindNearestEntrance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindNearestEntrance(::grpc::ServerContext* /*context*/, const ::mruv::entrances::FindNearestEntranceRequest* /*request*/, ::mruv::entrances::FindNearestEntranceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* FindNearestEntrance(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* FindNearestEntrance(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Enter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Enter() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Enter(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Enter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Enter(::grpc::ServerContext* /*context*/, const ::mruv::entrances::EnterRequest* /*request*/, ::mruv::entrances::EnterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Enter(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Enter(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateEntrance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateEntrance() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::mruv::entrances::CreateEntranceRequest, ::mruv::entrances::CreateEntranceResponse>(std::bind(&WithStreamedUnaryMethod_CreateEntrance<BaseClass>::StreamedCreateEntrance, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateEntrance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateEntrance(::grpc::ServerContext* /*context*/, const ::mruv::entrances::CreateEntranceRequest* /*request*/, ::mruv::entrances::CreateEntranceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateEntrance(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::entrances::CreateEntranceRequest,::mruv::entrances::CreateEntranceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetEntrance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetEntrance() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::mruv::entrances::GetEntranceRequest, ::mruv::entrances::GetEntranceResponse>(std::bind(&WithStreamedUnaryMethod_GetEntrance<BaseClass>::StreamedGetEntrance, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetEntrance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetEntrance(::grpc::ServerContext* /*context*/, const ::mruv::entrances::GetEntranceRequest* /*request*/, ::mruv::entrances::GetEntranceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetEntrance(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::entrances::GetEntranceRequest,::mruv::entrances::GetEntranceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateEntrance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateEntrance() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::mruv::entrances::UpdateEntranceRequest, ::mruv::entrances::UpdateEntranceResponse>(std::bind(&WithStreamedUnaryMethod_UpdateEntrance<BaseClass>::StreamedUpdateEntrance, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateEntrance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateEntrance(::grpc::ServerContext* /*context*/, const ::mruv::entrances::UpdateEntranceRequest* /*request*/, ::mruv::entrances::UpdateEntranceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateEntrance(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::entrances::UpdateEntranceRequest,::mruv::entrances::UpdateEntranceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteEntrance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteEntrance() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::mruv::entrances::DeleteEntranceRequest, ::mruv::entrances::DeleteEntranceResponse>(std::bind(&WithStreamedUnaryMethod_DeleteEntrance<BaseClass>::StreamedDeleteEntrance, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteEntrance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteEntrance(::grpc::ServerContext* /*context*/, const ::mruv::entrances::DeleteEntranceRequest* /*request*/, ::mruv::entrances::DeleteEntranceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteEntrance(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::entrances::DeleteEntranceRequest,::mruv::entrances::DeleteEntranceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Lock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Lock() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::mruv::entrances::LockRequest, ::mruv::entrances::LockResponse>(std::bind(&WithStreamedUnaryMethod_Lock<BaseClass>::StreamedLock, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Lock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Lock(::grpc::ServerContext* /*context*/, const ::mruv::entrances::LockRequest* /*request*/, ::mruv::entrances::LockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::entrances::LockRequest,::mruv::entrances::LockResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Unlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Unlock() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::mruv::entrances::UnlockRequest, ::mruv::entrances::UnlockResponse>(std::bind(&WithStreamedUnaryMethod_Unlock<BaseClass>::StreamedUnlock, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Unlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Unlock(::grpc::ServerContext* /*context*/, const ::mruv::entrances::UnlockRequest* /*request*/, ::mruv::entrances::UnlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnlock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::entrances::UnlockRequest,::mruv::entrances::UnlockResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FindNearestEntrance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FindNearestEntrance() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::mruv::entrances::FindNearestEntranceRequest, ::mruv::entrances::FindNearestEntranceResponse>(std::bind(&WithStreamedUnaryMethod_FindNearestEntrance<BaseClass>::StreamedFindNearestEntrance, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_FindNearestEntrance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FindNearestEntrance(::grpc::ServerContext* /*context*/, const ::mruv::entrances::FindNearestEntranceRequest* /*request*/, ::mruv::entrances::FindNearestEntranceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFindNearestEntrance(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::entrances::FindNearestEntranceRequest,::mruv::entrances::FindNearestEntranceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Enter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Enter() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::mruv::entrances::EnterRequest, ::mruv::entrances::EnterResponse>(std::bind(&WithStreamedUnaryMethod_Enter<BaseClass>::StreamedEnter, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Enter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Enter(::grpc::ServerContext* /*context*/, const ::mruv::entrances::EnterRequest* /*request*/, ::mruv::entrances::EnterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEnter(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::entrances::EnterRequest,::mruv::entrances::EnterResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateEntrance<WithStreamedUnaryMethod_GetEntrance<WithStreamedUnaryMethod_UpdateEntrance<WithStreamedUnaryMethod_DeleteEntrance<WithStreamedUnaryMethod_Lock<WithStreamedUnaryMethod_Unlock<WithStreamedUnaryMethod_FindNearestEntrance<WithStreamedUnaryMethod_Enter<Service > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateEntrance<WithStreamedUnaryMethod_GetEntrance<WithStreamedUnaryMethod_UpdateEntrance<WithStreamedUnaryMethod_DeleteEntrance<WithStreamedUnaryMethod_Lock<WithStreamedUnaryMethod_Unlock<WithStreamedUnaryMethod_FindNearestEntrance<WithStreamedUnaryMethod_Enter<Service > > > > > > > > StreamedService;
};

}  // namespace entrances
}  // namespace mruv


#endif  // GRPC_entrances_2fentrances_2eproto__INCLUDED
