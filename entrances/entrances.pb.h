// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: entrances/entrances.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_entrances_2fentrances_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_entrances_2fentrances_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_entrances_2fentrances_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_entrances_2fentrances_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[18]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_entrances_2fentrances_2eproto;
namespace mruv {
namespace entrances {
class CreateEntranceRequest;
class CreateEntranceRequestDefaultTypeInternal;
extern CreateEntranceRequestDefaultTypeInternal _CreateEntranceRequest_default_instance_;
class CreateEntranceResponse;
class CreateEntranceResponseDefaultTypeInternal;
extern CreateEntranceResponseDefaultTypeInternal _CreateEntranceResponse_default_instance_;
class DeleteEntranceRequest;
class DeleteEntranceRequestDefaultTypeInternal;
extern DeleteEntranceRequestDefaultTypeInternal _DeleteEntranceRequest_default_instance_;
class DeleteEntranceResponse;
class DeleteEntranceResponseDefaultTypeInternal;
extern DeleteEntranceResponseDefaultTypeInternal _DeleteEntranceResponse_default_instance_;
class EnterRequest;
class EnterRequestDefaultTypeInternal;
extern EnterRequestDefaultTypeInternal _EnterRequest_default_instance_;
class EnterResponse;
class EnterResponseDefaultTypeInternal;
extern EnterResponseDefaultTypeInternal _EnterResponse_default_instance_;
class Entrance;
class EntranceDefaultTypeInternal;
extern EntranceDefaultTypeInternal _Entrance_default_instance_;
class Entrance_EntranceDoor;
class Entrance_EntranceDoorDefaultTypeInternal;
extern Entrance_EntranceDoorDefaultTypeInternal _Entrance_EntranceDoor_default_instance_;
class FindNearestEntranceRequest;
class FindNearestEntranceRequestDefaultTypeInternal;
extern FindNearestEntranceRequestDefaultTypeInternal _FindNearestEntranceRequest_default_instance_;
class FindNearestEntranceResponse;
class FindNearestEntranceResponseDefaultTypeInternal;
extern FindNearestEntranceResponseDefaultTypeInternal _FindNearestEntranceResponse_default_instance_;
class GetEntranceRequest;
class GetEntranceRequestDefaultTypeInternal;
extern GetEntranceRequestDefaultTypeInternal _GetEntranceRequest_default_instance_;
class GetEntranceResponse;
class GetEntranceResponseDefaultTypeInternal;
extern GetEntranceResponseDefaultTypeInternal _GetEntranceResponse_default_instance_;
class LockRequest;
class LockRequestDefaultTypeInternal;
extern LockRequestDefaultTypeInternal _LockRequest_default_instance_;
class LockResponse;
class LockResponseDefaultTypeInternal;
extern LockResponseDefaultTypeInternal _LockResponse_default_instance_;
class UnlockRequest;
class UnlockRequestDefaultTypeInternal;
extern UnlockRequestDefaultTypeInternal _UnlockRequest_default_instance_;
class UnlockResponse;
class UnlockResponseDefaultTypeInternal;
extern UnlockResponseDefaultTypeInternal _UnlockResponse_default_instance_;
class UpdateEntranceRequest;
class UpdateEntranceRequestDefaultTypeInternal;
extern UpdateEntranceRequestDefaultTypeInternal _UpdateEntranceRequest_default_instance_;
class UpdateEntranceResponse;
class UpdateEntranceResponseDefaultTypeInternal;
extern UpdateEntranceResponseDefaultTypeInternal _UpdateEntranceResponse_default_instance_;
}  // namespace entrances
}  // namespace mruv
PROTOBUF_NAMESPACE_OPEN
template<> ::mruv::entrances::CreateEntranceRequest* Arena::CreateMaybeMessage<::mruv::entrances::CreateEntranceRequest>(Arena*);
template<> ::mruv::entrances::CreateEntranceResponse* Arena::CreateMaybeMessage<::mruv::entrances::CreateEntranceResponse>(Arena*);
template<> ::mruv::entrances::DeleteEntranceRequest* Arena::CreateMaybeMessage<::mruv::entrances::DeleteEntranceRequest>(Arena*);
template<> ::mruv::entrances::DeleteEntranceResponse* Arena::CreateMaybeMessage<::mruv::entrances::DeleteEntranceResponse>(Arena*);
template<> ::mruv::entrances::EnterRequest* Arena::CreateMaybeMessage<::mruv::entrances::EnterRequest>(Arena*);
template<> ::mruv::entrances::EnterResponse* Arena::CreateMaybeMessage<::mruv::entrances::EnterResponse>(Arena*);
template<> ::mruv::entrances::Entrance* Arena::CreateMaybeMessage<::mruv::entrances::Entrance>(Arena*);
template<> ::mruv::entrances::Entrance_EntranceDoor* Arena::CreateMaybeMessage<::mruv::entrances::Entrance_EntranceDoor>(Arena*);
template<> ::mruv::entrances::FindNearestEntranceRequest* Arena::CreateMaybeMessage<::mruv::entrances::FindNearestEntranceRequest>(Arena*);
template<> ::mruv::entrances::FindNearestEntranceResponse* Arena::CreateMaybeMessage<::mruv::entrances::FindNearestEntranceResponse>(Arena*);
template<> ::mruv::entrances::GetEntranceRequest* Arena::CreateMaybeMessage<::mruv::entrances::GetEntranceRequest>(Arena*);
template<> ::mruv::entrances::GetEntranceResponse* Arena::CreateMaybeMessage<::mruv::entrances::GetEntranceResponse>(Arena*);
template<> ::mruv::entrances::LockRequest* Arena::CreateMaybeMessage<::mruv::entrances::LockRequest>(Arena*);
template<> ::mruv::entrances::LockResponse* Arena::CreateMaybeMessage<::mruv::entrances::LockResponse>(Arena*);
template<> ::mruv::entrances::UnlockRequest* Arena::CreateMaybeMessage<::mruv::entrances::UnlockRequest>(Arena*);
template<> ::mruv::entrances::UnlockResponse* Arena::CreateMaybeMessage<::mruv::entrances::UnlockResponse>(Arena*);
template<> ::mruv::entrances::UpdateEntranceRequest* Arena::CreateMaybeMessage<::mruv::entrances::UpdateEntranceRequest>(Arena*);
template<> ::mruv::entrances::UpdateEntranceResponse* Arena::CreateMaybeMessage<::mruv::entrances::UpdateEntranceResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mruv {
namespace entrances {

// ===================================================================

class Entrance_EntranceDoor :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.entrances.Entrance.EntranceDoor) */ {
 public:
  Entrance_EntranceDoor();
  virtual ~Entrance_EntranceDoor();

  Entrance_EntranceDoor(const Entrance_EntranceDoor& from);
  Entrance_EntranceDoor(Entrance_EntranceDoor&& from) noexcept
    : Entrance_EntranceDoor() {
    *this = ::std::move(from);
  }

  inline Entrance_EntranceDoor& operator=(const Entrance_EntranceDoor& from) {
    CopyFrom(from);
    return *this;
  }
  inline Entrance_EntranceDoor& operator=(Entrance_EntranceDoor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Entrance_EntranceDoor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Entrance_EntranceDoor* internal_default_instance() {
    return reinterpret_cast<const Entrance_EntranceDoor*>(
               &_Entrance_EntranceDoor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Entrance_EntranceDoor& a, Entrance_EntranceDoor& b) {
    a.Swap(&b);
  }
  inline void Swap(Entrance_EntranceDoor* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Entrance_EntranceDoor* New() const final {
    return CreateMaybeMessage<Entrance_EntranceDoor>(nullptr);
  }

  Entrance_EntranceDoor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Entrance_EntranceDoor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Entrance_EntranceDoor& from);
  void MergeFrom(const Entrance_EntranceDoor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Entrance_EntranceDoor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.entrances.Entrance.EntranceDoor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_entrances_2fentrances_2eproto);
    return ::descriptor_table_entrances_2fentrances_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kMessageFieldNumber = 2,
    kIconFieldNumber = 3,
    kMarkerFieldNumber = 4,
    kXFieldNumber = 5,
    kYFieldNumber = 6,
    kZFieldNumber = 7,
    kVwFieldNumber = 8,
    kIntFieldNumber = 9,
    kEstateIdFieldNumber = 10,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 icon = 3;
  void clear_icon();
  ::PROTOBUF_NAMESPACE_ID::int32 icon() const;
  void set_icon(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_icon() const;
  void _internal_set_icon(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 marker = 4;
  void clear_marker();
  ::PROTOBUF_NAMESPACE_ID::int32 marker() const;
  void set_marker(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_marker() const;
  void _internal_set_marker(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float x = 5;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 6;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 7;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // int32 vw = 8;
  void clear_vw();
  ::PROTOBUF_NAMESPACE_ID::int32 vw() const;
  void set_vw(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vw() const;
  void _internal_set_vw(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 int = 9;
  void clear_int_();
  ::PROTOBUF_NAMESPACE_ID::int32 int_() const;
  void set_int_(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int_() const;
  void _internal_set_int_(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 estate_id = 10;
  void clear_estate_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 estate_id() const;
  void set_estate_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_estate_id() const;
  void _internal_set_estate_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.entrances.Entrance.EntranceDoor)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 icon_;
  ::PROTOBUF_NAMESPACE_ID::int32 marker_;
  float x_;
  float y_;
  float z_;
  ::PROTOBUF_NAMESPACE_ID::int32 vw_;
  ::PROTOBUF_NAMESPACE_ID::int32 int__;
  ::PROTOBUF_NAMESPACE_ID::uint32 estate_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_entrances_2fentrances_2eproto;
};
// -------------------------------------------------------------------

class Entrance :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.entrances.Entrance) */ {
 public:
  Entrance();
  virtual ~Entrance();

  Entrance(const Entrance& from);
  Entrance(Entrance&& from) noexcept
    : Entrance() {
    *this = ::std::move(from);
  }

  inline Entrance& operator=(const Entrance& from) {
    CopyFrom(from);
    return *this;
  }
  inline Entrance& operator=(Entrance&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Entrance& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Entrance* internal_default_instance() {
    return reinterpret_cast<const Entrance*>(
               &_Entrance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Entrance& a, Entrance& b) {
    a.Swap(&b);
  }
  inline void Swap(Entrance* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Entrance* New() const final {
    return CreateMaybeMessage<Entrance>(nullptr);
  }

  Entrance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Entrance>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Entrance& from);
  void MergeFrom(const Entrance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Entrance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.entrances.Entrance";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_entrances_2fentrances_2eproto);
    return ::descriptor_table_entrances_2fentrances_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Entrance_EntranceDoor EntranceDoor;

  // accessors -------------------------------------------------------

  enum : int {
    kOutFieldNumber = 3,
    kInFieldNumber = 4,
    kIdFieldNumber = 1,
    kEstateIdFieldNumber = 2,
  };
  // .mruv.entrances.Entrance.EntranceDoor out = 3;
  bool has_out() const;
  private:
  bool _internal_has_out() const;
  public:
  void clear_out();
  const ::mruv::entrances::Entrance_EntranceDoor& out() const;
  ::mruv::entrances::Entrance_EntranceDoor* release_out();
  ::mruv::entrances::Entrance_EntranceDoor* mutable_out();
  void set_allocated_out(::mruv::entrances::Entrance_EntranceDoor* out);
  private:
  const ::mruv::entrances::Entrance_EntranceDoor& _internal_out() const;
  ::mruv::entrances::Entrance_EntranceDoor* _internal_mutable_out();
  public:

  // .mruv.entrances.Entrance.EntranceDoor in = 4;
  bool has_in() const;
  private:
  bool _internal_has_in() const;
  public:
  void clear_in();
  const ::mruv::entrances::Entrance_EntranceDoor& in() const;
  ::mruv::entrances::Entrance_EntranceDoor* release_in();
  ::mruv::entrances::Entrance_EntranceDoor* mutable_in();
  void set_allocated_in(::mruv::entrances::Entrance_EntranceDoor* in);
  private:
  const ::mruv::entrances::Entrance_EntranceDoor& _internal_in() const;
  ::mruv::entrances::Entrance_EntranceDoor* _internal_mutable_in();
  public:

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 estate_id = 2;
  void clear_estate_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 estate_id() const;
  void set_estate_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_estate_id() const;
  void _internal_set_estate_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.entrances.Entrance)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mruv::entrances::Entrance_EntranceDoor* out_;
  ::mruv::entrances::Entrance_EntranceDoor* in_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 estate_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_entrances_2fentrances_2eproto;
};
// -------------------------------------------------------------------

class CreateEntranceRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.entrances.CreateEntranceRequest) */ {
 public:
  CreateEntranceRequest();
  virtual ~CreateEntranceRequest();

  CreateEntranceRequest(const CreateEntranceRequest& from);
  CreateEntranceRequest(CreateEntranceRequest&& from) noexcept
    : CreateEntranceRequest() {
    *this = ::std::move(from);
  }

  inline CreateEntranceRequest& operator=(const CreateEntranceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateEntranceRequest& operator=(CreateEntranceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateEntranceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateEntranceRequest* internal_default_instance() {
    return reinterpret_cast<const CreateEntranceRequest*>(
               &_CreateEntranceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateEntranceRequest& a, CreateEntranceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateEntranceRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateEntranceRequest* New() const final {
    return CreateMaybeMessage<CreateEntranceRequest>(nullptr);
  }

  CreateEntranceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateEntranceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateEntranceRequest& from);
  void MergeFrom(const CreateEntranceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateEntranceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.entrances.CreateEntranceRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_entrances_2fentrances_2eproto);
    return ::descriptor_table_entrances_2fentrances_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntranceFieldNumber = 1,
  };
  // .mruv.entrances.Entrance entrance = 1;
  bool has_entrance() const;
  private:
  bool _internal_has_entrance() const;
  public:
  void clear_entrance();
  const ::mruv::entrances::Entrance& entrance() const;
  ::mruv::entrances::Entrance* release_entrance();
  ::mruv::entrances::Entrance* mutable_entrance();
  void set_allocated_entrance(::mruv::entrances::Entrance* entrance);
  private:
  const ::mruv::entrances::Entrance& _internal_entrance() const;
  ::mruv::entrances::Entrance* _internal_mutable_entrance();
  public:

  // @@protoc_insertion_point(class_scope:mruv.entrances.CreateEntranceRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mruv::entrances::Entrance* entrance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_entrances_2fentrances_2eproto;
};
// -------------------------------------------------------------------

class CreateEntranceResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.entrances.CreateEntranceResponse) */ {
 public:
  CreateEntranceResponse();
  virtual ~CreateEntranceResponse();

  CreateEntranceResponse(const CreateEntranceResponse& from);
  CreateEntranceResponse(CreateEntranceResponse&& from) noexcept
    : CreateEntranceResponse() {
    *this = ::std::move(from);
  }

  inline CreateEntranceResponse& operator=(const CreateEntranceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateEntranceResponse& operator=(CreateEntranceResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateEntranceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateEntranceResponse* internal_default_instance() {
    return reinterpret_cast<const CreateEntranceResponse*>(
               &_CreateEntranceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateEntranceResponse& a, CreateEntranceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateEntranceResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateEntranceResponse* New() const final {
    return CreateMaybeMessage<CreateEntranceResponse>(nullptr);
  }

  CreateEntranceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateEntranceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateEntranceResponse& from);
  void MergeFrom(const CreateEntranceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateEntranceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.entrances.CreateEntranceResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_entrances_2fentrances_2eproto);
    return ::descriptor_table_entrances_2fentrances_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.entrances.CreateEntranceResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_entrances_2fentrances_2eproto;
};
// -------------------------------------------------------------------

class GetEntranceRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.entrances.GetEntranceRequest) */ {
 public:
  GetEntranceRequest();
  virtual ~GetEntranceRequest();

  GetEntranceRequest(const GetEntranceRequest& from);
  GetEntranceRequest(GetEntranceRequest&& from) noexcept
    : GetEntranceRequest() {
    *this = ::std::move(from);
  }

  inline GetEntranceRequest& operator=(const GetEntranceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEntranceRequest& operator=(GetEntranceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEntranceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEntranceRequest* internal_default_instance() {
    return reinterpret_cast<const GetEntranceRequest*>(
               &_GetEntranceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetEntranceRequest& a, GetEntranceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEntranceRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetEntranceRequest* New() const final {
    return CreateMaybeMessage<GetEntranceRequest>(nullptr);
  }

  GetEntranceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEntranceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEntranceRequest& from);
  void MergeFrom(const GetEntranceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEntranceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.entrances.GetEntranceRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_entrances_2fentrances_2eproto);
    return ::descriptor_table_entrances_2fentrances_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.entrances.GetEntranceRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_entrances_2fentrances_2eproto;
};
// -------------------------------------------------------------------

class GetEntranceResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.entrances.GetEntranceResponse) */ {
 public:
  GetEntranceResponse();
  virtual ~GetEntranceResponse();

  GetEntranceResponse(const GetEntranceResponse& from);
  GetEntranceResponse(GetEntranceResponse&& from) noexcept
    : GetEntranceResponse() {
    *this = ::std::move(from);
  }

  inline GetEntranceResponse& operator=(const GetEntranceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEntranceResponse& operator=(GetEntranceResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEntranceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEntranceResponse* internal_default_instance() {
    return reinterpret_cast<const GetEntranceResponse*>(
               &_GetEntranceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetEntranceResponse& a, GetEntranceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEntranceResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetEntranceResponse* New() const final {
    return CreateMaybeMessage<GetEntranceResponse>(nullptr);
  }

  GetEntranceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEntranceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEntranceResponse& from);
  void MergeFrom(const GetEntranceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEntranceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.entrances.GetEntranceResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_entrances_2fentrances_2eproto);
    return ::descriptor_table_entrances_2fentrances_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.entrances.GetEntranceResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_entrances_2fentrances_2eproto;
};
// -------------------------------------------------------------------

class UpdateEntranceRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.entrances.UpdateEntranceRequest) */ {
 public:
  UpdateEntranceRequest();
  virtual ~UpdateEntranceRequest();

  UpdateEntranceRequest(const UpdateEntranceRequest& from);
  UpdateEntranceRequest(UpdateEntranceRequest&& from) noexcept
    : UpdateEntranceRequest() {
    *this = ::std::move(from);
  }

  inline UpdateEntranceRequest& operator=(const UpdateEntranceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateEntranceRequest& operator=(UpdateEntranceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateEntranceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateEntranceRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateEntranceRequest*>(
               &_UpdateEntranceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UpdateEntranceRequest& a, UpdateEntranceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateEntranceRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateEntranceRequest* New() const final {
    return CreateMaybeMessage<UpdateEntranceRequest>(nullptr);
  }

  UpdateEntranceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateEntranceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateEntranceRequest& from);
  void MergeFrom(const UpdateEntranceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateEntranceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.entrances.UpdateEntranceRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_entrances_2fentrances_2eproto);
    return ::descriptor_table_entrances_2fentrances_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.entrances.UpdateEntranceRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_entrances_2fentrances_2eproto;
};
// -------------------------------------------------------------------

class UpdateEntranceResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.entrances.UpdateEntranceResponse) */ {
 public:
  UpdateEntranceResponse();
  virtual ~UpdateEntranceResponse();

  UpdateEntranceResponse(const UpdateEntranceResponse& from);
  UpdateEntranceResponse(UpdateEntranceResponse&& from) noexcept
    : UpdateEntranceResponse() {
    *this = ::std::move(from);
  }

  inline UpdateEntranceResponse& operator=(const UpdateEntranceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateEntranceResponse& operator=(UpdateEntranceResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateEntranceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateEntranceResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateEntranceResponse*>(
               &_UpdateEntranceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UpdateEntranceResponse& a, UpdateEntranceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateEntranceResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateEntranceResponse* New() const final {
    return CreateMaybeMessage<UpdateEntranceResponse>(nullptr);
  }

  UpdateEntranceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateEntranceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateEntranceResponse& from);
  void MergeFrom(const UpdateEntranceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateEntranceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.entrances.UpdateEntranceResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_entrances_2fentrances_2eproto);
    return ::descriptor_table_entrances_2fentrances_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.entrances.UpdateEntranceResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_entrances_2fentrances_2eproto;
};
// -------------------------------------------------------------------

class DeleteEntranceRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.entrances.DeleteEntranceRequest) */ {
 public:
  DeleteEntranceRequest();
  virtual ~DeleteEntranceRequest();

  DeleteEntranceRequest(const DeleteEntranceRequest& from);
  DeleteEntranceRequest(DeleteEntranceRequest&& from) noexcept
    : DeleteEntranceRequest() {
    *this = ::std::move(from);
  }

  inline DeleteEntranceRequest& operator=(const DeleteEntranceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteEntranceRequest& operator=(DeleteEntranceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteEntranceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteEntranceRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteEntranceRequest*>(
               &_DeleteEntranceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DeleteEntranceRequest& a, DeleteEntranceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteEntranceRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteEntranceRequest* New() const final {
    return CreateMaybeMessage<DeleteEntranceRequest>(nullptr);
  }

  DeleteEntranceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteEntranceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteEntranceRequest& from);
  void MergeFrom(const DeleteEntranceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteEntranceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.entrances.DeleteEntranceRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_entrances_2fentrances_2eproto);
    return ::descriptor_table_entrances_2fentrances_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.entrances.DeleteEntranceRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_entrances_2fentrances_2eproto;
};
// -------------------------------------------------------------------

class DeleteEntranceResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.entrances.DeleteEntranceResponse) */ {
 public:
  DeleteEntranceResponse();
  virtual ~DeleteEntranceResponse();

  DeleteEntranceResponse(const DeleteEntranceResponse& from);
  DeleteEntranceResponse(DeleteEntranceResponse&& from) noexcept
    : DeleteEntranceResponse() {
    *this = ::std::move(from);
  }

  inline DeleteEntranceResponse& operator=(const DeleteEntranceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteEntranceResponse& operator=(DeleteEntranceResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteEntranceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteEntranceResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteEntranceResponse*>(
               &_DeleteEntranceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DeleteEntranceResponse& a, DeleteEntranceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteEntranceResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteEntranceResponse* New() const final {
    return CreateMaybeMessage<DeleteEntranceResponse>(nullptr);
  }

  DeleteEntranceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteEntranceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteEntranceResponse& from);
  void MergeFrom(const DeleteEntranceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteEntranceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.entrances.DeleteEntranceResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_entrances_2fentrances_2eproto);
    return ::descriptor_table_entrances_2fentrances_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.entrances.DeleteEntranceResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_entrances_2fentrances_2eproto;
};
// -------------------------------------------------------------------

class LockRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.entrances.LockRequest) */ {
 public:
  LockRequest();
  virtual ~LockRequest();

  LockRequest(const LockRequest& from);
  LockRequest(LockRequest&& from) noexcept
    : LockRequest() {
    *this = ::std::move(from);
  }

  inline LockRequest& operator=(const LockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LockRequest& operator=(LockRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LockRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LockRequest* internal_default_instance() {
    return reinterpret_cast<const LockRequest*>(
               &_LockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(LockRequest& a, LockRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LockRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LockRequest* New() const final {
    return CreateMaybeMessage<LockRequest>(nullptr);
  }

  LockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LockRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LockRequest& from);
  void MergeFrom(const LockRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LockRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.entrances.LockRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_entrances_2fentrances_2eproto);
    return ::descriptor_table_entrances_2fentrances_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.entrances.LockRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_entrances_2fentrances_2eproto;
};
// -------------------------------------------------------------------

class LockResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.entrances.LockResponse) */ {
 public:
  LockResponse();
  virtual ~LockResponse();

  LockResponse(const LockResponse& from);
  LockResponse(LockResponse&& from) noexcept
    : LockResponse() {
    *this = ::std::move(from);
  }

  inline LockResponse& operator=(const LockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LockResponse& operator=(LockResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LockResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LockResponse* internal_default_instance() {
    return reinterpret_cast<const LockResponse*>(
               &_LockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(LockResponse& a, LockResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LockResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LockResponse* New() const final {
    return CreateMaybeMessage<LockResponse>(nullptr);
  }

  LockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LockResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LockResponse& from);
  void MergeFrom(const LockResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LockResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.entrances.LockResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_entrances_2fentrances_2eproto);
    return ::descriptor_table_entrances_2fentrances_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.entrances.LockResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_entrances_2fentrances_2eproto;
};
// -------------------------------------------------------------------

class UnlockRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.entrances.UnlockRequest) */ {
 public:
  UnlockRequest();
  virtual ~UnlockRequest();

  UnlockRequest(const UnlockRequest& from);
  UnlockRequest(UnlockRequest&& from) noexcept
    : UnlockRequest() {
    *this = ::std::move(from);
  }

  inline UnlockRequest& operator=(const UnlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnlockRequest& operator=(UnlockRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnlockRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnlockRequest* internal_default_instance() {
    return reinterpret_cast<const UnlockRequest*>(
               &_UnlockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(UnlockRequest& a, UnlockRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnlockRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnlockRequest* New() const final {
    return CreateMaybeMessage<UnlockRequest>(nullptr);
  }

  UnlockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnlockRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnlockRequest& from);
  void MergeFrom(const UnlockRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnlockRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.entrances.UnlockRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_entrances_2fentrances_2eproto);
    return ::descriptor_table_entrances_2fentrances_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.entrances.UnlockRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_entrances_2fentrances_2eproto;
};
// -------------------------------------------------------------------

class UnlockResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.entrances.UnlockResponse) */ {
 public:
  UnlockResponse();
  virtual ~UnlockResponse();

  UnlockResponse(const UnlockResponse& from);
  UnlockResponse(UnlockResponse&& from) noexcept
    : UnlockResponse() {
    *this = ::std::move(from);
  }

  inline UnlockResponse& operator=(const UnlockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnlockResponse& operator=(UnlockResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnlockResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnlockResponse* internal_default_instance() {
    return reinterpret_cast<const UnlockResponse*>(
               &_UnlockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(UnlockResponse& a, UnlockResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UnlockResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnlockResponse* New() const final {
    return CreateMaybeMessage<UnlockResponse>(nullptr);
  }

  UnlockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnlockResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnlockResponse& from);
  void MergeFrom(const UnlockResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnlockResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.entrances.UnlockResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_entrances_2fentrances_2eproto);
    return ::descriptor_table_entrances_2fentrances_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.entrances.UnlockResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_entrances_2fentrances_2eproto;
};
// -------------------------------------------------------------------

class FindNearestEntranceRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.entrances.FindNearestEntranceRequest) */ {
 public:
  FindNearestEntranceRequest();
  virtual ~FindNearestEntranceRequest();

  FindNearestEntranceRequest(const FindNearestEntranceRequest& from);
  FindNearestEntranceRequest(FindNearestEntranceRequest&& from) noexcept
    : FindNearestEntranceRequest() {
    *this = ::std::move(from);
  }

  inline FindNearestEntranceRequest& operator=(const FindNearestEntranceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindNearestEntranceRequest& operator=(FindNearestEntranceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FindNearestEntranceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FindNearestEntranceRequest* internal_default_instance() {
    return reinterpret_cast<const FindNearestEntranceRequest*>(
               &_FindNearestEntranceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(FindNearestEntranceRequest& a, FindNearestEntranceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FindNearestEntranceRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindNearestEntranceRequest* New() const final {
    return CreateMaybeMessage<FindNearestEntranceRequest>(nullptr);
  }

  FindNearestEntranceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindNearestEntranceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FindNearestEntranceRequest& from);
  void MergeFrom(const FindNearestEntranceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindNearestEntranceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.entrances.FindNearestEntranceRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_entrances_2fentrances_2eproto);
    return ::descriptor_table_entrances_2fentrances_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kMaxDistanceFieldNumber = 4,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float max_distance = 4;
  void clear_max_distance();
  float max_distance() const;
  void set_max_distance(float value);
  private:
  float _internal_max_distance() const;
  void _internal_set_max_distance(float value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.entrances.FindNearestEntranceRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  float max_distance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_entrances_2fentrances_2eproto;
};
// -------------------------------------------------------------------

class FindNearestEntranceResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.entrances.FindNearestEntranceResponse) */ {
 public:
  FindNearestEntranceResponse();
  virtual ~FindNearestEntranceResponse();

  FindNearestEntranceResponse(const FindNearestEntranceResponse& from);
  FindNearestEntranceResponse(FindNearestEntranceResponse&& from) noexcept
    : FindNearestEntranceResponse() {
    *this = ::std::move(from);
  }

  inline FindNearestEntranceResponse& operator=(const FindNearestEntranceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindNearestEntranceResponse& operator=(FindNearestEntranceResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FindNearestEntranceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FindNearestEntranceResponse* internal_default_instance() {
    return reinterpret_cast<const FindNearestEntranceResponse*>(
               &_FindNearestEntranceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(FindNearestEntranceResponse& a, FindNearestEntranceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FindNearestEntranceResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindNearestEntranceResponse* New() const final {
    return CreateMaybeMessage<FindNearestEntranceResponse>(nullptr);
  }

  FindNearestEntranceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindNearestEntranceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FindNearestEntranceResponse& from);
  void MergeFrom(const FindNearestEntranceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindNearestEntranceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.entrances.FindNearestEntranceResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_entrances_2fentrances_2eproto);
    return ::descriptor_table_entrances_2fentrances_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kDistanceFieldNumber = 2,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float distance = 2;
  void clear_distance();
  float distance() const;
  void set_distance(float value);
  private:
  float _internal_distance() const;
  void _internal_set_distance(float value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.entrances.FindNearestEntranceResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  float distance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_entrances_2fentrances_2eproto;
};
// -------------------------------------------------------------------

class EnterRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.entrances.EnterRequest) */ {
 public:
  EnterRequest();
  virtual ~EnterRequest();

  EnterRequest(const EnterRequest& from);
  EnterRequest(EnterRequest&& from) noexcept
    : EnterRequest() {
    *this = ::std::move(from);
  }

  inline EnterRequest& operator=(const EnterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnterRequest& operator=(EnterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnterRequest* internal_default_instance() {
    return reinterpret_cast<const EnterRequest*>(
               &_EnterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(EnterRequest& a, EnterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EnterRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnterRequest* New() const final {
    return CreateMaybeMessage<EnterRequest>(nullptr);
  }

  EnterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnterRequest& from);
  void MergeFrom(const EnterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.entrances.EnterRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_entrances_2fentrances_2eproto);
    return ::descriptor_table_entrances_2fentrances_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.entrances.EnterRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_entrances_2fentrances_2eproto;
};
// -------------------------------------------------------------------

class EnterResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.entrances.EnterResponse) */ {
 public:
  EnterResponse();
  virtual ~EnterResponse();

  EnterResponse(const EnterResponse& from);
  EnterResponse(EnterResponse&& from) noexcept
    : EnterResponse() {
    *this = ::std::move(from);
  }

  inline EnterResponse& operator=(const EnterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnterResponse& operator=(EnterResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnterResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnterResponse* internal_default_instance() {
    return reinterpret_cast<const EnterResponse*>(
               &_EnterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(EnterResponse& a, EnterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EnterResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnterResponse* New() const final {
    return CreateMaybeMessage<EnterResponse>(nullptr);
  }

  EnterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnterResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnterResponse& from);
  void MergeFrom(const EnterResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnterResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.entrances.EnterResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_entrances_2fentrances_2eproto);
    return ::descriptor_table_entrances_2fentrances_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.entrances.EnterResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_entrances_2fentrances_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Entrance_EntranceDoor

// string name = 1;
inline void Entrance_EntranceDoor::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Entrance_EntranceDoor::name() const {
  // @@protoc_insertion_point(field_get:mruv.entrances.Entrance.EntranceDoor.name)
  return _internal_name();
}
inline void Entrance_EntranceDoor::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mruv.entrances.Entrance.EntranceDoor.name)
}
inline std::string* Entrance_EntranceDoor::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mruv.entrances.Entrance.EntranceDoor.name)
  return _internal_mutable_name();
}
inline const std::string& Entrance_EntranceDoor::_internal_name() const {
  return name_.GetNoArena();
}
inline void Entrance_EntranceDoor::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Entrance_EntranceDoor::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.entrances.Entrance.EntranceDoor.name)
}
inline void Entrance_EntranceDoor::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.entrances.Entrance.EntranceDoor.name)
}
inline void Entrance_EntranceDoor::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.entrances.Entrance.EntranceDoor.name)
}
inline std::string* Entrance_EntranceDoor::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Entrance_EntranceDoor::release_name() {
  // @@protoc_insertion_point(field_release:mruv.entrances.Entrance.EntranceDoor.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Entrance_EntranceDoor::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mruv.entrances.Entrance.EntranceDoor.name)
}

// string message = 2;
inline void Entrance_EntranceDoor::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Entrance_EntranceDoor::message() const {
  // @@protoc_insertion_point(field_get:mruv.entrances.Entrance.EntranceDoor.message)
  return _internal_message();
}
inline void Entrance_EntranceDoor::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:mruv.entrances.Entrance.EntranceDoor.message)
}
inline std::string* Entrance_EntranceDoor::mutable_message() {
  // @@protoc_insertion_point(field_mutable:mruv.entrances.Entrance.EntranceDoor.message)
  return _internal_mutable_message();
}
inline const std::string& Entrance_EntranceDoor::_internal_message() const {
  return message_.GetNoArena();
}
inline void Entrance_EntranceDoor::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Entrance_EntranceDoor::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.entrances.Entrance.EntranceDoor.message)
}
inline void Entrance_EntranceDoor::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.entrances.Entrance.EntranceDoor.message)
}
inline void Entrance_EntranceDoor::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.entrances.Entrance.EntranceDoor.message)
}
inline std::string* Entrance_EntranceDoor::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Entrance_EntranceDoor::release_message() {
  // @@protoc_insertion_point(field_release:mruv.entrances.Entrance.EntranceDoor.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Entrance_EntranceDoor::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:mruv.entrances.Entrance.EntranceDoor.message)
}

// int32 icon = 3;
inline void Entrance_EntranceDoor::clear_icon() {
  icon_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Entrance_EntranceDoor::_internal_icon() const {
  return icon_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Entrance_EntranceDoor::icon() const {
  // @@protoc_insertion_point(field_get:mruv.entrances.Entrance.EntranceDoor.icon)
  return _internal_icon();
}
inline void Entrance_EntranceDoor::_internal_set_icon(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  icon_ = value;
}
inline void Entrance_EntranceDoor::set_icon(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_icon(value);
  // @@protoc_insertion_point(field_set:mruv.entrances.Entrance.EntranceDoor.icon)
}

// int32 marker = 4;
inline void Entrance_EntranceDoor::clear_marker() {
  marker_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Entrance_EntranceDoor::_internal_marker() const {
  return marker_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Entrance_EntranceDoor::marker() const {
  // @@protoc_insertion_point(field_get:mruv.entrances.Entrance.EntranceDoor.marker)
  return _internal_marker();
}
inline void Entrance_EntranceDoor::_internal_set_marker(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  marker_ = value;
}
inline void Entrance_EntranceDoor::set_marker(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_marker(value);
  // @@protoc_insertion_point(field_set:mruv.entrances.Entrance.EntranceDoor.marker)
}

// float x = 5;
inline void Entrance_EntranceDoor::clear_x() {
  x_ = 0;
}
inline float Entrance_EntranceDoor::_internal_x() const {
  return x_;
}
inline float Entrance_EntranceDoor::x() const {
  // @@protoc_insertion_point(field_get:mruv.entrances.Entrance.EntranceDoor.x)
  return _internal_x();
}
inline void Entrance_EntranceDoor::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Entrance_EntranceDoor::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:mruv.entrances.Entrance.EntranceDoor.x)
}

// float y = 6;
inline void Entrance_EntranceDoor::clear_y() {
  y_ = 0;
}
inline float Entrance_EntranceDoor::_internal_y() const {
  return y_;
}
inline float Entrance_EntranceDoor::y() const {
  // @@protoc_insertion_point(field_get:mruv.entrances.Entrance.EntranceDoor.y)
  return _internal_y();
}
inline void Entrance_EntranceDoor::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Entrance_EntranceDoor::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:mruv.entrances.Entrance.EntranceDoor.y)
}

// float z = 7;
inline void Entrance_EntranceDoor::clear_z() {
  z_ = 0;
}
inline float Entrance_EntranceDoor::_internal_z() const {
  return z_;
}
inline float Entrance_EntranceDoor::z() const {
  // @@protoc_insertion_point(field_get:mruv.entrances.Entrance.EntranceDoor.z)
  return _internal_z();
}
inline void Entrance_EntranceDoor::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Entrance_EntranceDoor::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:mruv.entrances.Entrance.EntranceDoor.z)
}

// int32 vw = 8;
inline void Entrance_EntranceDoor::clear_vw() {
  vw_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Entrance_EntranceDoor::_internal_vw() const {
  return vw_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Entrance_EntranceDoor::vw() const {
  // @@protoc_insertion_point(field_get:mruv.entrances.Entrance.EntranceDoor.vw)
  return _internal_vw();
}
inline void Entrance_EntranceDoor::_internal_set_vw(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vw_ = value;
}
inline void Entrance_EntranceDoor::set_vw(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vw(value);
  // @@protoc_insertion_point(field_set:mruv.entrances.Entrance.EntranceDoor.vw)
}

// int32 int = 9;
inline void Entrance_EntranceDoor::clear_int_() {
  int__ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Entrance_EntranceDoor::_internal_int_() const {
  return int__;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Entrance_EntranceDoor::int_() const {
  // @@protoc_insertion_point(field_get:mruv.entrances.Entrance.EntranceDoor.int)
  return _internal_int_();
}
inline void Entrance_EntranceDoor::_internal_set_int_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  int__ = value;
}
inline void Entrance_EntranceDoor::set_int_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_int_(value);
  // @@protoc_insertion_point(field_set:mruv.entrances.Entrance.EntranceDoor.int)
}

// uint32 estate_id = 10;
inline void Entrance_EntranceDoor::clear_estate_id() {
  estate_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Entrance_EntranceDoor::_internal_estate_id() const {
  return estate_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Entrance_EntranceDoor::estate_id() const {
  // @@protoc_insertion_point(field_get:mruv.entrances.Entrance.EntranceDoor.estate_id)
  return _internal_estate_id();
}
inline void Entrance_EntranceDoor::_internal_set_estate_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  estate_id_ = value;
}
inline void Entrance_EntranceDoor::set_estate_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_estate_id(value);
  // @@protoc_insertion_point(field_set:mruv.entrances.Entrance.EntranceDoor.estate_id)
}

// -------------------------------------------------------------------

// Entrance

// uint32 id = 1;
inline void Entrance::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Entrance::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Entrance::id() const {
  // @@protoc_insertion_point(field_get:mruv.entrances.Entrance.id)
  return _internal_id();
}
inline void Entrance::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Entrance::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.entrances.Entrance.id)
}

// uint32 estate_id = 2;
inline void Entrance::clear_estate_id() {
  estate_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Entrance::_internal_estate_id() const {
  return estate_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Entrance::estate_id() const {
  // @@protoc_insertion_point(field_get:mruv.entrances.Entrance.estate_id)
  return _internal_estate_id();
}
inline void Entrance::_internal_set_estate_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  estate_id_ = value;
}
inline void Entrance::set_estate_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_estate_id(value);
  // @@protoc_insertion_point(field_set:mruv.entrances.Entrance.estate_id)
}

// .mruv.entrances.Entrance.EntranceDoor out = 3;
inline bool Entrance::_internal_has_out() const {
  return this != internal_default_instance() && out_ != nullptr;
}
inline bool Entrance::has_out() const {
  return _internal_has_out();
}
inline void Entrance::clear_out() {
  if (GetArenaNoVirtual() == nullptr && out_ != nullptr) {
    delete out_;
  }
  out_ = nullptr;
}
inline const ::mruv::entrances::Entrance_EntranceDoor& Entrance::_internal_out() const {
  const ::mruv::entrances::Entrance_EntranceDoor* p = out_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mruv::entrances::Entrance_EntranceDoor*>(
      &::mruv::entrances::_Entrance_EntranceDoor_default_instance_);
}
inline const ::mruv::entrances::Entrance_EntranceDoor& Entrance::out() const {
  // @@protoc_insertion_point(field_get:mruv.entrances.Entrance.out)
  return _internal_out();
}
inline ::mruv::entrances::Entrance_EntranceDoor* Entrance::release_out() {
  // @@protoc_insertion_point(field_release:mruv.entrances.Entrance.out)
  
  ::mruv::entrances::Entrance_EntranceDoor* temp = out_;
  out_ = nullptr;
  return temp;
}
inline ::mruv::entrances::Entrance_EntranceDoor* Entrance::_internal_mutable_out() {
  
  if (out_ == nullptr) {
    auto* p = CreateMaybeMessage<::mruv::entrances::Entrance_EntranceDoor>(GetArenaNoVirtual());
    out_ = p;
  }
  return out_;
}
inline ::mruv::entrances::Entrance_EntranceDoor* Entrance::mutable_out() {
  // @@protoc_insertion_point(field_mutable:mruv.entrances.Entrance.out)
  return _internal_mutable_out();
}
inline void Entrance::set_allocated_out(::mruv::entrances::Entrance_EntranceDoor* out) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete out_;
  }
  if (out) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      out = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, out, submessage_arena);
    }
    
  } else {
    
  }
  out_ = out;
  // @@protoc_insertion_point(field_set_allocated:mruv.entrances.Entrance.out)
}

// .mruv.entrances.Entrance.EntranceDoor in = 4;
inline bool Entrance::_internal_has_in() const {
  return this != internal_default_instance() && in_ != nullptr;
}
inline bool Entrance::has_in() const {
  return _internal_has_in();
}
inline void Entrance::clear_in() {
  if (GetArenaNoVirtual() == nullptr && in_ != nullptr) {
    delete in_;
  }
  in_ = nullptr;
}
inline const ::mruv::entrances::Entrance_EntranceDoor& Entrance::_internal_in() const {
  const ::mruv::entrances::Entrance_EntranceDoor* p = in_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mruv::entrances::Entrance_EntranceDoor*>(
      &::mruv::entrances::_Entrance_EntranceDoor_default_instance_);
}
inline const ::mruv::entrances::Entrance_EntranceDoor& Entrance::in() const {
  // @@protoc_insertion_point(field_get:mruv.entrances.Entrance.in)
  return _internal_in();
}
inline ::mruv::entrances::Entrance_EntranceDoor* Entrance::release_in() {
  // @@protoc_insertion_point(field_release:mruv.entrances.Entrance.in)
  
  ::mruv::entrances::Entrance_EntranceDoor* temp = in_;
  in_ = nullptr;
  return temp;
}
inline ::mruv::entrances::Entrance_EntranceDoor* Entrance::_internal_mutable_in() {
  
  if (in_ == nullptr) {
    auto* p = CreateMaybeMessage<::mruv::entrances::Entrance_EntranceDoor>(GetArenaNoVirtual());
    in_ = p;
  }
  return in_;
}
inline ::mruv::entrances::Entrance_EntranceDoor* Entrance::mutable_in() {
  // @@protoc_insertion_point(field_mutable:mruv.entrances.Entrance.in)
  return _internal_mutable_in();
}
inline void Entrance::set_allocated_in(::mruv::entrances::Entrance_EntranceDoor* in) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete in_;
  }
  if (in) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      in = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, in, submessage_arena);
    }
    
  } else {
    
  }
  in_ = in;
  // @@protoc_insertion_point(field_set_allocated:mruv.entrances.Entrance.in)
}

// -------------------------------------------------------------------

// CreateEntranceRequest

// .mruv.entrances.Entrance entrance = 1;
inline bool CreateEntranceRequest::_internal_has_entrance() const {
  return this != internal_default_instance() && entrance_ != nullptr;
}
inline bool CreateEntranceRequest::has_entrance() const {
  return _internal_has_entrance();
}
inline void CreateEntranceRequest::clear_entrance() {
  if (GetArenaNoVirtual() == nullptr && entrance_ != nullptr) {
    delete entrance_;
  }
  entrance_ = nullptr;
}
inline const ::mruv::entrances::Entrance& CreateEntranceRequest::_internal_entrance() const {
  const ::mruv::entrances::Entrance* p = entrance_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mruv::entrances::Entrance*>(
      &::mruv::entrances::_Entrance_default_instance_);
}
inline const ::mruv::entrances::Entrance& CreateEntranceRequest::entrance() const {
  // @@protoc_insertion_point(field_get:mruv.entrances.CreateEntranceRequest.entrance)
  return _internal_entrance();
}
inline ::mruv::entrances::Entrance* CreateEntranceRequest::release_entrance() {
  // @@protoc_insertion_point(field_release:mruv.entrances.CreateEntranceRequest.entrance)
  
  ::mruv::entrances::Entrance* temp = entrance_;
  entrance_ = nullptr;
  return temp;
}
inline ::mruv::entrances::Entrance* CreateEntranceRequest::_internal_mutable_entrance() {
  
  if (entrance_ == nullptr) {
    auto* p = CreateMaybeMessage<::mruv::entrances::Entrance>(GetArenaNoVirtual());
    entrance_ = p;
  }
  return entrance_;
}
inline ::mruv::entrances::Entrance* CreateEntranceRequest::mutable_entrance() {
  // @@protoc_insertion_point(field_mutable:mruv.entrances.CreateEntranceRequest.entrance)
  return _internal_mutable_entrance();
}
inline void CreateEntranceRequest::set_allocated_entrance(::mruv::entrances::Entrance* entrance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete entrance_;
  }
  if (entrance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      entrance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entrance, submessage_arena);
    }
    
  } else {
    
  }
  entrance_ = entrance;
  // @@protoc_insertion_point(field_set_allocated:mruv.entrances.CreateEntranceRequest.entrance)
}

// -------------------------------------------------------------------

// CreateEntranceResponse

// uint32 id = 1;
inline void CreateEntranceResponse::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateEntranceResponse::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateEntranceResponse::id() const {
  // @@protoc_insertion_point(field_get:mruv.entrances.CreateEntranceResponse.id)
  return _internal_id();
}
inline void CreateEntranceResponse::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void CreateEntranceResponse::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.entrances.CreateEntranceResponse.id)
}

// -------------------------------------------------------------------

// GetEntranceRequest

// uint32 id = 1;
inline void GetEntranceRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetEntranceRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetEntranceRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.entrances.GetEntranceRequest.id)
  return _internal_id();
}
inline void GetEntranceRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void GetEntranceRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.entrances.GetEntranceRequest.id)
}

// -------------------------------------------------------------------

// GetEntranceResponse

// -------------------------------------------------------------------

// UpdateEntranceRequest

// uint32 id = 1;
inline void UpdateEntranceRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateEntranceRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateEntranceRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.entrances.UpdateEntranceRequest.id)
  return _internal_id();
}
inline void UpdateEntranceRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void UpdateEntranceRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.entrances.UpdateEntranceRequest.id)
}

// -------------------------------------------------------------------

// UpdateEntranceResponse

// -------------------------------------------------------------------

// DeleteEntranceRequest

// uint32 id = 1;
inline void DeleteEntranceRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteEntranceRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteEntranceRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.entrances.DeleteEntranceRequest.id)
  return _internal_id();
}
inline void DeleteEntranceRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void DeleteEntranceRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.entrances.DeleteEntranceRequest.id)
}

// -------------------------------------------------------------------

// DeleteEntranceResponse

// -------------------------------------------------------------------

// LockRequest

// uint32 id = 1;
inline void LockRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LockRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LockRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.entrances.LockRequest.id)
  return _internal_id();
}
inline void LockRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void LockRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.entrances.LockRequest.id)
}

// -------------------------------------------------------------------

// LockResponse

// -------------------------------------------------------------------

// UnlockRequest

// uint32 id = 1;
inline void UnlockRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnlockRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnlockRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.entrances.UnlockRequest.id)
  return _internal_id();
}
inline void UnlockRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void UnlockRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.entrances.UnlockRequest.id)
}

// -------------------------------------------------------------------

// UnlockResponse

// -------------------------------------------------------------------

// FindNearestEntranceRequest

// float x = 1;
inline void FindNearestEntranceRequest::clear_x() {
  x_ = 0;
}
inline float FindNearestEntranceRequest::_internal_x() const {
  return x_;
}
inline float FindNearestEntranceRequest::x() const {
  // @@protoc_insertion_point(field_get:mruv.entrances.FindNearestEntranceRequest.x)
  return _internal_x();
}
inline void FindNearestEntranceRequest::_internal_set_x(float value) {
  
  x_ = value;
}
inline void FindNearestEntranceRequest::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:mruv.entrances.FindNearestEntranceRequest.x)
}

// float y = 2;
inline void FindNearestEntranceRequest::clear_y() {
  y_ = 0;
}
inline float FindNearestEntranceRequest::_internal_y() const {
  return y_;
}
inline float FindNearestEntranceRequest::y() const {
  // @@protoc_insertion_point(field_get:mruv.entrances.FindNearestEntranceRequest.y)
  return _internal_y();
}
inline void FindNearestEntranceRequest::_internal_set_y(float value) {
  
  y_ = value;
}
inline void FindNearestEntranceRequest::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:mruv.entrances.FindNearestEntranceRequest.y)
}

// float z = 3;
inline void FindNearestEntranceRequest::clear_z() {
  z_ = 0;
}
inline float FindNearestEntranceRequest::_internal_z() const {
  return z_;
}
inline float FindNearestEntranceRequest::z() const {
  // @@protoc_insertion_point(field_get:mruv.entrances.FindNearestEntranceRequest.z)
  return _internal_z();
}
inline void FindNearestEntranceRequest::_internal_set_z(float value) {
  
  z_ = value;
}
inline void FindNearestEntranceRequest::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:mruv.entrances.FindNearestEntranceRequest.z)
}

// float max_distance = 4;
inline void FindNearestEntranceRequest::clear_max_distance() {
  max_distance_ = 0;
}
inline float FindNearestEntranceRequest::_internal_max_distance() const {
  return max_distance_;
}
inline float FindNearestEntranceRequest::max_distance() const {
  // @@protoc_insertion_point(field_get:mruv.entrances.FindNearestEntranceRequest.max_distance)
  return _internal_max_distance();
}
inline void FindNearestEntranceRequest::_internal_set_max_distance(float value) {
  
  max_distance_ = value;
}
inline void FindNearestEntranceRequest::set_max_distance(float value) {
  _internal_set_max_distance(value);
  // @@protoc_insertion_point(field_set:mruv.entrances.FindNearestEntranceRequest.max_distance)
}

// -------------------------------------------------------------------

// FindNearestEntranceResponse

// uint32 id = 1;
inline void FindNearestEntranceResponse::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FindNearestEntranceResponse::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FindNearestEntranceResponse::id() const {
  // @@protoc_insertion_point(field_get:mruv.entrances.FindNearestEntranceResponse.id)
  return _internal_id();
}
inline void FindNearestEntranceResponse::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void FindNearestEntranceResponse::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.entrances.FindNearestEntranceResponse.id)
}

// float distance = 2;
inline void FindNearestEntranceResponse::clear_distance() {
  distance_ = 0;
}
inline float FindNearestEntranceResponse::_internal_distance() const {
  return distance_;
}
inline float FindNearestEntranceResponse::distance() const {
  // @@protoc_insertion_point(field_get:mruv.entrances.FindNearestEntranceResponse.distance)
  return _internal_distance();
}
inline void FindNearestEntranceResponse::_internal_set_distance(float value) {
  
  distance_ = value;
}
inline void FindNearestEntranceResponse::set_distance(float value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:mruv.entrances.FindNearestEntranceResponse.distance)
}

// -------------------------------------------------------------------

// EnterRequest

// uint32 id = 1;
inline void EnterRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnterRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnterRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.entrances.EnterRequest.id)
  return _internal_id();
}
inline void EnterRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void EnterRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.entrances.EnterRequest.id)
}

// -------------------------------------------------------------------

// EnterResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace entrances
}  // namespace mruv

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_entrances_2fentrances_2eproto
