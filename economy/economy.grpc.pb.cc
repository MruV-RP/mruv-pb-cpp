// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: economy/economy.proto

#include "economy/economy.pb.h"
#include "economy/economy.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace mruv {
namespace economy {

static const char* MruVEconomyService_method_names[] = {
  "/mruv.economy.MruVEconomyService/RegisterProduct",
  "/mruv.economy.MruVEconomyService/GetProduct",
  "/mruv.economy.MruVEconomyService/UpdateProduct",
  "/mruv.economy.MruVEconomyService/DeleteProduct",
  "/mruv.economy.MruVEconomyService/UpdatePrice",
  "/mruv.economy.MruVEconomyService/GetPrice",
  "/mruv.economy.MruVEconomyService/BuyProduct",
  "/mruv.economy.MruVEconomyService/WatchProduct",
  "/mruv.economy.MruVEconomyService/WatchPrice",
};

std::unique_ptr< MruVEconomyService::Stub> MruVEconomyService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MruVEconomyService::Stub> stub(new MruVEconomyService::Stub(channel));
  return stub;
}

MruVEconomyService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_RegisterProduct_(MruVEconomyService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetProduct_(MruVEconomyService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateProduct_(MruVEconomyService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteProduct_(MruVEconomyService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdatePrice_(MruVEconomyService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPrice_(MruVEconomyService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BuyProduct_(MruVEconomyService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WatchProduct_(MruVEconomyService_method_names[7], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_WatchPrice_(MruVEconomyService_method_names[8], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status MruVEconomyService::Stub::RegisterProduct(::grpc::ClientContext* context, const ::mruv::economy::RegisterProductRequest& request, ::mruv::economy::RegisterProductResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RegisterProduct_, context, request, response);
}

void MruVEconomyService::Stub::experimental_async::RegisterProduct(::grpc::ClientContext* context, const ::mruv::economy::RegisterProductRequest* request, ::mruv::economy::RegisterProductResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterProduct_, context, request, response, std::move(f));
}

void MruVEconomyService::Stub::experimental_async::RegisterProduct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::RegisterProductResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterProduct_, context, request, response, std::move(f));
}

void MruVEconomyService::Stub::experimental_async::RegisterProduct(::grpc::ClientContext* context, const ::mruv::economy::RegisterProductRequest* request, ::mruv::economy::RegisterProductResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterProduct_, context, request, response, reactor);
}

void MruVEconomyService::Stub::experimental_async::RegisterProduct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::RegisterProductResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterProduct_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::RegisterProductResponse>* MruVEconomyService::Stub::AsyncRegisterProductRaw(::grpc::ClientContext* context, const ::mruv::economy::RegisterProductRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::RegisterProductResponse>::Create(channel_.get(), cq, rpcmethod_RegisterProduct_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::RegisterProductResponse>* MruVEconomyService::Stub::PrepareAsyncRegisterProductRaw(::grpc::ClientContext* context, const ::mruv::economy::RegisterProductRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::RegisterProductResponse>::Create(channel_.get(), cq, rpcmethod_RegisterProduct_, context, request, false);
}

::grpc::Status MruVEconomyService::Stub::GetProduct(::grpc::ClientContext* context, const ::mruv::economy::GetProductRequest& request, ::mruv::economy::GetProductResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetProduct_, context, request, response);
}

void MruVEconomyService::Stub::experimental_async::GetProduct(::grpc::ClientContext* context, const ::mruv::economy::GetProductRequest* request, ::mruv::economy::GetProductResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetProduct_, context, request, response, std::move(f));
}

void MruVEconomyService::Stub::experimental_async::GetProduct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::GetProductResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetProduct_, context, request, response, std::move(f));
}

void MruVEconomyService::Stub::experimental_async::GetProduct(::grpc::ClientContext* context, const ::mruv::economy::GetProductRequest* request, ::mruv::economy::GetProductResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetProduct_, context, request, response, reactor);
}

void MruVEconomyService::Stub::experimental_async::GetProduct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::GetProductResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetProduct_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::GetProductResponse>* MruVEconomyService::Stub::AsyncGetProductRaw(::grpc::ClientContext* context, const ::mruv::economy::GetProductRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::GetProductResponse>::Create(channel_.get(), cq, rpcmethod_GetProduct_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::GetProductResponse>* MruVEconomyService::Stub::PrepareAsyncGetProductRaw(::grpc::ClientContext* context, const ::mruv::economy::GetProductRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::GetProductResponse>::Create(channel_.get(), cq, rpcmethod_GetProduct_, context, request, false);
}

::grpc::Status MruVEconomyService::Stub::UpdateProduct(::grpc::ClientContext* context, const ::mruv::economy::UpdateProductRequest& request, ::mruv::economy::UpdateProductResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateProduct_, context, request, response);
}

void MruVEconomyService::Stub::experimental_async::UpdateProduct(::grpc::ClientContext* context, const ::mruv::economy::UpdateProductRequest* request, ::mruv::economy::UpdateProductResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateProduct_, context, request, response, std::move(f));
}

void MruVEconomyService::Stub::experimental_async::UpdateProduct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::UpdateProductResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateProduct_, context, request, response, std::move(f));
}

void MruVEconomyService::Stub::experimental_async::UpdateProduct(::grpc::ClientContext* context, const ::mruv::economy::UpdateProductRequest* request, ::mruv::economy::UpdateProductResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateProduct_, context, request, response, reactor);
}

void MruVEconomyService::Stub::experimental_async::UpdateProduct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::UpdateProductResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateProduct_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::UpdateProductResponse>* MruVEconomyService::Stub::AsyncUpdateProductRaw(::grpc::ClientContext* context, const ::mruv::economy::UpdateProductRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::UpdateProductResponse>::Create(channel_.get(), cq, rpcmethod_UpdateProduct_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::UpdateProductResponse>* MruVEconomyService::Stub::PrepareAsyncUpdateProductRaw(::grpc::ClientContext* context, const ::mruv::economy::UpdateProductRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::UpdateProductResponse>::Create(channel_.get(), cq, rpcmethod_UpdateProduct_, context, request, false);
}

::grpc::Status MruVEconomyService::Stub::DeleteProduct(::grpc::ClientContext* context, const ::mruv::economy::DeleteProductRequest& request, ::mruv::economy::DeleteProductResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteProduct_, context, request, response);
}

void MruVEconomyService::Stub::experimental_async::DeleteProduct(::grpc::ClientContext* context, const ::mruv::economy::DeleteProductRequest* request, ::mruv::economy::DeleteProductResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteProduct_, context, request, response, std::move(f));
}

void MruVEconomyService::Stub::experimental_async::DeleteProduct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::DeleteProductResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteProduct_, context, request, response, std::move(f));
}

void MruVEconomyService::Stub::experimental_async::DeleteProduct(::grpc::ClientContext* context, const ::mruv::economy::DeleteProductRequest* request, ::mruv::economy::DeleteProductResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteProduct_, context, request, response, reactor);
}

void MruVEconomyService::Stub::experimental_async::DeleteProduct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::DeleteProductResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteProduct_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::DeleteProductResponse>* MruVEconomyService::Stub::AsyncDeleteProductRaw(::grpc::ClientContext* context, const ::mruv::economy::DeleteProductRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::DeleteProductResponse>::Create(channel_.get(), cq, rpcmethod_DeleteProduct_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::DeleteProductResponse>* MruVEconomyService::Stub::PrepareAsyncDeleteProductRaw(::grpc::ClientContext* context, const ::mruv::economy::DeleteProductRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::DeleteProductResponse>::Create(channel_.get(), cq, rpcmethod_DeleteProduct_, context, request, false);
}

::grpc::Status MruVEconomyService::Stub::UpdatePrice(::grpc::ClientContext* context, const ::mruv::economy::UpdatePriceRequest& request, ::mruv::economy::UpdatePriceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdatePrice_, context, request, response);
}

void MruVEconomyService::Stub::experimental_async::UpdatePrice(::grpc::ClientContext* context, const ::mruv::economy::UpdatePriceRequest* request, ::mruv::economy::UpdatePriceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdatePrice_, context, request, response, std::move(f));
}

void MruVEconomyService::Stub::experimental_async::UpdatePrice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::UpdatePriceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdatePrice_, context, request, response, std::move(f));
}

void MruVEconomyService::Stub::experimental_async::UpdatePrice(::grpc::ClientContext* context, const ::mruv::economy::UpdatePriceRequest* request, ::mruv::economy::UpdatePriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdatePrice_, context, request, response, reactor);
}

void MruVEconomyService::Stub::experimental_async::UpdatePrice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::UpdatePriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdatePrice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::UpdatePriceResponse>* MruVEconomyService::Stub::AsyncUpdatePriceRaw(::grpc::ClientContext* context, const ::mruv::economy::UpdatePriceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::UpdatePriceResponse>::Create(channel_.get(), cq, rpcmethod_UpdatePrice_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::UpdatePriceResponse>* MruVEconomyService::Stub::PrepareAsyncUpdatePriceRaw(::grpc::ClientContext* context, const ::mruv::economy::UpdatePriceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::UpdatePriceResponse>::Create(channel_.get(), cq, rpcmethod_UpdatePrice_, context, request, false);
}

::grpc::Status MruVEconomyService::Stub::GetPrice(::grpc::ClientContext* context, const ::mruv::economy::GetPriceRequest& request, ::mruv::economy::GetPriceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetPrice_, context, request, response);
}

void MruVEconomyService::Stub::experimental_async::GetPrice(::grpc::ClientContext* context, const ::mruv::economy::GetPriceRequest* request, ::mruv::economy::GetPriceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPrice_, context, request, response, std::move(f));
}

void MruVEconomyService::Stub::experimental_async::GetPrice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::GetPriceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPrice_, context, request, response, std::move(f));
}

void MruVEconomyService::Stub::experimental_async::GetPrice(::grpc::ClientContext* context, const ::mruv::economy::GetPriceRequest* request, ::mruv::economy::GetPriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPrice_, context, request, response, reactor);
}

void MruVEconomyService::Stub::experimental_async::GetPrice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::GetPriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPrice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::GetPriceResponse>* MruVEconomyService::Stub::AsyncGetPriceRaw(::grpc::ClientContext* context, const ::mruv::economy::GetPriceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::GetPriceResponse>::Create(channel_.get(), cq, rpcmethod_GetPrice_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::GetPriceResponse>* MruVEconomyService::Stub::PrepareAsyncGetPriceRaw(::grpc::ClientContext* context, const ::mruv::economy::GetPriceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::GetPriceResponse>::Create(channel_.get(), cq, rpcmethod_GetPrice_, context, request, false);
}

::grpc::Status MruVEconomyService::Stub::BuyProduct(::grpc::ClientContext* context, const ::mruv::economy::BuyProductRequest& request, ::mruv::economy::BuyProductResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_BuyProduct_, context, request, response);
}

void MruVEconomyService::Stub::experimental_async::BuyProduct(::grpc::ClientContext* context, const ::mruv::economy::BuyProductRequest* request, ::mruv::economy::BuyProductResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_BuyProduct_, context, request, response, std::move(f));
}

void MruVEconomyService::Stub::experimental_async::BuyProduct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::BuyProductResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_BuyProduct_, context, request, response, std::move(f));
}

void MruVEconomyService::Stub::experimental_async::BuyProduct(::grpc::ClientContext* context, const ::mruv::economy::BuyProductRequest* request, ::mruv::economy::BuyProductResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_BuyProduct_, context, request, response, reactor);
}

void MruVEconomyService::Stub::experimental_async::BuyProduct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::BuyProductResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_BuyProduct_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::BuyProductResponse>* MruVEconomyService::Stub::AsyncBuyProductRaw(::grpc::ClientContext* context, const ::mruv::economy::BuyProductRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::BuyProductResponse>::Create(channel_.get(), cq, rpcmethod_BuyProduct_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::BuyProductResponse>* MruVEconomyService::Stub::PrepareAsyncBuyProductRaw(::grpc::ClientContext* context, const ::mruv::economy::BuyProductRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::BuyProductResponse>::Create(channel_.get(), cq, rpcmethod_BuyProduct_, context, request, false);
}

::grpc::ClientReader< ::mruv::economy::WatchProductResponse>* MruVEconomyService::Stub::WatchProductRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchProductRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::mruv::economy::WatchProductResponse>::Create(channel_.get(), rpcmethod_WatchProduct_, context, request);
}

void MruVEconomyService::Stub::experimental_async::WatchProduct(::grpc::ClientContext* context, ::mruv::economy::WatchProductRequest* request, ::grpc::experimental::ClientReadReactor< ::mruv::economy::WatchProductResponse>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::mruv::economy::WatchProductResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_WatchProduct_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mruv::economy::WatchProductResponse>* MruVEconomyService::Stub::AsyncWatchProductRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchProductRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::mruv::economy::WatchProductResponse>::Create(channel_.get(), cq, rpcmethod_WatchProduct_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mruv::economy::WatchProductResponse>* MruVEconomyService::Stub::PrepareAsyncWatchProductRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchProductRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::mruv::economy::WatchProductResponse>::Create(channel_.get(), cq, rpcmethod_WatchProduct_, context, request, false, nullptr);
}

::grpc::ClientReader< ::mruv::economy::WatchPriceResponse>* MruVEconomyService::Stub::WatchPriceRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchPriceRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::mruv::economy::WatchPriceResponse>::Create(channel_.get(), rpcmethod_WatchPrice_, context, request);
}

void MruVEconomyService::Stub::experimental_async::WatchPrice(::grpc::ClientContext* context, ::mruv::economy::WatchPriceRequest* request, ::grpc::experimental::ClientReadReactor< ::mruv::economy::WatchPriceResponse>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::mruv::economy::WatchPriceResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_WatchPrice_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mruv::economy::WatchPriceResponse>* MruVEconomyService::Stub::AsyncWatchPriceRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchPriceRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::mruv::economy::WatchPriceResponse>::Create(channel_.get(), cq, rpcmethod_WatchPrice_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mruv::economy::WatchPriceResponse>* MruVEconomyService::Stub::PrepareAsyncWatchPriceRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchPriceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::mruv::economy::WatchPriceResponse>::Create(channel_.get(), cq, rpcmethod_WatchPrice_, context, request, false, nullptr);
}

MruVEconomyService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVEconomyService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVEconomyService::Service, ::mruv::economy::RegisterProductRequest, ::mruv::economy::RegisterProductResponse>(
          std::mem_fn(&MruVEconomyService::Service::RegisterProduct), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVEconomyService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVEconomyService::Service, ::mruv::economy::GetProductRequest, ::mruv::economy::GetProductResponse>(
          std::mem_fn(&MruVEconomyService::Service::GetProduct), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVEconomyService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVEconomyService::Service, ::mruv::economy::UpdateProductRequest, ::mruv::economy::UpdateProductResponse>(
          std::mem_fn(&MruVEconomyService::Service::UpdateProduct), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVEconomyService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVEconomyService::Service, ::mruv::economy::DeleteProductRequest, ::mruv::economy::DeleteProductResponse>(
          std::mem_fn(&MruVEconomyService::Service::DeleteProduct), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVEconomyService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVEconomyService::Service, ::mruv::economy::UpdatePriceRequest, ::mruv::economy::UpdatePriceResponse>(
          std::mem_fn(&MruVEconomyService::Service::UpdatePrice), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVEconomyService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVEconomyService::Service, ::mruv::economy::GetPriceRequest, ::mruv::economy::GetPriceResponse>(
          std::mem_fn(&MruVEconomyService::Service::GetPrice), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVEconomyService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVEconomyService::Service, ::mruv::economy::BuyProductRequest, ::mruv::economy::BuyProductResponse>(
          std::mem_fn(&MruVEconomyService::Service::BuyProduct), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVEconomyService_method_names[7],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MruVEconomyService::Service, ::mruv::economy::WatchProductRequest, ::mruv::economy::WatchProductResponse>(
          std::mem_fn(&MruVEconomyService::Service::WatchProduct), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVEconomyService_method_names[8],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MruVEconomyService::Service, ::mruv::economy::WatchPriceRequest, ::mruv::economy::WatchPriceResponse>(
          std::mem_fn(&MruVEconomyService::Service::WatchPrice), this)));
}

MruVEconomyService::Service::~Service() {
}

::grpc::Status MruVEconomyService::Service::RegisterProduct(::grpc::ServerContext* context, const ::mruv::economy::RegisterProductRequest* request, ::mruv::economy::RegisterProductResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVEconomyService::Service::GetProduct(::grpc::ServerContext* context, const ::mruv::economy::GetProductRequest* request, ::mruv::economy::GetProductResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVEconomyService::Service::UpdateProduct(::grpc::ServerContext* context, const ::mruv::economy::UpdateProductRequest* request, ::mruv::economy::UpdateProductResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVEconomyService::Service::DeleteProduct(::grpc::ServerContext* context, const ::mruv::economy::DeleteProductRequest* request, ::mruv::economy::DeleteProductResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVEconomyService::Service::UpdatePrice(::grpc::ServerContext* context, const ::mruv::economy::UpdatePriceRequest* request, ::mruv::economy::UpdatePriceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVEconomyService::Service::GetPrice(::grpc::ServerContext* context, const ::mruv::economy::GetPriceRequest* request, ::mruv::economy::GetPriceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVEconomyService::Service::BuyProduct(::grpc::ServerContext* context, const ::mruv::economy::BuyProductRequest* request, ::mruv::economy::BuyProductResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVEconomyService::Service::WatchProduct(::grpc::ServerContext* context, const ::mruv::economy::WatchProductRequest* request, ::grpc::ServerWriter< ::mruv::economy::WatchProductResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVEconomyService::Service::WatchPrice(::grpc::ServerContext* context, const ::mruv::economy::WatchPriceRequest* request, ::grpc::ServerWriter< ::mruv::economy::WatchPriceResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mruv
}  // namespace economy

