// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: economy/economy.proto
#ifndef GRPC_economy_2feconomy_2eproto__INCLUDED
#define GRPC_economy_2feconomy_2eproto__INCLUDED

#include "economy/economy.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace mruv {
namespace economy {

// The MruV economy service provides procedures for managing prices and economy.
class MruVEconomyService final {
 public:
  static constexpr char const* service_full_name() {
    return "mruv.economy.MruVEconomyService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Register price in economy system.
    virtual ::grpc::Status RegisterProduct(::grpc::ClientContext* context, const ::mruv::economy::RegisterProductRequest& request, ::mruv::economy::RegisterProductResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::economy::RegisterProductResponse>> AsyncRegisterProduct(::grpc::ClientContext* context, const ::mruv::economy::RegisterProductRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::economy::RegisterProductResponse>>(AsyncRegisterProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::economy::RegisterProductResponse>> PrepareAsyncRegisterProduct(::grpc::ClientContext* context, const ::mruv::economy::RegisterProductRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::economy::RegisterProductResponse>>(PrepareAsyncRegisterProductRaw(context, request, cq));
    }
    // Get product information.
    virtual ::grpc::Status GetProduct(::grpc::ClientContext* context, const ::mruv::economy::GetProductRequest& request, ::mruv::economy::GetProductResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::economy::GetProductResponse>> AsyncGetProduct(::grpc::ClientContext* context, const ::mruv::economy::GetProductRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::economy::GetProductResponse>>(AsyncGetProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::economy::GetProductResponse>> PrepareAsyncGetProduct(::grpc::ClientContext* context, const ::mruv::economy::GetProductRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::economy::GetProductResponse>>(PrepareAsyncGetProductRaw(context, request, cq));
    }
    // Update product information.
    virtual ::grpc::Status UpdateProduct(::grpc::ClientContext* context, const ::mruv::economy::UpdateProductRequest& request, ::mruv::economy::UpdateProductResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::economy::UpdateProductResponse>> AsyncUpdateProduct(::grpc::ClientContext* context, const ::mruv::economy::UpdateProductRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::economy::UpdateProductResponse>>(AsyncUpdateProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::economy::UpdateProductResponse>> PrepareAsyncUpdateProduct(::grpc::ClientContext* context, const ::mruv::economy::UpdateProductRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::economy::UpdateProductResponse>>(PrepareAsyncUpdateProductRaw(context, request, cq));
    }
    //
    virtual ::grpc::Status DeleteProduct(::grpc::ClientContext* context, const ::mruv::economy::DeleteProductRequest& request, ::mruv::economy::DeleteProductResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::economy::DeleteProductResponse>> AsyncDeleteProduct(::grpc::ClientContext* context, const ::mruv::economy::DeleteProductRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::economy::DeleteProductResponse>>(AsyncDeleteProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::economy::DeleteProductResponse>> PrepareAsyncDeleteProduct(::grpc::ClientContext* context, const ::mruv::economy::DeleteProductRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::economy::DeleteProductResponse>>(PrepareAsyncDeleteProductRaw(context, request, cq));
    }
    // Update product price.
    virtual ::grpc::Status UpdatePrice(::grpc::ClientContext* context, const ::mruv::economy::UpdatePriceRequest& request, ::mruv::economy::UpdatePriceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::economy::UpdatePriceResponse>> AsyncUpdatePrice(::grpc::ClientContext* context, const ::mruv::economy::UpdatePriceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::economy::UpdatePriceResponse>>(AsyncUpdatePriceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::economy::UpdatePriceResponse>> PrepareAsyncUpdatePrice(::grpc::ClientContext* context, const ::mruv::economy::UpdatePriceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::economy::UpdatePriceResponse>>(PrepareAsyncUpdatePriceRaw(context, request, cq));
    }
    // Get current value for registered price.
    virtual ::grpc::Status GetPrice(::grpc::ClientContext* context, const ::mruv::economy::GetPriceRequest& request, ::mruv::economy::GetPriceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::economy::GetPriceResponse>> AsyncGetPrice(::grpc::ClientContext* context, const ::mruv::economy::GetPriceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::economy::GetPriceResponse>>(AsyncGetPriceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::economy::GetPriceResponse>> PrepareAsyncGetPrice(::grpc::ClientContext* context, const ::mruv::economy::GetPriceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::economy::GetPriceResponse>>(PrepareAsyncGetPriceRaw(context, request, cq));
    }
    // Send information to the system, that the product has been purchased.
    // This rpc call can affect a product price.
    virtual ::grpc::Status BuyProduct(::grpc::ClientContext* context, const ::mruv::economy::BuyProductRequest& request, ::mruv::economy::BuyProductResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::economy::BuyProductResponse>> AsyncBuyProduct(::grpc::ClientContext* context, const ::mruv::economy::BuyProductRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::economy::BuyProductResponse>>(AsyncBuyProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::economy::BuyProductResponse>> PrepareAsyncBuyProduct(::grpc::ClientContext* context, const ::mruv::economy::BuyProductRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::economy::BuyProductResponse>>(PrepareAsyncBuyProductRaw(context, request, cq));
    }
    // Subscribe to events related to a product.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mruv::economy::WatchProductResponse>> WatchProduct(::grpc::ClientContext* context, const ::mruv::economy::WatchProductRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mruv::economy::WatchProductResponse>>(WatchProductRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mruv::economy::WatchProductResponse>> AsyncWatchProduct(::grpc::ClientContext* context, const ::mruv::economy::WatchProductRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mruv::economy::WatchProductResponse>>(AsyncWatchProductRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mruv::economy::WatchProductResponse>> PrepareAsyncWatchProduct(::grpc::ClientContext* context, const ::mruv::economy::WatchProductRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mruv::economy::WatchProductResponse>>(PrepareAsyncWatchProductRaw(context, request, cq));
    }
    // Subscribe to product price changes.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mruv::economy::WatchPriceResponse>> WatchPrice(::grpc::ClientContext* context, const ::mruv::economy::WatchPriceRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mruv::economy::WatchPriceResponse>>(WatchPriceRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mruv::economy::WatchPriceResponse>> AsyncWatchPrice(::grpc::ClientContext* context, const ::mruv::economy::WatchPriceRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mruv::economy::WatchPriceResponse>>(AsyncWatchPriceRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mruv::economy::WatchPriceResponse>> PrepareAsyncWatchPrice(::grpc::ClientContext* context, const ::mruv::economy::WatchPriceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mruv::economy::WatchPriceResponse>>(PrepareAsyncWatchPriceRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Register price in economy system.
      virtual void RegisterProduct(::grpc::ClientContext* context, const ::mruv::economy::RegisterProductRequest* request, ::mruv::economy::RegisterProductResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterProduct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::RegisterProductResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RegisterProduct(::grpc::ClientContext* context, const ::mruv::economy::RegisterProductRequest* request, ::mruv::economy::RegisterProductResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RegisterProduct(::grpc::ClientContext* context, const ::mruv::economy::RegisterProductRequest* request, ::mruv::economy::RegisterProductResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RegisterProduct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::RegisterProductResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RegisterProduct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::RegisterProductResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get product information.
      virtual void GetProduct(::grpc::ClientContext* context, const ::mruv::economy::GetProductRequest* request, ::mruv::economy::GetProductResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetProduct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::GetProductResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetProduct(::grpc::ClientContext* context, const ::mruv::economy::GetProductRequest* request, ::mruv::economy::GetProductResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetProduct(::grpc::ClientContext* context, const ::mruv::economy::GetProductRequest* request, ::mruv::economy::GetProductResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetProduct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::GetProductResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetProduct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::GetProductResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Update product information.
      virtual void UpdateProduct(::grpc::ClientContext* context, const ::mruv::economy::UpdateProductRequest* request, ::mruv::economy::UpdateProductResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateProduct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::UpdateProductResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateProduct(::grpc::ClientContext* context, const ::mruv::economy::UpdateProductRequest* request, ::mruv::economy::UpdateProductResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateProduct(::grpc::ClientContext* context, const ::mruv::economy::UpdateProductRequest* request, ::mruv::economy::UpdateProductResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateProduct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::UpdateProductResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateProduct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::UpdateProductResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      //
      virtual void DeleteProduct(::grpc::ClientContext* context, const ::mruv::economy::DeleteProductRequest* request, ::mruv::economy::DeleteProductResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteProduct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::DeleteProductResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteProduct(::grpc::ClientContext* context, const ::mruv::economy::DeleteProductRequest* request, ::mruv::economy::DeleteProductResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteProduct(::grpc::ClientContext* context, const ::mruv::economy::DeleteProductRequest* request, ::mruv::economy::DeleteProductResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteProduct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::DeleteProductResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteProduct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::DeleteProductResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Update product price.
      virtual void UpdatePrice(::grpc::ClientContext* context, const ::mruv::economy::UpdatePriceRequest* request, ::mruv::economy::UpdatePriceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdatePrice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::UpdatePriceResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdatePrice(::grpc::ClientContext* context, const ::mruv::economy::UpdatePriceRequest* request, ::mruv::economy::UpdatePriceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdatePrice(::grpc::ClientContext* context, const ::mruv::economy::UpdatePriceRequest* request, ::mruv::economy::UpdatePriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdatePrice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::UpdatePriceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdatePrice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::UpdatePriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get current value for registered price.
      virtual void GetPrice(::grpc::ClientContext* context, const ::mruv::economy::GetPriceRequest* request, ::mruv::economy::GetPriceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPrice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::GetPriceResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetPrice(::grpc::ClientContext* context, const ::mruv::economy::GetPriceRequest* request, ::mruv::economy::GetPriceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetPrice(::grpc::ClientContext* context, const ::mruv::economy::GetPriceRequest* request, ::mruv::economy::GetPriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetPrice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::GetPriceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetPrice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::GetPriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Send information to the system, that the product has been purchased.
      // This rpc call can affect a product price.
      virtual void BuyProduct(::grpc::ClientContext* context, const ::mruv::economy::BuyProductRequest* request, ::mruv::economy::BuyProductResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BuyProduct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::BuyProductResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void BuyProduct(::grpc::ClientContext* context, const ::mruv::economy::BuyProductRequest* request, ::mruv::economy::BuyProductResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void BuyProduct(::grpc::ClientContext* context, const ::mruv::economy::BuyProductRequest* request, ::mruv::economy::BuyProductResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void BuyProduct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::BuyProductResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void BuyProduct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::BuyProductResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Subscribe to events related to a product.
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void WatchProduct(::grpc::ClientContext* context, ::mruv::economy::WatchProductRequest* request, ::grpc::ClientReadReactor< ::mruv::economy::WatchProductResponse>* reactor) = 0;
      #else
      virtual void WatchProduct(::grpc::ClientContext* context, ::mruv::economy::WatchProductRequest* request, ::grpc::experimental::ClientReadReactor< ::mruv::economy::WatchProductResponse>* reactor) = 0;
      #endif
      // Subscribe to product price changes.
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void WatchPrice(::grpc::ClientContext* context, ::mruv::economy::WatchPriceRequest* request, ::grpc::ClientReadReactor< ::mruv::economy::WatchPriceResponse>* reactor) = 0;
      #else
      virtual void WatchPrice(::grpc::ClientContext* context, ::mruv::economy::WatchPriceRequest* request, ::grpc::experimental::ClientReadReactor< ::mruv::economy::WatchPriceResponse>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::economy::RegisterProductResponse>* AsyncRegisterProductRaw(::grpc::ClientContext* context, const ::mruv::economy::RegisterProductRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::economy::RegisterProductResponse>* PrepareAsyncRegisterProductRaw(::grpc::ClientContext* context, const ::mruv::economy::RegisterProductRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::economy::GetProductResponse>* AsyncGetProductRaw(::grpc::ClientContext* context, const ::mruv::economy::GetProductRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::economy::GetProductResponse>* PrepareAsyncGetProductRaw(::grpc::ClientContext* context, const ::mruv::economy::GetProductRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::economy::UpdateProductResponse>* AsyncUpdateProductRaw(::grpc::ClientContext* context, const ::mruv::economy::UpdateProductRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::economy::UpdateProductResponse>* PrepareAsyncUpdateProductRaw(::grpc::ClientContext* context, const ::mruv::economy::UpdateProductRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::economy::DeleteProductResponse>* AsyncDeleteProductRaw(::grpc::ClientContext* context, const ::mruv::economy::DeleteProductRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::economy::DeleteProductResponse>* PrepareAsyncDeleteProductRaw(::grpc::ClientContext* context, const ::mruv::economy::DeleteProductRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::economy::UpdatePriceResponse>* AsyncUpdatePriceRaw(::grpc::ClientContext* context, const ::mruv::economy::UpdatePriceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::economy::UpdatePriceResponse>* PrepareAsyncUpdatePriceRaw(::grpc::ClientContext* context, const ::mruv::economy::UpdatePriceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::economy::GetPriceResponse>* AsyncGetPriceRaw(::grpc::ClientContext* context, const ::mruv::economy::GetPriceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::economy::GetPriceResponse>* PrepareAsyncGetPriceRaw(::grpc::ClientContext* context, const ::mruv::economy::GetPriceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::economy::BuyProductResponse>* AsyncBuyProductRaw(::grpc::ClientContext* context, const ::mruv::economy::BuyProductRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::economy::BuyProductResponse>* PrepareAsyncBuyProductRaw(::grpc::ClientContext* context, const ::mruv::economy::BuyProductRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::mruv::economy::WatchProductResponse>* WatchProductRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchProductRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mruv::economy::WatchProductResponse>* AsyncWatchProductRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchProductRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mruv::economy::WatchProductResponse>* PrepareAsyncWatchProductRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchProductRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::mruv::economy::WatchPriceResponse>* WatchPriceRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchPriceRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mruv::economy::WatchPriceResponse>* AsyncWatchPriceRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchPriceRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mruv::economy::WatchPriceResponse>* PrepareAsyncWatchPriceRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchPriceRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status RegisterProduct(::grpc::ClientContext* context, const ::mruv::economy::RegisterProductRequest& request, ::mruv::economy::RegisterProductResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::economy::RegisterProductResponse>> AsyncRegisterProduct(::grpc::ClientContext* context, const ::mruv::economy::RegisterProductRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::economy::RegisterProductResponse>>(AsyncRegisterProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::economy::RegisterProductResponse>> PrepareAsyncRegisterProduct(::grpc::ClientContext* context, const ::mruv::economy::RegisterProductRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::economy::RegisterProductResponse>>(PrepareAsyncRegisterProductRaw(context, request, cq));
    }
    ::grpc::Status GetProduct(::grpc::ClientContext* context, const ::mruv::economy::GetProductRequest& request, ::mruv::economy::GetProductResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::economy::GetProductResponse>> AsyncGetProduct(::grpc::ClientContext* context, const ::mruv::economy::GetProductRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::economy::GetProductResponse>>(AsyncGetProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::economy::GetProductResponse>> PrepareAsyncGetProduct(::grpc::ClientContext* context, const ::mruv::economy::GetProductRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::economy::GetProductResponse>>(PrepareAsyncGetProductRaw(context, request, cq));
    }
    ::grpc::Status UpdateProduct(::grpc::ClientContext* context, const ::mruv::economy::UpdateProductRequest& request, ::mruv::economy::UpdateProductResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::economy::UpdateProductResponse>> AsyncUpdateProduct(::grpc::ClientContext* context, const ::mruv::economy::UpdateProductRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::economy::UpdateProductResponse>>(AsyncUpdateProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::economy::UpdateProductResponse>> PrepareAsyncUpdateProduct(::grpc::ClientContext* context, const ::mruv::economy::UpdateProductRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::economy::UpdateProductResponse>>(PrepareAsyncUpdateProductRaw(context, request, cq));
    }
    ::grpc::Status DeleteProduct(::grpc::ClientContext* context, const ::mruv::economy::DeleteProductRequest& request, ::mruv::economy::DeleteProductResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::economy::DeleteProductResponse>> AsyncDeleteProduct(::grpc::ClientContext* context, const ::mruv::economy::DeleteProductRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::economy::DeleteProductResponse>>(AsyncDeleteProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::economy::DeleteProductResponse>> PrepareAsyncDeleteProduct(::grpc::ClientContext* context, const ::mruv::economy::DeleteProductRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::economy::DeleteProductResponse>>(PrepareAsyncDeleteProductRaw(context, request, cq));
    }
    ::grpc::Status UpdatePrice(::grpc::ClientContext* context, const ::mruv::economy::UpdatePriceRequest& request, ::mruv::economy::UpdatePriceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::economy::UpdatePriceResponse>> AsyncUpdatePrice(::grpc::ClientContext* context, const ::mruv::economy::UpdatePriceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::economy::UpdatePriceResponse>>(AsyncUpdatePriceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::economy::UpdatePriceResponse>> PrepareAsyncUpdatePrice(::grpc::ClientContext* context, const ::mruv::economy::UpdatePriceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::economy::UpdatePriceResponse>>(PrepareAsyncUpdatePriceRaw(context, request, cq));
    }
    ::grpc::Status GetPrice(::grpc::ClientContext* context, const ::mruv::economy::GetPriceRequest& request, ::mruv::economy::GetPriceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::economy::GetPriceResponse>> AsyncGetPrice(::grpc::ClientContext* context, const ::mruv::economy::GetPriceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::economy::GetPriceResponse>>(AsyncGetPriceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::economy::GetPriceResponse>> PrepareAsyncGetPrice(::grpc::ClientContext* context, const ::mruv::economy::GetPriceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::economy::GetPriceResponse>>(PrepareAsyncGetPriceRaw(context, request, cq));
    }
    ::grpc::Status BuyProduct(::grpc::ClientContext* context, const ::mruv::economy::BuyProductRequest& request, ::mruv::economy::BuyProductResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::economy::BuyProductResponse>> AsyncBuyProduct(::grpc::ClientContext* context, const ::mruv::economy::BuyProductRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::economy::BuyProductResponse>>(AsyncBuyProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::economy::BuyProductResponse>> PrepareAsyncBuyProduct(::grpc::ClientContext* context, const ::mruv::economy::BuyProductRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::economy::BuyProductResponse>>(PrepareAsyncBuyProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::mruv::economy::WatchProductResponse>> WatchProduct(::grpc::ClientContext* context, const ::mruv::economy::WatchProductRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mruv::economy::WatchProductResponse>>(WatchProductRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mruv::economy::WatchProductResponse>> AsyncWatchProduct(::grpc::ClientContext* context, const ::mruv::economy::WatchProductRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mruv::economy::WatchProductResponse>>(AsyncWatchProductRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mruv::economy::WatchProductResponse>> PrepareAsyncWatchProduct(::grpc::ClientContext* context, const ::mruv::economy::WatchProductRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mruv::economy::WatchProductResponse>>(PrepareAsyncWatchProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::mruv::economy::WatchPriceResponse>> WatchPrice(::grpc::ClientContext* context, const ::mruv::economy::WatchPriceRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mruv::economy::WatchPriceResponse>>(WatchPriceRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mruv::economy::WatchPriceResponse>> AsyncWatchPrice(::grpc::ClientContext* context, const ::mruv::economy::WatchPriceRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mruv::economy::WatchPriceResponse>>(AsyncWatchPriceRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mruv::economy::WatchPriceResponse>> PrepareAsyncWatchPrice(::grpc::ClientContext* context, const ::mruv::economy::WatchPriceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mruv::economy::WatchPriceResponse>>(PrepareAsyncWatchPriceRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void RegisterProduct(::grpc::ClientContext* context, const ::mruv::economy::RegisterProductRequest* request, ::mruv::economy::RegisterProductResponse* response, std::function<void(::grpc::Status)>) override;
      void RegisterProduct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::RegisterProductResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RegisterProduct(::grpc::ClientContext* context, const ::mruv::economy::RegisterProductRequest* request, ::mruv::economy::RegisterProductResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RegisterProduct(::grpc::ClientContext* context, const ::mruv::economy::RegisterProductRequest* request, ::mruv::economy::RegisterProductResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RegisterProduct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::RegisterProductResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RegisterProduct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::RegisterProductResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetProduct(::grpc::ClientContext* context, const ::mruv::economy::GetProductRequest* request, ::mruv::economy::GetProductResponse* response, std::function<void(::grpc::Status)>) override;
      void GetProduct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::GetProductResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetProduct(::grpc::ClientContext* context, const ::mruv::economy::GetProductRequest* request, ::mruv::economy::GetProductResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetProduct(::grpc::ClientContext* context, const ::mruv::economy::GetProductRequest* request, ::mruv::economy::GetProductResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetProduct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::GetProductResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetProduct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::GetProductResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateProduct(::grpc::ClientContext* context, const ::mruv::economy::UpdateProductRequest* request, ::mruv::economy::UpdateProductResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateProduct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::UpdateProductResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateProduct(::grpc::ClientContext* context, const ::mruv::economy::UpdateProductRequest* request, ::mruv::economy::UpdateProductResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateProduct(::grpc::ClientContext* context, const ::mruv::economy::UpdateProductRequest* request, ::mruv::economy::UpdateProductResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateProduct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::UpdateProductResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateProduct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::UpdateProductResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteProduct(::grpc::ClientContext* context, const ::mruv::economy::DeleteProductRequest* request, ::mruv::economy::DeleteProductResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteProduct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::DeleteProductResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteProduct(::grpc::ClientContext* context, const ::mruv::economy::DeleteProductRequest* request, ::mruv::economy::DeleteProductResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteProduct(::grpc::ClientContext* context, const ::mruv::economy::DeleteProductRequest* request, ::mruv::economy::DeleteProductResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteProduct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::DeleteProductResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteProduct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::DeleteProductResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdatePrice(::grpc::ClientContext* context, const ::mruv::economy::UpdatePriceRequest* request, ::mruv::economy::UpdatePriceResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdatePrice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::UpdatePriceResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdatePrice(::grpc::ClientContext* context, const ::mruv::economy::UpdatePriceRequest* request, ::mruv::economy::UpdatePriceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdatePrice(::grpc::ClientContext* context, const ::mruv::economy::UpdatePriceRequest* request, ::mruv::economy::UpdatePriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdatePrice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::UpdatePriceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdatePrice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::UpdatePriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetPrice(::grpc::ClientContext* context, const ::mruv::economy::GetPriceRequest* request, ::mruv::economy::GetPriceResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPrice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::GetPriceResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetPrice(::grpc::ClientContext* context, const ::mruv::economy::GetPriceRequest* request, ::mruv::economy::GetPriceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetPrice(::grpc::ClientContext* context, const ::mruv::economy::GetPriceRequest* request, ::mruv::economy::GetPriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetPrice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::GetPriceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetPrice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::GetPriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void BuyProduct(::grpc::ClientContext* context, const ::mruv::economy::BuyProductRequest* request, ::mruv::economy::BuyProductResponse* response, std::function<void(::grpc::Status)>) override;
      void BuyProduct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::BuyProductResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void BuyProduct(::grpc::ClientContext* context, const ::mruv::economy::BuyProductRequest* request, ::mruv::economy::BuyProductResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void BuyProduct(::grpc::ClientContext* context, const ::mruv::economy::BuyProductRequest* request, ::mruv::economy::BuyProductResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void BuyProduct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::BuyProductResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void BuyProduct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::BuyProductResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void WatchProduct(::grpc::ClientContext* context, ::mruv::economy::WatchProductRequest* request, ::grpc::ClientReadReactor< ::mruv::economy::WatchProductResponse>* reactor) override;
      #else
      void WatchProduct(::grpc::ClientContext* context, ::mruv::economy::WatchProductRequest* request, ::grpc::experimental::ClientReadReactor< ::mruv::economy::WatchProductResponse>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void WatchPrice(::grpc::ClientContext* context, ::mruv::economy::WatchPriceRequest* request, ::grpc::ClientReadReactor< ::mruv::economy::WatchPriceResponse>* reactor) override;
      #else
      void WatchPrice(::grpc::ClientContext* context, ::mruv::economy::WatchPriceRequest* request, ::grpc::experimental::ClientReadReactor< ::mruv::economy::WatchPriceResponse>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mruv::economy::RegisterProductResponse>* AsyncRegisterProductRaw(::grpc::ClientContext* context, const ::mruv::economy::RegisterProductRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::economy::RegisterProductResponse>* PrepareAsyncRegisterProductRaw(::grpc::ClientContext* context, const ::mruv::economy::RegisterProductRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::economy::GetProductResponse>* AsyncGetProductRaw(::grpc::ClientContext* context, const ::mruv::economy::GetProductRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::economy::GetProductResponse>* PrepareAsyncGetProductRaw(::grpc::ClientContext* context, const ::mruv::economy::GetProductRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::economy::UpdateProductResponse>* AsyncUpdateProductRaw(::grpc::ClientContext* context, const ::mruv::economy::UpdateProductRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::economy::UpdateProductResponse>* PrepareAsyncUpdateProductRaw(::grpc::ClientContext* context, const ::mruv::economy::UpdateProductRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::economy::DeleteProductResponse>* AsyncDeleteProductRaw(::grpc::ClientContext* context, const ::mruv::economy::DeleteProductRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::economy::DeleteProductResponse>* PrepareAsyncDeleteProductRaw(::grpc::ClientContext* context, const ::mruv::economy::DeleteProductRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::economy::UpdatePriceResponse>* AsyncUpdatePriceRaw(::grpc::ClientContext* context, const ::mruv::economy::UpdatePriceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::economy::UpdatePriceResponse>* PrepareAsyncUpdatePriceRaw(::grpc::ClientContext* context, const ::mruv::economy::UpdatePriceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::economy::GetPriceResponse>* AsyncGetPriceRaw(::grpc::ClientContext* context, const ::mruv::economy::GetPriceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::economy::GetPriceResponse>* PrepareAsyncGetPriceRaw(::grpc::ClientContext* context, const ::mruv::economy::GetPriceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::economy::BuyProductResponse>* AsyncBuyProductRaw(::grpc::ClientContext* context, const ::mruv::economy::BuyProductRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::economy::BuyProductResponse>* PrepareAsyncBuyProductRaw(::grpc::ClientContext* context, const ::mruv::economy::BuyProductRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::mruv::economy::WatchProductResponse>* WatchProductRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchProductRequest& request) override;
    ::grpc::ClientAsyncReader< ::mruv::economy::WatchProductResponse>* AsyncWatchProductRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchProductRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mruv::economy::WatchProductResponse>* PrepareAsyncWatchProductRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchProductRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::mruv::economy::WatchPriceResponse>* WatchPriceRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchPriceRequest& request) override;
    ::grpc::ClientAsyncReader< ::mruv::economy::WatchPriceResponse>* AsyncWatchPriceRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchPriceRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mruv::economy::WatchPriceResponse>* PrepareAsyncWatchPriceRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchPriceRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterProduct_;
    const ::grpc::internal::RpcMethod rpcmethod_GetProduct_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateProduct_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteProduct_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdatePrice_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPrice_;
    const ::grpc::internal::RpcMethod rpcmethod_BuyProduct_;
    const ::grpc::internal::RpcMethod rpcmethod_WatchProduct_;
    const ::grpc::internal::RpcMethod rpcmethod_WatchPrice_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Register price in economy system.
    virtual ::grpc::Status RegisterProduct(::grpc::ServerContext* context, const ::mruv::economy::RegisterProductRequest* request, ::mruv::economy::RegisterProductResponse* response);
    // Get product information.
    virtual ::grpc::Status GetProduct(::grpc::ServerContext* context, const ::mruv::economy::GetProductRequest* request, ::mruv::economy::GetProductResponse* response);
    // Update product information.
    virtual ::grpc::Status UpdateProduct(::grpc::ServerContext* context, const ::mruv::economy::UpdateProductRequest* request, ::mruv::economy::UpdateProductResponse* response);
    //
    virtual ::grpc::Status DeleteProduct(::grpc::ServerContext* context, const ::mruv::economy::DeleteProductRequest* request, ::mruv::economy::DeleteProductResponse* response);
    // Update product price.
    virtual ::grpc::Status UpdatePrice(::grpc::ServerContext* context, const ::mruv::economy::UpdatePriceRequest* request, ::mruv::economy::UpdatePriceResponse* response);
    // Get current value for registered price.
    virtual ::grpc::Status GetPrice(::grpc::ServerContext* context, const ::mruv::economy::GetPriceRequest* request, ::mruv::economy::GetPriceResponse* response);
    // Send information to the system, that the product has been purchased.
    // This rpc call can affect a product price.
    virtual ::grpc::Status BuyProduct(::grpc::ServerContext* context, const ::mruv::economy::BuyProductRequest* request, ::mruv::economy::BuyProductResponse* response);
    // Subscribe to events related to a product.
    virtual ::grpc::Status WatchProduct(::grpc::ServerContext* context, const ::mruv::economy::WatchProductRequest* request, ::grpc::ServerWriter< ::mruv::economy::WatchProductResponse>* writer);
    // Subscribe to product price changes.
    virtual ::grpc::Status WatchPrice(::grpc::ServerContext* context, const ::mruv::economy::WatchPriceRequest* request, ::grpc::ServerWriter< ::mruv::economy::WatchPriceResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterProduct() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RegisterProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterProduct(::grpc::ServerContext* /*context*/, const ::mruv::economy::RegisterProductRequest* /*request*/, ::mruv::economy::RegisterProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterProduct(::grpc::ServerContext* context, ::mruv::economy::RegisterProductRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::economy::RegisterProductResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetProduct() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProduct(::grpc::ServerContext* /*context*/, const ::mruv::economy::GetProductRequest* /*request*/, ::mruv::economy::GetProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProduct(::grpc::ServerContext* context, ::mruv::economy::GetProductRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::economy::GetProductResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateProduct() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateProduct(::grpc::ServerContext* /*context*/, const ::mruv::economy::UpdateProductRequest* /*request*/, ::mruv::economy::UpdateProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateProduct(::grpc::ServerContext* context, ::mruv::economy::UpdateProductRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::economy::UpdateProductResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteProduct() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteProduct(::grpc::ServerContext* /*context*/, const ::mruv::economy::DeleteProductRequest* /*request*/, ::mruv::economy::DeleteProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteProduct(::grpc::ServerContext* context, ::mruv::economy::DeleteProductRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::economy::DeleteProductResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdatePrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdatePrice() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_UpdatePrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePrice(::grpc::ServerContext* /*context*/, const ::mruv::economy::UpdatePriceRequest* /*request*/, ::mruv::economy::UpdatePriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdatePrice(::grpc::ServerContext* context, ::mruv::economy::UpdatePriceRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::economy::UpdatePriceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPrice() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetPrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPrice(::grpc::ServerContext* /*context*/, const ::mruv::economy::GetPriceRequest* /*request*/, ::mruv::economy::GetPriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPrice(::grpc::ServerContext* context, ::mruv::economy::GetPriceRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::economy::GetPriceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BuyProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BuyProduct() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_BuyProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BuyProduct(::grpc::ServerContext* /*context*/, const ::mruv::economy::BuyProductRequest* /*request*/, ::mruv::economy::BuyProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBuyProduct(::grpc::ServerContext* context, ::mruv::economy::BuyProductRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::economy::BuyProductResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WatchProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_WatchProduct() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_WatchProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WatchProduct(::grpc::ServerContext* /*context*/, const ::mruv::economy::WatchProductRequest* /*request*/, ::grpc::ServerWriter< ::mruv::economy::WatchProductResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWatchProduct(::grpc::ServerContext* context, ::mruv::economy::WatchProductRequest* request, ::grpc::ServerAsyncWriter< ::mruv::economy::WatchProductResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(7, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WatchPrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_WatchPrice() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_WatchPrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WatchPrice(::grpc::ServerContext* /*context*/, const ::mruv::economy::WatchPriceRequest* /*request*/, ::grpc::ServerWriter< ::mruv::economy::WatchPriceResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWatchPrice(::grpc::ServerContext* context, ::mruv::economy::WatchPriceRequest* request, ::grpc::ServerAsyncWriter< ::mruv::economy::WatchPriceResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(8, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RegisterProduct<WithAsyncMethod_GetProduct<WithAsyncMethod_UpdateProduct<WithAsyncMethod_DeleteProduct<WithAsyncMethod_UpdatePrice<WithAsyncMethod_GetPrice<WithAsyncMethod_BuyProduct<WithAsyncMethod_WatchProduct<WithAsyncMethod_WatchPrice<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RegisterProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RegisterProduct() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::economy::RegisterProductRequest, ::mruv::economy::RegisterProductResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::economy::RegisterProductRequest* request, ::mruv::economy::RegisterProductResponse* response) { return this->RegisterProduct(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterProduct(
        ::grpc::experimental::MessageAllocator< ::mruv::economy::RegisterProductRequest, ::mruv::economy::RegisterProductResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::economy::RegisterProductRequest, ::mruv::economy::RegisterProductResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RegisterProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterProduct(::grpc::ServerContext* /*context*/, const ::mruv::economy::RegisterProductRequest* /*request*/, ::mruv::economy::RegisterProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RegisterProduct(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::economy::RegisterProductRequest* /*request*/, ::mruv::economy::RegisterProductResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RegisterProduct(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::economy::RegisterProductRequest* /*request*/, ::mruv::economy::RegisterProductResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetProduct() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::economy::GetProductRequest, ::mruv::economy::GetProductResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::economy::GetProductRequest* request, ::mruv::economy::GetProductResponse* response) { return this->GetProduct(context, request, response); }));}
    void SetMessageAllocatorFor_GetProduct(
        ::grpc::experimental::MessageAllocator< ::mruv::economy::GetProductRequest, ::mruv::economy::GetProductResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::economy::GetProductRequest, ::mruv::economy::GetProductResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProduct(::grpc::ServerContext* /*context*/, const ::mruv::economy::GetProductRequest* /*request*/, ::mruv::economy::GetProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetProduct(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::economy::GetProductRequest* /*request*/, ::mruv::economy::GetProductResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetProduct(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::economy::GetProductRequest* /*request*/, ::mruv::economy::GetProductResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateProduct() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::economy::UpdateProductRequest, ::mruv::economy::UpdateProductResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::economy::UpdateProductRequest* request, ::mruv::economy::UpdateProductResponse* response) { return this->UpdateProduct(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateProduct(
        ::grpc::experimental::MessageAllocator< ::mruv::economy::UpdateProductRequest, ::mruv::economy::UpdateProductResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::economy::UpdateProductRequest, ::mruv::economy::UpdateProductResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateProduct(::grpc::ServerContext* /*context*/, const ::mruv::economy::UpdateProductRequest* /*request*/, ::mruv::economy::UpdateProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateProduct(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::economy::UpdateProductRequest* /*request*/, ::mruv::economy::UpdateProductResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateProduct(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::economy::UpdateProductRequest* /*request*/, ::mruv::economy::UpdateProductResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteProduct() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::economy::DeleteProductRequest, ::mruv::economy::DeleteProductResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::economy::DeleteProductRequest* request, ::mruv::economy::DeleteProductResponse* response) { return this->DeleteProduct(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteProduct(
        ::grpc::experimental::MessageAllocator< ::mruv::economy::DeleteProductRequest, ::mruv::economy::DeleteProductResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::economy::DeleteProductRequest, ::mruv::economy::DeleteProductResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteProduct(::grpc::ServerContext* /*context*/, const ::mruv::economy::DeleteProductRequest* /*request*/, ::mruv::economy::DeleteProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteProduct(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::economy::DeleteProductRequest* /*request*/, ::mruv::economy::DeleteProductResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteProduct(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::economy::DeleteProductRequest* /*request*/, ::mruv::economy::DeleteProductResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdatePrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdatePrice() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::economy::UpdatePriceRequest, ::mruv::economy::UpdatePriceResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::economy::UpdatePriceRequest* request, ::mruv::economy::UpdatePriceResponse* response) { return this->UpdatePrice(context, request, response); }));}
    void SetMessageAllocatorFor_UpdatePrice(
        ::grpc::experimental::MessageAllocator< ::mruv::economy::UpdatePriceRequest, ::mruv::economy::UpdatePriceResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::economy::UpdatePriceRequest, ::mruv::economy::UpdatePriceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdatePrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePrice(::grpc::ServerContext* /*context*/, const ::mruv::economy::UpdatePriceRequest* /*request*/, ::mruv::economy::UpdatePriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdatePrice(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::economy::UpdatePriceRequest* /*request*/, ::mruv::economy::UpdatePriceResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdatePrice(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::economy::UpdatePriceRequest* /*request*/, ::mruv::economy::UpdatePriceResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetPrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetPrice() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::economy::GetPriceRequest, ::mruv::economy::GetPriceResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::economy::GetPriceRequest* request, ::mruv::economy::GetPriceResponse* response) { return this->GetPrice(context, request, response); }));}
    void SetMessageAllocatorFor_GetPrice(
        ::grpc::experimental::MessageAllocator< ::mruv::economy::GetPriceRequest, ::mruv::economy::GetPriceResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::economy::GetPriceRequest, ::mruv::economy::GetPriceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetPrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPrice(::grpc::ServerContext* /*context*/, const ::mruv::economy::GetPriceRequest* /*request*/, ::mruv::economy::GetPriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPrice(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::economy::GetPriceRequest* /*request*/, ::mruv::economy::GetPriceResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPrice(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::economy::GetPriceRequest* /*request*/, ::mruv::economy::GetPriceResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_BuyProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_BuyProduct() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::economy::BuyProductRequest, ::mruv::economy::BuyProductResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::economy::BuyProductRequest* request, ::mruv::economy::BuyProductResponse* response) { return this->BuyProduct(context, request, response); }));}
    void SetMessageAllocatorFor_BuyProduct(
        ::grpc::experimental::MessageAllocator< ::mruv::economy::BuyProductRequest, ::mruv::economy::BuyProductResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::economy::BuyProductRequest, ::mruv::economy::BuyProductResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_BuyProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BuyProduct(::grpc::ServerContext* /*context*/, const ::mruv::economy::BuyProductRequest* /*request*/, ::mruv::economy::BuyProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* BuyProduct(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::economy::BuyProductRequest* /*request*/, ::mruv::economy::BuyProductResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* BuyProduct(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::economy::BuyProductRequest* /*request*/, ::mruv::economy::BuyProductResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_WatchProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_WatchProduct() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::mruv::economy::WatchProductRequest, ::mruv::economy::WatchProductResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::economy::WatchProductRequest* request) { return this->WatchProduct(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_WatchProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WatchProduct(::grpc::ServerContext* /*context*/, const ::mruv::economy::WatchProductRequest* /*request*/, ::grpc::ServerWriter< ::mruv::economy::WatchProductResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::mruv::economy::WatchProductResponse>* WatchProduct(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::economy::WatchProductRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::mruv::economy::WatchProductResponse>* WatchProduct(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::economy::WatchProductRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_WatchPrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_WatchPrice() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::mruv::economy::WatchPriceRequest, ::mruv::economy::WatchPriceResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::economy::WatchPriceRequest* request) { return this->WatchPrice(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_WatchPrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WatchPrice(::grpc::ServerContext* /*context*/, const ::mruv::economy::WatchPriceRequest* /*request*/, ::grpc::ServerWriter< ::mruv::economy::WatchPriceResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::mruv::economy::WatchPriceResponse>* WatchPrice(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::economy::WatchPriceRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::mruv::economy::WatchPriceResponse>* WatchPrice(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::economy::WatchPriceRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_RegisterProduct<ExperimentalWithCallbackMethod_GetProduct<ExperimentalWithCallbackMethod_UpdateProduct<ExperimentalWithCallbackMethod_DeleteProduct<ExperimentalWithCallbackMethod_UpdatePrice<ExperimentalWithCallbackMethod_GetPrice<ExperimentalWithCallbackMethod_BuyProduct<ExperimentalWithCallbackMethod_WatchProduct<ExperimentalWithCallbackMethod_WatchPrice<Service > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_RegisterProduct<ExperimentalWithCallbackMethod_GetProduct<ExperimentalWithCallbackMethod_UpdateProduct<ExperimentalWithCallbackMethod_DeleteProduct<ExperimentalWithCallbackMethod_UpdatePrice<ExperimentalWithCallbackMethod_GetPrice<ExperimentalWithCallbackMethod_BuyProduct<ExperimentalWithCallbackMethod_WatchProduct<ExperimentalWithCallbackMethod_WatchPrice<Service > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RegisterProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterProduct() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RegisterProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterProduct(::grpc::ServerContext* /*context*/, const ::mruv::economy::RegisterProductRequest* /*request*/, ::mruv::economy::RegisterProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetProduct() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProduct(::grpc::ServerContext* /*context*/, const ::mruv::economy::GetProductRequest* /*request*/, ::mruv::economy::GetProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateProduct() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateProduct(::grpc::ServerContext* /*context*/, const ::mruv::economy::UpdateProductRequest* /*request*/, ::mruv::economy::UpdateProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteProduct() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteProduct(::grpc::ServerContext* /*context*/, const ::mruv::economy::DeleteProductRequest* /*request*/, ::mruv::economy::DeleteProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdatePrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdatePrice() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_UpdatePrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePrice(::grpc::ServerContext* /*context*/, const ::mruv::economy::UpdatePriceRequest* /*request*/, ::mruv::economy::UpdatePriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPrice() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetPrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPrice(::grpc::ServerContext* /*context*/, const ::mruv::economy::GetPriceRequest* /*request*/, ::mruv::economy::GetPriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BuyProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BuyProduct() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_BuyProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BuyProduct(::grpc::ServerContext* /*context*/, const ::mruv::economy::BuyProductRequest* /*request*/, ::mruv::economy::BuyProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WatchProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_WatchProduct() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_WatchProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WatchProduct(::grpc::ServerContext* /*context*/, const ::mruv::economy::WatchProductRequest* /*request*/, ::grpc::ServerWriter< ::mruv::economy::WatchProductResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WatchPrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_WatchPrice() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_WatchPrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WatchPrice(::grpc::ServerContext* /*context*/, const ::mruv::economy::WatchPriceRequest* /*request*/, ::grpc::ServerWriter< ::mruv::economy::WatchPriceResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterProduct() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RegisterProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterProduct(::grpc::ServerContext* /*context*/, const ::mruv::economy::RegisterProductRequest* /*request*/, ::mruv::economy::RegisterProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterProduct(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetProduct() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProduct(::grpc::ServerContext* /*context*/, const ::mruv::economy::GetProductRequest* /*request*/, ::mruv::economy::GetProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProduct(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateProduct() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateProduct(::grpc::ServerContext* /*context*/, const ::mruv::economy::UpdateProductRequest* /*request*/, ::mruv::economy::UpdateProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateProduct(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteProduct() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteProduct(::grpc::ServerContext* /*context*/, const ::mruv::economy::DeleteProductRequest* /*request*/, ::mruv::economy::DeleteProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteProduct(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdatePrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdatePrice() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_UpdatePrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePrice(::grpc::ServerContext* /*context*/, const ::mruv::economy::UpdatePriceRequest* /*request*/, ::mruv::economy::UpdatePriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdatePrice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPrice() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetPrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPrice(::grpc::ServerContext* /*context*/, const ::mruv::economy::GetPriceRequest* /*request*/, ::mruv::economy::GetPriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPrice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BuyProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BuyProduct() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_BuyProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BuyProduct(::grpc::ServerContext* /*context*/, const ::mruv::economy::BuyProductRequest* /*request*/, ::mruv::economy::BuyProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBuyProduct(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WatchProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_WatchProduct() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_WatchProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WatchProduct(::grpc::ServerContext* /*context*/, const ::mruv::economy::WatchProductRequest* /*request*/, ::grpc::ServerWriter< ::mruv::economy::WatchProductResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWatchProduct(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(7, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WatchPrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_WatchPrice() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_WatchPrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WatchPrice(::grpc::ServerContext* /*context*/, const ::mruv::economy::WatchPriceRequest* /*request*/, ::grpc::ServerWriter< ::mruv::economy::WatchPriceResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWatchPrice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(8, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RegisterProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RegisterProduct() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterProduct(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RegisterProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterProduct(::grpc::ServerContext* /*context*/, const ::mruv::economy::RegisterProductRequest* /*request*/, ::mruv::economy::RegisterProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RegisterProduct(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RegisterProduct(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetProduct() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetProduct(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProduct(::grpc::ServerContext* /*context*/, const ::mruv::economy::GetProductRequest* /*request*/, ::mruv::economy::GetProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetProduct(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetProduct(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateProduct() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateProduct(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateProduct(::grpc::ServerContext* /*context*/, const ::mruv::economy::UpdateProductRequest* /*request*/, ::mruv::economy::UpdateProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateProduct(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateProduct(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteProduct() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteProduct(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteProduct(::grpc::ServerContext* /*context*/, const ::mruv::economy::DeleteProductRequest* /*request*/, ::mruv::economy::DeleteProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteProduct(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteProduct(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdatePrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdatePrice() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdatePrice(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdatePrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePrice(::grpc::ServerContext* /*context*/, const ::mruv::economy::UpdatePriceRequest* /*request*/, ::mruv::economy::UpdatePriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdatePrice(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdatePrice(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetPrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetPrice() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPrice(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetPrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPrice(::grpc::ServerContext* /*context*/, const ::mruv::economy::GetPriceRequest* /*request*/, ::mruv::economy::GetPriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPrice(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPrice(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_BuyProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_BuyProduct() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->BuyProduct(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_BuyProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BuyProduct(::grpc::ServerContext* /*context*/, const ::mruv::economy::BuyProductRequest* /*request*/, ::mruv::economy::BuyProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* BuyProduct(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* BuyProduct(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_WatchProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_WatchProduct() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->WatchProduct(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_WatchProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WatchProduct(::grpc::ServerContext* /*context*/, const ::mruv::economy::WatchProductRequest* /*request*/, ::grpc::ServerWriter< ::mruv::economy::WatchProductResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* WatchProduct(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* WatchProduct(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_WatchPrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_WatchPrice() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->WatchPrice(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_WatchPrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WatchPrice(::grpc::ServerContext* /*context*/, const ::mruv::economy::WatchPriceRequest* /*request*/, ::grpc::ServerWriter< ::mruv::economy::WatchPriceResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* WatchPrice(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* WatchPrice(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterProduct() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::economy::RegisterProductRequest, ::mruv::economy::RegisterProductResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::economy::RegisterProductRequest, ::mruv::economy::RegisterProductResponse>* streamer) {
                       return this->StreamedRegisterProduct(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterProduct(::grpc::ServerContext* /*context*/, const ::mruv::economy::RegisterProductRequest* /*request*/, ::mruv::economy::RegisterProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterProduct(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::economy::RegisterProductRequest,::mruv::economy::RegisterProductResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetProduct() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::economy::GetProductRequest, ::mruv::economy::GetProductResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::economy::GetProductRequest, ::mruv::economy::GetProductResponse>* streamer) {
                       return this->StreamedGetProduct(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetProduct(::grpc::ServerContext* /*context*/, const ::mruv::economy::GetProductRequest* /*request*/, ::mruv::economy::GetProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetProduct(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::economy::GetProductRequest,::mruv::economy::GetProductResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateProduct() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::economy::UpdateProductRequest, ::mruv::economy::UpdateProductResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::economy::UpdateProductRequest, ::mruv::economy::UpdateProductResponse>* streamer) {
                       return this->StreamedUpdateProduct(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateProduct(::grpc::ServerContext* /*context*/, const ::mruv::economy::UpdateProductRequest* /*request*/, ::mruv::economy::UpdateProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateProduct(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::economy::UpdateProductRequest,::mruv::economy::UpdateProductResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteProduct() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::economy::DeleteProductRequest, ::mruv::economy::DeleteProductResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::economy::DeleteProductRequest, ::mruv::economy::DeleteProductResponse>* streamer) {
                       return this->StreamedDeleteProduct(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteProduct(::grpc::ServerContext* /*context*/, const ::mruv::economy::DeleteProductRequest* /*request*/, ::mruv::economy::DeleteProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteProduct(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::economy::DeleteProductRequest,::mruv::economy::DeleteProductResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdatePrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdatePrice() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::economy::UpdatePriceRequest, ::mruv::economy::UpdatePriceResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::economy::UpdatePriceRequest, ::mruv::economy::UpdatePriceResponse>* streamer) {
                       return this->StreamedUpdatePrice(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdatePrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdatePrice(::grpc::ServerContext* /*context*/, const ::mruv::economy::UpdatePriceRequest* /*request*/, ::mruv::economy::UpdatePriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdatePrice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::economy::UpdatePriceRequest,::mruv::economy::UpdatePriceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPrice() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::economy::GetPriceRequest, ::mruv::economy::GetPriceResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::economy::GetPriceRequest, ::mruv::economy::GetPriceResponse>* streamer) {
                       return this->StreamedGetPrice(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPrice(::grpc::ServerContext* /*context*/, const ::mruv::economy::GetPriceRequest* /*request*/, ::mruv::economy::GetPriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPrice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::economy::GetPriceRequest,::mruv::economy::GetPriceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BuyProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_BuyProduct() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::economy::BuyProductRequest, ::mruv::economy::BuyProductResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::economy::BuyProductRequest, ::mruv::economy::BuyProductResponse>* streamer) {
                       return this->StreamedBuyProduct(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_BuyProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BuyProduct(::grpc::ServerContext* /*context*/, const ::mruv::economy::BuyProductRequest* /*request*/, ::mruv::economy::BuyProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBuyProduct(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::economy::BuyProductRequest,::mruv::economy::BuyProductResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RegisterProduct<WithStreamedUnaryMethod_GetProduct<WithStreamedUnaryMethod_UpdateProduct<WithStreamedUnaryMethod_DeleteProduct<WithStreamedUnaryMethod_UpdatePrice<WithStreamedUnaryMethod_GetPrice<WithStreamedUnaryMethod_BuyProduct<Service > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_WatchProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_WatchProduct() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::mruv::economy::WatchProductRequest, ::mruv::economy::WatchProductResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerSplitStreamer<
                     ::mruv::economy::WatchProductRequest, ::mruv::economy::WatchProductResponse>* streamer) {
                       return this->StreamedWatchProduct(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_WatchProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WatchProduct(::grpc::ServerContext* /*context*/, const ::mruv::economy::WatchProductRequest* /*request*/, ::grpc::ServerWriter< ::mruv::economy::WatchProductResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedWatchProduct(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::mruv::economy::WatchProductRequest,::mruv::economy::WatchProductResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_WatchPrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_WatchPrice() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::mruv::economy::WatchPriceRequest, ::mruv::economy::WatchPriceResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerSplitStreamer<
                     ::mruv::economy::WatchPriceRequest, ::mruv::economy::WatchPriceResponse>* streamer) {
                       return this->StreamedWatchPrice(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_WatchPrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WatchPrice(::grpc::ServerContext* /*context*/, const ::mruv::economy::WatchPriceRequest* /*request*/, ::grpc::ServerWriter< ::mruv::economy::WatchPriceResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedWatchPrice(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::mruv::economy::WatchPriceRequest,::mruv::economy::WatchPriceResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_WatchProduct<WithSplitStreamingMethod_WatchPrice<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_RegisterProduct<WithStreamedUnaryMethod_GetProduct<WithStreamedUnaryMethod_UpdateProduct<WithStreamedUnaryMethod_DeleteProduct<WithStreamedUnaryMethod_UpdatePrice<WithStreamedUnaryMethod_GetPrice<WithStreamedUnaryMethod_BuyProduct<WithSplitStreamingMethod_WatchProduct<WithSplitStreamingMethod_WatchPrice<Service > > > > > > > > > StreamedService;
};

}  // namespace economy
}  // namespace mruv


#endif  // GRPC_economy_2feconomy_2eproto__INCLUDED
