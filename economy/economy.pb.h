// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: economy/economy.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_economy_2feconomy_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_economy_2feconomy_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_economy_2feconomy_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_economy_2feconomy_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[18]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_economy_2feconomy_2eproto;
namespace mruv {
namespace economy {
class BuyProductRequest;
class BuyProductRequestDefaultTypeInternal;
extern BuyProductRequestDefaultTypeInternal _BuyProductRequest_default_instance_;
class BuyProductResponse;
class BuyProductResponseDefaultTypeInternal;
extern BuyProductResponseDefaultTypeInternal _BuyProductResponse_default_instance_;
class DeleteProductRequest;
class DeleteProductRequestDefaultTypeInternal;
extern DeleteProductRequestDefaultTypeInternal _DeleteProductRequest_default_instance_;
class DeleteProductResponse;
class DeleteProductResponseDefaultTypeInternal;
extern DeleteProductResponseDefaultTypeInternal _DeleteProductResponse_default_instance_;
class GetPriceRequest;
class GetPriceRequestDefaultTypeInternal;
extern GetPriceRequestDefaultTypeInternal _GetPriceRequest_default_instance_;
class GetPriceResponse;
class GetPriceResponseDefaultTypeInternal;
extern GetPriceResponseDefaultTypeInternal _GetPriceResponse_default_instance_;
class GetProductRequest;
class GetProductRequestDefaultTypeInternal;
extern GetProductRequestDefaultTypeInternal _GetProductRequest_default_instance_;
class GetProductResponse;
class GetProductResponseDefaultTypeInternal;
extern GetProductResponseDefaultTypeInternal _GetProductResponse_default_instance_;
class RegisterProductRequest;
class RegisterProductRequestDefaultTypeInternal;
extern RegisterProductRequestDefaultTypeInternal _RegisterProductRequest_default_instance_;
class RegisterProductResponse;
class RegisterProductResponseDefaultTypeInternal;
extern RegisterProductResponseDefaultTypeInternal _RegisterProductResponse_default_instance_;
class UpdatePriceRequest;
class UpdatePriceRequestDefaultTypeInternal;
extern UpdatePriceRequestDefaultTypeInternal _UpdatePriceRequest_default_instance_;
class UpdatePriceResponse;
class UpdatePriceResponseDefaultTypeInternal;
extern UpdatePriceResponseDefaultTypeInternal _UpdatePriceResponse_default_instance_;
class UpdateProductRequest;
class UpdateProductRequestDefaultTypeInternal;
extern UpdateProductRequestDefaultTypeInternal _UpdateProductRequest_default_instance_;
class UpdateProductResponse;
class UpdateProductResponseDefaultTypeInternal;
extern UpdateProductResponseDefaultTypeInternal _UpdateProductResponse_default_instance_;
class WatchPriceRequest;
class WatchPriceRequestDefaultTypeInternal;
extern WatchPriceRequestDefaultTypeInternal _WatchPriceRequest_default_instance_;
class WatchPriceResponse;
class WatchPriceResponseDefaultTypeInternal;
extern WatchPriceResponseDefaultTypeInternal _WatchPriceResponse_default_instance_;
class WatchProductRequest;
class WatchProductRequestDefaultTypeInternal;
extern WatchProductRequestDefaultTypeInternal _WatchProductRequest_default_instance_;
class WatchProductResponse;
class WatchProductResponseDefaultTypeInternal;
extern WatchProductResponseDefaultTypeInternal _WatchProductResponse_default_instance_;
}  // namespace economy
}  // namespace mruv
PROTOBUF_NAMESPACE_OPEN
template<> ::mruv::economy::BuyProductRequest* Arena::CreateMaybeMessage<::mruv::economy::BuyProductRequest>(Arena*);
template<> ::mruv::economy::BuyProductResponse* Arena::CreateMaybeMessage<::mruv::economy::BuyProductResponse>(Arena*);
template<> ::mruv::economy::DeleteProductRequest* Arena::CreateMaybeMessage<::mruv::economy::DeleteProductRequest>(Arena*);
template<> ::mruv::economy::DeleteProductResponse* Arena::CreateMaybeMessage<::mruv::economy::DeleteProductResponse>(Arena*);
template<> ::mruv::economy::GetPriceRequest* Arena::CreateMaybeMessage<::mruv::economy::GetPriceRequest>(Arena*);
template<> ::mruv::economy::GetPriceResponse* Arena::CreateMaybeMessage<::mruv::economy::GetPriceResponse>(Arena*);
template<> ::mruv::economy::GetProductRequest* Arena::CreateMaybeMessage<::mruv::economy::GetProductRequest>(Arena*);
template<> ::mruv::economy::GetProductResponse* Arena::CreateMaybeMessage<::mruv::economy::GetProductResponse>(Arena*);
template<> ::mruv::economy::RegisterProductRequest* Arena::CreateMaybeMessage<::mruv::economy::RegisterProductRequest>(Arena*);
template<> ::mruv::economy::RegisterProductResponse* Arena::CreateMaybeMessage<::mruv::economy::RegisterProductResponse>(Arena*);
template<> ::mruv::economy::UpdatePriceRequest* Arena::CreateMaybeMessage<::mruv::economy::UpdatePriceRequest>(Arena*);
template<> ::mruv::economy::UpdatePriceResponse* Arena::CreateMaybeMessage<::mruv::economy::UpdatePriceResponse>(Arena*);
template<> ::mruv::economy::UpdateProductRequest* Arena::CreateMaybeMessage<::mruv::economy::UpdateProductRequest>(Arena*);
template<> ::mruv::economy::UpdateProductResponse* Arena::CreateMaybeMessage<::mruv::economy::UpdateProductResponse>(Arena*);
template<> ::mruv::economy::WatchPriceRequest* Arena::CreateMaybeMessage<::mruv::economy::WatchPriceRequest>(Arena*);
template<> ::mruv::economy::WatchPriceResponse* Arena::CreateMaybeMessage<::mruv::economy::WatchPriceResponse>(Arena*);
template<> ::mruv::economy::WatchProductRequest* Arena::CreateMaybeMessage<::mruv::economy::WatchProductRequest>(Arena*);
template<> ::mruv::economy::WatchProductResponse* Arena::CreateMaybeMessage<::mruv::economy::WatchProductResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mruv {
namespace economy {

enum WatchProductResponse_ProductEvent : int {
  WatchProductResponse_ProductEvent_UNKNOWN = 0,
  WatchProductResponse_ProductEvent_PRICE_CHANGED = 1,
  WatchProductResponse_ProductEvent_PRODUCT_BOUGHT = 2,
  WatchProductResponse_ProductEvent_PRODUCT_INFO_UPDATED = 3,
  WatchProductResponse_ProductEvent_PRODUCT_DELETED = 4,
  WatchProductResponse_ProductEvent_WatchProductResponse_ProductEvent_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  WatchProductResponse_ProductEvent_WatchProductResponse_ProductEvent_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool WatchProductResponse_ProductEvent_IsValid(int value);
constexpr WatchProductResponse_ProductEvent WatchProductResponse_ProductEvent_ProductEvent_MIN = WatchProductResponse_ProductEvent_UNKNOWN;
constexpr WatchProductResponse_ProductEvent WatchProductResponse_ProductEvent_ProductEvent_MAX = WatchProductResponse_ProductEvent_PRODUCT_DELETED;
constexpr int WatchProductResponse_ProductEvent_ProductEvent_ARRAYSIZE = WatchProductResponse_ProductEvent_ProductEvent_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WatchProductResponse_ProductEvent_descriptor();
template<typename T>
inline const std::string& WatchProductResponse_ProductEvent_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WatchProductResponse_ProductEvent>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WatchProductResponse_ProductEvent_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WatchProductResponse_ProductEvent_descriptor(), enum_t_value);
}
inline bool WatchProductResponse_ProductEvent_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WatchProductResponse_ProductEvent* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WatchProductResponse_ProductEvent>(
    WatchProductResponse_ProductEvent_descriptor(), name, value);
}
// ===================================================================

class RegisterProductRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.economy.RegisterProductRequest) */ {
 public:
  inline RegisterProductRequest() : RegisterProductRequest(nullptr) {}
  virtual ~RegisterProductRequest();

  RegisterProductRequest(const RegisterProductRequest& from);
  RegisterProductRequest(RegisterProductRequest&& from) noexcept
    : RegisterProductRequest() {
    *this = ::std::move(from);
  }

  inline RegisterProductRequest& operator=(const RegisterProductRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterProductRequest& operator=(RegisterProductRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterProductRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterProductRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterProductRequest*>(
               &_RegisterProductRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RegisterProductRequest& a, RegisterProductRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterProductRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterProductRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterProductRequest* New() const final {
    return CreateMaybeMessage<RegisterProductRequest>(nullptr);
  }

  RegisterProductRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterProductRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterProductRequest& from);
  void MergeFrom(const RegisterProductRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterProductRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.economy.RegisterProductRequest";
  }
  protected:
  explicit RegisterProductRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_economy_2feconomy_2eproto);
    return ::descriptor_table_economy_2feconomy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kFullNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kPriceClassFieldNumber = 4,
    kPriceRatioFieldNumber = 5,
    kStartingPriceFieldNumber = 6,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string full_name = 2;
  void clear_full_name();
  const std::string& full_name() const;
  void set_full_name(const std::string& value);
  void set_full_name(std::string&& value);
  void set_full_name(const char* value);
  void set_full_name(const char* value, size_t size);
  std::string* mutable_full_name();
  std::string* release_full_name();
  void set_allocated_full_name(std::string* full_name);
  private:
  const std::string& _internal_full_name() const;
  void _internal_set_full_name(const std::string& value);
  std::string* _internal_mutable_full_name();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // uint32 price_class = 4;
  void clear_price_class();
  ::PROTOBUF_NAMESPACE_ID::uint32 price_class() const;
  void set_price_class(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_price_class() const;
  void _internal_set_price_class(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float price_ratio = 5;
  void clear_price_ratio();
  float price_ratio() const;
  void set_price_ratio(float value);
  private:
  float _internal_price_ratio() const;
  void _internal_set_price_ratio(float value);
  public:

  // uint32 starting_price = 6;
  void clear_starting_price();
  ::PROTOBUF_NAMESPACE_ID::uint32 starting_price() const;
  void set_starting_price(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_starting_price() const;
  void _internal_set_starting_price(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.economy.RegisterProductRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr full_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::uint32 price_class_;
  float price_ratio_;
  ::PROTOBUF_NAMESPACE_ID::uint32 starting_price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_economy_2feconomy_2eproto;
};
// -------------------------------------------------------------------

class RegisterProductResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.economy.RegisterProductResponse) */ {
 public:
  inline RegisterProductResponse() : RegisterProductResponse(nullptr) {}
  virtual ~RegisterProductResponse();

  RegisterProductResponse(const RegisterProductResponse& from);
  RegisterProductResponse(RegisterProductResponse&& from) noexcept
    : RegisterProductResponse() {
    *this = ::std::move(from);
  }

  inline RegisterProductResponse& operator=(const RegisterProductResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterProductResponse& operator=(RegisterProductResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterProductResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterProductResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterProductResponse*>(
               &_RegisterProductResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RegisterProductResponse& a, RegisterProductResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterProductResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterProductResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterProductResponse* New() const final {
    return CreateMaybeMessage<RegisterProductResponse>(nullptr);
  }

  RegisterProductResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterProductResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterProductResponse& from);
  void MergeFrom(const RegisterProductResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterProductResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.economy.RegisterProductResponse";
  }
  protected:
  explicit RegisterProductResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_economy_2feconomy_2eproto);
    return ::descriptor_table_economy_2feconomy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.economy.RegisterProductResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_economy_2feconomy_2eproto;
};
// -------------------------------------------------------------------

class GetProductRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.economy.GetProductRequest) */ {
 public:
  inline GetProductRequest() : GetProductRequest(nullptr) {}
  virtual ~GetProductRequest();

  GetProductRequest(const GetProductRequest& from);
  GetProductRequest(GetProductRequest&& from) noexcept
    : GetProductRequest() {
    *this = ::std::move(from);
  }

  inline GetProductRequest& operator=(const GetProductRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProductRequest& operator=(GetProductRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetProductRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetProductRequest* internal_default_instance() {
    return reinterpret_cast<const GetProductRequest*>(
               &_GetProductRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetProductRequest& a, GetProductRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetProductRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProductRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetProductRequest* New() const final {
    return CreateMaybeMessage<GetProductRequest>(nullptr);
  }

  GetProductRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetProductRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetProductRequest& from);
  void MergeFrom(const GetProductRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetProductRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.economy.GetProductRequest";
  }
  protected:
  explicit GetProductRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_economy_2feconomy_2eproto);
    return ::descriptor_table_economy_2feconomy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.economy.GetProductRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_economy_2feconomy_2eproto;
};
// -------------------------------------------------------------------

class GetProductResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.economy.GetProductResponse) */ {
 public:
  inline GetProductResponse() : GetProductResponse(nullptr) {}
  virtual ~GetProductResponse();

  GetProductResponse(const GetProductResponse& from);
  GetProductResponse(GetProductResponse&& from) noexcept
    : GetProductResponse() {
    *this = ::std::move(from);
  }

  inline GetProductResponse& operator=(const GetProductResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProductResponse& operator=(GetProductResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetProductResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetProductResponse* internal_default_instance() {
    return reinterpret_cast<const GetProductResponse*>(
               &_GetProductResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetProductResponse& a, GetProductResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetProductResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProductResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetProductResponse* New() const final {
    return CreateMaybeMessage<GetProductResponse>(nullptr);
  }

  GetProductResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetProductResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetProductResponse& from);
  void MergeFrom(const GetProductResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetProductResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.economy.GetProductResponse";
  }
  protected:
  explicit GetProductResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_economy_2feconomy_2eproto);
    return ::descriptor_table_economy_2feconomy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kFullNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kPriceClassFieldNumber = 4,
    kPriceRatioFieldNumber = 5,
    kStartingPriceFieldNumber = 6,
    kPriceFieldNumber = 7,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string full_name = 2;
  void clear_full_name();
  const std::string& full_name() const;
  void set_full_name(const std::string& value);
  void set_full_name(std::string&& value);
  void set_full_name(const char* value);
  void set_full_name(const char* value, size_t size);
  std::string* mutable_full_name();
  std::string* release_full_name();
  void set_allocated_full_name(std::string* full_name);
  private:
  const std::string& _internal_full_name() const;
  void _internal_set_full_name(const std::string& value);
  std::string* _internal_mutable_full_name();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // uint32 price_class = 4;
  void clear_price_class();
  ::PROTOBUF_NAMESPACE_ID::uint32 price_class() const;
  void set_price_class(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_price_class() const;
  void _internal_set_price_class(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float price_ratio = 5;
  void clear_price_ratio();
  float price_ratio() const;
  void set_price_ratio(float value);
  private:
  float _internal_price_ratio() const;
  void _internal_set_price_ratio(float value);
  public:

  // uint32 starting_price = 6;
  void clear_starting_price();
  ::PROTOBUF_NAMESPACE_ID::uint32 starting_price() const;
  void set_starting_price(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_starting_price() const;
  void _internal_set_starting_price(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 price = 7;
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::uint32 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.economy.GetProductResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr full_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::uint32 price_class_;
  float price_ratio_;
  ::PROTOBUF_NAMESPACE_ID::uint32 starting_price_;
  ::PROTOBUF_NAMESPACE_ID::uint32 price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_economy_2feconomy_2eproto;
};
// -------------------------------------------------------------------

class UpdateProductRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.economy.UpdateProductRequest) */ {
 public:
  inline UpdateProductRequest() : UpdateProductRequest(nullptr) {}
  virtual ~UpdateProductRequest();

  UpdateProductRequest(const UpdateProductRequest& from);
  UpdateProductRequest(UpdateProductRequest&& from) noexcept
    : UpdateProductRequest() {
    *this = ::std::move(from);
  }

  inline UpdateProductRequest& operator=(const UpdateProductRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateProductRequest& operator=(UpdateProductRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateProductRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateProductRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateProductRequest*>(
               &_UpdateProductRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UpdateProductRequest& a, UpdateProductRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateProductRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateProductRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateProductRequest* New() const final {
    return CreateMaybeMessage<UpdateProductRequest>(nullptr);
  }

  UpdateProductRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateProductRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateProductRequest& from);
  void MergeFrom(const UpdateProductRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateProductRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.economy.UpdateProductRequest";
  }
  protected:
  explicit UpdateProductRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_economy_2feconomy_2eproto);
    return ::descriptor_table_economy_2feconomy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kFullNameFieldNumber = 3,
    kDescriptionFieldNumber = 4,
    kIdFieldNumber = 1,
    kPriceClassFieldNumber = 5,
    kPriceRatioFieldNumber = 6,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string full_name = 3;
  void clear_full_name();
  const std::string& full_name() const;
  void set_full_name(const std::string& value);
  void set_full_name(std::string&& value);
  void set_full_name(const char* value);
  void set_full_name(const char* value, size_t size);
  std::string* mutable_full_name();
  std::string* release_full_name();
  void set_allocated_full_name(std::string* full_name);
  private:
  const std::string& _internal_full_name() const;
  void _internal_set_full_name(const std::string& value);
  std::string* _internal_mutable_full_name();
  public:

  // string description = 4;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 price_class = 5;
  void clear_price_class();
  ::PROTOBUF_NAMESPACE_ID::uint32 price_class() const;
  void set_price_class(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_price_class() const;
  void _internal_set_price_class(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float price_ratio = 6;
  void clear_price_ratio();
  float price_ratio() const;
  void set_price_ratio(float value);
  private:
  float _internal_price_ratio() const;
  void _internal_set_price_ratio(float value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.economy.UpdateProductRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr full_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 price_class_;
  float price_ratio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_economy_2feconomy_2eproto;
};
// -------------------------------------------------------------------

class UpdateProductResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.economy.UpdateProductResponse) */ {
 public:
  inline UpdateProductResponse() : UpdateProductResponse(nullptr) {}
  virtual ~UpdateProductResponse();

  UpdateProductResponse(const UpdateProductResponse& from);
  UpdateProductResponse(UpdateProductResponse&& from) noexcept
    : UpdateProductResponse() {
    *this = ::std::move(from);
  }

  inline UpdateProductResponse& operator=(const UpdateProductResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateProductResponse& operator=(UpdateProductResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateProductResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateProductResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateProductResponse*>(
               &_UpdateProductResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UpdateProductResponse& a, UpdateProductResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateProductResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateProductResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateProductResponse* New() const final {
    return CreateMaybeMessage<UpdateProductResponse>(nullptr);
  }

  UpdateProductResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateProductResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateProductResponse& from);
  void MergeFrom(const UpdateProductResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateProductResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.economy.UpdateProductResponse";
  }
  protected:
  explicit UpdateProductResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_economy_2feconomy_2eproto);
    return ::descriptor_table_economy_2feconomy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.economy.UpdateProductResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_economy_2feconomy_2eproto;
};
// -------------------------------------------------------------------

class UpdatePriceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.economy.UpdatePriceRequest) */ {
 public:
  inline UpdatePriceRequest() : UpdatePriceRequest(nullptr) {}
  virtual ~UpdatePriceRequest();

  UpdatePriceRequest(const UpdatePriceRequest& from);
  UpdatePriceRequest(UpdatePriceRequest&& from) noexcept
    : UpdatePriceRequest() {
    *this = ::std::move(from);
  }

  inline UpdatePriceRequest& operator=(const UpdatePriceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatePriceRequest& operator=(UpdatePriceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdatePriceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdatePriceRequest* internal_default_instance() {
    return reinterpret_cast<const UpdatePriceRequest*>(
               &_UpdatePriceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UpdatePriceRequest& a, UpdatePriceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatePriceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdatePriceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdatePriceRequest* New() const final {
    return CreateMaybeMessage<UpdatePriceRequest>(nullptr);
  }

  UpdatePriceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdatePriceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdatePriceRequest& from);
  void MergeFrom(const UpdatePriceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatePriceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.economy.UpdatePriceRequest";
  }
  protected:
  explicit UpdatePriceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_economy_2feconomy_2eproto);
    return ::descriptor_table_economy_2feconomy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kNewPriceFieldNumber = 3,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 new_price = 3;
  void clear_new_price();
  ::PROTOBUF_NAMESPACE_ID::uint32 new_price() const;
  void set_new_price(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_new_price() const;
  void _internal_set_new_price(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.economy.UpdatePriceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 new_price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_economy_2feconomy_2eproto;
};
// -------------------------------------------------------------------

class UpdatePriceResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.economy.UpdatePriceResponse) */ {
 public:
  inline UpdatePriceResponse() : UpdatePriceResponse(nullptr) {}
  virtual ~UpdatePriceResponse();

  UpdatePriceResponse(const UpdatePriceResponse& from);
  UpdatePriceResponse(UpdatePriceResponse&& from) noexcept
    : UpdatePriceResponse() {
    *this = ::std::move(from);
  }

  inline UpdatePriceResponse& operator=(const UpdatePriceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatePriceResponse& operator=(UpdatePriceResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdatePriceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdatePriceResponse* internal_default_instance() {
    return reinterpret_cast<const UpdatePriceResponse*>(
               &_UpdatePriceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UpdatePriceResponse& a, UpdatePriceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatePriceResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdatePriceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdatePriceResponse* New() const final {
    return CreateMaybeMessage<UpdatePriceResponse>(nullptr);
  }

  UpdatePriceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdatePriceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdatePriceResponse& from);
  void MergeFrom(const UpdatePriceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatePriceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.economy.UpdatePriceResponse";
  }
  protected:
  explicit UpdatePriceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_economy_2feconomy_2eproto);
    return ::descriptor_table_economy_2feconomy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.economy.UpdatePriceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_economy_2feconomy_2eproto;
};
// -------------------------------------------------------------------

class DeleteProductRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.economy.DeleteProductRequest) */ {
 public:
  inline DeleteProductRequest() : DeleteProductRequest(nullptr) {}
  virtual ~DeleteProductRequest();

  DeleteProductRequest(const DeleteProductRequest& from);
  DeleteProductRequest(DeleteProductRequest&& from) noexcept
    : DeleteProductRequest() {
    *this = ::std::move(from);
  }

  inline DeleteProductRequest& operator=(const DeleteProductRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteProductRequest& operator=(DeleteProductRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteProductRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteProductRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteProductRequest*>(
               &_DeleteProductRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DeleteProductRequest& a, DeleteProductRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteProductRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteProductRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteProductRequest* New() const final {
    return CreateMaybeMessage<DeleteProductRequest>(nullptr);
  }

  DeleteProductRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteProductRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteProductRequest& from);
  void MergeFrom(const DeleteProductRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteProductRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.economy.DeleteProductRequest";
  }
  protected:
  explicit DeleteProductRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_economy_2feconomy_2eproto);
    return ::descriptor_table_economy_2feconomy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.economy.DeleteProductRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_economy_2feconomy_2eproto;
};
// -------------------------------------------------------------------

class DeleteProductResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.economy.DeleteProductResponse) */ {
 public:
  inline DeleteProductResponse() : DeleteProductResponse(nullptr) {}
  virtual ~DeleteProductResponse();

  DeleteProductResponse(const DeleteProductResponse& from);
  DeleteProductResponse(DeleteProductResponse&& from) noexcept
    : DeleteProductResponse() {
    *this = ::std::move(from);
  }

  inline DeleteProductResponse& operator=(const DeleteProductResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteProductResponse& operator=(DeleteProductResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteProductResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteProductResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteProductResponse*>(
               &_DeleteProductResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DeleteProductResponse& a, DeleteProductResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteProductResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteProductResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteProductResponse* New() const final {
    return CreateMaybeMessage<DeleteProductResponse>(nullptr);
  }

  DeleteProductResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteProductResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteProductResponse& from);
  void MergeFrom(const DeleteProductResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteProductResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.economy.DeleteProductResponse";
  }
  protected:
  explicit DeleteProductResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_economy_2feconomy_2eproto);
    return ::descriptor_table_economy_2feconomy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.economy.DeleteProductResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_economy_2feconomy_2eproto;
};
// -------------------------------------------------------------------

class GetPriceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.economy.GetPriceRequest) */ {
 public:
  inline GetPriceRequest() : GetPriceRequest(nullptr) {}
  virtual ~GetPriceRequest();

  GetPriceRequest(const GetPriceRequest& from);
  GetPriceRequest(GetPriceRequest&& from) noexcept
    : GetPriceRequest() {
    *this = ::std::move(from);
  }

  inline GetPriceRequest& operator=(const GetPriceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPriceRequest& operator=(GetPriceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPriceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPriceRequest* internal_default_instance() {
    return reinterpret_cast<const GetPriceRequest*>(
               &_GetPriceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetPriceRequest& a, GetPriceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPriceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPriceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPriceRequest* New() const final {
    return CreateMaybeMessage<GetPriceRequest>(nullptr);
  }

  GetPriceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPriceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPriceRequest& from);
  void MergeFrom(const GetPriceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPriceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.economy.GetPriceRequest";
  }
  protected:
  explicit GetPriceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_economy_2feconomy_2eproto);
    return ::descriptor_table_economy_2feconomy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.economy.GetPriceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_economy_2feconomy_2eproto;
};
// -------------------------------------------------------------------

class GetPriceResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.economy.GetPriceResponse) */ {
 public:
  inline GetPriceResponse() : GetPriceResponse(nullptr) {}
  virtual ~GetPriceResponse();

  GetPriceResponse(const GetPriceResponse& from);
  GetPriceResponse(GetPriceResponse&& from) noexcept
    : GetPriceResponse() {
    *this = ::std::move(from);
  }

  inline GetPriceResponse& operator=(const GetPriceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPriceResponse& operator=(GetPriceResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPriceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPriceResponse* internal_default_instance() {
    return reinterpret_cast<const GetPriceResponse*>(
               &_GetPriceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetPriceResponse& a, GetPriceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPriceResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPriceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPriceResponse* New() const final {
    return CreateMaybeMessage<GetPriceResponse>(nullptr);
  }

  GetPriceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPriceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPriceResponse& from);
  void MergeFrom(const GetPriceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPriceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.economy.GetPriceResponse";
  }
  protected:
  explicit GetPriceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_economy_2feconomy_2eproto);
    return ::descriptor_table_economy_2feconomy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 1,
  };
  // uint32 price = 1;
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::uint32 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.economy.GetPriceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_economy_2feconomy_2eproto;
};
// -------------------------------------------------------------------

class BuyProductRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.economy.BuyProductRequest) */ {
 public:
  inline BuyProductRequest() : BuyProductRequest(nullptr) {}
  virtual ~BuyProductRequest();

  BuyProductRequest(const BuyProductRequest& from);
  BuyProductRequest(BuyProductRequest&& from) noexcept
    : BuyProductRequest() {
    *this = ::std::move(from);
  }

  inline BuyProductRequest& operator=(const BuyProductRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuyProductRequest& operator=(BuyProductRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BuyProductRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BuyProductRequest* internal_default_instance() {
    return reinterpret_cast<const BuyProductRequest*>(
               &_BuyProductRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(BuyProductRequest& a, BuyProductRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BuyProductRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuyProductRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BuyProductRequest* New() const final {
    return CreateMaybeMessage<BuyProductRequest>(nullptr);
  }

  BuyProductRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BuyProductRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BuyProductRequest& from);
  void MergeFrom(const BuyProductRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuyProductRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.economy.BuyProductRequest";
  }
  protected:
  explicit BuyProductRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_economy_2feconomy_2eproto);
    return ::descriptor_table_economy_2feconomy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.economy.BuyProductRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_economy_2feconomy_2eproto;
};
// -------------------------------------------------------------------

class BuyProductResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.economy.BuyProductResponse) */ {
 public:
  inline BuyProductResponse() : BuyProductResponse(nullptr) {}
  virtual ~BuyProductResponse();

  BuyProductResponse(const BuyProductResponse& from);
  BuyProductResponse(BuyProductResponse&& from) noexcept
    : BuyProductResponse() {
    *this = ::std::move(from);
  }

  inline BuyProductResponse& operator=(const BuyProductResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuyProductResponse& operator=(BuyProductResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BuyProductResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BuyProductResponse* internal_default_instance() {
    return reinterpret_cast<const BuyProductResponse*>(
               &_BuyProductResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(BuyProductResponse& a, BuyProductResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BuyProductResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuyProductResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BuyProductResponse* New() const final {
    return CreateMaybeMessage<BuyProductResponse>(nullptr);
  }

  BuyProductResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BuyProductResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BuyProductResponse& from);
  void MergeFrom(const BuyProductResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuyProductResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.economy.BuyProductResponse";
  }
  protected:
  explicit BuyProductResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_economy_2feconomy_2eproto);
    return ::descriptor_table_economy_2feconomy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.economy.BuyProductResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_economy_2feconomy_2eproto;
};
// -------------------------------------------------------------------

class WatchProductRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.economy.WatchProductRequest) */ {
 public:
  inline WatchProductRequest() : WatchProductRequest(nullptr) {}
  virtual ~WatchProductRequest();

  WatchProductRequest(const WatchProductRequest& from);
  WatchProductRequest(WatchProductRequest&& from) noexcept
    : WatchProductRequest() {
    *this = ::std::move(from);
  }

  inline WatchProductRequest& operator=(const WatchProductRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchProductRequest& operator=(WatchProductRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WatchProductRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WatchProductRequest* internal_default_instance() {
    return reinterpret_cast<const WatchProductRequest*>(
               &_WatchProductRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(WatchProductRequest& a, WatchProductRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchProductRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchProductRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WatchProductRequest* New() const final {
    return CreateMaybeMessage<WatchProductRequest>(nullptr);
  }

  WatchProductRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WatchProductRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WatchProductRequest& from);
  void MergeFrom(const WatchProductRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchProductRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.economy.WatchProductRequest";
  }
  protected:
  explicit WatchProductRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_economy_2feconomy_2eproto);
    return ::descriptor_table_economy_2feconomy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.economy.WatchProductRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_economy_2feconomy_2eproto;
};
// -------------------------------------------------------------------

class WatchProductResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.economy.WatchProductResponse) */ {
 public:
  inline WatchProductResponse() : WatchProductResponse(nullptr) {}
  virtual ~WatchProductResponse();

  WatchProductResponse(const WatchProductResponse& from);
  WatchProductResponse(WatchProductResponse&& from) noexcept
    : WatchProductResponse() {
    *this = ::std::move(from);
  }

  inline WatchProductResponse& operator=(const WatchProductResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchProductResponse& operator=(WatchProductResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WatchProductResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WatchProductResponse* internal_default_instance() {
    return reinterpret_cast<const WatchProductResponse*>(
               &_WatchProductResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(WatchProductResponse& a, WatchProductResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchProductResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchProductResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WatchProductResponse* New() const final {
    return CreateMaybeMessage<WatchProductResponse>(nullptr);
  }

  WatchProductResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WatchProductResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WatchProductResponse& from);
  void MergeFrom(const WatchProductResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchProductResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.economy.WatchProductResponse";
  }
  protected:
  explicit WatchProductResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_economy_2feconomy_2eproto);
    return ::descriptor_table_economy_2feconomy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef WatchProductResponse_ProductEvent ProductEvent;
  static constexpr ProductEvent UNKNOWN =
    WatchProductResponse_ProductEvent_UNKNOWN;
  static constexpr ProductEvent PRICE_CHANGED =
    WatchProductResponse_ProductEvent_PRICE_CHANGED;
  static constexpr ProductEvent PRODUCT_BOUGHT =
    WatchProductResponse_ProductEvent_PRODUCT_BOUGHT;
  static constexpr ProductEvent PRODUCT_INFO_UPDATED =
    WatchProductResponse_ProductEvent_PRODUCT_INFO_UPDATED;
  static constexpr ProductEvent PRODUCT_DELETED =
    WatchProductResponse_ProductEvent_PRODUCT_DELETED;
  static inline bool ProductEvent_IsValid(int value) {
    return WatchProductResponse_ProductEvent_IsValid(value);
  }
  static constexpr ProductEvent ProductEvent_MIN =
    WatchProductResponse_ProductEvent_ProductEvent_MIN;
  static constexpr ProductEvent ProductEvent_MAX =
    WatchProductResponse_ProductEvent_ProductEvent_MAX;
  static constexpr int ProductEvent_ARRAYSIZE =
    WatchProductResponse_ProductEvent_ProductEvent_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ProductEvent_descriptor() {
    return WatchProductResponse_ProductEvent_descriptor();
  }
  template<typename T>
  static inline const std::string& ProductEvent_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ProductEvent>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ProductEvent_Name.");
    return WatchProductResponse_ProductEvent_Name(enum_t_value);
  }
  static inline bool ProductEvent_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ProductEvent* value) {
    return WatchProductResponse_ProductEvent_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEventFieldNumber = 1,
  };
  // .mruv.economy.WatchProductResponse.ProductEvent event = 1;
  void clear_event();
  ::mruv::economy::WatchProductResponse_ProductEvent event() const;
  void set_event(::mruv::economy::WatchProductResponse_ProductEvent value);
  private:
  ::mruv::economy::WatchProductResponse_ProductEvent _internal_event() const;
  void _internal_set_event(::mruv::economy::WatchProductResponse_ProductEvent value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.economy.WatchProductResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int event_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_economy_2feconomy_2eproto;
};
// -------------------------------------------------------------------

class WatchPriceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.economy.WatchPriceRequest) */ {
 public:
  inline WatchPriceRequest() : WatchPriceRequest(nullptr) {}
  virtual ~WatchPriceRequest();

  WatchPriceRequest(const WatchPriceRequest& from);
  WatchPriceRequest(WatchPriceRequest&& from) noexcept
    : WatchPriceRequest() {
    *this = ::std::move(from);
  }

  inline WatchPriceRequest& operator=(const WatchPriceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchPriceRequest& operator=(WatchPriceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WatchPriceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WatchPriceRequest* internal_default_instance() {
    return reinterpret_cast<const WatchPriceRequest*>(
               &_WatchPriceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(WatchPriceRequest& a, WatchPriceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchPriceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchPriceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WatchPriceRequest* New() const final {
    return CreateMaybeMessage<WatchPriceRequest>(nullptr);
  }

  WatchPriceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WatchPriceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WatchPriceRequest& from);
  void MergeFrom(const WatchPriceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchPriceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.economy.WatchPriceRequest";
  }
  protected:
  explicit WatchPriceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_economy_2feconomy_2eproto);
    return ::descriptor_table_economy_2feconomy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.economy.WatchPriceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_economy_2feconomy_2eproto;
};
// -------------------------------------------------------------------

class WatchPriceResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.economy.WatchPriceResponse) */ {
 public:
  inline WatchPriceResponse() : WatchPriceResponse(nullptr) {}
  virtual ~WatchPriceResponse();

  WatchPriceResponse(const WatchPriceResponse& from);
  WatchPriceResponse(WatchPriceResponse&& from) noexcept
    : WatchPriceResponse() {
    *this = ::std::move(from);
  }

  inline WatchPriceResponse& operator=(const WatchPriceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchPriceResponse& operator=(WatchPriceResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WatchPriceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WatchPriceResponse* internal_default_instance() {
    return reinterpret_cast<const WatchPriceResponse*>(
               &_WatchPriceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(WatchPriceResponse& a, WatchPriceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchPriceResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchPriceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WatchPriceResponse* New() const final {
    return CreateMaybeMessage<WatchPriceResponse>(nullptr);
  }

  WatchPriceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WatchPriceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WatchPriceResponse& from);
  void MergeFrom(const WatchPriceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchPriceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.economy.WatchPriceResponse";
  }
  protected:
  explicit WatchPriceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_economy_2feconomy_2eproto);
    return ::descriptor_table_economy_2feconomy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 1,
  };
  // uint32 price = 1;
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::uint32 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.economy.WatchPriceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_economy_2feconomy_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RegisterProductRequest

// string name = 1;
inline void RegisterProductRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterProductRequest::name() const {
  // @@protoc_insertion_point(field_get:mruv.economy.RegisterProductRequest.name)
  return _internal_name();
}
inline void RegisterProductRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mruv.economy.RegisterProductRequest.name)
}
inline std::string* RegisterProductRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mruv.economy.RegisterProductRequest.name)
  return _internal_mutable_name();
}
inline const std::string& RegisterProductRequest::_internal_name() const {
  return name_.Get();
}
inline void RegisterProductRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterProductRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.economy.RegisterProductRequest.name)
}
inline void RegisterProductRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.economy.RegisterProductRequest.name)
}
inline void RegisterProductRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.economy.RegisterProductRequest.name)
}
inline std::string* RegisterProductRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterProductRequest::release_name() {
  // @@protoc_insertion_point(field_release:mruv.economy.RegisterProductRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterProductRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.economy.RegisterProductRequest.name)
}

// string full_name = 2;
inline void RegisterProductRequest::clear_full_name() {
  full_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterProductRequest::full_name() const {
  // @@protoc_insertion_point(field_get:mruv.economy.RegisterProductRequest.full_name)
  return _internal_full_name();
}
inline void RegisterProductRequest::set_full_name(const std::string& value) {
  _internal_set_full_name(value);
  // @@protoc_insertion_point(field_set:mruv.economy.RegisterProductRequest.full_name)
}
inline std::string* RegisterProductRequest::mutable_full_name() {
  // @@protoc_insertion_point(field_mutable:mruv.economy.RegisterProductRequest.full_name)
  return _internal_mutable_full_name();
}
inline const std::string& RegisterProductRequest::_internal_full_name() const {
  return full_name_.Get();
}
inline void RegisterProductRequest::_internal_set_full_name(const std::string& value) {
  
  full_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterProductRequest::set_full_name(std::string&& value) {
  
  full_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.economy.RegisterProductRequest.full_name)
}
inline void RegisterProductRequest::set_full_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  full_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.economy.RegisterProductRequest.full_name)
}
inline void RegisterProductRequest::set_full_name(const char* value,
    size_t size) {
  
  full_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.economy.RegisterProductRequest.full_name)
}
inline std::string* RegisterProductRequest::_internal_mutable_full_name() {
  
  return full_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterProductRequest::release_full_name() {
  // @@protoc_insertion_point(field_release:mruv.economy.RegisterProductRequest.full_name)
  return full_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterProductRequest::set_allocated_full_name(std::string* full_name) {
  if (full_name != nullptr) {
    
  } else {
    
  }
  full_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), full_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.economy.RegisterProductRequest.full_name)
}

// string description = 3;
inline void RegisterProductRequest::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterProductRequest::description() const {
  // @@protoc_insertion_point(field_get:mruv.economy.RegisterProductRequest.description)
  return _internal_description();
}
inline void RegisterProductRequest::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:mruv.economy.RegisterProductRequest.description)
}
inline std::string* RegisterProductRequest::mutable_description() {
  // @@protoc_insertion_point(field_mutable:mruv.economy.RegisterProductRequest.description)
  return _internal_mutable_description();
}
inline const std::string& RegisterProductRequest::_internal_description() const {
  return description_.Get();
}
inline void RegisterProductRequest::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterProductRequest::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.economy.RegisterProductRequest.description)
}
inline void RegisterProductRequest::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.economy.RegisterProductRequest.description)
}
inline void RegisterProductRequest::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.economy.RegisterProductRequest.description)
}
inline std::string* RegisterProductRequest::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterProductRequest::release_description() {
  // @@protoc_insertion_point(field_release:mruv.economy.RegisterProductRequest.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterProductRequest::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.economy.RegisterProductRequest.description)
}

// uint32 price_class = 4;
inline void RegisterProductRequest::clear_price_class() {
  price_class_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegisterProductRequest::_internal_price_class() const {
  return price_class_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegisterProductRequest::price_class() const {
  // @@protoc_insertion_point(field_get:mruv.economy.RegisterProductRequest.price_class)
  return _internal_price_class();
}
inline void RegisterProductRequest::_internal_set_price_class(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  price_class_ = value;
}
inline void RegisterProductRequest::set_price_class(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_price_class(value);
  // @@protoc_insertion_point(field_set:mruv.economy.RegisterProductRequest.price_class)
}

// float price_ratio = 5;
inline void RegisterProductRequest::clear_price_ratio() {
  price_ratio_ = 0;
}
inline float RegisterProductRequest::_internal_price_ratio() const {
  return price_ratio_;
}
inline float RegisterProductRequest::price_ratio() const {
  // @@protoc_insertion_point(field_get:mruv.economy.RegisterProductRequest.price_ratio)
  return _internal_price_ratio();
}
inline void RegisterProductRequest::_internal_set_price_ratio(float value) {
  
  price_ratio_ = value;
}
inline void RegisterProductRequest::set_price_ratio(float value) {
  _internal_set_price_ratio(value);
  // @@protoc_insertion_point(field_set:mruv.economy.RegisterProductRequest.price_ratio)
}

// uint32 starting_price = 6;
inline void RegisterProductRequest::clear_starting_price() {
  starting_price_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegisterProductRequest::_internal_starting_price() const {
  return starting_price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegisterProductRequest::starting_price() const {
  // @@protoc_insertion_point(field_get:mruv.economy.RegisterProductRequest.starting_price)
  return _internal_starting_price();
}
inline void RegisterProductRequest::_internal_set_starting_price(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  starting_price_ = value;
}
inline void RegisterProductRequest::set_starting_price(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_starting_price(value);
  // @@protoc_insertion_point(field_set:mruv.economy.RegisterProductRequest.starting_price)
}

// -------------------------------------------------------------------

// RegisterProductResponse

// uint32 id = 1;
inline void RegisterProductResponse::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegisterProductResponse::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegisterProductResponse::id() const {
  // @@protoc_insertion_point(field_get:mruv.economy.RegisterProductResponse.id)
  return _internal_id();
}
inline void RegisterProductResponse::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void RegisterProductResponse::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.economy.RegisterProductResponse.id)
}

// -------------------------------------------------------------------

// GetProductRequest

// uint32 id = 1;
inline void GetProductRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetProductRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetProductRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.economy.GetProductRequest.id)
  return _internal_id();
}
inline void GetProductRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void GetProductRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.economy.GetProductRequest.id)
}

// string name = 2;
inline void GetProductRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetProductRequest::name() const {
  // @@protoc_insertion_point(field_get:mruv.economy.GetProductRequest.name)
  return _internal_name();
}
inline void GetProductRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mruv.economy.GetProductRequest.name)
}
inline std::string* GetProductRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mruv.economy.GetProductRequest.name)
  return _internal_mutable_name();
}
inline const std::string& GetProductRequest::_internal_name() const {
  return name_.Get();
}
inline void GetProductRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetProductRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.economy.GetProductRequest.name)
}
inline void GetProductRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.economy.GetProductRequest.name)
}
inline void GetProductRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.economy.GetProductRequest.name)
}
inline std::string* GetProductRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetProductRequest::release_name() {
  // @@protoc_insertion_point(field_release:mruv.economy.GetProductRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetProductRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.economy.GetProductRequest.name)
}

// -------------------------------------------------------------------

// GetProductResponse

// string name = 1;
inline void GetProductResponse::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetProductResponse::name() const {
  // @@protoc_insertion_point(field_get:mruv.economy.GetProductResponse.name)
  return _internal_name();
}
inline void GetProductResponse::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mruv.economy.GetProductResponse.name)
}
inline std::string* GetProductResponse::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mruv.economy.GetProductResponse.name)
  return _internal_mutable_name();
}
inline const std::string& GetProductResponse::_internal_name() const {
  return name_.Get();
}
inline void GetProductResponse::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetProductResponse::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.economy.GetProductResponse.name)
}
inline void GetProductResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.economy.GetProductResponse.name)
}
inline void GetProductResponse::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.economy.GetProductResponse.name)
}
inline std::string* GetProductResponse::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetProductResponse::release_name() {
  // @@protoc_insertion_point(field_release:mruv.economy.GetProductResponse.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetProductResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.economy.GetProductResponse.name)
}

// string full_name = 2;
inline void GetProductResponse::clear_full_name() {
  full_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetProductResponse::full_name() const {
  // @@protoc_insertion_point(field_get:mruv.economy.GetProductResponse.full_name)
  return _internal_full_name();
}
inline void GetProductResponse::set_full_name(const std::string& value) {
  _internal_set_full_name(value);
  // @@protoc_insertion_point(field_set:mruv.economy.GetProductResponse.full_name)
}
inline std::string* GetProductResponse::mutable_full_name() {
  // @@protoc_insertion_point(field_mutable:mruv.economy.GetProductResponse.full_name)
  return _internal_mutable_full_name();
}
inline const std::string& GetProductResponse::_internal_full_name() const {
  return full_name_.Get();
}
inline void GetProductResponse::_internal_set_full_name(const std::string& value) {
  
  full_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetProductResponse::set_full_name(std::string&& value) {
  
  full_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.economy.GetProductResponse.full_name)
}
inline void GetProductResponse::set_full_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  full_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.economy.GetProductResponse.full_name)
}
inline void GetProductResponse::set_full_name(const char* value,
    size_t size) {
  
  full_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.economy.GetProductResponse.full_name)
}
inline std::string* GetProductResponse::_internal_mutable_full_name() {
  
  return full_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetProductResponse::release_full_name() {
  // @@protoc_insertion_point(field_release:mruv.economy.GetProductResponse.full_name)
  return full_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetProductResponse::set_allocated_full_name(std::string* full_name) {
  if (full_name != nullptr) {
    
  } else {
    
  }
  full_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), full_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.economy.GetProductResponse.full_name)
}

// string description = 3;
inline void GetProductResponse::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetProductResponse::description() const {
  // @@protoc_insertion_point(field_get:mruv.economy.GetProductResponse.description)
  return _internal_description();
}
inline void GetProductResponse::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:mruv.economy.GetProductResponse.description)
}
inline std::string* GetProductResponse::mutable_description() {
  // @@protoc_insertion_point(field_mutable:mruv.economy.GetProductResponse.description)
  return _internal_mutable_description();
}
inline const std::string& GetProductResponse::_internal_description() const {
  return description_.Get();
}
inline void GetProductResponse::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetProductResponse::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.economy.GetProductResponse.description)
}
inline void GetProductResponse::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.economy.GetProductResponse.description)
}
inline void GetProductResponse::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.economy.GetProductResponse.description)
}
inline std::string* GetProductResponse::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetProductResponse::release_description() {
  // @@protoc_insertion_point(field_release:mruv.economy.GetProductResponse.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetProductResponse::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.economy.GetProductResponse.description)
}

// uint32 price_class = 4;
inline void GetProductResponse::clear_price_class() {
  price_class_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetProductResponse::_internal_price_class() const {
  return price_class_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetProductResponse::price_class() const {
  // @@protoc_insertion_point(field_get:mruv.economy.GetProductResponse.price_class)
  return _internal_price_class();
}
inline void GetProductResponse::_internal_set_price_class(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  price_class_ = value;
}
inline void GetProductResponse::set_price_class(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_price_class(value);
  // @@protoc_insertion_point(field_set:mruv.economy.GetProductResponse.price_class)
}

// float price_ratio = 5;
inline void GetProductResponse::clear_price_ratio() {
  price_ratio_ = 0;
}
inline float GetProductResponse::_internal_price_ratio() const {
  return price_ratio_;
}
inline float GetProductResponse::price_ratio() const {
  // @@protoc_insertion_point(field_get:mruv.economy.GetProductResponse.price_ratio)
  return _internal_price_ratio();
}
inline void GetProductResponse::_internal_set_price_ratio(float value) {
  
  price_ratio_ = value;
}
inline void GetProductResponse::set_price_ratio(float value) {
  _internal_set_price_ratio(value);
  // @@protoc_insertion_point(field_set:mruv.economy.GetProductResponse.price_ratio)
}

// uint32 starting_price = 6;
inline void GetProductResponse::clear_starting_price() {
  starting_price_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetProductResponse::_internal_starting_price() const {
  return starting_price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetProductResponse::starting_price() const {
  // @@protoc_insertion_point(field_get:mruv.economy.GetProductResponse.starting_price)
  return _internal_starting_price();
}
inline void GetProductResponse::_internal_set_starting_price(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  starting_price_ = value;
}
inline void GetProductResponse::set_starting_price(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_starting_price(value);
  // @@protoc_insertion_point(field_set:mruv.economy.GetProductResponse.starting_price)
}

// uint32 price = 7;
inline void GetProductResponse::clear_price() {
  price_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetProductResponse::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetProductResponse::price() const {
  // @@protoc_insertion_point(field_get:mruv.economy.GetProductResponse.price)
  return _internal_price();
}
inline void GetProductResponse::_internal_set_price(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  price_ = value;
}
inline void GetProductResponse::set_price(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:mruv.economy.GetProductResponse.price)
}

// -------------------------------------------------------------------

// UpdateProductRequest

// uint32 id = 1;
inline void UpdateProductRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateProductRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateProductRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.economy.UpdateProductRequest.id)
  return _internal_id();
}
inline void UpdateProductRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void UpdateProductRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.economy.UpdateProductRequest.id)
}

// string name = 2;
inline void UpdateProductRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateProductRequest::name() const {
  // @@protoc_insertion_point(field_get:mruv.economy.UpdateProductRequest.name)
  return _internal_name();
}
inline void UpdateProductRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mruv.economy.UpdateProductRequest.name)
}
inline std::string* UpdateProductRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mruv.economy.UpdateProductRequest.name)
  return _internal_mutable_name();
}
inline const std::string& UpdateProductRequest::_internal_name() const {
  return name_.Get();
}
inline void UpdateProductRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateProductRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.economy.UpdateProductRequest.name)
}
inline void UpdateProductRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.economy.UpdateProductRequest.name)
}
inline void UpdateProductRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.economy.UpdateProductRequest.name)
}
inline std::string* UpdateProductRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateProductRequest::release_name() {
  // @@protoc_insertion_point(field_release:mruv.economy.UpdateProductRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateProductRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.economy.UpdateProductRequest.name)
}

// string full_name = 3;
inline void UpdateProductRequest::clear_full_name() {
  full_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateProductRequest::full_name() const {
  // @@protoc_insertion_point(field_get:mruv.economy.UpdateProductRequest.full_name)
  return _internal_full_name();
}
inline void UpdateProductRequest::set_full_name(const std::string& value) {
  _internal_set_full_name(value);
  // @@protoc_insertion_point(field_set:mruv.economy.UpdateProductRequest.full_name)
}
inline std::string* UpdateProductRequest::mutable_full_name() {
  // @@protoc_insertion_point(field_mutable:mruv.economy.UpdateProductRequest.full_name)
  return _internal_mutable_full_name();
}
inline const std::string& UpdateProductRequest::_internal_full_name() const {
  return full_name_.Get();
}
inline void UpdateProductRequest::_internal_set_full_name(const std::string& value) {
  
  full_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateProductRequest::set_full_name(std::string&& value) {
  
  full_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.economy.UpdateProductRequest.full_name)
}
inline void UpdateProductRequest::set_full_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  full_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.economy.UpdateProductRequest.full_name)
}
inline void UpdateProductRequest::set_full_name(const char* value,
    size_t size) {
  
  full_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.economy.UpdateProductRequest.full_name)
}
inline std::string* UpdateProductRequest::_internal_mutable_full_name() {
  
  return full_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateProductRequest::release_full_name() {
  // @@protoc_insertion_point(field_release:mruv.economy.UpdateProductRequest.full_name)
  return full_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateProductRequest::set_allocated_full_name(std::string* full_name) {
  if (full_name != nullptr) {
    
  } else {
    
  }
  full_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), full_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.economy.UpdateProductRequest.full_name)
}

// string description = 4;
inline void UpdateProductRequest::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateProductRequest::description() const {
  // @@protoc_insertion_point(field_get:mruv.economy.UpdateProductRequest.description)
  return _internal_description();
}
inline void UpdateProductRequest::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:mruv.economy.UpdateProductRequest.description)
}
inline std::string* UpdateProductRequest::mutable_description() {
  // @@protoc_insertion_point(field_mutable:mruv.economy.UpdateProductRequest.description)
  return _internal_mutable_description();
}
inline const std::string& UpdateProductRequest::_internal_description() const {
  return description_.Get();
}
inline void UpdateProductRequest::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateProductRequest::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.economy.UpdateProductRequest.description)
}
inline void UpdateProductRequest::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.economy.UpdateProductRequest.description)
}
inline void UpdateProductRequest::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.economy.UpdateProductRequest.description)
}
inline std::string* UpdateProductRequest::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateProductRequest::release_description() {
  // @@protoc_insertion_point(field_release:mruv.economy.UpdateProductRequest.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateProductRequest::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.economy.UpdateProductRequest.description)
}

// uint32 price_class = 5;
inline void UpdateProductRequest::clear_price_class() {
  price_class_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateProductRequest::_internal_price_class() const {
  return price_class_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateProductRequest::price_class() const {
  // @@protoc_insertion_point(field_get:mruv.economy.UpdateProductRequest.price_class)
  return _internal_price_class();
}
inline void UpdateProductRequest::_internal_set_price_class(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  price_class_ = value;
}
inline void UpdateProductRequest::set_price_class(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_price_class(value);
  // @@protoc_insertion_point(field_set:mruv.economy.UpdateProductRequest.price_class)
}

// float price_ratio = 6;
inline void UpdateProductRequest::clear_price_ratio() {
  price_ratio_ = 0;
}
inline float UpdateProductRequest::_internal_price_ratio() const {
  return price_ratio_;
}
inline float UpdateProductRequest::price_ratio() const {
  // @@protoc_insertion_point(field_get:mruv.economy.UpdateProductRequest.price_ratio)
  return _internal_price_ratio();
}
inline void UpdateProductRequest::_internal_set_price_ratio(float value) {
  
  price_ratio_ = value;
}
inline void UpdateProductRequest::set_price_ratio(float value) {
  _internal_set_price_ratio(value);
  // @@protoc_insertion_point(field_set:mruv.economy.UpdateProductRequest.price_ratio)
}

// -------------------------------------------------------------------

// UpdateProductResponse

// -------------------------------------------------------------------

// UpdatePriceRequest

// uint32 id = 1;
inline void UpdatePriceRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdatePriceRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdatePriceRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.economy.UpdatePriceRequest.id)
  return _internal_id();
}
inline void UpdatePriceRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void UpdatePriceRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.economy.UpdatePriceRequest.id)
}

// string name = 2;
inline void UpdatePriceRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdatePriceRequest::name() const {
  // @@protoc_insertion_point(field_get:mruv.economy.UpdatePriceRequest.name)
  return _internal_name();
}
inline void UpdatePriceRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mruv.economy.UpdatePriceRequest.name)
}
inline std::string* UpdatePriceRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mruv.economy.UpdatePriceRequest.name)
  return _internal_mutable_name();
}
inline const std::string& UpdatePriceRequest::_internal_name() const {
  return name_.Get();
}
inline void UpdatePriceRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdatePriceRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.economy.UpdatePriceRequest.name)
}
inline void UpdatePriceRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.economy.UpdatePriceRequest.name)
}
inline void UpdatePriceRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.economy.UpdatePriceRequest.name)
}
inline std::string* UpdatePriceRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdatePriceRequest::release_name() {
  // @@protoc_insertion_point(field_release:mruv.economy.UpdatePriceRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdatePriceRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.economy.UpdatePriceRequest.name)
}

// uint32 new_price = 3;
inline void UpdatePriceRequest::clear_new_price() {
  new_price_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdatePriceRequest::_internal_new_price() const {
  return new_price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdatePriceRequest::new_price() const {
  // @@protoc_insertion_point(field_get:mruv.economy.UpdatePriceRequest.new_price)
  return _internal_new_price();
}
inline void UpdatePriceRequest::_internal_set_new_price(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  new_price_ = value;
}
inline void UpdatePriceRequest::set_new_price(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_new_price(value);
  // @@protoc_insertion_point(field_set:mruv.economy.UpdatePriceRequest.new_price)
}

// -------------------------------------------------------------------

// UpdatePriceResponse

// -------------------------------------------------------------------

// DeleteProductRequest

// uint32 id = 1;
inline void DeleteProductRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteProductRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteProductRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.economy.DeleteProductRequest.id)
  return _internal_id();
}
inline void DeleteProductRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void DeleteProductRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.economy.DeleteProductRequest.id)
}

// string name = 2;
inline void DeleteProductRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteProductRequest::name() const {
  // @@protoc_insertion_point(field_get:mruv.economy.DeleteProductRequest.name)
  return _internal_name();
}
inline void DeleteProductRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mruv.economy.DeleteProductRequest.name)
}
inline std::string* DeleteProductRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mruv.economy.DeleteProductRequest.name)
  return _internal_mutable_name();
}
inline const std::string& DeleteProductRequest::_internal_name() const {
  return name_.Get();
}
inline void DeleteProductRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteProductRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.economy.DeleteProductRequest.name)
}
inline void DeleteProductRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.economy.DeleteProductRequest.name)
}
inline void DeleteProductRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.economy.DeleteProductRequest.name)
}
inline std::string* DeleteProductRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteProductRequest::release_name() {
  // @@protoc_insertion_point(field_release:mruv.economy.DeleteProductRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteProductRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.economy.DeleteProductRequest.name)
}

// -------------------------------------------------------------------

// DeleteProductResponse

// -------------------------------------------------------------------

// GetPriceRequest

// uint32 id = 1;
inline void GetPriceRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetPriceRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetPriceRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.economy.GetPriceRequest.id)
  return _internal_id();
}
inline void GetPriceRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void GetPriceRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.economy.GetPriceRequest.id)
}

// string name = 2;
inline void GetPriceRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetPriceRequest::name() const {
  // @@protoc_insertion_point(field_get:mruv.economy.GetPriceRequest.name)
  return _internal_name();
}
inline void GetPriceRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mruv.economy.GetPriceRequest.name)
}
inline std::string* GetPriceRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mruv.economy.GetPriceRequest.name)
  return _internal_mutable_name();
}
inline const std::string& GetPriceRequest::_internal_name() const {
  return name_.Get();
}
inline void GetPriceRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetPriceRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.economy.GetPriceRequest.name)
}
inline void GetPriceRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.economy.GetPriceRequest.name)
}
inline void GetPriceRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.economy.GetPriceRequest.name)
}
inline std::string* GetPriceRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetPriceRequest::release_name() {
  // @@protoc_insertion_point(field_release:mruv.economy.GetPriceRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetPriceRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.economy.GetPriceRequest.name)
}

// -------------------------------------------------------------------

// GetPriceResponse

// uint32 price = 1;
inline void GetPriceResponse::clear_price() {
  price_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetPriceResponse::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetPriceResponse::price() const {
  // @@protoc_insertion_point(field_get:mruv.economy.GetPriceResponse.price)
  return _internal_price();
}
inline void GetPriceResponse::_internal_set_price(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  price_ = value;
}
inline void GetPriceResponse::set_price(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:mruv.economy.GetPriceResponse.price)
}

// -------------------------------------------------------------------

// BuyProductRequest

// uint32 id = 1;
inline void BuyProductRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BuyProductRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BuyProductRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.economy.BuyProductRequest.id)
  return _internal_id();
}
inline void BuyProductRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void BuyProductRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.economy.BuyProductRequest.id)
}

// string name = 2;
inline void BuyProductRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BuyProductRequest::name() const {
  // @@protoc_insertion_point(field_get:mruv.economy.BuyProductRequest.name)
  return _internal_name();
}
inline void BuyProductRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mruv.economy.BuyProductRequest.name)
}
inline std::string* BuyProductRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mruv.economy.BuyProductRequest.name)
  return _internal_mutable_name();
}
inline const std::string& BuyProductRequest::_internal_name() const {
  return name_.Get();
}
inline void BuyProductRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BuyProductRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.economy.BuyProductRequest.name)
}
inline void BuyProductRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.economy.BuyProductRequest.name)
}
inline void BuyProductRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.economy.BuyProductRequest.name)
}
inline std::string* BuyProductRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BuyProductRequest::release_name() {
  // @@protoc_insertion_point(field_release:mruv.economy.BuyProductRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BuyProductRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.economy.BuyProductRequest.name)
}

// -------------------------------------------------------------------

// BuyProductResponse

// -------------------------------------------------------------------

// WatchProductRequest

// uint32 id = 1;
inline void WatchProductRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WatchProductRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WatchProductRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.economy.WatchProductRequest.id)
  return _internal_id();
}
inline void WatchProductRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void WatchProductRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.economy.WatchProductRequest.id)
}

// string name = 2;
inline void WatchProductRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WatchProductRequest::name() const {
  // @@protoc_insertion_point(field_get:mruv.economy.WatchProductRequest.name)
  return _internal_name();
}
inline void WatchProductRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mruv.economy.WatchProductRequest.name)
}
inline std::string* WatchProductRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mruv.economy.WatchProductRequest.name)
  return _internal_mutable_name();
}
inline const std::string& WatchProductRequest::_internal_name() const {
  return name_.Get();
}
inline void WatchProductRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WatchProductRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.economy.WatchProductRequest.name)
}
inline void WatchProductRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.economy.WatchProductRequest.name)
}
inline void WatchProductRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.economy.WatchProductRequest.name)
}
inline std::string* WatchProductRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WatchProductRequest::release_name() {
  // @@protoc_insertion_point(field_release:mruv.economy.WatchProductRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WatchProductRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.economy.WatchProductRequest.name)
}

// -------------------------------------------------------------------

// WatchProductResponse

// .mruv.economy.WatchProductResponse.ProductEvent event = 1;
inline void WatchProductResponse::clear_event() {
  event_ = 0;
}
inline ::mruv::economy::WatchProductResponse_ProductEvent WatchProductResponse::_internal_event() const {
  return static_cast< ::mruv::economy::WatchProductResponse_ProductEvent >(event_);
}
inline ::mruv::economy::WatchProductResponse_ProductEvent WatchProductResponse::event() const {
  // @@protoc_insertion_point(field_get:mruv.economy.WatchProductResponse.event)
  return _internal_event();
}
inline void WatchProductResponse::_internal_set_event(::mruv::economy::WatchProductResponse_ProductEvent value) {
  
  event_ = value;
}
inline void WatchProductResponse::set_event(::mruv::economy::WatchProductResponse_ProductEvent value) {
  _internal_set_event(value);
  // @@protoc_insertion_point(field_set:mruv.economy.WatchProductResponse.event)
}

// -------------------------------------------------------------------

// WatchPriceRequest

// uint32 id = 1;
inline void WatchPriceRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WatchPriceRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WatchPriceRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.economy.WatchPriceRequest.id)
  return _internal_id();
}
inline void WatchPriceRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void WatchPriceRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.economy.WatchPriceRequest.id)
}

// string name = 2;
inline void WatchPriceRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WatchPriceRequest::name() const {
  // @@protoc_insertion_point(field_get:mruv.economy.WatchPriceRequest.name)
  return _internal_name();
}
inline void WatchPriceRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mruv.economy.WatchPriceRequest.name)
}
inline std::string* WatchPriceRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mruv.economy.WatchPriceRequest.name)
  return _internal_mutable_name();
}
inline const std::string& WatchPriceRequest::_internal_name() const {
  return name_.Get();
}
inline void WatchPriceRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WatchPriceRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.economy.WatchPriceRequest.name)
}
inline void WatchPriceRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.economy.WatchPriceRequest.name)
}
inline void WatchPriceRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.economy.WatchPriceRequest.name)
}
inline std::string* WatchPriceRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WatchPriceRequest::release_name() {
  // @@protoc_insertion_point(field_release:mruv.economy.WatchPriceRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WatchPriceRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.economy.WatchPriceRequest.name)
}

// -------------------------------------------------------------------

// WatchPriceResponse

// uint32 price = 1;
inline void WatchPriceResponse::clear_price() {
  price_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WatchPriceResponse::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WatchPriceResponse::price() const {
  // @@protoc_insertion_point(field_get:mruv.economy.WatchPriceResponse.price)
  return _internal_price();
}
inline void WatchPriceResponse::_internal_set_price(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  price_ = value;
}
inline void WatchPriceResponse::set_price(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:mruv.economy.WatchPriceResponse.price)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace economy
}  // namespace mruv

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mruv::economy::WatchProductResponse_ProductEvent> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mruv::economy::WatchProductResponse_ProductEvent>() {
  return ::mruv::economy::WatchProductResponse_ProductEvent_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_economy_2feconomy_2eproto
