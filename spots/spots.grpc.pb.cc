// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: spots/spots.proto

#include "spots/spots.pb.h"
#include "spots/spots.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace mruv {
namespace spots {

static const char* MruVSpotsService_method_names[] = {
  "/mruv.spots.MruVSpotsService/CreateSpot",
  "/mruv.spots.MruVSpotsService/GetSpot",
  "/mruv.spots.MruVSpotsService/UpdateSpot",
  "/mruv.spots.MruVSpotsService/DeleteSpot",
};

std::unique_ptr< MruVSpotsService::Stub> MruVSpotsService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MruVSpotsService::Stub> stub(new MruVSpotsService::Stub(channel));
  return stub;
}

MruVSpotsService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateSpot_(MruVSpotsService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSpot_(MruVSpotsService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateSpot_(MruVSpotsService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteSpot_(MruVSpotsService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MruVSpotsService::Stub::CreateSpot(::grpc::ClientContext* context, const ::mruv::spots::CreateSpotRequest& request, ::mruv::spots::CreateSpotResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateSpot_, context, request, response);
}

void MruVSpotsService::Stub::experimental_async::CreateSpot(::grpc::ClientContext* context, const ::mruv::spots::CreateSpotRequest* request, ::mruv::spots::CreateSpotResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateSpot_, context, request, response, std::move(f));
}

void MruVSpotsService::Stub::experimental_async::CreateSpot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::spots::CreateSpotResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateSpot_, context, request, response, std::move(f));
}

void MruVSpotsService::Stub::experimental_async::CreateSpot(::grpc::ClientContext* context, const ::mruv::spots::CreateSpotRequest* request, ::mruv::spots::CreateSpotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateSpot_, context, request, response, reactor);
}

void MruVSpotsService::Stub::experimental_async::CreateSpot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::spots::CreateSpotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateSpot_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::spots::CreateSpotResponse>* MruVSpotsService::Stub::AsyncCreateSpotRaw(::grpc::ClientContext* context, const ::mruv::spots::CreateSpotRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::spots::CreateSpotResponse>::Create(channel_.get(), cq, rpcmethod_CreateSpot_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::spots::CreateSpotResponse>* MruVSpotsService::Stub::PrepareAsyncCreateSpotRaw(::grpc::ClientContext* context, const ::mruv::spots::CreateSpotRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::spots::CreateSpotResponse>::Create(channel_.get(), cq, rpcmethod_CreateSpot_, context, request, false);
}

::grpc::Status MruVSpotsService::Stub::GetSpot(::grpc::ClientContext* context, const ::mruv::spots::GetSpotRequest& request, ::mruv::spots::GetSpotResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetSpot_, context, request, response);
}

void MruVSpotsService::Stub::experimental_async::GetSpot(::grpc::ClientContext* context, const ::mruv::spots::GetSpotRequest* request, ::mruv::spots::GetSpotResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetSpot_, context, request, response, std::move(f));
}

void MruVSpotsService::Stub::experimental_async::GetSpot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::spots::GetSpotResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetSpot_, context, request, response, std::move(f));
}

void MruVSpotsService::Stub::experimental_async::GetSpot(::grpc::ClientContext* context, const ::mruv::spots::GetSpotRequest* request, ::mruv::spots::GetSpotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetSpot_, context, request, response, reactor);
}

void MruVSpotsService::Stub::experimental_async::GetSpot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::spots::GetSpotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetSpot_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::spots::GetSpotResponse>* MruVSpotsService::Stub::AsyncGetSpotRaw(::grpc::ClientContext* context, const ::mruv::spots::GetSpotRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::spots::GetSpotResponse>::Create(channel_.get(), cq, rpcmethod_GetSpot_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::spots::GetSpotResponse>* MruVSpotsService::Stub::PrepareAsyncGetSpotRaw(::grpc::ClientContext* context, const ::mruv::spots::GetSpotRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::spots::GetSpotResponse>::Create(channel_.get(), cq, rpcmethod_GetSpot_, context, request, false);
}

::grpc::Status MruVSpotsService::Stub::UpdateSpot(::grpc::ClientContext* context, const ::mruv::spots::UpdateSpotRequest& request, ::mruv::spots::UpdateSpotResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateSpot_, context, request, response);
}

void MruVSpotsService::Stub::experimental_async::UpdateSpot(::grpc::ClientContext* context, const ::mruv::spots::UpdateSpotRequest* request, ::mruv::spots::UpdateSpotResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateSpot_, context, request, response, std::move(f));
}

void MruVSpotsService::Stub::experimental_async::UpdateSpot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::spots::UpdateSpotResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateSpot_, context, request, response, std::move(f));
}

void MruVSpotsService::Stub::experimental_async::UpdateSpot(::grpc::ClientContext* context, const ::mruv::spots::UpdateSpotRequest* request, ::mruv::spots::UpdateSpotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateSpot_, context, request, response, reactor);
}

void MruVSpotsService::Stub::experimental_async::UpdateSpot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::spots::UpdateSpotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateSpot_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::spots::UpdateSpotResponse>* MruVSpotsService::Stub::AsyncUpdateSpotRaw(::grpc::ClientContext* context, const ::mruv::spots::UpdateSpotRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::spots::UpdateSpotResponse>::Create(channel_.get(), cq, rpcmethod_UpdateSpot_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::spots::UpdateSpotResponse>* MruVSpotsService::Stub::PrepareAsyncUpdateSpotRaw(::grpc::ClientContext* context, const ::mruv::spots::UpdateSpotRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::spots::UpdateSpotResponse>::Create(channel_.get(), cq, rpcmethod_UpdateSpot_, context, request, false);
}

::grpc::Status MruVSpotsService::Stub::DeleteSpot(::grpc::ClientContext* context, const ::mruv::spots::DeleteSpotRequest& request, ::mruv::spots::DeleteSpotResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteSpot_, context, request, response);
}

void MruVSpotsService::Stub::experimental_async::DeleteSpot(::grpc::ClientContext* context, const ::mruv::spots::DeleteSpotRequest* request, ::mruv::spots::DeleteSpotResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteSpot_, context, request, response, std::move(f));
}

void MruVSpotsService::Stub::experimental_async::DeleteSpot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::spots::DeleteSpotResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteSpot_, context, request, response, std::move(f));
}

void MruVSpotsService::Stub::experimental_async::DeleteSpot(::grpc::ClientContext* context, const ::mruv::spots::DeleteSpotRequest* request, ::mruv::spots::DeleteSpotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteSpot_, context, request, response, reactor);
}

void MruVSpotsService::Stub::experimental_async::DeleteSpot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::spots::DeleteSpotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteSpot_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::spots::DeleteSpotResponse>* MruVSpotsService::Stub::AsyncDeleteSpotRaw(::grpc::ClientContext* context, const ::mruv::spots::DeleteSpotRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::spots::DeleteSpotResponse>::Create(channel_.get(), cq, rpcmethod_DeleteSpot_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::spots::DeleteSpotResponse>* MruVSpotsService::Stub::PrepareAsyncDeleteSpotRaw(::grpc::ClientContext* context, const ::mruv::spots::DeleteSpotRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::spots::DeleteSpotResponse>::Create(channel_.get(), cq, rpcmethod_DeleteSpot_, context, request, false);
}

MruVSpotsService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVSpotsService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVSpotsService::Service, ::mruv::spots::CreateSpotRequest, ::mruv::spots::CreateSpotResponse>(
          [](MruVSpotsService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mruv::spots::CreateSpotRequest* req,
             ::mruv::spots::CreateSpotResponse* resp) {
               return service->CreateSpot(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVSpotsService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVSpotsService::Service, ::mruv::spots::GetSpotRequest, ::mruv::spots::GetSpotResponse>(
          [](MruVSpotsService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mruv::spots::GetSpotRequest* req,
             ::mruv::spots::GetSpotResponse* resp) {
               return service->GetSpot(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVSpotsService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVSpotsService::Service, ::mruv::spots::UpdateSpotRequest, ::mruv::spots::UpdateSpotResponse>(
          [](MruVSpotsService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mruv::spots::UpdateSpotRequest* req,
             ::mruv::spots::UpdateSpotResponse* resp) {
               return service->UpdateSpot(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVSpotsService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVSpotsService::Service, ::mruv::spots::DeleteSpotRequest, ::mruv::spots::DeleteSpotResponse>(
          [](MruVSpotsService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mruv::spots::DeleteSpotRequest* req,
             ::mruv::spots::DeleteSpotResponse* resp) {
               return service->DeleteSpot(ctx, req, resp);
             }, this)));
}

MruVSpotsService::Service::~Service() {
}

::grpc::Status MruVSpotsService::Service::CreateSpot(::grpc::ServerContext* context, const ::mruv::spots::CreateSpotRequest* request, ::mruv::spots::CreateSpotResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVSpotsService::Service::GetSpot(::grpc::ServerContext* context, const ::mruv::spots::GetSpotRequest* request, ::mruv::spots::GetSpotResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVSpotsService::Service::UpdateSpot(::grpc::ServerContext* context, const ::mruv::spots::UpdateSpotRequest* request, ::mruv::spots::UpdateSpotResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVSpotsService::Service::DeleteSpot(::grpc::ServerContext* context, const ::mruv::spots::DeleteSpotRequest* request, ::mruv::spots::DeleteSpotResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mruv
}  // namespace spots

