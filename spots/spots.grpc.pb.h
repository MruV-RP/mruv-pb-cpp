// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: spots/spots.proto
#ifndef GRPC_spots_2fspots_2eproto__INCLUDED
#define GRPC_spots_2fspots_2eproto__INCLUDED

#include "spots/spots.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace mruv {
namespace spots {

// The MruV spots service provides procedures for managing spots.
class MruVSpotsService final {
 public:
  static constexpr char const* service_full_name() {
    return "mruv.spots.MruVSpotsService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Create a spot.
    virtual ::grpc::Status CreateSpot(::grpc::ClientContext* context, const ::mruv::spots::CreateSpotRequest& request, ::mruv::spots::CreateSpotResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::spots::CreateSpotResponse>> AsyncCreateSpot(::grpc::ClientContext* context, const ::mruv::spots::CreateSpotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::spots::CreateSpotResponse>>(AsyncCreateSpotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::spots::CreateSpotResponse>> PrepareAsyncCreateSpot(::grpc::ClientContext* context, const ::mruv::spots::CreateSpotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::spots::CreateSpotResponse>>(PrepareAsyncCreateSpotRaw(context, request, cq));
    }
    // Get a spot.
    virtual ::grpc::Status GetSpot(::grpc::ClientContext* context, const ::mruv::spots::GetSpotRequest& request, ::mruv::spots::GetSpotResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::spots::GetSpotResponse>> AsyncGetSpot(::grpc::ClientContext* context, const ::mruv::spots::GetSpotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::spots::GetSpotResponse>>(AsyncGetSpotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::spots::GetSpotResponse>> PrepareAsyncGetSpot(::grpc::ClientContext* context, const ::mruv::spots::GetSpotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::spots::GetSpotResponse>>(PrepareAsyncGetSpotRaw(context, request, cq));
    }
    // Update a spot.
    virtual ::grpc::Status UpdateSpot(::grpc::ClientContext* context, const ::mruv::spots::UpdateSpotRequest& request, ::mruv::spots::UpdateSpotResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::spots::UpdateSpotResponse>> AsyncUpdateSpot(::grpc::ClientContext* context, const ::mruv::spots::UpdateSpotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::spots::UpdateSpotResponse>>(AsyncUpdateSpotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::spots::UpdateSpotResponse>> PrepareAsyncUpdateSpot(::grpc::ClientContext* context, const ::mruv::spots::UpdateSpotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::spots::UpdateSpotResponse>>(PrepareAsyncUpdateSpotRaw(context, request, cq));
    }
    // Delete a spot.
    virtual ::grpc::Status DeleteSpot(::grpc::ClientContext* context, const ::mruv::spots::DeleteSpotRequest& request, ::mruv::spots::DeleteSpotResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::spots::DeleteSpotResponse>> AsyncDeleteSpot(::grpc::ClientContext* context, const ::mruv::spots::DeleteSpotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::spots::DeleteSpotResponse>>(AsyncDeleteSpotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::spots::DeleteSpotResponse>> PrepareAsyncDeleteSpot(::grpc::ClientContext* context, const ::mruv::spots::DeleteSpotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::spots::DeleteSpotResponse>>(PrepareAsyncDeleteSpotRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Create a spot.
      virtual void CreateSpot(::grpc::ClientContext* context, const ::mruv::spots::CreateSpotRequest* request, ::mruv::spots::CreateSpotResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateSpot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::spots::CreateSpotResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateSpot(::grpc::ClientContext* context, const ::mruv::spots::CreateSpotRequest* request, ::mruv::spots::CreateSpotResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateSpot(::grpc::ClientContext* context, const ::mruv::spots::CreateSpotRequest* request, ::mruv::spots::CreateSpotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateSpot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::spots::CreateSpotResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateSpot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::spots::CreateSpotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get a spot.
      virtual void GetSpot(::grpc::ClientContext* context, const ::mruv::spots::GetSpotRequest* request, ::mruv::spots::GetSpotResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSpot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::spots::GetSpotResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetSpot(::grpc::ClientContext* context, const ::mruv::spots::GetSpotRequest* request, ::mruv::spots::GetSpotResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetSpot(::grpc::ClientContext* context, const ::mruv::spots::GetSpotRequest* request, ::mruv::spots::GetSpotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetSpot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::spots::GetSpotResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetSpot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::spots::GetSpotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Update a spot.
      virtual void UpdateSpot(::grpc::ClientContext* context, const ::mruv::spots::UpdateSpotRequest* request, ::mruv::spots::UpdateSpotResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateSpot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::spots::UpdateSpotResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateSpot(::grpc::ClientContext* context, const ::mruv::spots::UpdateSpotRequest* request, ::mruv::spots::UpdateSpotResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateSpot(::grpc::ClientContext* context, const ::mruv::spots::UpdateSpotRequest* request, ::mruv::spots::UpdateSpotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateSpot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::spots::UpdateSpotResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateSpot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::spots::UpdateSpotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Delete a spot.
      virtual void DeleteSpot(::grpc::ClientContext* context, const ::mruv::spots::DeleteSpotRequest* request, ::mruv::spots::DeleteSpotResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteSpot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::spots::DeleteSpotResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteSpot(::grpc::ClientContext* context, const ::mruv::spots::DeleteSpotRequest* request, ::mruv::spots::DeleteSpotResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteSpot(::grpc::ClientContext* context, const ::mruv::spots::DeleteSpotRequest* request, ::mruv::spots::DeleteSpotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteSpot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::spots::DeleteSpotResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteSpot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::spots::DeleteSpotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::spots::CreateSpotResponse>* AsyncCreateSpotRaw(::grpc::ClientContext* context, const ::mruv::spots::CreateSpotRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::spots::CreateSpotResponse>* PrepareAsyncCreateSpotRaw(::grpc::ClientContext* context, const ::mruv::spots::CreateSpotRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::spots::GetSpotResponse>* AsyncGetSpotRaw(::grpc::ClientContext* context, const ::mruv::spots::GetSpotRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::spots::GetSpotResponse>* PrepareAsyncGetSpotRaw(::grpc::ClientContext* context, const ::mruv::spots::GetSpotRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::spots::UpdateSpotResponse>* AsyncUpdateSpotRaw(::grpc::ClientContext* context, const ::mruv::spots::UpdateSpotRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::spots::UpdateSpotResponse>* PrepareAsyncUpdateSpotRaw(::grpc::ClientContext* context, const ::mruv::spots::UpdateSpotRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::spots::DeleteSpotResponse>* AsyncDeleteSpotRaw(::grpc::ClientContext* context, const ::mruv::spots::DeleteSpotRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::spots::DeleteSpotResponse>* PrepareAsyncDeleteSpotRaw(::grpc::ClientContext* context, const ::mruv::spots::DeleteSpotRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateSpot(::grpc::ClientContext* context, const ::mruv::spots::CreateSpotRequest& request, ::mruv::spots::CreateSpotResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::spots::CreateSpotResponse>> AsyncCreateSpot(::grpc::ClientContext* context, const ::mruv::spots::CreateSpotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::spots::CreateSpotResponse>>(AsyncCreateSpotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::spots::CreateSpotResponse>> PrepareAsyncCreateSpot(::grpc::ClientContext* context, const ::mruv::spots::CreateSpotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::spots::CreateSpotResponse>>(PrepareAsyncCreateSpotRaw(context, request, cq));
    }
    ::grpc::Status GetSpot(::grpc::ClientContext* context, const ::mruv::spots::GetSpotRequest& request, ::mruv::spots::GetSpotResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::spots::GetSpotResponse>> AsyncGetSpot(::grpc::ClientContext* context, const ::mruv::spots::GetSpotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::spots::GetSpotResponse>>(AsyncGetSpotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::spots::GetSpotResponse>> PrepareAsyncGetSpot(::grpc::ClientContext* context, const ::mruv::spots::GetSpotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::spots::GetSpotResponse>>(PrepareAsyncGetSpotRaw(context, request, cq));
    }
    ::grpc::Status UpdateSpot(::grpc::ClientContext* context, const ::mruv::spots::UpdateSpotRequest& request, ::mruv::spots::UpdateSpotResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::spots::UpdateSpotResponse>> AsyncUpdateSpot(::grpc::ClientContext* context, const ::mruv::spots::UpdateSpotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::spots::UpdateSpotResponse>>(AsyncUpdateSpotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::spots::UpdateSpotResponse>> PrepareAsyncUpdateSpot(::grpc::ClientContext* context, const ::mruv::spots::UpdateSpotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::spots::UpdateSpotResponse>>(PrepareAsyncUpdateSpotRaw(context, request, cq));
    }
    ::grpc::Status DeleteSpot(::grpc::ClientContext* context, const ::mruv::spots::DeleteSpotRequest& request, ::mruv::spots::DeleteSpotResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::spots::DeleteSpotResponse>> AsyncDeleteSpot(::grpc::ClientContext* context, const ::mruv::spots::DeleteSpotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::spots::DeleteSpotResponse>>(AsyncDeleteSpotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::spots::DeleteSpotResponse>> PrepareAsyncDeleteSpot(::grpc::ClientContext* context, const ::mruv::spots::DeleteSpotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::spots::DeleteSpotResponse>>(PrepareAsyncDeleteSpotRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateSpot(::grpc::ClientContext* context, const ::mruv::spots::CreateSpotRequest* request, ::mruv::spots::CreateSpotResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateSpot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::spots::CreateSpotResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateSpot(::grpc::ClientContext* context, const ::mruv::spots::CreateSpotRequest* request, ::mruv::spots::CreateSpotResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateSpot(::grpc::ClientContext* context, const ::mruv::spots::CreateSpotRequest* request, ::mruv::spots::CreateSpotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateSpot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::spots::CreateSpotResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateSpot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::spots::CreateSpotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetSpot(::grpc::ClientContext* context, const ::mruv::spots::GetSpotRequest* request, ::mruv::spots::GetSpotResponse* response, std::function<void(::grpc::Status)>) override;
      void GetSpot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::spots::GetSpotResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetSpot(::grpc::ClientContext* context, const ::mruv::spots::GetSpotRequest* request, ::mruv::spots::GetSpotResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetSpot(::grpc::ClientContext* context, const ::mruv::spots::GetSpotRequest* request, ::mruv::spots::GetSpotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetSpot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::spots::GetSpotResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetSpot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::spots::GetSpotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateSpot(::grpc::ClientContext* context, const ::mruv::spots::UpdateSpotRequest* request, ::mruv::spots::UpdateSpotResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateSpot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::spots::UpdateSpotResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateSpot(::grpc::ClientContext* context, const ::mruv::spots::UpdateSpotRequest* request, ::mruv::spots::UpdateSpotResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateSpot(::grpc::ClientContext* context, const ::mruv::spots::UpdateSpotRequest* request, ::mruv::spots::UpdateSpotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateSpot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::spots::UpdateSpotResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateSpot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::spots::UpdateSpotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteSpot(::grpc::ClientContext* context, const ::mruv::spots::DeleteSpotRequest* request, ::mruv::spots::DeleteSpotResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteSpot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::spots::DeleteSpotResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteSpot(::grpc::ClientContext* context, const ::mruv::spots::DeleteSpotRequest* request, ::mruv::spots::DeleteSpotResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteSpot(::grpc::ClientContext* context, const ::mruv::spots::DeleteSpotRequest* request, ::mruv::spots::DeleteSpotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteSpot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::spots::DeleteSpotResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteSpot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::spots::DeleteSpotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mruv::spots::CreateSpotResponse>* AsyncCreateSpotRaw(::grpc::ClientContext* context, const ::mruv::spots::CreateSpotRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::spots::CreateSpotResponse>* PrepareAsyncCreateSpotRaw(::grpc::ClientContext* context, const ::mruv::spots::CreateSpotRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::spots::GetSpotResponse>* AsyncGetSpotRaw(::grpc::ClientContext* context, const ::mruv::spots::GetSpotRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::spots::GetSpotResponse>* PrepareAsyncGetSpotRaw(::grpc::ClientContext* context, const ::mruv::spots::GetSpotRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::spots::UpdateSpotResponse>* AsyncUpdateSpotRaw(::grpc::ClientContext* context, const ::mruv::spots::UpdateSpotRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::spots::UpdateSpotResponse>* PrepareAsyncUpdateSpotRaw(::grpc::ClientContext* context, const ::mruv::spots::UpdateSpotRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::spots::DeleteSpotResponse>* AsyncDeleteSpotRaw(::grpc::ClientContext* context, const ::mruv::spots::DeleteSpotRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::spots::DeleteSpotResponse>* PrepareAsyncDeleteSpotRaw(::grpc::ClientContext* context, const ::mruv::spots::DeleteSpotRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateSpot_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSpot_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateSpot_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteSpot_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Create a spot.
    virtual ::grpc::Status CreateSpot(::grpc::ServerContext* context, const ::mruv::spots::CreateSpotRequest* request, ::mruv::spots::CreateSpotResponse* response);
    // Get a spot.
    virtual ::grpc::Status GetSpot(::grpc::ServerContext* context, const ::mruv::spots::GetSpotRequest* request, ::mruv::spots::GetSpotResponse* response);
    // Update a spot.
    virtual ::grpc::Status UpdateSpot(::grpc::ServerContext* context, const ::mruv::spots::UpdateSpotRequest* request, ::mruv::spots::UpdateSpotResponse* response);
    // Delete a spot.
    virtual ::grpc::Status DeleteSpot(::grpc::ServerContext* context, const ::mruv::spots::DeleteSpotRequest* request, ::mruv::spots::DeleteSpotResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateSpot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateSpot() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateSpot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSpot(::grpc::ServerContext* /*context*/, const ::mruv::spots::CreateSpotRequest* /*request*/, ::mruv::spots::CreateSpotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateSpot(::grpc::ServerContext* context, ::mruv::spots::CreateSpotRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::spots::CreateSpotResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSpot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSpot() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetSpot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpot(::grpc::ServerContext* /*context*/, const ::mruv::spots::GetSpotRequest* /*request*/, ::mruv::spots::GetSpotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSpot(::grpc::ServerContext* context, ::mruv::spots::GetSpotRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::spots::GetSpotResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateSpot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateSpot() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateSpot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSpot(::grpc::ServerContext* /*context*/, const ::mruv::spots::UpdateSpotRequest* /*request*/, ::mruv::spots::UpdateSpotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateSpot(::grpc::ServerContext* context, ::mruv::spots::UpdateSpotRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::spots::UpdateSpotResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteSpot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteSpot() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteSpot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSpot(::grpc::ServerContext* /*context*/, const ::mruv::spots::DeleteSpotRequest* /*request*/, ::mruv::spots::DeleteSpotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSpot(::grpc::ServerContext* context, ::mruv::spots::DeleteSpotRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::spots::DeleteSpotResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateSpot<WithAsyncMethod_GetSpot<WithAsyncMethod_UpdateSpot<WithAsyncMethod_DeleteSpot<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateSpot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateSpot() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::spots::CreateSpotRequest, ::mruv::spots::CreateSpotResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::spots::CreateSpotRequest* request, ::mruv::spots::CreateSpotResponse* response) { return this->CreateSpot(context, request, response); }));}
    void SetMessageAllocatorFor_CreateSpot(
        ::grpc::experimental::MessageAllocator< ::mruv::spots::CreateSpotRequest, ::mruv::spots::CreateSpotResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::spots::CreateSpotRequest, ::mruv::spots::CreateSpotResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateSpot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSpot(::grpc::ServerContext* /*context*/, const ::mruv::spots::CreateSpotRequest* /*request*/, ::mruv::spots::CreateSpotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateSpot(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::spots::CreateSpotRequest* /*request*/, ::mruv::spots::CreateSpotResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateSpot(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::spots::CreateSpotRequest* /*request*/, ::mruv::spots::CreateSpotResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetSpot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetSpot() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::spots::GetSpotRequest, ::mruv::spots::GetSpotResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::spots::GetSpotRequest* request, ::mruv::spots::GetSpotResponse* response) { return this->GetSpot(context, request, response); }));}
    void SetMessageAllocatorFor_GetSpot(
        ::grpc::experimental::MessageAllocator< ::mruv::spots::GetSpotRequest, ::mruv::spots::GetSpotResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::spots::GetSpotRequest, ::mruv::spots::GetSpotResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetSpot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpot(::grpc::ServerContext* /*context*/, const ::mruv::spots::GetSpotRequest* /*request*/, ::mruv::spots::GetSpotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetSpot(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::spots::GetSpotRequest* /*request*/, ::mruv::spots::GetSpotResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetSpot(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::spots::GetSpotRequest* /*request*/, ::mruv::spots::GetSpotResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateSpot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateSpot() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::spots::UpdateSpotRequest, ::mruv::spots::UpdateSpotResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::spots::UpdateSpotRequest* request, ::mruv::spots::UpdateSpotResponse* response) { return this->UpdateSpot(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateSpot(
        ::grpc::experimental::MessageAllocator< ::mruv::spots::UpdateSpotRequest, ::mruv::spots::UpdateSpotResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::spots::UpdateSpotRequest, ::mruv::spots::UpdateSpotResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateSpot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSpot(::grpc::ServerContext* /*context*/, const ::mruv::spots::UpdateSpotRequest* /*request*/, ::mruv::spots::UpdateSpotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateSpot(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::spots::UpdateSpotRequest* /*request*/, ::mruv::spots::UpdateSpotResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateSpot(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::spots::UpdateSpotRequest* /*request*/, ::mruv::spots::UpdateSpotResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteSpot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteSpot() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::spots::DeleteSpotRequest, ::mruv::spots::DeleteSpotResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::spots::DeleteSpotRequest* request, ::mruv::spots::DeleteSpotResponse* response) { return this->DeleteSpot(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteSpot(
        ::grpc::experimental::MessageAllocator< ::mruv::spots::DeleteSpotRequest, ::mruv::spots::DeleteSpotResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::spots::DeleteSpotRequest, ::mruv::spots::DeleteSpotResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteSpot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSpot(::grpc::ServerContext* /*context*/, const ::mruv::spots::DeleteSpotRequest* /*request*/, ::mruv::spots::DeleteSpotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteSpot(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::spots::DeleteSpotRequest* /*request*/, ::mruv::spots::DeleteSpotResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteSpot(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::spots::DeleteSpotRequest* /*request*/, ::mruv::spots::DeleteSpotResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_CreateSpot<ExperimentalWithCallbackMethod_GetSpot<ExperimentalWithCallbackMethod_UpdateSpot<ExperimentalWithCallbackMethod_DeleteSpot<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_CreateSpot<ExperimentalWithCallbackMethod_GetSpot<ExperimentalWithCallbackMethod_UpdateSpot<ExperimentalWithCallbackMethod_DeleteSpot<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateSpot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateSpot() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateSpot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSpot(::grpc::ServerContext* /*context*/, const ::mruv::spots::CreateSpotRequest* /*request*/, ::mruv::spots::CreateSpotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSpot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSpot() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetSpot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpot(::grpc::ServerContext* /*context*/, const ::mruv::spots::GetSpotRequest* /*request*/, ::mruv::spots::GetSpotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateSpot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateSpot() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateSpot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSpot(::grpc::ServerContext* /*context*/, const ::mruv::spots::UpdateSpotRequest* /*request*/, ::mruv::spots::UpdateSpotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteSpot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteSpot() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteSpot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSpot(::grpc::ServerContext* /*context*/, const ::mruv::spots::DeleteSpotRequest* /*request*/, ::mruv::spots::DeleteSpotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateSpot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateSpot() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateSpot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSpot(::grpc::ServerContext* /*context*/, const ::mruv::spots::CreateSpotRequest* /*request*/, ::mruv::spots::CreateSpotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateSpot(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSpot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSpot() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetSpot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpot(::grpc::ServerContext* /*context*/, const ::mruv::spots::GetSpotRequest* /*request*/, ::mruv::spots::GetSpotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSpot(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateSpot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateSpot() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateSpot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSpot(::grpc::ServerContext* /*context*/, const ::mruv::spots::UpdateSpotRequest* /*request*/, ::mruv::spots::UpdateSpotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateSpot(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteSpot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteSpot() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteSpot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSpot(::grpc::ServerContext* /*context*/, const ::mruv::spots::DeleteSpotRequest* /*request*/, ::mruv::spots::DeleteSpotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSpot(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateSpot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateSpot() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateSpot(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateSpot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSpot(::grpc::ServerContext* /*context*/, const ::mruv::spots::CreateSpotRequest* /*request*/, ::mruv::spots::CreateSpotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateSpot(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateSpot(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetSpot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetSpot() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSpot(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetSpot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpot(::grpc::ServerContext* /*context*/, const ::mruv::spots::GetSpotRequest* /*request*/, ::mruv::spots::GetSpotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetSpot(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetSpot(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateSpot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateSpot() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateSpot(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateSpot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSpot(::grpc::ServerContext* /*context*/, const ::mruv::spots::UpdateSpotRequest* /*request*/, ::mruv::spots::UpdateSpotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateSpot(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateSpot(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteSpot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteSpot() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteSpot(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteSpot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSpot(::grpc::ServerContext* /*context*/, const ::mruv::spots::DeleteSpotRequest* /*request*/, ::mruv::spots::DeleteSpotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteSpot(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteSpot(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateSpot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateSpot() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::mruv::spots::CreateSpotRequest, ::mruv::spots::CreateSpotResponse>(std::bind(&WithStreamedUnaryMethod_CreateSpot<BaseClass>::StreamedCreateSpot, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateSpot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateSpot(::grpc::ServerContext* /*context*/, const ::mruv::spots::CreateSpotRequest* /*request*/, ::mruv::spots::CreateSpotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateSpot(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::spots::CreateSpotRequest,::mruv::spots::CreateSpotResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSpot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSpot() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::mruv::spots::GetSpotRequest, ::mruv::spots::GetSpotResponse>(std::bind(&WithStreamedUnaryMethod_GetSpot<BaseClass>::StreamedGetSpot, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetSpot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSpot(::grpc::ServerContext* /*context*/, const ::mruv::spots::GetSpotRequest* /*request*/, ::mruv::spots::GetSpotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSpot(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::spots::GetSpotRequest,::mruv::spots::GetSpotResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateSpot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateSpot() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::mruv::spots::UpdateSpotRequest, ::mruv::spots::UpdateSpotResponse>(std::bind(&WithStreamedUnaryMethod_UpdateSpot<BaseClass>::StreamedUpdateSpot, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateSpot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateSpot(::grpc::ServerContext* /*context*/, const ::mruv::spots::UpdateSpotRequest* /*request*/, ::mruv::spots::UpdateSpotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateSpot(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::spots::UpdateSpotRequest,::mruv::spots::UpdateSpotResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteSpot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteSpot() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::mruv::spots::DeleteSpotRequest, ::mruv::spots::DeleteSpotResponse>(std::bind(&WithStreamedUnaryMethod_DeleteSpot<BaseClass>::StreamedDeleteSpot, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteSpot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteSpot(::grpc::ServerContext* /*context*/, const ::mruv::spots::DeleteSpotRequest* /*request*/, ::mruv::spots::DeleteSpotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteSpot(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::spots::DeleteSpotRequest,::mruv::spots::DeleteSpotResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateSpot<WithStreamedUnaryMethod_GetSpot<WithStreamedUnaryMethod_UpdateSpot<WithStreamedUnaryMethod_DeleteSpot<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateSpot<WithStreamedUnaryMethod_GetSpot<WithStreamedUnaryMethod_UpdateSpot<WithStreamedUnaryMethod_DeleteSpot<Service > > > > StreamedService;
};

}  // namespace spots
}  // namespace mruv


#endif  // GRPC_spots_2fspots_2eproto__INCLUDED
