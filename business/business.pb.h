// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: business/business.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_business_2fbusiness_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_business_2fbusiness_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_business_2fbusiness_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_business_2fbusiness_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[21]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_business_2fbusiness_2eproto;
namespace mruv {
namespace business {
class AssignEstateRequest;
class AssignEstateRequestDefaultTypeInternal;
extern AssignEstateRequestDefaultTypeInternal _AssignEstateRequest_default_instance_;
class AssignEstateResponse;
class AssignEstateResponseDefaultTypeInternal;
extern AssignEstateResponseDefaultTypeInternal _AssignEstateResponse_default_instance_;
class AssignOwnerRequest;
class AssignOwnerRequestDefaultTypeInternal;
extern AssignOwnerRequestDefaultTypeInternal _AssignOwnerRequest_default_instance_;
class AssignOwnerResponse;
class AssignOwnerResponseDefaultTypeInternal;
extern AssignOwnerResponseDefaultTypeInternal _AssignOwnerResponse_default_instance_;
class Business;
class BusinessDefaultTypeInternal;
extern BusinessDefaultTypeInternal _Business_default_instance_;
class BuyBusinessRequest;
class BuyBusinessRequestDefaultTypeInternal;
extern BuyBusinessRequestDefaultTypeInternal _BuyBusinessRequest_default_instance_;
class BuyBusinessResponse;
class BuyBusinessResponseDefaultTypeInternal;
extern BuyBusinessResponseDefaultTypeInternal _BuyBusinessResponse_default_instance_;
class CreateBusinessRequest;
class CreateBusinessRequestDefaultTypeInternal;
extern CreateBusinessRequestDefaultTypeInternal _CreateBusinessRequest_default_instance_;
class CreateBusinessResponse;
class CreateBusinessResponseDefaultTypeInternal;
extern CreateBusinessResponseDefaultTypeInternal _CreateBusinessResponse_default_instance_;
class DeleteBusinessRequest;
class DeleteBusinessRequestDefaultTypeInternal;
extern DeleteBusinessRequestDefaultTypeInternal _DeleteBusinessRequest_default_instance_;
class DeleteBusinessResponse;
class DeleteBusinessResponseDefaultTypeInternal;
extern DeleteBusinessResponseDefaultTypeInternal _DeleteBusinessResponse_default_instance_;
class GetBusinessRequest;
class GetBusinessRequestDefaultTypeInternal;
extern GetBusinessRequestDefaultTypeInternal _GetBusinessRequest_default_instance_;
class GetBusinessResponse;
class GetBusinessResponseDefaultTypeInternal;
extern GetBusinessResponseDefaultTypeInternal _GetBusinessResponse_default_instance_;
class UnassignEstateRequest;
class UnassignEstateRequestDefaultTypeInternal;
extern UnassignEstateRequestDefaultTypeInternal _UnassignEstateRequest_default_instance_;
class UnassignEstateResponse;
class UnassignEstateResponseDefaultTypeInternal;
extern UnassignEstateResponseDefaultTypeInternal _UnassignEstateResponse_default_instance_;
class UpdateBusinessRequest;
class UpdateBusinessRequestDefaultTypeInternal;
extern UpdateBusinessRequestDefaultTypeInternal _UpdateBusinessRequest_default_instance_;
class UpdateBusinessResponse;
class UpdateBusinessResponseDefaultTypeInternal;
extern UpdateBusinessResponseDefaultTypeInternal _UpdateBusinessResponse_default_instance_;
class WatchBusinessRequest;
class WatchBusinessRequestDefaultTypeInternal;
extern WatchBusinessRequestDefaultTypeInternal _WatchBusinessRequest_default_instance_;
class WatchBusinessResponse;
class WatchBusinessResponseDefaultTypeInternal;
extern WatchBusinessResponseDefaultTypeInternal _WatchBusinessResponse_default_instance_;
class WatchBusinessesRequest;
class WatchBusinessesRequestDefaultTypeInternal;
extern WatchBusinessesRequestDefaultTypeInternal _WatchBusinessesRequest_default_instance_;
class WatchBusinessesResponse;
class WatchBusinessesResponseDefaultTypeInternal;
extern WatchBusinessesResponseDefaultTypeInternal _WatchBusinessesResponse_default_instance_;
}  // namespace business
}  // namespace mruv
PROTOBUF_NAMESPACE_OPEN
template<> ::mruv::business::AssignEstateRequest* Arena::CreateMaybeMessage<::mruv::business::AssignEstateRequest>(Arena*);
template<> ::mruv::business::AssignEstateResponse* Arena::CreateMaybeMessage<::mruv::business::AssignEstateResponse>(Arena*);
template<> ::mruv::business::AssignOwnerRequest* Arena::CreateMaybeMessage<::mruv::business::AssignOwnerRequest>(Arena*);
template<> ::mruv::business::AssignOwnerResponse* Arena::CreateMaybeMessage<::mruv::business::AssignOwnerResponse>(Arena*);
template<> ::mruv::business::Business* Arena::CreateMaybeMessage<::mruv::business::Business>(Arena*);
template<> ::mruv::business::BuyBusinessRequest* Arena::CreateMaybeMessage<::mruv::business::BuyBusinessRequest>(Arena*);
template<> ::mruv::business::BuyBusinessResponse* Arena::CreateMaybeMessage<::mruv::business::BuyBusinessResponse>(Arena*);
template<> ::mruv::business::CreateBusinessRequest* Arena::CreateMaybeMessage<::mruv::business::CreateBusinessRequest>(Arena*);
template<> ::mruv::business::CreateBusinessResponse* Arena::CreateMaybeMessage<::mruv::business::CreateBusinessResponse>(Arena*);
template<> ::mruv::business::DeleteBusinessRequest* Arena::CreateMaybeMessage<::mruv::business::DeleteBusinessRequest>(Arena*);
template<> ::mruv::business::DeleteBusinessResponse* Arena::CreateMaybeMessage<::mruv::business::DeleteBusinessResponse>(Arena*);
template<> ::mruv::business::GetBusinessRequest* Arena::CreateMaybeMessage<::mruv::business::GetBusinessRequest>(Arena*);
template<> ::mruv::business::GetBusinessResponse* Arena::CreateMaybeMessage<::mruv::business::GetBusinessResponse>(Arena*);
template<> ::mruv::business::UnassignEstateRequest* Arena::CreateMaybeMessage<::mruv::business::UnassignEstateRequest>(Arena*);
template<> ::mruv::business::UnassignEstateResponse* Arena::CreateMaybeMessage<::mruv::business::UnassignEstateResponse>(Arena*);
template<> ::mruv::business::UpdateBusinessRequest* Arena::CreateMaybeMessage<::mruv::business::UpdateBusinessRequest>(Arena*);
template<> ::mruv::business::UpdateBusinessResponse* Arena::CreateMaybeMessage<::mruv::business::UpdateBusinessResponse>(Arena*);
template<> ::mruv::business::WatchBusinessRequest* Arena::CreateMaybeMessage<::mruv::business::WatchBusinessRequest>(Arena*);
template<> ::mruv::business::WatchBusinessResponse* Arena::CreateMaybeMessage<::mruv::business::WatchBusinessResponse>(Arena*);
template<> ::mruv::business::WatchBusinessesRequest* Arena::CreateMaybeMessage<::mruv::business::WatchBusinessesRequest>(Arena*);
template<> ::mruv::business::WatchBusinessesResponse* Arena::CreateMaybeMessage<::mruv::business::WatchBusinessesResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mruv {
namespace business {

enum OwnerType : int {
  UNKNOWN = 0,
  PLAYER = 1,
  GROUP = 2,
  SYSTEM = 3,
  OwnerType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OwnerType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OwnerType_IsValid(int value);
constexpr OwnerType OwnerType_MIN = UNKNOWN;
constexpr OwnerType OwnerType_MAX = SYSTEM;
constexpr int OwnerType_ARRAYSIZE = OwnerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OwnerType_descriptor();
template<typename T>
inline const std::string& OwnerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OwnerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OwnerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OwnerType_descriptor(), enum_t_value);
}
inline bool OwnerType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OwnerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OwnerType>(
    OwnerType_descriptor(), name, value);
}
// ===================================================================

class Business PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.business.Business) */ {
 public:
  inline Business() : Business(nullptr) {}
  virtual ~Business();

  Business(const Business& from);
  Business(Business&& from) noexcept
    : Business() {
    *this = ::std::move(from);
  }

  inline Business& operator=(const Business& from) {
    CopyFrom(from);
    return *this;
  }
  inline Business& operator=(Business&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Business& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Business* internal_default_instance() {
    return reinterpret_cast<const Business*>(
               &_Business_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Business& a, Business& b) {
    a.Swap(&b);
  }
  inline void Swap(Business* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Business* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Business* New() const final {
    return CreateMaybeMessage<Business>(nullptr);
  }

  Business* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Business>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Business& from);
  void MergeFrom(const Business& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Business* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.business.Business";
  }
  protected:
  explicit Business(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_business_2fbusiness_2eproto);
    return ::descriptor_table_business_2fbusiness_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEstateIdsFieldNumber = 3,
    kBusinessItemsFieldNumber = 7,
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kProductIdFieldNumber = 4,
    kOwnerTypeFieldNumber = 5,
    kOwnerIdFieldNumber = 6,
    kBusinessGroupFieldNumber = 8,
  };
  // repeated int64 estate_ids = 3;
  int estate_ids_size() const;
  private:
  int _internal_estate_ids_size() const;
  public:
  void clear_estate_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_estate_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_estate_ids() const;
  void _internal_add_estate_ids(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_estate_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 estate_ids(int index) const;
  void set_estate_ids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_estate_ids(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      estate_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_estate_ids();

  // repeated uint32 business_items = 7;
  int business_items_size() const;
  private:
  int _internal_business_items_size() const;
  public:
  void clear_business_items();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_business_items(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_business_items() const;
  void _internal_add_business_items(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_business_items();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 business_items(int index) const;
  void set_business_items(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_business_items(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      business_items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_business_items();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // uint32 product_id = 4;
  void clear_product_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 product_id() const;
  void set_product_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_product_id() const;
  void _internal_set_product_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .mruv.business.OwnerType owner_type = 5;
  void clear_owner_type();
  ::mruv::business::OwnerType owner_type() const;
  void set_owner_type(::mruv::business::OwnerType value);
  private:
  ::mruv::business::OwnerType _internal_owner_type() const;
  void _internal_set_owner_type(::mruv::business::OwnerType value);
  public:

  // uint32 owner_id = 6;
  void clear_owner_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_id() const;
  void set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_owner_id() const;
  void _internal_set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 business_group = 8;
  void clear_business_group();
  ::PROTOBUF_NAMESPACE_ID::uint32 business_group() const;
  void set_business_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_business_group() const;
  void _internal_set_business_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.business.Business)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > estate_ids_;
  mutable std::atomic<int> _estate_ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > business_items_;
  mutable std::atomic<int> _business_items_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::uint32 product_id_;
  int owner_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 business_group_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_business_2fbusiness_2eproto;
};
// -------------------------------------------------------------------

class CreateBusinessRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.business.CreateBusinessRequest) */ {
 public:
  inline CreateBusinessRequest() : CreateBusinessRequest(nullptr) {}
  virtual ~CreateBusinessRequest();

  CreateBusinessRequest(const CreateBusinessRequest& from);
  CreateBusinessRequest(CreateBusinessRequest&& from) noexcept
    : CreateBusinessRequest() {
    *this = ::std::move(from);
  }

  inline CreateBusinessRequest& operator=(const CreateBusinessRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateBusinessRequest& operator=(CreateBusinessRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateBusinessRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateBusinessRequest* internal_default_instance() {
    return reinterpret_cast<const CreateBusinessRequest*>(
               &_CreateBusinessRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateBusinessRequest& a, CreateBusinessRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateBusinessRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateBusinessRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateBusinessRequest* New() const final {
    return CreateMaybeMessage<CreateBusinessRequest>(nullptr);
  }

  CreateBusinessRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateBusinessRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateBusinessRequest& from);
  void MergeFrom(const CreateBusinessRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateBusinessRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.business.CreateBusinessRequest";
  }
  protected:
  explicit CreateBusinessRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_business_2fbusiness_2eproto);
    return ::descriptor_table_business_2fbusiness_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kProductIdFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // uint32 product_id = 3;
  void clear_product_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 product_id() const;
  void set_product_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_product_id() const;
  void _internal_set_product_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.business.CreateBusinessRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::uint32 product_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_business_2fbusiness_2eproto;
};
// -------------------------------------------------------------------

class CreateBusinessResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.business.CreateBusinessResponse) */ {
 public:
  inline CreateBusinessResponse() : CreateBusinessResponse(nullptr) {}
  virtual ~CreateBusinessResponse();

  CreateBusinessResponse(const CreateBusinessResponse& from);
  CreateBusinessResponse(CreateBusinessResponse&& from) noexcept
    : CreateBusinessResponse() {
    *this = ::std::move(from);
  }

  inline CreateBusinessResponse& operator=(const CreateBusinessResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateBusinessResponse& operator=(CreateBusinessResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateBusinessResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateBusinessResponse* internal_default_instance() {
    return reinterpret_cast<const CreateBusinessResponse*>(
               &_CreateBusinessResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateBusinessResponse& a, CreateBusinessResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateBusinessResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateBusinessResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateBusinessResponse* New() const final {
    return CreateMaybeMessage<CreateBusinessResponse>(nullptr);
  }

  CreateBusinessResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateBusinessResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateBusinessResponse& from);
  void MergeFrom(const CreateBusinessResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateBusinessResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.business.CreateBusinessResponse";
  }
  protected:
  explicit CreateBusinessResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_business_2fbusiness_2eproto);
    return ::descriptor_table_business_2fbusiness_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.business.CreateBusinessResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_business_2fbusiness_2eproto;
};
// -------------------------------------------------------------------

class GetBusinessRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.business.GetBusinessRequest) */ {
 public:
  inline GetBusinessRequest() : GetBusinessRequest(nullptr) {}
  virtual ~GetBusinessRequest();

  GetBusinessRequest(const GetBusinessRequest& from);
  GetBusinessRequest(GetBusinessRequest&& from) noexcept
    : GetBusinessRequest() {
    *this = ::std::move(from);
  }

  inline GetBusinessRequest& operator=(const GetBusinessRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBusinessRequest& operator=(GetBusinessRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBusinessRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBusinessRequest* internal_default_instance() {
    return reinterpret_cast<const GetBusinessRequest*>(
               &_GetBusinessRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetBusinessRequest& a, GetBusinessRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBusinessRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBusinessRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBusinessRequest* New() const final {
    return CreateMaybeMessage<GetBusinessRequest>(nullptr);
  }

  GetBusinessRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBusinessRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBusinessRequest& from);
  void MergeFrom(const GetBusinessRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBusinessRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.business.GetBusinessRequest";
  }
  protected:
  explicit GetBusinessRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_business_2fbusiness_2eproto);
    return ::descriptor_table_business_2fbusiness_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.business.GetBusinessRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_business_2fbusiness_2eproto;
};
// -------------------------------------------------------------------

class GetBusinessResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.business.GetBusinessResponse) */ {
 public:
  inline GetBusinessResponse() : GetBusinessResponse(nullptr) {}
  virtual ~GetBusinessResponse();

  GetBusinessResponse(const GetBusinessResponse& from);
  GetBusinessResponse(GetBusinessResponse&& from) noexcept
    : GetBusinessResponse() {
    *this = ::std::move(from);
  }

  inline GetBusinessResponse& operator=(const GetBusinessResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBusinessResponse& operator=(GetBusinessResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBusinessResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBusinessResponse* internal_default_instance() {
    return reinterpret_cast<const GetBusinessResponse*>(
               &_GetBusinessResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetBusinessResponse& a, GetBusinessResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBusinessResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBusinessResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBusinessResponse* New() const final {
    return CreateMaybeMessage<GetBusinessResponse>(nullptr);
  }

  GetBusinessResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBusinessResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBusinessResponse& from);
  void MergeFrom(const GetBusinessResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBusinessResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.business.GetBusinessResponse";
  }
  protected:
  explicit GetBusinessResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_business_2fbusiness_2eproto);
    return ::descriptor_table_business_2fbusiness_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.business.GetBusinessResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_business_2fbusiness_2eproto;
};
// -------------------------------------------------------------------

class UpdateBusinessRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.business.UpdateBusinessRequest) */ {
 public:
  inline UpdateBusinessRequest() : UpdateBusinessRequest(nullptr) {}
  virtual ~UpdateBusinessRequest();

  UpdateBusinessRequest(const UpdateBusinessRequest& from);
  UpdateBusinessRequest(UpdateBusinessRequest&& from) noexcept
    : UpdateBusinessRequest() {
    *this = ::std::move(from);
  }

  inline UpdateBusinessRequest& operator=(const UpdateBusinessRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateBusinessRequest& operator=(UpdateBusinessRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateBusinessRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateBusinessRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateBusinessRequest*>(
               &_UpdateBusinessRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UpdateBusinessRequest& a, UpdateBusinessRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateBusinessRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateBusinessRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateBusinessRequest* New() const final {
    return CreateMaybeMessage<UpdateBusinessRequest>(nullptr);
  }

  UpdateBusinessRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateBusinessRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateBusinessRequest& from);
  void MergeFrom(const UpdateBusinessRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateBusinessRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.business.UpdateBusinessRequest";
  }
  protected:
  explicit UpdateBusinessRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_business_2fbusiness_2eproto);
    return ::descriptor_table_business_2fbusiness_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.business.UpdateBusinessRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_business_2fbusiness_2eproto;
};
// -------------------------------------------------------------------

class UpdateBusinessResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.business.UpdateBusinessResponse) */ {
 public:
  inline UpdateBusinessResponse() : UpdateBusinessResponse(nullptr) {}
  virtual ~UpdateBusinessResponse();

  UpdateBusinessResponse(const UpdateBusinessResponse& from);
  UpdateBusinessResponse(UpdateBusinessResponse&& from) noexcept
    : UpdateBusinessResponse() {
    *this = ::std::move(from);
  }

  inline UpdateBusinessResponse& operator=(const UpdateBusinessResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateBusinessResponse& operator=(UpdateBusinessResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateBusinessResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateBusinessResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateBusinessResponse*>(
               &_UpdateBusinessResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UpdateBusinessResponse& a, UpdateBusinessResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateBusinessResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateBusinessResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateBusinessResponse* New() const final {
    return CreateMaybeMessage<UpdateBusinessResponse>(nullptr);
  }

  UpdateBusinessResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateBusinessResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateBusinessResponse& from);
  void MergeFrom(const UpdateBusinessResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateBusinessResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.business.UpdateBusinessResponse";
  }
  protected:
  explicit UpdateBusinessResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_business_2fbusiness_2eproto);
    return ::descriptor_table_business_2fbusiness_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.business.UpdateBusinessResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_business_2fbusiness_2eproto;
};
// -------------------------------------------------------------------

class DeleteBusinessRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.business.DeleteBusinessRequest) */ {
 public:
  inline DeleteBusinessRequest() : DeleteBusinessRequest(nullptr) {}
  virtual ~DeleteBusinessRequest();

  DeleteBusinessRequest(const DeleteBusinessRequest& from);
  DeleteBusinessRequest(DeleteBusinessRequest&& from) noexcept
    : DeleteBusinessRequest() {
    *this = ::std::move(from);
  }

  inline DeleteBusinessRequest& operator=(const DeleteBusinessRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteBusinessRequest& operator=(DeleteBusinessRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteBusinessRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteBusinessRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteBusinessRequest*>(
               &_DeleteBusinessRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeleteBusinessRequest& a, DeleteBusinessRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteBusinessRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteBusinessRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteBusinessRequest* New() const final {
    return CreateMaybeMessage<DeleteBusinessRequest>(nullptr);
  }

  DeleteBusinessRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteBusinessRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteBusinessRequest& from);
  void MergeFrom(const DeleteBusinessRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteBusinessRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.business.DeleteBusinessRequest";
  }
  protected:
  explicit DeleteBusinessRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_business_2fbusiness_2eproto);
    return ::descriptor_table_business_2fbusiness_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.business.DeleteBusinessRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_business_2fbusiness_2eproto;
};
// -------------------------------------------------------------------

class DeleteBusinessResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.business.DeleteBusinessResponse) */ {
 public:
  inline DeleteBusinessResponse() : DeleteBusinessResponse(nullptr) {}
  virtual ~DeleteBusinessResponse();

  DeleteBusinessResponse(const DeleteBusinessResponse& from);
  DeleteBusinessResponse(DeleteBusinessResponse&& from) noexcept
    : DeleteBusinessResponse() {
    *this = ::std::move(from);
  }

  inline DeleteBusinessResponse& operator=(const DeleteBusinessResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteBusinessResponse& operator=(DeleteBusinessResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteBusinessResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteBusinessResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteBusinessResponse*>(
               &_DeleteBusinessResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DeleteBusinessResponse& a, DeleteBusinessResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteBusinessResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteBusinessResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteBusinessResponse* New() const final {
    return CreateMaybeMessage<DeleteBusinessResponse>(nullptr);
  }

  DeleteBusinessResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteBusinessResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteBusinessResponse& from);
  void MergeFrom(const DeleteBusinessResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteBusinessResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.business.DeleteBusinessResponse";
  }
  protected:
  explicit DeleteBusinessResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_business_2fbusiness_2eproto);
    return ::descriptor_table_business_2fbusiness_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.business.DeleteBusinessResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_business_2fbusiness_2eproto;
};
// -------------------------------------------------------------------

class AssignOwnerRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.business.AssignOwnerRequest) */ {
 public:
  inline AssignOwnerRequest() : AssignOwnerRequest(nullptr) {}
  virtual ~AssignOwnerRequest();

  AssignOwnerRequest(const AssignOwnerRequest& from);
  AssignOwnerRequest(AssignOwnerRequest&& from) noexcept
    : AssignOwnerRequest() {
    *this = ::std::move(from);
  }

  inline AssignOwnerRequest& operator=(const AssignOwnerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssignOwnerRequest& operator=(AssignOwnerRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AssignOwnerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AssignOwnerRequest* internal_default_instance() {
    return reinterpret_cast<const AssignOwnerRequest*>(
               &_AssignOwnerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AssignOwnerRequest& a, AssignOwnerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AssignOwnerRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssignOwnerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AssignOwnerRequest* New() const final {
    return CreateMaybeMessage<AssignOwnerRequest>(nullptr);
  }

  AssignOwnerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AssignOwnerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AssignOwnerRequest& from);
  void MergeFrom(const AssignOwnerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssignOwnerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.business.AssignOwnerRequest";
  }
  protected:
  explicit AssignOwnerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_business_2fbusiness_2eproto);
    return ::descriptor_table_business_2fbusiness_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.business.AssignOwnerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_business_2fbusiness_2eproto;
};
// -------------------------------------------------------------------

class AssignOwnerResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.business.AssignOwnerResponse) */ {
 public:
  inline AssignOwnerResponse() : AssignOwnerResponse(nullptr) {}
  virtual ~AssignOwnerResponse();

  AssignOwnerResponse(const AssignOwnerResponse& from);
  AssignOwnerResponse(AssignOwnerResponse&& from) noexcept
    : AssignOwnerResponse() {
    *this = ::std::move(from);
  }

  inline AssignOwnerResponse& operator=(const AssignOwnerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssignOwnerResponse& operator=(AssignOwnerResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AssignOwnerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AssignOwnerResponse* internal_default_instance() {
    return reinterpret_cast<const AssignOwnerResponse*>(
               &_AssignOwnerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(AssignOwnerResponse& a, AssignOwnerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AssignOwnerResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssignOwnerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AssignOwnerResponse* New() const final {
    return CreateMaybeMessage<AssignOwnerResponse>(nullptr);
  }

  AssignOwnerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AssignOwnerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AssignOwnerResponse& from);
  void MergeFrom(const AssignOwnerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssignOwnerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.business.AssignOwnerResponse";
  }
  protected:
  explicit AssignOwnerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_business_2fbusiness_2eproto);
    return ::descriptor_table_business_2fbusiness_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerTypeFieldNumber = 5,
    kOwnerIdFieldNumber = 6,
  };
  // .mruv.business.OwnerType owner_type = 5;
  void clear_owner_type();
  ::mruv::business::OwnerType owner_type() const;
  void set_owner_type(::mruv::business::OwnerType value);
  private:
  ::mruv::business::OwnerType _internal_owner_type() const;
  void _internal_set_owner_type(::mruv::business::OwnerType value);
  public:

  // uint32 owner_id = 6;
  void clear_owner_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_id() const;
  void set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_owner_id() const;
  void _internal_set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.business.AssignOwnerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int owner_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_business_2fbusiness_2eproto;
};
// -------------------------------------------------------------------

class AssignEstateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.business.AssignEstateRequest) */ {
 public:
  inline AssignEstateRequest() : AssignEstateRequest(nullptr) {}
  virtual ~AssignEstateRequest();

  AssignEstateRequest(const AssignEstateRequest& from);
  AssignEstateRequest(AssignEstateRequest&& from) noexcept
    : AssignEstateRequest() {
    *this = ::std::move(from);
  }

  inline AssignEstateRequest& operator=(const AssignEstateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssignEstateRequest& operator=(AssignEstateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AssignEstateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AssignEstateRequest* internal_default_instance() {
    return reinterpret_cast<const AssignEstateRequest*>(
               &_AssignEstateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(AssignEstateRequest& a, AssignEstateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AssignEstateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssignEstateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AssignEstateRequest* New() const final {
    return CreateMaybeMessage<AssignEstateRequest>(nullptr);
  }

  AssignEstateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AssignEstateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AssignEstateRequest& from);
  void MergeFrom(const AssignEstateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssignEstateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.business.AssignEstateRequest";
  }
  protected:
  explicit AssignEstateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_business_2fbusiness_2eproto);
    return ::descriptor_table_business_2fbusiness_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusinessIdFieldNumber = 1,
    kEstateIdFieldNumber = 2,
  };
  // uint32 business_id = 1;
  void clear_business_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 business_id() const;
  void set_business_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_business_id() const;
  void _internal_set_business_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 estate_id = 2;
  void clear_estate_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 estate_id() const;
  void set_estate_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_estate_id() const;
  void _internal_set_estate_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.business.AssignEstateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 business_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 estate_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_business_2fbusiness_2eproto;
};
// -------------------------------------------------------------------

class AssignEstateResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.business.AssignEstateResponse) */ {
 public:
  inline AssignEstateResponse() : AssignEstateResponse(nullptr) {}
  virtual ~AssignEstateResponse();

  AssignEstateResponse(const AssignEstateResponse& from);
  AssignEstateResponse(AssignEstateResponse&& from) noexcept
    : AssignEstateResponse() {
    *this = ::std::move(from);
  }

  inline AssignEstateResponse& operator=(const AssignEstateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssignEstateResponse& operator=(AssignEstateResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AssignEstateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AssignEstateResponse* internal_default_instance() {
    return reinterpret_cast<const AssignEstateResponse*>(
               &_AssignEstateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(AssignEstateResponse& a, AssignEstateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AssignEstateResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssignEstateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AssignEstateResponse* New() const final {
    return CreateMaybeMessage<AssignEstateResponse>(nullptr);
  }

  AssignEstateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AssignEstateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AssignEstateResponse& from);
  void MergeFrom(const AssignEstateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssignEstateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.business.AssignEstateResponse";
  }
  protected:
  explicit AssignEstateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_business_2fbusiness_2eproto);
    return ::descriptor_table_business_2fbusiness_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEstateCountFieldNumber = 1,
  };
  // uint32 estate_count = 1;
  void clear_estate_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 estate_count() const;
  void set_estate_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_estate_count() const;
  void _internal_set_estate_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.business.AssignEstateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 estate_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_business_2fbusiness_2eproto;
};
// -------------------------------------------------------------------

class UnassignEstateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.business.UnassignEstateRequest) */ {
 public:
  inline UnassignEstateRequest() : UnassignEstateRequest(nullptr) {}
  virtual ~UnassignEstateRequest();

  UnassignEstateRequest(const UnassignEstateRequest& from);
  UnassignEstateRequest(UnassignEstateRequest&& from) noexcept
    : UnassignEstateRequest() {
    *this = ::std::move(from);
  }

  inline UnassignEstateRequest& operator=(const UnassignEstateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnassignEstateRequest& operator=(UnassignEstateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnassignEstateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnassignEstateRequest* internal_default_instance() {
    return reinterpret_cast<const UnassignEstateRequest*>(
               &_UnassignEstateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(UnassignEstateRequest& a, UnassignEstateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnassignEstateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnassignEstateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnassignEstateRequest* New() const final {
    return CreateMaybeMessage<UnassignEstateRequest>(nullptr);
  }

  UnassignEstateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnassignEstateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnassignEstateRequest& from);
  void MergeFrom(const UnassignEstateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnassignEstateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.business.UnassignEstateRequest";
  }
  protected:
  explicit UnassignEstateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_business_2fbusiness_2eproto);
    return ::descriptor_table_business_2fbusiness_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusinessIdFieldNumber = 1,
    kEstateIdFieldNumber = 2,
  };
  // uint32 business_id = 1;
  void clear_business_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 business_id() const;
  void set_business_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_business_id() const;
  void _internal_set_business_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 estate_id = 2;
  void clear_estate_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 estate_id() const;
  void set_estate_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_estate_id() const;
  void _internal_set_estate_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.business.UnassignEstateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 business_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 estate_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_business_2fbusiness_2eproto;
};
// -------------------------------------------------------------------

class UnassignEstateResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.business.UnassignEstateResponse) */ {
 public:
  inline UnassignEstateResponse() : UnassignEstateResponse(nullptr) {}
  virtual ~UnassignEstateResponse();

  UnassignEstateResponse(const UnassignEstateResponse& from);
  UnassignEstateResponse(UnassignEstateResponse&& from) noexcept
    : UnassignEstateResponse() {
    *this = ::std::move(from);
  }

  inline UnassignEstateResponse& operator=(const UnassignEstateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnassignEstateResponse& operator=(UnassignEstateResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnassignEstateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnassignEstateResponse* internal_default_instance() {
    return reinterpret_cast<const UnassignEstateResponse*>(
               &_UnassignEstateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(UnassignEstateResponse& a, UnassignEstateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UnassignEstateResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnassignEstateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnassignEstateResponse* New() const final {
    return CreateMaybeMessage<UnassignEstateResponse>(nullptr);
  }

  UnassignEstateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnassignEstateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnassignEstateResponse& from);
  void MergeFrom(const UnassignEstateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnassignEstateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.business.UnassignEstateResponse";
  }
  protected:
  explicit UnassignEstateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_business_2fbusiness_2eproto);
    return ::descriptor_table_business_2fbusiness_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEstateCountFieldNumber = 1,
  };
  // uint32 estate_count = 1;
  void clear_estate_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 estate_count() const;
  void set_estate_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_estate_count() const;
  void _internal_set_estate_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.business.UnassignEstateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 estate_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_business_2fbusiness_2eproto;
};
// -------------------------------------------------------------------

class BuyBusinessRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.business.BuyBusinessRequest) */ {
 public:
  inline BuyBusinessRequest() : BuyBusinessRequest(nullptr) {}
  virtual ~BuyBusinessRequest();

  BuyBusinessRequest(const BuyBusinessRequest& from);
  BuyBusinessRequest(BuyBusinessRequest&& from) noexcept
    : BuyBusinessRequest() {
    *this = ::std::move(from);
  }

  inline BuyBusinessRequest& operator=(const BuyBusinessRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuyBusinessRequest& operator=(BuyBusinessRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BuyBusinessRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BuyBusinessRequest* internal_default_instance() {
    return reinterpret_cast<const BuyBusinessRequest*>(
               &_BuyBusinessRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(BuyBusinessRequest& a, BuyBusinessRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BuyBusinessRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuyBusinessRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BuyBusinessRequest* New() const final {
    return CreateMaybeMessage<BuyBusinessRequest>(nullptr);
  }

  BuyBusinessRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BuyBusinessRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BuyBusinessRequest& from);
  void MergeFrom(const BuyBusinessRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuyBusinessRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.business.BuyBusinessRequest";
  }
  protected:
  explicit BuyBusinessRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_business_2fbusiness_2eproto);
    return ::descriptor_table_business_2fbusiness_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kBuyerTypeFieldNumber = 5,
    kBuyerIdFieldNumber = 6,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .mruv.business.OwnerType buyer_type = 5;
  void clear_buyer_type();
  ::mruv::business::OwnerType buyer_type() const;
  void set_buyer_type(::mruv::business::OwnerType value);
  private:
  ::mruv::business::OwnerType _internal_buyer_type() const;
  void _internal_set_buyer_type(::mruv::business::OwnerType value);
  public:

  // uint32 buyer_id = 6;
  void clear_buyer_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 buyer_id() const;
  void set_buyer_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_buyer_id() const;
  void _internal_set_buyer_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.business.BuyBusinessRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  int buyer_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 buyer_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_business_2fbusiness_2eproto;
};
// -------------------------------------------------------------------

class BuyBusinessResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.business.BuyBusinessResponse) */ {
 public:
  inline BuyBusinessResponse() : BuyBusinessResponse(nullptr) {}
  virtual ~BuyBusinessResponse();

  BuyBusinessResponse(const BuyBusinessResponse& from);
  BuyBusinessResponse(BuyBusinessResponse&& from) noexcept
    : BuyBusinessResponse() {
    *this = ::std::move(from);
  }

  inline BuyBusinessResponse& operator=(const BuyBusinessResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuyBusinessResponse& operator=(BuyBusinessResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BuyBusinessResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BuyBusinessResponse* internal_default_instance() {
    return reinterpret_cast<const BuyBusinessResponse*>(
               &_BuyBusinessResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(BuyBusinessResponse& a, BuyBusinessResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BuyBusinessResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuyBusinessResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BuyBusinessResponse* New() const final {
    return CreateMaybeMessage<BuyBusinessResponse>(nullptr);
  }

  BuyBusinessResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BuyBusinessResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BuyBusinessResponse& from);
  void MergeFrom(const BuyBusinessResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuyBusinessResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.business.BuyBusinessResponse";
  }
  protected:
  explicit BuyBusinessResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_business_2fbusiness_2eproto);
    return ::descriptor_table_business_2fbusiness_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.business.BuyBusinessResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_business_2fbusiness_2eproto;
};
// -------------------------------------------------------------------

class WatchBusinessRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.business.WatchBusinessRequest) */ {
 public:
  inline WatchBusinessRequest() : WatchBusinessRequest(nullptr) {}
  virtual ~WatchBusinessRequest();

  WatchBusinessRequest(const WatchBusinessRequest& from);
  WatchBusinessRequest(WatchBusinessRequest&& from) noexcept
    : WatchBusinessRequest() {
    *this = ::std::move(from);
  }

  inline WatchBusinessRequest& operator=(const WatchBusinessRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchBusinessRequest& operator=(WatchBusinessRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WatchBusinessRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WatchBusinessRequest* internal_default_instance() {
    return reinterpret_cast<const WatchBusinessRequest*>(
               &_WatchBusinessRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(WatchBusinessRequest& a, WatchBusinessRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchBusinessRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchBusinessRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WatchBusinessRequest* New() const final {
    return CreateMaybeMessage<WatchBusinessRequest>(nullptr);
  }

  WatchBusinessRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WatchBusinessRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WatchBusinessRequest& from);
  void MergeFrom(const WatchBusinessRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchBusinessRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.business.WatchBusinessRequest";
  }
  protected:
  explicit WatchBusinessRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_business_2fbusiness_2eproto);
    return ::descriptor_table_business_2fbusiness_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.business.WatchBusinessRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_business_2fbusiness_2eproto;
};
// -------------------------------------------------------------------

class WatchBusinessResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.business.WatchBusinessResponse) */ {
 public:
  inline WatchBusinessResponse() : WatchBusinessResponse(nullptr) {}
  virtual ~WatchBusinessResponse();

  WatchBusinessResponse(const WatchBusinessResponse& from);
  WatchBusinessResponse(WatchBusinessResponse&& from) noexcept
    : WatchBusinessResponse() {
    *this = ::std::move(from);
  }

  inline WatchBusinessResponse& operator=(const WatchBusinessResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchBusinessResponse& operator=(WatchBusinessResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WatchBusinessResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WatchBusinessResponse* internal_default_instance() {
    return reinterpret_cast<const WatchBusinessResponse*>(
               &_WatchBusinessResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(WatchBusinessResponse& a, WatchBusinessResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchBusinessResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchBusinessResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WatchBusinessResponse* New() const final {
    return CreateMaybeMessage<WatchBusinessResponse>(nullptr);
  }

  WatchBusinessResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WatchBusinessResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WatchBusinessResponse& from);
  void MergeFrom(const WatchBusinessResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchBusinessResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.business.WatchBusinessResponse";
  }
  protected:
  explicit WatchBusinessResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_business_2fbusiness_2eproto);
    return ::descriptor_table_business_2fbusiness_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.business.WatchBusinessResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_business_2fbusiness_2eproto;
};
// -------------------------------------------------------------------

class WatchBusinessesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.business.WatchBusinessesRequest) */ {
 public:
  inline WatchBusinessesRequest() : WatchBusinessesRequest(nullptr) {}
  virtual ~WatchBusinessesRequest();

  WatchBusinessesRequest(const WatchBusinessesRequest& from);
  WatchBusinessesRequest(WatchBusinessesRequest&& from) noexcept
    : WatchBusinessesRequest() {
    *this = ::std::move(from);
  }

  inline WatchBusinessesRequest& operator=(const WatchBusinessesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchBusinessesRequest& operator=(WatchBusinessesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WatchBusinessesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WatchBusinessesRequest* internal_default_instance() {
    return reinterpret_cast<const WatchBusinessesRequest*>(
               &_WatchBusinessesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(WatchBusinessesRequest& a, WatchBusinessesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchBusinessesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchBusinessesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WatchBusinessesRequest* New() const final {
    return CreateMaybeMessage<WatchBusinessesRequest>(nullptr);
  }

  WatchBusinessesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WatchBusinessesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WatchBusinessesRequest& from);
  void MergeFrom(const WatchBusinessesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchBusinessesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.business.WatchBusinessesRequest";
  }
  protected:
  explicit WatchBusinessesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_business_2fbusiness_2eproto);
    return ::descriptor_table_business_2fbusiness_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.business.WatchBusinessesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_business_2fbusiness_2eproto;
};
// -------------------------------------------------------------------

class WatchBusinessesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.business.WatchBusinessesResponse) */ {
 public:
  inline WatchBusinessesResponse() : WatchBusinessesResponse(nullptr) {}
  virtual ~WatchBusinessesResponse();

  WatchBusinessesResponse(const WatchBusinessesResponse& from);
  WatchBusinessesResponse(WatchBusinessesResponse&& from) noexcept
    : WatchBusinessesResponse() {
    *this = ::std::move(from);
  }

  inline WatchBusinessesResponse& operator=(const WatchBusinessesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchBusinessesResponse& operator=(WatchBusinessesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WatchBusinessesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WatchBusinessesResponse* internal_default_instance() {
    return reinterpret_cast<const WatchBusinessesResponse*>(
               &_WatchBusinessesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(WatchBusinessesResponse& a, WatchBusinessesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchBusinessesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchBusinessesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WatchBusinessesResponse* New() const final {
    return CreateMaybeMessage<WatchBusinessesResponse>(nullptr);
  }

  WatchBusinessesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WatchBusinessesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WatchBusinessesResponse& from);
  void MergeFrom(const WatchBusinessesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchBusinessesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.business.WatchBusinessesResponse";
  }
  protected:
  explicit WatchBusinessesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_business_2fbusiness_2eproto);
    return ::descriptor_table_business_2fbusiness_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.business.WatchBusinessesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_business_2fbusiness_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Business

// string name = 1;
inline void Business::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Business::name() const {
  // @@protoc_insertion_point(field_get:mruv.business.Business.name)
  return _internal_name();
}
inline void Business::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mruv.business.Business.name)
}
inline std::string* Business::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mruv.business.Business.name)
  return _internal_mutable_name();
}
inline const std::string& Business::_internal_name() const {
  return name_.Get();
}
inline void Business::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Business::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.business.Business.name)
}
inline void Business::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.business.Business.name)
}
inline void Business::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.business.Business.name)
}
inline std::string* Business::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Business::release_name() {
  // @@protoc_insertion_point(field_release:mruv.business.Business.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Business::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.business.Business.name)
}

// string description = 2;
inline void Business::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Business::description() const {
  // @@protoc_insertion_point(field_get:mruv.business.Business.description)
  return _internal_description();
}
inline void Business::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:mruv.business.Business.description)
}
inline std::string* Business::mutable_description() {
  // @@protoc_insertion_point(field_mutable:mruv.business.Business.description)
  return _internal_mutable_description();
}
inline const std::string& Business::_internal_description() const {
  return description_.Get();
}
inline void Business::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Business::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.business.Business.description)
}
inline void Business::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.business.Business.description)
}
inline void Business::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.business.Business.description)
}
inline std::string* Business::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Business::release_description() {
  // @@protoc_insertion_point(field_release:mruv.business.Business.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Business::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.business.Business.description)
}

// repeated int64 estate_ids = 3;
inline int Business::_internal_estate_ids_size() const {
  return estate_ids_.size();
}
inline int Business::estate_ids_size() const {
  return _internal_estate_ids_size();
}
inline void Business::clear_estate_ids() {
  estate_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Business::_internal_estate_ids(int index) const {
  return estate_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Business::estate_ids(int index) const {
  // @@protoc_insertion_point(field_get:mruv.business.Business.estate_ids)
  return _internal_estate_ids(index);
}
inline void Business::set_estate_ids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  estate_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:mruv.business.Business.estate_ids)
}
inline void Business::_internal_add_estate_ids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  estate_ids_.Add(value);
}
inline void Business::add_estate_ids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_estate_ids(value);
  // @@protoc_insertion_point(field_add:mruv.business.Business.estate_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Business::_internal_estate_ids() const {
  return estate_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Business::estate_ids() const {
  // @@protoc_insertion_point(field_list:mruv.business.Business.estate_ids)
  return _internal_estate_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Business::_internal_mutable_estate_ids() {
  return &estate_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Business::mutable_estate_ids() {
  // @@protoc_insertion_point(field_mutable_list:mruv.business.Business.estate_ids)
  return _internal_mutable_estate_ids();
}

// uint32 product_id = 4;
inline void Business::clear_product_id() {
  product_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Business::_internal_product_id() const {
  return product_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Business::product_id() const {
  // @@protoc_insertion_point(field_get:mruv.business.Business.product_id)
  return _internal_product_id();
}
inline void Business::_internal_set_product_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  product_id_ = value;
}
inline void Business::set_product_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_product_id(value);
  // @@protoc_insertion_point(field_set:mruv.business.Business.product_id)
}

// .mruv.business.OwnerType owner_type = 5;
inline void Business::clear_owner_type() {
  owner_type_ = 0;
}
inline ::mruv::business::OwnerType Business::_internal_owner_type() const {
  return static_cast< ::mruv::business::OwnerType >(owner_type_);
}
inline ::mruv::business::OwnerType Business::owner_type() const {
  // @@protoc_insertion_point(field_get:mruv.business.Business.owner_type)
  return _internal_owner_type();
}
inline void Business::_internal_set_owner_type(::mruv::business::OwnerType value) {
  
  owner_type_ = value;
}
inline void Business::set_owner_type(::mruv::business::OwnerType value) {
  _internal_set_owner_type(value);
  // @@protoc_insertion_point(field_set:mruv.business.Business.owner_type)
}

// uint32 owner_id = 6;
inline void Business::clear_owner_id() {
  owner_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Business::_internal_owner_id() const {
  return owner_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Business::owner_id() const {
  // @@protoc_insertion_point(field_get:mruv.business.Business.owner_id)
  return _internal_owner_id();
}
inline void Business::_internal_set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  owner_id_ = value;
}
inline void Business::set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_owner_id(value);
  // @@protoc_insertion_point(field_set:mruv.business.Business.owner_id)
}

// repeated uint32 business_items = 7;
inline int Business::_internal_business_items_size() const {
  return business_items_.size();
}
inline int Business::business_items_size() const {
  return _internal_business_items_size();
}
inline void Business::clear_business_items() {
  business_items_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Business::_internal_business_items(int index) const {
  return business_items_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Business::business_items(int index) const {
  // @@protoc_insertion_point(field_get:mruv.business.Business.business_items)
  return _internal_business_items(index);
}
inline void Business::set_business_items(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  business_items_.Set(index, value);
  // @@protoc_insertion_point(field_set:mruv.business.Business.business_items)
}
inline void Business::_internal_add_business_items(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  business_items_.Add(value);
}
inline void Business::add_business_items(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_business_items(value);
  // @@protoc_insertion_point(field_add:mruv.business.Business.business_items)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Business::_internal_business_items() const {
  return business_items_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Business::business_items() const {
  // @@protoc_insertion_point(field_list:mruv.business.Business.business_items)
  return _internal_business_items();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Business::_internal_mutable_business_items() {
  return &business_items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Business::mutable_business_items() {
  // @@protoc_insertion_point(field_mutable_list:mruv.business.Business.business_items)
  return _internal_mutable_business_items();
}

// uint32 business_group = 8;
inline void Business::clear_business_group() {
  business_group_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Business::_internal_business_group() const {
  return business_group_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Business::business_group() const {
  // @@protoc_insertion_point(field_get:mruv.business.Business.business_group)
  return _internal_business_group();
}
inline void Business::_internal_set_business_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  business_group_ = value;
}
inline void Business::set_business_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_business_group(value);
  // @@protoc_insertion_point(field_set:mruv.business.Business.business_group)
}

// -------------------------------------------------------------------

// CreateBusinessRequest

// string name = 1;
inline void CreateBusinessRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateBusinessRequest::name() const {
  // @@protoc_insertion_point(field_get:mruv.business.CreateBusinessRequest.name)
  return _internal_name();
}
inline void CreateBusinessRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mruv.business.CreateBusinessRequest.name)
}
inline std::string* CreateBusinessRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mruv.business.CreateBusinessRequest.name)
  return _internal_mutable_name();
}
inline const std::string& CreateBusinessRequest::_internal_name() const {
  return name_.Get();
}
inline void CreateBusinessRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateBusinessRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.business.CreateBusinessRequest.name)
}
inline void CreateBusinessRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.business.CreateBusinessRequest.name)
}
inline void CreateBusinessRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.business.CreateBusinessRequest.name)
}
inline std::string* CreateBusinessRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateBusinessRequest::release_name() {
  // @@protoc_insertion_point(field_release:mruv.business.CreateBusinessRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateBusinessRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.business.CreateBusinessRequest.name)
}

// string description = 2;
inline void CreateBusinessRequest::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateBusinessRequest::description() const {
  // @@protoc_insertion_point(field_get:mruv.business.CreateBusinessRequest.description)
  return _internal_description();
}
inline void CreateBusinessRequest::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:mruv.business.CreateBusinessRequest.description)
}
inline std::string* CreateBusinessRequest::mutable_description() {
  // @@protoc_insertion_point(field_mutable:mruv.business.CreateBusinessRequest.description)
  return _internal_mutable_description();
}
inline const std::string& CreateBusinessRequest::_internal_description() const {
  return description_.Get();
}
inline void CreateBusinessRequest::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateBusinessRequest::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.business.CreateBusinessRequest.description)
}
inline void CreateBusinessRequest::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.business.CreateBusinessRequest.description)
}
inline void CreateBusinessRequest::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.business.CreateBusinessRequest.description)
}
inline std::string* CreateBusinessRequest::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateBusinessRequest::release_description() {
  // @@protoc_insertion_point(field_release:mruv.business.CreateBusinessRequest.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateBusinessRequest::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.business.CreateBusinessRequest.description)
}

// uint32 product_id = 3;
inline void CreateBusinessRequest::clear_product_id() {
  product_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateBusinessRequest::_internal_product_id() const {
  return product_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateBusinessRequest::product_id() const {
  // @@protoc_insertion_point(field_get:mruv.business.CreateBusinessRequest.product_id)
  return _internal_product_id();
}
inline void CreateBusinessRequest::_internal_set_product_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  product_id_ = value;
}
inline void CreateBusinessRequest::set_product_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_product_id(value);
  // @@protoc_insertion_point(field_set:mruv.business.CreateBusinessRequest.product_id)
}

// -------------------------------------------------------------------

// CreateBusinessResponse

// uint32 id = 1;
inline void CreateBusinessResponse::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateBusinessResponse::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateBusinessResponse::id() const {
  // @@protoc_insertion_point(field_get:mruv.business.CreateBusinessResponse.id)
  return _internal_id();
}
inline void CreateBusinessResponse::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void CreateBusinessResponse::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.business.CreateBusinessResponse.id)
}

// -------------------------------------------------------------------

// GetBusinessRequest

// uint32 id = 1;
inline void GetBusinessRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetBusinessRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetBusinessRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.business.GetBusinessRequest.id)
  return _internal_id();
}
inline void GetBusinessRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void GetBusinessRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.business.GetBusinessRequest.id)
}

// -------------------------------------------------------------------

// GetBusinessResponse

// -------------------------------------------------------------------

// UpdateBusinessRequest

// uint32 id = 1;
inline void UpdateBusinessRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateBusinessRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateBusinessRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.business.UpdateBusinessRequest.id)
  return _internal_id();
}
inline void UpdateBusinessRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void UpdateBusinessRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.business.UpdateBusinessRequest.id)
}

// -------------------------------------------------------------------

// UpdateBusinessResponse

// -------------------------------------------------------------------

// DeleteBusinessRequest

// uint32 id = 1;
inline void DeleteBusinessRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteBusinessRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteBusinessRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.business.DeleteBusinessRequest.id)
  return _internal_id();
}
inline void DeleteBusinessRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void DeleteBusinessRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.business.DeleteBusinessRequest.id)
}

// -------------------------------------------------------------------

// DeleteBusinessResponse

// -------------------------------------------------------------------

// AssignOwnerRequest

// uint32 id = 1;
inline void AssignOwnerRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AssignOwnerRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AssignOwnerRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.business.AssignOwnerRequest.id)
  return _internal_id();
}
inline void AssignOwnerRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void AssignOwnerRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.business.AssignOwnerRequest.id)
}

// -------------------------------------------------------------------

// AssignOwnerResponse

// .mruv.business.OwnerType owner_type = 5;
inline void AssignOwnerResponse::clear_owner_type() {
  owner_type_ = 0;
}
inline ::mruv::business::OwnerType AssignOwnerResponse::_internal_owner_type() const {
  return static_cast< ::mruv::business::OwnerType >(owner_type_);
}
inline ::mruv::business::OwnerType AssignOwnerResponse::owner_type() const {
  // @@protoc_insertion_point(field_get:mruv.business.AssignOwnerResponse.owner_type)
  return _internal_owner_type();
}
inline void AssignOwnerResponse::_internal_set_owner_type(::mruv::business::OwnerType value) {
  
  owner_type_ = value;
}
inline void AssignOwnerResponse::set_owner_type(::mruv::business::OwnerType value) {
  _internal_set_owner_type(value);
  // @@protoc_insertion_point(field_set:mruv.business.AssignOwnerResponse.owner_type)
}

// uint32 owner_id = 6;
inline void AssignOwnerResponse::clear_owner_id() {
  owner_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AssignOwnerResponse::_internal_owner_id() const {
  return owner_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AssignOwnerResponse::owner_id() const {
  // @@protoc_insertion_point(field_get:mruv.business.AssignOwnerResponse.owner_id)
  return _internal_owner_id();
}
inline void AssignOwnerResponse::_internal_set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  owner_id_ = value;
}
inline void AssignOwnerResponse::set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_owner_id(value);
  // @@protoc_insertion_point(field_set:mruv.business.AssignOwnerResponse.owner_id)
}

// -------------------------------------------------------------------

// AssignEstateRequest

// uint32 business_id = 1;
inline void AssignEstateRequest::clear_business_id() {
  business_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AssignEstateRequest::_internal_business_id() const {
  return business_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AssignEstateRequest::business_id() const {
  // @@protoc_insertion_point(field_get:mruv.business.AssignEstateRequest.business_id)
  return _internal_business_id();
}
inline void AssignEstateRequest::_internal_set_business_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  business_id_ = value;
}
inline void AssignEstateRequest::set_business_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_business_id(value);
  // @@protoc_insertion_point(field_set:mruv.business.AssignEstateRequest.business_id)
}

// uint32 estate_id = 2;
inline void AssignEstateRequest::clear_estate_id() {
  estate_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AssignEstateRequest::_internal_estate_id() const {
  return estate_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AssignEstateRequest::estate_id() const {
  // @@protoc_insertion_point(field_get:mruv.business.AssignEstateRequest.estate_id)
  return _internal_estate_id();
}
inline void AssignEstateRequest::_internal_set_estate_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  estate_id_ = value;
}
inline void AssignEstateRequest::set_estate_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_estate_id(value);
  // @@protoc_insertion_point(field_set:mruv.business.AssignEstateRequest.estate_id)
}

// -------------------------------------------------------------------

// AssignEstateResponse

// uint32 estate_count = 1;
inline void AssignEstateResponse::clear_estate_count() {
  estate_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AssignEstateResponse::_internal_estate_count() const {
  return estate_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AssignEstateResponse::estate_count() const {
  // @@protoc_insertion_point(field_get:mruv.business.AssignEstateResponse.estate_count)
  return _internal_estate_count();
}
inline void AssignEstateResponse::_internal_set_estate_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  estate_count_ = value;
}
inline void AssignEstateResponse::set_estate_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_estate_count(value);
  // @@protoc_insertion_point(field_set:mruv.business.AssignEstateResponse.estate_count)
}

// -------------------------------------------------------------------

// UnassignEstateRequest

// uint32 business_id = 1;
inline void UnassignEstateRequest::clear_business_id() {
  business_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnassignEstateRequest::_internal_business_id() const {
  return business_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnassignEstateRequest::business_id() const {
  // @@protoc_insertion_point(field_get:mruv.business.UnassignEstateRequest.business_id)
  return _internal_business_id();
}
inline void UnassignEstateRequest::_internal_set_business_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  business_id_ = value;
}
inline void UnassignEstateRequest::set_business_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_business_id(value);
  // @@protoc_insertion_point(field_set:mruv.business.UnassignEstateRequest.business_id)
}

// uint32 estate_id = 2;
inline void UnassignEstateRequest::clear_estate_id() {
  estate_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnassignEstateRequest::_internal_estate_id() const {
  return estate_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnassignEstateRequest::estate_id() const {
  // @@protoc_insertion_point(field_get:mruv.business.UnassignEstateRequest.estate_id)
  return _internal_estate_id();
}
inline void UnassignEstateRequest::_internal_set_estate_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  estate_id_ = value;
}
inline void UnassignEstateRequest::set_estate_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_estate_id(value);
  // @@protoc_insertion_point(field_set:mruv.business.UnassignEstateRequest.estate_id)
}

// -------------------------------------------------------------------

// UnassignEstateResponse

// uint32 estate_count = 1;
inline void UnassignEstateResponse::clear_estate_count() {
  estate_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnassignEstateResponse::_internal_estate_count() const {
  return estate_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnassignEstateResponse::estate_count() const {
  // @@protoc_insertion_point(field_get:mruv.business.UnassignEstateResponse.estate_count)
  return _internal_estate_count();
}
inline void UnassignEstateResponse::_internal_set_estate_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  estate_count_ = value;
}
inline void UnassignEstateResponse::set_estate_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_estate_count(value);
  // @@protoc_insertion_point(field_set:mruv.business.UnassignEstateResponse.estate_count)
}

// -------------------------------------------------------------------

// BuyBusinessRequest

// uint32 id = 1;
inline void BuyBusinessRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BuyBusinessRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BuyBusinessRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.business.BuyBusinessRequest.id)
  return _internal_id();
}
inline void BuyBusinessRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void BuyBusinessRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.business.BuyBusinessRequest.id)
}

// .mruv.business.OwnerType buyer_type = 5;
inline void BuyBusinessRequest::clear_buyer_type() {
  buyer_type_ = 0;
}
inline ::mruv::business::OwnerType BuyBusinessRequest::_internal_buyer_type() const {
  return static_cast< ::mruv::business::OwnerType >(buyer_type_);
}
inline ::mruv::business::OwnerType BuyBusinessRequest::buyer_type() const {
  // @@protoc_insertion_point(field_get:mruv.business.BuyBusinessRequest.buyer_type)
  return _internal_buyer_type();
}
inline void BuyBusinessRequest::_internal_set_buyer_type(::mruv::business::OwnerType value) {
  
  buyer_type_ = value;
}
inline void BuyBusinessRequest::set_buyer_type(::mruv::business::OwnerType value) {
  _internal_set_buyer_type(value);
  // @@protoc_insertion_point(field_set:mruv.business.BuyBusinessRequest.buyer_type)
}

// uint32 buyer_id = 6;
inline void BuyBusinessRequest::clear_buyer_id() {
  buyer_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BuyBusinessRequest::_internal_buyer_id() const {
  return buyer_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BuyBusinessRequest::buyer_id() const {
  // @@protoc_insertion_point(field_get:mruv.business.BuyBusinessRequest.buyer_id)
  return _internal_buyer_id();
}
inline void BuyBusinessRequest::_internal_set_buyer_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  buyer_id_ = value;
}
inline void BuyBusinessRequest::set_buyer_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_buyer_id(value);
  // @@protoc_insertion_point(field_set:mruv.business.BuyBusinessRequest.buyer_id)
}

// -------------------------------------------------------------------

// BuyBusinessResponse

// -------------------------------------------------------------------

// WatchBusinessRequest

// -------------------------------------------------------------------

// WatchBusinessResponse

// -------------------------------------------------------------------

// WatchBusinessesRequest

// -------------------------------------------------------------------

// WatchBusinessesResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace business
}  // namespace mruv

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mruv::business::OwnerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mruv::business::OwnerType>() {
  return ::mruv::business::OwnerType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_business_2fbusiness_2eproto
