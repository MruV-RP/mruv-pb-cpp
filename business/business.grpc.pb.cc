// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: business/business.proto

#include "business/business.pb.h"
#include "business/business.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace mruv {
namespace business {

static const char* MruVBusinessService_method_names[] = {
  "/mruv.business.MruVBusinessService/CreateBusiness",
  "/mruv.business.MruVBusinessService/GetBusiness",
  "/mruv.business.MruVBusinessService/UpdateBusiness",
  "/mruv.business.MruVBusinessService/DeleteBusiness",
  "/mruv.business.MruVBusinessService/AssignOwner",
  "/mruv.business.MruVBusinessService/AssignEstate",
  "/mruv.business.MruVBusinessService/UnassignEstate",
  "/mruv.business.MruVBusinessService/BuyBusiness",
  "/mruv.business.MruVBusinessService/WatchBusiness",
  "/mruv.business.MruVBusinessService/WatchBusinesses",
};

std::unique_ptr< MruVBusinessService::Stub> MruVBusinessService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MruVBusinessService::Stub> stub(new MruVBusinessService::Stub(channel));
  return stub;
}

MruVBusinessService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateBusiness_(MruVBusinessService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBusiness_(MruVBusinessService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateBusiness_(MruVBusinessService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteBusiness_(MruVBusinessService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AssignOwner_(MruVBusinessService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AssignEstate_(MruVBusinessService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnassignEstate_(MruVBusinessService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BuyBusiness_(MruVBusinessService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WatchBusiness_(MruVBusinessService_method_names[8], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_WatchBusinesses_(MruVBusinessService_method_names[9], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status MruVBusinessService::Stub::CreateBusiness(::grpc::ClientContext* context, const ::mruv::business::CreateBusinessRequest& request, ::mruv::business::CreateBusinessResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateBusiness_, context, request, response);
}

void MruVBusinessService::Stub::experimental_async::CreateBusiness(::grpc::ClientContext* context, const ::mruv::business::CreateBusinessRequest* request, ::mruv::business::CreateBusinessResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateBusiness_, context, request, response, std::move(f));
}

void MruVBusinessService::Stub::experimental_async::CreateBusiness(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::business::CreateBusinessResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateBusiness_, context, request, response, std::move(f));
}

void MruVBusinessService::Stub::experimental_async::CreateBusiness(::grpc::ClientContext* context, const ::mruv::business::CreateBusinessRequest* request, ::mruv::business::CreateBusinessResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateBusiness_, context, request, response, reactor);
}

void MruVBusinessService::Stub::experimental_async::CreateBusiness(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::business::CreateBusinessResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateBusiness_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::business::CreateBusinessResponse>* MruVBusinessService::Stub::AsyncCreateBusinessRaw(::grpc::ClientContext* context, const ::mruv::business::CreateBusinessRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::business::CreateBusinessResponse>::Create(channel_.get(), cq, rpcmethod_CreateBusiness_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::business::CreateBusinessResponse>* MruVBusinessService::Stub::PrepareAsyncCreateBusinessRaw(::grpc::ClientContext* context, const ::mruv::business::CreateBusinessRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::business::CreateBusinessResponse>::Create(channel_.get(), cq, rpcmethod_CreateBusiness_, context, request, false);
}

::grpc::Status MruVBusinessService::Stub::GetBusiness(::grpc::ClientContext* context, const ::mruv::business::GetBusinessRequest& request, ::mruv::business::Business* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetBusiness_, context, request, response);
}

void MruVBusinessService::Stub::experimental_async::GetBusiness(::grpc::ClientContext* context, const ::mruv::business::GetBusinessRequest* request, ::mruv::business::Business* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetBusiness_, context, request, response, std::move(f));
}

void MruVBusinessService::Stub::experimental_async::GetBusiness(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::business::Business* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetBusiness_, context, request, response, std::move(f));
}

void MruVBusinessService::Stub::experimental_async::GetBusiness(::grpc::ClientContext* context, const ::mruv::business::GetBusinessRequest* request, ::mruv::business::Business* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetBusiness_, context, request, response, reactor);
}

void MruVBusinessService::Stub::experimental_async::GetBusiness(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::business::Business* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetBusiness_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::business::Business>* MruVBusinessService::Stub::AsyncGetBusinessRaw(::grpc::ClientContext* context, const ::mruv::business::GetBusinessRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::business::Business>::Create(channel_.get(), cq, rpcmethod_GetBusiness_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::business::Business>* MruVBusinessService::Stub::PrepareAsyncGetBusinessRaw(::grpc::ClientContext* context, const ::mruv::business::GetBusinessRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::business::Business>::Create(channel_.get(), cq, rpcmethod_GetBusiness_, context, request, false);
}

::grpc::Status MruVBusinessService::Stub::UpdateBusiness(::grpc::ClientContext* context, const ::mruv::business::UpdateBusinessRequest& request, ::mruv::business::Business* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateBusiness_, context, request, response);
}

void MruVBusinessService::Stub::experimental_async::UpdateBusiness(::grpc::ClientContext* context, const ::mruv::business::UpdateBusinessRequest* request, ::mruv::business::Business* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateBusiness_, context, request, response, std::move(f));
}

void MruVBusinessService::Stub::experimental_async::UpdateBusiness(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::business::Business* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateBusiness_, context, request, response, std::move(f));
}

void MruVBusinessService::Stub::experimental_async::UpdateBusiness(::grpc::ClientContext* context, const ::mruv::business::UpdateBusinessRequest* request, ::mruv::business::Business* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateBusiness_, context, request, response, reactor);
}

void MruVBusinessService::Stub::experimental_async::UpdateBusiness(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::business::Business* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateBusiness_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::business::Business>* MruVBusinessService::Stub::AsyncUpdateBusinessRaw(::grpc::ClientContext* context, const ::mruv::business::UpdateBusinessRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::business::Business>::Create(channel_.get(), cq, rpcmethod_UpdateBusiness_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::business::Business>* MruVBusinessService::Stub::PrepareAsyncUpdateBusinessRaw(::grpc::ClientContext* context, const ::mruv::business::UpdateBusinessRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::business::Business>::Create(channel_.get(), cq, rpcmethod_UpdateBusiness_, context, request, false);
}

::grpc::Status MruVBusinessService::Stub::DeleteBusiness(::grpc::ClientContext* context, const ::mruv::business::DeleteBusinessRequest& request, ::mruv::business::DeleteBusinessResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteBusiness_, context, request, response);
}

void MruVBusinessService::Stub::experimental_async::DeleteBusiness(::grpc::ClientContext* context, const ::mruv::business::DeleteBusinessRequest* request, ::mruv::business::DeleteBusinessResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteBusiness_, context, request, response, std::move(f));
}

void MruVBusinessService::Stub::experimental_async::DeleteBusiness(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::business::DeleteBusinessResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteBusiness_, context, request, response, std::move(f));
}

void MruVBusinessService::Stub::experimental_async::DeleteBusiness(::grpc::ClientContext* context, const ::mruv::business::DeleteBusinessRequest* request, ::mruv::business::DeleteBusinessResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteBusiness_, context, request, response, reactor);
}

void MruVBusinessService::Stub::experimental_async::DeleteBusiness(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::business::DeleteBusinessResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteBusiness_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::business::DeleteBusinessResponse>* MruVBusinessService::Stub::AsyncDeleteBusinessRaw(::grpc::ClientContext* context, const ::mruv::business::DeleteBusinessRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::business::DeleteBusinessResponse>::Create(channel_.get(), cq, rpcmethod_DeleteBusiness_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::business::DeleteBusinessResponse>* MruVBusinessService::Stub::PrepareAsyncDeleteBusinessRaw(::grpc::ClientContext* context, const ::mruv::business::DeleteBusinessRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::business::DeleteBusinessResponse>::Create(channel_.get(), cq, rpcmethod_DeleteBusiness_, context, request, false);
}

::grpc::Status MruVBusinessService::Stub::AssignOwner(::grpc::ClientContext* context, const ::mruv::business::AssignOwnerRequest& request, ::mruv::business::AssignOwnerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AssignOwner_, context, request, response);
}

void MruVBusinessService::Stub::experimental_async::AssignOwner(::grpc::ClientContext* context, const ::mruv::business::AssignOwnerRequest* request, ::mruv::business::AssignOwnerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AssignOwner_, context, request, response, std::move(f));
}

void MruVBusinessService::Stub::experimental_async::AssignOwner(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::business::AssignOwnerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AssignOwner_, context, request, response, std::move(f));
}

void MruVBusinessService::Stub::experimental_async::AssignOwner(::grpc::ClientContext* context, const ::mruv::business::AssignOwnerRequest* request, ::mruv::business::AssignOwnerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AssignOwner_, context, request, response, reactor);
}

void MruVBusinessService::Stub::experimental_async::AssignOwner(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::business::AssignOwnerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AssignOwner_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::business::AssignOwnerResponse>* MruVBusinessService::Stub::AsyncAssignOwnerRaw(::grpc::ClientContext* context, const ::mruv::business::AssignOwnerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::business::AssignOwnerResponse>::Create(channel_.get(), cq, rpcmethod_AssignOwner_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::business::AssignOwnerResponse>* MruVBusinessService::Stub::PrepareAsyncAssignOwnerRaw(::grpc::ClientContext* context, const ::mruv::business::AssignOwnerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::business::AssignOwnerResponse>::Create(channel_.get(), cq, rpcmethod_AssignOwner_, context, request, false);
}

::grpc::Status MruVBusinessService::Stub::AssignEstate(::grpc::ClientContext* context, const ::mruv::business::AssignEstateRequest& request, ::mruv::business::AssignEstateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AssignEstate_, context, request, response);
}

void MruVBusinessService::Stub::experimental_async::AssignEstate(::grpc::ClientContext* context, const ::mruv::business::AssignEstateRequest* request, ::mruv::business::AssignEstateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AssignEstate_, context, request, response, std::move(f));
}

void MruVBusinessService::Stub::experimental_async::AssignEstate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::business::AssignEstateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AssignEstate_, context, request, response, std::move(f));
}

void MruVBusinessService::Stub::experimental_async::AssignEstate(::grpc::ClientContext* context, const ::mruv::business::AssignEstateRequest* request, ::mruv::business::AssignEstateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AssignEstate_, context, request, response, reactor);
}

void MruVBusinessService::Stub::experimental_async::AssignEstate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::business::AssignEstateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AssignEstate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::business::AssignEstateResponse>* MruVBusinessService::Stub::AsyncAssignEstateRaw(::grpc::ClientContext* context, const ::mruv::business::AssignEstateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::business::AssignEstateResponse>::Create(channel_.get(), cq, rpcmethod_AssignEstate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::business::AssignEstateResponse>* MruVBusinessService::Stub::PrepareAsyncAssignEstateRaw(::grpc::ClientContext* context, const ::mruv::business::AssignEstateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::business::AssignEstateResponse>::Create(channel_.get(), cq, rpcmethod_AssignEstate_, context, request, false);
}

::grpc::Status MruVBusinessService::Stub::UnassignEstate(::grpc::ClientContext* context, const ::mruv::business::UnassignEstateRequest& request, ::mruv::business::UnassignEstateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UnassignEstate_, context, request, response);
}

void MruVBusinessService::Stub::experimental_async::UnassignEstate(::grpc::ClientContext* context, const ::mruv::business::UnassignEstateRequest* request, ::mruv::business::UnassignEstateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UnassignEstate_, context, request, response, std::move(f));
}

void MruVBusinessService::Stub::experimental_async::UnassignEstate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::business::UnassignEstateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UnassignEstate_, context, request, response, std::move(f));
}

void MruVBusinessService::Stub::experimental_async::UnassignEstate(::grpc::ClientContext* context, const ::mruv::business::UnassignEstateRequest* request, ::mruv::business::UnassignEstateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UnassignEstate_, context, request, response, reactor);
}

void MruVBusinessService::Stub::experimental_async::UnassignEstate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::business::UnassignEstateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UnassignEstate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::business::UnassignEstateResponse>* MruVBusinessService::Stub::AsyncUnassignEstateRaw(::grpc::ClientContext* context, const ::mruv::business::UnassignEstateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::business::UnassignEstateResponse>::Create(channel_.get(), cq, rpcmethod_UnassignEstate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::business::UnassignEstateResponse>* MruVBusinessService::Stub::PrepareAsyncUnassignEstateRaw(::grpc::ClientContext* context, const ::mruv::business::UnassignEstateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::business::UnassignEstateResponse>::Create(channel_.get(), cq, rpcmethod_UnassignEstate_, context, request, false);
}

::grpc::Status MruVBusinessService::Stub::BuyBusiness(::grpc::ClientContext* context, const ::mruv::business::BuyBusinessRequest& request, ::mruv::business::BuyBusinessResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_BuyBusiness_, context, request, response);
}

void MruVBusinessService::Stub::experimental_async::BuyBusiness(::grpc::ClientContext* context, const ::mruv::business::BuyBusinessRequest* request, ::mruv::business::BuyBusinessResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_BuyBusiness_, context, request, response, std::move(f));
}

void MruVBusinessService::Stub::experimental_async::BuyBusiness(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::business::BuyBusinessResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_BuyBusiness_, context, request, response, std::move(f));
}

void MruVBusinessService::Stub::experimental_async::BuyBusiness(::grpc::ClientContext* context, const ::mruv::business::BuyBusinessRequest* request, ::mruv::business::BuyBusinessResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_BuyBusiness_, context, request, response, reactor);
}

void MruVBusinessService::Stub::experimental_async::BuyBusiness(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::business::BuyBusinessResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_BuyBusiness_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::business::BuyBusinessResponse>* MruVBusinessService::Stub::AsyncBuyBusinessRaw(::grpc::ClientContext* context, const ::mruv::business::BuyBusinessRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::business::BuyBusinessResponse>::Create(channel_.get(), cq, rpcmethod_BuyBusiness_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::business::BuyBusinessResponse>* MruVBusinessService::Stub::PrepareAsyncBuyBusinessRaw(::grpc::ClientContext* context, const ::mruv::business::BuyBusinessRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::business::BuyBusinessResponse>::Create(channel_.get(), cq, rpcmethod_BuyBusiness_, context, request, false);
}

::grpc::ClientReader< ::mruv::business::WatchBusinessResponse>* MruVBusinessService::Stub::WatchBusinessRaw(::grpc::ClientContext* context, const ::mruv::business::WatchBusinessRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::mruv::business::WatchBusinessResponse>::Create(channel_.get(), rpcmethod_WatchBusiness_, context, request);
}

void MruVBusinessService::Stub::experimental_async::WatchBusiness(::grpc::ClientContext* context, ::mruv::business::WatchBusinessRequest* request, ::grpc::experimental::ClientReadReactor< ::mruv::business::WatchBusinessResponse>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::mruv::business::WatchBusinessResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_WatchBusiness_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mruv::business::WatchBusinessResponse>* MruVBusinessService::Stub::AsyncWatchBusinessRaw(::grpc::ClientContext* context, const ::mruv::business::WatchBusinessRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::mruv::business::WatchBusinessResponse>::Create(channel_.get(), cq, rpcmethod_WatchBusiness_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mruv::business::WatchBusinessResponse>* MruVBusinessService::Stub::PrepareAsyncWatchBusinessRaw(::grpc::ClientContext* context, const ::mruv::business::WatchBusinessRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::mruv::business::WatchBusinessResponse>::Create(channel_.get(), cq, rpcmethod_WatchBusiness_, context, request, false, nullptr);
}

::grpc::ClientReader< ::mruv::business::WatchBusinessesResponse>* MruVBusinessService::Stub::WatchBusinessesRaw(::grpc::ClientContext* context, const ::mruv::business::WatchBusinessesRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::mruv::business::WatchBusinessesResponse>::Create(channel_.get(), rpcmethod_WatchBusinesses_, context, request);
}

void MruVBusinessService::Stub::experimental_async::WatchBusinesses(::grpc::ClientContext* context, ::mruv::business::WatchBusinessesRequest* request, ::grpc::experimental::ClientReadReactor< ::mruv::business::WatchBusinessesResponse>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::mruv::business::WatchBusinessesResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_WatchBusinesses_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mruv::business::WatchBusinessesResponse>* MruVBusinessService::Stub::AsyncWatchBusinessesRaw(::grpc::ClientContext* context, const ::mruv::business::WatchBusinessesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::mruv::business::WatchBusinessesResponse>::Create(channel_.get(), cq, rpcmethod_WatchBusinesses_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mruv::business::WatchBusinessesResponse>* MruVBusinessService::Stub::PrepareAsyncWatchBusinessesRaw(::grpc::ClientContext* context, const ::mruv::business::WatchBusinessesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::mruv::business::WatchBusinessesResponse>::Create(channel_.get(), cq, rpcmethod_WatchBusinesses_, context, request, false, nullptr);
}

MruVBusinessService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVBusinessService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVBusinessService::Service, ::mruv::business::CreateBusinessRequest, ::mruv::business::CreateBusinessResponse>(
          [](MruVBusinessService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mruv::business::CreateBusinessRequest* req,
             ::mruv::business::CreateBusinessResponse* resp) {
               return service->CreateBusiness(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVBusinessService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVBusinessService::Service, ::mruv::business::GetBusinessRequest, ::mruv::business::Business>(
          [](MruVBusinessService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mruv::business::GetBusinessRequest* req,
             ::mruv::business::Business* resp) {
               return service->GetBusiness(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVBusinessService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVBusinessService::Service, ::mruv::business::UpdateBusinessRequest, ::mruv::business::Business>(
          [](MruVBusinessService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mruv::business::UpdateBusinessRequest* req,
             ::mruv::business::Business* resp) {
               return service->UpdateBusiness(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVBusinessService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVBusinessService::Service, ::mruv::business::DeleteBusinessRequest, ::mruv::business::DeleteBusinessResponse>(
          [](MruVBusinessService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mruv::business::DeleteBusinessRequest* req,
             ::mruv::business::DeleteBusinessResponse* resp) {
               return service->DeleteBusiness(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVBusinessService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVBusinessService::Service, ::mruv::business::AssignOwnerRequest, ::mruv::business::AssignOwnerResponse>(
          [](MruVBusinessService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mruv::business::AssignOwnerRequest* req,
             ::mruv::business::AssignOwnerResponse* resp) {
               return service->AssignOwner(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVBusinessService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVBusinessService::Service, ::mruv::business::AssignEstateRequest, ::mruv::business::AssignEstateResponse>(
          [](MruVBusinessService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mruv::business::AssignEstateRequest* req,
             ::mruv::business::AssignEstateResponse* resp) {
               return service->AssignEstate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVBusinessService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVBusinessService::Service, ::mruv::business::UnassignEstateRequest, ::mruv::business::UnassignEstateResponse>(
          [](MruVBusinessService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mruv::business::UnassignEstateRequest* req,
             ::mruv::business::UnassignEstateResponse* resp) {
               return service->UnassignEstate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVBusinessService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVBusinessService::Service, ::mruv::business::BuyBusinessRequest, ::mruv::business::BuyBusinessResponse>(
          [](MruVBusinessService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mruv::business::BuyBusinessRequest* req,
             ::mruv::business::BuyBusinessResponse* resp) {
               return service->BuyBusiness(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVBusinessService_method_names[8],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MruVBusinessService::Service, ::mruv::business::WatchBusinessRequest, ::mruv::business::WatchBusinessResponse>(
          [](MruVBusinessService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mruv::business::WatchBusinessRequest* req,
             ::grpc_impl::ServerWriter<::mruv::business::WatchBusinessResponse>* writer) {
               return service->WatchBusiness(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVBusinessService_method_names[9],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MruVBusinessService::Service, ::mruv::business::WatchBusinessesRequest, ::mruv::business::WatchBusinessesResponse>(
          [](MruVBusinessService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mruv::business::WatchBusinessesRequest* req,
             ::grpc_impl::ServerWriter<::mruv::business::WatchBusinessesResponse>* writer) {
               return service->WatchBusinesses(ctx, req, writer);
             }, this)));
}

MruVBusinessService::Service::~Service() {
}

::grpc::Status MruVBusinessService::Service::CreateBusiness(::grpc::ServerContext* context, const ::mruv::business::CreateBusinessRequest* request, ::mruv::business::CreateBusinessResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVBusinessService::Service::GetBusiness(::grpc::ServerContext* context, const ::mruv::business::GetBusinessRequest* request, ::mruv::business::Business* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVBusinessService::Service::UpdateBusiness(::grpc::ServerContext* context, const ::mruv::business::UpdateBusinessRequest* request, ::mruv::business::Business* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVBusinessService::Service::DeleteBusiness(::grpc::ServerContext* context, const ::mruv::business::DeleteBusinessRequest* request, ::mruv::business::DeleteBusinessResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVBusinessService::Service::AssignOwner(::grpc::ServerContext* context, const ::mruv::business::AssignOwnerRequest* request, ::mruv::business::AssignOwnerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVBusinessService::Service::AssignEstate(::grpc::ServerContext* context, const ::mruv::business::AssignEstateRequest* request, ::mruv::business::AssignEstateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVBusinessService::Service::UnassignEstate(::grpc::ServerContext* context, const ::mruv::business::UnassignEstateRequest* request, ::mruv::business::UnassignEstateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVBusinessService::Service::BuyBusiness(::grpc::ServerContext* context, const ::mruv::business::BuyBusinessRequest* request, ::mruv::business::BuyBusinessResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVBusinessService::Service::WatchBusiness(::grpc::ServerContext* context, const ::mruv::business::WatchBusinessRequest* request, ::grpc::ServerWriter< ::mruv::business::WatchBusinessResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVBusinessService::Service::WatchBusinesses(::grpc::ServerContext* context, const ::mruv::business::WatchBusinessesRequest* request, ::grpc::ServerWriter< ::mruv::business::WatchBusinessesResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mruv
}  // namespace business

