// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: business/business.proto

#include "business/business.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace mruv {
namespace business {
class BusinessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Business> _instance;
} _Business_default_instance_;
class CreateBusinessRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateBusinessRequest> _instance;
} _CreateBusinessRequest_default_instance_;
class CreateBusinessResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateBusinessResponse> _instance;
} _CreateBusinessResponse_default_instance_;
class GetBusinessRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBusinessRequest> _instance;
} _GetBusinessRequest_default_instance_;
class GetBusinessResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBusinessResponse> _instance;
} _GetBusinessResponse_default_instance_;
class UpdateBusinessRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateBusinessRequest> _instance;
} _UpdateBusinessRequest_default_instance_;
class UpdateBusinessResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateBusinessResponse> _instance;
} _UpdateBusinessResponse_default_instance_;
class DeleteBusinessRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteBusinessRequest> _instance;
} _DeleteBusinessRequest_default_instance_;
class DeleteBusinessResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteBusinessResponse> _instance;
} _DeleteBusinessResponse_default_instance_;
class AssignOwnerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AssignOwnerRequest> _instance;
} _AssignOwnerRequest_default_instance_;
class AssignOwnerResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AssignOwnerResponse> _instance;
} _AssignOwnerResponse_default_instance_;
class AssignEstateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AssignEstateRequest> _instance;
} _AssignEstateRequest_default_instance_;
class AssignEstateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AssignEstateResponse> _instance;
} _AssignEstateResponse_default_instance_;
class UnassignEstateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnassignEstateRequest> _instance;
} _UnassignEstateRequest_default_instance_;
class UnassignEstateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnassignEstateResponse> _instance;
} _UnassignEstateResponse_default_instance_;
class BuyBusinessRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BuyBusinessRequest> _instance;
} _BuyBusinessRequest_default_instance_;
class BuyBusinessResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BuyBusinessResponse> _instance;
} _BuyBusinessResponse_default_instance_;
class WatchBusinessRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WatchBusinessRequest> _instance;
} _WatchBusinessRequest_default_instance_;
class WatchBusinessResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WatchBusinessResponse> _instance;
} _WatchBusinessResponse_default_instance_;
class WatchBusinessesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WatchBusinessesRequest> _instance;
} _WatchBusinessesRequest_default_instance_;
class WatchBusinessesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WatchBusinessesResponse> _instance;
} _WatchBusinessesResponse_default_instance_;
}  // namespace business
}  // namespace mruv
static void InitDefaultsscc_info_AssignEstateRequest_business_2fbusiness_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::business::_AssignEstateRequest_default_instance_;
    new (ptr) ::mruv::business::AssignEstateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::business::AssignEstateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AssignEstateRequest_business_2fbusiness_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AssignEstateRequest_business_2fbusiness_2eproto}, {}};

static void InitDefaultsscc_info_AssignEstateResponse_business_2fbusiness_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::business::_AssignEstateResponse_default_instance_;
    new (ptr) ::mruv::business::AssignEstateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::business::AssignEstateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AssignEstateResponse_business_2fbusiness_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AssignEstateResponse_business_2fbusiness_2eproto}, {}};

static void InitDefaultsscc_info_AssignOwnerRequest_business_2fbusiness_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::business::_AssignOwnerRequest_default_instance_;
    new (ptr) ::mruv::business::AssignOwnerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::business::AssignOwnerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AssignOwnerRequest_business_2fbusiness_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AssignOwnerRequest_business_2fbusiness_2eproto}, {}};

static void InitDefaultsscc_info_AssignOwnerResponse_business_2fbusiness_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::business::_AssignOwnerResponse_default_instance_;
    new (ptr) ::mruv::business::AssignOwnerResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::business::AssignOwnerResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AssignOwnerResponse_business_2fbusiness_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AssignOwnerResponse_business_2fbusiness_2eproto}, {}};

static void InitDefaultsscc_info_Business_business_2fbusiness_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::business::_Business_default_instance_;
    new (ptr) ::mruv::business::Business();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::business::Business::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Business_business_2fbusiness_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Business_business_2fbusiness_2eproto}, {}};

static void InitDefaultsscc_info_BuyBusinessRequest_business_2fbusiness_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::business::_BuyBusinessRequest_default_instance_;
    new (ptr) ::mruv::business::BuyBusinessRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::business::BuyBusinessRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BuyBusinessRequest_business_2fbusiness_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BuyBusinessRequest_business_2fbusiness_2eproto}, {}};

static void InitDefaultsscc_info_BuyBusinessResponse_business_2fbusiness_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::business::_BuyBusinessResponse_default_instance_;
    new (ptr) ::mruv::business::BuyBusinessResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::business::BuyBusinessResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BuyBusinessResponse_business_2fbusiness_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BuyBusinessResponse_business_2fbusiness_2eproto}, {}};

static void InitDefaultsscc_info_CreateBusinessRequest_business_2fbusiness_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::business::_CreateBusinessRequest_default_instance_;
    new (ptr) ::mruv::business::CreateBusinessRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::business::CreateBusinessRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateBusinessRequest_business_2fbusiness_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateBusinessRequest_business_2fbusiness_2eproto}, {}};

static void InitDefaultsscc_info_CreateBusinessResponse_business_2fbusiness_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::business::_CreateBusinessResponse_default_instance_;
    new (ptr) ::mruv::business::CreateBusinessResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::business::CreateBusinessResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateBusinessResponse_business_2fbusiness_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateBusinessResponse_business_2fbusiness_2eproto}, {}};

static void InitDefaultsscc_info_DeleteBusinessRequest_business_2fbusiness_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::business::_DeleteBusinessRequest_default_instance_;
    new (ptr) ::mruv::business::DeleteBusinessRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::business::DeleteBusinessRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteBusinessRequest_business_2fbusiness_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteBusinessRequest_business_2fbusiness_2eproto}, {}};

static void InitDefaultsscc_info_DeleteBusinessResponse_business_2fbusiness_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::business::_DeleteBusinessResponse_default_instance_;
    new (ptr) ::mruv::business::DeleteBusinessResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::business::DeleteBusinessResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteBusinessResponse_business_2fbusiness_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteBusinessResponse_business_2fbusiness_2eproto}, {}};

static void InitDefaultsscc_info_GetBusinessRequest_business_2fbusiness_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::business::_GetBusinessRequest_default_instance_;
    new (ptr) ::mruv::business::GetBusinessRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::business::GetBusinessRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetBusinessRequest_business_2fbusiness_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetBusinessRequest_business_2fbusiness_2eproto}, {}};

static void InitDefaultsscc_info_GetBusinessResponse_business_2fbusiness_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::business::_GetBusinessResponse_default_instance_;
    new (ptr) ::mruv::business::GetBusinessResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::business::GetBusinessResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetBusinessResponse_business_2fbusiness_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetBusinessResponse_business_2fbusiness_2eproto}, {}};

static void InitDefaultsscc_info_UnassignEstateRequest_business_2fbusiness_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::business::_UnassignEstateRequest_default_instance_;
    new (ptr) ::mruv::business::UnassignEstateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::business::UnassignEstateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnassignEstateRequest_business_2fbusiness_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnassignEstateRequest_business_2fbusiness_2eproto}, {}};

static void InitDefaultsscc_info_UnassignEstateResponse_business_2fbusiness_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::business::_UnassignEstateResponse_default_instance_;
    new (ptr) ::mruv::business::UnassignEstateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::business::UnassignEstateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnassignEstateResponse_business_2fbusiness_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnassignEstateResponse_business_2fbusiness_2eproto}, {}};

static void InitDefaultsscc_info_UpdateBusinessRequest_business_2fbusiness_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::business::_UpdateBusinessRequest_default_instance_;
    new (ptr) ::mruv::business::UpdateBusinessRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::business::UpdateBusinessRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateBusinessRequest_business_2fbusiness_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateBusinessRequest_business_2fbusiness_2eproto}, {}};

static void InitDefaultsscc_info_UpdateBusinessResponse_business_2fbusiness_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::business::_UpdateBusinessResponse_default_instance_;
    new (ptr) ::mruv::business::UpdateBusinessResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::business::UpdateBusinessResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateBusinessResponse_business_2fbusiness_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateBusinessResponse_business_2fbusiness_2eproto}, {}};

static void InitDefaultsscc_info_WatchBusinessRequest_business_2fbusiness_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::business::_WatchBusinessRequest_default_instance_;
    new (ptr) ::mruv::business::WatchBusinessRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::business::WatchBusinessRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatchBusinessRequest_business_2fbusiness_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WatchBusinessRequest_business_2fbusiness_2eproto}, {}};

static void InitDefaultsscc_info_WatchBusinessResponse_business_2fbusiness_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::business::_WatchBusinessResponse_default_instance_;
    new (ptr) ::mruv::business::WatchBusinessResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::business::WatchBusinessResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatchBusinessResponse_business_2fbusiness_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WatchBusinessResponse_business_2fbusiness_2eproto}, {}};

static void InitDefaultsscc_info_WatchBusinessesRequest_business_2fbusiness_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::business::_WatchBusinessesRequest_default_instance_;
    new (ptr) ::mruv::business::WatchBusinessesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::business::WatchBusinessesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatchBusinessesRequest_business_2fbusiness_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WatchBusinessesRequest_business_2fbusiness_2eproto}, {}};

static void InitDefaultsscc_info_WatchBusinessesResponse_business_2fbusiness_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::business::_WatchBusinessesResponse_default_instance_;
    new (ptr) ::mruv::business::WatchBusinessesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::business::WatchBusinessesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatchBusinessesResponse_business_2fbusiness_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WatchBusinessesResponse_business_2fbusiness_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_business_2fbusiness_2eproto[21];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_business_2fbusiness_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_business_2fbusiness_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_business_2fbusiness_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::business::Business, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::business::Business, name_),
  PROTOBUF_FIELD_OFFSET(::mruv::business::Business, description_),
  PROTOBUF_FIELD_OFFSET(::mruv::business::Business, estate_ids_),
  PROTOBUF_FIELD_OFFSET(::mruv::business::Business, product_id_),
  PROTOBUF_FIELD_OFFSET(::mruv::business::Business, owner_type_),
  PROTOBUF_FIELD_OFFSET(::mruv::business::Business, owner_id_),
  PROTOBUF_FIELD_OFFSET(::mruv::business::Business, business_items_),
  PROTOBUF_FIELD_OFFSET(::mruv::business::Business, business_group_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::business::CreateBusinessRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::business::CreateBusinessRequest, name_),
  PROTOBUF_FIELD_OFFSET(::mruv::business::CreateBusinessRequest, description_),
  PROTOBUF_FIELD_OFFSET(::mruv::business::CreateBusinessRequest, product_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::business::CreateBusinessResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::business::CreateBusinessResponse, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::business::GetBusinessRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::business::GetBusinessRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::business::GetBusinessResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::business::UpdateBusinessRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::business::UpdateBusinessRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::business::UpdateBusinessResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::business::DeleteBusinessRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::business::DeleteBusinessRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::business::DeleteBusinessResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::business::AssignOwnerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::business::AssignOwnerRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::business::AssignOwnerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::business::AssignOwnerResponse, owner_type_),
  PROTOBUF_FIELD_OFFSET(::mruv::business::AssignOwnerResponse, owner_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::business::AssignEstateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::business::AssignEstateRequest, business_id_),
  PROTOBUF_FIELD_OFFSET(::mruv::business::AssignEstateRequest, estate_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::business::AssignEstateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::business::AssignEstateResponse, estate_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::business::UnassignEstateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::business::UnassignEstateRequest, business_id_),
  PROTOBUF_FIELD_OFFSET(::mruv::business::UnassignEstateRequest, estate_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::business::UnassignEstateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::business::UnassignEstateResponse, estate_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::business::BuyBusinessRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::business::BuyBusinessRequest, id_),
  PROTOBUF_FIELD_OFFSET(::mruv::business::BuyBusinessRequest, buyer_type_),
  PROTOBUF_FIELD_OFFSET(::mruv::business::BuyBusinessRequest, buyer_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::business::BuyBusinessResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::business::WatchBusinessRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::business::WatchBusinessResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::business::WatchBusinessesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::business::WatchBusinessesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mruv::business::Business)},
  { 13, -1, sizeof(::mruv::business::CreateBusinessRequest)},
  { 21, -1, sizeof(::mruv::business::CreateBusinessResponse)},
  { 27, -1, sizeof(::mruv::business::GetBusinessRequest)},
  { 33, -1, sizeof(::mruv::business::GetBusinessResponse)},
  { 38, -1, sizeof(::mruv::business::UpdateBusinessRequest)},
  { 44, -1, sizeof(::mruv::business::UpdateBusinessResponse)},
  { 49, -1, sizeof(::mruv::business::DeleteBusinessRequest)},
  { 55, -1, sizeof(::mruv::business::DeleteBusinessResponse)},
  { 60, -1, sizeof(::mruv::business::AssignOwnerRequest)},
  { 66, -1, sizeof(::mruv::business::AssignOwnerResponse)},
  { 73, -1, sizeof(::mruv::business::AssignEstateRequest)},
  { 80, -1, sizeof(::mruv::business::AssignEstateResponse)},
  { 86, -1, sizeof(::mruv::business::UnassignEstateRequest)},
  { 93, -1, sizeof(::mruv::business::UnassignEstateResponse)},
  { 99, -1, sizeof(::mruv::business::BuyBusinessRequest)},
  { 107, -1, sizeof(::mruv::business::BuyBusinessResponse)},
  { 112, -1, sizeof(::mruv::business::WatchBusinessRequest)},
  { 117, -1, sizeof(::mruv::business::WatchBusinessResponse)},
  { 122, -1, sizeof(::mruv::business::WatchBusinessesRequest)},
  { 127, -1, sizeof(::mruv::business::WatchBusinessesResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::business::_Business_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::business::_CreateBusinessRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::business::_CreateBusinessResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::business::_GetBusinessRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::business::_GetBusinessResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::business::_UpdateBusinessRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::business::_UpdateBusinessResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::business::_DeleteBusinessRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::business::_DeleteBusinessResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::business::_AssignOwnerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::business::_AssignOwnerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::business::_AssignEstateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::business::_AssignEstateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::business::_UnassignEstateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::business::_UnassignEstateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::business::_BuyBusinessRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::business::_BuyBusinessResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::business::_WatchBusinessRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::business::_WatchBusinessResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::business::_WatchBusinessesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::business::_WatchBusinessesResponse_default_instance_),
};

const char descriptor_table_protodef_business_2fbusiness_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027business/business.proto\022\rmruv.business"
  "\032\034google/api/annotations.proto\"\305\001\n\010Busin"
  "ess\022\014\n\004name\030\001 \001(\t\022\023\n\013description\030\002 \001(\t\022\022"
  "\n\nestate_ids\030\003 \003(\003\022\022\n\nproduct_id\030\004 \001(\r\022,"
  "\n\nowner_type\030\005 \001(\0162\030.mruv.business.Owner"
  "Type\022\020\n\010owner_id\030\006 \001(\r\022\026\n\016business_items"
  "\030\007 \003(\r\022\026\n\016business_group\030\010 \001(\r\"N\n\025Create"
  "BusinessRequest\022\014\n\004name\030\001 \001(\t\022\023\n\013descrip"
  "tion\030\002 \001(\t\022\022\n\nproduct_id\030\003 \001(\r\"$\n\026Create"
  "BusinessResponse\022\n\n\002id\030\001 \001(\r\" \n\022GetBusin"
  "essRequest\022\n\n\002id\030\001 \001(\r\"\025\n\023GetBusinessRes"
  "ponse\"#\n\025UpdateBusinessRequest\022\n\n\002id\030\001 \001"
  "(\r\"\030\n\026UpdateBusinessResponse\"#\n\025DeleteBu"
  "sinessRequest\022\n\n\002id\030\001 \001(\r\"\030\n\026DeleteBusin"
  "essResponse\" \n\022AssignOwnerRequest\022\n\n\002id\030"
  "\001 \001(\r\"U\n\023AssignOwnerResponse\022,\n\nowner_ty"
  "pe\030\005 \001(\0162\030.mruv.business.OwnerType\022\020\n\010ow"
  "ner_id\030\006 \001(\r\"=\n\023AssignEstateRequest\022\023\n\013b"
  "usiness_id\030\001 \001(\r\022\021\n\testate_id\030\002 \001(\r\",\n\024A"
  "ssignEstateResponse\022\024\n\014estate_count\030\001 \001("
  "\r\"\?\n\025UnassignEstateRequest\022\023\n\013business_i"
  "d\030\001 \001(\r\022\021\n\testate_id\030\002 \001(\r\".\n\026UnassignEs"
  "tateResponse\022\024\n\014estate_count\030\001 \001(\r\"`\n\022Bu"
  "yBusinessRequest\022\n\n\002id\030\001 \001(\r\022,\n\nbuyer_ty"
  "pe\030\005 \001(\0162\030.mruv.business.OwnerType\022\020\n\010bu"
  "yer_id\030\006 \001(\r\"\025\n\023BuyBusinessResponse\"\026\n\024W"
  "atchBusinessRequest\"\027\n\025WatchBusinessResp"
  "onse\"\030\n\026WatchBusinessesRequest\"\031\n\027WatchB"
  "usinessesResponse*;\n\tOwnerType\022\013\n\007UNKNOW"
  "N\020\000\022\n\n\006PLAYER\020\001\022\t\n\005GROUP\020\002\022\n\n\006SYSTEM\020\0032\246"
  "\t\n\023MruVBusinessService\022s\n\016CreateBusiness"
  "\022$.mruv.business.CreateBusinessRequest\032%"
  ".mruv.business.CreateBusinessResponse\"\024\202"
  "\323\344\223\002\016\"\014/v1/business\022d\n\013GetBusiness\022!.mru"
  "v.business.GetBusinessRequest\032\027.mruv.bus"
  "iness.Business\"\031\202\323\344\223\002\023\022\021/v1/business/{id"
  "}\022j\n\016UpdateBusiness\022$.mruv.business.Upda"
  "teBusinessRequest\032\027.mruv.business.Busine"
  "ss\"\031\202\323\344\223\002\0232\021/v1/business/{id}\022x\n\016DeleteB"
  "usiness\022$.mruv.business.DeleteBusinessRe"
  "quest\032%.mruv.business.DeleteBusinessResp"
  "onse\"\031\202\323\344\223\002\023*\021/v1/business/{id}\022u\n\013Assig"
  "nOwner\022!.mruv.business.AssignOwnerReques"
  "t\032\".mruv.business.AssignOwnerResponse\"\037\202"
  "\323\344\223\002\031\"\027/v1/business/{id}/owner\022\203\001\n\014Assig"
  "nEstate\022\".mruv.business.AssignEstateRequ"
  "est\032#.mruv.business.AssignEstateResponse"
  "\"*\202\323\344\223\002$\"\"/v1/business/{business_id}/est"
  "ates\022\225\001\n\016UnassignEstate\022$.mruv.business."
  "UnassignEstateRequest\032%.mruv.business.Un"
  "assignEstateResponse\"6\202\323\344\223\0020*./v1/busine"
  "ss/{business_id}/estates/{estate_id}\022s\n\013"
  "BuyBusiness\022!.mruv.business.BuyBusinessR"
  "equest\032\".mruv.business.BuyBusinessRespon"
  "se\"\035\202\323\344\223\002\027\"\025/v1/business/{id}/buy\022^\n\rWat"
  "chBusiness\022#.mruv.business.WatchBusiness"
  "Request\032$.mruv.business.WatchBusinessRes"
  "ponse\"\0000\001\022d\n\017WatchBusinesses\022%.mruv.busi"
  "ness.WatchBusinessesRequest\032&.mruv.busin"
  "ess.WatchBusinessesResponse\"\0000\001B(Z&githu"
  "b.com/MruV-RP/mruv-pb-go/businessb\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_business_2fbusiness_2eproto_deps[1] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_business_2fbusiness_2eproto_sccs[21] = {
  &scc_info_AssignEstateRequest_business_2fbusiness_2eproto.base,
  &scc_info_AssignEstateResponse_business_2fbusiness_2eproto.base,
  &scc_info_AssignOwnerRequest_business_2fbusiness_2eproto.base,
  &scc_info_AssignOwnerResponse_business_2fbusiness_2eproto.base,
  &scc_info_Business_business_2fbusiness_2eproto.base,
  &scc_info_BuyBusinessRequest_business_2fbusiness_2eproto.base,
  &scc_info_BuyBusinessResponse_business_2fbusiness_2eproto.base,
  &scc_info_CreateBusinessRequest_business_2fbusiness_2eproto.base,
  &scc_info_CreateBusinessResponse_business_2fbusiness_2eproto.base,
  &scc_info_DeleteBusinessRequest_business_2fbusiness_2eproto.base,
  &scc_info_DeleteBusinessResponse_business_2fbusiness_2eproto.base,
  &scc_info_GetBusinessRequest_business_2fbusiness_2eproto.base,
  &scc_info_GetBusinessResponse_business_2fbusiness_2eproto.base,
  &scc_info_UnassignEstateRequest_business_2fbusiness_2eproto.base,
  &scc_info_UnassignEstateResponse_business_2fbusiness_2eproto.base,
  &scc_info_UpdateBusinessRequest_business_2fbusiness_2eproto.base,
  &scc_info_UpdateBusinessResponse_business_2fbusiness_2eproto.base,
  &scc_info_WatchBusinessRequest_business_2fbusiness_2eproto.base,
  &scc_info_WatchBusinessResponse_business_2fbusiness_2eproto.base,
  &scc_info_WatchBusinessesRequest_business_2fbusiness_2eproto.base,
  &scc_info_WatchBusinessesResponse_business_2fbusiness_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_business_2fbusiness_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_business_2fbusiness_2eproto = {
  false, false, descriptor_table_protodef_business_2fbusiness_2eproto, "business/business.proto", 2441,
  &descriptor_table_business_2fbusiness_2eproto_once, descriptor_table_business_2fbusiness_2eproto_sccs, descriptor_table_business_2fbusiness_2eproto_deps, 21, 1,
  schemas, file_default_instances, TableStruct_business_2fbusiness_2eproto::offsets,
  file_level_metadata_business_2fbusiness_2eproto, 21, file_level_enum_descriptors_business_2fbusiness_2eproto, file_level_service_descriptors_business_2fbusiness_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_business_2fbusiness_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_business_2fbusiness_2eproto)), true);
namespace mruv {
namespace business {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OwnerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_business_2fbusiness_2eproto);
  return file_level_enum_descriptors_business_2fbusiness_2eproto[0];
}
bool OwnerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Business::InitAsDefaultInstance() {
}
class Business::_Internal {
 public:
};

Business::Business(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  estate_ids_(arena),
  business_items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.business.Business)
}
Business::Business(const Business& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      estate_ids_(from.estate_ids_),
      business_items_(from.business_items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  ::memcpy(&product_id_, &from.product_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&business_group_) -
    reinterpret_cast<char*>(&product_id_)) + sizeof(business_group_));
  // @@protoc_insertion_point(copy_constructor:mruv.business.Business)
}

void Business::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Business_business_2fbusiness_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&product_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&business_group_) -
      reinterpret_cast<char*>(&product_id_)) + sizeof(business_group_));
}

Business::~Business() {
  // @@protoc_insertion_point(destructor:mruv.business.Business)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Business::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Business::ArenaDtor(void* object) {
  Business* _this = reinterpret_cast< Business* >(object);
  (void)_this;
}
void Business::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Business::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Business& Business::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Business_business_2fbusiness_2eproto.base);
  return *internal_default_instance();
}


void Business::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.business.Business)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  estate_ids_.Clear();
  business_items_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&product_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&business_group_) -
      reinterpret_cast<char*>(&product_id_)) + sizeof(business_group_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Business::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.business.Business.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.business.Business.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 estate_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_estate_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_estate_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 product_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          product_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mruv.business.OwnerType owner_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_owner_type(static_cast<::mruv::business::OwnerType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 owner_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 business_items = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_business_items(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_business_items(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 business_group = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          business_group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Business::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.business.Business)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.business.Business.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.business.Business.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // repeated int64 estate_ids = 3;
  {
    int byte_size = _estate_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_estate_ids(), byte_size, target);
    }
  }

  // uint32 product_id = 4;
  if (this->product_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_product_id(), target);
  }

  // .mruv.business.OwnerType owner_type = 5;
  if (this->owner_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_owner_type(), target);
  }

  // uint32 owner_id = 6;
  if (this->owner_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_owner_id(), target);
  }

  // repeated uint32 business_items = 7;
  {
    int byte_size = _business_items_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          7, _internal_business_items(), byte_size, target);
    }
  }

  // uint32 business_group = 8;
  if (this->business_group() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_business_group(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.business.Business)
  return target;
}

size_t Business::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.business.Business)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 estate_ids = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->estate_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _estate_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 business_items = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->business_items_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _business_items_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // uint32 product_id = 4;
  if (this->product_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_product_id());
  }

  // .mruv.business.OwnerType owner_type = 5;
  if (this->owner_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_owner_type());
  }

  // uint32 owner_id = 6;
  if (this->owner_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_owner_id());
  }

  // uint32 business_group = 8;
  if (this->business_group() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_business_group());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Business::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.business.Business)
  GOOGLE_DCHECK_NE(&from, this);
  const Business* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Business>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.business.Business)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.business.Business)
    MergeFrom(*source);
  }
}

void Business::MergeFrom(const Business& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.business.Business)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  estate_ids_.MergeFrom(from.estate_ids_);
  business_items_.MergeFrom(from.business_items_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.product_id() != 0) {
    _internal_set_product_id(from._internal_product_id());
  }
  if (from.owner_type() != 0) {
    _internal_set_owner_type(from._internal_owner_type());
  }
  if (from.owner_id() != 0) {
    _internal_set_owner_id(from._internal_owner_id());
  }
  if (from.business_group() != 0) {
    _internal_set_business_group(from._internal_business_group());
  }
}

void Business::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.business.Business)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Business::CopyFrom(const Business& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.business.Business)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Business::IsInitialized() const {
  return true;
}

void Business::InternalSwap(Business* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  estate_ids_.InternalSwap(&other->estate_ids_);
  business_items_.InternalSwap(&other->business_items_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Business, business_group_)
      + sizeof(Business::business_group_)
      - PROTOBUF_FIELD_OFFSET(Business, product_id_)>(
          reinterpret_cast<char*>(&product_id_),
          reinterpret_cast<char*>(&other->product_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Business::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateBusinessRequest::InitAsDefaultInstance() {
}
class CreateBusinessRequest::_Internal {
 public:
};

CreateBusinessRequest::CreateBusinessRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.business.CreateBusinessRequest)
}
CreateBusinessRequest::CreateBusinessRequest(const CreateBusinessRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  product_id_ = from.product_id_;
  // @@protoc_insertion_point(copy_constructor:mruv.business.CreateBusinessRequest)
}

void CreateBusinessRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateBusinessRequest_business_2fbusiness_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  product_id_ = 0u;
}

CreateBusinessRequest::~CreateBusinessRequest() {
  // @@protoc_insertion_point(destructor:mruv.business.CreateBusinessRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateBusinessRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateBusinessRequest::ArenaDtor(void* object) {
  CreateBusinessRequest* _this = reinterpret_cast< CreateBusinessRequest* >(object);
  (void)_this;
}
void CreateBusinessRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateBusinessRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateBusinessRequest& CreateBusinessRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateBusinessRequest_business_2fbusiness_2eproto.base);
  return *internal_default_instance();
}


void CreateBusinessRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.business.CreateBusinessRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  product_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateBusinessRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.business.CreateBusinessRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.business.CreateBusinessRequest.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 product_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          product_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateBusinessRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.business.CreateBusinessRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.business.CreateBusinessRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.business.CreateBusinessRequest.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // uint32 product_id = 3;
  if (this->product_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_product_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.business.CreateBusinessRequest)
  return target;
}

size_t CreateBusinessRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.business.CreateBusinessRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // uint32 product_id = 3;
  if (this->product_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_product_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateBusinessRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.business.CreateBusinessRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateBusinessRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateBusinessRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.business.CreateBusinessRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.business.CreateBusinessRequest)
    MergeFrom(*source);
  }
}

void CreateBusinessRequest::MergeFrom(const CreateBusinessRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.business.CreateBusinessRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.product_id() != 0) {
    _internal_set_product_id(from._internal_product_id());
  }
}

void CreateBusinessRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.business.CreateBusinessRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateBusinessRequest::CopyFrom(const CreateBusinessRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.business.CreateBusinessRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateBusinessRequest::IsInitialized() const {
  return true;
}

void CreateBusinessRequest::InternalSwap(CreateBusinessRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(product_id_, other->product_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateBusinessRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateBusinessResponse::InitAsDefaultInstance() {
}
class CreateBusinessResponse::_Internal {
 public:
};

CreateBusinessResponse::CreateBusinessResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.business.CreateBusinessResponse)
}
CreateBusinessResponse::CreateBusinessResponse(const CreateBusinessResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.business.CreateBusinessResponse)
}

void CreateBusinessResponse::SharedCtor() {
  id_ = 0u;
}

CreateBusinessResponse::~CreateBusinessResponse() {
  // @@protoc_insertion_point(destructor:mruv.business.CreateBusinessResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateBusinessResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CreateBusinessResponse::ArenaDtor(void* object) {
  CreateBusinessResponse* _this = reinterpret_cast< CreateBusinessResponse* >(object);
  (void)_this;
}
void CreateBusinessResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateBusinessResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateBusinessResponse& CreateBusinessResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateBusinessResponse_business_2fbusiness_2eproto.base);
  return *internal_default_instance();
}


void CreateBusinessResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.business.CreateBusinessResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateBusinessResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateBusinessResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.business.CreateBusinessResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.business.CreateBusinessResponse)
  return target;
}

size_t CreateBusinessResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.business.CreateBusinessResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateBusinessResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.business.CreateBusinessResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateBusinessResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateBusinessResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.business.CreateBusinessResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.business.CreateBusinessResponse)
    MergeFrom(*source);
  }
}

void CreateBusinessResponse::MergeFrom(const CreateBusinessResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.business.CreateBusinessResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void CreateBusinessResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.business.CreateBusinessResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateBusinessResponse::CopyFrom(const CreateBusinessResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.business.CreateBusinessResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateBusinessResponse::IsInitialized() const {
  return true;
}

void CreateBusinessResponse::InternalSwap(CreateBusinessResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateBusinessResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetBusinessRequest::InitAsDefaultInstance() {
}
class GetBusinessRequest::_Internal {
 public:
};

GetBusinessRequest::GetBusinessRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.business.GetBusinessRequest)
}
GetBusinessRequest::GetBusinessRequest(const GetBusinessRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.business.GetBusinessRequest)
}

void GetBusinessRequest::SharedCtor() {
  id_ = 0u;
}

GetBusinessRequest::~GetBusinessRequest() {
  // @@protoc_insertion_point(destructor:mruv.business.GetBusinessRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetBusinessRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetBusinessRequest::ArenaDtor(void* object) {
  GetBusinessRequest* _this = reinterpret_cast< GetBusinessRequest* >(object);
  (void)_this;
}
void GetBusinessRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBusinessRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBusinessRequest& GetBusinessRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBusinessRequest_business_2fbusiness_2eproto.base);
  return *internal_default_instance();
}


void GetBusinessRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.business.GetBusinessRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBusinessRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBusinessRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.business.GetBusinessRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.business.GetBusinessRequest)
  return target;
}

size_t GetBusinessRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.business.GetBusinessRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBusinessRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.business.GetBusinessRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBusinessRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBusinessRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.business.GetBusinessRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.business.GetBusinessRequest)
    MergeFrom(*source);
  }
}

void GetBusinessRequest::MergeFrom(const GetBusinessRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.business.GetBusinessRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetBusinessRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.business.GetBusinessRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBusinessRequest::CopyFrom(const GetBusinessRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.business.GetBusinessRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBusinessRequest::IsInitialized() const {
  return true;
}

void GetBusinessRequest::InternalSwap(GetBusinessRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBusinessRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetBusinessResponse::InitAsDefaultInstance() {
}
class GetBusinessResponse::_Internal {
 public:
};

GetBusinessResponse::GetBusinessResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.business.GetBusinessResponse)
}
GetBusinessResponse::GetBusinessResponse(const GetBusinessResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.business.GetBusinessResponse)
}

void GetBusinessResponse::SharedCtor() {
}

GetBusinessResponse::~GetBusinessResponse() {
  // @@protoc_insertion_point(destructor:mruv.business.GetBusinessResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetBusinessResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetBusinessResponse::ArenaDtor(void* object) {
  GetBusinessResponse* _this = reinterpret_cast< GetBusinessResponse* >(object);
  (void)_this;
}
void GetBusinessResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBusinessResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBusinessResponse& GetBusinessResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBusinessResponse_business_2fbusiness_2eproto.base);
  return *internal_default_instance();
}


void GetBusinessResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.business.GetBusinessResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBusinessResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBusinessResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.business.GetBusinessResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.business.GetBusinessResponse)
  return target;
}

size_t GetBusinessResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.business.GetBusinessResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBusinessResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.business.GetBusinessResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBusinessResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBusinessResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.business.GetBusinessResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.business.GetBusinessResponse)
    MergeFrom(*source);
  }
}

void GetBusinessResponse::MergeFrom(const GetBusinessResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.business.GetBusinessResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetBusinessResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.business.GetBusinessResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBusinessResponse::CopyFrom(const GetBusinessResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.business.GetBusinessResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBusinessResponse::IsInitialized() const {
  return true;
}

void GetBusinessResponse::InternalSwap(GetBusinessResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBusinessResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateBusinessRequest::InitAsDefaultInstance() {
}
class UpdateBusinessRequest::_Internal {
 public:
};

UpdateBusinessRequest::UpdateBusinessRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.business.UpdateBusinessRequest)
}
UpdateBusinessRequest::UpdateBusinessRequest(const UpdateBusinessRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.business.UpdateBusinessRequest)
}

void UpdateBusinessRequest::SharedCtor() {
  id_ = 0u;
}

UpdateBusinessRequest::~UpdateBusinessRequest() {
  // @@protoc_insertion_point(destructor:mruv.business.UpdateBusinessRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateBusinessRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UpdateBusinessRequest::ArenaDtor(void* object) {
  UpdateBusinessRequest* _this = reinterpret_cast< UpdateBusinessRequest* >(object);
  (void)_this;
}
void UpdateBusinessRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateBusinessRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateBusinessRequest& UpdateBusinessRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateBusinessRequest_business_2fbusiness_2eproto.base);
  return *internal_default_instance();
}


void UpdateBusinessRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.business.UpdateBusinessRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateBusinessRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateBusinessRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.business.UpdateBusinessRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.business.UpdateBusinessRequest)
  return target;
}

size_t UpdateBusinessRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.business.UpdateBusinessRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateBusinessRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.business.UpdateBusinessRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateBusinessRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateBusinessRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.business.UpdateBusinessRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.business.UpdateBusinessRequest)
    MergeFrom(*source);
  }
}

void UpdateBusinessRequest::MergeFrom(const UpdateBusinessRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.business.UpdateBusinessRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void UpdateBusinessRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.business.UpdateBusinessRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateBusinessRequest::CopyFrom(const UpdateBusinessRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.business.UpdateBusinessRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateBusinessRequest::IsInitialized() const {
  return true;
}

void UpdateBusinessRequest::InternalSwap(UpdateBusinessRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateBusinessRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateBusinessResponse::InitAsDefaultInstance() {
}
class UpdateBusinessResponse::_Internal {
 public:
};

UpdateBusinessResponse::UpdateBusinessResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.business.UpdateBusinessResponse)
}
UpdateBusinessResponse::UpdateBusinessResponse(const UpdateBusinessResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.business.UpdateBusinessResponse)
}

void UpdateBusinessResponse::SharedCtor() {
}

UpdateBusinessResponse::~UpdateBusinessResponse() {
  // @@protoc_insertion_point(destructor:mruv.business.UpdateBusinessResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateBusinessResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UpdateBusinessResponse::ArenaDtor(void* object) {
  UpdateBusinessResponse* _this = reinterpret_cast< UpdateBusinessResponse* >(object);
  (void)_this;
}
void UpdateBusinessResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateBusinessResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateBusinessResponse& UpdateBusinessResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateBusinessResponse_business_2fbusiness_2eproto.base);
  return *internal_default_instance();
}


void UpdateBusinessResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.business.UpdateBusinessResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateBusinessResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateBusinessResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.business.UpdateBusinessResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.business.UpdateBusinessResponse)
  return target;
}

size_t UpdateBusinessResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.business.UpdateBusinessResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateBusinessResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.business.UpdateBusinessResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateBusinessResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateBusinessResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.business.UpdateBusinessResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.business.UpdateBusinessResponse)
    MergeFrom(*source);
  }
}

void UpdateBusinessResponse::MergeFrom(const UpdateBusinessResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.business.UpdateBusinessResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UpdateBusinessResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.business.UpdateBusinessResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateBusinessResponse::CopyFrom(const UpdateBusinessResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.business.UpdateBusinessResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateBusinessResponse::IsInitialized() const {
  return true;
}

void UpdateBusinessResponse::InternalSwap(UpdateBusinessResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateBusinessResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteBusinessRequest::InitAsDefaultInstance() {
}
class DeleteBusinessRequest::_Internal {
 public:
};

DeleteBusinessRequest::DeleteBusinessRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.business.DeleteBusinessRequest)
}
DeleteBusinessRequest::DeleteBusinessRequest(const DeleteBusinessRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.business.DeleteBusinessRequest)
}

void DeleteBusinessRequest::SharedCtor() {
  id_ = 0u;
}

DeleteBusinessRequest::~DeleteBusinessRequest() {
  // @@protoc_insertion_point(destructor:mruv.business.DeleteBusinessRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteBusinessRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteBusinessRequest::ArenaDtor(void* object) {
  DeleteBusinessRequest* _this = reinterpret_cast< DeleteBusinessRequest* >(object);
  (void)_this;
}
void DeleteBusinessRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteBusinessRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteBusinessRequest& DeleteBusinessRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteBusinessRequest_business_2fbusiness_2eproto.base);
  return *internal_default_instance();
}


void DeleteBusinessRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.business.DeleteBusinessRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteBusinessRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteBusinessRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.business.DeleteBusinessRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.business.DeleteBusinessRequest)
  return target;
}

size_t DeleteBusinessRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.business.DeleteBusinessRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteBusinessRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.business.DeleteBusinessRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteBusinessRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteBusinessRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.business.DeleteBusinessRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.business.DeleteBusinessRequest)
    MergeFrom(*source);
  }
}

void DeleteBusinessRequest::MergeFrom(const DeleteBusinessRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.business.DeleteBusinessRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void DeleteBusinessRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.business.DeleteBusinessRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteBusinessRequest::CopyFrom(const DeleteBusinessRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.business.DeleteBusinessRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteBusinessRequest::IsInitialized() const {
  return true;
}

void DeleteBusinessRequest::InternalSwap(DeleteBusinessRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteBusinessRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteBusinessResponse::InitAsDefaultInstance() {
}
class DeleteBusinessResponse::_Internal {
 public:
};

DeleteBusinessResponse::DeleteBusinessResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.business.DeleteBusinessResponse)
}
DeleteBusinessResponse::DeleteBusinessResponse(const DeleteBusinessResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.business.DeleteBusinessResponse)
}

void DeleteBusinessResponse::SharedCtor() {
}

DeleteBusinessResponse::~DeleteBusinessResponse() {
  // @@protoc_insertion_point(destructor:mruv.business.DeleteBusinessResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteBusinessResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteBusinessResponse::ArenaDtor(void* object) {
  DeleteBusinessResponse* _this = reinterpret_cast< DeleteBusinessResponse* >(object);
  (void)_this;
}
void DeleteBusinessResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteBusinessResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteBusinessResponse& DeleteBusinessResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteBusinessResponse_business_2fbusiness_2eproto.base);
  return *internal_default_instance();
}


void DeleteBusinessResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.business.DeleteBusinessResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteBusinessResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteBusinessResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.business.DeleteBusinessResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.business.DeleteBusinessResponse)
  return target;
}

size_t DeleteBusinessResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.business.DeleteBusinessResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteBusinessResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.business.DeleteBusinessResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteBusinessResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteBusinessResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.business.DeleteBusinessResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.business.DeleteBusinessResponse)
    MergeFrom(*source);
  }
}

void DeleteBusinessResponse::MergeFrom(const DeleteBusinessResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.business.DeleteBusinessResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteBusinessResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.business.DeleteBusinessResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteBusinessResponse::CopyFrom(const DeleteBusinessResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.business.DeleteBusinessResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteBusinessResponse::IsInitialized() const {
  return true;
}

void DeleteBusinessResponse::InternalSwap(DeleteBusinessResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteBusinessResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AssignOwnerRequest::InitAsDefaultInstance() {
}
class AssignOwnerRequest::_Internal {
 public:
};

AssignOwnerRequest::AssignOwnerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.business.AssignOwnerRequest)
}
AssignOwnerRequest::AssignOwnerRequest(const AssignOwnerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.business.AssignOwnerRequest)
}

void AssignOwnerRequest::SharedCtor() {
  id_ = 0u;
}

AssignOwnerRequest::~AssignOwnerRequest() {
  // @@protoc_insertion_point(destructor:mruv.business.AssignOwnerRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AssignOwnerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AssignOwnerRequest::ArenaDtor(void* object) {
  AssignOwnerRequest* _this = reinterpret_cast< AssignOwnerRequest* >(object);
  (void)_this;
}
void AssignOwnerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AssignOwnerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AssignOwnerRequest& AssignOwnerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AssignOwnerRequest_business_2fbusiness_2eproto.base);
  return *internal_default_instance();
}


void AssignOwnerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.business.AssignOwnerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssignOwnerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AssignOwnerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.business.AssignOwnerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.business.AssignOwnerRequest)
  return target;
}

size_t AssignOwnerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.business.AssignOwnerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AssignOwnerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.business.AssignOwnerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AssignOwnerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AssignOwnerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.business.AssignOwnerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.business.AssignOwnerRequest)
    MergeFrom(*source);
  }
}

void AssignOwnerRequest::MergeFrom(const AssignOwnerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.business.AssignOwnerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void AssignOwnerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.business.AssignOwnerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssignOwnerRequest::CopyFrom(const AssignOwnerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.business.AssignOwnerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssignOwnerRequest::IsInitialized() const {
  return true;
}

void AssignOwnerRequest::InternalSwap(AssignOwnerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssignOwnerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AssignOwnerResponse::InitAsDefaultInstance() {
}
class AssignOwnerResponse::_Internal {
 public:
};

AssignOwnerResponse::AssignOwnerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.business.AssignOwnerResponse)
}
AssignOwnerResponse::AssignOwnerResponse(const AssignOwnerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&owner_type_, &from.owner_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&owner_id_) -
    reinterpret_cast<char*>(&owner_type_)) + sizeof(owner_id_));
  // @@protoc_insertion_point(copy_constructor:mruv.business.AssignOwnerResponse)
}

void AssignOwnerResponse::SharedCtor() {
  ::memset(&owner_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&owner_id_) -
      reinterpret_cast<char*>(&owner_type_)) + sizeof(owner_id_));
}

AssignOwnerResponse::~AssignOwnerResponse() {
  // @@protoc_insertion_point(destructor:mruv.business.AssignOwnerResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AssignOwnerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AssignOwnerResponse::ArenaDtor(void* object) {
  AssignOwnerResponse* _this = reinterpret_cast< AssignOwnerResponse* >(object);
  (void)_this;
}
void AssignOwnerResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AssignOwnerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AssignOwnerResponse& AssignOwnerResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AssignOwnerResponse_business_2fbusiness_2eproto.base);
  return *internal_default_instance();
}


void AssignOwnerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.business.AssignOwnerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&owner_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&owner_id_) -
      reinterpret_cast<char*>(&owner_type_)) + sizeof(owner_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssignOwnerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mruv.business.OwnerType owner_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_owner_type(static_cast<::mruv::business::OwnerType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 owner_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AssignOwnerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.business.AssignOwnerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mruv.business.OwnerType owner_type = 5;
  if (this->owner_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_owner_type(), target);
  }

  // uint32 owner_id = 6;
  if (this->owner_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_owner_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.business.AssignOwnerResponse)
  return target;
}

size_t AssignOwnerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.business.AssignOwnerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mruv.business.OwnerType owner_type = 5;
  if (this->owner_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_owner_type());
  }

  // uint32 owner_id = 6;
  if (this->owner_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_owner_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AssignOwnerResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.business.AssignOwnerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AssignOwnerResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AssignOwnerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.business.AssignOwnerResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.business.AssignOwnerResponse)
    MergeFrom(*source);
  }
}

void AssignOwnerResponse::MergeFrom(const AssignOwnerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.business.AssignOwnerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.owner_type() != 0) {
    _internal_set_owner_type(from._internal_owner_type());
  }
  if (from.owner_id() != 0) {
    _internal_set_owner_id(from._internal_owner_id());
  }
}

void AssignOwnerResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.business.AssignOwnerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssignOwnerResponse::CopyFrom(const AssignOwnerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.business.AssignOwnerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssignOwnerResponse::IsInitialized() const {
  return true;
}

void AssignOwnerResponse::InternalSwap(AssignOwnerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AssignOwnerResponse, owner_id_)
      + sizeof(AssignOwnerResponse::owner_id_)
      - PROTOBUF_FIELD_OFFSET(AssignOwnerResponse, owner_type_)>(
          reinterpret_cast<char*>(&owner_type_),
          reinterpret_cast<char*>(&other->owner_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AssignOwnerResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AssignEstateRequest::InitAsDefaultInstance() {
}
class AssignEstateRequest::_Internal {
 public:
};

AssignEstateRequest::AssignEstateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.business.AssignEstateRequest)
}
AssignEstateRequest::AssignEstateRequest(const AssignEstateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&business_id_, &from.business_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&estate_id_) -
    reinterpret_cast<char*>(&business_id_)) + sizeof(estate_id_));
  // @@protoc_insertion_point(copy_constructor:mruv.business.AssignEstateRequest)
}

void AssignEstateRequest::SharedCtor() {
  ::memset(&business_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&estate_id_) -
      reinterpret_cast<char*>(&business_id_)) + sizeof(estate_id_));
}

AssignEstateRequest::~AssignEstateRequest() {
  // @@protoc_insertion_point(destructor:mruv.business.AssignEstateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AssignEstateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AssignEstateRequest::ArenaDtor(void* object) {
  AssignEstateRequest* _this = reinterpret_cast< AssignEstateRequest* >(object);
  (void)_this;
}
void AssignEstateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AssignEstateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AssignEstateRequest& AssignEstateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AssignEstateRequest_business_2fbusiness_2eproto.base);
  return *internal_default_instance();
}


void AssignEstateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.business.AssignEstateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&business_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&estate_id_) -
      reinterpret_cast<char*>(&business_id_)) + sizeof(estate_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssignEstateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 business_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          business_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 estate_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          estate_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AssignEstateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.business.AssignEstateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 business_id = 1;
  if (this->business_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_business_id(), target);
  }

  // uint32 estate_id = 2;
  if (this->estate_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_estate_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.business.AssignEstateRequest)
  return target;
}

size_t AssignEstateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.business.AssignEstateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 business_id = 1;
  if (this->business_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_business_id());
  }

  // uint32 estate_id = 2;
  if (this->estate_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_estate_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AssignEstateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.business.AssignEstateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AssignEstateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AssignEstateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.business.AssignEstateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.business.AssignEstateRequest)
    MergeFrom(*source);
  }
}

void AssignEstateRequest::MergeFrom(const AssignEstateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.business.AssignEstateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.business_id() != 0) {
    _internal_set_business_id(from._internal_business_id());
  }
  if (from.estate_id() != 0) {
    _internal_set_estate_id(from._internal_estate_id());
  }
}

void AssignEstateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.business.AssignEstateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssignEstateRequest::CopyFrom(const AssignEstateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.business.AssignEstateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssignEstateRequest::IsInitialized() const {
  return true;
}

void AssignEstateRequest::InternalSwap(AssignEstateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AssignEstateRequest, estate_id_)
      + sizeof(AssignEstateRequest::estate_id_)
      - PROTOBUF_FIELD_OFFSET(AssignEstateRequest, business_id_)>(
          reinterpret_cast<char*>(&business_id_),
          reinterpret_cast<char*>(&other->business_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AssignEstateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AssignEstateResponse::InitAsDefaultInstance() {
}
class AssignEstateResponse::_Internal {
 public:
};

AssignEstateResponse::AssignEstateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.business.AssignEstateResponse)
}
AssignEstateResponse::AssignEstateResponse(const AssignEstateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  estate_count_ = from.estate_count_;
  // @@protoc_insertion_point(copy_constructor:mruv.business.AssignEstateResponse)
}

void AssignEstateResponse::SharedCtor() {
  estate_count_ = 0u;
}

AssignEstateResponse::~AssignEstateResponse() {
  // @@protoc_insertion_point(destructor:mruv.business.AssignEstateResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AssignEstateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AssignEstateResponse::ArenaDtor(void* object) {
  AssignEstateResponse* _this = reinterpret_cast< AssignEstateResponse* >(object);
  (void)_this;
}
void AssignEstateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AssignEstateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AssignEstateResponse& AssignEstateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AssignEstateResponse_business_2fbusiness_2eproto.base);
  return *internal_default_instance();
}


void AssignEstateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.business.AssignEstateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  estate_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssignEstateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 estate_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          estate_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AssignEstateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.business.AssignEstateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 estate_count = 1;
  if (this->estate_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_estate_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.business.AssignEstateResponse)
  return target;
}

size_t AssignEstateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.business.AssignEstateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 estate_count = 1;
  if (this->estate_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_estate_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AssignEstateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.business.AssignEstateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AssignEstateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AssignEstateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.business.AssignEstateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.business.AssignEstateResponse)
    MergeFrom(*source);
  }
}

void AssignEstateResponse::MergeFrom(const AssignEstateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.business.AssignEstateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.estate_count() != 0) {
    _internal_set_estate_count(from._internal_estate_count());
  }
}

void AssignEstateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.business.AssignEstateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssignEstateResponse::CopyFrom(const AssignEstateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.business.AssignEstateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssignEstateResponse::IsInitialized() const {
  return true;
}

void AssignEstateResponse::InternalSwap(AssignEstateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(estate_count_, other->estate_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssignEstateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnassignEstateRequest::InitAsDefaultInstance() {
}
class UnassignEstateRequest::_Internal {
 public:
};

UnassignEstateRequest::UnassignEstateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.business.UnassignEstateRequest)
}
UnassignEstateRequest::UnassignEstateRequest(const UnassignEstateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&business_id_, &from.business_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&estate_id_) -
    reinterpret_cast<char*>(&business_id_)) + sizeof(estate_id_));
  // @@protoc_insertion_point(copy_constructor:mruv.business.UnassignEstateRequest)
}

void UnassignEstateRequest::SharedCtor() {
  ::memset(&business_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&estate_id_) -
      reinterpret_cast<char*>(&business_id_)) + sizeof(estate_id_));
}

UnassignEstateRequest::~UnassignEstateRequest() {
  // @@protoc_insertion_point(destructor:mruv.business.UnassignEstateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnassignEstateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnassignEstateRequest::ArenaDtor(void* object) {
  UnassignEstateRequest* _this = reinterpret_cast< UnassignEstateRequest* >(object);
  (void)_this;
}
void UnassignEstateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnassignEstateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnassignEstateRequest& UnassignEstateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnassignEstateRequest_business_2fbusiness_2eproto.base);
  return *internal_default_instance();
}


void UnassignEstateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.business.UnassignEstateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&business_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&estate_id_) -
      reinterpret_cast<char*>(&business_id_)) + sizeof(estate_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnassignEstateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 business_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          business_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 estate_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          estate_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnassignEstateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.business.UnassignEstateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 business_id = 1;
  if (this->business_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_business_id(), target);
  }

  // uint32 estate_id = 2;
  if (this->estate_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_estate_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.business.UnassignEstateRequest)
  return target;
}

size_t UnassignEstateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.business.UnassignEstateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 business_id = 1;
  if (this->business_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_business_id());
  }

  // uint32 estate_id = 2;
  if (this->estate_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_estate_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnassignEstateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.business.UnassignEstateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnassignEstateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnassignEstateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.business.UnassignEstateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.business.UnassignEstateRequest)
    MergeFrom(*source);
  }
}

void UnassignEstateRequest::MergeFrom(const UnassignEstateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.business.UnassignEstateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.business_id() != 0) {
    _internal_set_business_id(from._internal_business_id());
  }
  if (from.estate_id() != 0) {
    _internal_set_estate_id(from._internal_estate_id());
  }
}

void UnassignEstateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.business.UnassignEstateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnassignEstateRequest::CopyFrom(const UnassignEstateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.business.UnassignEstateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnassignEstateRequest::IsInitialized() const {
  return true;
}

void UnassignEstateRequest::InternalSwap(UnassignEstateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnassignEstateRequest, estate_id_)
      + sizeof(UnassignEstateRequest::estate_id_)
      - PROTOBUF_FIELD_OFFSET(UnassignEstateRequest, business_id_)>(
          reinterpret_cast<char*>(&business_id_),
          reinterpret_cast<char*>(&other->business_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnassignEstateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnassignEstateResponse::InitAsDefaultInstance() {
}
class UnassignEstateResponse::_Internal {
 public:
};

UnassignEstateResponse::UnassignEstateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.business.UnassignEstateResponse)
}
UnassignEstateResponse::UnassignEstateResponse(const UnassignEstateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  estate_count_ = from.estate_count_;
  // @@protoc_insertion_point(copy_constructor:mruv.business.UnassignEstateResponse)
}

void UnassignEstateResponse::SharedCtor() {
  estate_count_ = 0u;
}

UnassignEstateResponse::~UnassignEstateResponse() {
  // @@protoc_insertion_point(destructor:mruv.business.UnassignEstateResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnassignEstateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnassignEstateResponse::ArenaDtor(void* object) {
  UnassignEstateResponse* _this = reinterpret_cast< UnassignEstateResponse* >(object);
  (void)_this;
}
void UnassignEstateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnassignEstateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnassignEstateResponse& UnassignEstateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnassignEstateResponse_business_2fbusiness_2eproto.base);
  return *internal_default_instance();
}


void UnassignEstateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.business.UnassignEstateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  estate_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnassignEstateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 estate_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          estate_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnassignEstateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.business.UnassignEstateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 estate_count = 1;
  if (this->estate_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_estate_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.business.UnassignEstateResponse)
  return target;
}

size_t UnassignEstateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.business.UnassignEstateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 estate_count = 1;
  if (this->estate_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_estate_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnassignEstateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.business.UnassignEstateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UnassignEstateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnassignEstateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.business.UnassignEstateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.business.UnassignEstateResponse)
    MergeFrom(*source);
  }
}

void UnassignEstateResponse::MergeFrom(const UnassignEstateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.business.UnassignEstateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.estate_count() != 0) {
    _internal_set_estate_count(from._internal_estate_count());
  }
}

void UnassignEstateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.business.UnassignEstateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnassignEstateResponse::CopyFrom(const UnassignEstateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.business.UnassignEstateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnassignEstateResponse::IsInitialized() const {
  return true;
}

void UnassignEstateResponse::InternalSwap(UnassignEstateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(estate_count_, other->estate_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnassignEstateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BuyBusinessRequest::InitAsDefaultInstance() {
}
class BuyBusinessRequest::_Internal {
 public:
};

BuyBusinessRequest::BuyBusinessRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.business.BuyBusinessRequest)
}
BuyBusinessRequest::BuyBusinessRequest(const BuyBusinessRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&buyer_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(buyer_id_));
  // @@protoc_insertion_point(copy_constructor:mruv.business.BuyBusinessRequest)
}

void BuyBusinessRequest::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buyer_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(buyer_id_));
}

BuyBusinessRequest::~BuyBusinessRequest() {
  // @@protoc_insertion_point(destructor:mruv.business.BuyBusinessRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BuyBusinessRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BuyBusinessRequest::ArenaDtor(void* object) {
  BuyBusinessRequest* _this = reinterpret_cast< BuyBusinessRequest* >(object);
  (void)_this;
}
void BuyBusinessRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BuyBusinessRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BuyBusinessRequest& BuyBusinessRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BuyBusinessRequest_business_2fbusiness_2eproto.base);
  return *internal_default_instance();
}


void BuyBusinessRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.business.BuyBusinessRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buyer_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(buyer_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuyBusinessRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mruv.business.OwnerType buyer_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_buyer_type(static_cast<::mruv::business::OwnerType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 buyer_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          buyer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BuyBusinessRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.business.BuyBusinessRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // .mruv.business.OwnerType buyer_type = 5;
  if (this->buyer_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_buyer_type(), target);
  }

  // uint32 buyer_id = 6;
  if (this->buyer_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_buyer_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.business.BuyBusinessRequest)
  return target;
}

size_t BuyBusinessRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.business.BuyBusinessRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // .mruv.business.OwnerType buyer_type = 5;
  if (this->buyer_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_buyer_type());
  }

  // uint32 buyer_id = 6;
  if (this->buyer_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_buyer_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuyBusinessRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.business.BuyBusinessRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BuyBusinessRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BuyBusinessRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.business.BuyBusinessRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.business.BuyBusinessRequest)
    MergeFrom(*source);
  }
}

void BuyBusinessRequest::MergeFrom(const BuyBusinessRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.business.BuyBusinessRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.buyer_type() != 0) {
    _internal_set_buyer_type(from._internal_buyer_type());
  }
  if (from.buyer_id() != 0) {
    _internal_set_buyer_id(from._internal_buyer_id());
  }
}

void BuyBusinessRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.business.BuyBusinessRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyBusinessRequest::CopyFrom(const BuyBusinessRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.business.BuyBusinessRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyBusinessRequest::IsInitialized() const {
  return true;
}

void BuyBusinessRequest::InternalSwap(BuyBusinessRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BuyBusinessRequest, buyer_id_)
      + sizeof(BuyBusinessRequest::buyer_id_)
      - PROTOBUF_FIELD_OFFSET(BuyBusinessRequest, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BuyBusinessRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BuyBusinessResponse::InitAsDefaultInstance() {
}
class BuyBusinessResponse::_Internal {
 public:
};

BuyBusinessResponse::BuyBusinessResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.business.BuyBusinessResponse)
}
BuyBusinessResponse::BuyBusinessResponse(const BuyBusinessResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.business.BuyBusinessResponse)
}

void BuyBusinessResponse::SharedCtor() {
}

BuyBusinessResponse::~BuyBusinessResponse() {
  // @@protoc_insertion_point(destructor:mruv.business.BuyBusinessResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BuyBusinessResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BuyBusinessResponse::ArenaDtor(void* object) {
  BuyBusinessResponse* _this = reinterpret_cast< BuyBusinessResponse* >(object);
  (void)_this;
}
void BuyBusinessResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BuyBusinessResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BuyBusinessResponse& BuyBusinessResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BuyBusinessResponse_business_2fbusiness_2eproto.base);
  return *internal_default_instance();
}


void BuyBusinessResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.business.BuyBusinessResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuyBusinessResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BuyBusinessResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.business.BuyBusinessResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.business.BuyBusinessResponse)
  return target;
}

size_t BuyBusinessResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.business.BuyBusinessResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuyBusinessResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.business.BuyBusinessResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BuyBusinessResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BuyBusinessResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.business.BuyBusinessResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.business.BuyBusinessResponse)
    MergeFrom(*source);
  }
}

void BuyBusinessResponse::MergeFrom(const BuyBusinessResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.business.BuyBusinessResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void BuyBusinessResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.business.BuyBusinessResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyBusinessResponse::CopyFrom(const BuyBusinessResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.business.BuyBusinessResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyBusinessResponse::IsInitialized() const {
  return true;
}

void BuyBusinessResponse::InternalSwap(BuyBusinessResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BuyBusinessResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WatchBusinessRequest::InitAsDefaultInstance() {
}
class WatchBusinessRequest::_Internal {
 public:
};

WatchBusinessRequest::WatchBusinessRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.business.WatchBusinessRequest)
}
WatchBusinessRequest::WatchBusinessRequest(const WatchBusinessRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.business.WatchBusinessRequest)
}

void WatchBusinessRequest::SharedCtor() {
}

WatchBusinessRequest::~WatchBusinessRequest() {
  // @@protoc_insertion_point(destructor:mruv.business.WatchBusinessRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WatchBusinessRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WatchBusinessRequest::ArenaDtor(void* object) {
  WatchBusinessRequest* _this = reinterpret_cast< WatchBusinessRequest* >(object);
  (void)_this;
}
void WatchBusinessRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WatchBusinessRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchBusinessRequest& WatchBusinessRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WatchBusinessRequest_business_2fbusiness_2eproto.base);
  return *internal_default_instance();
}


void WatchBusinessRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.business.WatchBusinessRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchBusinessRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchBusinessRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.business.WatchBusinessRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.business.WatchBusinessRequest)
  return target;
}

size_t WatchBusinessRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.business.WatchBusinessRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchBusinessRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.business.WatchBusinessRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchBusinessRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WatchBusinessRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.business.WatchBusinessRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.business.WatchBusinessRequest)
    MergeFrom(*source);
  }
}

void WatchBusinessRequest::MergeFrom(const WatchBusinessRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.business.WatchBusinessRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WatchBusinessRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.business.WatchBusinessRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchBusinessRequest::CopyFrom(const WatchBusinessRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.business.WatchBusinessRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchBusinessRequest::IsInitialized() const {
  return true;
}

void WatchBusinessRequest::InternalSwap(WatchBusinessRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchBusinessRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WatchBusinessResponse::InitAsDefaultInstance() {
}
class WatchBusinessResponse::_Internal {
 public:
};

WatchBusinessResponse::WatchBusinessResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.business.WatchBusinessResponse)
}
WatchBusinessResponse::WatchBusinessResponse(const WatchBusinessResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.business.WatchBusinessResponse)
}

void WatchBusinessResponse::SharedCtor() {
}

WatchBusinessResponse::~WatchBusinessResponse() {
  // @@protoc_insertion_point(destructor:mruv.business.WatchBusinessResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WatchBusinessResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WatchBusinessResponse::ArenaDtor(void* object) {
  WatchBusinessResponse* _this = reinterpret_cast< WatchBusinessResponse* >(object);
  (void)_this;
}
void WatchBusinessResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WatchBusinessResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchBusinessResponse& WatchBusinessResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WatchBusinessResponse_business_2fbusiness_2eproto.base);
  return *internal_default_instance();
}


void WatchBusinessResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.business.WatchBusinessResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchBusinessResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchBusinessResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.business.WatchBusinessResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.business.WatchBusinessResponse)
  return target;
}

size_t WatchBusinessResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.business.WatchBusinessResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchBusinessResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.business.WatchBusinessResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchBusinessResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WatchBusinessResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.business.WatchBusinessResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.business.WatchBusinessResponse)
    MergeFrom(*source);
  }
}

void WatchBusinessResponse::MergeFrom(const WatchBusinessResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.business.WatchBusinessResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WatchBusinessResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.business.WatchBusinessResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchBusinessResponse::CopyFrom(const WatchBusinessResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.business.WatchBusinessResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchBusinessResponse::IsInitialized() const {
  return true;
}

void WatchBusinessResponse::InternalSwap(WatchBusinessResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchBusinessResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WatchBusinessesRequest::InitAsDefaultInstance() {
}
class WatchBusinessesRequest::_Internal {
 public:
};

WatchBusinessesRequest::WatchBusinessesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.business.WatchBusinessesRequest)
}
WatchBusinessesRequest::WatchBusinessesRequest(const WatchBusinessesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.business.WatchBusinessesRequest)
}

void WatchBusinessesRequest::SharedCtor() {
}

WatchBusinessesRequest::~WatchBusinessesRequest() {
  // @@protoc_insertion_point(destructor:mruv.business.WatchBusinessesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WatchBusinessesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WatchBusinessesRequest::ArenaDtor(void* object) {
  WatchBusinessesRequest* _this = reinterpret_cast< WatchBusinessesRequest* >(object);
  (void)_this;
}
void WatchBusinessesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WatchBusinessesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchBusinessesRequest& WatchBusinessesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WatchBusinessesRequest_business_2fbusiness_2eproto.base);
  return *internal_default_instance();
}


void WatchBusinessesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.business.WatchBusinessesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchBusinessesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchBusinessesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.business.WatchBusinessesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.business.WatchBusinessesRequest)
  return target;
}

size_t WatchBusinessesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.business.WatchBusinessesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchBusinessesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.business.WatchBusinessesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchBusinessesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WatchBusinessesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.business.WatchBusinessesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.business.WatchBusinessesRequest)
    MergeFrom(*source);
  }
}

void WatchBusinessesRequest::MergeFrom(const WatchBusinessesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.business.WatchBusinessesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WatchBusinessesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.business.WatchBusinessesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchBusinessesRequest::CopyFrom(const WatchBusinessesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.business.WatchBusinessesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchBusinessesRequest::IsInitialized() const {
  return true;
}

void WatchBusinessesRequest::InternalSwap(WatchBusinessesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchBusinessesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WatchBusinessesResponse::InitAsDefaultInstance() {
}
class WatchBusinessesResponse::_Internal {
 public:
};

WatchBusinessesResponse::WatchBusinessesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.business.WatchBusinessesResponse)
}
WatchBusinessesResponse::WatchBusinessesResponse(const WatchBusinessesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.business.WatchBusinessesResponse)
}

void WatchBusinessesResponse::SharedCtor() {
}

WatchBusinessesResponse::~WatchBusinessesResponse() {
  // @@protoc_insertion_point(destructor:mruv.business.WatchBusinessesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WatchBusinessesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WatchBusinessesResponse::ArenaDtor(void* object) {
  WatchBusinessesResponse* _this = reinterpret_cast< WatchBusinessesResponse* >(object);
  (void)_this;
}
void WatchBusinessesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WatchBusinessesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchBusinessesResponse& WatchBusinessesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WatchBusinessesResponse_business_2fbusiness_2eproto.base);
  return *internal_default_instance();
}


void WatchBusinessesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.business.WatchBusinessesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchBusinessesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchBusinessesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.business.WatchBusinessesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.business.WatchBusinessesResponse)
  return target;
}

size_t WatchBusinessesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.business.WatchBusinessesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchBusinessesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.business.WatchBusinessesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchBusinessesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WatchBusinessesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.business.WatchBusinessesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.business.WatchBusinessesResponse)
    MergeFrom(*source);
  }
}

void WatchBusinessesResponse::MergeFrom(const WatchBusinessesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.business.WatchBusinessesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WatchBusinessesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.business.WatchBusinessesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchBusinessesResponse::CopyFrom(const WatchBusinessesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.business.WatchBusinessesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchBusinessesResponse::IsInitialized() const {
  return true;
}

void WatchBusinessesResponse::InternalSwap(WatchBusinessesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchBusinessesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace business
}  // namespace mruv
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mruv::business::Business* Arena::CreateMaybeMessage< ::mruv::business::Business >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::business::Business >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::business::CreateBusinessRequest* Arena::CreateMaybeMessage< ::mruv::business::CreateBusinessRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::business::CreateBusinessRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::business::CreateBusinessResponse* Arena::CreateMaybeMessage< ::mruv::business::CreateBusinessResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::business::CreateBusinessResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::business::GetBusinessRequest* Arena::CreateMaybeMessage< ::mruv::business::GetBusinessRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::business::GetBusinessRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::business::GetBusinessResponse* Arena::CreateMaybeMessage< ::mruv::business::GetBusinessResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::business::GetBusinessResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::business::UpdateBusinessRequest* Arena::CreateMaybeMessage< ::mruv::business::UpdateBusinessRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::business::UpdateBusinessRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::business::UpdateBusinessResponse* Arena::CreateMaybeMessage< ::mruv::business::UpdateBusinessResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::business::UpdateBusinessResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::business::DeleteBusinessRequest* Arena::CreateMaybeMessage< ::mruv::business::DeleteBusinessRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::business::DeleteBusinessRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::business::DeleteBusinessResponse* Arena::CreateMaybeMessage< ::mruv::business::DeleteBusinessResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::business::DeleteBusinessResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::business::AssignOwnerRequest* Arena::CreateMaybeMessage< ::mruv::business::AssignOwnerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::business::AssignOwnerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::business::AssignOwnerResponse* Arena::CreateMaybeMessage< ::mruv::business::AssignOwnerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::business::AssignOwnerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::business::AssignEstateRequest* Arena::CreateMaybeMessage< ::mruv::business::AssignEstateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::business::AssignEstateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::business::AssignEstateResponse* Arena::CreateMaybeMessage< ::mruv::business::AssignEstateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::business::AssignEstateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::business::UnassignEstateRequest* Arena::CreateMaybeMessage< ::mruv::business::UnassignEstateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::business::UnassignEstateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::business::UnassignEstateResponse* Arena::CreateMaybeMessage< ::mruv::business::UnassignEstateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::business::UnassignEstateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::business::BuyBusinessRequest* Arena::CreateMaybeMessage< ::mruv::business::BuyBusinessRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::business::BuyBusinessRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::business::BuyBusinessResponse* Arena::CreateMaybeMessage< ::mruv::business::BuyBusinessResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::business::BuyBusinessResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::business::WatchBusinessRequest* Arena::CreateMaybeMessage< ::mruv::business::WatchBusinessRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::business::WatchBusinessRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::business::WatchBusinessResponse* Arena::CreateMaybeMessage< ::mruv::business::WatchBusinessResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::business::WatchBusinessResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::business::WatchBusinessesRequest* Arena::CreateMaybeMessage< ::mruv::business::WatchBusinessesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::business::WatchBusinessesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::business::WatchBusinessesResponse* Arena::CreateMaybeMessage< ::mruv::business::WatchBusinessesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::business::WatchBusinessesResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
