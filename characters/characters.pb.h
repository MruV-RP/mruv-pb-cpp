// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: characters/characters.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_characters_2fcharacters_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_characters_2fcharacters_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "common/health.pb.h"
#include "common/spatial.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_characters_2fcharacters_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_characters_2fcharacters_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_characters_2fcharacters_2eproto;
namespace mruv {
class Character;
class CharacterDefaultTypeInternal;
extern CharacterDefaultTypeInternal _Character_default_instance_;
class CharacterID;
class CharacterIDDefaultTypeInternal;
extern CharacterIDDefaultTypeInternal _CharacterID_default_instance_;
class CreateCharacterRequest;
class CreateCharacterRequestDefaultTypeInternal;
extern CreateCharacterRequestDefaultTypeInternal _CreateCharacterRequest_default_instance_;
class CreateCharacterResponse;
class CreateCharacterResponseDefaultTypeInternal;
extern CreateCharacterResponseDefaultTypeInternal _CreateCharacterResponse_default_instance_;
class DeathStreamRequest;
class DeathStreamRequestDefaultTypeInternal;
extern DeathStreamRequestDefaultTypeInternal _DeathStreamRequest_default_instance_;
class DeathStreamResponse;
class DeathStreamResponseDefaultTypeInternal;
extern DeathStreamResponseDefaultTypeInternal _DeathStreamResponse_default_instance_;
class DeleteCharacterRequest;
class DeleteCharacterRequestDefaultTypeInternal;
extern DeleteCharacterRequestDefaultTypeInternal _DeleteCharacterRequest_default_instance_;
class DeleteCharacterResponse;
class DeleteCharacterResponseDefaultTypeInternal;
extern DeleteCharacterResponseDefaultTypeInternal _DeleteCharacterResponse_default_instance_;
class GetCharacterRequest;
class GetCharacterRequestDefaultTypeInternal;
extern GetCharacterRequestDefaultTypeInternal _GetCharacterRequest_default_instance_;
class GetCharacterResponse;
class GetCharacterResponseDefaultTypeInternal;
extern GetCharacterResponseDefaultTypeInternal _GetCharacterResponse_default_instance_;
class UpdateCharacterRequest;
class UpdateCharacterRequestDefaultTypeInternal;
extern UpdateCharacterRequestDefaultTypeInternal _UpdateCharacterRequest_default_instance_;
class UpdateCharacterResponse;
class UpdateCharacterResponseDefaultTypeInternal;
extern UpdateCharacterResponseDefaultTypeInternal _UpdateCharacterResponse_default_instance_;
}  // namespace mruv
PROTOBUF_NAMESPACE_OPEN
template<> ::mruv::Character* Arena::CreateMaybeMessage<::mruv::Character>(Arena*);
template<> ::mruv::CharacterID* Arena::CreateMaybeMessage<::mruv::CharacterID>(Arena*);
template<> ::mruv::CreateCharacterRequest* Arena::CreateMaybeMessage<::mruv::CreateCharacterRequest>(Arena*);
template<> ::mruv::CreateCharacterResponse* Arena::CreateMaybeMessage<::mruv::CreateCharacterResponse>(Arena*);
template<> ::mruv::DeathStreamRequest* Arena::CreateMaybeMessage<::mruv::DeathStreamRequest>(Arena*);
template<> ::mruv::DeathStreamResponse* Arena::CreateMaybeMessage<::mruv::DeathStreamResponse>(Arena*);
template<> ::mruv::DeleteCharacterRequest* Arena::CreateMaybeMessage<::mruv::DeleteCharacterRequest>(Arena*);
template<> ::mruv::DeleteCharacterResponse* Arena::CreateMaybeMessage<::mruv::DeleteCharacterResponse>(Arena*);
template<> ::mruv::GetCharacterRequest* Arena::CreateMaybeMessage<::mruv::GetCharacterRequest>(Arena*);
template<> ::mruv::GetCharacterResponse* Arena::CreateMaybeMessage<::mruv::GetCharacterResponse>(Arena*);
template<> ::mruv::UpdateCharacterRequest* Arena::CreateMaybeMessage<::mruv::UpdateCharacterRequest>(Arena*);
template<> ::mruv::UpdateCharacterResponse* Arena::CreateMaybeMessage<::mruv::UpdateCharacterResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mruv {

enum DeathType : int {
  DEATH_TYPE_NONE = 0,
  DEATH_TYPE_BW = 1,
  DEATH_TYPE_BW_KILL = 2,
  DEATH_TYPE_CK = 3,
  DeathType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DeathType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DeathType_IsValid(int value);
constexpr DeathType DeathType_MIN = DEATH_TYPE_NONE;
constexpr DeathType DeathType_MAX = DEATH_TYPE_CK;
constexpr int DeathType_ARRAYSIZE = DeathType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeathType_descriptor();
template<typename T>
inline const std::string& DeathType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DeathType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DeathType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DeathType_descriptor(), enum_t_value);
}
inline bool DeathType_Parse(
    const std::string& name, DeathType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DeathType>(
    DeathType_descriptor(), name, value);
}
// ===================================================================

class Character :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.Character) */ {
 public:
  Character();
  virtual ~Character();

  Character(const Character& from);
  Character(Character&& from) noexcept
    : Character() {
    *this = ::std::move(from);
  }

  inline Character& operator=(const Character& from) {
    CopyFrom(from);
    return *this;
  }
  inline Character& operator=(Character&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Character& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Character* internal_default_instance() {
    return reinterpret_cast<const Character*>(
               &_Character_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Character& a, Character& b) {
    a.Swap(&b);
  }
  inline void Swap(Character* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Character* New() const final {
    return CreateMaybeMessage<Character>(nullptr);
  }

  Character* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Character>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Character& from);
  void MergeFrom(const Character& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Character* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.Character";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_characters_2fcharacters_2eproto);
    return ::descriptor_table_characters_2fcharacters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstNameFieldNumber = 3,
    kSecondNameFieldNumber = 4,
    kPositionFieldNumber = 7,
    kIdFieldNumber = 1,
    kOwnerIdFieldNumber = 2,
    kAgeFieldNumber = 5,
    kSexFieldNumber = 6,
  };
  // string first_name = 3;
  void clear_first_name();
  const std::string& first_name() const;
  void set_first_name(const std::string& value);
  void set_first_name(std::string&& value);
  void set_first_name(const char* value);
  void set_first_name(const char* value, size_t size);
  std::string* mutable_first_name();
  std::string* release_first_name();
  void set_allocated_first_name(std::string* first_name);
  private:
  const std::string& _internal_first_name() const;
  void _internal_set_first_name(const std::string& value);
  std::string* _internal_mutable_first_name();
  public:

  // string second_name = 4;
  void clear_second_name();
  const std::string& second_name() const;
  void set_second_name(const std::string& value);
  void set_second_name(std::string&& value);
  void set_second_name(const char* value);
  void set_second_name(const char* value, size_t size);
  std::string* mutable_second_name();
  std::string* release_second_name();
  void set_allocated_second_name(std::string* second_name);
  private:
  const std::string& _internal_second_name() const;
  void _internal_set_second_name(const std::string& value);
  std::string* _internal_mutable_second_name();
  public:

  // .mruv.Position position = 7;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::mruv::Position& position() const;
  ::mruv::Position* release_position();
  ::mruv::Position* mutable_position();
  void set_allocated_position(::mruv::Position* position);
  private:
  const ::mruv::Position& _internal_position() const;
  ::mruv::Position* _internal_mutable_position();
  public:

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 owner_id = 2;
  void clear_owner_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_id() const;
  void set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_owner_id() const;
  void _internal_set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 age = 5;
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::uint32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_age() const;
  void _internal_set_age(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sex = 6;
  void clear_sex();
  ::PROTOBUF_NAMESPACE_ID::uint32 sex() const;
  void set_sex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sex() const;
  void _internal_set_sex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.Character)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr second_name_;
  ::mruv::Position* position_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 age_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2fcharacters_2eproto;
};
// -------------------------------------------------------------------

class CharacterID :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.CharacterID) */ {
 public:
  CharacterID();
  virtual ~CharacterID();

  CharacterID(const CharacterID& from);
  CharacterID(CharacterID&& from) noexcept
    : CharacterID() {
    *this = ::std::move(from);
  }

  inline CharacterID& operator=(const CharacterID& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterID& operator=(CharacterID&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CharacterID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CharacterID* internal_default_instance() {
    return reinterpret_cast<const CharacterID*>(
               &_CharacterID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CharacterID& a, CharacterID& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterID* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CharacterID* New() const final {
    return CreateMaybeMessage<CharacterID>(nullptr);
  }

  CharacterID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CharacterID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CharacterID& from);
  void MergeFrom(const CharacterID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharacterID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.CharacterID";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_characters_2fcharacters_2eproto);
    return ::descriptor_table_characters_2fcharacters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.CharacterID)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2fcharacters_2eproto;
};
// -------------------------------------------------------------------

class CreateCharacterRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.CreateCharacterRequest) */ {
 public:
  CreateCharacterRequest();
  virtual ~CreateCharacterRequest();

  CreateCharacterRequest(const CreateCharacterRequest& from);
  CreateCharacterRequest(CreateCharacterRequest&& from) noexcept
    : CreateCharacterRequest() {
    *this = ::std::move(from);
  }

  inline CreateCharacterRequest& operator=(const CreateCharacterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateCharacterRequest& operator=(CreateCharacterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateCharacterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateCharacterRequest* internal_default_instance() {
    return reinterpret_cast<const CreateCharacterRequest*>(
               &_CreateCharacterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateCharacterRequest& a, CreateCharacterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateCharacterRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateCharacterRequest* New() const final {
    return CreateMaybeMessage<CreateCharacterRequest>(nullptr);
  }

  CreateCharacterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateCharacterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateCharacterRequest& from);
  void MergeFrom(const CreateCharacterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateCharacterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.CreateCharacterRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_characters_2fcharacters_2eproto);
    return ::descriptor_table_characters_2fcharacters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstNameFieldNumber = 3,
    kSecondNameFieldNumber = 4,
    kIdFieldNumber = 1,
    kOwnerIdFieldNumber = 2,
    kAgeFieldNumber = 5,
    kSexFieldNumber = 6,
  };
  // string first_name = 3;
  void clear_first_name();
  const std::string& first_name() const;
  void set_first_name(const std::string& value);
  void set_first_name(std::string&& value);
  void set_first_name(const char* value);
  void set_first_name(const char* value, size_t size);
  std::string* mutable_first_name();
  std::string* release_first_name();
  void set_allocated_first_name(std::string* first_name);
  private:
  const std::string& _internal_first_name() const;
  void _internal_set_first_name(const std::string& value);
  std::string* _internal_mutable_first_name();
  public:

  // string second_name = 4;
  void clear_second_name();
  const std::string& second_name() const;
  void set_second_name(const std::string& value);
  void set_second_name(std::string&& value);
  void set_second_name(const char* value);
  void set_second_name(const char* value, size_t size);
  std::string* mutable_second_name();
  std::string* release_second_name();
  void set_allocated_second_name(std::string* second_name);
  private:
  const std::string& _internal_second_name() const;
  void _internal_set_second_name(const std::string& value);
  std::string* _internal_mutable_second_name();
  public:

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 owner_id = 2;
  void clear_owner_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_id() const;
  void set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_owner_id() const;
  void _internal_set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 age = 5;
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::uint32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_age() const;
  void _internal_set_age(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sex = 6;
  void clear_sex();
  ::PROTOBUF_NAMESPACE_ID::uint32 sex() const;
  void set_sex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sex() const;
  void _internal_set_sex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.CreateCharacterRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr second_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 age_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2fcharacters_2eproto;
};
// -------------------------------------------------------------------

class CreateCharacterResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.CreateCharacterResponse) */ {
 public:
  CreateCharacterResponse();
  virtual ~CreateCharacterResponse();

  CreateCharacterResponse(const CreateCharacterResponse& from);
  CreateCharacterResponse(CreateCharacterResponse&& from) noexcept
    : CreateCharacterResponse() {
    *this = ::std::move(from);
  }

  inline CreateCharacterResponse& operator=(const CreateCharacterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateCharacterResponse& operator=(CreateCharacterResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateCharacterResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateCharacterResponse* internal_default_instance() {
    return reinterpret_cast<const CreateCharacterResponse*>(
               &_CreateCharacterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateCharacterResponse& a, CreateCharacterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateCharacterResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateCharacterResponse* New() const final {
    return CreateMaybeMessage<CreateCharacterResponse>(nullptr);
  }

  CreateCharacterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateCharacterResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateCharacterResponse& from);
  void MergeFrom(const CreateCharacterResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateCharacterResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.CreateCharacterResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_characters_2fcharacters_2eproto);
    return ::descriptor_table_characters_2fcharacters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.CreateCharacterResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2fcharacters_2eproto;
};
// -------------------------------------------------------------------

class GetCharacterRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.GetCharacterRequest) */ {
 public:
  GetCharacterRequest();
  virtual ~GetCharacterRequest();

  GetCharacterRequest(const GetCharacterRequest& from);
  GetCharacterRequest(GetCharacterRequest&& from) noexcept
    : GetCharacterRequest() {
    *this = ::std::move(from);
  }

  inline GetCharacterRequest& operator=(const GetCharacterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCharacterRequest& operator=(GetCharacterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCharacterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCharacterRequest* internal_default_instance() {
    return reinterpret_cast<const GetCharacterRequest*>(
               &_GetCharacterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetCharacterRequest& a, GetCharacterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCharacterRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCharacterRequest* New() const final {
    return CreateMaybeMessage<GetCharacterRequest>(nullptr);
  }

  GetCharacterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCharacterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCharacterRequest& from);
  void MergeFrom(const GetCharacterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCharacterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.GetCharacterRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_characters_2fcharacters_2eproto);
    return ::descriptor_table_characters_2fcharacters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.GetCharacterRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2fcharacters_2eproto;
};
// -------------------------------------------------------------------

class GetCharacterResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.GetCharacterResponse) */ {
 public:
  GetCharacterResponse();
  virtual ~GetCharacterResponse();

  GetCharacterResponse(const GetCharacterResponse& from);
  GetCharacterResponse(GetCharacterResponse&& from) noexcept
    : GetCharacterResponse() {
    *this = ::std::move(from);
  }

  inline GetCharacterResponse& operator=(const GetCharacterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCharacterResponse& operator=(GetCharacterResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCharacterResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCharacterResponse* internal_default_instance() {
    return reinterpret_cast<const GetCharacterResponse*>(
               &_GetCharacterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetCharacterResponse& a, GetCharacterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCharacterResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCharacterResponse* New() const final {
    return CreateMaybeMessage<GetCharacterResponse>(nullptr);
  }

  GetCharacterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCharacterResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCharacterResponse& from);
  void MergeFrom(const GetCharacterResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCharacterResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.GetCharacterResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_characters_2fcharacters_2eproto);
    return ::descriptor_table_characters_2fcharacters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstNameFieldNumber = 3,
    kSecondNameFieldNumber = 4,
    kPositionFieldNumber = 7,
    kIdFieldNumber = 1,
    kOwnerIdFieldNumber = 2,
    kAgeFieldNumber = 5,
    kSexFieldNumber = 6,
  };
  // string first_name = 3;
  void clear_first_name();
  const std::string& first_name() const;
  void set_first_name(const std::string& value);
  void set_first_name(std::string&& value);
  void set_first_name(const char* value);
  void set_first_name(const char* value, size_t size);
  std::string* mutable_first_name();
  std::string* release_first_name();
  void set_allocated_first_name(std::string* first_name);
  private:
  const std::string& _internal_first_name() const;
  void _internal_set_first_name(const std::string& value);
  std::string* _internal_mutable_first_name();
  public:

  // string second_name = 4;
  void clear_second_name();
  const std::string& second_name() const;
  void set_second_name(const std::string& value);
  void set_second_name(std::string&& value);
  void set_second_name(const char* value);
  void set_second_name(const char* value, size_t size);
  std::string* mutable_second_name();
  std::string* release_second_name();
  void set_allocated_second_name(std::string* second_name);
  private:
  const std::string& _internal_second_name() const;
  void _internal_set_second_name(const std::string& value);
  std::string* _internal_mutable_second_name();
  public:

  // .mruv.Position position = 7;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::mruv::Position& position() const;
  ::mruv::Position* release_position();
  ::mruv::Position* mutable_position();
  void set_allocated_position(::mruv::Position* position);
  private:
  const ::mruv::Position& _internal_position() const;
  ::mruv::Position* _internal_mutable_position();
  public:

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 owner_id = 2;
  void clear_owner_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_id() const;
  void set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_owner_id() const;
  void _internal_set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 age = 5;
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::uint32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_age() const;
  void _internal_set_age(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sex = 6;
  void clear_sex();
  ::PROTOBUF_NAMESPACE_ID::uint32 sex() const;
  void set_sex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sex() const;
  void _internal_set_sex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.GetCharacterResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr second_name_;
  ::mruv::Position* position_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 age_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2fcharacters_2eproto;
};
// -------------------------------------------------------------------

class UpdateCharacterRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.UpdateCharacterRequest) */ {
 public:
  UpdateCharacterRequest();
  virtual ~UpdateCharacterRequest();

  UpdateCharacterRequest(const UpdateCharacterRequest& from);
  UpdateCharacterRequest(UpdateCharacterRequest&& from) noexcept
    : UpdateCharacterRequest() {
    *this = ::std::move(from);
  }

  inline UpdateCharacterRequest& operator=(const UpdateCharacterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateCharacterRequest& operator=(UpdateCharacterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateCharacterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateCharacterRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateCharacterRequest*>(
               &_UpdateCharacterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UpdateCharacterRequest& a, UpdateCharacterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateCharacterRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateCharacterRequest* New() const final {
    return CreateMaybeMessage<UpdateCharacterRequest>(nullptr);
  }

  UpdateCharacterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateCharacterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateCharacterRequest& from);
  void MergeFrom(const UpdateCharacterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateCharacterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.UpdateCharacterRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_characters_2fcharacters_2eproto);
    return ::descriptor_table_characters_2fcharacters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.UpdateCharacterRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2fcharacters_2eproto;
};
// -------------------------------------------------------------------

class UpdateCharacterResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.UpdateCharacterResponse) */ {
 public:
  UpdateCharacterResponse();
  virtual ~UpdateCharacterResponse();

  UpdateCharacterResponse(const UpdateCharacterResponse& from);
  UpdateCharacterResponse(UpdateCharacterResponse&& from) noexcept
    : UpdateCharacterResponse() {
    *this = ::std::move(from);
  }

  inline UpdateCharacterResponse& operator=(const UpdateCharacterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateCharacterResponse& operator=(UpdateCharacterResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateCharacterResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateCharacterResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateCharacterResponse*>(
               &_UpdateCharacterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UpdateCharacterResponse& a, UpdateCharacterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateCharacterResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateCharacterResponse* New() const final {
    return CreateMaybeMessage<UpdateCharacterResponse>(nullptr);
  }

  UpdateCharacterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateCharacterResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateCharacterResponse& from);
  void MergeFrom(const UpdateCharacterResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateCharacterResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.UpdateCharacterResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_characters_2fcharacters_2eproto);
    return ::descriptor_table_characters_2fcharacters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.UpdateCharacterResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2fcharacters_2eproto;
};
// -------------------------------------------------------------------

class DeleteCharacterRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.DeleteCharacterRequest) */ {
 public:
  DeleteCharacterRequest();
  virtual ~DeleteCharacterRequest();

  DeleteCharacterRequest(const DeleteCharacterRequest& from);
  DeleteCharacterRequest(DeleteCharacterRequest&& from) noexcept
    : DeleteCharacterRequest() {
    *this = ::std::move(from);
  }

  inline DeleteCharacterRequest& operator=(const DeleteCharacterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteCharacterRequest& operator=(DeleteCharacterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteCharacterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteCharacterRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteCharacterRequest*>(
               &_DeleteCharacterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DeleteCharacterRequest& a, DeleteCharacterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteCharacterRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteCharacterRequest* New() const final {
    return CreateMaybeMessage<DeleteCharacterRequest>(nullptr);
  }

  DeleteCharacterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteCharacterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteCharacterRequest& from);
  void MergeFrom(const DeleteCharacterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteCharacterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.DeleteCharacterRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_characters_2fcharacters_2eproto);
    return ::descriptor_table_characters_2fcharacters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.DeleteCharacterRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2fcharacters_2eproto;
};
// -------------------------------------------------------------------

class DeleteCharacterResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.DeleteCharacterResponse) */ {
 public:
  DeleteCharacterResponse();
  virtual ~DeleteCharacterResponse();

  DeleteCharacterResponse(const DeleteCharacterResponse& from);
  DeleteCharacterResponse(DeleteCharacterResponse&& from) noexcept
    : DeleteCharacterResponse() {
    *this = ::std::move(from);
  }

  inline DeleteCharacterResponse& operator=(const DeleteCharacterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteCharacterResponse& operator=(DeleteCharacterResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteCharacterResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteCharacterResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteCharacterResponse*>(
               &_DeleteCharacterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DeleteCharacterResponse& a, DeleteCharacterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteCharacterResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteCharacterResponse* New() const final {
    return CreateMaybeMessage<DeleteCharacterResponse>(nullptr);
  }

  DeleteCharacterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteCharacterResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteCharacterResponse& from);
  void MergeFrom(const DeleteCharacterResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteCharacterResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.DeleteCharacterResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_characters_2fcharacters_2eproto);
    return ::descriptor_table_characters_2fcharacters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.DeleteCharacterResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2fcharacters_2eproto;
};
// -------------------------------------------------------------------

class DeathStreamRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.DeathStreamRequest) */ {
 public:
  DeathStreamRequest();
  virtual ~DeathStreamRequest();

  DeathStreamRequest(const DeathStreamRequest& from);
  DeathStreamRequest(DeathStreamRequest&& from) noexcept
    : DeathStreamRequest() {
    *this = ::std::move(from);
  }

  inline DeathStreamRequest& operator=(const DeathStreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeathStreamRequest& operator=(DeathStreamRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeathStreamRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeathStreamRequest* internal_default_instance() {
    return reinterpret_cast<const DeathStreamRequest*>(
               &_DeathStreamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DeathStreamRequest& a, DeathStreamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeathStreamRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeathStreamRequest* New() const final {
    return CreateMaybeMessage<DeathStreamRequest>(nullptr);
  }

  DeathStreamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeathStreamRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeathStreamRequest& from);
  void MergeFrom(const DeathStreamRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeathStreamRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.DeathStreamRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_characters_2fcharacters_2eproto);
    return ::descriptor_table_characters_2fcharacters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeathTypesFieldNumber = 1,
  };
  // repeated .mruv.DeathType death_types = 1;
  int death_types_size() const;
  private:
  int _internal_death_types_size() const;
  public:
  void clear_death_types();
  private:
  ::mruv::DeathType _internal_death_types(int index) const;
  void _internal_add_death_types(::mruv::DeathType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_death_types();
  public:
  ::mruv::DeathType death_types(int index) const;
  void set_death_types(int index, ::mruv::DeathType value);
  void add_death_types(::mruv::DeathType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& death_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_death_types();

  // @@protoc_insertion_point(class_scope:mruv.DeathStreamRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> death_types_;
  mutable std::atomic<int> _death_types_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2fcharacters_2eproto;
};
// -------------------------------------------------------------------

class DeathStreamResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.DeathStreamResponse) */ {
 public:
  DeathStreamResponse();
  virtual ~DeathStreamResponse();

  DeathStreamResponse(const DeathStreamResponse& from);
  DeathStreamResponse(DeathStreamResponse&& from) noexcept
    : DeathStreamResponse() {
    *this = ::std::move(from);
  }

  inline DeathStreamResponse& operator=(const DeathStreamResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeathStreamResponse& operator=(DeathStreamResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeathStreamResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeathStreamResponse* internal_default_instance() {
    return reinterpret_cast<const DeathStreamResponse*>(
               &_DeathStreamResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DeathStreamResponse& a, DeathStreamResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeathStreamResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeathStreamResponse* New() const final {
    return CreateMaybeMessage<DeathStreamResponse>(nullptr);
  }

  DeathStreamResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeathStreamResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeathStreamResponse& from);
  void MergeFrom(const DeathStreamResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeathStreamResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.DeathStreamResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_characters_2fcharacters_2eproto);
    return ::descriptor_table_characters_2fcharacters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterFieldNumber = 1,
    kDeathTypeFieldNumber = 2,
  };
  // .mruv.Character character = 1;
  bool has_character() const;
  private:
  bool _internal_has_character() const;
  public:
  void clear_character();
  const ::mruv::Character& character() const;
  ::mruv::Character* release_character();
  ::mruv::Character* mutable_character();
  void set_allocated_character(::mruv::Character* character);
  private:
  const ::mruv::Character& _internal_character() const;
  ::mruv::Character* _internal_mutable_character();
  public:

  // .mruv.DeathType death_type = 2;
  void clear_death_type();
  ::mruv::DeathType death_type() const;
  void set_death_type(::mruv::DeathType value);
  private:
  ::mruv::DeathType _internal_death_type() const;
  void _internal_set_death_type(::mruv::DeathType value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.DeathStreamResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mruv::Character* character_;
  int death_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2fcharacters_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Character

// uint32 id = 1;
inline void Character::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Character::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Character::id() const {
  // @@protoc_insertion_point(field_get:mruv.Character.id)
  return _internal_id();
}
inline void Character::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Character::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.Character.id)
}

// uint32 owner_id = 2;
inline void Character::clear_owner_id() {
  owner_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Character::_internal_owner_id() const {
  return owner_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Character::owner_id() const {
  // @@protoc_insertion_point(field_get:mruv.Character.owner_id)
  return _internal_owner_id();
}
inline void Character::_internal_set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  owner_id_ = value;
}
inline void Character::set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_owner_id(value);
  // @@protoc_insertion_point(field_set:mruv.Character.owner_id)
}

// string first_name = 3;
inline void Character::clear_first_name() {
  first_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Character::first_name() const {
  // @@protoc_insertion_point(field_get:mruv.Character.first_name)
  return _internal_first_name();
}
inline void Character::set_first_name(const std::string& value) {
  _internal_set_first_name(value);
  // @@protoc_insertion_point(field_set:mruv.Character.first_name)
}
inline std::string* Character::mutable_first_name() {
  // @@protoc_insertion_point(field_mutable:mruv.Character.first_name)
  return _internal_mutable_first_name();
}
inline const std::string& Character::_internal_first_name() const {
  return first_name_.GetNoArena();
}
inline void Character::_internal_set_first_name(const std::string& value) {
  
  first_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Character::set_first_name(std::string&& value) {
  
  first_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.Character.first_name)
}
inline void Character::set_first_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  first_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.Character.first_name)
}
inline void Character::set_first_name(const char* value, size_t size) {
  
  first_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.Character.first_name)
}
inline std::string* Character::_internal_mutable_first_name() {
  
  return first_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Character::release_first_name() {
  // @@protoc_insertion_point(field_release:mruv.Character.first_name)
  
  return first_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Character::set_allocated_first_name(std::string* first_name) {
  if (first_name != nullptr) {
    
  } else {
    
  }
  first_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), first_name);
  // @@protoc_insertion_point(field_set_allocated:mruv.Character.first_name)
}

// string second_name = 4;
inline void Character::clear_second_name() {
  second_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Character::second_name() const {
  // @@protoc_insertion_point(field_get:mruv.Character.second_name)
  return _internal_second_name();
}
inline void Character::set_second_name(const std::string& value) {
  _internal_set_second_name(value);
  // @@protoc_insertion_point(field_set:mruv.Character.second_name)
}
inline std::string* Character::mutable_second_name() {
  // @@protoc_insertion_point(field_mutable:mruv.Character.second_name)
  return _internal_mutable_second_name();
}
inline const std::string& Character::_internal_second_name() const {
  return second_name_.GetNoArena();
}
inline void Character::_internal_set_second_name(const std::string& value) {
  
  second_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Character::set_second_name(std::string&& value) {
  
  second_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.Character.second_name)
}
inline void Character::set_second_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  second_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.Character.second_name)
}
inline void Character::set_second_name(const char* value, size_t size) {
  
  second_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.Character.second_name)
}
inline std::string* Character::_internal_mutable_second_name() {
  
  return second_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Character::release_second_name() {
  // @@protoc_insertion_point(field_release:mruv.Character.second_name)
  
  return second_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Character::set_allocated_second_name(std::string* second_name) {
  if (second_name != nullptr) {
    
  } else {
    
  }
  second_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), second_name);
  // @@protoc_insertion_point(field_set_allocated:mruv.Character.second_name)
}

// uint32 age = 5;
inline void Character::clear_age() {
  age_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Character::_internal_age() const {
  return age_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Character::age() const {
  // @@protoc_insertion_point(field_get:mruv.Character.age)
  return _internal_age();
}
inline void Character::_internal_set_age(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  age_ = value;
}
inline void Character::set_age(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:mruv.Character.age)
}

// uint32 sex = 6;
inline void Character::clear_sex() {
  sex_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Character::_internal_sex() const {
  return sex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Character::sex() const {
  // @@protoc_insertion_point(field_get:mruv.Character.sex)
  return _internal_sex();
}
inline void Character::_internal_set_sex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sex_ = value;
}
inline void Character::set_sex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:mruv.Character.sex)
}

// .mruv.Position position = 7;
inline bool Character::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool Character::has_position() const {
  return _internal_has_position();
}
inline const ::mruv::Position& Character::_internal_position() const {
  const ::mruv::Position* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mruv::Position*>(
      &::mruv::_Position_default_instance_);
}
inline const ::mruv::Position& Character::position() const {
  // @@protoc_insertion_point(field_get:mruv.Character.position)
  return _internal_position();
}
inline ::mruv::Position* Character::release_position() {
  // @@protoc_insertion_point(field_release:mruv.Character.position)
  
  ::mruv::Position* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::mruv::Position* Character::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::mruv::Position>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::mruv::Position* Character::mutable_position() {
  // @@protoc_insertion_point(field_mutable:mruv.Character.position)
  return _internal_mutable_position();
}
inline void Character::set_allocated_position(::mruv::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:mruv.Character.position)
}

// -------------------------------------------------------------------

// CharacterID

// uint32 id = 1;
inline void CharacterID::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CharacterID::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CharacterID::id() const {
  // @@protoc_insertion_point(field_get:mruv.CharacterID.id)
  return _internal_id();
}
inline void CharacterID::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void CharacterID::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.CharacterID.id)
}

// -------------------------------------------------------------------

// CreateCharacterRequest

// uint32 id = 1;
inline void CreateCharacterRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateCharacterRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateCharacterRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.CreateCharacterRequest.id)
  return _internal_id();
}
inline void CreateCharacterRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void CreateCharacterRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.CreateCharacterRequest.id)
}

// uint32 owner_id = 2;
inline void CreateCharacterRequest::clear_owner_id() {
  owner_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateCharacterRequest::_internal_owner_id() const {
  return owner_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateCharacterRequest::owner_id() const {
  // @@protoc_insertion_point(field_get:mruv.CreateCharacterRequest.owner_id)
  return _internal_owner_id();
}
inline void CreateCharacterRequest::_internal_set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  owner_id_ = value;
}
inline void CreateCharacterRequest::set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_owner_id(value);
  // @@protoc_insertion_point(field_set:mruv.CreateCharacterRequest.owner_id)
}

// string first_name = 3;
inline void CreateCharacterRequest::clear_first_name() {
  first_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateCharacterRequest::first_name() const {
  // @@protoc_insertion_point(field_get:mruv.CreateCharacterRequest.first_name)
  return _internal_first_name();
}
inline void CreateCharacterRequest::set_first_name(const std::string& value) {
  _internal_set_first_name(value);
  // @@protoc_insertion_point(field_set:mruv.CreateCharacterRequest.first_name)
}
inline std::string* CreateCharacterRequest::mutable_first_name() {
  // @@protoc_insertion_point(field_mutable:mruv.CreateCharacterRequest.first_name)
  return _internal_mutable_first_name();
}
inline const std::string& CreateCharacterRequest::_internal_first_name() const {
  return first_name_.GetNoArena();
}
inline void CreateCharacterRequest::_internal_set_first_name(const std::string& value) {
  
  first_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateCharacterRequest::set_first_name(std::string&& value) {
  
  first_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.CreateCharacterRequest.first_name)
}
inline void CreateCharacterRequest::set_first_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  first_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.CreateCharacterRequest.first_name)
}
inline void CreateCharacterRequest::set_first_name(const char* value, size_t size) {
  
  first_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.CreateCharacterRequest.first_name)
}
inline std::string* CreateCharacterRequest::_internal_mutable_first_name() {
  
  return first_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateCharacterRequest::release_first_name() {
  // @@protoc_insertion_point(field_release:mruv.CreateCharacterRequest.first_name)
  
  return first_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateCharacterRequest::set_allocated_first_name(std::string* first_name) {
  if (first_name != nullptr) {
    
  } else {
    
  }
  first_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), first_name);
  // @@protoc_insertion_point(field_set_allocated:mruv.CreateCharacterRequest.first_name)
}

// string second_name = 4;
inline void CreateCharacterRequest::clear_second_name() {
  second_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateCharacterRequest::second_name() const {
  // @@protoc_insertion_point(field_get:mruv.CreateCharacterRequest.second_name)
  return _internal_second_name();
}
inline void CreateCharacterRequest::set_second_name(const std::string& value) {
  _internal_set_second_name(value);
  // @@protoc_insertion_point(field_set:mruv.CreateCharacterRequest.second_name)
}
inline std::string* CreateCharacterRequest::mutable_second_name() {
  // @@protoc_insertion_point(field_mutable:mruv.CreateCharacterRequest.second_name)
  return _internal_mutable_second_name();
}
inline const std::string& CreateCharacterRequest::_internal_second_name() const {
  return second_name_.GetNoArena();
}
inline void CreateCharacterRequest::_internal_set_second_name(const std::string& value) {
  
  second_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateCharacterRequest::set_second_name(std::string&& value) {
  
  second_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.CreateCharacterRequest.second_name)
}
inline void CreateCharacterRequest::set_second_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  second_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.CreateCharacterRequest.second_name)
}
inline void CreateCharacterRequest::set_second_name(const char* value, size_t size) {
  
  second_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.CreateCharacterRequest.second_name)
}
inline std::string* CreateCharacterRequest::_internal_mutable_second_name() {
  
  return second_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateCharacterRequest::release_second_name() {
  // @@protoc_insertion_point(field_release:mruv.CreateCharacterRequest.second_name)
  
  return second_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateCharacterRequest::set_allocated_second_name(std::string* second_name) {
  if (second_name != nullptr) {
    
  } else {
    
  }
  second_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), second_name);
  // @@protoc_insertion_point(field_set_allocated:mruv.CreateCharacterRequest.second_name)
}

// uint32 age = 5;
inline void CreateCharacterRequest::clear_age() {
  age_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateCharacterRequest::_internal_age() const {
  return age_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateCharacterRequest::age() const {
  // @@protoc_insertion_point(field_get:mruv.CreateCharacterRequest.age)
  return _internal_age();
}
inline void CreateCharacterRequest::_internal_set_age(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  age_ = value;
}
inline void CreateCharacterRequest::set_age(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:mruv.CreateCharacterRequest.age)
}

// uint32 sex = 6;
inline void CreateCharacterRequest::clear_sex() {
  sex_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateCharacterRequest::_internal_sex() const {
  return sex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateCharacterRequest::sex() const {
  // @@protoc_insertion_point(field_get:mruv.CreateCharacterRequest.sex)
  return _internal_sex();
}
inline void CreateCharacterRequest::_internal_set_sex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sex_ = value;
}
inline void CreateCharacterRequest::set_sex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:mruv.CreateCharacterRequest.sex)
}

// -------------------------------------------------------------------

// CreateCharacterResponse

// uint32 id = 1;
inline void CreateCharacterResponse::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateCharacterResponse::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateCharacterResponse::id() const {
  // @@protoc_insertion_point(field_get:mruv.CreateCharacterResponse.id)
  return _internal_id();
}
inline void CreateCharacterResponse::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void CreateCharacterResponse::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.CreateCharacterResponse.id)
}

// -------------------------------------------------------------------

// GetCharacterRequest

// uint32 id = 1;
inline void GetCharacterRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetCharacterRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetCharacterRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.GetCharacterRequest.id)
  return _internal_id();
}
inline void GetCharacterRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void GetCharacterRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.GetCharacterRequest.id)
}

// -------------------------------------------------------------------

// GetCharacterResponse

// uint32 id = 1;
inline void GetCharacterResponse::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetCharacterResponse::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetCharacterResponse::id() const {
  // @@protoc_insertion_point(field_get:mruv.GetCharacterResponse.id)
  return _internal_id();
}
inline void GetCharacterResponse::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void GetCharacterResponse::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.GetCharacterResponse.id)
}

// uint32 owner_id = 2;
inline void GetCharacterResponse::clear_owner_id() {
  owner_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetCharacterResponse::_internal_owner_id() const {
  return owner_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetCharacterResponse::owner_id() const {
  // @@protoc_insertion_point(field_get:mruv.GetCharacterResponse.owner_id)
  return _internal_owner_id();
}
inline void GetCharacterResponse::_internal_set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  owner_id_ = value;
}
inline void GetCharacterResponse::set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_owner_id(value);
  // @@protoc_insertion_point(field_set:mruv.GetCharacterResponse.owner_id)
}

// string first_name = 3;
inline void GetCharacterResponse::clear_first_name() {
  first_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetCharacterResponse::first_name() const {
  // @@protoc_insertion_point(field_get:mruv.GetCharacterResponse.first_name)
  return _internal_first_name();
}
inline void GetCharacterResponse::set_first_name(const std::string& value) {
  _internal_set_first_name(value);
  // @@protoc_insertion_point(field_set:mruv.GetCharacterResponse.first_name)
}
inline std::string* GetCharacterResponse::mutable_first_name() {
  // @@protoc_insertion_point(field_mutable:mruv.GetCharacterResponse.first_name)
  return _internal_mutable_first_name();
}
inline const std::string& GetCharacterResponse::_internal_first_name() const {
  return first_name_.GetNoArena();
}
inline void GetCharacterResponse::_internal_set_first_name(const std::string& value) {
  
  first_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetCharacterResponse::set_first_name(std::string&& value) {
  
  first_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.GetCharacterResponse.first_name)
}
inline void GetCharacterResponse::set_first_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  first_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.GetCharacterResponse.first_name)
}
inline void GetCharacterResponse::set_first_name(const char* value, size_t size) {
  
  first_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.GetCharacterResponse.first_name)
}
inline std::string* GetCharacterResponse::_internal_mutable_first_name() {
  
  return first_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetCharacterResponse::release_first_name() {
  // @@protoc_insertion_point(field_release:mruv.GetCharacterResponse.first_name)
  
  return first_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetCharacterResponse::set_allocated_first_name(std::string* first_name) {
  if (first_name != nullptr) {
    
  } else {
    
  }
  first_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), first_name);
  // @@protoc_insertion_point(field_set_allocated:mruv.GetCharacterResponse.first_name)
}

// string second_name = 4;
inline void GetCharacterResponse::clear_second_name() {
  second_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetCharacterResponse::second_name() const {
  // @@protoc_insertion_point(field_get:mruv.GetCharacterResponse.second_name)
  return _internal_second_name();
}
inline void GetCharacterResponse::set_second_name(const std::string& value) {
  _internal_set_second_name(value);
  // @@protoc_insertion_point(field_set:mruv.GetCharacterResponse.second_name)
}
inline std::string* GetCharacterResponse::mutable_second_name() {
  // @@protoc_insertion_point(field_mutable:mruv.GetCharacterResponse.second_name)
  return _internal_mutable_second_name();
}
inline const std::string& GetCharacterResponse::_internal_second_name() const {
  return second_name_.GetNoArena();
}
inline void GetCharacterResponse::_internal_set_second_name(const std::string& value) {
  
  second_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetCharacterResponse::set_second_name(std::string&& value) {
  
  second_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.GetCharacterResponse.second_name)
}
inline void GetCharacterResponse::set_second_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  second_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.GetCharacterResponse.second_name)
}
inline void GetCharacterResponse::set_second_name(const char* value, size_t size) {
  
  second_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.GetCharacterResponse.second_name)
}
inline std::string* GetCharacterResponse::_internal_mutable_second_name() {
  
  return second_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetCharacterResponse::release_second_name() {
  // @@protoc_insertion_point(field_release:mruv.GetCharacterResponse.second_name)
  
  return second_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetCharacterResponse::set_allocated_second_name(std::string* second_name) {
  if (second_name != nullptr) {
    
  } else {
    
  }
  second_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), second_name);
  // @@protoc_insertion_point(field_set_allocated:mruv.GetCharacterResponse.second_name)
}

// uint32 age = 5;
inline void GetCharacterResponse::clear_age() {
  age_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetCharacterResponse::_internal_age() const {
  return age_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetCharacterResponse::age() const {
  // @@protoc_insertion_point(field_get:mruv.GetCharacterResponse.age)
  return _internal_age();
}
inline void GetCharacterResponse::_internal_set_age(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  age_ = value;
}
inline void GetCharacterResponse::set_age(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:mruv.GetCharacterResponse.age)
}

// uint32 sex = 6;
inline void GetCharacterResponse::clear_sex() {
  sex_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetCharacterResponse::_internal_sex() const {
  return sex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetCharacterResponse::sex() const {
  // @@protoc_insertion_point(field_get:mruv.GetCharacterResponse.sex)
  return _internal_sex();
}
inline void GetCharacterResponse::_internal_set_sex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sex_ = value;
}
inline void GetCharacterResponse::set_sex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:mruv.GetCharacterResponse.sex)
}

// .mruv.Position position = 7;
inline bool GetCharacterResponse::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool GetCharacterResponse::has_position() const {
  return _internal_has_position();
}
inline const ::mruv::Position& GetCharacterResponse::_internal_position() const {
  const ::mruv::Position* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mruv::Position*>(
      &::mruv::_Position_default_instance_);
}
inline const ::mruv::Position& GetCharacterResponse::position() const {
  // @@protoc_insertion_point(field_get:mruv.GetCharacterResponse.position)
  return _internal_position();
}
inline ::mruv::Position* GetCharacterResponse::release_position() {
  // @@protoc_insertion_point(field_release:mruv.GetCharacterResponse.position)
  
  ::mruv::Position* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::mruv::Position* GetCharacterResponse::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::mruv::Position>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::mruv::Position* GetCharacterResponse::mutable_position() {
  // @@protoc_insertion_point(field_mutable:mruv.GetCharacterResponse.position)
  return _internal_mutable_position();
}
inline void GetCharacterResponse::set_allocated_position(::mruv::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:mruv.GetCharacterResponse.position)
}

// -------------------------------------------------------------------

// UpdateCharacterRequest

// uint32 id = 1;
inline void UpdateCharacterRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateCharacterRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateCharacterRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.UpdateCharacterRequest.id)
  return _internal_id();
}
inline void UpdateCharacterRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void UpdateCharacterRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.UpdateCharacterRequest.id)
}

// -------------------------------------------------------------------

// UpdateCharacterResponse

// -------------------------------------------------------------------

// DeleteCharacterRequest

// uint32 id = 1;
inline void DeleteCharacterRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteCharacterRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteCharacterRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.DeleteCharacterRequest.id)
  return _internal_id();
}
inline void DeleteCharacterRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void DeleteCharacterRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.DeleteCharacterRequest.id)
}

// -------------------------------------------------------------------

// DeleteCharacterResponse

// -------------------------------------------------------------------

// DeathStreamRequest

// repeated .mruv.DeathType death_types = 1;
inline int DeathStreamRequest::_internal_death_types_size() const {
  return death_types_.size();
}
inline int DeathStreamRequest::death_types_size() const {
  return _internal_death_types_size();
}
inline void DeathStreamRequest::clear_death_types() {
  death_types_.Clear();
}
inline ::mruv::DeathType DeathStreamRequest::_internal_death_types(int index) const {
  return static_cast< ::mruv::DeathType >(death_types_.Get(index));
}
inline ::mruv::DeathType DeathStreamRequest::death_types(int index) const {
  // @@protoc_insertion_point(field_get:mruv.DeathStreamRequest.death_types)
  return _internal_death_types(index);
}
inline void DeathStreamRequest::set_death_types(int index, ::mruv::DeathType value) {
  death_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:mruv.DeathStreamRequest.death_types)
}
inline void DeathStreamRequest::_internal_add_death_types(::mruv::DeathType value) {
  death_types_.Add(value);
}
inline void DeathStreamRequest::add_death_types(::mruv::DeathType value) {
  // @@protoc_insertion_point(field_add:mruv.DeathStreamRequest.death_types)
  _internal_add_death_types(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
DeathStreamRequest::death_types() const {
  // @@protoc_insertion_point(field_list:mruv.DeathStreamRequest.death_types)
  return death_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
DeathStreamRequest::_internal_mutable_death_types() {
  return &death_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
DeathStreamRequest::mutable_death_types() {
  // @@protoc_insertion_point(field_mutable_list:mruv.DeathStreamRequest.death_types)
  return _internal_mutable_death_types();
}

// -------------------------------------------------------------------

// DeathStreamResponse

// .mruv.Character character = 1;
inline bool DeathStreamResponse::_internal_has_character() const {
  return this != internal_default_instance() && character_ != nullptr;
}
inline bool DeathStreamResponse::has_character() const {
  return _internal_has_character();
}
inline void DeathStreamResponse::clear_character() {
  if (GetArenaNoVirtual() == nullptr && character_ != nullptr) {
    delete character_;
  }
  character_ = nullptr;
}
inline const ::mruv::Character& DeathStreamResponse::_internal_character() const {
  const ::mruv::Character* p = character_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mruv::Character*>(
      &::mruv::_Character_default_instance_);
}
inline const ::mruv::Character& DeathStreamResponse::character() const {
  // @@protoc_insertion_point(field_get:mruv.DeathStreamResponse.character)
  return _internal_character();
}
inline ::mruv::Character* DeathStreamResponse::release_character() {
  // @@protoc_insertion_point(field_release:mruv.DeathStreamResponse.character)
  
  ::mruv::Character* temp = character_;
  character_ = nullptr;
  return temp;
}
inline ::mruv::Character* DeathStreamResponse::_internal_mutable_character() {
  
  if (character_ == nullptr) {
    auto* p = CreateMaybeMessage<::mruv::Character>(GetArenaNoVirtual());
    character_ = p;
  }
  return character_;
}
inline ::mruv::Character* DeathStreamResponse::mutable_character() {
  // @@protoc_insertion_point(field_mutable:mruv.DeathStreamResponse.character)
  return _internal_mutable_character();
}
inline void DeathStreamResponse::set_allocated_character(::mruv::Character* character) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete character_;
  }
  if (character) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      character = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, character, submessage_arena);
    }
    
  } else {
    
  }
  character_ = character;
  // @@protoc_insertion_point(field_set_allocated:mruv.DeathStreamResponse.character)
}

// .mruv.DeathType death_type = 2;
inline void DeathStreamResponse::clear_death_type() {
  death_type_ = 0;
}
inline ::mruv::DeathType DeathStreamResponse::_internal_death_type() const {
  return static_cast< ::mruv::DeathType >(death_type_);
}
inline ::mruv::DeathType DeathStreamResponse::death_type() const {
  // @@protoc_insertion_point(field_get:mruv.DeathStreamResponse.death_type)
  return _internal_death_type();
}
inline void DeathStreamResponse::_internal_set_death_type(::mruv::DeathType value) {
  
  death_type_ = value;
}
inline void DeathStreamResponse::set_death_type(::mruv::DeathType value) {
  _internal_set_death_type(value);
  // @@protoc_insertion_point(field_set:mruv.DeathStreamResponse.death_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mruv

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mruv::DeathType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mruv::DeathType>() {
  return ::mruv::DeathType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_characters_2fcharacters_2eproto
