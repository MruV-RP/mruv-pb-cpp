// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: characters/characters.proto

#include "characters/characters.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_characters_2fcharacters_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Character_characters_2fcharacters_5fmodel_2eproto;
namespace mruv {
class DeathStreamRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeathStreamRequest> _instance;
} _DeathStreamRequest_default_instance_;
class DeathStreamResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeathStreamResponse> _instance;
} _DeathStreamResponse_default_instance_;
}  // namespace mruv
static void InitDefaultsscc_info_DeathStreamRequest_characters_2fcharacters_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::_DeathStreamRequest_default_instance_;
    new (ptr) ::mruv::DeathStreamRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::DeathStreamRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeathStreamRequest_characters_2fcharacters_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeathStreamRequest_characters_2fcharacters_2eproto}, {}};

static void InitDefaultsscc_info_DeathStreamResponse_characters_2fcharacters_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::_DeathStreamResponse_default_instance_;
    new (ptr) ::mruv::DeathStreamResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::DeathStreamResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeathStreamResponse_characters_2fcharacters_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DeathStreamResponse_characters_2fcharacters_2eproto}, {
      &scc_info_Character_characters_2fcharacters_5fmodel_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_characters_2fcharacters_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_characters_2fcharacters_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_characters_2fcharacters_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_characters_2fcharacters_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::DeathStreamRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::DeathStreamRequest, death_types_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::DeathStreamResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::DeathStreamResponse, character_),
  PROTOBUF_FIELD_OFFSET(::mruv::DeathStreamResponse, death_type_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mruv::DeathStreamRequest)},
  { 6, -1, sizeof(::mruv::DeathStreamResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::_DeathStreamRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::_DeathStreamResponse_default_instance_),
};

const char descriptor_table_protodef_characters_2fcharacters_2eproto[] =
  "\n\033characters/characters.proto\022\004mruv\032\034goo"
  "gle/api/annotations.proto\032\023common/health"
  ".proto\032!characters/characters_model.prot"
  "o\":\n\022DeathStreamRequest\022$\n\013death_types\030\001"
  " \003(\0162\017.mruv.DeathType\"^\n\023DeathStreamResp"
  "onse\022\"\n\tcharacter\030\001 \001(\0132\017.mruv.Character"
  "\022#\n\ndeath_type\030\002 \001(\0162\017.mruv.DeathType2\217\005"
  "\n\025MruVCharactersService\022M\n\017CreateCharact"
  "er\022\017.mruv.Character\032\021.mruv.CharacterID\"\026"
  "\202\323\344\223\002\020\"\016/v1/characters\022O\n\014GetCharacter\022\021"
  ".mruv.CharacterID\032\017.mruv.Character\"\033\202\323\344\223"
  "\002\025\022\023/v1/characters/{id}\022T\n\017RemoveCharact"
  "er\022\021.mruv.CharacterID\032\021.mruv.CharacterID"
  "\"\033\202\323\344\223\002\025*\023/v1/characters/{id}\022i\n\026Permane"
  "ntCharacterKill\022\021.mruv.CharacterID\032\021.mru"
  "v.CharacterID\")\202\323\344\223\002#*!/v1/characters/pe"
  "rmanentKill/{id}\022G\n\014DeathsStream\022\030.mruv."
  "DeathStreamRequest\032\031.mruv.DeathStreamRes"
  "ponse\"\0000\001\022j\n\020GetServiceStatus\022\032.mruv.Ser"
  "viceStatusRequest\032\033.mruv.ServiceStatusRe"
  "sponse\"\035\202\323\344\223\002\027\022\025/v1/characters/status\022`\n"
  "\021GetServiceVersion\022\024.mruv.VersionRequest"
  "\032\025.mruv.VersionResponse\"\036\202\323\344\223\002\030\022\026/v1/cha"
  "racters/versionB*Z(github.com/MruV-RP/mr"
  "uv-pb-go/charactersb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_characters_2fcharacters_2eproto_deps[3] = {
  &::descriptor_table_characters_2fcharacters_5fmodel_2eproto,
  &::descriptor_table_common_2fhealth_2eproto,
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_characters_2fcharacters_2eproto_sccs[2] = {
  &scc_info_DeathStreamRequest_characters_2fcharacters_2eproto.base,
  &scc_info_DeathStreamResponse_characters_2fcharacters_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_characters_2fcharacters_2eproto_once;
static bool descriptor_table_characters_2fcharacters_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_characters_2fcharacters_2eproto = {
  &descriptor_table_characters_2fcharacters_2eproto_initialized, descriptor_table_protodef_characters_2fcharacters_2eproto, "characters/characters.proto", 987,
  &descriptor_table_characters_2fcharacters_2eproto_once, descriptor_table_characters_2fcharacters_2eproto_sccs, descriptor_table_characters_2fcharacters_2eproto_deps, 2, 3,
  schemas, file_default_instances, TableStruct_characters_2fcharacters_2eproto::offsets,
  file_level_metadata_characters_2fcharacters_2eproto, 2, file_level_enum_descriptors_characters_2fcharacters_2eproto, file_level_service_descriptors_characters_2fcharacters_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_characters_2fcharacters_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_characters_2fcharacters_2eproto), true);
namespace mruv {

// ===================================================================

void DeathStreamRequest::InitAsDefaultInstance() {
}
class DeathStreamRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeathStreamRequest::kDeathTypesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeathStreamRequest::DeathStreamRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.DeathStreamRequest)
}
DeathStreamRequest::DeathStreamRequest(const DeathStreamRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      death_types_(from.death_types_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.DeathStreamRequest)
}

void DeathStreamRequest::SharedCtor() {
}

DeathStreamRequest::~DeathStreamRequest() {
  // @@protoc_insertion_point(destructor:mruv.DeathStreamRequest)
  SharedDtor();
}

void DeathStreamRequest::SharedDtor() {
}

void DeathStreamRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeathStreamRequest& DeathStreamRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeathStreamRequest_characters_2fcharacters_2eproto.base);
  return *internal_default_instance();
}


void DeathStreamRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.DeathStreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  death_types_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeathStreamRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mruv.DeathType death_types = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_death_types(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          add_death_types(static_cast<::mruv::DeathType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeathStreamRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mruv.DeathStreamRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mruv.DeathType death_types = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          ::PROTOBUF_NAMESPACE_ID::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_death_types(static_cast< ::mruv::DeathType >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_death_types(static_cast< ::mruv::DeathType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mruv.DeathStreamRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mruv.DeathStreamRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeathStreamRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mruv.DeathStreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mruv.DeathType death_types = 1;
  if (this->death_types_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_death_types_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->death_types_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTag(
      this->death_types(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mruv.DeathStreamRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* DeathStreamRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.DeathStreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mruv.DeathType death_types = 1;
  if (this->death_types_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(      _death_types_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->death_types_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.DeathStreamRequest)
  return target;
}

size_t DeathStreamRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.DeathStreamRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mruv.DeathType death_types = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->death_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->death_types(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _death_types_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeathStreamRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.DeathStreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeathStreamRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeathStreamRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.DeathStreamRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.DeathStreamRequest)
    MergeFrom(*source);
  }
}

void DeathStreamRequest::MergeFrom(const DeathStreamRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.DeathStreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  death_types_.MergeFrom(from.death_types_);
}

void DeathStreamRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.DeathStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeathStreamRequest::CopyFrom(const DeathStreamRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.DeathStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeathStreamRequest::IsInitialized() const {
  return true;
}

void DeathStreamRequest::Swap(DeathStreamRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeathStreamRequest::InternalSwap(DeathStreamRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  death_types_.InternalSwap(&other->death_types_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeathStreamRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeathStreamResponse::InitAsDefaultInstance() {
  ::mruv::_DeathStreamResponse_default_instance_._instance.get_mutable()->character_ = const_cast< ::mruv::Character*>(
      ::mruv::Character::internal_default_instance());
}
class DeathStreamResponse::HasBitSetters {
 public:
  static const ::mruv::Character& character(const DeathStreamResponse* msg);
};

const ::mruv::Character&
DeathStreamResponse::HasBitSetters::character(const DeathStreamResponse* msg) {
  return *msg->character_;
}
void DeathStreamResponse::clear_character() {
  if (GetArenaNoVirtual() == nullptr && character_ != nullptr) {
    delete character_;
  }
  character_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeathStreamResponse::kCharacterFieldNumber;
const int DeathStreamResponse::kDeathTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeathStreamResponse::DeathStreamResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.DeathStreamResponse)
}
DeathStreamResponse::DeathStreamResponse(const DeathStreamResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_character()) {
    character_ = new ::mruv::Character(*from.character_);
  } else {
    character_ = nullptr;
  }
  death_type_ = from.death_type_;
  // @@protoc_insertion_point(copy_constructor:mruv.DeathStreamResponse)
}

void DeathStreamResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeathStreamResponse_characters_2fcharacters_2eproto.base);
  ::memset(&character_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&death_type_) -
      reinterpret_cast<char*>(&character_)) + sizeof(death_type_));
}

DeathStreamResponse::~DeathStreamResponse() {
  // @@protoc_insertion_point(destructor:mruv.DeathStreamResponse)
  SharedDtor();
}

void DeathStreamResponse::SharedDtor() {
  if (this != internal_default_instance()) delete character_;
}

void DeathStreamResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeathStreamResponse& DeathStreamResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeathStreamResponse_characters_2fcharacters_2eproto.base);
  return *internal_default_instance();
}


void DeathStreamResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.DeathStreamResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && character_ != nullptr) {
    delete character_;
  }
  character_ = nullptr;
  death_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeathStreamResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mruv.Character character = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_character(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mruv.DeathType death_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_death_type(static_cast<::mruv::DeathType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeathStreamResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mruv.DeathStreamResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mruv.Character character = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_character()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mruv.DeathType death_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_death_type(static_cast< ::mruv::DeathType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mruv.DeathStreamResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mruv.DeathStreamResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeathStreamResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mruv.DeathStreamResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mruv.Character character = 1;
  if (this->has_character()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::character(this), output);
  }

  // .mruv.DeathType death_type = 2;
  if (this->death_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->death_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mruv.DeathStreamResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* DeathStreamResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.DeathStreamResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mruv.Character character = 1;
  if (this->has_character()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::character(this), target);
  }

  // .mruv.DeathType death_type = 2;
  if (this->death_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->death_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.DeathStreamResponse)
  return target;
}

size_t DeathStreamResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.DeathStreamResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mruv.Character character = 1;
  if (this->has_character()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *character_);
  }

  // .mruv.DeathType death_type = 2;
  if (this->death_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->death_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeathStreamResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.DeathStreamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeathStreamResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeathStreamResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.DeathStreamResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.DeathStreamResponse)
    MergeFrom(*source);
  }
}

void DeathStreamResponse::MergeFrom(const DeathStreamResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.DeathStreamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_character()) {
    mutable_character()->::mruv::Character::MergeFrom(from.character());
  }
  if (from.death_type() != 0) {
    set_death_type(from.death_type());
  }
}

void DeathStreamResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.DeathStreamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeathStreamResponse::CopyFrom(const DeathStreamResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.DeathStreamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeathStreamResponse::IsInitialized() const {
  return true;
}

void DeathStreamResponse::Swap(DeathStreamResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeathStreamResponse::InternalSwap(DeathStreamResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(character_, other->character_);
  swap(death_type_, other->death_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeathStreamResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mruv
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mruv::DeathStreamRequest* Arena::CreateMaybeMessage< ::mruv::DeathStreamRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::DeathStreamRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::DeathStreamResponse* Arena::CreateMaybeMessage< ::mruv::DeathStreamResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::DeathStreamResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
