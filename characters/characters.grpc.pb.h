// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: characters/characters.proto
#ifndef GRPC_characters_2fcharacters_2eproto__INCLUDED
#define GRPC_characters_2fcharacters_2eproto__INCLUDED

#include "characters/characters.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace mruv {
namespace characters {

class MruVCharactersService final {
 public:
  static constexpr char const* service_full_name() {
    return "mruv.characters.MruVCharactersService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Create a character.
    virtual ::grpc::Status CreateCharacter(::grpc::ClientContext* context, const ::mruv::characters::CreateCharacterRequest& request, ::mruv::characters::CreateCharacterResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::characters::CreateCharacterResponse>> AsyncCreateCharacter(::grpc::ClientContext* context, const ::mruv::characters::CreateCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::characters::CreateCharacterResponse>>(AsyncCreateCharacterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::characters::CreateCharacterResponse>> PrepareAsyncCreateCharacter(::grpc::ClientContext* context, const ::mruv::characters::CreateCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::characters::CreateCharacterResponse>>(PrepareAsyncCreateCharacterRaw(context, request, cq));
    }
    // Get a character.
    virtual ::grpc::Status GetCharacter(::grpc::ClientContext* context, const ::mruv::characters::GetCharacterRequest& request, ::mruv::characters::GetCharacterResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::characters::GetCharacterResponse>> AsyncGetCharacter(::grpc::ClientContext* context, const ::mruv::characters::GetCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::characters::GetCharacterResponse>>(AsyncGetCharacterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::characters::GetCharacterResponse>> PrepareAsyncGetCharacter(::grpc::ClientContext* context, const ::mruv::characters::GetCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::characters::GetCharacterResponse>>(PrepareAsyncGetCharacterRaw(context, request, cq));
    }
    // Update a character.
    virtual ::grpc::Status UpdateCharacter(::grpc::ClientContext* context, const ::mruv::characters::UpdateCharacterRequest& request, ::mruv::characters::UpdateCharacterResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::characters::UpdateCharacterResponse>> AsyncUpdateCharacter(::grpc::ClientContext* context, const ::mruv::characters::UpdateCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::characters::UpdateCharacterResponse>>(AsyncUpdateCharacterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::characters::UpdateCharacterResponse>> PrepareAsyncUpdateCharacter(::grpc::ClientContext* context, const ::mruv::characters::UpdateCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::characters::UpdateCharacterResponse>>(PrepareAsyncUpdateCharacterRaw(context, request, cq));
    }
    // Delete a character.
    virtual ::grpc::Status DeleteCharacter(::grpc::ClientContext* context, const ::mruv::characters::DeleteCharacterRequest& request, ::mruv::characters::DeleteCharacterResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::characters::DeleteCharacterResponse>> AsyncDeleteCharacter(::grpc::ClientContext* context, const ::mruv::characters::DeleteCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::characters::DeleteCharacterResponse>>(AsyncDeleteCharacterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::characters::DeleteCharacterResponse>> PrepareAsyncDeleteCharacter(::grpc::ClientContext* context, const ::mruv::characters::DeleteCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::characters::DeleteCharacterResponse>>(PrepareAsyncDeleteCharacterRaw(context, request, cq));
    }
    // Kill a character. A character that is killed cannot be played anymore.
    virtual ::grpc::Status PermanentCharacterKill(::grpc::ClientContext* context, const ::mruv::characters::CharacterID& request, ::mruv::characters::CharacterID* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::characters::CharacterID>> AsyncPermanentCharacterKill(::grpc::ClientContext* context, const ::mruv::characters::CharacterID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::characters::CharacterID>>(AsyncPermanentCharacterKillRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::characters::CharacterID>> PrepareAsyncPermanentCharacterKill(::grpc::ClientContext* context, const ::mruv::characters::CharacterID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::characters::CharacterID>>(PrepareAsyncPermanentCharacterKillRaw(context, request, cq));
    }
    // Change player clothes.
    virtual ::grpc::Status ChangeClothes(::grpc::ClientContext* context, const ::mruv::characters::ChangeClothesRequest& request, ::mruv::characters::ChangeClothesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::characters::ChangeClothesResponse>> AsyncChangeClothes(::grpc::ClientContext* context, const ::mruv::characters::ChangeClothesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::characters::ChangeClothesResponse>>(AsyncChangeClothesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::characters::ChangeClothesResponse>> PrepareAsyncChangeClothes(::grpc::ClientContext* context, const ::mruv::characters::ChangeClothesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::characters::ChangeClothesResponse>>(PrepareAsyncChangeClothesRaw(context, request, cq));
    }
    // Stream of deaths.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mruv::characters::DeathStreamResponse>> DeathsStream(::grpc::ClientContext* context, const ::mruv::characters::DeathStreamRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mruv::characters::DeathStreamResponse>>(DeathsStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mruv::characters::DeathStreamResponse>> AsyncDeathsStream(::grpc::ClientContext* context, const ::mruv::characters::DeathStreamRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mruv::characters::DeathStreamResponse>>(AsyncDeathsStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mruv::characters::DeathStreamResponse>> PrepareAsyncDeathsStream(::grpc::ClientContext* context, const ::mruv::characters::DeathStreamRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mruv::characters::DeathStreamResponse>>(PrepareAsyncDeathsStreamRaw(context, request, cq));
    }
    // Service status
    virtual ::grpc::Status GetServiceStatus(::grpc::ClientContext* context, const ::mruv::ServiceStatusRequest& request, ::mruv::ServiceStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::ServiceStatusResponse>> AsyncGetServiceStatus(::grpc::ClientContext* context, const ::mruv::ServiceStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::ServiceStatusResponse>>(AsyncGetServiceStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::ServiceStatusResponse>> PrepareAsyncGetServiceStatus(::grpc::ClientContext* context, const ::mruv::ServiceStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::ServiceStatusResponse>>(PrepareAsyncGetServiceStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status GetServiceVersion(::grpc::ClientContext* context, const ::mruv::VersionRequest& request, ::mruv::VersionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::VersionResponse>> AsyncGetServiceVersion(::grpc::ClientContext* context, const ::mruv::VersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::VersionResponse>>(AsyncGetServiceVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::VersionResponse>> PrepareAsyncGetServiceVersion(::grpc::ClientContext* context, const ::mruv::VersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::VersionResponse>>(PrepareAsyncGetServiceVersionRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Create a character.
      virtual void CreateCharacter(::grpc::ClientContext* context, const ::mruv::characters::CreateCharacterRequest* request, ::mruv::characters::CreateCharacterResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateCharacter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::characters::CreateCharacterResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateCharacter(::grpc::ClientContext* context, const ::mruv::characters::CreateCharacterRequest* request, ::mruv::characters::CreateCharacterResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateCharacter(::grpc::ClientContext* context, const ::mruv::characters::CreateCharacterRequest* request, ::mruv::characters::CreateCharacterResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateCharacter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::characters::CreateCharacterResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateCharacter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::characters::CreateCharacterResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get a character.
      virtual void GetCharacter(::grpc::ClientContext* context, const ::mruv::characters::GetCharacterRequest* request, ::mruv::characters::GetCharacterResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCharacter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::characters::GetCharacterResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetCharacter(::grpc::ClientContext* context, const ::mruv::characters::GetCharacterRequest* request, ::mruv::characters::GetCharacterResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetCharacter(::grpc::ClientContext* context, const ::mruv::characters::GetCharacterRequest* request, ::mruv::characters::GetCharacterResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetCharacter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::characters::GetCharacterResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetCharacter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::characters::GetCharacterResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Update a character.
      virtual void UpdateCharacter(::grpc::ClientContext* context, const ::mruv::characters::UpdateCharacterRequest* request, ::mruv::characters::UpdateCharacterResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateCharacter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::characters::UpdateCharacterResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateCharacter(::grpc::ClientContext* context, const ::mruv::characters::UpdateCharacterRequest* request, ::mruv::characters::UpdateCharacterResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateCharacter(::grpc::ClientContext* context, const ::mruv::characters::UpdateCharacterRequest* request, ::mruv::characters::UpdateCharacterResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateCharacter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::characters::UpdateCharacterResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateCharacter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::characters::UpdateCharacterResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Delete a character.
      virtual void DeleteCharacter(::grpc::ClientContext* context, const ::mruv::characters::DeleteCharacterRequest* request, ::mruv::characters::DeleteCharacterResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteCharacter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::characters::DeleteCharacterResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteCharacter(::grpc::ClientContext* context, const ::mruv::characters::DeleteCharacterRequest* request, ::mruv::characters::DeleteCharacterResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteCharacter(::grpc::ClientContext* context, const ::mruv::characters::DeleteCharacterRequest* request, ::mruv::characters::DeleteCharacterResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteCharacter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::characters::DeleteCharacterResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteCharacter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::characters::DeleteCharacterResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Kill a character. A character that is killed cannot be played anymore.
      virtual void PermanentCharacterKill(::grpc::ClientContext* context, const ::mruv::characters::CharacterID* request, ::mruv::characters::CharacterID* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PermanentCharacterKill(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::characters::CharacterID* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PermanentCharacterKill(::grpc::ClientContext* context, const ::mruv::characters::CharacterID* request, ::mruv::characters::CharacterID* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PermanentCharacterKill(::grpc::ClientContext* context, const ::mruv::characters::CharacterID* request, ::mruv::characters::CharacterID* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PermanentCharacterKill(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::characters::CharacterID* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PermanentCharacterKill(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::characters::CharacterID* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Change player clothes.
      virtual void ChangeClothes(::grpc::ClientContext* context, const ::mruv::characters::ChangeClothesRequest* request, ::mruv::characters::ChangeClothesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ChangeClothes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::characters::ChangeClothesResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ChangeClothes(::grpc::ClientContext* context, const ::mruv::characters::ChangeClothesRequest* request, ::mruv::characters::ChangeClothesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ChangeClothes(::grpc::ClientContext* context, const ::mruv::characters::ChangeClothesRequest* request, ::mruv::characters::ChangeClothesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ChangeClothes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::characters::ChangeClothesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ChangeClothes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::characters::ChangeClothesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Stream of deaths.
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeathsStream(::grpc::ClientContext* context, ::mruv::characters::DeathStreamRequest* request, ::grpc::ClientReadReactor< ::mruv::characters::DeathStreamResponse>* reactor) = 0;
      #else
      virtual void DeathsStream(::grpc::ClientContext* context, ::mruv::characters::DeathStreamRequest* request, ::grpc::experimental::ClientReadReactor< ::mruv::characters::DeathStreamResponse>* reactor) = 0;
      #endif
      // Service status
      virtual void GetServiceStatus(::grpc::ClientContext* context, const ::mruv::ServiceStatusRequest* request, ::mruv::ServiceStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetServiceStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::ServiceStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetServiceStatus(::grpc::ClientContext* context, const ::mruv::ServiceStatusRequest* request, ::mruv::ServiceStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetServiceStatus(::grpc::ClientContext* context, const ::mruv::ServiceStatusRequest* request, ::mruv::ServiceStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetServiceStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::ServiceStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetServiceStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::ServiceStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetServiceVersion(::grpc::ClientContext* context, const ::mruv::VersionRequest* request, ::mruv::VersionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetServiceVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::VersionResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetServiceVersion(::grpc::ClientContext* context, const ::mruv::VersionRequest* request, ::mruv::VersionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetServiceVersion(::grpc::ClientContext* context, const ::mruv::VersionRequest* request, ::mruv::VersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetServiceVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::VersionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetServiceVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::VersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::characters::CreateCharacterResponse>* AsyncCreateCharacterRaw(::grpc::ClientContext* context, const ::mruv::characters::CreateCharacterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::characters::CreateCharacterResponse>* PrepareAsyncCreateCharacterRaw(::grpc::ClientContext* context, const ::mruv::characters::CreateCharacterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::characters::GetCharacterResponse>* AsyncGetCharacterRaw(::grpc::ClientContext* context, const ::mruv::characters::GetCharacterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::characters::GetCharacterResponse>* PrepareAsyncGetCharacterRaw(::grpc::ClientContext* context, const ::mruv::characters::GetCharacterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::characters::UpdateCharacterResponse>* AsyncUpdateCharacterRaw(::grpc::ClientContext* context, const ::mruv::characters::UpdateCharacterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::characters::UpdateCharacterResponse>* PrepareAsyncUpdateCharacterRaw(::grpc::ClientContext* context, const ::mruv::characters::UpdateCharacterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::characters::DeleteCharacterResponse>* AsyncDeleteCharacterRaw(::grpc::ClientContext* context, const ::mruv::characters::DeleteCharacterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::characters::DeleteCharacterResponse>* PrepareAsyncDeleteCharacterRaw(::grpc::ClientContext* context, const ::mruv::characters::DeleteCharacterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::characters::CharacterID>* AsyncPermanentCharacterKillRaw(::grpc::ClientContext* context, const ::mruv::characters::CharacterID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::characters::CharacterID>* PrepareAsyncPermanentCharacterKillRaw(::grpc::ClientContext* context, const ::mruv::characters::CharacterID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::characters::ChangeClothesResponse>* AsyncChangeClothesRaw(::grpc::ClientContext* context, const ::mruv::characters::ChangeClothesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::characters::ChangeClothesResponse>* PrepareAsyncChangeClothesRaw(::grpc::ClientContext* context, const ::mruv::characters::ChangeClothesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::mruv::characters::DeathStreamResponse>* DeathsStreamRaw(::grpc::ClientContext* context, const ::mruv::characters::DeathStreamRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mruv::characters::DeathStreamResponse>* AsyncDeathsStreamRaw(::grpc::ClientContext* context, const ::mruv::characters::DeathStreamRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mruv::characters::DeathStreamResponse>* PrepareAsyncDeathsStreamRaw(::grpc::ClientContext* context, const ::mruv::characters::DeathStreamRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::ServiceStatusResponse>* AsyncGetServiceStatusRaw(::grpc::ClientContext* context, const ::mruv::ServiceStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::ServiceStatusResponse>* PrepareAsyncGetServiceStatusRaw(::grpc::ClientContext* context, const ::mruv::ServiceStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::VersionResponse>* AsyncGetServiceVersionRaw(::grpc::ClientContext* context, const ::mruv::VersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::VersionResponse>* PrepareAsyncGetServiceVersionRaw(::grpc::ClientContext* context, const ::mruv::VersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateCharacter(::grpc::ClientContext* context, const ::mruv::characters::CreateCharacterRequest& request, ::mruv::characters::CreateCharacterResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::characters::CreateCharacterResponse>> AsyncCreateCharacter(::grpc::ClientContext* context, const ::mruv::characters::CreateCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::characters::CreateCharacterResponse>>(AsyncCreateCharacterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::characters::CreateCharacterResponse>> PrepareAsyncCreateCharacter(::grpc::ClientContext* context, const ::mruv::characters::CreateCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::characters::CreateCharacterResponse>>(PrepareAsyncCreateCharacterRaw(context, request, cq));
    }
    ::grpc::Status GetCharacter(::grpc::ClientContext* context, const ::mruv::characters::GetCharacterRequest& request, ::mruv::characters::GetCharacterResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::characters::GetCharacterResponse>> AsyncGetCharacter(::grpc::ClientContext* context, const ::mruv::characters::GetCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::characters::GetCharacterResponse>>(AsyncGetCharacterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::characters::GetCharacterResponse>> PrepareAsyncGetCharacter(::grpc::ClientContext* context, const ::mruv::characters::GetCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::characters::GetCharacterResponse>>(PrepareAsyncGetCharacterRaw(context, request, cq));
    }
    ::grpc::Status UpdateCharacter(::grpc::ClientContext* context, const ::mruv::characters::UpdateCharacterRequest& request, ::mruv::characters::UpdateCharacterResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::characters::UpdateCharacterResponse>> AsyncUpdateCharacter(::grpc::ClientContext* context, const ::mruv::characters::UpdateCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::characters::UpdateCharacterResponse>>(AsyncUpdateCharacterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::characters::UpdateCharacterResponse>> PrepareAsyncUpdateCharacter(::grpc::ClientContext* context, const ::mruv::characters::UpdateCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::characters::UpdateCharacterResponse>>(PrepareAsyncUpdateCharacterRaw(context, request, cq));
    }
    ::grpc::Status DeleteCharacter(::grpc::ClientContext* context, const ::mruv::characters::DeleteCharacterRequest& request, ::mruv::characters::DeleteCharacterResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::characters::DeleteCharacterResponse>> AsyncDeleteCharacter(::grpc::ClientContext* context, const ::mruv::characters::DeleteCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::characters::DeleteCharacterResponse>>(AsyncDeleteCharacterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::characters::DeleteCharacterResponse>> PrepareAsyncDeleteCharacter(::grpc::ClientContext* context, const ::mruv::characters::DeleteCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::characters::DeleteCharacterResponse>>(PrepareAsyncDeleteCharacterRaw(context, request, cq));
    }
    ::grpc::Status PermanentCharacterKill(::grpc::ClientContext* context, const ::mruv::characters::CharacterID& request, ::mruv::characters::CharacterID* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::characters::CharacterID>> AsyncPermanentCharacterKill(::grpc::ClientContext* context, const ::mruv::characters::CharacterID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::characters::CharacterID>>(AsyncPermanentCharacterKillRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::characters::CharacterID>> PrepareAsyncPermanentCharacterKill(::grpc::ClientContext* context, const ::mruv::characters::CharacterID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::characters::CharacterID>>(PrepareAsyncPermanentCharacterKillRaw(context, request, cq));
    }
    ::grpc::Status ChangeClothes(::grpc::ClientContext* context, const ::mruv::characters::ChangeClothesRequest& request, ::mruv::characters::ChangeClothesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::characters::ChangeClothesResponse>> AsyncChangeClothes(::grpc::ClientContext* context, const ::mruv::characters::ChangeClothesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::characters::ChangeClothesResponse>>(AsyncChangeClothesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::characters::ChangeClothesResponse>> PrepareAsyncChangeClothes(::grpc::ClientContext* context, const ::mruv::characters::ChangeClothesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::characters::ChangeClothesResponse>>(PrepareAsyncChangeClothesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::mruv::characters::DeathStreamResponse>> DeathsStream(::grpc::ClientContext* context, const ::mruv::characters::DeathStreamRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mruv::characters::DeathStreamResponse>>(DeathsStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mruv::characters::DeathStreamResponse>> AsyncDeathsStream(::grpc::ClientContext* context, const ::mruv::characters::DeathStreamRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mruv::characters::DeathStreamResponse>>(AsyncDeathsStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mruv::characters::DeathStreamResponse>> PrepareAsyncDeathsStream(::grpc::ClientContext* context, const ::mruv::characters::DeathStreamRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mruv::characters::DeathStreamResponse>>(PrepareAsyncDeathsStreamRaw(context, request, cq));
    }
    ::grpc::Status GetServiceStatus(::grpc::ClientContext* context, const ::mruv::ServiceStatusRequest& request, ::mruv::ServiceStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::ServiceStatusResponse>> AsyncGetServiceStatus(::grpc::ClientContext* context, const ::mruv::ServiceStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::ServiceStatusResponse>>(AsyncGetServiceStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::ServiceStatusResponse>> PrepareAsyncGetServiceStatus(::grpc::ClientContext* context, const ::mruv::ServiceStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::ServiceStatusResponse>>(PrepareAsyncGetServiceStatusRaw(context, request, cq));
    }
    ::grpc::Status GetServiceVersion(::grpc::ClientContext* context, const ::mruv::VersionRequest& request, ::mruv::VersionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::VersionResponse>> AsyncGetServiceVersion(::grpc::ClientContext* context, const ::mruv::VersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::VersionResponse>>(AsyncGetServiceVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::VersionResponse>> PrepareAsyncGetServiceVersion(::grpc::ClientContext* context, const ::mruv::VersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::VersionResponse>>(PrepareAsyncGetServiceVersionRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateCharacter(::grpc::ClientContext* context, const ::mruv::characters::CreateCharacterRequest* request, ::mruv::characters::CreateCharacterResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateCharacter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::characters::CreateCharacterResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateCharacter(::grpc::ClientContext* context, const ::mruv::characters::CreateCharacterRequest* request, ::mruv::characters::CreateCharacterResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateCharacter(::grpc::ClientContext* context, const ::mruv::characters::CreateCharacterRequest* request, ::mruv::characters::CreateCharacterResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateCharacter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::characters::CreateCharacterResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateCharacter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::characters::CreateCharacterResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetCharacter(::grpc::ClientContext* context, const ::mruv::characters::GetCharacterRequest* request, ::mruv::characters::GetCharacterResponse* response, std::function<void(::grpc::Status)>) override;
      void GetCharacter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::characters::GetCharacterResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetCharacter(::grpc::ClientContext* context, const ::mruv::characters::GetCharacterRequest* request, ::mruv::characters::GetCharacterResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetCharacter(::grpc::ClientContext* context, const ::mruv::characters::GetCharacterRequest* request, ::mruv::characters::GetCharacterResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetCharacter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::characters::GetCharacterResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetCharacter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::characters::GetCharacterResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateCharacter(::grpc::ClientContext* context, const ::mruv::characters::UpdateCharacterRequest* request, ::mruv::characters::UpdateCharacterResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateCharacter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::characters::UpdateCharacterResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateCharacter(::grpc::ClientContext* context, const ::mruv::characters::UpdateCharacterRequest* request, ::mruv::characters::UpdateCharacterResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateCharacter(::grpc::ClientContext* context, const ::mruv::characters::UpdateCharacterRequest* request, ::mruv::characters::UpdateCharacterResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateCharacter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::characters::UpdateCharacterResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateCharacter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::characters::UpdateCharacterResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteCharacter(::grpc::ClientContext* context, const ::mruv::characters::DeleteCharacterRequest* request, ::mruv::characters::DeleteCharacterResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteCharacter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::characters::DeleteCharacterResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteCharacter(::grpc::ClientContext* context, const ::mruv::characters::DeleteCharacterRequest* request, ::mruv::characters::DeleteCharacterResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteCharacter(::grpc::ClientContext* context, const ::mruv::characters::DeleteCharacterRequest* request, ::mruv::characters::DeleteCharacterResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteCharacter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::characters::DeleteCharacterResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteCharacter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::characters::DeleteCharacterResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void PermanentCharacterKill(::grpc::ClientContext* context, const ::mruv::characters::CharacterID* request, ::mruv::characters::CharacterID* response, std::function<void(::grpc::Status)>) override;
      void PermanentCharacterKill(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::characters::CharacterID* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PermanentCharacterKill(::grpc::ClientContext* context, const ::mruv::characters::CharacterID* request, ::mruv::characters::CharacterID* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PermanentCharacterKill(::grpc::ClientContext* context, const ::mruv::characters::CharacterID* request, ::mruv::characters::CharacterID* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PermanentCharacterKill(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::characters::CharacterID* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PermanentCharacterKill(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::characters::CharacterID* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ChangeClothes(::grpc::ClientContext* context, const ::mruv::characters::ChangeClothesRequest* request, ::mruv::characters::ChangeClothesResponse* response, std::function<void(::grpc::Status)>) override;
      void ChangeClothes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::characters::ChangeClothesResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ChangeClothes(::grpc::ClientContext* context, const ::mruv::characters::ChangeClothesRequest* request, ::mruv::characters::ChangeClothesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ChangeClothes(::grpc::ClientContext* context, const ::mruv::characters::ChangeClothesRequest* request, ::mruv::characters::ChangeClothesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ChangeClothes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::characters::ChangeClothesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ChangeClothes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::characters::ChangeClothesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeathsStream(::grpc::ClientContext* context, ::mruv::characters::DeathStreamRequest* request, ::grpc::ClientReadReactor< ::mruv::characters::DeathStreamResponse>* reactor) override;
      #else
      void DeathsStream(::grpc::ClientContext* context, ::mruv::characters::DeathStreamRequest* request, ::grpc::experimental::ClientReadReactor< ::mruv::characters::DeathStreamResponse>* reactor) override;
      #endif
      void GetServiceStatus(::grpc::ClientContext* context, const ::mruv::ServiceStatusRequest* request, ::mruv::ServiceStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void GetServiceStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::ServiceStatusResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetServiceStatus(::grpc::ClientContext* context, const ::mruv::ServiceStatusRequest* request, ::mruv::ServiceStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetServiceStatus(::grpc::ClientContext* context, const ::mruv::ServiceStatusRequest* request, ::mruv::ServiceStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetServiceStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::ServiceStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetServiceStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::ServiceStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetServiceVersion(::grpc::ClientContext* context, const ::mruv::VersionRequest* request, ::mruv::VersionResponse* response, std::function<void(::grpc::Status)>) override;
      void GetServiceVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::VersionResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetServiceVersion(::grpc::ClientContext* context, const ::mruv::VersionRequest* request, ::mruv::VersionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetServiceVersion(::grpc::ClientContext* context, const ::mruv::VersionRequest* request, ::mruv::VersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetServiceVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::VersionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetServiceVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::VersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mruv::characters::CreateCharacterResponse>* AsyncCreateCharacterRaw(::grpc::ClientContext* context, const ::mruv::characters::CreateCharacterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::characters::CreateCharacterResponse>* PrepareAsyncCreateCharacterRaw(::grpc::ClientContext* context, const ::mruv::characters::CreateCharacterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::characters::GetCharacterResponse>* AsyncGetCharacterRaw(::grpc::ClientContext* context, const ::mruv::characters::GetCharacterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::characters::GetCharacterResponse>* PrepareAsyncGetCharacterRaw(::grpc::ClientContext* context, const ::mruv::characters::GetCharacterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::characters::UpdateCharacterResponse>* AsyncUpdateCharacterRaw(::grpc::ClientContext* context, const ::mruv::characters::UpdateCharacterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::characters::UpdateCharacterResponse>* PrepareAsyncUpdateCharacterRaw(::grpc::ClientContext* context, const ::mruv::characters::UpdateCharacterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::characters::DeleteCharacterResponse>* AsyncDeleteCharacterRaw(::grpc::ClientContext* context, const ::mruv::characters::DeleteCharacterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::characters::DeleteCharacterResponse>* PrepareAsyncDeleteCharacterRaw(::grpc::ClientContext* context, const ::mruv::characters::DeleteCharacterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::characters::CharacterID>* AsyncPermanentCharacterKillRaw(::grpc::ClientContext* context, const ::mruv::characters::CharacterID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::characters::CharacterID>* PrepareAsyncPermanentCharacterKillRaw(::grpc::ClientContext* context, const ::mruv::characters::CharacterID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::characters::ChangeClothesResponse>* AsyncChangeClothesRaw(::grpc::ClientContext* context, const ::mruv::characters::ChangeClothesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::characters::ChangeClothesResponse>* PrepareAsyncChangeClothesRaw(::grpc::ClientContext* context, const ::mruv::characters::ChangeClothesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::mruv::characters::DeathStreamResponse>* DeathsStreamRaw(::grpc::ClientContext* context, const ::mruv::characters::DeathStreamRequest& request) override;
    ::grpc::ClientAsyncReader< ::mruv::characters::DeathStreamResponse>* AsyncDeathsStreamRaw(::grpc::ClientContext* context, const ::mruv::characters::DeathStreamRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mruv::characters::DeathStreamResponse>* PrepareAsyncDeathsStreamRaw(::grpc::ClientContext* context, const ::mruv::characters::DeathStreamRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::ServiceStatusResponse>* AsyncGetServiceStatusRaw(::grpc::ClientContext* context, const ::mruv::ServiceStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::ServiceStatusResponse>* PrepareAsyncGetServiceStatusRaw(::grpc::ClientContext* context, const ::mruv::ServiceStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::VersionResponse>* AsyncGetServiceVersionRaw(::grpc::ClientContext* context, const ::mruv::VersionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::VersionResponse>* PrepareAsyncGetServiceVersionRaw(::grpc::ClientContext* context, const ::mruv::VersionRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateCharacter_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCharacter_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateCharacter_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteCharacter_;
    const ::grpc::internal::RpcMethod rpcmethod_PermanentCharacterKill_;
    const ::grpc::internal::RpcMethod rpcmethod_ChangeClothes_;
    const ::grpc::internal::RpcMethod rpcmethod_DeathsStream_;
    const ::grpc::internal::RpcMethod rpcmethod_GetServiceStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_GetServiceVersion_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Create a character.
    virtual ::grpc::Status CreateCharacter(::grpc::ServerContext* context, const ::mruv::characters::CreateCharacterRequest* request, ::mruv::characters::CreateCharacterResponse* response);
    // Get a character.
    virtual ::grpc::Status GetCharacter(::grpc::ServerContext* context, const ::mruv::characters::GetCharacterRequest* request, ::mruv::characters::GetCharacterResponse* response);
    // Update a character.
    virtual ::grpc::Status UpdateCharacter(::grpc::ServerContext* context, const ::mruv::characters::UpdateCharacterRequest* request, ::mruv::characters::UpdateCharacterResponse* response);
    // Delete a character.
    virtual ::grpc::Status DeleteCharacter(::grpc::ServerContext* context, const ::mruv::characters::DeleteCharacterRequest* request, ::mruv::characters::DeleteCharacterResponse* response);
    // Kill a character. A character that is killed cannot be played anymore.
    virtual ::grpc::Status PermanentCharacterKill(::grpc::ServerContext* context, const ::mruv::characters::CharacterID* request, ::mruv::characters::CharacterID* response);
    // Change player clothes.
    virtual ::grpc::Status ChangeClothes(::grpc::ServerContext* context, const ::mruv::characters::ChangeClothesRequest* request, ::mruv::characters::ChangeClothesResponse* response);
    // Stream of deaths.
    virtual ::grpc::Status DeathsStream(::grpc::ServerContext* context, const ::mruv::characters::DeathStreamRequest* request, ::grpc::ServerWriter< ::mruv::characters::DeathStreamResponse>* writer);
    // Service status
    virtual ::grpc::Status GetServiceStatus(::grpc::ServerContext* context, const ::mruv::ServiceStatusRequest* request, ::mruv::ServiceStatusResponse* response);
    virtual ::grpc::Status GetServiceVersion(::grpc::ServerContext* context, const ::mruv::VersionRequest* request, ::mruv::VersionResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateCharacter() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCharacter(::grpc::ServerContext* /*context*/, const ::mruv::characters::CreateCharacterRequest* /*request*/, ::mruv::characters::CreateCharacterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCharacter(::grpc::ServerContext* context, ::mruv::characters::CreateCharacterRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::characters::CreateCharacterResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCharacter() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCharacter(::grpc::ServerContext* /*context*/, const ::mruv::characters::GetCharacterRequest* /*request*/, ::mruv::characters::GetCharacterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCharacter(::grpc::ServerContext* context, ::mruv::characters::GetCharacterRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::characters::GetCharacterResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateCharacter() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCharacter(::grpc::ServerContext* /*context*/, const ::mruv::characters::UpdateCharacterRequest* /*request*/, ::mruv::characters::UpdateCharacterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateCharacter(::grpc::ServerContext* context, ::mruv::characters::UpdateCharacterRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::characters::UpdateCharacterResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteCharacter() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCharacter(::grpc::ServerContext* /*context*/, const ::mruv::characters::DeleteCharacterRequest* /*request*/, ::mruv::characters::DeleteCharacterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteCharacter(::grpc::ServerContext* context, ::mruv::characters::DeleteCharacterRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::characters::DeleteCharacterResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PermanentCharacterKill : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PermanentCharacterKill() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_PermanentCharacterKill() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PermanentCharacterKill(::grpc::ServerContext* /*context*/, const ::mruv::characters::CharacterID* /*request*/, ::mruv::characters::CharacterID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPermanentCharacterKill(::grpc::ServerContext* context, ::mruv::characters::CharacterID* request, ::grpc::ServerAsyncResponseWriter< ::mruv::characters::CharacterID>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ChangeClothes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ChangeClothes() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ChangeClothes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeClothes(::grpc::ServerContext* /*context*/, const ::mruv::characters::ChangeClothesRequest* /*request*/, ::mruv::characters::ChangeClothesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChangeClothes(::grpc::ServerContext* context, ::mruv::characters::ChangeClothesRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::characters::ChangeClothesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeathsStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeathsStream() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_DeathsStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeathsStream(::grpc::ServerContext* /*context*/, const ::mruv::characters::DeathStreamRequest* /*request*/, ::grpc::ServerWriter< ::mruv::characters::DeathStreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeathsStream(::grpc::ServerContext* context, ::mruv::characters::DeathStreamRequest* request, ::grpc::ServerAsyncWriter< ::mruv::characters::DeathStreamResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetServiceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetServiceStatus() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetServiceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceStatus(::grpc::ServerContext* /*context*/, const ::mruv::ServiceStatusRequest* /*request*/, ::mruv::ServiceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServiceStatus(::grpc::ServerContext* context, ::mruv::ServiceStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::ServiceStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetServiceVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetServiceVersion() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_GetServiceVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceVersion(::grpc::ServerContext* /*context*/, const ::mruv::VersionRequest* /*request*/, ::mruv::VersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServiceVersion(::grpc::ServerContext* context, ::mruv::VersionRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::VersionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateCharacter<WithAsyncMethod_GetCharacter<WithAsyncMethod_UpdateCharacter<WithAsyncMethod_DeleteCharacter<WithAsyncMethod_PermanentCharacterKill<WithAsyncMethod_ChangeClothes<WithAsyncMethod_DeathsStream<WithAsyncMethod_GetServiceStatus<WithAsyncMethod_GetServiceVersion<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateCharacter() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::characters::CreateCharacterRequest, ::mruv::characters::CreateCharacterResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::characters::CreateCharacterRequest* request, ::mruv::characters::CreateCharacterResponse* response) { return this->CreateCharacter(context, request, response); }));}
    void SetMessageAllocatorFor_CreateCharacter(
        ::grpc::experimental::MessageAllocator< ::mruv::characters::CreateCharacterRequest, ::mruv::characters::CreateCharacterResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::characters::CreateCharacterRequest, ::mruv::characters::CreateCharacterResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCharacter(::grpc::ServerContext* /*context*/, const ::mruv::characters::CreateCharacterRequest* /*request*/, ::mruv::characters::CreateCharacterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateCharacter(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::characters::CreateCharacterRequest* /*request*/, ::mruv::characters::CreateCharacterResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateCharacter(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::characters::CreateCharacterRequest* /*request*/, ::mruv::characters::CreateCharacterResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetCharacter() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::characters::GetCharacterRequest, ::mruv::characters::GetCharacterResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::characters::GetCharacterRequest* request, ::mruv::characters::GetCharacterResponse* response) { return this->GetCharacter(context, request, response); }));}
    void SetMessageAllocatorFor_GetCharacter(
        ::grpc::experimental::MessageAllocator< ::mruv::characters::GetCharacterRequest, ::mruv::characters::GetCharacterResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::characters::GetCharacterRequest, ::mruv::characters::GetCharacterResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCharacter(::grpc::ServerContext* /*context*/, const ::mruv::characters::GetCharacterRequest* /*request*/, ::mruv::characters::GetCharacterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetCharacter(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::characters::GetCharacterRequest* /*request*/, ::mruv::characters::GetCharacterResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetCharacter(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::characters::GetCharacterRequest* /*request*/, ::mruv::characters::GetCharacterResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateCharacter() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::characters::UpdateCharacterRequest, ::mruv::characters::UpdateCharacterResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::characters::UpdateCharacterRequest* request, ::mruv::characters::UpdateCharacterResponse* response) { return this->UpdateCharacter(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateCharacter(
        ::grpc::experimental::MessageAllocator< ::mruv::characters::UpdateCharacterRequest, ::mruv::characters::UpdateCharacterResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::characters::UpdateCharacterRequest, ::mruv::characters::UpdateCharacterResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCharacter(::grpc::ServerContext* /*context*/, const ::mruv::characters::UpdateCharacterRequest* /*request*/, ::mruv::characters::UpdateCharacterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateCharacter(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::characters::UpdateCharacterRequest* /*request*/, ::mruv::characters::UpdateCharacterResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateCharacter(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::characters::UpdateCharacterRequest* /*request*/, ::mruv::characters::UpdateCharacterResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteCharacter() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::characters::DeleteCharacterRequest, ::mruv::characters::DeleteCharacterResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::characters::DeleteCharacterRequest* request, ::mruv::characters::DeleteCharacterResponse* response) { return this->DeleteCharacter(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteCharacter(
        ::grpc::experimental::MessageAllocator< ::mruv::characters::DeleteCharacterRequest, ::mruv::characters::DeleteCharacterResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::characters::DeleteCharacterRequest, ::mruv::characters::DeleteCharacterResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCharacter(::grpc::ServerContext* /*context*/, const ::mruv::characters::DeleteCharacterRequest* /*request*/, ::mruv::characters::DeleteCharacterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteCharacter(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::characters::DeleteCharacterRequest* /*request*/, ::mruv::characters::DeleteCharacterResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteCharacter(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::characters::DeleteCharacterRequest* /*request*/, ::mruv::characters::DeleteCharacterResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PermanentCharacterKill : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_PermanentCharacterKill() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::characters::CharacterID, ::mruv::characters::CharacterID>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::characters::CharacterID* request, ::mruv::characters::CharacterID* response) { return this->PermanentCharacterKill(context, request, response); }));}
    void SetMessageAllocatorFor_PermanentCharacterKill(
        ::grpc::experimental::MessageAllocator< ::mruv::characters::CharacterID, ::mruv::characters::CharacterID>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::characters::CharacterID, ::mruv::characters::CharacterID>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_PermanentCharacterKill() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PermanentCharacterKill(::grpc::ServerContext* /*context*/, const ::mruv::characters::CharacterID* /*request*/, ::mruv::characters::CharacterID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PermanentCharacterKill(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::characters::CharacterID* /*request*/, ::mruv::characters::CharacterID* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PermanentCharacterKill(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::characters::CharacterID* /*request*/, ::mruv::characters::CharacterID* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ChangeClothes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ChangeClothes() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::characters::ChangeClothesRequest, ::mruv::characters::ChangeClothesResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::characters::ChangeClothesRequest* request, ::mruv::characters::ChangeClothesResponse* response) { return this->ChangeClothes(context, request, response); }));}
    void SetMessageAllocatorFor_ChangeClothes(
        ::grpc::experimental::MessageAllocator< ::mruv::characters::ChangeClothesRequest, ::mruv::characters::ChangeClothesResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::characters::ChangeClothesRequest, ::mruv::characters::ChangeClothesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ChangeClothes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeClothes(::grpc::ServerContext* /*context*/, const ::mruv::characters::ChangeClothesRequest* /*request*/, ::mruv::characters::ChangeClothesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ChangeClothes(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::characters::ChangeClothesRequest* /*request*/, ::mruv::characters::ChangeClothesResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ChangeClothes(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::characters::ChangeClothesRequest* /*request*/, ::mruv::characters::ChangeClothesResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeathsStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeathsStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::mruv::characters::DeathStreamRequest, ::mruv::characters::DeathStreamResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::characters::DeathStreamRequest* request) { return this->DeathsStream(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_DeathsStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeathsStream(::grpc::ServerContext* /*context*/, const ::mruv::characters::DeathStreamRequest* /*request*/, ::grpc::ServerWriter< ::mruv::characters::DeathStreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::mruv::characters::DeathStreamResponse>* DeathsStream(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::characters::DeathStreamRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::mruv::characters::DeathStreamResponse>* DeathsStream(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::characters::DeathStreamRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetServiceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetServiceStatus() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::ServiceStatusRequest, ::mruv::ServiceStatusResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::ServiceStatusRequest* request, ::mruv::ServiceStatusResponse* response) { return this->GetServiceStatus(context, request, response); }));}
    void SetMessageAllocatorFor_GetServiceStatus(
        ::grpc::experimental::MessageAllocator< ::mruv::ServiceStatusRequest, ::mruv::ServiceStatusResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::ServiceStatusRequest, ::mruv::ServiceStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetServiceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceStatus(::grpc::ServerContext* /*context*/, const ::mruv::ServiceStatusRequest* /*request*/, ::mruv::ServiceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetServiceStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::ServiceStatusRequest* /*request*/, ::mruv::ServiceStatusResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetServiceStatus(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::ServiceStatusRequest* /*request*/, ::mruv::ServiceStatusResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetServiceVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetServiceVersion() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::VersionRequest, ::mruv::VersionResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::VersionRequest* request, ::mruv::VersionResponse* response) { return this->GetServiceVersion(context, request, response); }));}
    void SetMessageAllocatorFor_GetServiceVersion(
        ::grpc::experimental::MessageAllocator< ::mruv::VersionRequest, ::mruv::VersionResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(8);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::VersionRequest, ::mruv::VersionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetServiceVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceVersion(::grpc::ServerContext* /*context*/, const ::mruv::VersionRequest* /*request*/, ::mruv::VersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetServiceVersion(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::VersionRequest* /*request*/, ::mruv::VersionResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetServiceVersion(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::VersionRequest* /*request*/, ::mruv::VersionResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_CreateCharacter<ExperimentalWithCallbackMethod_GetCharacter<ExperimentalWithCallbackMethod_UpdateCharacter<ExperimentalWithCallbackMethod_DeleteCharacter<ExperimentalWithCallbackMethod_PermanentCharacterKill<ExperimentalWithCallbackMethod_ChangeClothes<ExperimentalWithCallbackMethod_DeathsStream<ExperimentalWithCallbackMethod_GetServiceStatus<ExperimentalWithCallbackMethod_GetServiceVersion<Service > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_CreateCharacter<ExperimentalWithCallbackMethod_GetCharacter<ExperimentalWithCallbackMethod_UpdateCharacter<ExperimentalWithCallbackMethod_DeleteCharacter<ExperimentalWithCallbackMethod_PermanentCharacterKill<ExperimentalWithCallbackMethod_ChangeClothes<ExperimentalWithCallbackMethod_DeathsStream<ExperimentalWithCallbackMethod_GetServiceStatus<ExperimentalWithCallbackMethod_GetServiceVersion<Service > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateCharacter() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCharacter(::grpc::ServerContext* /*context*/, const ::mruv::characters::CreateCharacterRequest* /*request*/, ::mruv::characters::CreateCharacterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCharacter() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCharacter(::grpc::ServerContext* /*context*/, const ::mruv::characters::GetCharacterRequest* /*request*/, ::mruv::characters::GetCharacterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateCharacter() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCharacter(::grpc::ServerContext* /*context*/, const ::mruv::characters::UpdateCharacterRequest* /*request*/, ::mruv::characters::UpdateCharacterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteCharacter() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCharacter(::grpc::ServerContext* /*context*/, const ::mruv::characters::DeleteCharacterRequest* /*request*/, ::mruv::characters::DeleteCharacterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PermanentCharacterKill : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PermanentCharacterKill() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_PermanentCharacterKill() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PermanentCharacterKill(::grpc::ServerContext* /*context*/, const ::mruv::characters::CharacterID* /*request*/, ::mruv::characters::CharacterID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ChangeClothes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ChangeClothes() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ChangeClothes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeClothes(::grpc::ServerContext* /*context*/, const ::mruv::characters::ChangeClothesRequest* /*request*/, ::mruv::characters::ChangeClothesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeathsStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeathsStream() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_DeathsStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeathsStream(::grpc::ServerContext* /*context*/, const ::mruv::characters::DeathStreamRequest* /*request*/, ::grpc::ServerWriter< ::mruv::characters::DeathStreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetServiceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetServiceStatus() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetServiceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceStatus(::grpc::ServerContext* /*context*/, const ::mruv::ServiceStatusRequest* /*request*/, ::mruv::ServiceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetServiceVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetServiceVersion() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_GetServiceVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceVersion(::grpc::ServerContext* /*context*/, const ::mruv::VersionRequest* /*request*/, ::mruv::VersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateCharacter() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCharacter(::grpc::ServerContext* /*context*/, const ::mruv::characters::CreateCharacterRequest* /*request*/, ::mruv::characters::CreateCharacterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCharacter(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCharacter() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCharacter(::grpc::ServerContext* /*context*/, const ::mruv::characters::GetCharacterRequest* /*request*/, ::mruv::characters::GetCharacterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCharacter(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateCharacter() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCharacter(::grpc::ServerContext* /*context*/, const ::mruv::characters::UpdateCharacterRequest* /*request*/, ::mruv::characters::UpdateCharacterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateCharacter(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteCharacter() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCharacter(::grpc::ServerContext* /*context*/, const ::mruv::characters::DeleteCharacterRequest* /*request*/, ::mruv::characters::DeleteCharacterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteCharacter(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PermanentCharacterKill : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PermanentCharacterKill() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_PermanentCharacterKill() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PermanentCharacterKill(::grpc::ServerContext* /*context*/, const ::mruv::characters::CharacterID* /*request*/, ::mruv::characters::CharacterID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPermanentCharacterKill(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ChangeClothes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ChangeClothes() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ChangeClothes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeClothes(::grpc::ServerContext* /*context*/, const ::mruv::characters::ChangeClothesRequest* /*request*/, ::mruv::characters::ChangeClothesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChangeClothes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeathsStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeathsStream() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_DeathsStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeathsStream(::grpc::ServerContext* /*context*/, const ::mruv::characters::DeathStreamRequest* /*request*/, ::grpc::ServerWriter< ::mruv::characters::DeathStreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeathsStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetServiceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetServiceStatus() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetServiceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceStatus(::grpc::ServerContext* /*context*/, const ::mruv::ServiceStatusRequest* /*request*/, ::mruv::ServiceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServiceStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetServiceVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetServiceVersion() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_GetServiceVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceVersion(::grpc::ServerContext* /*context*/, const ::mruv::VersionRequest* /*request*/, ::mruv::VersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServiceVersion(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateCharacter() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateCharacter(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCharacter(::grpc::ServerContext* /*context*/, const ::mruv::characters::CreateCharacterRequest* /*request*/, ::mruv::characters::CreateCharacterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateCharacter(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateCharacter(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetCharacter() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCharacter(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCharacter(::grpc::ServerContext* /*context*/, const ::mruv::characters::GetCharacterRequest* /*request*/, ::mruv::characters::GetCharacterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetCharacter(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetCharacter(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateCharacter() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateCharacter(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCharacter(::grpc::ServerContext* /*context*/, const ::mruv::characters::UpdateCharacterRequest* /*request*/, ::mruv::characters::UpdateCharacterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateCharacter(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateCharacter(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteCharacter() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteCharacter(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCharacter(::grpc::ServerContext* /*context*/, const ::mruv::characters::DeleteCharacterRequest* /*request*/, ::mruv::characters::DeleteCharacterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteCharacter(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteCharacter(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PermanentCharacterKill : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_PermanentCharacterKill() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PermanentCharacterKill(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_PermanentCharacterKill() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PermanentCharacterKill(::grpc::ServerContext* /*context*/, const ::mruv::characters::CharacterID* /*request*/, ::mruv::characters::CharacterID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PermanentCharacterKill(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PermanentCharacterKill(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ChangeClothes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ChangeClothes() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ChangeClothes(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ChangeClothes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeClothes(::grpc::ServerContext* /*context*/, const ::mruv::characters::ChangeClothesRequest* /*request*/, ::mruv::characters::ChangeClothesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ChangeClothes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ChangeClothes(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeathsStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeathsStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->DeathsStream(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeathsStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeathsStream(::grpc::ServerContext* /*context*/, const ::mruv::characters::DeathStreamRequest* /*request*/, ::grpc::ServerWriter< ::mruv::characters::DeathStreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* DeathsStream(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* DeathsStream(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetServiceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetServiceStatus() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetServiceStatus(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetServiceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceStatus(::grpc::ServerContext* /*context*/, const ::mruv::ServiceStatusRequest* /*request*/, ::mruv::ServiceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetServiceStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetServiceStatus(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetServiceVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetServiceVersion() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetServiceVersion(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetServiceVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceVersion(::grpc::ServerContext* /*context*/, const ::mruv::VersionRequest* /*request*/, ::mruv::VersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetServiceVersion(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetServiceVersion(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateCharacter() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::characters::CreateCharacterRequest, ::mruv::characters::CreateCharacterResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::characters::CreateCharacterRequest, ::mruv::characters::CreateCharacterResponse>* streamer) {
                       return this->StreamedCreateCharacter(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateCharacter(::grpc::ServerContext* /*context*/, const ::mruv::characters::CreateCharacterRequest* /*request*/, ::mruv::characters::CreateCharacterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateCharacter(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::characters::CreateCharacterRequest,::mruv::characters::CreateCharacterResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCharacter() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::characters::GetCharacterRequest, ::mruv::characters::GetCharacterResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::characters::GetCharacterRequest, ::mruv::characters::GetCharacterResponse>* streamer) {
                       return this->StreamedGetCharacter(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCharacter(::grpc::ServerContext* /*context*/, const ::mruv::characters::GetCharacterRequest* /*request*/, ::mruv::characters::GetCharacterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCharacter(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::characters::GetCharacterRequest,::mruv::characters::GetCharacterResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateCharacter() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::characters::UpdateCharacterRequest, ::mruv::characters::UpdateCharacterResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::characters::UpdateCharacterRequest, ::mruv::characters::UpdateCharacterResponse>* streamer) {
                       return this->StreamedUpdateCharacter(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateCharacter(::grpc::ServerContext* /*context*/, const ::mruv::characters::UpdateCharacterRequest* /*request*/, ::mruv::characters::UpdateCharacterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateCharacter(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::characters::UpdateCharacterRequest,::mruv::characters::UpdateCharacterResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteCharacter() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::characters::DeleteCharacterRequest, ::mruv::characters::DeleteCharacterResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::characters::DeleteCharacterRequest, ::mruv::characters::DeleteCharacterResponse>* streamer) {
                       return this->StreamedDeleteCharacter(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteCharacter(::grpc::ServerContext* /*context*/, const ::mruv::characters::DeleteCharacterRequest* /*request*/, ::mruv::characters::DeleteCharacterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteCharacter(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::characters::DeleteCharacterRequest,::mruv::characters::DeleteCharacterResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PermanentCharacterKill : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PermanentCharacterKill() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::characters::CharacterID, ::mruv::characters::CharacterID>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::characters::CharacterID, ::mruv::characters::CharacterID>* streamer) {
                       return this->StreamedPermanentCharacterKill(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PermanentCharacterKill() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PermanentCharacterKill(::grpc::ServerContext* /*context*/, const ::mruv::characters::CharacterID* /*request*/, ::mruv::characters::CharacterID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPermanentCharacterKill(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::characters::CharacterID,::mruv::characters::CharacterID>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ChangeClothes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ChangeClothes() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::characters::ChangeClothesRequest, ::mruv::characters::ChangeClothesResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::characters::ChangeClothesRequest, ::mruv::characters::ChangeClothesResponse>* streamer) {
                       return this->StreamedChangeClothes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ChangeClothes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ChangeClothes(::grpc::ServerContext* /*context*/, const ::mruv::characters::ChangeClothesRequest* /*request*/, ::mruv::characters::ChangeClothesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedChangeClothes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::characters::ChangeClothesRequest,::mruv::characters::ChangeClothesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetServiceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetServiceStatus() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::ServiceStatusRequest, ::mruv::ServiceStatusResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::ServiceStatusRequest, ::mruv::ServiceStatusResponse>* streamer) {
                       return this->StreamedGetServiceStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetServiceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetServiceStatus(::grpc::ServerContext* /*context*/, const ::mruv::ServiceStatusRequest* /*request*/, ::mruv::ServiceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetServiceStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::ServiceStatusRequest,::mruv::ServiceStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetServiceVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetServiceVersion() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::VersionRequest, ::mruv::VersionResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::VersionRequest, ::mruv::VersionResponse>* streamer) {
                       return this->StreamedGetServiceVersion(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetServiceVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetServiceVersion(::grpc::ServerContext* /*context*/, const ::mruv::VersionRequest* /*request*/, ::mruv::VersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetServiceVersion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::VersionRequest,::mruv::VersionResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateCharacter<WithStreamedUnaryMethod_GetCharacter<WithStreamedUnaryMethod_UpdateCharacter<WithStreamedUnaryMethod_DeleteCharacter<WithStreamedUnaryMethod_PermanentCharacterKill<WithStreamedUnaryMethod_ChangeClothes<WithStreamedUnaryMethod_GetServiceStatus<WithStreamedUnaryMethod_GetServiceVersion<Service > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_DeathsStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_DeathsStream() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::mruv::characters::DeathStreamRequest, ::mruv::characters::DeathStreamResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerSplitStreamer<
                     ::mruv::characters::DeathStreamRequest, ::mruv::characters::DeathStreamResponse>* streamer) {
                       return this->StreamedDeathsStream(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_DeathsStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeathsStream(::grpc::ServerContext* /*context*/, const ::mruv::characters::DeathStreamRequest* /*request*/, ::grpc::ServerWriter< ::mruv::characters::DeathStreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedDeathsStream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::mruv::characters::DeathStreamRequest,::mruv::characters::DeathStreamResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_DeathsStream<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateCharacter<WithStreamedUnaryMethod_GetCharacter<WithStreamedUnaryMethod_UpdateCharacter<WithStreamedUnaryMethod_DeleteCharacter<WithStreamedUnaryMethod_PermanentCharacterKill<WithStreamedUnaryMethod_ChangeClothes<WithSplitStreamingMethod_DeathsStream<WithStreamedUnaryMethod_GetServiceStatus<WithStreamedUnaryMethod_GetServiceVersion<Service > > > > > > > > > StreamedService;
};

}  // namespace characters
}  // namespace mruv


#endif  // GRPC_characters_2fcharacters_2eproto__INCLUDED
