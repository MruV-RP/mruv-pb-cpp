// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: accounts/accounts.proto

#include "accounts/accounts.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace mruv {
class RegisterAccountRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterAccountRequest> _instance;
} _RegisterAccountRequest_default_instance_;
class RegisterAccountResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterAccountResponse> _instance;
} _RegisterAccountResponse_default_instance_;
class LogInRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogInRequest> _instance;
} _LogInRequest_default_instance_;
class LogInResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogInResponse> _instance;
} _LogInResponse_default_instance_;
class GetAccountRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAccountRequest> _instance;
} _GetAccountRequest_default_instance_;
class GetAccountResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAccountResponse> _instance;
} _GetAccountResponse_default_instance_;
class GetAccountCharactersRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAccountCharactersRequest> _instance;
} _GetAccountCharactersRequest_default_instance_;
class GetAccountCharactersResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAccountCharactersResponse> _instance;
} _GetAccountCharactersResponse_default_instance_;
class IsAccountExistRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IsAccountExistRequest> _instance;
} _IsAccountExistRequest_default_instance_;
class IsAccountExistResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IsAccountExistResponse> _instance;
} _IsAccountExistResponse_default_instance_;
}  // namespace mruv
static void InitDefaultsscc_info_GetAccountCharactersRequest_accounts_2faccounts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::_GetAccountCharactersRequest_default_instance_;
    new (ptr) ::mruv::GetAccountCharactersRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::GetAccountCharactersRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAccountCharactersRequest_accounts_2faccounts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetAccountCharactersRequest_accounts_2faccounts_2eproto}, {}};

static void InitDefaultsscc_info_GetAccountCharactersResponse_accounts_2faccounts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::_GetAccountCharactersResponse_default_instance_;
    new (ptr) ::mruv::GetAccountCharactersResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::GetAccountCharactersResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAccountCharactersResponse_accounts_2faccounts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetAccountCharactersResponse_accounts_2faccounts_2eproto}, {}};

static void InitDefaultsscc_info_GetAccountRequest_accounts_2faccounts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::_GetAccountRequest_default_instance_;
    new (ptr) ::mruv::GetAccountRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::GetAccountRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAccountRequest_accounts_2faccounts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetAccountRequest_accounts_2faccounts_2eproto}, {}};

static void InitDefaultsscc_info_GetAccountResponse_accounts_2faccounts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::_GetAccountResponse_default_instance_;
    new (ptr) ::mruv::GetAccountResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::GetAccountResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAccountResponse_accounts_2faccounts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetAccountResponse_accounts_2faccounts_2eproto}, {}};

static void InitDefaultsscc_info_IsAccountExistRequest_accounts_2faccounts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::_IsAccountExistRequest_default_instance_;
    new (ptr) ::mruv::IsAccountExistRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::IsAccountExistRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IsAccountExistRequest_accounts_2faccounts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IsAccountExistRequest_accounts_2faccounts_2eproto}, {}};

static void InitDefaultsscc_info_IsAccountExistResponse_accounts_2faccounts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::_IsAccountExistResponse_default_instance_;
    new (ptr) ::mruv::IsAccountExistResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::IsAccountExistResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IsAccountExistResponse_accounts_2faccounts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IsAccountExistResponse_accounts_2faccounts_2eproto}, {}};

static void InitDefaultsscc_info_LogInRequest_accounts_2faccounts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::_LogInRequest_default_instance_;
    new (ptr) ::mruv::LogInRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::LogInRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogInRequest_accounts_2faccounts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogInRequest_accounts_2faccounts_2eproto}, {}};

static void InitDefaultsscc_info_LogInResponse_accounts_2faccounts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::_LogInResponse_default_instance_;
    new (ptr) ::mruv::LogInResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::LogInResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogInResponse_accounts_2faccounts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogInResponse_accounts_2faccounts_2eproto}, {}};

static void InitDefaultsscc_info_RegisterAccountRequest_accounts_2faccounts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::_RegisterAccountRequest_default_instance_;
    new (ptr) ::mruv::RegisterAccountRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::RegisterAccountRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterAccountRequest_accounts_2faccounts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegisterAccountRequest_accounts_2faccounts_2eproto}, {}};

static void InitDefaultsscc_info_RegisterAccountResponse_accounts_2faccounts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::_RegisterAccountResponse_default_instance_;
    new (ptr) ::mruv::RegisterAccountResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::RegisterAccountResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterAccountResponse_accounts_2faccounts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegisterAccountResponse_accounts_2faccounts_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_accounts_2faccounts_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_accounts_2faccounts_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_accounts_2faccounts_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_accounts_2faccounts_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::RegisterAccountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::RegisterAccountRequest, login_),
  PROTOBUF_FIELD_OFFSET(::mruv::RegisterAccountRequest, password_),
  PROTOBUF_FIELD_OFFSET(::mruv::RegisterAccountRequest, email_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::RegisterAccountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::RegisterAccountResponse, success_),
  PROTOBUF_FIELD_OFFSET(::mruv::RegisterAccountResponse, account_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::LogInRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::LogInRequest, login_),
  PROTOBUF_FIELD_OFFSET(::mruv::LogInRequest, password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::LogInResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::LogInResponse, success_),
  PROTOBUF_FIELD_OFFSET(::mruv::LogInResponse, account_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::GetAccountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::GetAccountRequest, login_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::GetAccountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::GetAccountResponse, login_),
  PROTOBUF_FIELD_OFFSET(::mruv::GetAccountResponse, email_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::GetAccountCharactersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::GetAccountCharactersRequest, login_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::GetAccountCharactersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::GetAccountCharactersResponse, character_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::IsAccountExistRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::IsAccountExistRequest, login_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::IsAccountExistResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::IsAccountExistResponse, exists_),
  PROTOBUF_FIELD_OFFSET(::mruv::IsAccountExistResponse, id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mruv::RegisterAccountRequest)},
  { 8, -1, sizeof(::mruv::RegisterAccountResponse)},
  { 15, -1, sizeof(::mruv::LogInRequest)},
  { 22, -1, sizeof(::mruv::LogInResponse)},
  { 29, -1, sizeof(::mruv::GetAccountRequest)},
  { 35, -1, sizeof(::mruv::GetAccountResponse)},
  { 42, -1, sizeof(::mruv::GetAccountCharactersRequest)},
  { 48, -1, sizeof(::mruv::GetAccountCharactersResponse)},
  { 54, -1, sizeof(::mruv::IsAccountExistRequest)},
  { 60, -1, sizeof(::mruv::IsAccountExistResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::_RegisterAccountRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::_RegisterAccountResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::_LogInRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::_LogInResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::_GetAccountRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::_GetAccountResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::_GetAccountCharactersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::_GetAccountCharactersResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::_IsAccountExistRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::_IsAccountExistResponse_default_instance_),
};

const char descriptor_table_protodef_accounts_2faccounts_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027accounts/accounts.proto\022\004mruv\032\034google/"
  "api/annotations.proto\"H\n\026RegisterAccount"
  "Request\022\r\n\005login\030\001 \001(\t\022\020\n\010password\030\002 \001(\t"
  "\022\r\n\005email\030\003 \001(\t\">\n\027RegisterAccountRespon"
  "se\022\017\n\007success\030\001 \001(\010\022\022\n\naccount_id\030\002 \001(\r\""
  "/\n\014LogInRequest\022\r\n\005login\030\001 \001(\t\022\020\n\010passwo"
  "rd\030\002 \001(\t\"4\n\rLogInResponse\022\017\n\007success\030\001 \001"
  "(\010\022\022\n\naccount_id\030\002 \001(\r\"\"\n\021GetAccountRequ"
  "est\022\r\n\005login\030\001 \001(\t\"2\n\022GetAccountResponse"
  "\022\r\n\005login\030\001 \001(\t\022\r\n\005email\030\002 \001(\t\",\n\033GetAcc"
  "ountCharactersRequest\022\r\n\005login\030\001 \001(\t\"5\n\034"
  "GetAccountCharactersResponse\022\025\n\rcharacte"
  "r_ids\030\001 \003(\r\"&\n\025IsAccountExistRequest\022\r\n\005"
  "login\030\001 \001(\t\"4\n\026IsAccountExistResponse\022\016\n"
  "\006exists\030\001 \001(\010\022\n\n\002id\030\002 \001(\r2\260\004\n\023MruVAccoun"
  "tsService\022m\n\017RegisterAccount\022\034.mruv.Regi"
  "sterAccountRequest\032\035.mruv.RegisterAccoun"
  "tResponse\"\035\202\323\344\223\002\027\"\025/v1/accounts/register"
  "\022L\n\005LogIn\022\022.mruv.LogInRequest\032\023.mruv.Log"
  "InResponse\"\032\202\323\344\223\002\024\"\022/v1/accounts/login\022t"
  "\n\016IsAccountExist\022\033.mruv.IsAccountExistRe"
  "quest\032\034.mruv.IsAccountExistResponse\"\'\202\323\344"
  "\223\002!\022\037/v1/accounts/{login}/registered\022]\n\n"
  "GetAccount\022\027.mruv.GetAccountRequest\032\030.mr"
  "uv.GetAccountResponse\"\034\202\323\344\223\002\026\022\024/v1/accou"
  "nts/{login}\022\206\001\n\024GetAccountCharacters\022!.m"
  "ruv.GetAccountCharactersRequest\032\".mruv.G"
  "etAccountCharactersResponse\"\'\202\323\344\223\002!\022\037/v1"
  "/accounts/{login}/charactersB(Z&github.c"
  "om/MruV-RP/mruv-pb-go/accountsb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_accounts_2faccounts_2eproto_deps[1] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_accounts_2faccounts_2eproto_sccs[10] = {
  &scc_info_GetAccountCharactersRequest_accounts_2faccounts_2eproto.base,
  &scc_info_GetAccountCharactersResponse_accounts_2faccounts_2eproto.base,
  &scc_info_GetAccountRequest_accounts_2faccounts_2eproto.base,
  &scc_info_GetAccountResponse_accounts_2faccounts_2eproto.base,
  &scc_info_IsAccountExistRequest_accounts_2faccounts_2eproto.base,
  &scc_info_IsAccountExistResponse_accounts_2faccounts_2eproto.base,
  &scc_info_LogInRequest_accounts_2faccounts_2eproto.base,
  &scc_info_LogInResponse_accounts_2faccounts_2eproto.base,
  &scc_info_RegisterAccountRequest_accounts_2faccounts_2eproto.base,
  &scc_info_RegisterAccountResponse_accounts_2faccounts_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_accounts_2faccounts_2eproto_once;
static bool descriptor_table_accounts_2faccounts_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_accounts_2faccounts_2eproto = {
  &descriptor_table_accounts_2faccounts_2eproto_initialized, descriptor_table_protodef_accounts_2faccounts_2eproto, "accounts/accounts.proto", 1198,
  &descriptor_table_accounts_2faccounts_2eproto_once, descriptor_table_accounts_2faccounts_2eproto_sccs, descriptor_table_accounts_2faccounts_2eproto_deps, 10, 1,
  schemas, file_default_instances, TableStruct_accounts_2faccounts_2eproto::offsets,
  file_level_metadata_accounts_2faccounts_2eproto, 10, file_level_enum_descriptors_accounts_2faccounts_2eproto, file_level_service_descriptors_accounts_2faccounts_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_accounts_2faccounts_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_accounts_2faccounts_2eproto), true);
namespace mruv {

// ===================================================================

void RegisterAccountRequest::InitAsDefaultInstance() {
}
class RegisterAccountRequest::_Internal {
 public:
};

RegisterAccountRequest::RegisterAccountRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.RegisterAccountRequest)
}
RegisterAccountRequest::RegisterAccountRequest(const RegisterAccountRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  login_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_login().empty()) {
    login_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.login_);
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  // @@protoc_insertion_point(copy_constructor:mruv.RegisterAccountRequest)
}

void RegisterAccountRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegisterAccountRequest_accounts_2faccounts_2eproto.base);
  login_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RegisterAccountRequest::~RegisterAccountRequest() {
  // @@protoc_insertion_point(destructor:mruv.RegisterAccountRequest)
  SharedDtor();
}

void RegisterAccountRequest::SharedDtor() {
  login_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegisterAccountRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterAccountRequest& RegisterAccountRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterAccountRequest_accounts_2faccounts_2eproto.base);
  return *internal_default_instance();
}


void RegisterAccountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.RegisterAccountRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  login_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* RegisterAccountRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string login = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_login();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.RegisterAccountRequest.login"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.RegisterAccountRequest.password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string email = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.RegisterAccountRequest.email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterAccountRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.RegisterAccountRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string login = 1;
  if (this->login().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_login().data(), static_cast<int>(this->_internal_login().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.RegisterAccountRequest.login");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_login(), target);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.RegisterAccountRequest.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  // string email = 3;
  if (this->email().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.RegisterAccountRequest.email");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_email(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.RegisterAccountRequest)
  return target;
}

size_t RegisterAccountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.RegisterAccountRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string login = 1;
  if (this->login().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_login());
  }

  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // string email = 3;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterAccountRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.RegisterAccountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterAccountRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterAccountRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.RegisterAccountRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.RegisterAccountRequest)
    MergeFrom(*source);
  }
}

void RegisterAccountRequest::MergeFrom(const RegisterAccountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.RegisterAccountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.login().size() > 0) {

    login_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.login_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
}

void RegisterAccountRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.RegisterAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterAccountRequest::CopyFrom(const RegisterAccountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.RegisterAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterAccountRequest::IsInitialized() const {
  return true;
}

void RegisterAccountRequest::InternalSwap(RegisterAccountRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  login_.Swap(&other->login_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterAccountRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegisterAccountResponse::InitAsDefaultInstance() {
}
class RegisterAccountResponse::_Internal {
 public:
};

RegisterAccountResponse::RegisterAccountResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.RegisterAccountResponse)
}
RegisterAccountResponse::RegisterAccountResponse(const RegisterAccountResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&success_)) + sizeof(account_id_));
  // @@protoc_insertion_point(copy_constructor:mruv.RegisterAccountResponse)
}

void RegisterAccountResponse::SharedCtor() {
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&account_id_) -
      reinterpret_cast<char*>(&success_)) + sizeof(account_id_));
}

RegisterAccountResponse::~RegisterAccountResponse() {
  // @@protoc_insertion_point(destructor:mruv.RegisterAccountResponse)
  SharedDtor();
}

void RegisterAccountResponse::SharedDtor() {
}

void RegisterAccountResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterAccountResponse& RegisterAccountResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterAccountResponse_accounts_2faccounts_2eproto.base);
  return *internal_default_instance();
}


void RegisterAccountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.RegisterAccountResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&account_id_) -
      reinterpret_cast<char*>(&success_)) + sizeof(account_id_));
  _internal_metadata_.Clear();
}

const char* RegisterAccountResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterAccountResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.RegisterAccountResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // uint32 account_id = 2;
  if (this->account_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.RegisterAccountResponse)
  return target;
}

size_t RegisterAccountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.RegisterAccountResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // uint32 account_id = 2;
  if (this->account_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_account_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterAccountResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.RegisterAccountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterAccountResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterAccountResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.RegisterAccountResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.RegisterAccountResponse)
    MergeFrom(*source);
  }
}

void RegisterAccountResponse::MergeFrom(const RegisterAccountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.RegisterAccountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from.account_id() != 0) {
    _internal_set_account_id(from._internal_account_id());
  }
}

void RegisterAccountResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.RegisterAccountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterAccountResponse::CopyFrom(const RegisterAccountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.RegisterAccountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterAccountResponse::IsInitialized() const {
  return true;
}

void RegisterAccountResponse::InternalSwap(RegisterAccountResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(success_, other->success_);
  swap(account_id_, other->account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterAccountResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogInRequest::InitAsDefaultInstance() {
}
class LogInRequest::_Internal {
 public:
};

LogInRequest::LogInRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.LogInRequest)
}
LogInRequest::LogInRequest(const LogInRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  login_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_login().empty()) {
    login_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.login_);
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  // @@protoc_insertion_point(copy_constructor:mruv.LogInRequest)
}

void LogInRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogInRequest_accounts_2faccounts_2eproto.base);
  login_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LogInRequest::~LogInRequest() {
  // @@protoc_insertion_point(destructor:mruv.LogInRequest)
  SharedDtor();
}

void LogInRequest::SharedDtor() {
  login_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogInRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogInRequest& LogInRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogInRequest_accounts_2faccounts_2eproto.base);
  return *internal_default_instance();
}


void LogInRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.LogInRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  login_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* LogInRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string login = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_login();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.LogInRequest.login"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.LogInRequest.password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogInRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.LogInRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string login = 1;
  if (this->login().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_login().data(), static_cast<int>(this->_internal_login().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.LogInRequest.login");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_login(), target);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.LogInRequest.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.LogInRequest)
  return target;
}

size_t LogInRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.LogInRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string login = 1;
  if (this->login().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_login());
  }

  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogInRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.LogInRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LogInRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogInRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.LogInRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.LogInRequest)
    MergeFrom(*source);
  }
}

void LogInRequest::MergeFrom(const LogInRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.LogInRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.login().size() > 0) {

    login_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.login_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void LogInRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.LogInRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogInRequest::CopyFrom(const LogInRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.LogInRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogInRequest::IsInitialized() const {
  return true;
}

void LogInRequest::InternalSwap(LogInRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  login_.Swap(&other->login_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata LogInRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogInResponse::InitAsDefaultInstance() {
}
class LogInResponse::_Internal {
 public:
};

LogInResponse::LogInResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.LogInResponse)
}
LogInResponse::LogInResponse(const LogInResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&success_)) + sizeof(account_id_));
  // @@protoc_insertion_point(copy_constructor:mruv.LogInResponse)
}

void LogInResponse::SharedCtor() {
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&account_id_) -
      reinterpret_cast<char*>(&success_)) + sizeof(account_id_));
}

LogInResponse::~LogInResponse() {
  // @@protoc_insertion_point(destructor:mruv.LogInResponse)
  SharedDtor();
}

void LogInResponse::SharedDtor() {
}

void LogInResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogInResponse& LogInResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogInResponse_accounts_2faccounts_2eproto.base);
  return *internal_default_instance();
}


void LogInResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.LogInResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&account_id_) -
      reinterpret_cast<char*>(&success_)) + sizeof(account_id_));
  _internal_metadata_.Clear();
}

const char* LogInResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogInResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.LogInResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // uint32 account_id = 2;
  if (this->account_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.LogInResponse)
  return target;
}

size_t LogInResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.LogInResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // uint32 account_id = 2;
  if (this->account_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_account_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogInResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.LogInResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LogInResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogInResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.LogInResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.LogInResponse)
    MergeFrom(*source);
  }
}

void LogInResponse::MergeFrom(const LogInResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.LogInResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from.account_id() != 0) {
    _internal_set_account_id(from._internal_account_id());
  }
}

void LogInResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.LogInResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogInResponse::CopyFrom(const LogInResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.LogInResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogInResponse::IsInitialized() const {
  return true;
}

void LogInResponse::InternalSwap(LogInResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(success_, other->success_);
  swap(account_id_, other->account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogInResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAccountRequest::InitAsDefaultInstance() {
}
class GetAccountRequest::_Internal {
 public:
};

GetAccountRequest::GetAccountRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.GetAccountRequest)
}
GetAccountRequest::GetAccountRequest(const GetAccountRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  login_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_login().empty()) {
    login_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.login_);
  }
  // @@protoc_insertion_point(copy_constructor:mruv.GetAccountRequest)
}

void GetAccountRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAccountRequest_accounts_2faccounts_2eproto.base);
  login_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetAccountRequest::~GetAccountRequest() {
  // @@protoc_insertion_point(destructor:mruv.GetAccountRequest)
  SharedDtor();
}

void GetAccountRequest::SharedDtor() {
  login_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetAccountRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAccountRequest& GetAccountRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAccountRequest_accounts_2faccounts_2eproto.base);
  return *internal_default_instance();
}


void GetAccountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.GetAccountRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  login_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetAccountRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string login = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_login();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.GetAccountRequest.login"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAccountRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.GetAccountRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string login = 1;
  if (this->login().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_login().data(), static_cast<int>(this->_internal_login().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.GetAccountRequest.login");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_login(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.GetAccountRequest)
  return target;
}

size_t GetAccountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.GetAccountRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string login = 1;
  if (this->login().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_login());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAccountRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.GetAccountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAccountRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAccountRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.GetAccountRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.GetAccountRequest)
    MergeFrom(*source);
  }
}

void GetAccountRequest::MergeFrom(const GetAccountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.GetAccountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.login().size() > 0) {

    login_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.login_);
  }
}

void GetAccountRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.GetAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccountRequest::CopyFrom(const GetAccountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.GetAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountRequest::IsInitialized() const {
  return true;
}

void GetAccountRequest::InternalSwap(GetAccountRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  login_.Swap(&other->login_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccountRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAccountResponse::InitAsDefaultInstance() {
}
class GetAccountResponse::_Internal {
 public:
};

GetAccountResponse::GetAccountResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.GetAccountResponse)
}
GetAccountResponse::GetAccountResponse(const GetAccountResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  login_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_login().empty()) {
    login_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.login_);
  }
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  // @@protoc_insertion_point(copy_constructor:mruv.GetAccountResponse)
}

void GetAccountResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAccountResponse_accounts_2faccounts_2eproto.base);
  login_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetAccountResponse::~GetAccountResponse() {
  // @@protoc_insertion_point(destructor:mruv.GetAccountResponse)
  SharedDtor();
}

void GetAccountResponse::SharedDtor() {
  login_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetAccountResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAccountResponse& GetAccountResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAccountResponse_accounts_2faccounts_2eproto.base);
  return *internal_default_instance();
}


void GetAccountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.GetAccountResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  login_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetAccountResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string login = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_login();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.GetAccountResponse.login"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.GetAccountResponse.email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAccountResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.GetAccountResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string login = 1;
  if (this->login().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_login().data(), static_cast<int>(this->_internal_login().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.GetAccountResponse.login");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_login(), target);
  }

  // string email = 2;
  if (this->email().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.GetAccountResponse.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.GetAccountResponse)
  return target;
}

size_t GetAccountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.GetAccountResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string login = 1;
  if (this->login().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_login());
  }

  // string email = 2;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAccountResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.GetAccountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAccountResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAccountResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.GetAccountResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.GetAccountResponse)
    MergeFrom(*source);
  }
}

void GetAccountResponse::MergeFrom(const GetAccountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.GetAccountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.login().size() > 0) {

    login_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.login_);
  }
  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
}

void GetAccountResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.GetAccountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccountResponse::CopyFrom(const GetAccountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.GetAccountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountResponse::IsInitialized() const {
  return true;
}

void GetAccountResponse::InternalSwap(GetAccountResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  login_.Swap(&other->login_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccountResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAccountCharactersRequest::InitAsDefaultInstance() {
}
class GetAccountCharactersRequest::_Internal {
 public:
};

GetAccountCharactersRequest::GetAccountCharactersRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.GetAccountCharactersRequest)
}
GetAccountCharactersRequest::GetAccountCharactersRequest(const GetAccountCharactersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  login_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_login().empty()) {
    login_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.login_);
  }
  // @@protoc_insertion_point(copy_constructor:mruv.GetAccountCharactersRequest)
}

void GetAccountCharactersRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAccountCharactersRequest_accounts_2faccounts_2eproto.base);
  login_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetAccountCharactersRequest::~GetAccountCharactersRequest() {
  // @@protoc_insertion_point(destructor:mruv.GetAccountCharactersRequest)
  SharedDtor();
}

void GetAccountCharactersRequest::SharedDtor() {
  login_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetAccountCharactersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAccountCharactersRequest& GetAccountCharactersRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAccountCharactersRequest_accounts_2faccounts_2eproto.base);
  return *internal_default_instance();
}


void GetAccountCharactersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.GetAccountCharactersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  login_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetAccountCharactersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string login = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_login();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.GetAccountCharactersRequest.login"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAccountCharactersRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.GetAccountCharactersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string login = 1;
  if (this->login().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_login().data(), static_cast<int>(this->_internal_login().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.GetAccountCharactersRequest.login");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_login(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.GetAccountCharactersRequest)
  return target;
}

size_t GetAccountCharactersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.GetAccountCharactersRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string login = 1;
  if (this->login().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_login());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAccountCharactersRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.GetAccountCharactersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAccountCharactersRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAccountCharactersRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.GetAccountCharactersRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.GetAccountCharactersRequest)
    MergeFrom(*source);
  }
}

void GetAccountCharactersRequest::MergeFrom(const GetAccountCharactersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.GetAccountCharactersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.login().size() > 0) {

    login_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.login_);
  }
}

void GetAccountCharactersRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.GetAccountCharactersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccountCharactersRequest::CopyFrom(const GetAccountCharactersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.GetAccountCharactersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountCharactersRequest::IsInitialized() const {
  return true;
}

void GetAccountCharactersRequest::InternalSwap(GetAccountCharactersRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  login_.Swap(&other->login_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccountCharactersRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAccountCharactersResponse::InitAsDefaultInstance() {
}
class GetAccountCharactersResponse::_Internal {
 public:
};

GetAccountCharactersResponse::GetAccountCharactersResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.GetAccountCharactersResponse)
}
GetAccountCharactersResponse::GetAccountCharactersResponse(const GetAccountCharactersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      character_ids_(from.character_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.GetAccountCharactersResponse)
}

void GetAccountCharactersResponse::SharedCtor() {
}

GetAccountCharactersResponse::~GetAccountCharactersResponse() {
  // @@protoc_insertion_point(destructor:mruv.GetAccountCharactersResponse)
  SharedDtor();
}

void GetAccountCharactersResponse::SharedDtor() {
}

void GetAccountCharactersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAccountCharactersResponse& GetAccountCharactersResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAccountCharactersResponse_accounts_2faccounts_2eproto.base);
  return *internal_default_instance();
}


void GetAccountCharactersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.GetAccountCharactersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  character_ids_.Clear();
  _internal_metadata_.Clear();
}

const char* GetAccountCharactersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 character_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_character_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_character_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAccountCharactersResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.GetAccountCharactersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 character_ids = 1;
  {
    int byte_size = _character_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_character_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.GetAccountCharactersResponse)
  return target;
}

size_t GetAccountCharactersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.GetAccountCharactersResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 character_ids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->character_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _character_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAccountCharactersResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.GetAccountCharactersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAccountCharactersResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAccountCharactersResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.GetAccountCharactersResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.GetAccountCharactersResponse)
    MergeFrom(*source);
  }
}

void GetAccountCharactersResponse::MergeFrom(const GetAccountCharactersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.GetAccountCharactersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  character_ids_.MergeFrom(from.character_ids_);
}

void GetAccountCharactersResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.GetAccountCharactersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccountCharactersResponse::CopyFrom(const GetAccountCharactersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.GetAccountCharactersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountCharactersResponse::IsInitialized() const {
  return true;
}

void GetAccountCharactersResponse::InternalSwap(GetAccountCharactersResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  character_ids_.InternalSwap(&other->character_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccountCharactersResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IsAccountExistRequest::InitAsDefaultInstance() {
}
class IsAccountExistRequest::_Internal {
 public:
};

IsAccountExistRequest::IsAccountExistRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.IsAccountExistRequest)
}
IsAccountExistRequest::IsAccountExistRequest(const IsAccountExistRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  login_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_login().empty()) {
    login_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.login_);
  }
  // @@protoc_insertion_point(copy_constructor:mruv.IsAccountExistRequest)
}

void IsAccountExistRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IsAccountExistRequest_accounts_2faccounts_2eproto.base);
  login_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

IsAccountExistRequest::~IsAccountExistRequest() {
  // @@protoc_insertion_point(destructor:mruv.IsAccountExistRequest)
  SharedDtor();
}

void IsAccountExistRequest::SharedDtor() {
  login_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IsAccountExistRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IsAccountExistRequest& IsAccountExistRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IsAccountExistRequest_accounts_2faccounts_2eproto.base);
  return *internal_default_instance();
}


void IsAccountExistRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.IsAccountExistRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  login_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* IsAccountExistRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string login = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_login();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.IsAccountExistRequest.login"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IsAccountExistRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.IsAccountExistRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string login = 1;
  if (this->login().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_login().data(), static_cast<int>(this->_internal_login().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.IsAccountExistRequest.login");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_login(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.IsAccountExistRequest)
  return target;
}

size_t IsAccountExistRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.IsAccountExistRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string login = 1;
  if (this->login().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_login());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsAccountExistRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.IsAccountExistRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const IsAccountExistRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IsAccountExistRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.IsAccountExistRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.IsAccountExistRequest)
    MergeFrom(*source);
  }
}

void IsAccountExistRequest::MergeFrom(const IsAccountExistRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.IsAccountExistRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.login().size() > 0) {

    login_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.login_);
  }
}

void IsAccountExistRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.IsAccountExistRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsAccountExistRequest::CopyFrom(const IsAccountExistRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.IsAccountExistRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsAccountExistRequest::IsInitialized() const {
  return true;
}

void IsAccountExistRequest::InternalSwap(IsAccountExistRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  login_.Swap(&other->login_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata IsAccountExistRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IsAccountExistResponse::InitAsDefaultInstance() {
}
class IsAccountExistResponse::_Internal {
 public:
};

IsAccountExistResponse::IsAccountExistResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.IsAccountExistResponse)
}
IsAccountExistResponse::IsAccountExistResponse(const IsAccountExistResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&exists_, &from.exists_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&exists_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:mruv.IsAccountExistResponse)
}

void IsAccountExistResponse::SharedCtor() {
  ::memset(&exists_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&exists_)) + sizeof(id_));
}

IsAccountExistResponse::~IsAccountExistResponse() {
  // @@protoc_insertion_point(destructor:mruv.IsAccountExistResponse)
  SharedDtor();
}

void IsAccountExistResponse::SharedDtor() {
}

void IsAccountExistResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IsAccountExistResponse& IsAccountExistResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IsAccountExistResponse_accounts_2faccounts_2eproto.base);
  return *internal_default_instance();
}


void IsAccountExistResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.IsAccountExistResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&exists_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&exists_)) + sizeof(id_));
  _internal_metadata_.Clear();
}

const char* IsAccountExistResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool exists = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          exists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IsAccountExistResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.IsAccountExistResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool exists = 1;
  if (this->exists() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_exists(), target);
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.IsAccountExistResponse)
  return target;
}

size_t IsAccountExistResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.IsAccountExistResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool exists = 1;
  if (this->exists() != 0) {
    total_size += 1 + 1;
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsAccountExistResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.IsAccountExistResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const IsAccountExistResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IsAccountExistResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.IsAccountExistResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.IsAccountExistResponse)
    MergeFrom(*source);
  }
}

void IsAccountExistResponse::MergeFrom(const IsAccountExistResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.IsAccountExistResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.exists() != 0) {
    _internal_set_exists(from._internal_exists());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void IsAccountExistResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.IsAccountExistResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsAccountExistResponse::CopyFrom(const IsAccountExistResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.IsAccountExistResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsAccountExistResponse::IsInitialized() const {
  return true;
}

void IsAccountExistResponse::InternalSwap(IsAccountExistResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(exists_, other->exists_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IsAccountExistResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mruv
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mruv::RegisterAccountRequest* Arena::CreateMaybeMessage< ::mruv::RegisterAccountRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::RegisterAccountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::RegisterAccountResponse* Arena::CreateMaybeMessage< ::mruv::RegisterAccountResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::RegisterAccountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::LogInRequest* Arena::CreateMaybeMessage< ::mruv::LogInRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::LogInRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::LogInResponse* Arena::CreateMaybeMessage< ::mruv::LogInResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::LogInResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::GetAccountRequest* Arena::CreateMaybeMessage< ::mruv::GetAccountRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::GetAccountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::GetAccountResponse* Arena::CreateMaybeMessage< ::mruv::GetAccountResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::GetAccountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::GetAccountCharactersRequest* Arena::CreateMaybeMessage< ::mruv::GetAccountCharactersRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::GetAccountCharactersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::GetAccountCharactersResponse* Arena::CreateMaybeMessage< ::mruv::GetAccountCharactersResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::GetAccountCharactersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::IsAccountExistRequest* Arena::CreateMaybeMessage< ::mruv::IsAccountExistRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::IsAccountExistRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::IsAccountExistResponse* Arena::CreateMaybeMessage< ::mruv::IsAccountExistResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::IsAccountExistResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
