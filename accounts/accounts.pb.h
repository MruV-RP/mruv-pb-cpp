// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: accounts/accounts.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_accounts_2faccounts_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_accounts_2faccounts_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_accounts_2faccounts_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_accounts_2faccounts_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_accounts_2faccounts_2eproto;
namespace mruv {
class GetAccountCharactersRequest;
class GetAccountCharactersRequestDefaultTypeInternal;
extern GetAccountCharactersRequestDefaultTypeInternal _GetAccountCharactersRequest_default_instance_;
class GetAccountCharactersResponse;
class GetAccountCharactersResponseDefaultTypeInternal;
extern GetAccountCharactersResponseDefaultTypeInternal _GetAccountCharactersResponse_default_instance_;
class GetAccountRequest;
class GetAccountRequestDefaultTypeInternal;
extern GetAccountRequestDefaultTypeInternal _GetAccountRequest_default_instance_;
class GetAccountResponse;
class GetAccountResponseDefaultTypeInternal;
extern GetAccountResponseDefaultTypeInternal _GetAccountResponse_default_instance_;
class IsAccountExistRequest;
class IsAccountExistRequestDefaultTypeInternal;
extern IsAccountExistRequestDefaultTypeInternal _IsAccountExistRequest_default_instance_;
class IsAccountExistResponse;
class IsAccountExistResponseDefaultTypeInternal;
extern IsAccountExistResponseDefaultTypeInternal _IsAccountExistResponse_default_instance_;
class LogInRequest;
class LogInRequestDefaultTypeInternal;
extern LogInRequestDefaultTypeInternal _LogInRequest_default_instance_;
class LogInResponse;
class LogInResponseDefaultTypeInternal;
extern LogInResponseDefaultTypeInternal _LogInResponse_default_instance_;
class RegisterAccountRequest;
class RegisterAccountRequestDefaultTypeInternal;
extern RegisterAccountRequestDefaultTypeInternal _RegisterAccountRequest_default_instance_;
class RegisterAccountResponse;
class RegisterAccountResponseDefaultTypeInternal;
extern RegisterAccountResponseDefaultTypeInternal _RegisterAccountResponse_default_instance_;
}  // namespace mruv
PROTOBUF_NAMESPACE_OPEN
template<> ::mruv::GetAccountCharactersRequest* Arena::CreateMaybeMessage<::mruv::GetAccountCharactersRequest>(Arena*);
template<> ::mruv::GetAccountCharactersResponse* Arena::CreateMaybeMessage<::mruv::GetAccountCharactersResponse>(Arena*);
template<> ::mruv::GetAccountRequest* Arena::CreateMaybeMessage<::mruv::GetAccountRequest>(Arena*);
template<> ::mruv::GetAccountResponse* Arena::CreateMaybeMessage<::mruv::GetAccountResponse>(Arena*);
template<> ::mruv::IsAccountExistRequest* Arena::CreateMaybeMessage<::mruv::IsAccountExistRequest>(Arena*);
template<> ::mruv::IsAccountExistResponse* Arena::CreateMaybeMessage<::mruv::IsAccountExistResponse>(Arena*);
template<> ::mruv::LogInRequest* Arena::CreateMaybeMessage<::mruv::LogInRequest>(Arena*);
template<> ::mruv::LogInResponse* Arena::CreateMaybeMessage<::mruv::LogInResponse>(Arena*);
template<> ::mruv::RegisterAccountRequest* Arena::CreateMaybeMessage<::mruv::RegisterAccountRequest>(Arena*);
template<> ::mruv::RegisterAccountResponse* Arena::CreateMaybeMessage<::mruv::RegisterAccountResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mruv {

// ===================================================================

class RegisterAccountRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.RegisterAccountRequest) */ {
 public:
  RegisterAccountRequest();
  virtual ~RegisterAccountRequest();

  RegisterAccountRequest(const RegisterAccountRequest& from);
  RegisterAccountRequest(RegisterAccountRequest&& from) noexcept
    : RegisterAccountRequest() {
    *this = ::std::move(from);
  }

  inline RegisterAccountRequest& operator=(const RegisterAccountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterAccountRequest& operator=(RegisterAccountRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterAccountRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterAccountRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterAccountRequest*>(
               &_RegisterAccountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RegisterAccountRequest& a, RegisterAccountRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterAccountRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterAccountRequest* New() const final {
    return CreateMaybeMessage<RegisterAccountRequest>(nullptr);
  }

  RegisterAccountRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterAccountRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterAccountRequest& from);
  void MergeFrom(const RegisterAccountRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterAccountRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.RegisterAccountRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_accounts_2faccounts_2eproto);
    return ::descriptor_table_accounts_2faccounts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kEmailFieldNumber = 3,
  };
  // string login = 1;
  void clear_login();
  const std::string& login() const;
  void set_login(const std::string& value);
  void set_login(std::string&& value);
  void set_login(const char* value);
  void set_login(const char* value, size_t size);
  std::string* mutable_login();
  std::string* release_login();
  void set_allocated_login(std::string* login);
  private:
  const std::string& _internal_login() const;
  void _internal_set_login(const std::string& value);
  std::string* _internal_mutable_login();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string email = 3;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // @@protoc_insertion_point(class_scope:mruv.RegisterAccountRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class RegisterAccountResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.RegisterAccountResponse) */ {
 public:
  RegisterAccountResponse();
  virtual ~RegisterAccountResponse();

  RegisterAccountResponse(const RegisterAccountResponse& from);
  RegisterAccountResponse(RegisterAccountResponse&& from) noexcept
    : RegisterAccountResponse() {
    *this = ::std::move(from);
  }

  inline RegisterAccountResponse& operator=(const RegisterAccountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterAccountResponse& operator=(RegisterAccountResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterAccountResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterAccountResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterAccountResponse*>(
               &_RegisterAccountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RegisterAccountResponse& a, RegisterAccountResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterAccountResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterAccountResponse* New() const final {
    return CreateMaybeMessage<RegisterAccountResponse>(nullptr);
  }

  RegisterAccountResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterAccountResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterAccountResponse& from);
  void MergeFrom(const RegisterAccountResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterAccountResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.RegisterAccountResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_accounts_2faccounts_2eproto);
    return ::descriptor_table_accounts_2faccounts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
    kAccountIdFieldNumber = 2,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // uint32 account_id = 2;
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.RegisterAccountResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class LogInRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.LogInRequest) */ {
 public:
  LogInRequest();
  virtual ~LogInRequest();

  LogInRequest(const LogInRequest& from);
  LogInRequest(LogInRequest&& from) noexcept
    : LogInRequest() {
    *this = ::std::move(from);
  }

  inline LogInRequest& operator=(const LogInRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogInRequest& operator=(LogInRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogInRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogInRequest* internal_default_instance() {
    return reinterpret_cast<const LogInRequest*>(
               &_LogInRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LogInRequest& a, LogInRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LogInRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogInRequest* New() const final {
    return CreateMaybeMessage<LogInRequest>(nullptr);
  }

  LogInRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogInRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogInRequest& from);
  void MergeFrom(const LogInRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogInRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.LogInRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_accounts_2faccounts_2eproto);
    return ::descriptor_table_accounts_2faccounts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string login = 1;
  void clear_login();
  const std::string& login() const;
  void set_login(const std::string& value);
  void set_login(std::string&& value);
  void set_login(const char* value);
  void set_login(const char* value, size_t size);
  std::string* mutable_login();
  std::string* release_login();
  void set_allocated_login(std::string* login);
  private:
  const std::string& _internal_login() const;
  void _internal_set_login(const std::string& value);
  std::string* _internal_mutable_login();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:mruv.LogInRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class LogInResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.LogInResponse) */ {
 public:
  LogInResponse();
  virtual ~LogInResponse();

  LogInResponse(const LogInResponse& from);
  LogInResponse(LogInResponse&& from) noexcept
    : LogInResponse() {
    *this = ::std::move(from);
  }

  inline LogInResponse& operator=(const LogInResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogInResponse& operator=(LogInResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogInResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogInResponse* internal_default_instance() {
    return reinterpret_cast<const LogInResponse*>(
               &_LogInResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LogInResponse& a, LogInResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LogInResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogInResponse* New() const final {
    return CreateMaybeMessage<LogInResponse>(nullptr);
  }

  LogInResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogInResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogInResponse& from);
  void MergeFrom(const LogInResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogInResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.LogInResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_accounts_2faccounts_2eproto);
    return ::descriptor_table_accounts_2faccounts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
    kAccountIdFieldNumber = 2,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // uint32 account_id = 2;
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.LogInResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class GetAccountRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.GetAccountRequest) */ {
 public:
  GetAccountRequest();
  virtual ~GetAccountRequest();

  GetAccountRequest(const GetAccountRequest& from);
  GetAccountRequest(GetAccountRequest&& from) noexcept
    : GetAccountRequest() {
    *this = ::std::move(from);
  }

  inline GetAccountRequest& operator=(const GetAccountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAccountRequest& operator=(GetAccountRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAccountRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAccountRequest* internal_default_instance() {
    return reinterpret_cast<const GetAccountRequest*>(
               &_GetAccountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetAccountRequest& a, GetAccountRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAccountRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAccountRequest* New() const final {
    return CreateMaybeMessage<GetAccountRequest>(nullptr);
  }

  GetAccountRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAccountRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAccountRequest& from);
  void MergeFrom(const GetAccountRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAccountRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.GetAccountRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_accounts_2faccounts_2eproto);
    return ::descriptor_table_accounts_2faccounts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginFieldNumber = 1,
  };
  // string login = 1;
  void clear_login();
  const std::string& login() const;
  void set_login(const std::string& value);
  void set_login(std::string&& value);
  void set_login(const char* value);
  void set_login(const char* value, size_t size);
  std::string* mutable_login();
  std::string* release_login();
  void set_allocated_login(std::string* login);
  private:
  const std::string& _internal_login() const;
  void _internal_set_login(const std::string& value);
  std::string* _internal_mutable_login();
  public:

  // @@protoc_insertion_point(class_scope:mruv.GetAccountRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class GetAccountResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.GetAccountResponse) */ {
 public:
  GetAccountResponse();
  virtual ~GetAccountResponse();

  GetAccountResponse(const GetAccountResponse& from);
  GetAccountResponse(GetAccountResponse&& from) noexcept
    : GetAccountResponse() {
    *this = ::std::move(from);
  }

  inline GetAccountResponse& operator=(const GetAccountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAccountResponse& operator=(GetAccountResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAccountResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAccountResponse* internal_default_instance() {
    return reinterpret_cast<const GetAccountResponse*>(
               &_GetAccountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetAccountResponse& a, GetAccountResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAccountResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAccountResponse* New() const final {
    return CreateMaybeMessage<GetAccountResponse>(nullptr);
  }

  GetAccountResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAccountResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAccountResponse& from);
  void MergeFrom(const GetAccountResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAccountResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.GetAccountResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_accounts_2faccounts_2eproto);
    return ::descriptor_table_accounts_2faccounts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginFieldNumber = 1,
    kEmailFieldNumber = 2,
  };
  // string login = 1;
  void clear_login();
  const std::string& login() const;
  void set_login(const std::string& value);
  void set_login(std::string&& value);
  void set_login(const char* value);
  void set_login(const char* value, size_t size);
  std::string* mutable_login();
  std::string* release_login();
  void set_allocated_login(std::string* login);
  private:
  const std::string& _internal_login() const;
  void _internal_set_login(const std::string& value);
  std::string* _internal_mutable_login();
  public:

  // string email = 2;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // @@protoc_insertion_point(class_scope:mruv.GetAccountResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class GetAccountCharactersRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.GetAccountCharactersRequest) */ {
 public:
  GetAccountCharactersRequest();
  virtual ~GetAccountCharactersRequest();

  GetAccountCharactersRequest(const GetAccountCharactersRequest& from);
  GetAccountCharactersRequest(GetAccountCharactersRequest&& from) noexcept
    : GetAccountCharactersRequest() {
    *this = ::std::move(from);
  }

  inline GetAccountCharactersRequest& operator=(const GetAccountCharactersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAccountCharactersRequest& operator=(GetAccountCharactersRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAccountCharactersRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAccountCharactersRequest* internal_default_instance() {
    return reinterpret_cast<const GetAccountCharactersRequest*>(
               &_GetAccountCharactersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetAccountCharactersRequest& a, GetAccountCharactersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAccountCharactersRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAccountCharactersRequest* New() const final {
    return CreateMaybeMessage<GetAccountCharactersRequest>(nullptr);
  }

  GetAccountCharactersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAccountCharactersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAccountCharactersRequest& from);
  void MergeFrom(const GetAccountCharactersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAccountCharactersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.GetAccountCharactersRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_accounts_2faccounts_2eproto);
    return ::descriptor_table_accounts_2faccounts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginFieldNumber = 1,
  };
  // string login = 1;
  void clear_login();
  const std::string& login() const;
  void set_login(const std::string& value);
  void set_login(std::string&& value);
  void set_login(const char* value);
  void set_login(const char* value, size_t size);
  std::string* mutable_login();
  std::string* release_login();
  void set_allocated_login(std::string* login);
  private:
  const std::string& _internal_login() const;
  void _internal_set_login(const std::string& value);
  std::string* _internal_mutable_login();
  public:

  // @@protoc_insertion_point(class_scope:mruv.GetAccountCharactersRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class GetAccountCharactersResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.GetAccountCharactersResponse) */ {
 public:
  GetAccountCharactersResponse();
  virtual ~GetAccountCharactersResponse();

  GetAccountCharactersResponse(const GetAccountCharactersResponse& from);
  GetAccountCharactersResponse(GetAccountCharactersResponse&& from) noexcept
    : GetAccountCharactersResponse() {
    *this = ::std::move(from);
  }

  inline GetAccountCharactersResponse& operator=(const GetAccountCharactersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAccountCharactersResponse& operator=(GetAccountCharactersResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAccountCharactersResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAccountCharactersResponse* internal_default_instance() {
    return reinterpret_cast<const GetAccountCharactersResponse*>(
               &_GetAccountCharactersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetAccountCharactersResponse& a, GetAccountCharactersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAccountCharactersResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAccountCharactersResponse* New() const final {
    return CreateMaybeMessage<GetAccountCharactersResponse>(nullptr);
  }

  GetAccountCharactersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAccountCharactersResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAccountCharactersResponse& from);
  void MergeFrom(const GetAccountCharactersResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAccountCharactersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.GetAccountCharactersResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_accounts_2faccounts_2eproto);
    return ::descriptor_table_accounts_2faccounts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterIdsFieldNumber = 1,
  };
  // repeated uint32 character_ids = 1;
  int character_ids_size() const;
  private:
  int _internal_character_ids_size() const;
  public:
  void clear_character_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_character_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_character_ids() const;
  void _internal_add_character_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_character_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 character_ids(int index) const;
  void set_character_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_character_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      character_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_character_ids();

  // @@protoc_insertion_point(class_scope:mruv.GetAccountCharactersResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > character_ids_;
  mutable std::atomic<int> _character_ids_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class IsAccountExistRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.IsAccountExistRequest) */ {
 public:
  IsAccountExistRequest();
  virtual ~IsAccountExistRequest();

  IsAccountExistRequest(const IsAccountExistRequest& from);
  IsAccountExistRequest(IsAccountExistRequest&& from) noexcept
    : IsAccountExistRequest() {
    *this = ::std::move(from);
  }

  inline IsAccountExistRequest& operator=(const IsAccountExistRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsAccountExistRequest& operator=(IsAccountExistRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IsAccountExistRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IsAccountExistRequest* internal_default_instance() {
    return reinterpret_cast<const IsAccountExistRequest*>(
               &_IsAccountExistRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(IsAccountExistRequest& a, IsAccountExistRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IsAccountExistRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IsAccountExistRequest* New() const final {
    return CreateMaybeMessage<IsAccountExistRequest>(nullptr);
  }

  IsAccountExistRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IsAccountExistRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IsAccountExistRequest& from);
  void MergeFrom(const IsAccountExistRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IsAccountExistRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.IsAccountExistRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_accounts_2faccounts_2eproto);
    return ::descriptor_table_accounts_2faccounts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginFieldNumber = 1,
  };
  // string login = 1;
  void clear_login();
  const std::string& login() const;
  void set_login(const std::string& value);
  void set_login(std::string&& value);
  void set_login(const char* value);
  void set_login(const char* value, size_t size);
  std::string* mutable_login();
  std::string* release_login();
  void set_allocated_login(std::string* login);
  private:
  const std::string& _internal_login() const;
  void _internal_set_login(const std::string& value);
  std::string* _internal_mutable_login();
  public:

  // @@protoc_insertion_point(class_scope:mruv.IsAccountExistRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class IsAccountExistResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.IsAccountExistResponse) */ {
 public:
  IsAccountExistResponse();
  virtual ~IsAccountExistResponse();

  IsAccountExistResponse(const IsAccountExistResponse& from);
  IsAccountExistResponse(IsAccountExistResponse&& from) noexcept
    : IsAccountExistResponse() {
    *this = ::std::move(from);
  }

  inline IsAccountExistResponse& operator=(const IsAccountExistResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsAccountExistResponse& operator=(IsAccountExistResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IsAccountExistResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IsAccountExistResponse* internal_default_instance() {
    return reinterpret_cast<const IsAccountExistResponse*>(
               &_IsAccountExistResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(IsAccountExistResponse& a, IsAccountExistResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IsAccountExistResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IsAccountExistResponse* New() const final {
    return CreateMaybeMessage<IsAccountExistResponse>(nullptr);
  }

  IsAccountExistResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IsAccountExistResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IsAccountExistResponse& from);
  void MergeFrom(const IsAccountExistResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IsAccountExistResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.IsAccountExistResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_accounts_2faccounts_2eproto);
    return ::descriptor_table_accounts_2faccounts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExistsFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // bool exists = 1;
  void clear_exists();
  bool exists() const;
  void set_exists(bool value);
  private:
  bool _internal_exists() const;
  void _internal_set_exists(bool value);
  public:

  // uint32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.IsAccountExistResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool exists_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2faccounts_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RegisterAccountRequest

// string login = 1;
inline void RegisterAccountRequest::clear_login() {
  login_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegisterAccountRequest::login() const {
  // @@protoc_insertion_point(field_get:mruv.RegisterAccountRequest.login)
  return _internal_login();
}
inline void RegisterAccountRequest::set_login(const std::string& value) {
  _internal_set_login(value);
  // @@protoc_insertion_point(field_set:mruv.RegisterAccountRequest.login)
}
inline std::string* RegisterAccountRequest::mutable_login() {
  // @@protoc_insertion_point(field_mutable:mruv.RegisterAccountRequest.login)
  return _internal_mutable_login();
}
inline const std::string& RegisterAccountRequest::_internal_login() const {
  return login_.GetNoArena();
}
inline void RegisterAccountRequest::_internal_set_login(const std::string& value) {
  
  login_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RegisterAccountRequest::set_login(std::string&& value) {
  
  login_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.RegisterAccountRequest.login)
}
inline void RegisterAccountRequest::set_login(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  login_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.RegisterAccountRequest.login)
}
inline void RegisterAccountRequest::set_login(const char* value, size_t size) {
  
  login_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.RegisterAccountRequest.login)
}
inline std::string* RegisterAccountRequest::_internal_mutable_login() {
  
  return login_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegisterAccountRequest::release_login() {
  // @@protoc_insertion_point(field_release:mruv.RegisterAccountRequest.login)
  
  return login_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterAccountRequest::set_allocated_login(std::string* login) {
  if (login != nullptr) {
    
  } else {
    
  }
  login_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), login);
  // @@protoc_insertion_point(field_set_allocated:mruv.RegisterAccountRequest.login)
}

// string password = 2;
inline void RegisterAccountRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegisterAccountRequest::password() const {
  // @@protoc_insertion_point(field_get:mruv.RegisterAccountRequest.password)
  return _internal_password();
}
inline void RegisterAccountRequest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:mruv.RegisterAccountRequest.password)
}
inline std::string* RegisterAccountRequest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:mruv.RegisterAccountRequest.password)
  return _internal_mutable_password();
}
inline const std::string& RegisterAccountRequest::_internal_password() const {
  return password_.GetNoArena();
}
inline void RegisterAccountRequest::_internal_set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RegisterAccountRequest::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.RegisterAccountRequest.password)
}
inline void RegisterAccountRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.RegisterAccountRequest.password)
}
inline void RegisterAccountRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.RegisterAccountRequest.password)
}
inline std::string* RegisterAccountRequest::_internal_mutable_password() {
  
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegisterAccountRequest::release_password() {
  // @@protoc_insertion_point(field_release:mruv.RegisterAccountRequest.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterAccountRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:mruv.RegisterAccountRequest.password)
}

// string email = 3;
inline void RegisterAccountRequest::clear_email() {
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegisterAccountRequest::email() const {
  // @@protoc_insertion_point(field_get:mruv.RegisterAccountRequest.email)
  return _internal_email();
}
inline void RegisterAccountRequest::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:mruv.RegisterAccountRequest.email)
}
inline std::string* RegisterAccountRequest::mutable_email() {
  // @@protoc_insertion_point(field_mutable:mruv.RegisterAccountRequest.email)
  return _internal_mutable_email();
}
inline const std::string& RegisterAccountRequest::_internal_email() const {
  return email_.GetNoArena();
}
inline void RegisterAccountRequest::_internal_set_email(const std::string& value) {
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RegisterAccountRequest::set_email(std::string&& value) {
  
  email_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.RegisterAccountRequest.email)
}
inline void RegisterAccountRequest::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.RegisterAccountRequest.email)
}
inline void RegisterAccountRequest::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.RegisterAccountRequest.email)
}
inline std::string* RegisterAccountRequest::_internal_mutable_email() {
  
  return email_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegisterAccountRequest::release_email() {
  // @@protoc_insertion_point(field_release:mruv.RegisterAccountRequest.email)
  
  return email_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterAccountRequest::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:mruv.RegisterAccountRequest.email)
}

// -------------------------------------------------------------------

// RegisterAccountResponse

// bool success = 1;
inline void RegisterAccountResponse::clear_success() {
  success_ = false;
}
inline bool RegisterAccountResponse::_internal_success() const {
  return success_;
}
inline bool RegisterAccountResponse::success() const {
  // @@protoc_insertion_point(field_get:mruv.RegisterAccountResponse.success)
  return _internal_success();
}
inline void RegisterAccountResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void RegisterAccountResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:mruv.RegisterAccountResponse.success)
}

// uint32 account_id = 2;
inline void RegisterAccountResponse::clear_account_id() {
  account_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegisterAccountResponse::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegisterAccountResponse::account_id() const {
  // @@protoc_insertion_point(field_get:mruv.RegisterAccountResponse.account_id)
  return _internal_account_id();
}
inline void RegisterAccountResponse::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  account_id_ = value;
}
inline void RegisterAccountResponse::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:mruv.RegisterAccountResponse.account_id)
}

// -------------------------------------------------------------------

// LogInRequest

// string login = 1;
inline void LogInRequest::clear_login() {
  login_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LogInRequest::login() const {
  // @@protoc_insertion_point(field_get:mruv.LogInRequest.login)
  return _internal_login();
}
inline void LogInRequest::set_login(const std::string& value) {
  _internal_set_login(value);
  // @@protoc_insertion_point(field_set:mruv.LogInRequest.login)
}
inline std::string* LogInRequest::mutable_login() {
  // @@protoc_insertion_point(field_mutable:mruv.LogInRequest.login)
  return _internal_mutable_login();
}
inline const std::string& LogInRequest::_internal_login() const {
  return login_.GetNoArena();
}
inline void LogInRequest::_internal_set_login(const std::string& value) {
  
  login_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LogInRequest::set_login(std::string&& value) {
  
  login_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.LogInRequest.login)
}
inline void LogInRequest::set_login(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  login_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.LogInRequest.login)
}
inline void LogInRequest::set_login(const char* value, size_t size) {
  
  login_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.LogInRequest.login)
}
inline std::string* LogInRequest::_internal_mutable_login() {
  
  return login_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LogInRequest::release_login() {
  // @@protoc_insertion_point(field_release:mruv.LogInRequest.login)
  
  return login_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LogInRequest::set_allocated_login(std::string* login) {
  if (login != nullptr) {
    
  } else {
    
  }
  login_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), login);
  // @@protoc_insertion_point(field_set_allocated:mruv.LogInRequest.login)
}

// string password = 2;
inline void LogInRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LogInRequest::password() const {
  // @@protoc_insertion_point(field_get:mruv.LogInRequest.password)
  return _internal_password();
}
inline void LogInRequest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:mruv.LogInRequest.password)
}
inline std::string* LogInRequest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:mruv.LogInRequest.password)
  return _internal_mutable_password();
}
inline const std::string& LogInRequest::_internal_password() const {
  return password_.GetNoArena();
}
inline void LogInRequest::_internal_set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LogInRequest::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.LogInRequest.password)
}
inline void LogInRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.LogInRequest.password)
}
inline void LogInRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.LogInRequest.password)
}
inline std::string* LogInRequest::_internal_mutable_password() {
  
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LogInRequest::release_password() {
  // @@protoc_insertion_point(field_release:mruv.LogInRequest.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LogInRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:mruv.LogInRequest.password)
}

// -------------------------------------------------------------------

// LogInResponse

// bool success = 1;
inline void LogInResponse::clear_success() {
  success_ = false;
}
inline bool LogInResponse::_internal_success() const {
  return success_;
}
inline bool LogInResponse::success() const {
  // @@protoc_insertion_point(field_get:mruv.LogInResponse.success)
  return _internal_success();
}
inline void LogInResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void LogInResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:mruv.LogInResponse.success)
}

// uint32 account_id = 2;
inline void LogInResponse::clear_account_id() {
  account_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogInResponse::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogInResponse::account_id() const {
  // @@protoc_insertion_point(field_get:mruv.LogInResponse.account_id)
  return _internal_account_id();
}
inline void LogInResponse::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  account_id_ = value;
}
inline void LogInResponse::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:mruv.LogInResponse.account_id)
}

// -------------------------------------------------------------------

// GetAccountRequest

// string login = 1;
inline void GetAccountRequest::clear_login() {
  login_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetAccountRequest::login() const {
  // @@protoc_insertion_point(field_get:mruv.GetAccountRequest.login)
  return _internal_login();
}
inline void GetAccountRequest::set_login(const std::string& value) {
  _internal_set_login(value);
  // @@protoc_insertion_point(field_set:mruv.GetAccountRequest.login)
}
inline std::string* GetAccountRequest::mutable_login() {
  // @@protoc_insertion_point(field_mutable:mruv.GetAccountRequest.login)
  return _internal_mutable_login();
}
inline const std::string& GetAccountRequest::_internal_login() const {
  return login_.GetNoArena();
}
inline void GetAccountRequest::_internal_set_login(const std::string& value) {
  
  login_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetAccountRequest::set_login(std::string&& value) {
  
  login_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.GetAccountRequest.login)
}
inline void GetAccountRequest::set_login(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  login_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.GetAccountRequest.login)
}
inline void GetAccountRequest::set_login(const char* value, size_t size) {
  
  login_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.GetAccountRequest.login)
}
inline std::string* GetAccountRequest::_internal_mutable_login() {
  
  return login_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAccountRequest::release_login() {
  // @@protoc_insertion_point(field_release:mruv.GetAccountRequest.login)
  
  return login_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAccountRequest::set_allocated_login(std::string* login) {
  if (login != nullptr) {
    
  } else {
    
  }
  login_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), login);
  // @@protoc_insertion_point(field_set_allocated:mruv.GetAccountRequest.login)
}

// -------------------------------------------------------------------

// GetAccountResponse

// string login = 1;
inline void GetAccountResponse::clear_login() {
  login_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetAccountResponse::login() const {
  // @@protoc_insertion_point(field_get:mruv.GetAccountResponse.login)
  return _internal_login();
}
inline void GetAccountResponse::set_login(const std::string& value) {
  _internal_set_login(value);
  // @@protoc_insertion_point(field_set:mruv.GetAccountResponse.login)
}
inline std::string* GetAccountResponse::mutable_login() {
  // @@protoc_insertion_point(field_mutable:mruv.GetAccountResponse.login)
  return _internal_mutable_login();
}
inline const std::string& GetAccountResponse::_internal_login() const {
  return login_.GetNoArena();
}
inline void GetAccountResponse::_internal_set_login(const std::string& value) {
  
  login_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetAccountResponse::set_login(std::string&& value) {
  
  login_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.GetAccountResponse.login)
}
inline void GetAccountResponse::set_login(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  login_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.GetAccountResponse.login)
}
inline void GetAccountResponse::set_login(const char* value, size_t size) {
  
  login_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.GetAccountResponse.login)
}
inline std::string* GetAccountResponse::_internal_mutable_login() {
  
  return login_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAccountResponse::release_login() {
  // @@protoc_insertion_point(field_release:mruv.GetAccountResponse.login)
  
  return login_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAccountResponse::set_allocated_login(std::string* login) {
  if (login != nullptr) {
    
  } else {
    
  }
  login_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), login);
  // @@protoc_insertion_point(field_set_allocated:mruv.GetAccountResponse.login)
}

// string email = 2;
inline void GetAccountResponse::clear_email() {
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetAccountResponse::email() const {
  // @@protoc_insertion_point(field_get:mruv.GetAccountResponse.email)
  return _internal_email();
}
inline void GetAccountResponse::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:mruv.GetAccountResponse.email)
}
inline std::string* GetAccountResponse::mutable_email() {
  // @@protoc_insertion_point(field_mutable:mruv.GetAccountResponse.email)
  return _internal_mutable_email();
}
inline const std::string& GetAccountResponse::_internal_email() const {
  return email_.GetNoArena();
}
inline void GetAccountResponse::_internal_set_email(const std::string& value) {
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetAccountResponse::set_email(std::string&& value) {
  
  email_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.GetAccountResponse.email)
}
inline void GetAccountResponse::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.GetAccountResponse.email)
}
inline void GetAccountResponse::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.GetAccountResponse.email)
}
inline std::string* GetAccountResponse::_internal_mutable_email() {
  
  return email_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAccountResponse::release_email() {
  // @@protoc_insertion_point(field_release:mruv.GetAccountResponse.email)
  
  return email_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAccountResponse::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:mruv.GetAccountResponse.email)
}

// -------------------------------------------------------------------

// GetAccountCharactersRequest

// string login = 1;
inline void GetAccountCharactersRequest::clear_login() {
  login_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetAccountCharactersRequest::login() const {
  // @@protoc_insertion_point(field_get:mruv.GetAccountCharactersRequest.login)
  return _internal_login();
}
inline void GetAccountCharactersRequest::set_login(const std::string& value) {
  _internal_set_login(value);
  // @@protoc_insertion_point(field_set:mruv.GetAccountCharactersRequest.login)
}
inline std::string* GetAccountCharactersRequest::mutable_login() {
  // @@protoc_insertion_point(field_mutable:mruv.GetAccountCharactersRequest.login)
  return _internal_mutable_login();
}
inline const std::string& GetAccountCharactersRequest::_internal_login() const {
  return login_.GetNoArena();
}
inline void GetAccountCharactersRequest::_internal_set_login(const std::string& value) {
  
  login_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetAccountCharactersRequest::set_login(std::string&& value) {
  
  login_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.GetAccountCharactersRequest.login)
}
inline void GetAccountCharactersRequest::set_login(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  login_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.GetAccountCharactersRequest.login)
}
inline void GetAccountCharactersRequest::set_login(const char* value, size_t size) {
  
  login_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.GetAccountCharactersRequest.login)
}
inline std::string* GetAccountCharactersRequest::_internal_mutable_login() {
  
  return login_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAccountCharactersRequest::release_login() {
  // @@protoc_insertion_point(field_release:mruv.GetAccountCharactersRequest.login)
  
  return login_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAccountCharactersRequest::set_allocated_login(std::string* login) {
  if (login != nullptr) {
    
  } else {
    
  }
  login_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), login);
  // @@protoc_insertion_point(field_set_allocated:mruv.GetAccountCharactersRequest.login)
}

// -------------------------------------------------------------------

// GetAccountCharactersResponse

// repeated uint32 character_ids = 1;
inline int GetAccountCharactersResponse::_internal_character_ids_size() const {
  return character_ids_.size();
}
inline int GetAccountCharactersResponse::character_ids_size() const {
  return _internal_character_ids_size();
}
inline void GetAccountCharactersResponse::clear_character_ids() {
  character_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetAccountCharactersResponse::_internal_character_ids(int index) const {
  return character_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetAccountCharactersResponse::character_ids(int index) const {
  // @@protoc_insertion_point(field_get:mruv.GetAccountCharactersResponse.character_ids)
  return _internal_character_ids(index);
}
inline void GetAccountCharactersResponse::set_character_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  character_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:mruv.GetAccountCharactersResponse.character_ids)
}
inline void GetAccountCharactersResponse::_internal_add_character_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  character_ids_.Add(value);
}
inline void GetAccountCharactersResponse::add_character_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_character_ids(value);
  // @@protoc_insertion_point(field_add:mruv.GetAccountCharactersResponse.character_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
GetAccountCharactersResponse::_internal_character_ids() const {
  return character_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
GetAccountCharactersResponse::character_ids() const {
  // @@protoc_insertion_point(field_list:mruv.GetAccountCharactersResponse.character_ids)
  return _internal_character_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
GetAccountCharactersResponse::_internal_mutable_character_ids() {
  return &character_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
GetAccountCharactersResponse::mutable_character_ids() {
  // @@protoc_insertion_point(field_mutable_list:mruv.GetAccountCharactersResponse.character_ids)
  return _internal_mutable_character_ids();
}

// -------------------------------------------------------------------

// IsAccountExistRequest

// string login = 1;
inline void IsAccountExistRequest::clear_login() {
  login_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IsAccountExistRequest::login() const {
  // @@protoc_insertion_point(field_get:mruv.IsAccountExistRequest.login)
  return _internal_login();
}
inline void IsAccountExistRequest::set_login(const std::string& value) {
  _internal_set_login(value);
  // @@protoc_insertion_point(field_set:mruv.IsAccountExistRequest.login)
}
inline std::string* IsAccountExistRequest::mutable_login() {
  // @@protoc_insertion_point(field_mutable:mruv.IsAccountExistRequest.login)
  return _internal_mutable_login();
}
inline const std::string& IsAccountExistRequest::_internal_login() const {
  return login_.GetNoArena();
}
inline void IsAccountExistRequest::_internal_set_login(const std::string& value) {
  
  login_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void IsAccountExistRequest::set_login(std::string&& value) {
  
  login_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.IsAccountExistRequest.login)
}
inline void IsAccountExistRequest::set_login(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  login_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.IsAccountExistRequest.login)
}
inline void IsAccountExistRequest::set_login(const char* value, size_t size) {
  
  login_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.IsAccountExistRequest.login)
}
inline std::string* IsAccountExistRequest::_internal_mutable_login() {
  
  return login_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IsAccountExistRequest::release_login() {
  // @@protoc_insertion_point(field_release:mruv.IsAccountExistRequest.login)
  
  return login_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IsAccountExistRequest::set_allocated_login(std::string* login) {
  if (login != nullptr) {
    
  } else {
    
  }
  login_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), login);
  // @@protoc_insertion_point(field_set_allocated:mruv.IsAccountExistRequest.login)
}

// -------------------------------------------------------------------

// IsAccountExistResponse

// bool exists = 1;
inline void IsAccountExistResponse::clear_exists() {
  exists_ = false;
}
inline bool IsAccountExistResponse::_internal_exists() const {
  return exists_;
}
inline bool IsAccountExistResponse::exists() const {
  // @@protoc_insertion_point(field_get:mruv.IsAccountExistResponse.exists)
  return _internal_exists();
}
inline void IsAccountExistResponse::_internal_set_exists(bool value) {
  
  exists_ = value;
}
inline void IsAccountExistResponse::set_exists(bool value) {
  _internal_set_exists(value);
  // @@protoc_insertion_point(field_set:mruv.IsAccountExistResponse.exists)
}

// uint32 id = 2;
inline void IsAccountExistResponse::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IsAccountExistResponse::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IsAccountExistResponse::id() const {
  // @@protoc_insertion_point(field_get:mruv.IsAccountExistResponse.id)
  return _internal_id();
}
inline void IsAccountExistResponse::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void IsAccountExistResponse::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.IsAccountExistResponse.id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mruv

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_accounts_2faccounts_2eproto
