// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: accounts/accounts.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_accounts_2faccounts_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_accounts_2faccounts_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "accounts/accounts_model.pb.h"
#include "characters/characters_model.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_accounts_2faccounts_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_accounts_2faccounts_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_accounts_2faccounts_2eproto;
namespace mruv {
class GetAccountCharactersResponse;
class GetAccountCharactersResponseDefaultTypeInternal;
extern GetAccountCharactersResponseDefaultTypeInternal _GetAccountCharactersResponse_default_instance_;
class LogInRequest;
class LogInRequestDefaultTypeInternal;
extern LogInRequestDefaultTypeInternal _LogInRequest_default_instance_;
class LogInResponse;
class LogInResponseDefaultTypeInternal;
extern LogInResponseDefaultTypeInternal _LogInResponse_default_instance_;
class RegisterAccountRequest;
class RegisterAccountRequestDefaultTypeInternal;
extern RegisterAccountRequestDefaultTypeInternal _RegisterAccountRequest_default_instance_;
class RegisterAccountResponse;
class RegisterAccountResponseDefaultTypeInternal;
extern RegisterAccountResponseDefaultTypeInternal _RegisterAccountResponse_default_instance_;
}  // namespace mruv
PROTOBUF_NAMESPACE_OPEN
template<> ::mruv::GetAccountCharactersResponse* Arena::CreateMaybeMessage<::mruv::GetAccountCharactersResponse>(Arena*);
template<> ::mruv::LogInRequest* Arena::CreateMaybeMessage<::mruv::LogInRequest>(Arena*);
template<> ::mruv::LogInResponse* Arena::CreateMaybeMessage<::mruv::LogInResponse>(Arena*);
template<> ::mruv::RegisterAccountRequest* Arena::CreateMaybeMessage<::mruv::RegisterAccountRequest>(Arena*);
template<> ::mruv::RegisterAccountResponse* Arena::CreateMaybeMessage<::mruv::RegisterAccountResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mruv {

// ===================================================================

class RegisterAccountRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.RegisterAccountRequest) */ {
 public:
  RegisterAccountRequest();
  virtual ~RegisterAccountRequest();

  RegisterAccountRequest(const RegisterAccountRequest& from);
  RegisterAccountRequest(RegisterAccountRequest&& from) noexcept
    : RegisterAccountRequest() {
    *this = ::std::move(from);
  }

  inline RegisterAccountRequest& operator=(const RegisterAccountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterAccountRequest& operator=(RegisterAccountRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterAccountRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterAccountRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterAccountRequest*>(
               &_RegisterAccountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RegisterAccountRequest* other);
  friend void swap(RegisterAccountRequest& a, RegisterAccountRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisterAccountRequest* New() const final {
    return CreateMaybeMessage<RegisterAccountRequest>(nullptr);
  }

  RegisterAccountRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterAccountRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterAccountRequest& from);
  void MergeFrom(const RegisterAccountRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterAccountRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.RegisterAccountRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_accounts_2faccounts_2eproto);
    return ::descriptor_table_accounts_2faccounts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);

  // .mruv.Account account = 1;
  bool has_account() const;
  void clear_account();
  static const int kAccountFieldNumber = 1;
  const ::mruv::Account& account() const;
  ::mruv::Account* release_account();
  ::mruv::Account* mutable_account();
  void set_allocated_account(::mruv::Account* account);

  // @@protoc_insertion_point(class_scope:mruv.RegisterAccountRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::mruv::Account* account_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class RegisterAccountResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.RegisterAccountResponse) */ {
 public:
  RegisterAccountResponse();
  virtual ~RegisterAccountResponse();

  RegisterAccountResponse(const RegisterAccountResponse& from);
  RegisterAccountResponse(RegisterAccountResponse&& from) noexcept
    : RegisterAccountResponse() {
    *this = ::std::move(from);
  }

  inline RegisterAccountResponse& operator=(const RegisterAccountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterAccountResponse& operator=(RegisterAccountResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterAccountResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterAccountResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterAccountResponse*>(
               &_RegisterAccountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RegisterAccountResponse* other);
  friend void swap(RegisterAccountResponse& a, RegisterAccountResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisterAccountResponse* New() const final {
    return CreateMaybeMessage<RegisterAccountResponse>(nullptr);
  }

  RegisterAccountResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterAccountResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterAccountResponse& from);
  void MergeFrom(const RegisterAccountResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterAccountResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.RegisterAccountResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_accounts_2faccounts_2eproto);
    return ::descriptor_table_accounts_2faccounts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // uint32 account_id = 2;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:mruv.RegisterAccountResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class LogInRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.LogInRequest) */ {
 public:
  LogInRequest();
  virtual ~LogInRequest();

  LogInRequest(const LogInRequest& from);
  LogInRequest(LogInRequest&& from) noexcept
    : LogInRequest() {
    *this = ::std::move(from);
  }

  inline LogInRequest& operator=(const LogInRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogInRequest& operator=(LogInRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogInRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogInRequest* internal_default_instance() {
    return reinterpret_cast<const LogInRequest*>(
               &_LogInRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LogInRequest* other);
  friend void swap(LogInRequest& a, LogInRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogInRequest* New() const final {
    return CreateMaybeMessage<LogInRequest>(nullptr);
  }

  LogInRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogInRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogInRequest& from);
  void MergeFrom(const LogInRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogInRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.LogInRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_accounts_2faccounts_2eproto);
    return ::descriptor_table_accounts_2faccounts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string login = 1;
  void clear_login();
  static const int kLoginFieldNumber = 1;
  const std::string& login() const;
  void set_login(const std::string& value);
  void set_login(std::string&& value);
  void set_login(const char* value);
  void set_login(const char* value, size_t size);
  std::string* mutable_login();
  std::string* release_login();
  void set_allocated_login(std::string* login);

  // string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);

  // @@protoc_insertion_point(class_scope:mruv.LogInRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class LogInResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.LogInResponse) */ {
 public:
  LogInResponse();
  virtual ~LogInResponse();

  LogInResponse(const LogInResponse& from);
  LogInResponse(LogInResponse&& from) noexcept
    : LogInResponse() {
    *this = ::std::move(from);
  }

  inline LogInResponse& operator=(const LogInResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogInResponse& operator=(LogInResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogInResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogInResponse* internal_default_instance() {
    return reinterpret_cast<const LogInResponse*>(
               &_LogInResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(LogInResponse* other);
  friend void swap(LogInResponse& a, LogInResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogInResponse* New() const final {
    return CreateMaybeMessage<LogInResponse>(nullptr);
  }

  LogInResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogInResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogInResponse& from);
  void MergeFrom(const LogInResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogInResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.LogInResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_accounts_2faccounts_2eproto);
    return ::descriptor_table_accounts_2faccounts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // uint32 account_id = 2;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:mruv.LogInResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class GetAccountCharactersResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.GetAccountCharactersResponse) */ {
 public:
  GetAccountCharactersResponse();
  virtual ~GetAccountCharactersResponse();

  GetAccountCharactersResponse(const GetAccountCharactersResponse& from);
  GetAccountCharactersResponse(GetAccountCharactersResponse&& from) noexcept
    : GetAccountCharactersResponse() {
    *this = ::std::move(from);
  }

  inline GetAccountCharactersResponse& operator=(const GetAccountCharactersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAccountCharactersResponse& operator=(GetAccountCharactersResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAccountCharactersResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAccountCharactersResponse* internal_default_instance() {
    return reinterpret_cast<const GetAccountCharactersResponse*>(
               &_GetAccountCharactersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(GetAccountCharactersResponse* other);
  friend void swap(GetAccountCharactersResponse& a, GetAccountCharactersResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetAccountCharactersResponse* New() const final {
    return CreateMaybeMessage<GetAccountCharactersResponse>(nullptr);
  }

  GetAccountCharactersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAccountCharactersResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAccountCharactersResponse& from);
  void MergeFrom(const GetAccountCharactersResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAccountCharactersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.GetAccountCharactersResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_accounts_2faccounts_2eproto);
    return ::descriptor_table_accounts_2faccounts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mruv.Character characters = 1;
  int characters_size() const;
  void clear_characters();
  static const int kCharactersFieldNumber = 1;
  ::mruv::Character* mutable_characters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::Character >*
      mutable_characters();
  const ::mruv::Character& characters(int index) const;
  ::mruv::Character* add_characters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::Character >&
      characters() const;

  // @@protoc_insertion_point(class_scope:mruv.GetAccountCharactersResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::Character > characters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2faccounts_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RegisterAccountRequest

// .mruv.Account account = 1;
inline bool RegisterAccountRequest::has_account() const {
  return this != internal_default_instance() && account_ != nullptr;
}
inline const ::mruv::Account& RegisterAccountRequest::account() const {
  const ::mruv::Account* p = account_;
  // @@protoc_insertion_point(field_get:mruv.RegisterAccountRequest.account)
  return p != nullptr ? *p : *reinterpret_cast<const ::mruv::Account*>(
      &::mruv::_Account_default_instance_);
}
inline ::mruv::Account* RegisterAccountRequest::release_account() {
  // @@protoc_insertion_point(field_release:mruv.RegisterAccountRequest.account)
  
  ::mruv::Account* temp = account_;
  account_ = nullptr;
  return temp;
}
inline ::mruv::Account* RegisterAccountRequest::mutable_account() {
  
  if (account_ == nullptr) {
    auto* p = CreateMaybeMessage<::mruv::Account>(GetArenaNoVirtual());
    account_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mruv.RegisterAccountRequest.account)
  return account_;
}
inline void RegisterAccountRequest::set_allocated_account(::mruv::Account* account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_);
  }
  if (account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }
    
  } else {
    
  }
  account_ = account;
  // @@protoc_insertion_point(field_set_allocated:mruv.RegisterAccountRequest.account)
}

// string password = 2;
inline void RegisterAccountRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegisterAccountRequest::password() const {
  // @@protoc_insertion_point(field_get:mruv.RegisterAccountRequest.password)
  return password_.GetNoArena();
}
inline void RegisterAccountRequest::set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mruv.RegisterAccountRequest.password)
}
inline void RegisterAccountRequest::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.RegisterAccountRequest.password)
}
inline void RegisterAccountRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.RegisterAccountRequest.password)
}
inline void RegisterAccountRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.RegisterAccountRequest.password)
}
inline std::string* RegisterAccountRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:mruv.RegisterAccountRequest.password)
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegisterAccountRequest::release_password() {
  // @@protoc_insertion_point(field_release:mruv.RegisterAccountRequest.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterAccountRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:mruv.RegisterAccountRequest.password)
}

// -------------------------------------------------------------------

// RegisterAccountResponse

// bool success = 1;
inline void RegisterAccountResponse::clear_success() {
  success_ = false;
}
inline bool RegisterAccountResponse::success() const {
  // @@protoc_insertion_point(field_get:mruv.RegisterAccountResponse.success)
  return success_;
}
inline void RegisterAccountResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:mruv.RegisterAccountResponse.success)
}

// uint32 account_id = 2;
inline void RegisterAccountResponse::clear_account_id() {
  account_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegisterAccountResponse::account_id() const {
  // @@protoc_insertion_point(field_get:mruv.RegisterAccountResponse.account_id)
  return account_id_;
}
inline void RegisterAccountResponse::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  account_id_ = value;
  // @@protoc_insertion_point(field_set:mruv.RegisterAccountResponse.account_id)
}

// -------------------------------------------------------------------

// LogInRequest

// string login = 1;
inline void LogInRequest::clear_login() {
  login_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LogInRequest::login() const {
  // @@protoc_insertion_point(field_get:mruv.LogInRequest.login)
  return login_.GetNoArena();
}
inline void LogInRequest::set_login(const std::string& value) {
  
  login_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mruv.LogInRequest.login)
}
inline void LogInRequest::set_login(std::string&& value) {
  
  login_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.LogInRequest.login)
}
inline void LogInRequest::set_login(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  login_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.LogInRequest.login)
}
inline void LogInRequest::set_login(const char* value, size_t size) {
  
  login_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.LogInRequest.login)
}
inline std::string* LogInRequest::mutable_login() {
  
  // @@protoc_insertion_point(field_mutable:mruv.LogInRequest.login)
  return login_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LogInRequest::release_login() {
  // @@protoc_insertion_point(field_release:mruv.LogInRequest.login)
  
  return login_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LogInRequest::set_allocated_login(std::string* login) {
  if (login != nullptr) {
    
  } else {
    
  }
  login_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), login);
  // @@protoc_insertion_point(field_set_allocated:mruv.LogInRequest.login)
}

// string password = 2;
inline void LogInRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LogInRequest::password() const {
  // @@protoc_insertion_point(field_get:mruv.LogInRequest.password)
  return password_.GetNoArena();
}
inline void LogInRequest::set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mruv.LogInRequest.password)
}
inline void LogInRequest::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.LogInRequest.password)
}
inline void LogInRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.LogInRequest.password)
}
inline void LogInRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.LogInRequest.password)
}
inline std::string* LogInRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:mruv.LogInRequest.password)
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LogInRequest::release_password() {
  // @@protoc_insertion_point(field_release:mruv.LogInRequest.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LogInRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:mruv.LogInRequest.password)
}

// -------------------------------------------------------------------

// LogInResponse

// bool success = 1;
inline void LogInResponse::clear_success() {
  success_ = false;
}
inline bool LogInResponse::success() const {
  // @@protoc_insertion_point(field_get:mruv.LogInResponse.success)
  return success_;
}
inline void LogInResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:mruv.LogInResponse.success)
}

// uint32 account_id = 2;
inline void LogInResponse::clear_account_id() {
  account_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogInResponse::account_id() const {
  // @@protoc_insertion_point(field_get:mruv.LogInResponse.account_id)
  return account_id_;
}
inline void LogInResponse::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  account_id_ = value;
  // @@protoc_insertion_point(field_set:mruv.LogInResponse.account_id)
}

// -------------------------------------------------------------------

// GetAccountCharactersResponse

// repeated .mruv.Character characters = 1;
inline int GetAccountCharactersResponse::characters_size() const {
  return characters_.size();
}
inline ::mruv::Character* GetAccountCharactersResponse::mutable_characters(int index) {
  // @@protoc_insertion_point(field_mutable:mruv.GetAccountCharactersResponse.characters)
  return characters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::Character >*
GetAccountCharactersResponse::mutable_characters() {
  // @@protoc_insertion_point(field_mutable_list:mruv.GetAccountCharactersResponse.characters)
  return &characters_;
}
inline const ::mruv::Character& GetAccountCharactersResponse::characters(int index) const {
  // @@protoc_insertion_point(field_get:mruv.GetAccountCharactersResponse.characters)
  return characters_.Get(index);
}
inline ::mruv::Character* GetAccountCharactersResponse::add_characters() {
  // @@protoc_insertion_point(field_add:mruv.GetAccountCharactersResponse.characters)
  return characters_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::Character >&
GetAccountCharactersResponse::characters() const {
  // @@protoc_insertion_point(field_list:mruv.GetAccountCharactersResponse.characters)
  return characters_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mruv

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_accounts_2faccounts_2eproto
