// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server/server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_server_2fserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_server_2fserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "server/server_model.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_server_2fserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_server_2fserver_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_server_2fserver_2eproto;
namespace mruv {
namespace server {
class GetRegisteredServersRequest;
class GetRegisteredServersRequestDefaultTypeInternal;
extern GetRegisteredServersRequestDefaultTypeInternal _GetRegisteredServersRequest_default_instance_;
class GetRegisteredServersResponse;
class GetRegisteredServersResponseDefaultTypeInternal;
extern GetRegisteredServersResponseDefaultTypeInternal _GetRegisteredServersResponse_default_instance_;
class ServerEvent;
class ServerEventDefaultTypeInternal;
extern ServerEventDefaultTypeInternal _ServerEvent_default_instance_;
class ServerEventsStreamRequest;
class ServerEventsStreamRequestDefaultTypeInternal;
extern ServerEventsStreamRequestDefaultTypeInternal _ServerEventsStreamRequest_default_instance_;
class UpdateServerStatusRequest;
class UpdateServerStatusRequestDefaultTypeInternal;
extern UpdateServerStatusRequestDefaultTypeInternal _UpdateServerStatusRequest_default_instance_;
class UpdateServerStatusResponse;
class UpdateServerStatusResponseDefaultTypeInternal;
extern UpdateServerStatusResponseDefaultTypeInternal _UpdateServerStatusResponse_default_instance_;
}  // namespace server
}  // namespace mruv
PROTOBUF_NAMESPACE_OPEN
template<> ::mruv::server::GetRegisteredServersRequest* Arena::CreateMaybeMessage<::mruv::server::GetRegisteredServersRequest>(Arena*);
template<> ::mruv::server::GetRegisteredServersResponse* Arena::CreateMaybeMessage<::mruv::server::GetRegisteredServersResponse>(Arena*);
template<> ::mruv::server::ServerEvent* Arena::CreateMaybeMessage<::mruv::server::ServerEvent>(Arena*);
template<> ::mruv::server::ServerEventsStreamRequest* Arena::CreateMaybeMessage<::mruv::server::ServerEventsStreamRequest>(Arena*);
template<> ::mruv::server::UpdateServerStatusRequest* Arena::CreateMaybeMessage<::mruv::server::UpdateServerStatusRequest>(Arena*);
template<> ::mruv::server::UpdateServerStatusResponse* Arena::CreateMaybeMessage<::mruv::server::UpdateServerStatusResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mruv {
namespace server {

enum ServerEvent_ServerEventType : int {
  ServerEvent_ServerEventType_UNKNOWN = 0,
  ServerEvent_ServerEventType_REGISTERED = 1,
  ServerEvent_ServerEventType_SERVER_DOWN = 2,
  ServerEvent_ServerEventType_SERVER_UP = 3,
  ServerEvent_ServerEventType_PLAYERS_CHANGED = 4,
  ServerEvent_ServerEventType_ServerEvent_ServerEventType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ServerEvent_ServerEventType_ServerEvent_ServerEventType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ServerEvent_ServerEventType_IsValid(int value);
constexpr ServerEvent_ServerEventType ServerEvent_ServerEventType_ServerEventType_MIN = ServerEvent_ServerEventType_UNKNOWN;
constexpr ServerEvent_ServerEventType ServerEvent_ServerEventType_ServerEventType_MAX = ServerEvent_ServerEventType_PLAYERS_CHANGED;
constexpr int ServerEvent_ServerEventType_ServerEventType_ARRAYSIZE = ServerEvent_ServerEventType_ServerEventType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerEvent_ServerEventType_descriptor();
template<typename T>
inline const std::string& ServerEvent_ServerEventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServerEvent_ServerEventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServerEvent_ServerEventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServerEvent_ServerEventType_descriptor(), enum_t_value);
}
inline bool ServerEvent_ServerEventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServerEvent_ServerEventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServerEvent_ServerEventType>(
    ServerEvent_ServerEventType_descriptor(), name, value);
}
// ===================================================================

class GetRegisteredServersRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.server.GetRegisteredServersRequest) */ {
 public:
  inline GetRegisteredServersRequest() : GetRegisteredServersRequest(nullptr) {}
  virtual ~GetRegisteredServersRequest();

  GetRegisteredServersRequest(const GetRegisteredServersRequest& from);
  GetRegisteredServersRequest(GetRegisteredServersRequest&& from) noexcept
    : GetRegisteredServersRequest() {
    *this = ::std::move(from);
  }

  inline GetRegisteredServersRequest& operator=(const GetRegisteredServersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRegisteredServersRequest& operator=(GetRegisteredServersRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRegisteredServersRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRegisteredServersRequest* internal_default_instance() {
    return reinterpret_cast<const GetRegisteredServersRequest*>(
               &_GetRegisteredServersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetRegisteredServersRequest& a, GetRegisteredServersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRegisteredServersRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRegisteredServersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRegisteredServersRequest* New() const final {
    return CreateMaybeMessage<GetRegisteredServersRequest>(nullptr);
  }

  GetRegisteredServersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRegisteredServersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRegisteredServersRequest& from);
  void MergeFrom(const GetRegisteredServersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRegisteredServersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.server.GetRegisteredServersRequest";
  }
  protected:
  explicit GetRegisteredServersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2fserver_2eproto);
    return ::descriptor_table_server_2fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.server.GetRegisteredServersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fserver_2eproto;
};
// -------------------------------------------------------------------

class GetRegisteredServersResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.server.GetRegisteredServersResponse) */ {
 public:
  inline GetRegisteredServersResponse() : GetRegisteredServersResponse(nullptr) {}
  virtual ~GetRegisteredServersResponse();

  GetRegisteredServersResponse(const GetRegisteredServersResponse& from);
  GetRegisteredServersResponse(GetRegisteredServersResponse&& from) noexcept
    : GetRegisteredServersResponse() {
    *this = ::std::move(from);
  }

  inline GetRegisteredServersResponse& operator=(const GetRegisteredServersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRegisteredServersResponse& operator=(GetRegisteredServersResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRegisteredServersResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRegisteredServersResponse* internal_default_instance() {
    return reinterpret_cast<const GetRegisteredServersResponse*>(
               &_GetRegisteredServersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetRegisteredServersResponse& a, GetRegisteredServersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRegisteredServersResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRegisteredServersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRegisteredServersResponse* New() const final {
    return CreateMaybeMessage<GetRegisteredServersResponse>(nullptr);
  }

  GetRegisteredServersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRegisteredServersResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRegisteredServersResponse& from);
  void MergeFrom(const GetRegisteredServersResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRegisteredServersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.server.GetRegisteredServersResponse";
  }
  protected:
  explicit GetRegisteredServersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2fserver_2eproto);
    return ::descriptor_table_server_2fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServersFieldNumber = 1,
  };
  // repeated .mruv.server.ServerInfo servers = 1;
  int servers_size() const;
  private:
  int _internal_servers_size() const;
  public:
  void clear_servers();
  ::mruv::server::ServerInfo* mutable_servers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::server::ServerInfo >*
      mutable_servers();
  private:
  const ::mruv::server::ServerInfo& _internal_servers(int index) const;
  ::mruv::server::ServerInfo* _internal_add_servers();
  public:
  const ::mruv::server::ServerInfo& servers(int index) const;
  ::mruv::server::ServerInfo* add_servers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::server::ServerInfo >&
      servers() const;

  // @@protoc_insertion_point(class_scope:mruv.server.GetRegisteredServersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::server::ServerInfo > servers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fserver_2eproto;
};
// -------------------------------------------------------------------

class UpdateServerStatusRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.server.UpdateServerStatusRequest) */ {
 public:
  inline UpdateServerStatusRequest() : UpdateServerStatusRequest(nullptr) {}
  virtual ~UpdateServerStatusRequest();

  UpdateServerStatusRequest(const UpdateServerStatusRequest& from);
  UpdateServerStatusRequest(UpdateServerStatusRequest&& from) noexcept
    : UpdateServerStatusRequest() {
    *this = ::std::move(from);
  }

  inline UpdateServerStatusRequest& operator=(const UpdateServerStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateServerStatusRequest& operator=(UpdateServerStatusRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateServerStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateServerStatusRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateServerStatusRequest*>(
               &_UpdateServerStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UpdateServerStatusRequest& a, UpdateServerStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateServerStatusRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateServerStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateServerStatusRequest* New() const final {
    return CreateMaybeMessage<UpdateServerStatusRequest>(nullptr);
  }

  UpdateServerStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateServerStatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateServerStatusRequest& from);
  void MergeFrom(const UpdateServerStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateServerStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.server.UpdateServerStatusRequest";
  }
  protected:
  explicit UpdateServerStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2fserver_2eproto);
    return ::descriptor_table_server_2fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStatusFieldNumber = 2,
    kPlayersFieldNumber = 3,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .mruv.server.ServerStatus status = 2;
  void clear_status();
  ::mruv::server::ServerStatus status() const;
  void set_status(::mruv::server::ServerStatus value);
  private:
  ::mruv::server::ServerStatus _internal_status() const;
  void _internal_set_status(::mruv::server::ServerStatus value);
  public:

  // uint32 players = 3;
  void clear_players();
  ::PROTOBUF_NAMESPACE_ID::uint32 players() const;
  void set_players(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_players() const;
  void _internal_set_players(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.server.UpdateServerStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  int status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 players_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fserver_2eproto;
};
// -------------------------------------------------------------------

class UpdateServerStatusResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.server.UpdateServerStatusResponse) */ {
 public:
  inline UpdateServerStatusResponse() : UpdateServerStatusResponse(nullptr) {}
  virtual ~UpdateServerStatusResponse();

  UpdateServerStatusResponse(const UpdateServerStatusResponse& from);
  UpdateServerStatusResponse(UpdateServerStatusResponse&& from) noexcept
    : UpdateServerStatusResponse() {
    *this = ::std::move(from);
  }

  inline UpdateServerStatusResponse& operator=(const UpdateServerStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateServerStatusResponse& operator=(UpdateServerStatusResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateServerStatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateServerStatusResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateServerStatusResponse*>(
               &_UpdateServerStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UpdateServerStatusResponse& a, UpdateServerStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateServerStatusResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateServerStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateServerStatusResponse* New() const final {
    return CreateMaybeMessage<UpdateServerStatusResponse>(nullptr);
  }

  UpdateServerStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateServerStatusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateServerStatusResponse& from);
  void MergeFrom(const UpdateServerStatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateServerStatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.server.UpdateServerStatusResponse";
  }
  protected:
  explicit UpdateServerStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2fserver_2eproto);
    return ::descriptor_table_server_2fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.server.UpdateServerStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fserver_2eproto;
};
// -------------------------------------------------------------------

class ServerEventsStreamRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.server.ServerEventsStreamRequest) */ {
 public:
  inline ServerEventsStreamRequest() : ServerEventsStreamRequest(nullptr) {}
  virtual ~ServerEventsStreamRequest();

  ServerEventsStreamRequest(const ServerEventsStreamRequest& from);
  ServerEventsStreamRequest(ServerEventsStreamRequest&& from) noexcept
    : ServerEventsStreamRequest() {
    *this = ::std::move(from);
  }

  inline ServerEventsStreamRequest& operator=(const ServerEventsStreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerEventsStreamRequest& operator=(ServerEventsStreamRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerEventsStreamRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerEventsStreamRequest* internal_default_instance() {
    return reinterpret_cast<const ServerEventsStreamRequest*>(
               &_ServerEventsStreamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ServerEventsStreamRequest& a, ServerEventsStreamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerEventsStreamRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerEventsStreamRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerEventsStreamRequest* New() const final {
    return CreateMaybeMessage<ServerEventsStreamRequest>(nullptr);
  }

  ServerEventsStreamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerEventsStreamRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerEventsStreamRequest& from);
  void MergeFrom(const ServerEventsStreamRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerEventsStreamRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.server.ServerEventsStreamRequest";
  }
  protected:
  explicit ServerEventsStreamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2fserver_2eproto);
    return ::descriptor_table_server_2fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.server.ServerEventsStreamRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fserver_2eproto;
};
// -------------------------------------------------------------------

class ServerEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.server.ServerEvent) */ {
 public:
  inline ServerEvent() : ServerEvent(nullptr) {}
  virtual ~ServerEvent();

  ServerEvent(const ServerEvent& from);
  ServerEvent(ServerEvent&& from) noexcept
    : ServerEvent() {
    *this = ::std::move(from);
  }

  inline ServerEvent& operator=(const ServerEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerEvent& operator=(ServerEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerEvent* internal_default_instance() {
    return reinterpret_cast<const ServerEvent*>(
               &_ServerEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ServerEvent& a, ServerEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerEvent* New() const final {
    return CreateMaybeMessage<ServerEvent>(nullptr);
  }

  ServerEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerEvent& from);
  void MergeFrom(const ServerEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.server.ServerEvent";
  }
  protected:
  explicit ServerEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2fserver_2eproto);
    return ::descriptor_table_server_2fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ServerEvent_ServerEventType ServerEventType;
  static constexpr ServerEventType UNKNOWN =
    ServerEvent_ServerEventType_UNKNOWN;
  static constexpr ServerEventType REGISTERED =
    ServerEvent_ServerEventType_REGISTERED;
  static constexpr ServerEventType SERVER_DOWN =
    ServerEvent_ServerEventType_SERVER_DOWN;
  static constexpr ServerEventType SERVER_UP =
    ServerEvent_ServerEventType_SERVER_UP;
  static constexpr ServerEventType PLAYERS_CHANGED =
    ServerEvent_ServerEventType_PLAYERS_CHANGED;
  static inline bool ServerEventType_IsValid(int value) {
    return ServerEvent_ServerEventType_IsValid(value);
  }
  static constexpr ServerEventType ServerEventType_MIN =
    ServerEvent_ServerEventType_ServerEventType_MIN;
  static constexpr ServerEventType ServerEventType_MAX =
    ServerEvent_ServerEventType_ServerEventType_MAX;
  static constexpr int ServerEventType_ARRAYSIZE =
    ServerEvent_ServerEventType_ServerEventType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ServerEventType_descriptor() {
    return ServerEvent_ServerEventType_descriptor();
  }
  template<typename T>
  static inline const std::string& ServerEventType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ServerEventType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ServerEventType_Name.");
    return ServerEvent_ServerEventType_Name(enum_t_value);
  }
  static inline bool ServerEventType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ServerEventType* value) {
    return ServerEvent_ServerEventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // .mruv.server.ServerEvent.ServerEventType type = 1;
  void clear_type();
  ::mruv::server::ServerEvent_ServerEventType type() const;
  void set_type(::mruv::server::ServerEvent_ServerEventType value);
  private:
  ::mruv::server::ServerEvent_ServerEventType _internal_type() const;
  void _internal_set_type(::mruv::server::ServerEvent_ServerEventType value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.server.ServerEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fserver_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetRegisteredServersRequest

// -------------------------------------------------------------------

// GetRegisteredServersResponse

// repeated .mruv.server.ServerInfo servers = 1;
inline int GetRegisteredServersResponse::_internal_servers_size() const {
  return servers_.size();
}
inline int GetRegisteredServersResponse::servers_size() const {
  return _internal_servers_size();
}
inline ::mruv::server::ServerInfo* GetRegisteredServersResponse::mutable_servers(int index) {
  // @@protoc_insertion_point(field_mutable:mruv.server.GetRegisteredServersResponse.servers)
  return servers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::server::ServerInfo >*
GetRegisteredServersResponse::mutable_servers() {
  // @@protoc_insertion_point(field_mutable_list:mruv.server.GetRegisteredServersResponse.servers)
  return &servers_;
}
inline const ::mruv::server::ServerInfo& GetRegisteredServersResponse::_internal_servers(int index) const {
  return servers_.Get(index);
}
inline const ::mruv::server::ServerInfo& GetRegisteredServersResponse::servers(int index) const {
  // @@protoc_insertion_point(field_get:mruv.server.GetRegisteredServersResponse.servers)
  return _internal_servers(index);
}
inline ::mruv::server::ServerInfo* GetRegisteredServersResponse::_internal_add_servers() {
  return servers_.Add();
}
inline ::mruv::server::ServerInfo* GetRegisteredServersResponse::add_servers() {
  // @@protoc_insertion_point(field_add:mruv.server.GetRegisteredServersResponse.servers)
  return _internal_add_servers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::server::ServerInfo >&
GetRegisteredServersResponse::servers() const {
  // @@protoc_insertion_point(field_list:mruv.server.GetRegisteredServersResponse.servers)
  return servers_;
}

// -------------------------------------------------------------------

// UpdateServerStatusRequest

// uint32 id = 1;
inline void UpdateServerStatusRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateServerStatusRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateServerStatusRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.server.UpdateServerStatusRequest.id)
  return _internal_id();
}
inline void UpdateServerStatusRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void UpdateServerStatusRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.server.UpdateServerStatusRequest.id)
}

// .mruv.server.ServerStatus status = 2;
inline void UpdateServerStatusRequest::clear_status() {
  status_ = 0;
}
inline ::mruv::server::ServerStatus UpdateServerStatusRequest::_internal_status() const {
  return static_cast< ::mruv::server::ServerStatus >(status_);
}
inline ::mruv::server::ServerStatus UpdateServerStatusRequest::status() const {
  // @@protoc_insertion_point(field_get:mruv.server.UpdateServerStatusRequest.status)
  return _internal_status();
}
inline void UpdateServerStatusRequest::_internal_set_status(::mruv::server::ServerStatus value) {
  
  status_ = value;
}
inline void UpdateServerStatusRequest::set_status(::mruv::server::ServerStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:mruv.server.UpdateServerStatusRequest.status)
}

// uint32 players = 3;
inline void UpdateServerStatusRequest::clear_players() {
  players_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateServerStatusRequest::_internal_players() const {
  return players_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateServerStatusRequest::players() const {
  // @@protoc_insertion_point(field_get:mruv.server.UpdateServerStatusRequest.players)
  return _internal_players();
}
inline void UpdateServerStatusRequest::_internal_set_players(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  players_ = value;
}
inline void UpdateServerStatusRequest::set_players(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_players(value);
  // @@protoc_insertion_point(field_set:mruv.server.UpdateServerStatusRequest.players)
}

// -------------------------------------------------------------------

// UpdateServerStatusResponse

// -------------------------------------------------------------------

// ServerEventsStreamRequest

// uint32 id = 1;
inline void ServerEventsStreamRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerEventsStreamRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerEventsStreamRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.server.ServerEventsStreamRequest.id)
  return _internal_id();
}
inline void ServerEventsStreamRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void ServerEventsStreamRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.server.ServerEventsStreamRequest.id)
}

// -------------------------------------------------------------------

// ServerEvent

// .mruv.server.ServerEvent.ServerEventType type = 1;
inline void ServerEvent::clear_type() {
  type_ = 0;
}
inline ::mruv::server::ServerEvent_ServerEventType ServerEvent::_internal_type() const {
  return static_cast< ::mruv::server::ServerEvent_ServerEventType >(type_);
}
inline ::mruv::server::ServerEvent_ServerEventType ServerEvent::type() const {
  // @@protoc_insertion_point(field_get:mruv.server.ServerEvent.type)
  return _internal_type();
}
inline void ServerEvent::_internal_set_type(::mruv::server::ServerEvent_ServerEventType value) {
  
  type_ = value;
}
inline void ServerEvent::set_type(::mruv::server::ServerEvent_ServerEventType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:mruv.server.ServerEvent.type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace server
}  // namespace mruv

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mruv::server::ServerEvent_ServerEventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mruv::server::ServerEvent_ServerEventType>() {
  return ::mruv::server::ServerEvent_ServerEventType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_server_2fserver_2eproto
