// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: server/server.proto
#ifndef GRPC_server_2fserver_2eproto__INCLUDED
#define GRPC_server_2fserver_2eproto__INCLUDED

#include "server/server.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace mruv {

// The MruV server service provides procedures for managing game platform server actions
class MruVServerService final {
 public:
  static constexpr char const* service_full_name() {
    return "mruv.MruVServerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Register instance of server for further managing
    virtual ::grpc::Status RegisterServer(::grpc::ClientContext* context, const ::mruv::RegisterServerRequest& request, ::mruv::RegisterServerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::RegisterServerResponse>> AsyncRegisterServer(::grpc::ClientContext* context, const ::mruv::RegisterServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::RegisterServerResponse>>(AsyncRegisterServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::RegisterServerResponse>> PrepareAsyncRegisterServer(::grpc::ClientContext* context, const ::mruv::RegisterServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::RegisterServerResponse>>(PrepareAsyncRegisterServerRaw(context, request, cq));
    }
    // Get game server status
    virtual ::grpc::Status GetServerStatus(::grpc::ClientContext* context, const ::mruv::ServerID& request, ::mruv::ServerStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::ServerStatus>> AsyncGetServerStatus(::grpc::ClientContext* context, const ::mruv::ServerID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::ServerStatus>>(AsyncGetServerStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::ServerStatus>> PrepareAsyncGetServerStatus(::grpc::ClientContext* context, const ::mruv::ServerID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::ServerStatus>>(PrepareAsyncGetServerStatusRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Register instance of server for further managing
      virtual void RegisterServer(::grpc::ClientContext* context, const ::mruv::RegisterServerRequest* request, ::mruv::RegisterServerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::RegisterServerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterServer(::grpc::ClientContext* context, const ::mruv::RegisterServerRequest* request, ::mruv::RegisterServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void RegisterServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::RegisterServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Get game server status
      virtual void GetServerStatus(::grpc::ClientContext* context, const ::mruv::ServerID* request, ::mruv::ServerStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetServerStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::ServerStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetServerStatus(::grpc::ClientContext* context, const ::mruv::ServerID* request, ::mruv::ServerStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetServerStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::ServerStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::RegisterServerResponse>* AsyncRegisterServerRaw(::grpc::ClientContext* context, const ::mruv::RegisterServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::RegisterServerResponse>* PrepareAsyncRegisterServerRaw(::grpc::ClientContext* context, const ::mruv::RegisterServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::ServerStatus>* AsyncGetServerStatusRaw(::grpc::ClientContext* context, const ::mruv::ServerID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::ServerStatus>* PrepareAsyncGetServerStatusRaw(::grpc::ClientContext* context, const ::mruv::ServerID& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status RegisterServer(::grpc::ClientContext* context, const ::mruv::RegisterServerRequest& request, ::mruv::RegisterServerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::RegisterServerResponse>> AsyncRegisterServer(::grpc::ClientContext* context, const ::mruv::RegisterServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::RegisterServerResponse>>(AsyncRegisterServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::RegisterServerResponse>> PrepareAsyncRegisterServer(::grpc::ClientContext* context, const ::mruv::RegisterServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::RegisterServerResponse>>(PrepareAsyncRegisterServerRaw(context, request, cq));
    }
    ::grpc::Status GetServerStatus(::grpc::ClientContext* context, const ::mruv::ServerID& request, ::mruv::ServerStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::ServerStatus>> AsyncGetServerStatus(::grpc::ClientContext* context, const ::mruv::ServerID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::ServerStatus>>(AsyncGetServerStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::ServerStatus>> PrepareAsyncGetServerStatus(::grpc::ClientContext* context, const ::mruv::ServerID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::ServerStatus>>(PrepareAsyncGetServerStatusRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void RegisterServer(::grpc::ClientContext* context, const ::mruv::RegisterServerRequest* request, ::mruv::RegisterServerResponse* response, std::function<void(::grpc::Status)>) override;
      void RegisterServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::RegisterServerResponse* response, std::function<void(::grpc::Status)>) override;
      void RegisterServer(::grpc::ClientContext* context, const ::mruv::RegisterServerRequest* request, ::mruv::RegisterServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void RegisterServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::RegisterServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetServerStatus(::grpc::ClientContext* context, const ::mruv::ServerID* request, ::mruv::ServerStatus* response, std::function<void(::grpc::Status)>) override;
      void GetServerStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::ServerStatus* response, std::function<void(::grpc::Status)>) override;
      void GetServerStatus(::grpc::ClientContext* context, const ::mruv::ServerID* request, ::mruv::ServerStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetServerStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::ServerStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mruv::RegisterServerResponse>* AsyncRegisterServerRaw(::grpc::ClientContext* context, const ::mruv::RegisterServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::RegisterServerResponse>* PrepareAsyncRegisterServerRaw(::grpc::ClientContext* context, const ::mruv::RegisterServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::ServerStatus>* AsyncGetServerStatusRaw(::grpc::ClientContext* context, const ::mruv::ServerID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::ServerStatus>* PrepareAsyncGetServerStatusRaw(::grpc::ClientContext* context, const ::mruv::ServerID& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterServer_;
    const ::grpc::internal::RpcMethod rpcmethod_GetServerStatus_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Register instance of server for further managing
    virtual ::grpc::Status RegisterServer(::grpc::ServerContext* context, const ::mruv::RegisterServerRequest* request, ::mruv::RegisterServerResponse* response);
    // Get game server status
    virtual ::grpc::Status GetServerStatus(::grpc::ServerContext* context, const ::mruv::ServerID* request, ::mruv::ServerStatus* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterServer() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RegisterServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterServer(::grpc::ServerContext* /*context*/, const ::mruv::RegisterServerRequest* /*request*/, ::mruv::RegisterServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterServer(::grpc::ServerContext* context, ::mruv::RegisterServerRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::RegisterServerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetServerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetServerStatus() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetServerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServerStatus(::grpc::ServerContext* /*context*/, const ::mruv::ServerID* /*request*/, ::mruv::ServerStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServerStatus(::grpc::ServerContext* context, ::mruv::ServerID* request, ::grpc::ServerAsyncResponseWriter< ::mruv::ServerStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RegisterServer<WithAsyncMethod_GetServerStatus<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RegisterServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RegisterServer() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::RegisterServerRequest, ::mruv::RegisterServerResponse>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::mruv::RegisterServerRequest* request, ::mruv::RegisterServerResponse* response) { return this->RegisterServer(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterServer(
        ::grpc::experimental::MessageAllocator< ::mruv::RegisterServerRequest, ::mruv::RegisterServerResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::RegisterServerRequest, ::mruv::RegisterServerResponse>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RegisterServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterServer(::grpc::ServerContext* /*context*/, const ::mruv::RegisterServerRequest* /*request*/, ::mruv::RegisterServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* RegisterServer(::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::RegisterServerRequest* /*request*/, ::mruv::RegisterServerResponse* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetServerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetServerStatus() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::ServerID, ::mruv::ServerStatus>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::mruv::ServerID* request, ::mruv::ServerStatus* response) { return this->GetServerStatus(context, request, response); }));}
    void SetMessageAllocatorFor_GetServerStatus(
        ::grpc::experimental::MessageAllocator< ::mruv::ServerID, ::mruv::ServerStatus>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::ServerID, ::mruv::ServerStatus>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetServerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServerStatus(::grpc::ServerContext* /*context*/, const ::mruv::ServerID* /*request*/, ::mruv::ServerStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* GetServerStatus(::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::ServerID* /*request*/, ::mruv::ServerStatus* /*response*/) { return nullptr; }
  };
  typedef ExperimentalWithCallbackMethod_RegisterServer<ExperimentalWithCallbackMethod_GetServerStatus<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RegisterServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterServer() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RegisterServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterServer(::grpc::ServerContext* /*context*/, const ::mruv::RegisterServerRequest* /*request*/, ::mruv::RegisterServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetServerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetServerStatus() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetServerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServerStatus(::grpc::ServerContext* /*context*/, const ::mruv::ServerID* /*request*/, ::mruv::ServerStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterServer() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RegisterServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterServer(::grpc::ServerContext* /*context*/, const ::mruv::RegisterServerRequest* /*request*/, ::mruv::RegisterServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterServer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetServerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetServerStatus() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetServerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServerStatus(::grpc::ServerContext* /*context*/, const ::mruv::ServerID* /*request*/, ::mruv::ServerStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServerStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RegisterServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RegisterServer() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterServer(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RegisterServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterServer(::grpc::ServerContext* /*context*/, const ::mruv::RegisterServerRequest* /*request*/, ::mruv::RegisterServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* RegisterServer(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetServerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetServerStatus() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetServerStatus(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetServerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServerStatus(::grpc::ServerContext* /*context*/, const ::mruv::ServerID* /*request*/, ::mruv::ServerStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* GetServerStatus(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterServer() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::mruv::RegisterServerRequest, ::mruv::RegisterServerResponse>(std::bind(&WithStreamedUnaryMethod_RegisterServer<BaseClass>::StreamedRegisterServer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RegisterServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterServer(::grpc::ServerContext* /*context*/, const ::mruv::RegisterServerRequest* /*request*/, ::mruv::RegisterServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::RegisterServerRequest,::mruv::RegisterServerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetServerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetServerStatus() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::mruv::ServerID, ::mruv::ServerStatus>(std::bind(&WithStreamedUnaryMethod_GetServerStatus<BaseClass>::StreamedGetServerStatus, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetServerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetServerStatus(::grpc::ServerContext* /*context*/, const ::mruv::ServerID* /*request*/, ::mruv::ServerStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetServerStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::ServerID,::mruv::ServerStatus>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RegisterServer<WithStreamedUnaryMethod_GetServerStatus<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RegisterServer<WithStreamedUnaryMethod_GetServerStatus<Service > > StreamedService;
};

}  // namespace mruv


#endif  // GRPC_server_2fserver_2eproto__INCLUDED
