// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: devtools/devtools.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_devtools_2fdevtools_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_devtools_2fdevtools_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "common/health.pb.h"
#include "devtools/devtools_model.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_devtools_2fdevtools_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_devtools_2fdevtools_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[19]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_devtools_2fdevtools_2eproto;
namespace mruv {
namespace devtools {
class DeletePositionRequest;
class DeletePositionRequestDefaultTypeInternal;
extern DeletePositionRequestDefaultTypeInternal _DeletePositionRequest_default_instance_;
class DeletePositionResponse;
class DeletePositionResponseDefaultTypeInternal;
extern DeletePositionResponseDefaultTypeInternal _DeletePositionResponse_default_instance_;
class GetAnimationRequest;
class GetAnimationRequestDefaultTypeInternal;
extern GetAnimationRequestDefaultTypeInternal _GetAnimationRequest_default_instance_;
class GetAnimationResponse;
class GetAnimationResponseDefaultTypeInternal;
extern GetAnimationResponseDefaultTypeInternal _GetAnimationResponse_default_instance_;
class GetAnimationsRequest;
class GetAnimationsRequestDefaultTypeInternal;
extern GetAnimationsRequestDefaultTypeInternal _GetAnimationsRequest_default_instance_;
class GetAnimationsResponse;
class GetAnimationsResponseDefaultTypeInternal;
extern GetAnimationsResponseDefaultTypeInternal _GetAnimationsResponse_default_instance_;
class GetAnimationsResponse_Row;
class GetAnimationsResponse_RowDefaultTypeInternal;
extern GetAnimationsResponse_RowDefaultTypeInternal _GetAnimationsResponse_Row_default_instance_;
class GetOutfitsRequest;
class GetOutfitsRequestDefaultTypeInternal;
extern GetOutfitsRequestDefaultTypeInternal _GetOutfitsRequest_default_instance_;
class GetOutfitsResponse;
class GetOutfitsResponseDefaultTypeInternal;
extern GetOutfitsResponseDefaultTypeInternal _GetOutfitsResponse_default_instance_;
class GetOutfitsResponse_Row;
class GetOutfitsResponse_RowDefaultTypeInternal;
extern GetOutfitsResponse_RowDefaultTypeInternal _GetOutfitsResponse_Row_default_instance_;
class GetPositionsRequest;
class GetPositionsRequestDefaultTypeInternal;
extern GetPositionsRequestDefaultTypeInternal _GetPositionsRequest_default_instance_;
class GetPositionsResponse;
class GetPositionsResponseDefaultTypeInternal;
extern GetPositionsResponseDefaultTypeInternal _GetPositionsResponse_default_instance_;
class GetPositionsResponse_Row;
class GetPositionsResponse_RowDefaultTypeInternal;
extern GetPositionsResponse_RowDefaultTypeInternal _GetPositionsResponse_Row_default_instance_;
class SaveAnimationRequest;
class SaveAnimationRequestDefaultTypeInternal;
extern SaveAnimationRequestDefaultTypeInternal _SaveAnimationRequest_default_instance_;
class SaveAnimationResponse;
class SaveAnimationResponseDefaultTypeInternal;
extern SaveAnimationResponseDefaultTypeInternal _SaveAnimationResponse_default_instance_;
class SaveOutfitRequest;
class SaveOutfitRequestDefaultTypeInternal;
extern SaveOutfitRequestDefaultTypeInternal _SaveOutfitRequest_default_instance_;
class SaveOutfitResponse;
class SaveOutfitResponseDefaultTypeInternal;
extern SaveOutfitResponseDefaultTypeInternal _SaveOutfitResponse_default_instance_;
class SavePositionRequest;
class SavePositionRequestDefaultTypeInternal;
extern SavePositionRequestDefaultTypeInternal _SavePositionRequest_default_instance_;
class SavePositionResponse;
class SavePositionResponseDefaultTypeInternal;
extern SavePositionResponseDefaultTypeInternal _SavePositionResponse_default_instance_;
}  // namespace devtools
}  // namespace mruv
PROTOBUF_NAMESPACE_OPEN
template<> ::mruv::devtools::DeletePositionRequest* Arena::CreateMaybeMessage<::mruv::devtools::DeletePositionRequest>(Arena*);
template<> ::mruv::devtools::DeletePositionResponse* Arena::CreateMaybeMessage<::mruv::devtools::DeletePositionResponse>(Arena*);
template<> ::mruv::devtools::GetAnimationRequest* Arena::CreateMaybeMessage<::mruv::devtools::GetAnimationRequest>(Arena*);
template<> ::mruv::devtools::GetAnimationResponse* Arena::CreateMaybeMessage<::mruv::devtools::GetAnimationResponse>(Arena*);
template<> ::mruv::devtools::GetAnimationsRequest* Arena::CreateMaybeMessage<::mruv::devtools::GetAnimationsRequest>(Arena*);
template<> ::mruv::devtools::GetAnimationsResponse* Arena::CreateMaybeMessage<::mruv::devtools::GetAnimationsResponse>(Arena*);
template<> ::mruv::devtools::GetAnimationsResponse_Row* Arena::CreateMaybeMessage<::mruv::devtools::GetAnimationsResponse_Row>(Arena*);
template<> ::mruv::devtools::GetOutfitsRequest* Arena::CreateMaybeMessage<::mruv::devtools::GetOutfitsRequest>(Arena*);
template<> ::mruv::devtools::GetOutfitsResponse* Arena::CreateMaybeMessage<::mruv::devtools::GetOutfitsResponse>(Arena*);
template<> ::mruv::devtools::GetOutfitsResponse_Row* Arena::CreateMaybeMessage<::mruv::devtools::GetOutfitsResponse_Row>(Arena*);
template<> ::mruv::devtools::GetPositionsRequest* Arena::CreateMaybeMessage<::mruv::devtools::GetPositionsRequest>(Arena*);
template<> ::mruv::devtools::GetPositionsResponse* Arena::CreateMaybeMessage<::mruv::devtools::GetPositionsResponse>(Arena*);
template<> ::mruv::devtools::GetPositionsResponse_Row* Arena::CreateMaybeMessage<::mruv::devtools::GetPositionsResponse_Row>(Arena*);
template<> ::mruv::devtools::SaveAnimationRequest* Arena::CreateMaybeMessage<::mruv::devtools::SaveAnimationRequest>(Arena*);
template<> ::mruv::devtools::SaveAnimationResponse* Arena::CreateMaybeMessage<::mruv::devtools::SaveAnimationResponse>(Arena*);
template<> ::mruv::devtools::SaveOutfitRequest* Arena::CreateMaybeMessage<::mruv::devtools::SaveOutfitRequest>(Arena*);
template<> ::mruv::devtools::SaveOutfitResponse* Arena::CreateMaybeMessage<::mruv::devtools::SaveOutfitResponse>(Arena*);
template<> ::mruv::devtools::SavePositionRequest* Arena::CreateMaybeMessage<::mruv::devtools::SavePositionRequest>(Arena*);
template<> ::mruv::devtools::SavePositionResponse* Arena::CreateMaybeMessage<::mruv::devtools::SavePositionResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mruv {
namespace devtools {

// ===================================================================

class GetPositionsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.devtools.GetPositionsRequest) */ {
 public:
  GetPositionsRequest();
  virtual ~GetPositionsRequest();

  GetPositionsRequest(const GetPositionsRequest& from);
  GetPositionsRequest(GetPositionsRequest&& from) noexcept
    : GetPositionsRequest() {
    *this = ::std::move(from);
  }

  inline GetPositionsRequest& operator=(const GetPositionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPositionsRequest& operator=(GetPositionsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPositionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPositionsRequest* internal_default_instance() {
    return reinterpret_cast<const GetPositionsRequest*>(
               &_GetPositionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GetPositionsRequest* other);
  friend void swap(GetPositionsRequest& a, GetPositionsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPositionsRequest* New() const final {
    return CreateMaybeMessage<GetPositionsRequest>(nullptr);
  }

  GetPositionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPositionsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPositionsRequest& from);
  void MergeFrom(const GetPositionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPositionsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.devtools.GetPositionsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fdevtools_2eproto);
    return ::descriptor_table_devtools_2fdevtools_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string category = 2;
  void clear_category();
  static const int kCategoryFieldNumber = 2;
  const std::string& category() const;
  void set_category(const std::string& value);
  void set_category(std::string&& value);
  void set_category(const char* value);
  void set_category(const char* value, size_t size);
  std::string* mutable_category();
  std::string* release_category();
  void set_allocated_category(std::string* category);

  // .mruv.devtools.Player author = 3;
  bool has_author() const;
  void clear_author();
  static const int kAuthorFieldNumber = 3;
  const ::mruv::devtools::Player& author() const;
  ::mruv::devtools::Player* release_author();
  ::mruv::devtools::Player* mutable_author();
  void set_allocated_author(::mruv::devtools::Player* author);

  // uint32 limit = 1;
  void clear_limit();
  static const int kLimitFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:mruv.devtools.GetPositionsRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr category_;
  ::mruv::devtools::Player* author_;
  ::PROTOBUF_NAMESPACE_ID::uint32 limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fdevtools_2eproto;
};
// -------------------------------------------------------------------

class GetPositionsResponse_Row :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.devtools.GetPositionsResponse.Row) */ {
 public:
  GetPositionsResponse_Row();
  virtual ~GetPositionsResponse_Row();

  GetPositionsResponse_Row(const GetPositionsResponse_Row& from);
  GetPositionsResponse_Row(GetPositionsResponse_Row&& from) noexcept
    : GetPositionsResponse_Row() {
    *this = ::std::move(from);
  }

  inline GetPositionsResponse_Row& operator=(const GetPositionsResponse_Row& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPositionsResponse_Row& operator=(GetPositionsResponse_Row&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPositionsResponse_Row& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPositionsResponse_Row* internal_default_instance() {
    return reinterpret_cast<const GetPositionsResponse_Row*>(
               &_GetPositionsResponse_Row_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GetPositionsResponse_Row* other);
  friend void swap(GetPositionsResponse_Row& a, GetPositionsResponse_Row& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPositionsResponse_Row* New() const final {
    return CreateMaybeMessage<GetPositionsResponse_Row>(nullptr);
  }

  GetPositionsResponse_Row* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPositionsResponse_Row>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPositionsResponse_Row& from);
  void MergeFrom(const GetPositionsResponse_Row& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPositionsResponse_Row* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.devtools.GetPositionsResponse.Row";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fdevtools_2eproto);
    return ::descriptor_table_devtools_2fdevtools_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mruv.devtools.Position position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  const ::mruv::devtools::Position& position() const;
  ::mruv::devtools::Position* release_position();
  ::mruv::devtools::Position* mutable_position();
  void set_allocated_position(::mruv::devtools::Position* position);

  // .mruv.devtools.Player author = 2;
  bool has_author() const;
  void clear_author();
  static const int kAuthorFieldNumber = 2;
  const ::mruv::devtools::Player& author() const;
  ::mruv::devtools::Player* release_author();
  ::mruv::devtools::Player* mutable_author();
  void set_allocated_author(::mruv::devtools::Player* author);

  // @@protoc_insertion_point(class_scope:mruv.devtools.GetPositionsResponse.Row)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mruv::devtools::Position* position_;
  ::mruv::devtools::Player* author_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fdevtools_2eproto;
};
// -------------------------------------------------------------------

class GetPositionsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.devtools.GetPositionsResponse) */ {
 public:
  GetPositionsResponse();
  virtual ~GetPositionsResponse();

  GetPositionsResponse(const GetPositionsResponse& from);
  GetPositionsResponse(GetPositionsResponse&& from) noexcept
    : GetPositionsResponse() {
    *this = ::std::move(from);
  }

  inline GetPositionsResponse& operator=(const GetPositionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPositionsResponse& operator=(GetPositionsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPositionsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPositionsResponse* internal_default_instance() {
    return reinterpret_cast<const GetPositionsResponse*>(
               &_GetPositionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(GetPositionsResponse* other);
  friend void swap(GetPositionsResponse& a, GetPositionsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPositionsResponse* New() const final {
    return CreateMaybeMessage<GetPositionsResponse>(nullptr);
  }

  GetPositionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPositionsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPositionsResponse& from);
  void MergeFrom(const GetPositionsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPositionsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.devtools.GetPositionsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fdevtools_2eproto);
    return ::descriptor_table_devtools_2fdevtools_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetPositionsResponse_Row Row;

  // accessors -------------------------------------------------------

  // repeated .mruv.devtools.GetPositionsResponse.Row positions = 1;
  int positions_size() const;
  void clear_positions();
  static const int kPositionsFieldNumber = 1;
  ::mruv::devtools::GetPositionsResponse_Row* mutable_positions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::devtools::GetPositionsResponse_Row >*
      mutable_positions();
  const ::mruv::devtools::GetPositionsResponse_Row& positions(int index) const;
  ::mruv::devtools::GetPositionsResponse_Row* add_positions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::devtools::GetPositionsResponse_Row >&
      positions() const;

  // @@protoc_insertion_point(class_scope:mruv.devtools.GetPositionsResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::devtools::GetPositionsResponse_Row > positions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fdevtools_2eproto;
};
// -------------------------------------------------------------------

class SavePositionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.devtools.SavePositionRequest) */ {
 public:
  SavePositionRequest();
  virtual ~SavePositionRequest();

  SavePositionRequest(const SavePositionRequest& from);
  SavePositionRequest(SavePositionRequest&& from) noexcept
    : SavePositionRequest() {
    *this = ::std::move(from);
  }

  inline SavePositionRequest& operator=(const SavePositionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SavePositionRequest& operator=(SavePositionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SavePositionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SavePositionRequest* internal_default_instance() {
    return reinterpret_cast<const SavePositionRequest*>(
               &_SavePositionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(SavePositionRequest* other);
  friend void swap(SavePositionRequest& a, SavePositionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SavePositionRequest* New() const final {
    return CreateMaybeMessage<SavePositionRequest>(nullptr);
  }

  SavePositionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SavePositionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SavePositionRequest& from);
  void MergeFrom(const SavePositionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SavePositionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.devtools.SavePositionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fdevtools_2eproto);
    return ::descriptor_table_devtools_2fdevtools_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mruv.devtools.Position position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  const ::mruv::devtools::Position& position() const;
  ::mruv::devtools::Position* release_position();
  ::mruv::devtools::Position* mutable_position();
  void set_allocated_position(::mruv::devtools::Position* position);

  // @@protoc_insertion_point(class_scope:mruv.devtools.SavePositionRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mruv::devtools::Position* position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fdevtools_2eproto;
};
// -------------------------------------------------------------------

class SavePositionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.devtools.SavePositionResponse) */ {
 public:
  SavePositionResponse();
  virtual ~SavePositionResponse();

  SavePositionResponse(const SavePositionResponse& from);
  SavePositionResponse(SavePositionResponse&& from) noexcept
    : SavePositionResponse() {
    *this = ::std::move(from);
  }

  inline SavePositionResponse& operator=(const SavePositionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SavePositionResponse& operator=(SavePositionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SavePositionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SavePositionResponse* internal_default_instance() {
    return reinterpret_cast<const SavePositionResponse*>(
               &_SavePositionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SavePositionResponse* other);
  friend void swap(SavePositionResponse& a, SavePositionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SavePositionResponse* New() const final {
    return CreateMaybeMessage<SavePositionResponse>(nullptr);
  }

  SavePositionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SavePositionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SavePositionResponse& from);
  void MergeFrom(const SavePositionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SavePositionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.devtools.SavePositionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fdevtools_2eproto);
    return ::descriptor_table_devtools_2fdevtools_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:mruv.devtools.SavePositionResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fdevtools_2eproto;
};
// -------------------------------------------------------------------

class DeletePositionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.devtools.DeletePositionRequest) */ {
 public:
  DeletePositionRequest();
  virtual ~DeletePositionRequest();

  DeletePositionRequest(const DeletePositionRequest& from);
  DeletePositionRequest(DeletePositionRequest&& from) noexcept
    : DeletePositionRequest() {
    *this = ::std::move(from);
  }

  inline DeletePositionRequest& operator=(const DeletePositionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeletePositionRequest& operator=(DeletePositionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeletePositionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeletePositionRequest* internal_default_instance() {
    return reinterpret_cast<const DeletePositionRequest*>(
               &_DeletePositionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(DeletePositionRequest* other);
  friend void swap(DeletePositionRequest& a, DeletePositionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeletePositionRequest* New() const final {
    return CreateMaybeMessage<DeletePositionRequest>(nullptr);
  }

  DeletePositionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeletePositionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeletePositionRequest& from);
  void MergeFrom(const DeletePositionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeletePositionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.devtools.DeletePositionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fdevtools_2eproto);
    return ::descriptor_table_devtools_2fdevtools_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mruv.devtools.Position position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  const ::mruv::devtools::Position& position() const;
  ::mruv::devtools::Position* release_position();
  ::mruv::devtools::Position* mutable_position();
  void set_allocated_position(::mruv::devtools::Position* position);

  // @@protoc_insertion_point(class_scope:mruv.devtools.DeletePositionRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mruv::devtools::Position* position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fdevtools_2eproto;
};
// -------------------------------------------------------------------

class DeletePositionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.devtools.DeletePositionResponse) */ {
 public:
  DeletePositionResponse();
  virtual ~DeletePositionResponse();

  DeletePositionResponse(const DeletePositionResponse& from);
  DeletePositionResponse(DeletePositionResponse&& from) noexcept
    : DeletePositionResponse() {
    *this = ::std::move(from);
  }

  inline DeletePositionResponse& operator=(const DeletePositionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeletePositionResponse& operator=(DeletePositionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeletePositionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeletePositionResponse* internal_default_instance() {
    return reinterpret_cast<const DeletePositionResponse*>(
               &_DeletePositionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(DeletePositionResponse* other);
  friend void swap(DeletePositionResponse& a, DeletePositionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeletePositionResponse* New() const final {
    return CreateMaybeMessage<DeletePositionResponse>(nullptr);
  }

  DeletePositionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeletePositionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeletePositionResponse& from);
  void MergeFrom(const DeletePositionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeletePositionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.devtools.DeletePositionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fdevtools_2eproto);
    return ::descriptor_table_devtools_2fdevtools_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:mruv.devtools.DeletePositionResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fdevtools_2eproto;
};
// -------------------------------------------------------------------

class GetOutfitsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.devtools.GetOutfitsRequest) */ {
 public:
  GetOutfitsRequest();
  virtual ~GetOutfitsRequest();

  GetOutfitsRequest(const GetOutfitsRequest& from);
  GetOutfitsRequest(GetOutfitsRequest&& from) noexcept
    : GetOutfitsRequest() {
    *this = ::std::move(from);
  }

  inline GetOutfitsRequest& operator=(const GetOutfitsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOutfitsRequest& operator=(GetOutfitsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetOutfitsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOutfitsRequest* internal_default_instance() {
    return reinterpret_cast<const GetOutfitsRequest*>(
               &_GetOutfitsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(GetOutfitsRequest* other);
  friend void swap(GetOutfitsRequest& a, GetOutfitsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetOutfitsRequest* New() const final {
    return CreateMaybeMessage<GetOutfitsRequest>(nullptr);
  }

  GetOutfitsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOutfitsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetOutfitsRequest& from);
  void MergeFrom(const GetOutfitsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOutfitsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.devtools.GetOutfitsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fdevtools_2eproto);
    return ::descriptor_table_devtools_2fdevtools_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string category = 2;
  void clear_category();
  static const int kCategoryFieldNumber = 2;
  const std::string& category() const;
  void set_category(const std::string& value);
  void set_category(std::string&& value);
  void set_category(const char* value);
  void set_category(const char* value, size_t size);
  std::string* mutable_category();
  std::string* release_category();
  void set_allocated_category(std::string* category);

  // string author = 3;
  void clear_author();
  static const int kAuthorFieldNumber = 3;
  const std::string& author() const;
  void set_author(const std::string& value);
  void set_author(std::string&& value);
  void set_author(const char* value);
  void set_author(const char* value, size_t size);
  std::string* mutable_author();
  std::string* release_author();
  void set_allocated_author(std::string* author);

  // @@protoc_insertion_point(class_scope:mruv.devtools.GetOutfitsRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr category_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr author_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fdevtools_2eproto;
};
// -------------------------------------------------------------------

class GetOutfitsResponse_Row :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.devtools.GetOutfitsResponse.Row) */ {
 public:
  GetOutfitsResponse_Row();
  virtual ~GetOutfitsResponse_Row();

  GetOutfitsResponse_Row(const GetOutfitsResponse_Row& from);
  GetOutfitsResponse_Row(GetOutfitsResponse_Row&& from) noexcept
    : GetOutfitsResponse_Row() {
    *this = ::std::move(from);
  }

  inline GetOutfitsResponse_Row& operator=(const GetOutfitsResponse_Row& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOutfitsResponse_Row& operator=(GetOutfitsResponse_Row&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetOutfitsResponse_Row& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOutfitsResponse_Row* internal_default_instance() {
    return reinterpret_cast<const GetOutfitsResponse_Row*>(
               &_GetOutfitsResponse_Row_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(GetOutfitsResponse_Row* other);
  friend void swap(GetOutfitsResponse_Row& a, GetOutfitsResponse_Row& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetOutfitsResponse_Row* New() const final {
    return CreateMaybeMessage<GetOutfitsResponse_Row>(nullptr);
  }

  GetOutfitsResponse_Row* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOutfitsResponse_Row>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetOutfitsResponse_Row& from);
  void MergeFrom(const GetOutfitsResponse_Row& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOutfitsResponse_Row* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.devtools.GetOutfitsResponse.Row";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fdevtools_2eproto);
    return ::descriptor_table_devtools_2fdevtools_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mruv.devtools.Outfit outfit = 1;
  bool has_outfit() const;
  void clear_outfit();
  static const int kOutfitFieldNumber = 1;
  const ::mruv::devtools::Outfit& outfit() const;
  ::mruv::devtools::Outfit* release_outfit();
  ::mruv::devtools::Outfit* mutable_outfit();
  void set_allocated_outfit(::mruv::devtools::Outfit* outfit);

  // .mruv.devtools.Player author = 2;
  bool has_author() const;
  void clear_author();
  static const int kAuthorFieldNumber = 2;
  const ::mruv::devtools::Player& author() const;
  ::mruv::devtools::Player* release_author();
  ::mruv::devtools::Player* mutable_author();
  void set_allocated_author(::mruv::devtools::Player* author);

  // @@protoc_insertion_point(class_scope:mruv.devtools.GetOutfitsResponse.Row)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mruv::devtools::Outfit* outfit_;
  ::mruv::devtools::Player* author_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fdevtools_2eproto;
};
// -------------------------------------------------------------------

class GetOutfitsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.devtools.GetOutfitsResponse) */ {
 public:
  GetOutfitsResponse();
  virtual ~GetOutfitsResponse();

  GetOutfitsResponse(const GetOutfitsResponse& from);
  GetOutfitsResponse(GetOutfitsResponse&& from) noexcept
    : GetOutfitsResponse() {
    *this = ::std::move(from);
  }

  inline GetOutfitsResponse& operator=(const GetOutfitsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOutfitsResponse& operator=(GetOutfitsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetOutfitsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOutfitsResponse* internal_default_instance() {
    return reinterpret_cast<const GetOutfitsResponse*>(
               &_GetOutfitsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(GetOutfitsResponse* other);
  friend void swap(GetOutfitsResponse& a, GetOutfitsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetOutfitsResponse* New() const final {
    return CreateMaybeMessage<GetOutfitsResponse>(nullptr);
  }

  GetOutfitsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOutfitsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetOutfitsResponse& from);
  void MergeFrom(const GetOutfitsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOutfitsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.devtools.GetOutfitsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fdevtools_2eproto);
    return ::descriptor_table_devtools_2fdevtools_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetOutfitsResponse_Row Row;

  // accessors -------------------------------------------------------

  // repeated .mruv.devtools.GetOutfitsResponse.Row outfits = 1;
  int outfits_size() const;
  void clear_outfits();
  static const int kOutfitsFieldNumber = 1;
  ::mruv::devtools::GetOutfitsResponse_Row* mutable_outfits(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::devtools::GetOutfitsResponse_Row >*
      mutable_outfits();
  const ::mruv::devtools::GetOutfitsResponse_Row& outfits(int index) const;
  ::mruv::devtools::GetOutfitsResponse_Row* add_outfits();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::devtools::GetOutfitsResponse_Row >&
      outfits() const;

  // @@protoc_insertion_point(class_scope:mruv.devtools.GetOutfitsResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::devtools::GetOutfitsResponse_Row > outfits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fdevtools_2eproto;
};
// -------------------------------------------------------------------

class SaveOutfitRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.devtools.SaveOutfitRequest) */ {
 public:
  SaveOutfitRequest();
  virtual ~SaveOutfitRequest();

  SaveOutfitRequest(const SaveOutfitRequest& from);
  SaveOutfitRequest(SaveOutfitRequest&& from) noexcept
    : SaveOutfitRequest() {
    *this = ::std::move(from);
  }

  inline SaveOutfitRequest& operator=(const SaveOutfitRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaveOutfitRequest& operator=(SaveOutfitRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SaveOutfitRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SaveOutfitRequest* internal_default_instance() {
    return reinterpret_cast<const SaveOutfitRequest*>(
               &_SaveOutfitRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(SaveOutfitRequest* other);
  friend void swap(SaveOutfitRequest& a, SaveOutfitRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SaveOutfitRequest* New() const final {
    return CreateMaybeMessage<SaveOutfitRequest>(nullptr);
  }

  SaveOutfitRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SaveOutfitRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SaveOutfitRequest& from);
  void MergeFrom(const SaveOutfitRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveOutfitRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.devtools.SaveOutfitRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fdevtools_2eproto);
    return ::descriptor_table_devtools_2fdevtools_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mruv.devtools.Outfit outfit = 1;
  bool has_outfit() const;
  void clear_outfit();
  static const int kOutfitFieldNumber = 1;
  const ::mruv::devtools::Outfit& outfit() const;
  ::mruv::devtools::Outfit* release_outfit();
  ::mruv::devtools::Outfit* mutable_outfit();
  void set_allocated_outfit(::mruv::devtools::Outfit* outfit);

  // @@protoc_insertion_point(class_scope:mruv.devtools.SaveOutfitRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mruv::devtools::Outfit* outfit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fdevtools_2eproto;
};
// -------------------------------------------------------------------

class SaveOutfitResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.devtools.SaveOutfitResponse) */ {
 public:
  SaveOutfitResponse();
  virtual ~SaveOutfitResponse();

  SaveOutfitResponse(const SaveOutfitResponse& from);
  SaveOutfitResponse(SaveOutfitResponse&& from) noexcept
    : SaveOutfitResponse() {
    *this = ::std::move(from);
  }

  inline SaveOutfitResponse& operator=(const SaveOutfitResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaveOutfitResponse& operator=(SaveOutfitResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SaveOutfitResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SaveOutfitResponse* internal_default_instance() {
    return reinterpret_cast<const SaveOutfitResponse*>(
               &_SaveOutfitResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(SaveOutfitResponse* other);
  friend void swap(SaveOutfitResponse& a, SaveOutfitResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SaveOutfitResponse* New() const final {
    return CreateMaybeMessage<SaveOutfitResponse>(nullptr);
  }

  SaveOutfitResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SaveOutfitResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SaveOutfitResponse& from);
  void MergeFrom(const SaveOutfitResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveOutfitResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.devtools.SaveOutfitResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fdevtools_2eproto);
    return ::descriptor_table_devtools_2fdevtools_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:mruv.devtools.SaveOutfitResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fdevtools_2eproto;
};
// -------------------------------------------------------------------

class GetAnimationsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.devtools.GetAnimationsRequest) */ {
 public:
  GetAnimationsRequest();
  virtual ~GetAnimationsRequest();

  GetAnimationsRequest(const GetAnimationsRequest& from);
  GetAnimationsRequest(GetAnimationsRequest&& from) noexcept
    : GetAnimationsRequest() {
    *this = ::std::move(from);
  }

  inline GetAnimationsRequest& operator=(const GetAnimationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAnimationsRequest& operator=(GetAnimationsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAnimationsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAnimationsRequest* internal_default_instance() {
    return reinterpret_cast<const GetAnimationsRequest*>(
               &_GetAnimationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(GetAnimationsRequest* other);
  friend void swap(GetAnimationsRequest& a, GetAnimationsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetAnimationsRequest* New() const final {
    return CreateMaybeMessage<GetAnimationsRequest>(nullptr);
  }

  GetAnimationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAnimationsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAnimationsRequest& from);
  void MergeFrom(const GetAnimationsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAnimationsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.devtools.GetAnimationsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fdevtools_2eproto);
    return ::descriptor_table_devtools_2fdevtools_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string dict = 2;
  void clear_dict();
  static const int kDictFieldNumber = 2;
  const std::string& dict() const;
  void set_dict(const std::string& value);
  void set_dict(std::string&& value);
  void set_dict(const char* value);
  void set_dict(const char* value, size_t size);
  std::string* mutable_dict();
  std::string* release_dict();
  void set_allocated_dict(std::string* dict);

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // uint32 limit = 1;
  void clear_limit();
  static const int kLimitFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:mruv.devtools.GetAnimationsRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dict_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fdevtools_2eproto;
};
// -------------------------------------------------------------------

class GetAnimationsResponse_Row :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.devtools.GetAnimationsResponse.Row) */ {
 public:
  GetAnimationsResponse_Row();
  virtual ~GetAnimationsResponse_Row();

  GetAnimationsResponse_Row(const GetAnimationsResponse_Row& from);
  GetAnimationsResponse_Row(GetAnimationsResponse_Row&& from) noexcept
    : GetAnimationsResponse_Row() {
    *this = ::std::move(from);
  }

  inline GetAnimationsResponse_Row& operator=(const GetAnimationsResponse_Row& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAnimationsResponse_Row& operator=(GetAnimationsResponse_Row&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAnimationsResponse_Row& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAnimationsResponse_Row* internal_default_instance() {
    return reinterpret_cast<const GetAnimationsResponse_Row*>(
               &_GetAnimationsResponse_Row_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(GetAnimationsResponse_Row* other);
  friend void swap(GetAnimationsResponse_Row& a, GetAnimationsResponse_Row& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetAnimationsResponse_Row* New() const final {
    return CreateMaybeMessage<GetAnimationsResponse_Row>(nullptr);
  }

  GetAnimationsResponse_Row* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAnimationsResponse_Row>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAnimationsResponse_Row& from);
  void MergeFrom(const GetAnimationsResponse_Row& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAnimationsResponse_Row* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.devtools.GetAnimationsResponse.Row";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fdevtools_2eproto);
    return ::descriptor_table_devtools_2fdevtools_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mruv.devtools.Animation animation = 1;
  bool has_animation() const;
  void clear_animation();
  static const int kAnimationFieldNumber = 1;
  const ::mruv::devtools::Animation& animation() const;
  ::mruv::devtools::Animation* release_animation();
  ::mruv::devtools::Animation* mutable_animation();
  void set_allocated_animation(::mruv::devtools::Animation* animation);

  // .mruv.devtools.Player author = 2;
  bool has_author() const;
  void clear_author();
  static const int kAuthorFieldNumber = 2;
  const ::mruv::devtools::Player& author() const;
  ::mruv::devtools::Player* release_author();
  ::mruv::devtools::Player* mutable_author();
  void set_allocated_author(::mruv::devtools::Player* author);

  // @@protoc_insertion_point(class_scope:mruv.devtools.GetAnimationsResponse.Row)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mruv::devtools::Animation* animation_;
  ::mruv::devtools::Player* author_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fdevtools_2eproto;
};
// -------------------------------------------------------------------

class GetAnimationsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.devtools.GetAnimationsResponse) */ {
 public:
  GetAnimationsResponse();
  virtual ~GetAnimationsResponse();

  GetAnimationsResponse(const GetAnimationsResponse& from);
  GetAnimationsResponse(GetAnimationsResponse&& from) noexcept
    : GetAnimationsResponse() {
    *this = ::std::move(from);
  }

  inline GetAnimationsResponse& operator=(const GetAnimationsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAnimationsResponse& operator=(GetAnimationsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAnimationsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAnimationsResponse* internal_default_instance() {
    return reinterpret_cast<const GetAnimationsResponse*>(
               &_GetAnimationsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(GetAnimationsResponse* other);
  friend void swap(GetAnimationsResponse& a, GetAnimationsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetAnimationsResponse* New() const final {
    return CreateMaybeMessage<GetAnimationsResponse>(nullptr);
  }

  GetAnimationsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAnimationsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAnimationsResponse& from);
  void MergeFrom(const GetAnimationsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAnimationsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.devtools.GetAnimationsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fdevtools_2eproto);
    return ::descriptor_table_devtools_2fdevtools_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetAnimationsResponse_Row Row;

  // accessors -------------------------------------------------------

  // repeated .mruv.devtools.GetAnimationsResponse.Row animations = 1;
  int animations_size() const;
  void clear_animations();
  static const int kAnimationsFieldNumber = 1;
  ::mruv::devtools::GetAnimationsResponse_Row* mutable_animations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::devtools::GetAnimationsResponse_Row >*
      mutable_animations();
  const ::mruv::devtools::GetAnimationsResponse_Row& animations(int index) const;
  ::mruv::devtools::GetAnimationsResponse_Row* add_animations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::devtools::GetAnimationsResponse_Row >&
      animations() const;

  // @@protoc_insertion_point(class_scope:mruv.devtools.GetAnimationsResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::devtools::GetAnimationsResponse_Row > animations_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fdevtools_2eproto;
};
// -------------------------------------------------------------------

class GetAnimationRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.devtools.GetAnimationRequest) */ {
 public:
  GetAnimationRequest();
  virtual ~GetAnimationRequest();

  GetAnimationRequest(const GetAnimationRequest& from);
  GetAnimationRequest(GetAnimationRequest&& from) noexcept
    : GetAnimationRequest() {
    *this = ::std::move(from);
  }

  inline GetAnimationRequest& operator=(const GetAnimationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAnimationRequest& operator=(GetAnimationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAnimationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAnimationRequest* internal_default_instance() {
    return reinterpret_cast<const GetAnimationRequest*>(
               &_GetAnimationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(GetAnimationRequest* other);
  friend void swap(GetAnimationRequest& a, GetAnimationRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetAnimationRequest* New() const final {
    return CreateMaybeMessage<GetAnimationRequest>(nullptr);
  }

  GetAnimationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAnimationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAnimationRequest& from);
  void MergeFrom(const GetAnimationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAnimationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.devtools.GetAnimationRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fdevtools_2eproto);
    return ::descriptor_table_devtools_2fdevtools_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string dict = 1;
  void clear_dict();
  static const int kDictFieldNumber = 1;
  const std::string& dict() const;
  void set_dict(const std::string& value);
  void set_dict(std::string&& value);
  void set_dict(const char* value);
  void set_dict(const char* value, size_t size);
  std::string* mutable_dict();
  std::string* release_dict();
  void set_allocated_dict(std::string* dict);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // @@protoc_insertion_point(class_scope:mruv.devtools.GetAnimationRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dict_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fdevtools_2eproto;
};
// -------------------------------------------------------------------

class GetAnimationResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.devtools.GetAnimationResponse) */ {
 public:
  GetAnimationResponse();
  virtual ~GetAnimationResponse();

  GetAnimationResponse(const GetAnimationResponse& from);
  GetAnimationResponse(GetAnimationResponse&& from) noexcept
    : GetAnimationResponse() {
    *this = ::std::move(from);
  }

  inline GetAnimationResponse& operator=(const GetAnimationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAnimationResponse& operator=(GetAnimationResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAnimationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAnimationResponse* internal_default_instance() {
    return reinterpret_cast<const GetAnimationResponse*>(
               &_GetAnimationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(GetAnimationResponse* other);
  friend void swap(GetAnimationResponse& a, GetAnimationResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetAnimationResponse* New() const final {
    return CreateMaybeMessage<GetAnimationResponse>(nullptr);
  }

  GetAnimationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAnimationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAnimationResponse& from);
  void MergeFrom(const GetAnimationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAnimationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.devtools.GetAnimationResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fdevtools_2eproto);
    return ::descriptor_table_devtools_2fdevtools_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mruv.devtools.Animation animation = 1;
  bool has_animation() const;
  void clear_animation();
  static const int kAnimationFieldNumber = 1;
  const ::mruv::devtools::Animation& animation() const;
  ::mruv::devtools::Animation* release_animation();
  ::mruv::devtools::Animation* mutable_animation();
  void set_allocated_animation(::mruv::devtools::Animation* animation);

  // .mruv.devtools.Player author = 2;
  bool has_author() const;
  void clear_author();
  static const int kAuthorFieldNumber = 2;
  const ::mruv::devtools::Player& author() const;
  ::mruv::devtools::Player* release_author();
  ::mruv::devtools::Player* mutable_author();
  void set_allocated_author(::mruv::devtools::Player* author);

  // @@protoc_insertion_point(class_scope:mruv.devtools.GetAnimationResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mruv::devtools::Animation* animation_;
  ::mruv::devtools::Player* author_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fdevtools_2eproto;
};
// -------------------------------------------------------------------

class SaveAnimationRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.devtools.SaveAnimationRequest) */ {
 public:
  SaveAnimationRequest();
  virtual ~SaveAnimationRequest();

  SaveAnimationRequest(const SaveAnimationRequest& from);
  SaveAnimationRequest(SaveAnimationRequest&& from) noexcept
    : SaveAnimationRequest() {
    *this = ::std::move(from);
  }

  inline SaveAnimationRequest& operator=(const SaveAnimationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaveAnimationRequest& operator=(SaveAnimationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SaveAnimationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SaveAnimationRequest* internal_default_instance() {
    return reinterpret_cast<const SaveAnimationRequest*>(
               &_SaveAnimationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(SaveAnimationRequest* other);
  friend void swap(SaveAnimationRequest& a, SaveAnimationRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SaveAnimationRequest* New() const final {
    return CreateMaybeMessage<SaveAnimationRequest>(nullptr);
  }

  SaveAnimationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SaveAnimationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SaveAnimationRequest& from);
  void MergeFrom(const SaveAnimationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveAnimationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.devtools.SaveAnimationRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fdevtools_2eproto);
    return ::descriptor_table_devtools_2fdevtools_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mruv.devtools.Animation animation = 1;
  bool has_animation() const;
  void clear_animation();
  static const int kAnimationFieldNumber = 1;
  const ::mruv::devtools::Animation& animation() const;
  ::mruv::devtools::Animation* release_animation();
  ::mruv::devtools::Animation* mutable_animation();
  void set_allocated_animation(::mruv::devtools::Animation* animation);

  // @@protoc_insertion_point(class_scope:mruv.devtools.SaveAnimationRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mruv::devtools::Animation* animation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fdevtools_2eproto;
};
// -------------------------------------------------------------------

class SaveAnimationResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.devtools.SaveAnimationResponse) */ {
 public:
  SaveAnimationResponse();
  virtual ~SaveAnimationResponse();

  SaveAnimationResponse(const SaveAnimationResponse& from);
  SaveAnimationResponse(SaveAnimationResponse&& from) noexcept
    : SaveAnimationResponse() {
    *this = ::std::move(from);
  }

  inline SaveAnimationResponse& operator=(const SaveAnimationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaveAnimationResponse& operator=(SaveAnimationResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SaveAnimationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SaveAnimationResponse* internal_default_instance() {
    return reinterpret_cast<const SaveAnimationResponse*>(
               &_SaveAnimationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(SaveAnimationResponse* other);
  friend void swap(SaveAnimationResponse& a, SaveAnimationResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SaveAnimationResponse* New() const final {
    return CreateMaybeMessage<SaveAnimationResponse>(nullptr);
  }

  SaveAnimationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SaveAnimationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SaveAnimationResponse& from);
  void MergeFrom(const SaveAnimationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveAnimationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.devtools.SaveAnimationResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fdevtools_2eproto);
    return ::descriptor_table_devtools_2fdevtools_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:mruv.devtools.SaveAnimationResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fdevtools_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetPositionsRequest

// uint32 limit = 1;
inline void GetPositionsRequest::clear_limit() {
  limit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetPositionsRequest::limit() const {
  // @@protoc_insertion_point(field_get:mruv.devtools.GetPositionsRequest.limit)
  return limit_;
}
inline void GetPositionsRequest::set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:mruv.devtools.GetPositionsRequest.limit)
}

// string category = 2;
inline void GetPositionsRequest::clear_category() {
  category_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetPositionsRequest::category() const {
  // @@protoc_insertion_point(field_get:mruv.devtools.GetPositionsRequest.category)
  return category_.GetNoArena();
}
inline void GetPositionsRequest::set_category(const std::string& value) {
  
  category_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mruv.devtools.GetPositionsRequest.category)
}
inline void GetPositionsRequest::set_category(std::string&& value) {
  
  category_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.devtools.GetPositionsRequest.category)
}
inline void GetPositionsRequest::set_category(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  category_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.devtools.GetPositionsRequest.category)
}
inline void GetPositionsRequest::set_category(const char* value, size_t size) {
  
  category_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.devtools.GetPositionsRequest.category)
}
inline std::string* GetPositionsRequest::mutable_category() {
  
  // @@protoc_insertion_point(field_mutable:mruv.devtools.GetPositionsRequest.category)
  return category_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetPositionsRequest::release_category() {
  // @@protoc_insertion_point(field_release:mruv.devtools.GetPositionsRequest.category)
  
  return category_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetPositionsRequest::set_allocated_category(std::string* category) {
  if (category != nullptr) {
    
  } else {
    
  }
  category_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), category);
  // @@protoc_insertion_point(field_set_allocated:mruv.devtools.GetPositionsRequest.category)
}

// .mruv.devtools.Player author = 3;
inline bool GetPositionsRequest::has_author() const {
  return this != internal_default_instance() && author_ != nullptr;
}
inline const ::mruv::devtools::Player& GetPositionsRequest::author() const {
  const ::mruv::devtools::Player* p = author_;
  // @@protoc_insertion_point(field_get:mruv.devtools.GetPositionsRequest.author)
  return p != nullptr ? *p : *reinterpret_cast<const ::mruv::devtools::Player*>(
      &::mruv::devtools::_Player_default_instance_);
}
inline ::mruv::devtools::Player* GetPositionsRequest::release_author() {
  // @@protoc_insertion_point(field_release:mruv.devtools.GetPositionsRequest.author)
  
  ::mruv::devtools::Player* temp = author_;
  author_ = nullptr;
  return temp;
}
inline ::mruv::devtools::Player* GetPositionsRequest::mutable_author() {
  
  if (author_ == nullptr) {
    auto* p = CreateMaybeMessage<::mruv::devtools::Player>(GetArenaNoVirtual());
    author_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mruv.devtools.GetPositionsRequest.author)
  return author_;
}
inline void GetPositionsRequest::set_allocated_author(::mruv::devtools::Player* author) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(author_);
  }
  if (author) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      author = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, author, submessage_arena);
    }
    
  } else {
    
  }
  author_ = author;
  // @@protoc_insertion_point(field_set_allocated:mruv.devtools.GetPositionsRequest.author)
}

// -------------------------------------------------------------------

// GetPositionsResponse_Row

// .mruv.devtools.Position position = 1;
inline bool GetPositionsResponse_Row::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline const ::mruv::devtools::Position& GetPositionsResponse_Row::position() const {
  const ::mruv::devtools::Position* p = position_;
  // @@protoc_insertion_point(field_get:mruv.devtools.GetPositionsResponse.Row.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::mruv::devtools::Position*>(
      &::mruv::devtools::_Position_default_instance_);
}
inline ::mruv::devtools::Position* GetPositionsResponse_Row::release_position() {
  // @@protoc_insertion_point(field_release:mruv.devtools.GetPositionsResponse.Row.position)
  
  ::mruv::devtools::Position* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::mruv::devtools::Position* GetPositionsResponse_Row::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::mruv::devtools::Position>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mruv.devtools.GetPositionsResponse.Row.position)
  return position_;
}
inline void GetPositionsResponse_Row::set_allocated_position(::mruv::devtools::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:mruv.devtools.GetPositionsResponse.Row.position)
}

// .mruv.devtools.Player author = 2;
inline bool GetPositionsResponse_Row::has_author() const {
  return this != internal_default_instance() && author_ != nullptr;
}
inline const ::mruv::devtools::Player& GetPositionsResponse_Row::author() const {
  const ::mruv::devtools::Player* p = author_;
  // @@protoc_insertion_point(field_get:mruv.devtools.GetPositionsResponse.Row.author)
  return p != nullptr ? *p : *reinterpret_cast<const ::mruv::devtools::Player*>(
      &::mruv::devtools::_Player_default_instance_);
}
inline ::mruv::devtools::Player* GetPositionsResponse_Row::release_author() {
  // @@protoc_insertion_point(field_release:mruv.devtools.GetPositionsResponse.Row.author)
  
  ::mruv::devtools::Player* temp = author_;
  author_ = nullptr;
  return temp;
}
inline ::mruv::devtools::Player* GetPositionsResponse_Row::mutable_author() {
  
  if (author_ == nullptr) {
    auto* p = CreateMaybeMessage<::mruv::devtools::Player>(GetArenaNoVirtual());
    author_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mruv.devtools.GetPositionsResponse.Row.author)
  return author_;
}
inline void GetPositionsResponse_Row::set_allocated_author(::mruv::devtools::Player* author) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(author_);
  }
  if (author) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      author = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, author, submessage_arena);
    }
    
  } else {
    
  }
  author_ = author;
  // @@protoc_insertion_point(field_set_allocated:mruv.devtools.GetPositionsResponse.Row.author)
}

// -------------------------------------------------------------------

// GetPositionsResponse

// repeated .mruv.devtools.GetPositionsResponse.Row positions = 1;
inline int GetPositionsResponse::positions_size() const {
  return positions_.size();
}
inline void GetPositionsResponse::clear_positions() {
  positions_.Clear();
}
inline ::mruv::devtools::GetPositionsResponse_Row* GetPositionsResponse::mutable_positions(int index) {
  // @@protoc_insertion_point(field_mutable:mruv.devtools.GetPositionsResponse.positions)
  return positions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::devtools::GetPositionsResponse_Row >*
GetPositionsResponse::mutable_positions() {
  // @@protoc_insertion_point(field_mutable_list:mruv.devtools.GetPositionsResponse.positions)
  return &positions_;
}
inline const ::mruv::devtools::GetPositionsResponse_Row& GetPositionsResponse::positions(int index) const {
  // @@protoc_insertion_point(field_get:mruv.devtools.GetPositionsResponse.positions)
  return positions_.Get(index);
}
inline ::mruv::devtools::GetPositionsResponse_Row* GetPositionsResponse::add_positions() {
  // @@protoc_insertion_point(field_add:mruv.devtools.GetPositionsResponse.positions)
  return positions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::devtools::GetPositionsResponse_Row >&
GetPositionsResponse::positions() const {
  // @@protoc_insertion_point(field_list:mruv.devtools.GetPositionsResponse.positions)
  return positions_;
}

// -------------------------------------------------------------------

// SavePositionRequest

// .mruv.devtools.Position position = 1;
inline bool SavePositionRequest::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline const ::mruv::devtools::Position& SavePositionRequest::position() const {
  const ::mruv::devtools::Position* p = position_;
  // @@protoc_insertion_point(field_get:mruv.devtools.SavePositionRequest.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::mruv::devtools::Position*>(
      &::mruv::devtools::_Position_default_instance_);
}
inline ::mruv::devtools::Position* SavePositionRequest::release_position() {
  // @@protoc_insertion_point(field_release:mruv.devtools.SavePositionRequest.position)
  
  ::mruv::devtools::Position* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::mruv::devtools::Position* SavePositionRequest::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::mruv::devtools::Position>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mruv.devtools.SavePositionRequest.position)
  return position_;
}
inline void SavePositionRequest::set_allocated_position(::mruv::devtools::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:mruv.devtools.SavePositionRequest.position)
}

// -------------------------------------------------------------------

// SavePositionResponse

// bool success = 1;
inline void SavePositionResponse::clear_success() {
  success_ = false;
}
inline bool SavePositionResponse::success() const {
  // @@protoc_insertion_point(field_get:mruv.devtools.SavePositionResponse.success)
  return success_;
}
inline void SavePositionResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:mruv.devtools.SavePositionResponse.success)
}

// -------------------------------------------------------------------

// DeletePositionRequest

// .mruv.devtools.Position position = 1;
inline bool DeletePositionRequest::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline const ::mruv::devtools::Position& DeletePositionRequest::position() const {
  const ::mruv::devtools::Position* p = position_;
  // @@protoc_insertion_point(field_get:mruv.devtools.DeletePositionRequest.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::mruv::devtools::Position*>(
      &::mruv::devtools::_Position_default_instance_);
}
inline ::mruv::devtools::Position* DeletePositionRequest::release_position() {
  // @@protoc_insertion_point(field_release:mruv.devtools.DeletePositionRequest.position)
  
  ::mruv::devtools::Position* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::mruv::devtools::Position* DeletePositionRequest::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::mruv::devtools::Position>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mruv.devtools.DeletePositionRequest.position)
  return position_;
}
inline void DeletePositionRequest::set_allocated_position(::mruv::devtools::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:mruv.devtools.DeletePositionRequest.position)
}

// -------------------------------------------------------------------

// DeletePositionResponse

// bool success = 1;
inline void DeletePositionResponse::clear_success() {
  success_ = false;
}
inline bool DeletePositionResponse::success() const {
  // @@protoc_insertion_point(field_get:mruv.devtools.DeletePositionResponse.success)
  return success_;
}
inline void DeletePositionResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:mruv.devtools.DeletePositionResponse.success)
}

// -------------------------------------------------------------------

// GetOutfitsRequest

// string name = 1;
inline void GetOutfitsRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetOutfitsRequest::name() const {
  // @@protoc_insertion_point(field_get:mruv.devtools.GetOutfitsRequest.name)
  return name_.GetNoArena();
}
inline void GetOutfitsRequest::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mruv.devtools.GetOutfitsRequest.name)
}
inline void GetOutfitsRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.devtools.GetOutfitsRequest.name)
}
inline void GetOutfitsRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.devtools.GetOutfitsRequest.name)
}
inline void GetOutfitsRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.devtools.GetOutfitsRequest.name)
}
inline std::string* GetOutfitsRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:mruv.devtools.GetOutfitsRequest.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetOutfitsRequest::release_name() {
  // @@protoc_insertion_point(field_release:mruv.devtools.GetOutfitsRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetOutfitsRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mruv.devtools.GetOutfitsRequest.name)
}

// string category = 2;
inline void GetOutfitsRequest::clear_category() {
  category_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetOutfitsRequest::category() const {
  // @@protoc_insertion_point(field_get:mruv.devtools.GetOutfitsRequest.category)
  return category_.GetNoArena();
}
inline void GetOutfitsRequest::set_category(const std::string& value) {
  
  category_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mruv.devtools.GetOutfitsRequest.category)
}
inline void GetOutfitsRequest::set_category(std::string&& value) {
  
  category_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.devtools.GetOutfitsRequest.category)
}
inline void GetOutfitsRequest::set_category(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  category_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.devtools.GetOutfitsRequest.category)
}
inline void GetOutfitsRequest::set_category(const char* value, size_t size) {
  
  category_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.devtools.GetOutfitsRequest.category)
}
inline std::string* GetOutfitsRequest::mutable_category() {
  
  // @@protoc_insertion_point(field_mutable:mruv.devtools.GetOutfitsRequest.category)
  return category_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetOutfitsRequest::release_category() {
  // @@protoc_insertion_point(field_release:mruv.devtools.GetOutfitsRequest.category)
  
  return category_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetOutfitsRequest::set_allocated_category(std::string* category) {
  if (category != nullptr) {
    
  } else {
    
  }
  category_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), category);
  // @@protoc_insertion_point(field_set_allocated:mruv.devtools.GetOutfitsRequest.category)
}

// string author = 3;
inline void GetOutfitsRequest::clear_author() {
  author_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetOutfitsRequest::author() const {
  // @@protoc_insertion_point(field_get:mruv.devtools.GetOutfitsRequest.author)
  return author_.GetNoArena();
}
inline void GetOutfitsRequest::set_author(const std::string& value) {
  
  author_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mruv.devtools.GetOutfitsRequest.author)
}
inline void GetOutfitsRequest::set_author(std::string&& value) {
  
  author_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.devtools.GetOutfitsRequest.author)
}
inline void GetOutfitsRequest::set_author(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  author_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.devtools.GetOutfitsRequest.author)
}
inline void GetOutfitsRequest::set_author(const char* value, size_t size) {
  
  author_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.devtools.GetOutfitsRequest.author)
}
inline std::string* GetOutfitsRequest::mutable_author() {
  
  // @@protoc_insertion_point(field_mutable:mruv.devtools.GetOutfitsRequest.author)
  return author_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetOutfitsRequest::release_author() {
  // @@protoc_insertion_point(field_release:mruv.devtools.GetOutfitsRequest.author)
  
  return author_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetOutfitsRequest::set_allocated_author(std::string* author) {
  if (author != nullptr) {
    
  } else {
    
  }
  author_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), author);
  // @@protoc_insertion_point(field_set_allocated:mruv.devtools.GetOutfitsRequest.author)
}

// -------------------------------------------------------------------

// GetOutfitsResponse_Row

// .mruv.devtools.Outfit outfit = 1;
inline bool GetOutfitsResponse_Row::has_outfit() const {
  return this != internal_default_instance() && outfit_ != nullptr;
}
inline const ::mruv::devtools::Outfit& GetOutfitsResponse_Row::outfit() const {
  const ::mruv::devtools::Outfit* p = outfit_;
  // @@protoc_insertion_point(field_get:mruv.devtools.GetOutfitsResponse.Row.outfit)
  return p != nullptr ? *p : *reinterpret_cast<const ::mruv::devtools::Outfit*>(
      &::mruv::devtools::_Outfit_default_instance_);
}
inline ::mruv::devtools::Outfit* GetOutfitsResponse_Row::release_outfit() {
  // @@protoc_insertion_point(field_release:mruv.devtools.GetOutfitsResponse.Row.outfit)
  
  ::mruv::devtools::Outfit* temp = outfit_;
  outfit_ = nullptr;
  return temp;
}
inline ::mruv::devtools::Outfit* GetOutfitsResponse_Row::mutable_outfit() {
  
  if (outfit_ == nullptr) {
    auto* p = CreateMaybeMessage<::mruv::devtools::Outfit>(GetArenaNoVirtual());
    outfit_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mruv.devtools.GetOutfitsResponse.Row.outfit)
  return outfit_;
}
inline void GetOutfitsResponse_Row::set_allocated_outfit(::mruv::devtools::Outfit* outfit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(outfit_);
  }
  if (outfit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      outfit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, outfit, submessage_arena);
    }
    
  } else {
    
  }
  outfit_ = outfit;
  // @@protoc_insertion_point(field_set_allocated:mruv.devtools.GetOutfitsResponse.Row.outfit)
}

// .mruv.devtools.Player author = 2;
inline bool GetOutfitsResponse_Row::has_author() const {
  return this != internal_default_instance() && author_ != nullptr;
}
inline const ::mruv::devtools::Player& GetOutfitsResponse_Row::author() const {
  const ::mruv::devtools::Player* p = author_;
  // @@protoc_insertion_point(field_get:mruv.devtools.GetOutfitsResponse.Row.author)
  return p != nullptr ? *p : *reinterpret_cast<const ::mruv::devtools::Player*>(
      &::mruv::devtools::_Player_default_instance_);
}
inline ::mruv::devtools::Player* GetOutfitsResponse_Row::release_author() {
  // @@protoc_insertion_point(field_release:mruv.devtools.GetOutfitsResponse.Row.author)
  
  ::mruv::devtools::Player* temp = author_;
  author_ = nullptr;
  return temp;
}
inline ::mruv::devtools::Player* GetOutfitsResponse_Row::mutable_author() {
  
  if (author_ == nullptr) {
    auto* p = CreateMaybeMessage<::mruv::devtools::Player>(GetArenaNoVirtual());
    author_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mruv.devtools.GetOutfitsResponse.Row.author)
  return author_;
}
inline void GetOutfitsResponse_Row::set_allocated_author(::mruv::devtools::Player* author) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(author_);
  }
  if (author) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      author = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, author, submessage_arena);
    }
    
  } else {
    
  }
  author_ = author;
  // @@protoc_insertion_point(field_set_allocated:mruv.devtools.GetOutfitsResponse.Row.author)
}

// -------------------------------------------------------------------

// GetOutfitsResponse

// repeated .mruv.devtools.GetOutfitsResponse.Row outfits = 1;
inline int GetOutfitsResponse::outfits_size() const {
  return outfits_.size();
}
inline void GetOutfitsResponse::clear_outfits() {
  outfits_.Clear();
}
inline ::mruv::devtools::GetOutfitsResponse_Row* GetOutfitsResponse::mutable_outfits(int index) {
  // @@protoc_insertion_point(field_mutable:mruv.devtools.GetOutfitsResponse.outfits)
  return outfits_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::devtools::GetOutfitsResponse_Row >*
GetOutfitsResponse::mutable_outfits() {
  // @@protoc_insertion_point(field_mutable_list:mruv.devtools.GetOutfitsResponse.outfits)
  return &outfits_;
}
inline const ::mruv::devtools::GetOutfitsResponse_Row& GetOutfitsResponse::outfits(int index) const {
  // @@protoc_insertion_point(field_get:mruv.devtools.GetOutfitsResponse.outfits)
  return outfits_.Get(index);
}
inline ::mruv::devtools::GetOutfitsResponse_Row* GetOutfitsResponse::add_outfits() {
  // @@protoc_insertion_point(field_add:mruv.devtools.GetOutfitsResponse.outfits)
  return outfits_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::devtools::GetOutfitsResponse_Row >&
GetOutfitsResponse::outfits() const {
  // @@protoc_insertion_point(field_list:mruv.devtools.GetOutfitsResponse.outfits)
  return outfits_;
}

// -------------------------------------------------------------------

// SaveOutfitRequest

// .mruv.devtools.Outfit outfit = 1;
inline bool SaveOutfitRequest::has_outfit() const {
  return this != internal_default_instance() && outfit_ != nullptr;
}
inline const ::mruv::devtools::Outfit& SaveOutfitRequest::outfit() const {
  const ::mruv::devtools::Outfit* p = outfit_;
  // @@protoc_insertion_point(field_get:mruv.devtools.SaveOutfitRequest.outfit)
  return p != nullptr ? *p : *reinterpret_cast<const ::mruv::devtools::Outfit*>(
      &::mruv::devtools::_Outfit_default_instance_);
}
inline ::mruv::devtools::Outfit* SaveOutfitRequest::release_outfit() {
  // @@protoc_insertion_point(field_release:mruv.devtools.SaveOutfitRequest.outfit)
  
  ::mruv::devtools::Outfit* temp = outfit_;
  outfit_ = nullptr;
  return temp;
}
inline ::mruv::devtools::Outfit* SaveOutfitRequest::mutable_outfit() {
  
  if (outfit_ == nullptr) {
    auto* p = CreateMaybeMessage<::mruv::devtools::Outfit>(GetArenaNoVirtual());
    outfit_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mruv.devtools.SaveOutfitRequest.outfit)
  return outfit_;
}
inline void SaveOutfitRequest::set_allocated_outfit(::mruv::devtools::Outfit* outfit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(outfit_);
  }
  if (outfit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      outfit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, outfit, submessage_arena);
    }
    
  } else {
    
  }
  outfit_ = outfit;
  // @@protoc_insertion_point(field_set_allocated:mruv.devtools.SaveOutfitRequest.outfit)
}

// -------------------------------------------------------------------

// SaveOutfitResponse

// bool success = 1;
inline void SaveOutfitResponse::clear_success() {
  success_ = false;
}
inline bool SaveOutfitResponse::success() const {
  // @@protoc_insertion_point(field_get:mruv.devtools.SaveOutfitResponse.success)
  return success_;
}
inline void SaveOutfitResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:mruv.devtools.SaveOutfitResponse.success)
}

// -------------------------------------------------------------------

// GetAnimationsRequest

// uint32 limit = 1;
inline void GetAnimationsRequest::clear_limit() {
  limit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetAnimationsRequest::limit() const {
  // @@protoc_insertion_point(field_get:mruv.devtools.GetAnimationsRequest.limit)
  return limit_;
}
inline void GetAnimationsRequest::set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:mruv.devtools.GetAnimationsRequest.limit)
}

// string dict = 2;
inline void GetAnimationsRequest::clear_dict() {
  dict_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetAnimationsRequest::dict() const {
  // @@protoc_insertion_point(field_get:mruv.devtools.GetAnimationsRequest.dict)
  return dict_.GetNoArena();
}
inline void GetAnimationsRequest::set_dict(const std::string& value) {
  
  dict_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mruv.devtools.GetAnimationsRequest.dict)
}
inline void GetAnimationsRequest::set_dict(std::string&& value) {
  
  dict_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.devtools.GetAnimationsRequest.dict)
}
inline void GetAnimationsRequest::set_dict(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dict_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.devtools.GetAnimationsRequest.dict)
}
inline void GetAnimationsRequest::set_dict(const char* value, size_t size) {
  
  dict_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.devtools.GetAnimationsRequest.dict)
}
inline std::string* GetAnimationsRequest::mutable_dict() {
  
  // @@protoc_insertion_point(field_mutable:mruv.devtools.GetAnimationsRequest.dict)
  return dict_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAnimationsRequest::release_dict() {
  // @@protoc_insertion_point(field_release:mruv.devtools.GetAnimationsRequest.dict)
  
  return dict_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAnimationsRequest::set_allocated_dict(std::string* dict) {
  if (dict != nullptr) {
    
  } else {
    
  }
  dict_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dict);
  // @@protoc_insertion_point(field_set_allocated:mruv.devtools.GetAnimationsRequest.dict)
}

// string name = 3;
inline void GetAnimationsRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetAnimationsRequest::name() const {
  // @@protoc_insertion_point(field_get:mruv.devtools.GetAnimationsRequest.name)
  return name_.GetNoArena();
}
inline void GetAnimationsRequest::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mruv.devtools.GetAnimationsRequest.name)
}
inline void GetAnimationsRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.devtools.GetAnimationsRequest.name)
}
inline void GetAnimationsRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.devtools.GetAnimationsRequest.name)
}
inline void GetAnimationsRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.devtools.GetAnimationsRequest.name)
}
inline std::string* GetAnimationsRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:mruv.devtools.GetAnimationsRequest.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAnimationsRequest::release_name() {
  // @@protoc_insertion_point(field_release:mruv.devtools.GetAnimationsRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAnimationsRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mruv.devtools.GetAnimationsRequest.name)
}

// -------------------------------------------------------------------

// GetAnimationsResponse_Row

// .mruv.devtools.Animation animation = 1;
inline bool GetAnimationsResponse_Row::has_animation() const {
  return this != internal_default_instance() && animation_ != nullptr;
}
inline const ::mruv::devtools::Animation& GetAnimationsResponse_Row::animation() const {
  const ::mruv::devtools::Animation* p = animation_;
  // @@protoc_insertion_point(field_get:mruv.devtools.GetAnimationsResponse.Row.animation)
  return p != nullptr ? *p : *reinterpret_cast<const ::mruv::devtools::Animation*>(
      &::mruv::devtools::_Animation_default_instance_);
}
inline ::mruv::devtools::Animation* GetAnimationsResponse_Row::release_animation() {
  // @@protoc_insertion_point(field_release:mruv.devtools.GetAnimationsResponse.Row.animation)
  
  ::mruv::devtools::Animation* temp = animation_;
  animation_ = nullptr;
  return temp;
}
inline ::mruv::devtools::Animation* GetAnimationsResponse_Row::mutable_animation() {
  
  if (animation_ == nullptr) {
    auto* p = CreateMaybeMessage<::mruv::devtools::Animation>(GetArenaNoVirtual());
    animation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mruv.devtools.GetAnimationsResponse.Row.animation)
  return animation_;
}
inline void GetAnimationsResponse_Row::set_allocated_animation(::mruv::devtools::Animation* animation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(animation_);
  }
  if (animation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      animation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, animation, submessage_arena);
    }
    
  } else {
    
  }
  animation_ = animation;
  // @@protoc_insertion_point(field_set_allocated:mruv.devtools.GetAnimationsResponse.Row.animation)
}

// .mruv.devtools.Player author = 2;
inline bool GetAnimationsResponse_Row::has_author() const {
  return this != internal_default_instance() && author_ != nullptr;
}
inline const ::mruv::devtools::Player& GetAnimationsResponse_Row::author() const {
  const ::mruv::devtools::Player* p = author_;
  // @@protoc_insertion_point(field_get:mruv.devtools.GetAnimationsResponse.Row.author)
  return p != nullptr ? *p : *reinterpret_cast<const ::mruv::devtools::Player*>(
      &::mruv::devtools::_Player_default_instance_);
}
inline ::mruv::devtools::Player* GetAnimationsResponse_Row::release_author() {
  // @@protoc_insertion_point(field_release:mruv.devtools.GetAnimationsResponse.Row.author)
  
  ::mruv::devtools::Player* temp = author_;
  author_ = nullptr;
  return temp;
}
inline ::mruv::devtools::Player* GetAnimationsResponse_Row::mutable_author() {
  
  if (author_ == nullptr) {
    auto* p = CreateMaybeMessage<::mruv::devtools::Player>(GetArenaNoVirtual());
    author_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mruv.devtools.GetAnimationsResponse.Row.author)
  return author_;
}
inline void GetAnimationsResponse_Row::set_allocated_author(::mruv::devtools::Player* author) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(author_);
  }
  if (author) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      author = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, author, submessage_arena);
    }
    
  } else {
    
  }
  author_ = author;
  // @@protoc_insertion_point(field_set_allocated:mruv.devtools.GetAnimationsResponse.Row.author)
}

// -------------------------------------------------------------------

// GetAnimationsResponse

// repeated .mruv.devtools.GetAnimationsResponse.Row animations = 1;
inline int GetAnimationsResponse::animations_size() const {
  return animations_.size();
}
inline void GetAnimationsResponse::clear_animations() {
  animations_.Clear();
}
inline ::mruv::devtools::GetAnimationsResponse_Row* GetAnimationsResponse::mutable_animations(int index) {
  // @@protoc_insertion_point(field_mutable:mruv.devtools.GetAnimationsResponse.animations)
  return animations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::devtools::GetAnimationsResponse_Row >*
GetAnimationsResponse::mutable_animations() {
  // @@protoc_insertion_point(field_mutable_list:mruv.devtools.GetAnimationsResponse.animations)
  return &animations_;
}
inline const ::mruv::devtools::GetAnimationsResponse_Row& GetAnimationsResponse::animations(int index) const {
  // @@protoc_insertion_point(field_get:mruv.devtools.GetAnimationsResponse.animations)
  return animations_.Get(index);
}
inline ::mruv::devtools::GetAnimationsResponse_Row* GetAnimationsResponse::add_animations() {
  // @@protoc_insertion_point(field_add:mruv.devtools.GetAnimationsResponse.animations)
  return animations_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::devtools::GetAnimationsResponse_Row >&
GetAnimationsResponse::animations() const {
  // @@protoc_insertion_point(field_list:mruv.devtools.GetAnimationsResponse.animations)
  return animations_;
}

// -------------------------------------------------------------------

// GetAnimationRequest

// string dict = 1;
inline void GetAnimationRequest::clear_dict() {
  dict_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetAnimationRequest::dict() const {
  // @@protoc_insertion_point(field_get:mruv.devtools.GetAnimationRequest.dict)
  return dict_.GetNoArena();
}
inline void GetAnimationRequest::set_dict(const std::string& value) {
  
  dict_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mruv.devtools.GetAnimationRequest.dict)
}
inline void GetAnimationRequest::set_dict(std::string&& value) {
  
  dict_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.devtools.GetAnimationRequest.dict)
}
inline void GetAnimationRequest::set_dict(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dict_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.devtools.GetAnimationRequest.dict)
}
inline void GetAnimationRequest::set_dict(const char* value, size_t size) {
  
  dict_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.devtools.GetAnimationRequest.dict)
}
inline std::string* GetAnimationRequest::mutable_dict() {
  
  // @@protoc_insertion_point(field_mutable:mruv.devtools.GetAnimationRequest.dict)
  return dict_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAnimationRequest::release_dict() {
  // @@protoc_insertion_point(field_release:mruv.devtools.GetAnimationRequest.dict)
  
  return dict_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAnimationRequest::set_allocated_dict(std::string* dict) {
  if (dict != nullptr) {
    
  } else {
    
  }
  dict_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dict);
  // @@protoc_insertion_point(field_set_allocated:mruv.devtools.GetAnimationRequest.dict)
}

// string name = 2;
inline void GetAnimationRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetAnimationRequest::name() const {
  // @@protoc_insertion_point(field_get:mruv.devtools.GetAnimationRequest.name)
  return name_.GetNoArena();
}
inline void GetAnimationRequest::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mruv.devtools.GetAnimationRequest.name)
}
inline void GetAnimationRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.devtools.GetAnimationRequest.name)
}
inline void GetAnimationRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.devtools.GetAnimationRequest.name)
}
inline void GetAnimationRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.devtools.GetAnimationRequest.name)
}
inline std::string* GetAnimationRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:mruv.devtools.GetAnimationRequest.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAnimationRequest::release_name() {
  // @@protoc_insertion_point(field_release:mruv.devtools.GetAnimationRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAnimationRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mruv.devtools.GetAnimationRequest.name)
}

// -------------------------------------------------------------------

// GetAnimationResponse

// .mruv.devtools.Animation animation = 1;
inline bool GetAnimationResponse::has_animation() const {
  return this != internal_default_instance() && animation_ != nullptr;
}
inline const ::mruv::devtools::Animation& GetAnimationResponse::animation() const {
  const ::mruv::devtools::Animation* p = animation_;
  // @@protoc_insertion_point(field_get:mruv.devtools.GetAnimationResponse.animation)
  return p != nullptr ? *p : *reinterpret_cast<const ::mruv::devtools::Animation*>(
      &::mruv::devtools::_Animation_default_instance_);
}
inline ::mruv::devtools::Animation* GetAnimationResponse::release_animation() {
  // @@protoc_insertion_point(field_release:mruv.devtools.GetAnimationResponse.animation)
  
  ::mruv::devtools::Animation* temp = animation_;
  animation_ = nullptr;
  return temp;
}
inline ::mruv::devtools::Animation* GetAnimationResponse::mutable_animation() {
  
  if (animation_ == nullptr) {
    auto* p = CreateMaybeMessage<::mruv::devtools::Animation>(GetArenaNoVirtual());
    animation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mruv.devtools.GetAnimationResponse.animation)
  return animation_;
}
inline void GetAnimationResponse::set_allocated_animation(::mruv::devtools::Animation* animation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(animation_);
  }
  if (animation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      animation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, animation, submessage_arena);
    }
    
  } else {
    
  }
  animation_ = animation;
  // @@protoc_insertion_point(field_set_allocated:mruv.devtools.GetAnimationResponse.animation)
}

// .mruv.devtools.Player author = 2;
inline bool GetAnimationResponse::has_author() const {
  return this != internal_default_instance() && author_ != nullptr;
}
inline const ::mruv::devtools::Player& GetAnimationResponse::author() const {
  const ::mruv::devtools::Player* p = author_;
  // @@protoc_insertion_point(field_get:mruv.devtools.GetAnimationResponse.author)
  return p != nullptr ? *p : *reinterpret_cast<const ::mruv::devtools::Player*>(
      &::mruv::devtools::_Player_default_instance_);
}
inline ::mruv::devtools::Player* GetAnimationResponse::release_author() {
  // @@protoc_insertion_point(field_release:mruv.devtools.GetAnimationResponse.author)
  
  ::mruv::devtools::Player* temp = author_;
  author_ = nullptr;
  return temp;
}
inline ::mruv::devtools::Player* GetAnimationResponse::mutable_author() {
  
  if (author_ == nullptr) {
    auto* p = CreateMaybeMessage<::mruv::devtools::Player>(GetArenaNoVirtual());
    author_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mruv.devtools.GetAnimationResponse.author)
  return author_;
}
inline void GetAnimationResponse::set_allocated_author(::mruv::devtools::Player* author) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(author_);
  }
  if (author) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      author = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, author, submessage_arena);
    }
    
  } else {
    
  }
  author_ = author;
  // @@protoc_insertion_point(field_set_allocated:mruv.devtools.GetAnimationResponse.author)
}

// -------------------------------------------------------------------

// SaveAnimationRequest

// .mruv.devtools.Animation animation = 1;
inline bool SaveAnimationRequest::has_animation() const {
  return this != internal_default_instance() && animation_ != nullptr;
}
inline const ::mruv::devtools::Animation& SaveAnimationRequest::animation() const {
  const ::mruv::devtools::Animation* p = animation_;
  // @@protoc_insertion_point(field_get:mruv.devtools.SaveAnimationRequest.animation)
  return p != nullptr ? *p : *reinterpret_cast<const ::mruv::devtools::Animation*>(
      &::mruv::devtools::_Animation_default_instance_);
}
inline ::mruv::devtools::Animation* SaveAnimationRequest::release_animation() {
  // @@protoc_insertion_point(field_release:mruv.devtools.SaveAnimationRequest.animation)
  
  ::mruv::devtools::Animation* temp = animation_;
  animation_ = nullptr;
  return temp;
}
inline ::mruv::devtools::Animation* SaveAnimationRequest::mutable_animation() {
  
  if (animation_ == nullptr) {
    auto* p = CreateMaybeMessage<::mruv::devtools::Animation>(GetArenaNoVirtual());
    animation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mruv.devtools.SaveAnimationRequest.animation)
  return animation_;
}
inline void SaveAnimationRequest::set_allocated_animation(::mruv::devtools::Animation* animation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(animation_);
  }
  if (animation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      animation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, animation, submessage_arena);
    }
    
  } else {
    
  }
  animation_ = animation;
  // @@protoc_insertion_point(field_set_allocated:mruv.devtools.SaveAnimationRequest.animation)
}

// -------------------------------------------------------------------

// SaveAnimationResponse

// bool success = 1;
inline void SaveAnimationResponse::clear_success() {
  success_ = false;
}
inline bool SaveAnimationResponse::success() const {
  // @@protoc_insertion_point(field_get:mruv.devtools.SaveAnimationResponse.success)
  return success_;
}
inline void SaveAnimationResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:mruv.devtools.SaveAnimationResponse.success)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace devtools
}  // namespace mruv

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_devtools_2fdevtools_2eproto
