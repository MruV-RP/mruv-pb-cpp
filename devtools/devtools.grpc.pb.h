// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: devtools/devtools.proto
#ifndef GRPC_devtools_2fdevtools_2eproto__INCLUDED
#define GRPC_devtools_2fdevtools_2eproto__INCLUDED

#include "devtools/devtools.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace mruv {
namespace devtools {

// The MruV developer tools service for mruv-devtools package.
class MruVDevToolsService final {
 public:
  static constexpr char const* service_full_name() {
    return "mruv.devtools.MruVDevToolsService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Get saved positions.
    virtual ::grpc::Status GetPositions(::grpc::ClientContext* context, const ::mruv::devtools::GetPositionsRequest& request, ::mruv::devtools::GetPositionsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::GetPositionsResponse>> AsyncGetPositions(::grpc::ClientContext* context, const ::mruv::devtools::GetPositionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::GetPositionsResponse>>(AsyncGetPositionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::GetPositionsResponse>> PrepareAsyncGetPositions(::grpc::ClientContext* context, const ::mruv::devtools::GetPositionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::GetPositionsResponse>>(PrepareAsyncGetPositionsRaw(context, request, cq));
    }
    // Save position.
    virtual ::grpc::Status SavePosition(::grpc::ClientContext* context, const ::mruv::devtools::SavePositionRequest& request, ::mruv::devtools::SavePositionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::SavePositionResponse>> AsyncSavePosition(::grpc::ClientContext* context, const ::mruv::devtools::SavePositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::SavePositionResponse>>(AsyncSavePositionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::SavePositionResponse>> PrepareAsyncSavePosition(::grpc::ClientContext* context, const ::mruv::devtools::SavePositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::SavePositionResponse>>(PrepareAsyncSavePositionRaw(context, request, cq));
    }
    // Delete position.
    virtual ::grpc::Status DeletePosition(::grpc::ClientContext* context, const ::mruv::devtools::DeletePositionRequest& request, ::mruv::devtools::DeletePositionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::DeletePositionResponse>> AsyncDeletePosition(::grpc::ClientContext* context, const ::mruv::devtools::DeletePositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::DeletePositionResponse>>(AsyncDeletePositionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::DeletePositionResponse>> PrepareAsyncDeletePosition(::grpc::ClientContext* context, const ::mruv::devtools::DeletePositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::DeletePositionResponse>>(PrepareAsyncDeletePositionRaw(context, request, cq));
    }
    // Get saved outfit.
    virtual ::grpc::Status GetOutfits(::grpc::ClientContext* context, const ::mruv::devtools::GetOutfitsRequest& request, ::mruv::devtools::GetOutfitsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::GetOutfitsResponse>> AsyncGetOutfits(::grpc::ClientContext* context, const ::mruv::devtools::GetOutfitsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::GetOutfitsResponse>>(AsyncGetOutfitsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::GetOutfitsResponse>> PrepareAsyncGetOutfits(::grpc::ClientContext* context, const ::mruv::devtools::GetOutfitsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::GetOutfitsResponse>>(PrepareAsyncGetOutfitsRaw(context, request, cq));
    }
    // Save outfit.
    virtual ::grpc::Status SaveOutfit(::grpc::ClientContext* context, const ::mruv::devtools::SaveOutfitRequest& request, ::mruv::devtools::SaveOutfitResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::SaveOutfitResponse>> AsyncSaveOutfit(::grpc::ClientContext* context, const ::mruv::devtools::SaveOutfitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::SaveOutfitResponse>>(AsyncSaveOutfitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::SaveOutfitResponse>> PrepareAsyncSaveOutfit(::grpc::ClientContext* context, const ::mruv::devtools::SaveOutfitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::SaveOutfitResponse>>(PrepareAsyncSaveOutfitRaw(context, request, cq));
    }
    // Get all saved animations.
    virtual ::grpc::Status GetAnimations(::grpc::ClientContext* context, const ::mruv::devtools::GetAnimationsRequest& request, ::mruv::devtools::GetAnimationsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::GetAnimationsResponse>> AsyncGetAnimations(::grpc::ClientContext* context, const ::mruv::devtools::GetAnimationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::GetAnimationsResponse>>(AsyncGetAnimationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::GetAnimationsResponse>> PrepareAsyncGetAnimations(::grpc::ClientContext* context, const ::mruv::devtools::GetAnimationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::GetAnimationsResponse>>(PrepareAsyncGetAnimationsRaw(context, request, cq));
    }
    // Get saved animation by name.
    virtual ::grpc::Status GetAnimation(::grpc::ClientContext* context, const ::mruv::devtools::GetAnimationRequest& request, ::mruv::devtools::GetAnimationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::GetAnimationResponse>> AsyncGetAnimation(::grpc::ClientContext* context, const ::mruv::devtools::GetAnimationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::GetAnimationResponse>>(AsyncGetAnimationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::GetAnimationResponse>> PrepareAsyncGetAnimation(::grpc::ClientContext* context, const ::mruv::devtools::GetAnimationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::GetAnimationResponse>>(PrepareAsyncGetAnimationRaw(context, request, cq));
    }
    // Save animation.
    virtual ::grpc::Status SaveAnimation(::grpc::ClientContext* context, const ::mruv::devtools::SaveAnimationRequest& request, ::mruv::devtools::SaveAnimationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::SaveAnimationResponse>> AsyncSaveAnimation(::grpc::ClientContext* context, const ::mruv::devtools::SaveAnimationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::SaveAnimationResponse>>(AsyncSaveAnimationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::SaveAnimationResponse>> PrepareAsyncSaveAnimation(::grpc::ClientContext* context, const ::mruv::devtools::SaveAnimationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::SaveAnimationResponse>>(PrepareAsyncSaveAnimationRaw(context, request, cq));
    }
    // Get service status.
    virtual ::grpc::Status GetServiceStatus(::grpc::ClientContext* context, const ::mruv::ServiceStatusRequest& request, ::mruv::ServiceStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::ServiceStatusResponse>> AsyncGetServiceStatus(::grpc::ClientContext* context, const ::mruv::ServiceStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::ServiceStatusResponse>>(AsyncGetServiceStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::ServiceStatusResponse>> PrepareAsyncGetServiceStatus(::grpc::ClientContext* context, const ::mruv::ServiceStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::ServiceStatusResponse>>(PrepareAsyncGetServiceStatusRaw(context, request, cq));
    }
    // Get service version.
    virtual ::grpc::Status GetServiceVersion(::grpc::ClientContext* context, const ::mruv::VersionRequest& request, ::mruv::VersionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::VersionResponse>> AsyncGetServiceVersion(::grpc::ClientContext* context, const ::mruv::VersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::VersionResponse>>(AsyncGetServiceVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::VersionResponse>> PrepareAsyncGetServiceVersion(::grpc::ClientContext* context, const ::mruv::VersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::VersionResponse>>(PrepareAsyncGetServiceVersionRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Get saved positions.
      virtual void GetPositions(::grpc::ClientContext* context, const ::mruv::devtools::GetPositionsRequest* request, ::mruv::devtools::GetPositionsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetPositions(::grpc::ClientContext* context, const ::mruv::devtools::GetPositionsRequest* request, ::mruv::devtools::GetPositionsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetPositions(::grpc::ClientContext* context, const ::mruv::devtools::GetPositionsRequest* request, ::mruv::devtools::GetPositionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Save position.
      virtual void SavePosition(::grpc::ClientContext* context, const ::mruv::devtools::SavePositionRequest* request, ::mruv::devtools::SavePositionResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SavePosition(::grpc::ClientContext* context, const ::mruv::devtools::SavePositionRequest* request, ::mruv::devtools::SavePositionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SavePosition(::grpc::ClientContext* context, const ::mruv::devtools::SavePositionRequest* request, ::mruv::devtools::SavePositionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Delete position.
      virtual void DeletePosition(::grpc::ClientContext* context, const ::mruv::devtools::DeletePositionRequest* request, ::mruv::devtools::DeletePositionResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeletePosition(::grpc::ClientContext* context, const ::mruv::devtools::DeletePositionRequest* request, ::mruv::devtools::DeletePositionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeletePosition(::grpc::ClientContext* context, const ::mruv::devtools::DeletePositionRequest* request, ::mruv::devtools::DeletePositionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get saved outfit.
      virtual void GetOutfits(::grpc::ClientContext* context, const ::mruv::devtools::GetOutfitsRequest* request, ::mruv::devtools::GetOutfitsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetOutfits(::grpc::ClientContext* context, const ::mruv::devtools::GetOutfitsRequest* request, ::mruv::devtools::GetOutfitsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetOutfits(::grpc::ClientContext* context, const ::mruv::devtools::GetOutfitsRequest* request, ::mruv::devtools::GetOutfitsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Save outfit.
      virtual void SaveOutfit(::grpc::ClientContext* context, const ::mruv::devtools::SaveOutfitRequest* request, ::mruv::devtools::SaveOutfitResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SaveOutfit(::grpc::ClientContext* context, const ::mruv::devtools::SaveOutfitRequest* request, ::mruv::devtools::SaveOutfitResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SaveOutfit(::grpc::ClientContext* context, const ::mruv::devtools::SaveOutfitRequest* request, ::mruv::devtools::SaveOutfitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get all saved animations.
      virtual void GetAnimations(::grpc::ClientContext* context, const ::mruv::devtools::GetAnimationsRequest* request, ::mruv::devtools::GetAnimationsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetAnimations(::grpc::ClientContext* context, const ::mruv::devtools::GetAnimationsRequest* request, ::mruv::devtools::GetAnimationsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetAnimations(::grpc::ClientContext* context, const ::mruv::devtools::GetAnimationsRequest* request, ::mruv::devtools::GetAnimationsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get saved animation by name.
      virtual void GetAnimation(::grpc::ClientContext* context, const ::mruv::devtools::GetAnimationRequest* request, ::mruv::devtools::GetAnimationResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetAnimation(::grpc::ClientContext* context, const ::mruv::devtools::GetAnimationRequest* request, ::mruv::devtools::GetAnimationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetAnimation(::grpc::ClientContext* context, const ::mruv::devtools::GetAnimationRequest* request, ::mruv::devtools::GetAnimationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Save animation.
      virtual void SaveAnimation(::grpc::ClientContext* context, const ::mruv::devtools::SaveAnimationRequest* request, ::mruv::devtools::SaveAnimationResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SaveAnimation(::grpc::ClientContext* context, const ::mruv::devtools::SaveAnimationRequest* request, ::mruv::devtools::SaveAnimationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SaveAnimation(::grpc::ClientContext* context, const ::mruv::devtools::SaveAnimationRequest* request, ::mruv::devtools::SaveAnimationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get service status.
      virtual void GetServiceStatus(::grpc::ClientContext* context, const ::mruv::ServiceStatusRequest* request, ::mruv::ServiceStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetServiceStatus(::grpc::ClientContext* context, const ::mruv::ServiceStatusRequest* request, ::mruv::ServiceStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetServiceStatus(::grpc::ClientContext* context, const ::mruv::ServiceStatusRequest* request, ::mruv::ServiceStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get service version.
      virtual void GetServiceVersion(::grpc::ClientContext* context, const ::mruv::VersionRequest* request, ::mruv::VersionResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetServiceVersion(::grpc::ClientContext* context, const ::mruv::VersionRequest* request, ::mruv::VersionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetServiceVersion(::grpc::ClientContext* context, const ::mruv::VersionRequest* request, ::mruv::VersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::GetPositionsResponse>* AsyncGetPositionsRaw(::grpc::ClientContext* context, const ::mruv::devtools::GetPositionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::GetPositionsResponse>* PrepareAsyncGetPositionsRaw(::grpc::ClientContext* context, const ::mruv::devtools::GetPositionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::SavePositionResponse>* AsyncSavePositionRaw(::grpc::ClientContext* context, const ::mruv::devtools::SavePositionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::SavePositionResponse>* PrepareAsyncSavePositionRaw(::grpc::ClientContext* context, const ::mruv::devtools::SavePositionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::DeletePositionResponse>* AsyncDeletePositionRaw(::grpc::ClientContext* context, const ::mruv::devtools::DeletePositionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::DeletePositionResponse>* PrepareAsyncDeletePositionRaw(::grpc::ClientContext* context, const ::mruv::devtools::DeletePositionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::GetOutfitsResponse>* AsyncGetOutfitsRaw(::grpc::ClientContext* context, const ::mruv::devtools::GetOutfitsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::GetOutfitsResponse>* PrepareAsyncGetOutfitsRaw(::grpc::ClientContext* context, const ::mruv::devtools::GetOutfitsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::SaveOutfitResponse>* AsyncSaveOutfitRaw(::grpc::ClientContext* context, const ::mruv::devtools::SaveOutfitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::SaveOutfitResponse>* PrepareAsyncSaveOutfitRaw(::grpc::ClientContext* context, const ::mruv::devtools::SaveOutfitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::GetAnimationsResponse>* AsyncGetAnimationsRaw(::grpc::ClientContext* context, const ::mruv::devtools::GetAnimationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::GetAnimationsResponse>* PrepareAsyncGetAnimationsRaw(::grpc::ClientContext* context, const ::mruv::devtools::GetAnimationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::GetAnimationResponse>* AsyncGetAnimationRaw(::grpc::ClientContext* context, const ::mruv::devtools::GetAnimationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::GetAnimationResponse>* PrepareAsyncGetAnimationRaw(::grpc::ClientContext* context, const ::mruv::devtools::GetAnimationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::SaveAnimationResponse>* AsyncSaveAnimationRaw(::grpc::ClientContext* context, const ::mruv::devtools::SaveAnimationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::devtools::SaveAnimationResponse>* PrepareAsyncSaveAnimationRaw(::grpc::ClientContext* context, const ::mruv::devtools::SaveAnimationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::ServiceStatusResponse>* AsyncGetServiceStatusRaw(::grpc::ClientContext* context, const ::mruv::ServiceStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::ServiceStatusResponse>* PrepareAsyncGetServiceStatusRaw(::grpc::ClientContext* context, const ::mruv::ServiceStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::VersionResponse>* AsyncGetServiceVersionRaw(::grpc::ClientContext* context, const ::mruv::VersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::VersionResponse>* PrepareAsyncGetServiceVersionRaw(::grpc::ClientContext* context, const ::mruv::VersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetPositions(::grpc::ClientContext* context, const ::mruv::devtools::GetPositionsRequest& request, ::mruv::devtools::GetPositionsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::devtools::GetPositionsResponse>> AsyncGetPositions(::grpc::ClientContext* context, const ::mruv::devtools::GetPositionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::devtools::GetPositionsResponse>>(AsyncGetPositionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::devtools::GetPositionsResponse>> PrepareAsyncGetPositions(::grpc::ClientContext* context, const ::mruv::devtools::GetPositionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::devtools::GetPositionsResponse>>(PrepareAsyncGetPositionsRaw(context, request, cq));
    }
    ::grpc::Status SavePosition(::grpc::ClientContext* context, const ::mruv::devtools::SavePositionRequest& request, ::mruv::devtools::SavePositionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::devtools::SavePositionResponse>> AsyncSavePosition(::grpc::ClientContext* context, const ::mruv::devtools::SavePositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::devtools::SavePositionResponse>>(AsyncSavePositionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::devtools::SavePositionResponse>> PrepareAsyncSavePosition(::grpc::ClientContext* context, const ::mruv::devtools::SavePositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::devtools::SavePositionResponse>>(PrepareAsyncSavePositionRaw(context, request, cq));
    }
    ::grpc::Status DeletePosition(::grpc::ClientContext* context, const ::mruv::devtools::DeletePositionRequest& request, ::mruv::devtools::DeletePositionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::devtools::DeletePositionResponse>> AsyncDeletePosition(::grpc::ClientContext* context, const ::mruv::devtools::DeletePositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::devtools::DeletePositionResponse>>(AsyncDeletePositionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::devtools::DeletePositionResponse>> PrepareAsyncDeletePosition(::grpc::ClientContext* context, const ::mruv::devtools::DeletePositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::devtools::DeletePositionResponse>>(PrepareAsyncDeletePositionRaw(context, request, cq));
    }
    ::grpc::Status GetOutfits(::grpc::ClientContext* context, const ::mruv::devtools::GetOutfitsRequest& request, ::mruv::devtools::GetOutfitsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::devtools::GetOutfitsResponse>> AsyncGetOutfits(::grpc::ClientContext* context, const ::mruv::devtools::GetOutfitsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::devtools::GetOutfitsResponse>>(AsyncGetOutfitsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::devtools::GetOutfitsResponse>> PrepareAsyncGetOutfits(::grpc::ClientContext* context, const ::mruv::devtools::GetOutfitsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::devtools::GetOutfitsResponse>>(PrepareAsyncGetOutfitsRaw(context, request, cq));
    }
    ::grpc::Status SaveOutfit(::grpc::ClientContext* context, const ::mruv::devtools::SaveOutfitRequest& request, ::mruv::devtools::SaveOutfitResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::devtools::SaveOutfitResponse>> AsyncSaveOutfit(::grpc::ClientContext* context, const ::mruv::devtools::SaveOutfitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::devtools::SaveOutfitResponse>>(AsyncSaveOutfitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::devtools::SaveOutfitResponse>> PrepareAsyncSaveOutfit(::grpc::ClientContext* context, const ::mruv::devtools::SaveOutfitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::devtools::SaveOutfitResponse>>(PrepareAsyncSaveOutfitRaw(context, request, cq));
    }
    ::grpc::Status GetAnimations(::grpc::ClientContext* context, const ::mruv::devtools::GetAnimationsRequest& request, ::mruv::devtools::GetAnimationsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::devtools::GetAnimationsResponse>> AsyncGetAnimations(::grpc::ClientContext* context, const ::mruv::devtools::GetAnimationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::devtools::GetAnimationsResponse>>(AsyncGetAnimationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::devtools::GetAnimationsResponse>> PrepareAsyncGetAnimations(::grpc::ClientContext* context, const ::mruv::devtools::GetAnimationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::devtools::GetAnimationsResponse>>(PrepareAsyncGetAnimationsRaw(context, request, cq));
    }
    ::grpc::Status GetAnimation(::grpc::ClientContext* context, const ::mruv::devtools::GetAnimationRequest& request, ::mruv::devtools::GetAnimationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::devtools::GetAnimationResponse>> AsyncGetAnimation(::grpc::ClientContext* context, const ::mruv::devtools::GetAnimationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::devtools::GetAnimationResponse>>(AsyncGetAnimationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::devtools::GetAnimationResponse>> PrepareAsyncGetAnimation(::grpc::ClientContext* context, const ::mruv::devtools::GetAnimationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::devtools::GetAnimationResponse>>(PrepareAsyncGetAnimationRaw(context, request, cq));
    }
    ::grpc::Status SaveAnimation(::grpc::ClientContext* context, const ::mruv::devtools::SaveAnimationRequest& request, ::mruv::devtools::SaveAnimationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::devtools::SaveAnimationResponse>> AsyncSaveAnimation(::grpc::ClientContext* context, const ::mruv::devtools::SaveAnimationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::devtools::SaveAnimationResponse>>(AsyncSaveAnimationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::devtools::SaveAnimationResponse>> PrepareAsyncSaveAnimation(::grpc::ClientContext* context, const ::mruv::devtools::SaveAnimationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::devtools::SaveAnimationResponse>>(PrepareAsyncSaveAnimationRaw(context, request, cq));
    }
    ::grpc::Status GetServiceStatus(::grpc::ClientContext* context, const ::mruv::ServiceStatusRequest& request, ::mruv::ServiceStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::ServiceStatusResponse>> AsyncGetServiceStatus(::grpc::ClientContext* context, const ::mruv::ServiceStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::ServiceStatusResponse>>(AsyncGetServiceStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::ServiceStatusResponse>> PrepareAsyncGetServiceStatus(::grpc::ClientContext* context, const ::mruv::ServiceStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::ServiceStatusResponse>>(PrepareAsyncGetServiceStatusRaw(context, request, cq));
    }
    ::grpc::Status GetServiceVersion(::grpc::ClientContext* context, const ::mruv::VersionRequest& request, ::mruv::VersionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::VersionResponse>> AsyncGetServiceVersion(::grpc::ClientContext* context, const ::mruv::VersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::VersionResponse>>(AsyncGetServiceVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::VersionResponse>> PrepareAsyncGetServiceVersion(::grpc::ClientContext* context, const ::mruv::VersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::VersionResponse>>(PrepareAsyncGetServiceVersionRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetPositions(::grpc::ClientContext* context, const ::mruv::devtools::GetPositionsRequest* request, ::mruv::devtools::GetPositionsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetPositions(::grpc::ClientContext* context, const ::mruv::devtools::GetPositionsRequest* request, ::mruv::devtools::GetPositionsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetPositions(::grpc::ClientContext* context, const ::mruv::devtools::GetPositionsRequest* request, ::mruv::devtools::GetPositionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SavePosition(::grpc::ClientContext* context, const ::mruv::devtools::SavePositionRequest* request, ::mruv::devtools::SavePositionResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SavePosition(::grpc::ClientContext* context, const ::mruv::devtools::SavePositionRequest* request, ::mruv::devtools::SavePositionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SavePosition(::grpc::ClientContext* context, const ::mruv::devtools::SavePositionRequest* request, ::mruv::devtools::SavePositionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeletePosition(::grpc::ClientContext* context, const ::mruv::devtools::DeletePositionRequest* request, ::mruv::devtools::DeletePositionResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeletePosition(::grpc::ClientContext* context, const ::mruv::devtools::DeletePositionRequest* request, ::mruv::devtools::DeletePositionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeletePosition(::grpc::ClientContext* context, const ::mruv::devtools::DeletePositionRequest* request, ::mruv::devtools::DeletePositionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetOutfits(::grpc::ClientContext* context, const ::mruv::devtools::GetOutfitsRequest* request, ::mruv::devtools::GetOutfitsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetOutfits(::grpc::ClientContext* context, const ::mruv::devtools::GetOutfitsRequest* request, ::mruv::devtools::GetOutfitsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetOutfits(::grpc::ClientContext* context, const ::mruv::devtools::GetOutfitsRequest* request, ::mruv::devtools::GetOutfitsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SaveOutfit(::grpc::ClientContext* context, const ::mruv::devtools::SaveOutfitRequest* request, ::mruv::devtools::SaveOutfitResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SaveOutfit(::grpc::ClientContext* context, const ::mruv::devtools::SaveOutfitRequest* request, ::mruv::devtools::SaveOutfitResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SaveOutfit(::grpc::ClientContext* context, const ::mruv::devtools::SaveOutfitRequest* request, ::mruv::devtools::SaveOutfitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetAnimations(::grpc::ClientContext* context, const ::mruv::devtools::GetAnimationsRequest* request, ::mruv::devtools::GetAnimationsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetAnimations(::grpc::ClientContext* context, const ::mruv::devtools::GetAnimationsRequest* request, ::mruv::devtools::GetAnimationsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetAnimations(::grpc::ClientContext* context, const ::mruv::devtools::GetAnimationsRequest* request, ::mruv::devtools::GetAnimationsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetAnimation(::grpc::ClientContext* context, const ::mruv::devtools::GetAnimationRequest* request, ::mruv::devtools::GetAnimationResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetAnimation(::grpc::ClientContext* context, const ::mruv::devtools::GetAnimationRequest* request, ::mruv::devtools::GetAnimationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetAnimation(::grpc::ClientContext* context, const ::mruv::devtools::GetAnimationRequest* request, ::mruv::devtools::GetAnimationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SaveAnimation(::grpc::ClientContext* context, const ::mruv::devtools::SaveAnimationRequest* request, ::mruv::devtools::SaveAnimationResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SaveAnimation(::grpc::ClientContext* context, const ::mruv::devtools::SaveAnimationRequest* request, ::mruv::devtools::SaveAnimationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SaveAnimation(::grpc::ClientContext* context, const ::mruv::devtools::SaveAnimationRequest* request, ::mruv::devtools::SaveAnimationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetServiceStatus(::grpc::ClientContext* context, const ::mruv::ServiceStatusRequest* request, ::mruv::ServiceStatusResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetServiceStatus(::grpc::ClientContext* context, const ::mruv::ServiceStatusRequest* request, ::mruv::ServiceStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetServiceStatus(::grpc::ClientContext* context, const ::mruv::ServiceStatusRequest* request, ::mruv::ServiceStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetServiceVersion(::grpc::ClientContext* context, const ::mruv::VersionRequest* request, ::mruv::VersionResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetServiceVersion(::grpc::ClientContext* context, const ::mruv::VersionRequest* request, ::mruv::VersionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetServiceVersion(::grpc::ClientContext* context, const ::mruv::VersionRequest* request, ::mruv::VersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mruv::devtools::GetPositionsResponse>* AsyncGetPositionsRaw(::grpc::ClientContext* context, const ::mruv::devtools::GetPositionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::devtools::GetPositionsResponse>* PrepareAsyncGetPositionsRaw(::grpc::ClientContext* context, const ::mruv::devtools::GetPositionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::devtools::SavePositionResponse>* AsyncSavePositionRaw(::grpc::ClientContext* context, const ::mruv::devtools::SavePositionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::devtools::SavePositionResponse>* PrepareAsyncSavePositionRaw(::grpc::ClientContext* context, const ::mruv::devtools::SavePositionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::devtools::DeletePositionResponse>* AsyncDeletePositionRaw(::grpc::ClientContext* context, const ::mruv::devtools::DeletePositionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::devtools::DeletePositionResponse>* PrepareAsyncDeletePositionRaw(::grpc::ClientContext* context, const ::mruv::devtools::DeletePositionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::devtools::GetOutfitsResponse>* AsyncGetOutfitsRaw(::grpc::ClientContext* context, const ::mruv::devtools::GetOutfitsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::devtools::GetOutfitsResponse>* PrepareAsyncGetOutfitsRaw(::grpc::ClientContext* context, const ::mruv::devtools::GetOutfitsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::devtools::SaveOutfitResponse>* AsyncSaveOutfitRaw(::grpc::ClientContext* context, const ::mruv::devtools::SaveOutfitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::devtools::SaveOutfitResponse>* PrepareAsyncSaveOutfitRaw(::grpc::ClientContext* context, const ::mruv::devtools::SaveOutfitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::devtools::GetAnimationsResponse>* AsyncGetAnimationsRaw(::grpc::ClientContext* context, const ::mruv::devtools::GetAnimationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::devtools::GetAnimationsResponse>* PrepareAsyncGetAnimationsRaw(::grpc::ClientContext* context, const ::mruv::devtools::GetAnimationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::devtools::GetAnimationResponse>* AsyncGetAnimationRaw(::grpc::ClientContext* context, const ::mruv::devtools::GetAnimationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::devtools::GetAnimationResponse>* PrepareAsyncGetAnimationRaw(::grpc::ClientContext* context, const ::mruv::devtools::GetAnimationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::devtools::SaveAnimationResponse>* AsyncSaveAnimationRaw(::grpc::ClientContext* context, const ::mruv::devtools::SaveAnimationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::devtools::SaveAnimationResponse>* PrepareAsyncSaveAnimationRaw(::grpc::ClientContext* context, const ::mruv::devtools::SaveAnimationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::ServiceStatusResponse>* AsyncGetServiceStatusRaw(::grpc::ClientContext* context, const ::mruv::ServiceStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::ServiceStatusResponse>* PrepareAsyncGetServiceStatusRaw(::grpc::ClientContext* context, const ::mruv::ServiceStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::VersionResponse>* AsyncGetServiceVersionRaw(::grpc::ClientContext* context, const ::mruv::VersionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::VersionResponse>* PrepareAsyncGetServiceVersionRaw(::grpc::ClientContext* context, const ::mruv::VersionRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetPositions_;
    const ::grpc::internal::RpcMethod rpcmethod_SavePosition_;
    const ::grpc::internal::RpcMethod rpcmethod_DeletePosition_;
    const ::grpc::internal::RpcMethod rpcmethod_GetOutfits_;
    const ::grpc::internal::RpcMethod rpcmethod_SaveOutfit_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAnimations_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAnimation_;
    const ::grpc::internal::RpcMethod rpcmethod_SaveAnimation_;
    const ::grpc::internal::RpcMethod rpcmethod_GetServiceStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_GetServiceVersion_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Get saved positions.
    virtual ::grpc::Status GetPositions(::grpc::ServerContext* context, const ::mruv::devtools::GetPositionsRequest* request, ::mruv::devtools::GetPositionsResponse* response);
    // Save position.
    virtual ::grpc::Status SavePosition(::grpc::ServerContext* context, const ::mruv::devtools::SavePositionRequest* request, ::mruv::devtools::SavePositionResponse* response);
    // Delete position.
    virtual ::grpc::Status DeletePosition(::grpc::ServerContext* context, const ::mruv::devtools::DeletePositionRequest* request, ::mruv::devtools::DeletePositionResponse* response);
    // Get saved outfit.
    virtual ::grpc::Status GetOutfits(::grpc::ServerContext* context, const ::mruv::devtools::GetOutfitsRequest* request, ::mruv::devtools::GetOutfitsResponse* response);
    // Save outfit.
    virtual ::grpc::Status SaveOutfit(::grpc::ServerContext* context, const ::mruv::devtools::SaveOutfitRequest* request, ::mruv::devtools::SaveOutfitResponse* response);
    // Get all saved animations.
    virtual ::grpc::Status GetAnimations(::grpc::ServerContext* context, const ::mruv::devtools::GetAnimationsRequest* request, ::mruv::devtools::GetAnimationsResponse* response);
    // Get saved animation by name.
    virtual ::grpc::Status GetAnimation(::grpc::ServerContext* context, const ::mruv::devtools::GetAnimationRequest* request, ::mruv::devtools::GetAnimationResponse* response);
    // Save animation.
    virtual ::grpc::Status SaveAnimation(::grpc::ServerContext* context, const ::mruv::devtools::SaveAnimationRequest* request, ::mruv::devtools::SaveAnimationResponse* response);
    // Get service status.
    virtual ::grpc::Status GetServiceStatus(::grpc::ServerContext* context, const ::mruv::ServiceStatusRequest* request, ::mruv::ServiceStatusResponse* response);
    // Get service version.
    virtual ::grpc::Status GetServiceVersion(::grpc::ServerContext* context, const ::mruv::VersionRequest* request, ::mruv::VersionResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPositions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPositions() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetPositions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPositions(::grpc::ServerContext* /*context*/, const ::mruv::devtools::GetPositionsRequest* /*request*/, ::mruv::devtools::GetPositionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPositions(::grpc::ServerContext* context, ::mruv::devtools::GetPositionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::devtools::GetPositionsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SavePosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SavePosition() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SavePosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SavePosition(::grpc::ServerContext* /*context*/, const ::mruv::devtools::SavePositionRequest* /*request*/, ::mruv::devtools::SavePositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSavePosition(::grpc::ServerContext* context, ::mruv::devtools::SavePositionRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::devtools::SavePositionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeletePosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeletePosition() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeletePosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePosition(::grpc::ServerContext* /*context*/, const ::mruv::devtools::DeletePositionRequest* /*request*/, ::mruv::devtools::DeletePositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeletePosition(::grpc::ServerContext* context, ::mruv::devtools::DeletePositionRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::devtools::DeletePositionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOutfits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetOutfits() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetOutfits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOutfits(::grpc::ServerContext* /*context*/, const ::mruv::devtools::GetOutfitsRequest* /*request*/, ::mruv::devtools::GetOutfitsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOutfits(::grpc::ServerContext* context, ::mruv::devtools::GetOutfitsRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::devtools::GetOutfitsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SaveOutfit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SaveOutfit() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SaveOutfit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveOutfit(::grpc::ServerContext* /*context*/, const ::mruv::devtools::SaveOutfitRequest* /*request*/, ::mruv::devtools::SaveOutfitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSaveOutfit(::grpc::ServerContext* context, ::mruv::devtools::SaveOutfitRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::devtools::SaveOutfitResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAnimations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAnimations() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetAnimations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAnimations(::grpc::ServerContext* /*context*/, const ::mruv::devtools::GetAnimationsRequest* /*request*/, ::mruv::devtools::GetAnimationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAnimations(::grpc::ServerContext* context, ::mruv::devtools::GetAnimationsRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::devtools::GetAnimationsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAnimation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAnimation() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetAnimation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAnimation(::grpc::ServerContext* /*context*/, const ::mruv::devtools::GetAnimationRequest* /*request*/, ::mruv::devtools::GetAnimationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAnimation(::grpc::ServerContext* context, ::mruv::devtools::GetAnimationRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::devtools::GetAnimationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SaveAnimation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SaveAnimation() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_SaveAnimation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveAnimation(::grpc::ServerContext* /*context*/, const ::mruv::devtools::SaveAnimationRequest* /*request*/, ::mruv::devtools::SaveAnimationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSaveAnimation(::grpc::ServerContext* context, ::mruv::devtools::SaveAnimationRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::devtools::SaveAnimationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetServiceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetServiceStatus() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_GetServiceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceStatus(::grpc::ServerContext* /*context*/, const ::mruv::ServiceStatusRequest* /*request*/, ::mruv::ServiceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServiceStatus(::grpc::ServerContext* context, ::mruv::ServiceStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::ServiceStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetServiceVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetServiceVersion() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_GetServiceVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceVersion(::grpc::ServerContext* /*context*/, const ::mruv::VersionRequest* /*request*/, ::mruv::VersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServiceVersion(::grpc::ServerContext* context, ::mruv::VersionRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::VersionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetPositions<WithAsyncMethod_SavePosition<WithAsyncMethod_DeletePosition<WithAsyncMethod_GetOutfits<WithAsyncMethod_SaveOutfit<WithAsyncMethod_GetAnimations<WithAsyncMethod_GetAnimation<WithAsyncMethod_SaveAnimation<WithAsyncMethod_GetServiceStatus<WithAsyncMethod_GetServiceVersion<Service > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetPositions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetPositions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::mruv::devtools::GetPositionsRequest, ::mruv::devtools::GetPositionsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::devtools::GetPositionsRequest* request, ::mruv::devtools::GetPositionsResponse* response) { return this->GetPositions(context, request, response); }));}
    void SetMessageAllocatorFor_GetPositions(
        ::grpc::experimental::MessageAllocator< ::mruv::devtools::GetPositionsRequest, ::mruv::devtools::GetPositionsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mruv::devtools::GetPositionsRequest, ::mruv::devtools::GetPositionsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetPositions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPositions(::grpc::ServerContext* /*context*/, const ::mruv::devtools::GetPositionsRequest* /*request*/, ::mruv::devtools::GetPositionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPositions(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::devtools::GetPositionsRequest* /*request*/, ::mruv::devtools::GetPositionsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPositions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::devtools::GetPositionsRequest* /*request*/, ::mruv::devtools::GetPositionsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SavePosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SavePosition() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::mruv::devtools::SavePositionRequest, ::mruv::devtools::SavePositionResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::devtools::SavePositionRequest* request, ::mruv::devtools::SavePositionResponse* response) { return this->SavePosition(context, request, response); }));}
    void SetMessageAllocatorFor_SavePosition(
        ::grpc::experimental::MessageAllocator< ::mruv::devtools::SavePositionRequest, ::mruv::devtools::SavePositionResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mruv::devtools::SavePositionRequest, ::mruv::devtools::SavePositionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SavePosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SavePosition(::grpc::ServerContext* /*context*/, const ::mruv::devtools::SavePositionRequest* /*request*/, ::mruv::devtools::SavePositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SavePosition(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::devtools::SavePositionRequest* /*request*/, ::mruv::devtools::SavePositionResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SavePosition(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::devtools::SavePositionRequest* /*request*/, ::mruv::devtools::SavePositionResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeletePosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeletePosition() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::mruv::devtools::DeletePositionRequest, ::mruv::devtools::DeletePositionResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::devtools::DeletePositionRequest* request, ::mruv::devtools::DeletePositionResponse* response) { return this->DeletePosition(context, request, response); }));}
    void SetMessageAllocatorFor_DeletePosition(
        ::grpc::experimental::MessageAllocator< ::mruv::devtools::DeletePositionRequest, ::mruv::devtools::DeletePositionResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mruv::devtools::DeletePositionRequest, ::mruv::devtools::DeletePositionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeletePosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePosition(::grpc::ServerContext* /*context*/, const ::mruv::devtools::DeletePositionRequest* /*request*/, ::mruv::devtools::DeletePositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeletePosition(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::devtools::DeletePositionRequest* /*request*/, ::mruv::devtools::DeletePositionResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeletePosition(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::devtools::DeletePositionRequest* /*request*/, ::mruv::devtools::DeletePositionResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetOutfits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetOutfits() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::mruv::devtools::GetOutfitsRequest, ::mruv::devtools::GetOutfitsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::devtools::GetOutfitsRequest* request, ::mruv::devtools::GetOutfitsResponse* response) { return this->GetOutfits(context, request, response); }));}
    void SetMessageAllocatorFor_GetOutfits(
        ::grpc::experimental::MessageAllocator< ::mruv::devtools::GetOutfitsRequest, ::mruv::devtools::GetOutfitsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mruv::devtools::GetOutfitsRequest, ::mruv::devtools::GetOutfitsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetOutfits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOutfits(::grpc::ServerContext* /*context*/, const ::mruv::devtools::GetOutfitsRequest* /*request*/, ::mruv::devtools::GetOutfitsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetOutfits(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::devtools::GetOutfitsRequest* /*request*/, ::mruv::devtools::GetOutfitsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetOutfits(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::devtools::GetOutfitsRequest* /*request*/, ::mruv::devtools::GetOutfitsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SaveOutfit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SaveOutfit() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::mruv::devtools::SaveOutfitRequest, ::mruv::devtools::SaveOutfitResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::devtools::SaveOutfitRequest* request, ::mruv::devtools::SaveOutfitResponse* response) { return this->SaveOutfit(context, request, response); }));}
    void SetMessageAllocatorFor_SaveOutfit(
        ::grpc::experimental::MessageAllocator< ::mruv::devtools::SaveOutfitRequest, ::mruv::devtools::SaveOutfitResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mruv::devtools::SaveOutfitRequest, ::mruv::devtools::SaveOutfitResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SaveOutfit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveOutfit(::grpc::ServerContext* /*context*/, const ::mruv::devtools::SaveOutfitRequest* /*request*/, ::mruv::devtools::SaveOutfitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SaveOutfit(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::devtools::SaveOutfitRequest* /*request*/, ::mruv::devtools::SaveOutfitResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SaveOutfit(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::devtools::SaveOutfitRequest* /*request*/, ::mruv::devtools::SaveOutfitResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetAnimations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetAnimations() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::mruv::devtools::GetAnimationsRequest, ::mruv::devtools::GetAnimationsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::devtools::GetAnimationsRequest* request, ::mruv::devtools::GetAnimationsResponse* response) { return this->GetAnimations(context, request, response); }));}
    void SetMessageAllocatorFor_GetAnimations(
        ::grpc::experimental::MessageAllocator< ::mruv::devtools::GetAnimationsRequest, ::mruv::devtools::GetAnimationsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mruv::devtools::GetAnimationsRequest, ::mruv::devtools::GetAnimationsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetAnimations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAnimations(::grpc::ServerContext* /*context*/, const ::mruv::devtools::GetAnimationsRequest* /*request*/, ::mruv::devtools::GetAnimationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetAnimations(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::devtools::GetAnimationsRequest* /*request*/, ::mruv::devtools::GetAnimationsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetAnimations(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::devtools::GetAnimationsRequest* /*request*/, ::mruv::devtools::GetAnimationsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetAnimation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetAnimation() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::mruv::devtools::GetAnimationRequest, ::mruv::devtools::GetAnimationResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::devtools::GetAnimationRequest* request, ::mruv::devtools::GetAnimationResponse* response) { return this->GetAnimation(context, request, response); }));}
    void SetMessageAllocatorFor_GetAnimation(
        ::grpc::experimental::MessageAllocator< ::mruv::devtools::GetAnimationRequest, ::mruv::devtools::GetAnimationResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mruv::devtools::GetAnimationRequest, ::mruv::devtools::GetAnimationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetAnimation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAnimation(::grpc::ServerContext* /*context*/, const ::mruv::devtools::GetAnimationRequest* /*request*/, ::mruv::devtools::GetAnimationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetAnimation(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::devtools::GetAnimationRequest* /*request*/, ::mruv::devtools::GetAnimationResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetAnimation(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::devtools::GetAnimationRequest* /*request*/, ::mruv::devtools::GetAnimationResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SaveAnimation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SaveAnimation() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::mruv::devtools::SaveAnimationRequest, ::mruv::devtools::SaveAnimationResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::devtools::SaveAnimationRequest* request, ::mruv::devtools::SaveAnimationResponse* response) { return this->SaveAnimation(context, request, response); }));}
    void SetMessageAllocatorFor_SaveAnimation(
        ::grpc::experimental::MessageAllocator< ::mruv::devtools::SaveAnimationRequest, ::mruv::devtools::SaveAnimationResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mruv::devtools::SaveAnimationRequest, ::mruv::devtools::SaveAnimationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SaveAnimation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveAnimation(::grpc::ServerContext* /*context*/, const ::mruv::devtools::SaveAnimationRequest* /*request*/, ::mruv::devtools::SaveAnimationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SaveAnimation(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::devtools::SaveAnimationRequest* /*request*/, ::mruv::devtools::SaveAnimationResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SaveAnimation(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::devtools::SaveAnimationRequest* /*request*/, ::mruv::devtools::SaveAnimationResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetServiceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetServiceStatus() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::mruv::ServiceStatusRequest, ::mruv::ServiceStatusResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::ServiceStatusRequest* request, ::mruv::ServiceStatusResponse* response) { return this->GetServiceStatus(context, request, response); }));}
    void SetMessageAllocatorFor_GetServiceStatus(
        ::grpc::experimental::MessageAllocator< ::mruv::ServiceStatusRequest, ::mruv::ServiceStatusResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(8);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mruv::ServiceStatusRequest, ::mruv::ServiceStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetServiceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceStatus(::grpc::ServerContext* /*context*/, const ::mruv::ServiceStatusRequest* /*request*/, ::mruv::ServiceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetServiceStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::ServiceStatusRequest* /*request*/, ::mruv::ServiceStatusResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetServiceStatus(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::ServiceStatusRequest* /*request*/, ::mruv::ServiceStatusResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetServiceVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetServiceVersion() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::mruv::VersionRequest, ::mruv::VersionResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::VersionRequest* request, ::mruv::VersionResponse* response) { return this->GetServiceVersion(context, request, response); }));}
    void SetMessageAllocatorFor_GetServiceVersion(
        ::grpc::experimental::MessageAllocator< ::mruv::VersionRequest, ::mruv::VersionResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(9);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mruv::VersionRequest, ::mruv::VersionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetServiceVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceVersion(::grpc::ServerContext* /*context*/, const ::mruv::VersionRequest* /*request*/, ::mruv::VersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetServiceVersion(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::VersionRequest* /*request*/, ::mruv::VersionResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetServiceVersion(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::VersionRequest* /*request*/, ::mruv::VersionResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_GetPositions<ExperimentalWithCallbackMethod_SavePosition<ExperimentalWithCallbackMethod_DeletePosition<ExperimentalWithCallbackMethod_GetOutfits<ExperimentalWithCallbackMethod_SaveOutfit<ExperimentalWithCallbackMethod_GetAnimations<ExperimentalWithCallbackMethod_GetAnimation<ExperimentalWithCallbackMethod_SaveAnimation<ExperimentalWithCallbackMethod_GetServiceStatus<ExperimentalWithCallbackMethod_GetServiceVersion<Service > > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_GetPositions<ExperimentalWithCallbackMethod_SavePosition<ExperimentalWithCallbackMethod_DeletePosition<ExperimentalWithCallbackMethod_GetOutfits<ExperimentalWithCallbackMethod_SaveOutfit<ExperimentalWithCallbackMethod_GetAnimations<ExperimentalWithCallbackMethod_GetAnimation<ExperimentalWithCallbackMethod_SaveAnimation<ExperimentalWithCallbackMethod_GetServiceStatus<ExperimentalWithCallbackMethod_GetServiceVersion<Service > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetPositions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPositions() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetPositions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPositions(::grpc::ServerContext* /*context*/, const ::mruv::devtools::GetPositionsRequest* /*request*/, ::mruv::devtools::GetPositionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SavePosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SavePosition() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SavePosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SavePosition(::grpc::ServerContext* /*context*/, const ::mruv::devtools::SavePositionRequest* /*request*/, ::mruv::devtools::SavePositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeletePosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeletePosition() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeletePosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePosition(::grpc::ServerContext* /*context*/, const ::mruv::devtools::DeletePositionRequest* /*request*/, ::mruv::devtools::DeletePositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetOutfits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetOutfits() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetOutfits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOutfits(::grpc::ServerContext* /*context*/, const ::mruv::devtools::GetOutfitsRequest* /*request*/, ::mruv::devtools::GetOutfitsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SaveOutfit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SaveOutfit() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SaveOutfit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveOutfit(::grpc::ServerContext* /*context*/, const ::mruv::devtools::SaveOutfitRequest* /*request*/, ::mruv::devtools::SaveOutfitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAnimations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAnimations() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetAnimations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAnimations(::grpc::ServerContext* /*context*/, const ::mruv::devtools::GetAnimationsRequest* /*request*/, ::mruv::devtools::GetAnimationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAnimation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAnimation() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetAnimation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAnimation(::grpc::ServerContext* /*context*/, const ::mruv::devtools::GetAnimationRequest* /*request*/, ::mruv::devtools::GetAnimationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SaveAnimation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SaveAnimation() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_SaveAnimation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveAnimation(::grpc::ServerContext* /*context*/, const ::mruv::devtools::SaveAnimationRequest* /*request*/, ::mruv::devtools::SaveAnimationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetServiceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetServiceStatus() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_GetServiceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceStatus(::grpc::ServerContext* /*context*/, const ::mruv::ServiceStatusRequest* /*request*/, ::mruv::ServiceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetServiceVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetServiceVersion() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_GetServiceVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceVersion(::grpc::ServerContext* /*context*/, const ::mruv::VersionRequest* /*request*/, ::mruv::VersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPositions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPositions() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetPositions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPositions(::grpc::ServerContext* /*context*/, const ::mruv::devtools::GetPositionsRequest* /*request*/, ::mruv::devtools::GetPositionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPositions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SavePosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SavePosition() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SavePosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SavePosition(::grpc::ServerContext* /*context*/, const ::mruv::devtools::SavePositionRequest* /*request*/, ::mruv::devtools::SavePositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSavePosition(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeletePosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeletePosition() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DeletePosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePosition(::grpc::ServerContext* /*context*/, const ::mruv::devtools::DeletePositionRequest* /*request*/, ::mruv::devtools::DeletePositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeletePosition(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetOutfits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetOutfits() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetOutfits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOutfits(::grpc::ServerContext* /*context*/, const ::mruv::devtools::GetOutfitsRequest* /*request*/, ::mruv::devtools::GetOutfitsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOutfits(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SaveOutfit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SaveOutfit() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_SaveOutfit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveOutfit(::grpc::ServerContext* /*context*/, const ::mruv::devtools::SaveOutfitRequest* /*request*/, ::mruv::devtools::SaveOutfitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSaveOutfit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAnimations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAnimations() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetAnimations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAnimations(::grpc::ServerContext* /*context*/, const ::mruv::devtools::GetAnimationsRequest* /*request*/, ::mruv::devtools::GetAnimationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAnimations(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAnimation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAnimation() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetAnimation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAnimation(::grpc::ServerContext* /*context*/, const ::mruv::devtools::GetAnimationRequest* /*request*/, ::mruv::devtools::GetAnimationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAnimation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SaveAnimation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SaveAnimation() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_SaveAnimation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveAnimation(::grpc::ServerContext* /*context*/, const ::mruv::devtools::SaveAnimationRequest* /*request*/, ::mruv::devtools::SaveAnimationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSaveAnimation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetServiceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetServiceStatus() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_GetServiceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceStatus(::grpc::ServerContext* /*context*/, const ::mruv::ServiceStatusRequest* /*request*/, ::mruv::ServiceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServiceStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetServiceVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetServiceVersion() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_GetServiceVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceVersion(::grpc::ServerContext* /*context*/, const ::mruv::VersionRequest* /*request*/, ::mruv::VersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServiceVersion(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetPositions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetPositions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPositions(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetPositions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPositions(::grpc::ServerContext* /*context*/, const ::mruv::devtools::GetPositionsRequest* /*request*/, ::mruv::devtools::GetPositionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPositions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPositions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SavePosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SavePosition() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SavePosition(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SavePosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SavePosition(::grpc::ServerContext* /*context*/, const ::mruv::devtools::SavePositionRequest* /*request*/, ::mruv::devtools::SavePositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SavePosition(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SavePosition(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeletePosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeletePosition() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeletePosition(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeletePosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePosition(::grpc::ServerContext* /*context*/, const ::mruv::devtools::DeletePositionRequest* /*request*/, ::mruv::devtools::DeletePositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeletePosition(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeletePosition(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetOutfits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetOutfits() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetOutfits(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetOutfits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOutfits(::grpc::ServerContext* /*context*/, const ::mruv::devtools::GetOutfitsRequest* /*request*/, ::mruv::devtools::GetOutfitsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetOutfits(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetOutfits(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SaveOutfit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SaveOutfit() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SaveOutfit(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SaveOutfit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveOutfit(::grpc::ServerContext* /*context*/, const ::mruv::devtools::SaveOutfitRequest* /*request*/, ::mruv::devtools::SaveOutfitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SaveOutfit(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SaveOutfit(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetAnimations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetAnimations() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAnimations(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetAnimations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAnimations(::grpc::ServerContext* /*context*/, const ::mruv::devtools::GetAnimationsRequest* /*request*/, ::mruv::devtools::GetAnimationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetAnimations(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetAnimations(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetAnimation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetAnimation() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAnimation(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetAnimation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAnimation(::grpc::ServerContext* /*context*/, const ::mruv::devtools::GetAnimationRequest* /*request*/, ::mruv::devtools::GetAnimationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetAnimation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetAnimation(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SaveAnimation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SaveAnimation() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SaveAnimation(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SaveAnimation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveAnimation(::grpc::ServerContext* /*context*/, const ::mruv::devtools::SaveAnimationRequest* /*request*/, ::mruv::devtools::SaveAnimationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SaveAnimation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SaveAnimation(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetServiceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetServiceStatus() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetServiceStatus(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetServiceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceStatus(::grpc::ServerContext* /*context*/, const ::mruv::ServiceStatusRequest* /*request*/, ::mruv::ServiceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetServiceStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetServiceStatus(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetServiceVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetServiceVersion() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetServiceVersion(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetServiceVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceVersion(::grpc::ServerContext* /*context*/, const ::mruv::VersionRequest* /*request*/, ::mruv::VersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetServiceVersion(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetServiceVersion(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPositions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPositions() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::devtools::GetPositionsRequest, ::mruv::devtools::GetPositionsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mruv::devtools::GetPositionsRequest, ::mruv::devtools::GetPositionsResponse>* streamer) {
                       return this->StreamedGetPositions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPositions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPositions(::grpc::ServerContext* /*context*/, const ::mruv::devtools::GetPositionsRequest* /*request*/, ::mruv::devtools::GetPositionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPositions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::devtools::GetPositionsRequest,::mruv::devtools::GetPositionsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SavePosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SavePosition() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::devtools::SavePositionRequest, ::mruv::devtools::SavePositionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mruv::devtools::SavePositionRequest, ::mruv::devtools::SavePositionResponse>* streamer) {
                       return this->StreamedSavePosition(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SavePosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SavePosition(::grpc::ServerContext* /*context*/, const ::mruv::devtools::SavePositionRequest* /*request*/, ::mruv::devtools::SavePositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSavePosition(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::devtools::SavePositionRequest,::mruv::devtools::SavePositionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeletePosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeletePosition() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::devtools::DeletePositionRequest, ::mruv::devtools::DeletePositionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mruv::devtools::DeletePositionRequest, ::mruv::devtools::DeletePositionResponse>* streamer) {
                       return this->StreamedDeletePosition(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeletePosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeletePosition(::grpc::ServerContext* /*context*/, const ::mruv::devtools::DeletePositionRequest* /*request*/, ::mruv::devtools::DeletePositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeletePosition(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::devtools::DeletePositionRequest,::mruv::devtools::DeletePositionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetOutfits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetOutfits() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::devtools::GetOutfitsRequest, ::mruv::devtools::GetOutfitsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mruv::devtools::GetOutfitsRequest, ::mruv::devtools::GetOutfitsResponse>* streamer) {
                       return this->StreamedGetOutfits(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetOutfits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOutfits(::grpc::ServerContext* /*context*/, const ::mruv::devtools::GetOutfitsRequest* /*request*/, ::mruv::devtools::GetOutfitsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetOutfits(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::devtools::GetOutfitsRequest,::mruv::devtools::GetOutfitsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SaveOutfit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SaveOutfit() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::devtools::SaveOutfitRequest, ::mruv::devtools::SaveOutfitResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mruv::devtools::SaveOutfitRequest, ::mruv::devtools::SaveOutfitResponse>* streamer) {
                       return this->StreamedSaveOutfit(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SaveOutfit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SaveOutfit(::grpc::ServerContext* /*context*/, const ::mruv::devtools::SaveOutfitRequest* /*request*/, ::mruv::devtools::SaveOutfitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSaveOutfit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::devtools::SaveOutfitRequest,::mruv::devtools::SaveOutfitResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAnimations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAnimations() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::devtools::GetAnimationsRequest, ::mruv::devtools::GetAnimationsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mruv::devtools::GetAnimationsRequest, ::mruv::devtools::GetAnimationsResponse>* streamer) {
                       return this->StreamedGetAnimations(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAnimations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAnimations(::grpc::ServerContext* /*context*/, const ::mruv::devtools::GetAnimationsRequest* /*request*/, ::mruv::devtools::GetAnimationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAnimations(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::devtools::GetAnimationsRequest,::mruv::devtools::GetAnimationsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAnimation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAnimation() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::devtools::GetAnimationRequest, ::mruv::devtools::GetAnimationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mruv::devtools::GetAnimationRequest, ::mruv::devtools::GetAnimationResponse>* streamer) {
                       return this->StreamedGetAnimation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAnimation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAnimation(::grpc::ServerContext* /*context*/, const ::mruv::devtools::GetAnimationRequest* /*request*/, ::mruv::devtools::GetAnimationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAnimation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::devtools::GetAnimationRequest,::mruv::devtools::GetAnimationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SaveAnimation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SaveAnimation() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::devtools::SaveAnimationRequest, ::mruv::devtools::SaveAnimationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mruv::devtools::SaveAnimationRequest, ::mruv::devtools::SaveAnimationResponse>* streamer) {
                       return this->StreamedSaveAnimation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SaveAnimation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SaveAnimation(::grpc::ServerContext* /*context*/, const ::mruv::devtools::SaveAnimationRequest* /*request*/, ::mruv::devtools::SaveAnimationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSaveAnimation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::devtools::SaveAnimationRequest,::mruv::devtools::SaveAnimationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetServiceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetServiceStatus() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::ServiceStatusRequest, ::mruv::ServiceStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mruv::ServiceStatusRequest, ::mruv::ServiceStatusResponse>* streamer) {
                       return this->StreamedGetServiceStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetServiceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetServiceStatus(::grpc::ServerContext* /*context*/, const ::mruv::ServiceStatusRequest* /*request*/, ::mruv::ServiceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetServiceStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::ServiceStatusRequest,::mruv::ServiceStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetServiceVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetServiceVersion() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::VersionRequest, ::mruv::VersionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mruv::VersionRequest, ::mruv::VersionResponse>* streamer) {
                       return this->StreamedGetServiceVersion(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetServiceVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetServiceVersion(::grpc::ServerContext* /*context*/, const ::mruv::VersionRequest* /*request*/, ::mruv::VersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetServiceVersion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::VersionRequest,::mruv::VersionResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetPositions<WithStreamedUnaryMethod_SavePosition<WithStreamedUnaryMethod_DeletePosition<WithStreamedUnaryMethod_GetOutfits<WithStreamedUnaryMethod_SaveOutfit<WithStreamedUnaryMethod_GetAnimations<WithStreamedUnaryMethod_GetAnimation<WithStreamedUnaryMethod_SaveAnimation<WithStreamedUnaryMethod_GetServiceStatus<WithStreamedUnaryMethod_GetServiceVersion<Service > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetPositions<WithStreamedUnaryMethod_SavePosition<WithStreamedUnaryMethod_DeletePosition<WithStreamedUnaryMethod_GetOutfits<WithStreamedUnaryMethod_SaveOutfit<WithStreamedUnaryMethod_GetAnimations<WithStreamedUnaryMethod_GetAnimation<WithStreamedUnaryMethod_SaveAnimation<WithStreamedUnaryMethod_GetServiceStatus<WithStreamedUnaryMethod_GetServiceVersion<Service > > > > > > > > > > StreamedService;
};

}  // namespace devtools
}  // namespace mruv


#endif  // GRPC_devtools_2fdevtools_2eproto__INCLUDED
