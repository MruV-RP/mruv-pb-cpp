// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: items/items_model.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_items_2fitems_5fmodel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_items_2fitems_5fmodel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_items_2fitems_5fmodel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_items_2fitems_5fmodel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_items_2fitems_5fmodel_2eproto;
namespace mruv {
namespace items {
class Container;
class ContainerDefaultTypeInternal;
extern ContainerDefaultTypeInternal _Container_default_instance_;
class ContainerID;
class ContainerIDDefaultTypeInternal;
extern ContainerIDDefaultTypeInternal _ContainerID_default_instance_;
class ContainerType;
class ContainerTypeDefaultTypeInternal;
extern ContainerTypeDefaultTypeInternal _ContainerType_default_instance_;
class ContainerTypeID;
class ContainerTypeIDDefaultTypeInternal;
extern ContainerTypeIDDefaultTypeInternal _ContainerTypeID_default_instance_;
class InsideItem;
class InsideItemDefaultTypeInternal;
extern InsideItemDefaultTypeInternal _InsideItem_default_instance_;
class Item;
class ItemDefaultTypeInternal;
extern ItemDefaultTypeInternal _Item_default_instance_;
class ItemID;
class ItemIDDefaultTypeInternal;
extern ItemIDDefaultTypeInternal _ItemID_default_instance_;
class ItemType;
class ItemTypeDefaultTypeInternal;
extern ItemTypeDefaultTypeInternal _ItemType_default_instance_;
class ItemTypeID;
class ItemTypeIDDefaultTypeInternal;
extern ItemTypeIDDefaultTypeInternal _ItemTypeID_default_instance_;
}  // namespace items
}  // namespace mruv
PROTOBUF_NAMESPACE_OPEN
template<> ::mruv::items::Container* Arena::CreateMaybeMessage<::mruv::items::Container>(Arena*);
template<> ::mruv::items::ContainerID* Arena::CreateMaybeMessage<::mruv::items::ContainerID>(Arena*);
template<> ::mruv::items::ContainerType* Arena::CreateMaybeMessage<::mruv::items::ContainerType>(Arena*);
template<> ::mruv::items::ContainerTypeID* Arena::CreateMaybeMessage<::mruv::items::ContainerTypeID>(Arena*);
template<> ::mruv::items::InsideItem* Arena::CreateMaybeMessage<::mruv::items::InsideItem>(Arena*);
template<> ::mruv::items::Item* Arena::CreateMaybeMessage<::mruv::items::Item>(Arena*);
template<> ::mruv::items::ItemID* Arena::CreateMaybeMessage<::mruv::items::ItemID>(Arena*);
template<> ::mruv::items::ItemType* Arena::CreateMaybeMessage<::mruv::items::ItemType>(Arena*);
template<> ::mruv::items::ItemTypeID* Arena::CreateMaybeMessage<::mruv::items::ItemTypeID>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mruv {
namespace items {

enum SortingMode : int {
  UNKNOWN = 0,
  WEIGHT_DESC = 1,
  WEIGHT_ASC = 2,
  VOLUME_DESC = 3,
  VOLUME_ASC = 4,
  SortingMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SortingMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SortingMode_IsValid(int value);
constexpr SortingMode SortingMode_MIN = UNKNOWN;
constexpr SortingMode SortingMode_MAX = VOLUME_ASC;
constexpr int SortingMode_ARRAYSIZE = SortingMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SortingMode_descriptor();
template<typename T>
inline const std::string& SortingMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SortingMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SortingMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SortingMode_descriptor(), enum_t_value);
}
inline bool SortingMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SortingMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SortingMode>(
    SortingMode_descriptor(), name, value);
}
// ===================================================================

class ItemType PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.items.ItemType) */ {
 public:
  inline ItemType() : ItemType(nullptr) {}
  virtual ~ItemType();

  ItemType(const ItemType& from);
  ItemType(ItemType&& from) noexcept
    : ItemType() {
    *this = ::std::move(from);
  }

  inline ItemType& operator=(const ItemType& from) {
    CopyFrom(from);
    return *this;
  }
  inline ItemType& operator=(ItemType&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ItemType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ItemType* internal_default_instance() {
    return reinterpret_cast<const ItemType*>(
               &_ItemType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ItemType& a, ItemType& b) {
    a.Swap(&b);
  }
  inline void Swap(ItemType* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ItemType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ItemType* New() const final {
    return CreateMaybeMessage<ItemType>(nullptr);
  }

  ItemType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ItemType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ItemType& from);
  void MergeFrom(const ItemType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.items.ItemType";
  }
  protected:
  explicit ItemType(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_items_2fitems_5fmodel_2eproto);
    return ::descriptor_table_items_2fitems_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kModelNameFieldNumber = 6,
    kIdFieldNumber = 1,
    kBaseWeightFieldNumber = 4,
    kBaseVolumeFieldNumber = 5,
    kModelHashFieldNumber = 7,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string model_name = 6;
  void clear_model_name();
  const std::string& model_name() const;
  void set_model_name(const std::string& value);
  void set_model_name(std::string&& value);
  void set_model_name(const char* value);
  void set_model_name(const char* value, size_t size);
  std::string* mutable_model_name();
  std::string* release_model_name();
  void set_allocated_model_name(std::string* model_name);
  private:
  const std::string& _internal_model_name() const;
  void _internal_set_model_name(const std::string& value);
  std::string* _internal_mutable_model_name();
  public:

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float base_weight = 4;
  void clear_base_weight();
  float base_weight() const;
  void set_base_weight(float value);
  private:
  float _internal_base_weight() const;
  void _internal_set_base_weight(float value);
  public:

  // float base_volume = 5;
  void clear_base_volume();
  float base_volume() const;
  void set_base_volume(float value);
  private:
  float _internal_base_volume() const;
  void _internal_set_base_volume(float value);
  public:

  // int32 model_hash = 7;
  void clear_model_hash();
  ::PROTOBUF_NAMESPACE_ID::int32 model_hash() const;
  void set_model_hash(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_model_hash() const;
  void _internal_set_model_hash(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.items.ItemType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  float base_weight_;
  float base_volume_;
  ::PROTOBUF_NAMESPACE_ID::int32 model_hash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_items_2fitems_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class ItemTypeID PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.items.ItemTypeID) */ {
 public:
  inline ItemTypeID() : ItemTypeID(nullptr) {}
  virtual ~ItemTypeID();

  ItemTypeID(const ItemTypeID& from);
  ItemTypeID(ItemTypeID&& from) noexcept
    : ItemTypeID() {
    *this = ::std::move(from);
  }

  inline ItemTypeID& operator=(const ItemTypeID& from) {
    CopyFrom(from);
    return *this;
  }
  inline ItemTypeID& operator=(ItemTypeID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ItemTypeID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ItemTypeID* internal_default_instance() {
    return reinterpret_cast<const ItemTypeID*>(
               &_ItemTypeID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ItemTypeID& a, ItemTypeID& b) {
    a.Swap(&b);
  }
  inline void Swap(ItemTypeID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ItemTypeID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ItemTypeID* New() const final {
    return CreateMaybeMessage<ItemTypeID>(nullptr);
  }

  ItemTypeID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ItemTypeID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ItemTypeID& from);
  void MergeFrom(const ItemTypeID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemTypeID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.items.ItemTypeID";
  }
  protected:
  explicit ItemTypeID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_items_2fitems_5fmodel_2eproto);
    return ::descriptor_table_items_2fitems_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.items.ItemTypeID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_items_2fitems_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class Item PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.items.Item) */ {
 public:
  inline Item() : Item(nullptr) {}
  virtual ~Item();

  Item(const Item& from);
  Item(Item&& from) noexcept
    : Item() {
    *this = ::std::move(from);
  }

  inline Item& operator=(const Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline Item& operator=(Item&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Item& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Item* internal_default_instance() {
    return reinterpret_cast<const Item*>(
               &_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Item& a, Item& b) {
    a.Swap(&b);
  }
  inline void Swap(Item* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Item* New() const final {
    return CreateMaybeMessage<Item>(nullptr);
  }

  Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Item>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Item& from);
  void MergeFrom(const Item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Item* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.items.Item";
  }
  protected:
  explicit Item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_items_2fitems_5fmodel_2eproto);
    return ::descriptor_table_items_2fitems_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kItemTypeIdFieldNumber = 2,
    kWeightFieldNumber = 3,
    kVolumeFieldNumber = 4,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 item_type_id = 2;
  void clear_item_type_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 item_type_id() const;
  void set_item_type_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_item_type_id() const;
  void _internal_set_item_type_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float weight = 3;
  void clear_weight();
  float weight() const;
  void set_weight(float value);
  private:
  float _internal_weight() const;
  void _internal_set_weight(float value);
  public:

  // float volume = 4;
  void clear_volume();
  float volume() const;
  void set_volume(float value);
  private:
  float _internal_volume() const;
  void _internal_set_volume(float value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.items.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 item_type_id_;
  float weight_;
  float volume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_items_2fitems_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class ItemID PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.items.ItemID) */ {
 public:
  inline ItemID() : ItemID(nullptr) {}
  virtual ~ItemID();

  ItemID(const ItemID& from);
  ItemID(ItemID&& from) noexcept
    : ItemID() {
    *this = ::std::move(from);
  }

  inline ItemID& operator=(const ItemID& from) {
    CopyFrom(from);
    return *this;
  }
  inline ItemID& operator=(ItemID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ItemID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ItemID* internal_default_instance() {
    return reinterpret_cast<const ItemID*>(
               &_ItemID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ItemID& a, ItemID& b) {
    a.Swap(&b);
  }
  inline void Swap(ItemID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ItemID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ItemID* New() const final {
    return CreateMaybeMessage<ItemID>(nullptr);
  }

  ItemID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ItemID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ItemID& from);
  void MergeFrom(const ItemID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.items.ItemID";
  }
  protected:
  explicit ItemID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_items_2fitems_5fmodel_2eproto);
    return ::descriptor_table_items_2fitems_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.items.ItemID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_items_2fitems_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class ContainerType PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.items.ContainerType) */ {
 public:
  inline ContainerType() : ContainerType(nullptr) {}
  virtual ~ContainerType();

  ContainerType(const ContainerType& from);
  ContainerType(ContainerType&& from) noexcept
    : ContainerType() {
    *this = ::std::move(from);
  }

  inline ContainerType& operator=(const ContainerType& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainerType& operator=(ContainerType&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContainerType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContainerType* internal_default_instance() {
    return reinterpret_cast<const ContainerType*>(
               &_ContainerType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ContainerType& a, ContainerType& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainerType* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainerType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContainerType* New() const final {
    return CreateMaybeMessage<ContainerType>(nullptr);
  }

  ContainerType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContainerType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContainerType& from);
  void MergeFrom(const ContainerType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.items.ContainerType";
  }
  protected:
  explicit ContainerType(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_items_2fitems_5fmodel_2eproto);
    return ::descriptor_table_items_2fitems_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValidItemTypesFieldNumber = 8,
    kIdFieldNumber = 1,
    kContainerItemTypeIdFieldNumber = 2,
    kMaxNumberFieldNumber = 3,
    kMaxVolumeFieldNumber = 4,
    kMaxWeightFieldNumber = 5,
  };
  // repeated int64 valid_item_types = 8;
  int valid_item_types_size() const;
  private:
  int _internal_valid_item_types_size() const;
  public:
  void clear_valid_item_types();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_valid_item_types(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_valid_item_types() const;
  void _internal_add_valid_item_types(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_valid_item_types();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 valid_item_types(int index) const;
  void set_valid_item_types(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_valid_item_types(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      valid_item_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_valid_item_types();

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 container_item_type_id = 2;
  void clear_container_item_type_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 container_item_type_id() const;
  void set_container_item_type_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_container_item_type_id() const;
  void _internal_set_container_item_type_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 max_number = 3;
  void clear_max_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_number() const;
  void set_max_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_number() const;
  void _internal_set_max_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float max_volume = 4;
  void clear_max_volume();
  float max_volume() const;
  void set_max_volume(float value);
  private:
  float _internal_max_volume() const;
  void _internal_set_max_volume(float value);
  public:

  // float max_weight = 5;
  void clear_max_weight();
  float max_weight() const;
  void set_max_weight(float value);
  private:
  float _internal_max_weight() const;
  void _internal_set_max_weight(float value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.items.ContainerType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > valid_item_types_;
  mutable std::atomic<int> _valid_item_types_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 container_item_type_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_number_;
  float max_volume_;
  float max_weight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_items_2fitems_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class ContainerTypeID PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.items.ContainerTypeID) */ {
 public:
  inline ContainerTypeID() : ContainerTypeID(nullptr) {}
  virtual ~ContainerTypeID();

  ContainerTypeID(const ContainerTypeID& from);
  ContainerTypeID(ContainerTypeID&& from) noexcept
    : ContainerTypeID() {
    *this = ::std::move(from);
  }

  inline ContainerTypeID& operator=(const ContainerTypeID& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainerTypeID& operator=(ContainerTypeID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContainerTypeID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContainerTypeID* internal_default_instance() {
    return reinterpret_cast<const ContainerTypeID*>(
               &_ContainerTypeID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ContainerTypeID& a, ContainerTypeID& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainerTypeID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainerTypeID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContainerTypeID* New() const final {
    return CreateMaybeMessage<ContainerTypeID>(nullptr);
  }

  ContainerTypeID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContainerTypeID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContainerTypeID& from);
  void MergeFrom(const ContainerTypeID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerTypeID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.items.ContainerTypeID";
  }
  protected:
  explicit ContainerTypeID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_items_2fitems_5fmodel_2eproto);
    return ::descriptor_table_items_2fitems_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.items.ContainerTypeID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_items_2fitems_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class Container PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.items.Container) */ {
 public:
  inline Container() : Container(nullptr) {}
  virtual ~Container();

  Container(const Container& from);
  Container(Container&& from) noexcept
    : Container() {
    *this = ::std::move(from);
  }

  inline Container& operator=(const Container& from) {
    CopyFrom(from);
    return *this;
  }
  inline Container& operator=(Container&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Container& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Container* internal_default_instance() {
    return reinterpret_cast<const Container*>(
               &_Container_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Container& a, Container& b) {
    a.Swap(&b);
  }
  inline void Swap(Container* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Container* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Container* New() const final {
    return CreateMaybeMessage<Container>(nullptr);
  }

  Container* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Container>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Container& from);
  void MergeFrom(const Container& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Container* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.items.Container";
  }
  protected:
  explicit Container(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_items_2fitems_5fmodel_2eproto);
    return ::descriptor_table_items_2fitems_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 5,
    kIdFieldNumber = 1,
    kTypeIdFieldNumber = 2,
    kItemIdFieldNumber = 3,
    kItemsInsideFieldNumber = 4,
  };
  // repeated .mruv.items.InsideItem items = 5;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::mruv::items::InsideItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::items::InsideItem >*
      mutable_items();
  private:
  const ::mruv::items::InsideItem& _internal_items(int index) const;
  ::mruv::items::InsideItem* _internal_add_items();
  public:
  const ::mruv::items::InsideItem& items(int index) const;
  ::mruv::items::InsideItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::items::InsideItem >&
      items() const;

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 type_id = 2;
  void clear_type_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 type_id() const;
  void set_type_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type_id() const;
  void _internal_set_type_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 item_id = 3;
  void clear_item_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 item_id() const;
  void set_item_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_item_id() const;
  void _internal_set_item_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 items_inside = 4;
  void clear_items_inside();
  ::PROTOBUF_NAMESPACE_ID::uint32 items_inside() const;
  void set_items_inside(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_items_inside() const;
  void _internal_set_items_inside(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.items.Container)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::items::InsideItem > items_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 item_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 items_inside_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_items_2fitems_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class ContainerID PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.items.ContainerID) */ {
 public:
  inline ContainerID() : ContainerID(nullptr) {}
  virtual ~ContainerID();

  ContainerID(const ContainerID& from);
  ContainerID(ContainerID&& from) noexcept
    : ContainerID() {
    *this = ::std::move(from);
  }

  inline ContainerID& operator=(const ContainerID& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainerID& operator=(ContainerID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContainerID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContainerID* internal_default_instance() {
    return reinterpret_cast<const ContainerID*>(
               &_ContainerID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ContainerID& a, ContainerID& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainerID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainerID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContainerID* New() const final {
    return CreateMaybeMessage<ContainerID>(nullptr);
  }

  ContainerID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContainerID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContainerID& from);
  void MergeFrom(const ContainerID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.items.ContainerID";
  }
  protected:
  explicit ContainerID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_items_2fitems_5fmodel_2eproto);
    return ::descriptor_table_items_2fitems_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.items.ContainerID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_items_2fitems_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class InsideItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.items.InsideItem) */ {
 public:
  inline InsideItem() : InsideItem(nullptr) {}
  virtual ~InsideItem();

  InsideItem(const InsideItem& from);
  InsideItem(InsideItem&& from) noexcept
    : InsideItem() {
    *this = ::std::move(from);
  }

  inline InsideItem& operator=(const InsideItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsideItem& operator=(InsideItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InsideItem& default_instance();

  enum ItemOrIdCase {
    kItemId = 2,
    kItem = 3,
    ITEM_OR_ID_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InsideItem* internal_default_instance() {
    return reinterpret_cast<const InsideItem*>(
               &_InsideItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(InsideItem& a, InsideItem& b) {
    a.Swap(&b);
  }
  inline void Swap(InsideItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InsideItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InsideItem* New() const final {
    return CreateMaybeMessage<InsideItem>(nullptr);
  }

  InsideItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InsideItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InsideItem& from);
  void MergeFrom(const InsideItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsideItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.items.InsideItem";
  }
  protected:
  explicit InsideItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_items_2fitems_5fmodel_2eproto);
    return ::descriptor_table_items_2fitems_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerIdFieldNumber = 1,
    kPositionFieldNumber = 4,
    kItemIdFieldNumber = 2,
    kItemFieldNumber = 3,
  };
  // uint32 container_id = 1;
  void clear_container_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 container_id() const;
  void set_container_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_container_id() const;
  void _internal_set_container_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 position = 4;
  void clear_position();
  ::PROTOBUF_NAMESPACE_ID::int32 position() const;
  void set_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_position() const;
  void _internal_set_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 item_id = 2;
  private:
  bool _internal_has_item_id() const;
  public:
  void clear_item_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 item_id() const;
  void set_item_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_item_id() const;
  void _internal_set_item_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .mruv.items.Item item = 3;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::mruv::items::Item& item() const;
  ::mruv::items::Item* release_item();
  ::mruv::items::Item* mutable_item();
  void set_allocated_item(::mruv::items::Item* item);
  private:
  const ::mruv::items::Item& _internal_item() const;
  ::mruv::items::Item* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::mruv::items::Item* item);
  ::mruv::items::Item* unsafe_arena_release_item();

  void clear_item_or_id();
  ItemOrIdCase item_or_id_case() const;
  // @@protoc_insertion_point(class_scope:mruv.items.InsideItem)
 private:
  class _Internal;
  void set_has_item_id();
  void set_has_item();

  inline bool has_item_or_id() const;
  inline void clear_has_item_or_id();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 container_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 position_;
  union ItemOrIdUnion {
    ItemOrIdUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 item_id_;
    ::mruv::items::Item* item_;
  } item_or_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_items_2fitems_5fmodel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ItemType

// uint32 id = 1;
inline void ItemType::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ItemType::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ItemType::id() const {
  // @@protoc_insertion_point(field_get:mruv.items.ItemType.id)
  return _internal_id();
}
inline void ItemType::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void ItemType::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.items.ItemType.id)
}

// string name = 2;
inline void ItemType::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ItemType::name() const {
  // @@protoc_insertion_point(field_get:mruv.items.ItemType.name)
  return _internal_name();
}
inline void ItemType::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mruv.items.ItemType.name)
}
inline std::string* ItemType::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mruv.items.ItemType.name)
  return _internal_mutable_name();
}
inline const std::string& ItemType::_internal_name() const {
  return name_.Get();
}
inline void ItemType::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ItemType::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.items.ItemType.name)
}
inline void ItemType::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.items.ItemType.name)
}
inline void ItemType::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.items.ItemType.name)
}
inline std::string* ItemType::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ItemType::release_name() {
  // @@protoc_insertion_point(field_release:mruv.items.ItemType.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ItemType::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.items.ItemType.name)
}

// string description = 3;
inline void ItemType::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ItemType::description() const {
  // @@protoc_insertion_point(field_get:mruv.items.ItemType.description)
  return _internal_description();
}
inline void ItemType::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:mruv.items.ItemType.description)
}
inline std::string* ItemType::mutable_description() {
  // @@protoc_insertion_point(field_mutable:mruv.items.ItemType.description)
  return _internal_mutable_description();
}
inline const std::string& ItemType::_internal_description() const {
  return description_.Get();
}
inline void ItemType::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ItemType::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.items.ItemType.description)
}
inline void ItemType::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.items.ItemType.description)
}
inline void ItemType::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.items.ItemType.description)
}
inline std::string* ItemType::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ItemType::release_description() {
  // @@protoc_insertion_point(field_release:mruv.items.ItemType.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ItemType::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.items.ItemType.description)
}

// float base_weight = 4;
inline void ItemType::clear_base_weight() {
  base_weight_ = 0;
}
inline float ItemType::_internal_base_weight() const {
  return base_weight_;
}
inline float ItemType::base_weight() const {
  // @@protoc_insertion_point(field_get:mruv.items.ItemType.base_weight)
  return _internal_base_weight();
}
inline void ItemType::_internal_set_base_weight(float value) {
  
  base_weight_ = value;
}
inline void ItemType::set_base_weight(float value) {
  _internal_set_base_weight(value);
  // @@protoc_insertion_point(field_set:mruv.items.ItemType.base_weight)
}

// float base_volume = 5;
inline void ItemType::clear_base_volume() {
  base_volume_ = 0;
}
inline float ItemType::_internal_base_volume() const {
  return base_volume_;
}
inline float ItemType::base_volume() const {
  // @@protoc_insertion_point(field_get:mruv.items.ItemType.base_volume)
  return _internal_base_volume();
}
inline void ItemType::_internal_set_base_volume(float value) {
  
  base_volume_ = value;
}
inline void ItemType::set_base_volume(float value) {
  _internal_set_base_volume(value);
  // @@protoc_insertion_point(field_set:mruv.items.ItemType.base_volume)
}

// string model_name = 6;
inline void ItemType::clear_model_name() {
  model_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ItemType::model_name() const {
  // @@protoc_insertion_point(field_get:mruv.items.ItemType.model_name)
  return _internal_model_name();
}
inline void ItemType::set_model_name(const std::string& value) {
  _internal_set_model_name(value);
  // @@protoc_insertion_point(field_set:mruv.items.ItemType.model_name)
}
inline std::string* ItemType::mutable_model_name() {
  // @@protoc_insertion_point(field_mutable:mruv.items.ItemType.model_name)
  return _internal_mutable_model_name();
}
inline const std::string& ItemType::_internal_model_name() const {
  return model_name_.Get();
}
inline void ItemType::_internal_set_model_name(const std::string& value) {
  
  model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ItemType::set_model_name(std::string&& value) {
  
  model_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.items.ItemType.model_name)
}
inline void ItemType::set_model_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.items.ItemType.model_name)
}
inline void ItemType::set_model_name(const char* value,
    size_t size) {
  
  model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.items.ItemType.model_name)
}
inline std::string* ItemType::_internal_mutable_model_name() {
  
  return model_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ItemType::release_model_name() {
  // @@protoc_insertion_point(field_release:mruv.items.ItemType.model_name)
  return model_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ItemType::set_allocated_model_name(std::string* model_name) {
  if (model_name != nullptr) {
    
  } else {
    
  }
  model_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.items.ItemType.model_name)
}

// int32 model_hash = 7;
inline void ItemType::clear_model_hash() {
  model_hash_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ItemType::_internal_model_hash() const {
  return model_hash_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ItemType::model_hash() const {
  // @@protoc_insertion_point(field_get:mruv.items.ItemType.model_hash)
  return _internal_model_hash();
}
inline void ItemType::_internal_set_model_hash(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  model_hash_ = value;
}
inline void ItemType::set_model_hash(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_model_hash(value);
  // @@protoc_insertion_point(field_set:mruv.items.ItemType.model_hash)
}

// -------------------------------------------------------------------

// ItemTypeID

// uint32 id = 1;
inline void ItemTypeID::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ItemTypeID::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ItemTypeID::id() const {
  // @@protoc_insertion_point(field_get:mruv.items.ItemTypeID.id)
  return _internal_id();
}
inline void ItemTypeID::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void ItemTypeID::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.items.ItemTypeID.id)
}

// -------------------------------------------------------------------

// Item

// uint32 id = 1;
inline void Item::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Item::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Item::id() const {
  // @@protoc_insertion_point(field_get:mruv.items.Item.id)
  return _internal_id();
}
inline void Item::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Item::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.items.Item.id)
}

// uint32 item_type_id = 2;
inline void Item::clear_item_type_id() {
  item_type_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Item::_internal_item_type_id() const {
  return item_type_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Item::item_type_id() const {
  // @@protoc_insertion_point(field_get:mruv.items.Item.item_type_id)
  return _internal_item_type_id();
}
inline void Item::_internal_set_item_type_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  item_type_id_ = value;
}
inline void Item::set_item_type_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_item_type_id(value);
  // @@protoc_insertion_point(field_set:mruv.items.Item.item_type_id)
}

// float weight = 3;
inline void Item::clear_weight() {
  weight_ = 0;
}
inline float Item::_internal_weight() const {
  return weight_;
}
inline float Item::weight() const {
  // @@protoc_insertion_point(field_get:mruv.items.Item.weight)
  return _internal_weight();
}
inline void Item::_internal_set_weight(float value) {
  
  weight_ = value;
}
inline void Item::set_weight(float value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:mruv.items.Item.weight)
}

// float volume = 4;
inline void Item::clear_volume() {
  volume_ = 0;
}
inline float Item::_internal_volume() const {
  return volume_;
}
inline float Item::volume() const {
  // @@protoc_insertion_point(field_get:mruv.items.Item.volume)
  return _internal_volume();
}
inline void Item::_internal_set_volume(float value) {
  
  volume_ = value;
}
inline void Item::set_volume(float value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:mruv.items.Item.volume)
}

// -------------------------------------------------------------------

// ItemID

// uint32 id = 1;
inline void ItemID::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ItemID::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ItemID::id() const {
  // @@protoc_insertion_point(field_get:mruv.items.ItemID.id)
  return _internal_id();
}
inline void ItemID::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void ItemID::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.items.ItemID.id)
}

// -------------------------------------------------------------------

// ContainerType

// uint32 id = 1;
inline void ContainerType::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ContainerType::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ContainerType::id() const {
  // @@protoc_insertion_point(field_get:mruv.items.ContainerType.id)
  return _internal_id();
}
inline void ContainerType::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void ContainerType::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.items.ContainerType.id)
}

// uint32 container_item_type_id = 2;
inline void ContainerType::clear_container_item_type_id() {
  container_item_type_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ContainerType::_internal_container_item_type_id() const {
  return container_item_type_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ContainerType::container_item_type_id() const {
  // @@protoc_insertion_point(field_get:mruv.items.ContainerType.container_item_type_id)
  return _internal_container_item_type_id();
}
inline void ContainerType::_internal_set_container_item_type_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  container_item_type_id_ = value;
}
inline void ContainerType::set_container_item_type_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_container_item_type_id(value);
  // @@protoc_insertion_point(field_set:mruv.items.ContainerType.container_item_type_id)
}

// uint32 max_number = 3;
inline void ContainerType::clear_max_number() {
  max_number_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ContainerType::_internal_max_number() const {
  return max_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ContainerType::max_number() const {
  // @@protoc_insertion_point(field_get:mruv.items.ContainerType.max_number)
  return _internal_max_number();
}
inline void ContainerType::_internal_set_max_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_number_ = value;
}
inline void ContainerType::set_max_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_number(value);
  // @@protoc_insertion_point(field_set:mruv.items.ContainerType.max_number)
}

// float max_volume = 4;
inline void ContainerType::clear_max_volume() {
  max_volume_ = 0;
}
inline float ContainerType::_internal_max_volume() const {
  return max_volume_;
}
inline float ContainerType::max_volume() const {
  // @@protoc_insertion_point(field_get:mruv.items.ContainerType.max_volume)
  return _internal_max_volume();
}
inline void ContainerType::_internal_set_max_volume(float value) {
  
  max_volume_ = value;
}
inline void ContainerType::set_max_volume(float value) {
  _internal_set_max_volume(value);
  // @@protoc_insertion_point(field_set:mruv.items.ContainerType.max_volume)
}

// float max_weight = 5;
inline void ContainerType::clear_max_weight() {
  max_weight_ = 0;
}
inline float ContainerType::_internal_max_weight() const {
  return max_weight_;
}
inline float ContainerType::max_weight() const {
  // @@protoc_insertion_point(field_get:mruv.items.ContainerType.max_weight)
  return _internal_max_weight();
}
inline void ContainerType::_internal_set_max_weight(float value) {
  
  max_weight_ = value;
}
inline void ContainerType::set_max_weight(float value) {
  _internal_set_max_weight(value);
  // @@protoc_insertion_point(field_set:mruv.items.ContainerType.max_weight)
}

// repeated int64 valid_item_types = 8;
inline int ContainerType::_internal_valid_item_types_size() const {
  return valid_item_types_.size();
}
inline int ContainerType::valid_item_types_size() const {
  return _internal_valid_item_types_size();
}
inline void ContainerType::clear_valid_item_types() {
  valid_item_types_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ContainerType::_internal_valid_item_types(int index) const {
  return valid_item_types_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ContainerType::valid_item_types(int index) const {
  // @@protoc_insertion_point(field_get:mruv.items.ContainerType.valid_item_types)
  return _internal_valid_item_types(index);
}
inline void ContainerType::set_valid_item_types(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  valid_item_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:mruv.items.ContainerType.valid_item_types)
}
inline void ContainerType::_internal_add_valid_item_types(::PROTOBUF_NAMESPACE_ID::int64 value) {
  valid_item_types_.Add(value);
}
inline void ContainerType::add_valid_item_types(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_valid_item_types(value);
  // @@protoc_insertion_point(field_add:mruv.items.ContainerType.valid_item_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ContainerType::_internal_valid_item_types() const {
  return valid_item_types_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ContainerType::valid_item_types() const {
  // @@protoc_insertion_point(field_list:mruv.items.ContainerType.valid_item_types)
  return _internal_valid_item_types();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ContainerType::_internal_mutable_valid_item_types() {
  return &valid_item_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ContainerType::mutable_valid_item_types() {
  // @@protoc_insertion_point(field_mutable_list:mruv.items.ContainerType.valid_item_types)
  return _internal_mutable_valid_item_types();
}

// -------------------------------------------------------------------

// ContainerTypeID

// uint32 id = 1;
inline void ContainerTypeID::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ContainerTypeID::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ContainerTypeID::id() const {
  // @@protoc_insertion_point(field_get:mruv.items.ContainerTypeID.id)
  return _internal_id();
}
inline void ContainerTypeID::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void ContainerTypeID::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.items.ContainerTypeID.id)
}

// -------------------------------------------------------------------

// Container

// uint32 id = 1;
inline void Container::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Container::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Container::id() const {
  // @@protoc_insertion_point(field_get:mruv.items.Container.id)
  return _internal_id();
}
inline void Container::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Container::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.items.Container.id)
}

// uint32 type_id = 2;
inline void Container::clear_type_id() {
  type_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Container::_internal_type_id() const {
  return type_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Container::type_id() const {
  // @@protoc_insertion_point(field_get:mruv.items.Container.type_id)
  return _internal_type_id();
}
inline void Container::_internal_set_type_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_id_ = value;
}
inline void Container::set_type_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type_id(value);
  // @@protoc_insertion_point(field_set:mruv.items.Container.type_id)
}

// uint32 item_id = 3;
inline void Container::clear_item_id() {
  item_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Container::_internal_item_id() const {
  return item_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Container::item_id() const {
  // @@protoc_insertion_point(field_get:mruv.items.Container.item_id)
  return _internal_item_id();
}
inline void Container::_internal_set_item_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  item_id_ = value;
}
inline void Container::set_item_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:mruv.items.Container.item_id)
}

// uint32 items_inside = 4;
inline void Container::clear_items_inside() {
  items_inside_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Container::_internal_items_inside() const {
  return items_inside_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Container::items_inside() const {
  // @@protoc_insertion_point(field_get:mruv.items.Container.items_inside)
  return _internal_items_inside();
}
inline void Container::_internal_set_items_inside(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  items_inside_ = value;
}
inline void Container::set_items_inside(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_items_inside(value);
  // @@protoc_insertion_point(field_set:mruv.items.Container.items_inside)
}

// repeated .mruv.items.InsideItem items = 5;
inline int Container::_internal_items_size() const {
  return items_.size();
}
inline int Container::items_size() const {
  return _internal_items_size();
}
inline void Container::clear_items() {
  items_.Clear();
}
inline ::mruv::items::InsideItem* Container::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:mruv.items.Container.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::items::InsideItem >*
Container::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:mruv.items.Container.items)
  return &items_;
}
inline const ::mruv::items::InsideItem& Container::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::mruv::items::InsideItem& Container::items(int index) const {
  // @@protoc_insertion_point(field_get:mruv.items.Container.items)
  return _internal_items(index);
}
inline ::mruv::items::InsideItem* Container::_internal_add_items() {
  return items_.Add();
}
inline ::mruv::items::InsideItem* Container::add_items() {
  // @@protoc_insertion_point(field_add:mruv.items.Container.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::items::InsideItem >&
Container::items() const {
  // @@protoc_insertion_point(field_list:mruv.items.Container.items)
  return items_;
}

// -------------------------------------------------------------------

// ContainerID

// uint32 id = 1;
inline void ContainerID::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ContainerID::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ContainerID::id() const {
  // @@protoc_insertion_point(field_get:mruv.items.ContainerID.id)
  return _internal_id();
}
inline void ContainerID::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void ContainerID::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.items.ContainerID.id)
}

// -------------------------------------------------------------------

// InsideItem

// uint32 container_id = 1;
inline void InsideItem::clear_container_id() {
  container_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InsideItem::_internal_container_id() const {
  return container_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InsideItem::container_id() const {
  // @@protoc_insertion_point(field_get:mruv.items.InsideItem.container_id)
  return _internal_container_id();
}
inline void InsideItem::_internal_set_container_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  container_id_ = value;
}
inline void InsideItem::set_container_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_container_id(value);
  // @@protoc_insertion_point(field_set:mruv.items.InsideItem.container_id)
}

// uint32 item_id = 2;
inline bool InsideItem::_internal_has_item_id() const {
  return item_or_id_case() == kItemId;
}
inline void InsideItem::set_has_item_id() {
  _oneof_case_[0] = kItemId;
}
inline void InsideItem::clear_item_id() {
  if (_internal_has_item_id()) {
    item_or_id_.item_id_ = 0u;
    clear_has_item_or_id();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InsideItem::_internal_item_id() const {
  if (_internal_has_item_id()) {
    return item_or_id_.item_id_;
  }
  return 0u;
}
inline void InsideItem::_internal_set_item_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_item_id()) {
    clear_item_or_id();
    set_has_item_id();
  }
  item_or_id_.item_id_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InsideItem::item_id() const {
  // @@protoc_insertion_point(field_get:mruv.items.InsideItem.item_id)
  return _internal_item_id();
}
inline void InsideItem::set_item_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:mruv.items.InsideItem.item_id)
}

// .mruv.items.Item item = 3;
inline bool InsideItem::_internal_has_item() const {
  return item_or_id_case() == kItem;
}
inline bool InsideItem::has_item() const {
  return _internal_has_item();
}
inline void InsideItem::set_has_item() {
  _oneof_case_[0] = kItem;
}
inline void InsideItem::clear_item() {
  if (_internal_has_item()) {
    if (GetArena() == nullptr) {
      delete item_or_id_.item_;
    }
    clear_has_item_or_id();
  }
}
inline ::mruv::items::Item* InsideItem::release_item() {
  // @@protoc_insertion_point(field_release:mruv.items.InsideItem.item)
  if (_internal_has_item()) {
    clear_has_item_or_id();
      ::mruv::items::Item* temp = item_or_id_.item_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    item_or_id_.item_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mruv::items::Item& InsideItem::_internal_item() const {
  return _internal_has_item()
      ? *item_or_id_.item_
      : *reinterpret_cast< ::mruv::items::Item*>(&::mruv::items::_Item_default_instance_);
}
inline const ::mruv::items::Item& InsideItem::item() const {
  // @@protoc_insertion_point(field_get:mruv.items.InsideItem.item)
  return _internal_item();
}
inline ::mruv::items::Item* InsideItem::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mruv.items.InsideItem.item)
  if (_internal_has_item()) {
    clear_has_item_or_id();
    ::mruv::items::Item* temp = item_or_id_.item_;
    item_or_id_.item_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InsideItem::unsafe_arena_set_allocated_item(::mruv::items::Item* item) {
  clear_item_or_id();
  if (item) {
    set_has_item();
    item_or_id_.item_ = item;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mruv.items.InsideItem.item)
}
inline ::mruv::items::Item* InsideItem::_internal_mutable_item() {
  if (!_internal_has_item()) {
    clear_item_or_id();
    set_has_item();
    item_or_id_.item_ = CreateMaybeMessage< ::mruv::items::Item >(GetArena());
  }
  return item_or_id_.item_;
}
inline ::mruv::items::Item* InsideItem::mutable_item() {
  // @@protoc_insertion_point(field_mutable:mruv.items.InsideItem.item)
  return _internal_mutable_item();
}

// int32 position = 4;
inline void InsideItem::clear_position() {
  position_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InsideItem::_internal_position() const {
  return position_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InsideItem::position() const {
  // @@protoc_insertion_point(field_get:mruv.items.InsideItem.position)
  return _internal_position();
}
inline void InsideItem::_internal_set_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  position_ = value;
}
inline void InsideItem::set_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:mruv.items.InsideItem.position)
}

inline bool InsideItem::has_item_or_id() const {
  return item_or_id_case() != ITEM_OR_ID_NOT_SET;
}
inline void InsideItem::clear_has_item_or_id() {
  _oneof_case_[0] = ITEM_OR_ID_NOT_SET;
}
inline InsideItem::ItemOrIdCase InsideItem::item_or_id_case() const {
  return InsideItem::ItemOrIdCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace items
}  // namespace mruv

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mruv::items::SortingMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mruv::items::SortingMode>() {
  return ::mruv::items::SortingMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_items_2fitems_5fmodel_2eproto
