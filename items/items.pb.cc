// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: items/items.proto

#include "items/items.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_items_2fitems_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Container_items_2fitems_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_items_2fitems_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerType_items_2fitems_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_items_2fitems_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InsideItem_items_2fitems_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_items_2fitems_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Item_items_2fitems_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_items_2fitems_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ItemType_items_2fitems_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2fspatial_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position_common_2fspatial_2eproto;
namespace mruv {
class GetItemsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetItemsRequest> _instance;
} _GetItemsRequest_default_instance_;
class GetItemsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetItemsResponse> _instance;
} _GetItemsResponse_default_instance_;
class GetItemTypesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetItemTypesRequest> _instance;
} _GetItemTypesRequest_default_instance_;
class GetItemTypesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetItemTypesResponse> _instance;
} _GetItemTypesResponse_default_instance_;
class GetContainersRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetContainersRequest> _instance;
} _GetContainersRequest_default_instance_;
class GetContainersResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetContainersResponse> _instance;
} _GetContainersResponse_default_instance_;
class GetContainerTypesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetContainerTypesRequest> _instance;
} _GetContainerTypesRequest_default_instance_;
class GetContainerTypesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetContainerTypesResponse> _instance;
} _GetContainerTypesResponse_default_instance_;
class PutItemRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PutItemRequest> _instance;
  ::PROTOBUF_NAMESPACE_ID::int32 slot_;
} _PutItemRequest_default_instance_;
class PutItemResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PutItemResponse> _instance;
} _PutItemResponse_default_instance_;
class GetContainerItemsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetContainerItemsRequest> _instance;
} _GetContainerItemsRequest_default_instance_;
class GetContainerItemsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetContainerItemsResponse> _instance;
} _GetContainerItemsResponse_default_instance_;
class PullItemRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PullItemRequest> _instance;
} _PullItemRequest_default_instance_;
class SortItemsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SortItemsRequest> _instance;
} _SortItemsRequest_default_instance_;
class SortItemsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SortItemsResponse> _instance;
} _SortItemsResponse_default_instance_;
class GetNearestItemsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetNearestItemsRequest> _instance;
} _GetNearestItemsRequest_default_instance_;
class GetNearestItemsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetNearestItemsResponse> _instance;
} _GetNearestItemsResponse_default_instance_;
class UseItemRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UseItemRequest> _instance;
} _UseItemRequest_default_instance_;
class UseItemResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UseItemResponse> _instance;
} _UseItemResponse_default_instance_;
}  // namespace mruv
static void InitDefaultsscc_info_GetContainerItemsRequest_items_2fitems_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::_GetContainerItemsRequest_default_instance_;
    new (ptr) ::mruv::GetContainerItemsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::GetContainerItemsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetContainerItemsRequest_items_2fitems_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetContainerItemsRequest_items_2fitems_2eproto}, {}};

static void InitDefaultsscc_info_GetContainerItemsResponse_items_2fitems_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::_GetContainerItemsResponse_default_instance_;
    new (ptr) ::mruv::GetContainerItemsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::GetContainerItemsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetContainerItemsResponse_items_2fitems_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetContainerItemsResponse_items_2fitems_2eproto}, {
      &scc_info_InsideItem_items_2fitems_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_GetContainerTypesRequest_items_2fitems_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::_GetContainerTypesRequest_default_instance_;
    new (ptr) ::mruv::GetContainerTypesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::GetContainerTypesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetContainerTypesRequest_items_2fitems_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetContainerTypesRequest_items_2fitems_2eproto}, {}};

static void InitDefaultsscc_info_GetContainerTypesResponse_items_2fitems_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::_GetContainerTypesResponse_default_instance_;
    new (ptr) ::mruv::GetContainerTypesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::GetContainerTypesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetContainerTypesResponse_items_2fitems_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetContainerTypesResponse_items_2fitems_2eproto}, {
      &scc_info_ContainerType_items_2fitems_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_GetContainersRequest_items_2fitems_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::_GetContainersRequest_default_instance_;
    new (ptr) ::mruv::GetContainersRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::GetContainersRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetContainersRequest_items_2fitems_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetContainersRequest_items_2fitems_2eproto}, {}};

static void InitDefaultsscc_info_GetContainersResponse_items_2fitems_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::_GetContainersResponse_default_instance_;
    new (ptr) ::mruv::GetContainersResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::GetContainersResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetContainersResponse_items_2fitems_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetContainersResponse_items_2fitems_2eproto}, {
      &scc_info_Container_items_2fitems_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_GetItemTypesRequest_items_2fitems_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::_GetItemTypesRequest_default_instance_;
    new (ptr) ::mruv::GetItemTypesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::GetItemTypesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetItemTypesRequest_items_2fitems_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetItemTypesRequest_items_2fitems_2eproto}, {}};

static void InitDefaultsscc_info_GetItemTypesResponse_items_2fitems_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::_GetItemTypesResponse_default_instance_;
    new (ptr) ::mruv::GetItemTypesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::GetItemTypesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetItemTypesResponse_items_2fitems_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetItemTypesResponse_items_2fitems_2eproto}, {
      &scc_info_ItemType_items_2fitems_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_GetItemsRequest_items_2fitems_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::_GetItemsRequest_default_instance_;
    new (ptr) ::mruv::GetItemsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::GetItemsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetItemsRequest_items_2fitems_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetItemsRequest_items_2fitems_2eproto}, {}};

static void InitDefaultsscc_info_GetItemsResponse_items_2fitems_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::_GetItemsResponse_default_instance_;
    new (ptr) ::mruv::GetItemsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::GetItemsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetItemsResponse_items_2fitems_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetItemsResponse_items_2fitems_2eproto}, {
      &scc_info_Item_items_2fitems_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_GetNearestItemsRequest_items_2fitems_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::_GetNearestItemsRequest_default_instance_;
    new (ptr) ::mruv::GetNearestItemsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::GetNearestItemsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetNearestItemsRequest_items_2fitems_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetNearestItemsRequest_items_2fitems_2eproto}, {
      &scc_info_Position_common_2fspatial_2eproto.base,}};

static void InitDefaultsscc_info_GetNearestItemsResponse_items_2fitems_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::_GetNearestItemsResponse_default_instance_;
    new (ptr) ::mruv::GetNearestItemsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::GetNearestItemsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetNearestItemsResponse_items_2fitems_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetNearestItemsResponse_items_2fitems_2eproto}, {
      &scc_info_InsideItem_items_2fitems_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_PullItemRequest_items_2fitems_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::_PullItemRequest_default_instance_;
    new (ptr) ::mruv::PullItemRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::PullItemRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PullItemRequest_items_2fitems_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PullItemRequest_items_2fitems_2eproto}, {}};

static void InitDefaultsscc_info_PutItemRequest_items_2fitems_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::_PutItemRequest_default_instance_;
    new (ptr) ::mruv::PutItemRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::PutItemRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PutItemRequest_items_2fitems_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PutItemRequest_items_2fitems_2eproto}, {}};

static void InitDefaultsscc_info_PutItemResponse_items_2fitems_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::_PutItemResponse_default_instance_;
    new (ptr) ::mruv::PutItemResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::PutItemResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PutItemResponse_items_2fitems_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PutItemResponse_items_2fitems_2eproto}, {
      &scc_info_InsideItem_items_2fitems_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_SortItemsRequest_items_2fitems_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::_SortItemsRequest_default_instance_;
    new (ptr) ::mruv::SortItemsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::SortItemsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SortItemsRequest_items_2fitems_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SortItemsRequest_items_2fitems_2eproto}, {}};

static void InitDefaultsscc_info_SortItemsResponse_items_2fitems_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::_SortItemsResponse_default_instance_;
    new (ptr) ::mruv::SortItemsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::SortItemsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SortItemsResponse_items_2fitems_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SortItemsResponse_items_2fitems_2eproto}, {
      &scc_info_Container_items_2fitems_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_UseItemRequest_items_2fitems_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::_UseItemRequest_default_instance_;
    new (ptr) ::mruv::UseItemRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::UseItemRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UseItemRequest_items_2fitems_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UseItemRequest_items_2fitems_2eproto}, {}};

static void InitDefaultsscc_info_UseItemResponse_items_2fitems_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::_UseItemResponse_default_instance_;
    new (ptr) ::mruv::UseItemResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::UseItemResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UseItemResponse_items_2fitems_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UseItemResponse_items_2fitems_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_items_2fitems_2eproto[19];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_items_2fitems_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_items_2fitems_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_items_2fitems_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::GetItemsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::GetItemsRequest, limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::GetItemsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::GetItemsResponse, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::GetItemTypesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::GetItemTypesRequest, limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::GetItemTypesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::GetItemTypesResponse, item_types_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::GetContainersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::GetContainersRequest, limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::GetContainersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::GetContainersResponse, containers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::GetContainerTypesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::GetContainerTypesRequest, limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::GetContainerTypesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::GetContainerTypesResponse, container_types_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::PutItemRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::mruv::PutItemRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::PutItemRequest, container_id_),
  PROTOBUF_FIELD_OFFSET(::mruv::PutItemRequest, item_id_),
  offsetof(::mruv::PutItemRequestDefaultTypeInternal, slot_),
  PROTOBUF_FIELD_OFFSET(::mruv::PutItemRequest, where_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::PutItemResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::PutItemResponse, inside_item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::GetContainerItemsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::GetContainerItemsRequest, container_id_),
  PROTOBUF_FIELD_OFFSET(::mruv::GetContainerItemsRequest, limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::GetContainerItemsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::GetContainerItemsResponse, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::PullItemRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::PullItemRequest, container_id_),
  PROTOBUF_FIELD_OFFSET(::mruv::PullItemRequest, item_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::SortItemsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::SortItemsRequest, container_id_),
  PROTOBUF_FIELD_OFFSET(::mruv::SortItemsRequest, sort_by_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::SortItemsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::SortItemsResponse, container_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::GetNearestItemsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::GetNearestItemsRequest, position_),
  PROTOBUF_FIELD_OFFSET(::mruv::GetNearestItemsRequest, container_id_),
  PROTOBUF_FIELD_OFFSET(::mruv::GetNearestItemsRequest, distance_limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::GetNearestItemsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::GetNearestItemsResponse, item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::UseItemRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::UseItemRequest, item_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::UseItemResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::UseItemResponse, success_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mruv::GetItemsRequest)},
  { 6, -1, sizeof(::mruv::GetItemsResponse)},
  { 12, -1, sizeof(::mruv::GetItemTypesRequest)},
  { 18, -1, sizeof(::mruv::GetItemTypesResponse)},
  { 24, -1, sizeof(::mruv::GetContainersRequest)},
  { 30, -1, sizeof(::mruv::GetContainersResponse)},
  { 36, -1, sizeof(::mruv::GetContainerTypesRequest)},
  { 42, -1, sizeof(::mruv::GetContainerTypesResponse)},
  { 48, -1, sizeof(::mruv::PutItemRequest)},
  { 57, -1, sizeof(::mruv::PutItemResponse)},
  { 63, -1, sizeof(::mruv::GetContainerItemsRequest)},
  { 70, -1, sizeof(::mruv::GetContainerItemsResponse)},
  { 76, -1, sizeof(::mruv::PullItemRequest)},
  { 83, -1, sizeof(::mruv::SortItemsRequest)},
  { 90, -1, sizeof(::mruv::SortItemsResponse)},
  { 96, -1, sizeof(::mruv::GetNearestItemsRequest)},
  { 104, -1, sizeof(::mruv::GetNearestItemsResponse)},
  { 110, -1, sizeof(::mruv::UseItemRequest)},
  { 116, -1, sizeof(::mruv::UseItemResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::_GetItemsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::_GetItemsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::_GetItemTypesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::_GetItemTypesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::_GetContainersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::_GetContainersResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::_GetContainerTypesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::_GetContainerTypesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::_PutItemRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::_PutItemResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::_GetContainerItemsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::_GetContainerItemsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::_PullItemRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::_SortItemsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::_SortItemsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::_GetNearestItemsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::_GetNearestItemsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::_UseItemRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::_UseItemResponse_default_instance_),
};

const char descriptor_table_protodef_items_2fitems_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021items/items.proto\022\004mruv\032\034google/api/an"
  "notations.proto\032\023common/health.proto\032\027it"
  "ems/items_model.proto\032\024common/spatial.pr"
  "oto\" \n\017GetItemsRequest\022\r\n\005limit\030\001 \001(\r\"-\n"
  "\020GetItemsResponse\022\031\n\005items\030\001 \003(\0132\n.mruv."
  "Item\"$\n\023GetItemTypesRequest\022\r\n\005limit\030\001 \001"
  "(\r\":\n\024GetItemTypesResponse\022\"\n\nitem_types"
  "\030\001 \003(\0132\016.mruv.ItemType\"%\n\024GetContainersR"
  "equest\022\r\n\005limit\030\001 \001(\r\"<\n\025GetContainersRe"
  "sponse\022#\n\ncontainers\030\001 \003(\0132\017.mruv.Contai"
  "ner\")\n\030GetContainerTypesRequest\022\r\n\005limit"
  "\030\001 \001(\r\"I\n\031GetContainerTypesResponse\022,\n\017c"
  "ontainer_types\030\001 \003(\0132\023.mruv.ContainerTyp"
  "e\"P\n\016PutItemRequest\022\024\n\014container_id\030\001 \001("
  "\r\022\017\n\007item_id\030\002 \001(\r\022\016\n\004slot\030\003 \001(\005H\000B\007\n\005wh"
  "ere\"8\n\017PutItemResponse\022%\n\013inside_item\030\001 "
  "\001(\0132\020.mruv.InsideItem\"\?\n\030GetContainerIte"
  "msRequest\022\024\n\014container_id\030\001 \001(\r\022\r\n\005limit"
  "\030\002 \001(\r\"<\n\031GetContainerItemsResponse\022\037\n\005i"
  "tems\030\001 \003(\0132\020.mruv.InsideItem\"8\n\017PullItem"
  "Request\022\024\n\014container_id\030\001 \001(\r\022\017\n\007item_id"
  "\030\002 \001(\r\"L\n\020SortItemsRequest\022\024\n\014container_"
  "id\030\001 \001(\r\022\"\n\007sort_by\030\002 \001(\0162\021.mruv.Sorting"
  "Mode\"7\n\021SortItemsResponse\022\"\n\tcontainer\030\001"
  " \001(\0132\017.mruv.Container\"h\n\026GetNearestItems"
  "Request\022 \n\010position\030\001 \001(\0132\016.mruv.Positio"
  "n\022\024\n\014container_id\030\002 \001(\r\022\026\n\016distance_limi"
  "t\030\003 \001(\001\"9\n\027GetNearestItemsResponse\022\036\n\004it"
  "em\030\001 \003(\0132\020.mruv.InsideItem\"!\n\016UseItemReq"
  "uest\022\017\n\007item_id\030\001 \001(\r\"\"\n\017UseItemResponse"
  "\022\017\n\007success\030\001 \001(\0102\364\021\n\017MruVItemService\0229\n"
  "\nCreateItem\022\n.mruv.Item\032\014.mruv.ItemID\"\021\202"
  "\323\344\223\002\013\"\t/v1/items\022;\n\007GetItem\022\014.mruv.ItemI"
  "D\032\n.mruv.Item\"\026\202\323\344\223\002\020\022\016/v1/items/{id}\022@\n"
  "\nDeleteItem\022\014.mruv.ItemID\032\014.mruv.ItemID\""
  "\026\202\323\344\223\002\020*\016/v1/items/{id}\022L\n\010GetItems\022\025.mr"
  "uv.GetItemsRequest\032\026.mruv.GetItemsRespon"
  "se\"\021\202\323\344\223\002\013\022\t/v1/items\022I\n\016CreateItemType\022"
  "\016.mruv.ItemType\032\020.mruv.ItemTypeID\"\025\202\323\344\223\002"
  "\017\"\r/v1/itemTypes\022K\n\013GetItemType\022\020.mruv.I"
  "temTypeID\032\016.mruv.ItemType\"\032\202\323\344\223\002\024\022\022/v1/i"
  "temTypes/{id}\022P\n\016DeleteItemType\022\020.mruv.I"
  "temTypeID\032\020.mruv.ItemTypeID\"\032\202\323\344\223\002\024*\022/v1"
  "/itemTypes/{id}\022\\\n\014GetItemTypes\022\031.mruv.G"
  "etItemTypesRequest\032\032.mruv.GetItemTypesRe"
  "sponse\"\025\202\323\344\223\002\017\022\r/v1/itemTypes\022M\n\017CreateC"
  "ontainer\022\017.mruv.Container\032\021.mruv.Contain"
  "erID\"\026\202\323\344\223\002\020\"\016/v1/containers\022O\n\014GetConta"
  "iner\022\021.mruv.ContainerID\032\017.mruv.Container"
  "\"\033\202\323\344\223\002\025\022\023/v1/containers/{id}\022T\n\017DeleteC"
  "ontainer\022\021.mruv.ContainerID\032\021.mruv.Conta"
  "inerID\"\033\202\323\344\223\002\025*\023/v1/containers/{id}\022`\n\rG"
  "etContainers\022\032.mruv.GetContainersRequest"
  "\032\033.mruv.GetContainersResponse\"\026\202\323\344\223\002\020\022\016/"
  "v1/containers\022]\n\023CreateContainerType\022\023.m"
  "ruv.ContainerType\032\025.mruv.ContainerTypeID"
  "\"\032\202\323\344\223\002\024\"\022/v1/containerTypes\022_\n\020GetConta"
  "inerType\022\025.mruv.ContainerTypeID\032\023.mruv.C"
  "ontainerType\"\037\202\323\344\223\002\031\022\027/v1/containerTypes"
  "/{id}\022d\n\023DeleteContainerType\022\025.mruv.Cont"
  "ainerTypeID\032\025.mruv.ContainerTypeID\"\037\202\323\344\223"
  "\002\031*\027/v1/containerTypes/{id}\022p\n\021GetContai"
  "nerTypes\022\036.mruv.GetContainerTypesRequest"
  "\032\037.mruv.GetContainerTypesResponse\"\032\202\323\344\223\002"
  "\024\022\022/v1/containerTypes\022\201\001\n\021GetContainerIt"
  "ems\022\036.mruv.GetContainerItemsRequest\032\037.mr"
  "uv.GetContainerItemsResponse\"+\202\323\344\223\002%\022#/v"
  "1/containers/{container_id}/items\022d\n\010Pul"
  "lItem\022\025.mruv.PullItemRequest\032\n.mruv.Item"
  "\"5\202\323\344\223\002/*-/v1/containers/{container_id}/"
  "items/{item_id}\022m\n\007PutItem\022\024.mruv.PutIte"
  "mRequest\032\025.mruv.PutItemResponse\"5\202\323\344\223\002/\032"
  "-/v1/containers/{container_id}/items/{it"
  "em_id}\022x\n\tSortItems\022\026.mruv.SortItemsRequ"
  "est\032\027.mruv.SortItemsResponse\":\202\323\344\223\0024\0222/v"
  "1/containers/{container_id}/items/sort/{"
  "sort_by}\022\260\001\n\017GetNearestItems\022\034.mruv.GetN"
  "earestItemsRequest\032\035.mruv.GetNearestItem"
  "sResponse\"`\202\323\344\223\002Z\022X/v1/containers/{conta"
  "iner_id}/items/nearest/x/{position.x}/y/"
  "{position.y}/z/{position.z}\022W\n\007UseItem\022\024"
  ".mruv.UseItemRequest\032\025.mruv.UseItemRespo"
  "nse\"\037\202\323\344\223\002\031\022\027/v1/items/{item_id}/use\022e\n\020"
  "GetServiceStatus\022\032.mruv.ServiceStatusReq"
  "uest\032\033.mruv.ServiceStatusResponse\"\030\202\323\344\223\002"
  "\022\022\020/v1/items/status\022[\n\021GetServiceVersion"
  "\022\024.mruv.VersionRequest\032\025.mruv.VersionRes"
  "ponse\"\031\202\323\344\223\002\023\022\021/v1/items/versionB%Z#gith"
  "ub.com/MruV-RP/mruv-pb-go/itemsb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_items_2fitems_2eproto_deps[4] = {
  &::descriptor_table_common_2fhealth_2eproto,
  &::descriptor_table_common_2fspatial_2eproto,
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_items_2fitems_5fmodel_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_items_2fitems_2eproto_sccs[19] = {
  &scc_info_GetContainerItemsRequest_items_2fitems_2eproto.base,
  &scc_info_GetContainerItemsResponse_items_2fitems_2eproto.base,
  &scc_info_GetContainerTypesRequest_items_2fitems_2eproto.base,
  &scc_info_GetContainerTypesResponse_items_2fitems_2eproto.base,
  &scc_info_GetContainersRequest_items_2fitems_2eproto.base,
  &scc_info_GetContainersResponse_items_2fitems_2eproto.base,
  &scc_info_GetItemTypesRequest_items_2fitems_2eproto.base,
  &scc_info_GetItemTypesResponse_items_2fitems_2eproto.base,
  &scc_info_GetItemsRequest_items_2fitems_2eproto.base,
  &scc_info_GetItemsResponse_items_2fitems_2eproto.base,
  &scc_info_GetNearestItemsRequest_items_2fitems_2eproto.base,
  &scc_info_GetNearestItemsResponse_items_2fitems_2eproto.base,
  &scc_info_PullItemRequest_items_2fitems_2eproto.base,
  &scc_info_PutItemRequest_items_2fitems_2eproto.base,
  &scc_info_PutItemResponse_items_2fitems_2eproto.base,
  &scc_info_SortItemsRequest_items_2fitems_2eproto.base,
  &scc_info_SortItemsResponse_items_2fitems_2eproto.base,
  &scc_info_UseItemRequest_items_2fitems_2eproto.base,
  &scc_info_UseItemResponse_items_2fitems_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_items_2fitems_2eproto_once;
static bool descriptor_table_items_2fitems_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_items_2fitems_2eproto = {
  &descriptor_table_items_2fitems_2eproto_initialized, descriptor_table_protodef_items_2fitems_2eproto, "items/items.proto", 3559,
  &descriptor_table_items_2fitems_2eproto_once, descriptor_table_items_2fitems_2eproto_sccs, descriptor_table_items_2fitems_2eproto_deps, 19, 4,
  schemas, file_default_instances, TableStruct_items_2fitems_2eproto::offsets,
  file_level_metadata_items_2fitems_2eproto, 19, file_level_enum_descriptors_items_2fitems_2eproto, file_level_service_descriptors_items_2fitems_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_items_2fitems_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_items_2fitems_2eproto), true);
namespace mruv {

// ===================================================================

void GetItemsRequest::InitAsDefaultInstance() {
}
class GetItemsRequest::_Internal {
 public:
};

GetItemsRequest::GetItemsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.GetItemsRequest)
}
GetItemsRequest::GetItemsRequest(const GetItemsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:mruv.GetItemsRequest)
}

void GetItemsRequest::SharedCtor() {
  limit_ = 0u;
}

GetItemsRequest::~GetItemsRequest() {
  // @@protoc_insertion_point(destructor:mruv.GetItemsRequest)
  SharedDtor();
}

void GetItemsRequest::SharedDtor() {
}

void GetItemsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetItemsRequest& GetItemsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetItemsRequest_items_2fitems_2eproto.base);
  return *internal_default_instance();
}


void GetItemsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.GetItemsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  limit_ = 0u;
  _internal_metadata_.Clear();
}

const char* GetItemsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetItemsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.GetItemsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 limit = 1;
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.GetItemsRequest)
  return target;
}

size_t GetItemsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.GetItemsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 limit = 1;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetItemsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.GetItemsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetItemsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetItemsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.GetItemsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.GetItemsRequest)
    MergeFrom(*source);
  }
}

void GetItemsRequest::MergeFrom(const GetItemsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.GetItemsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
}

void GetItemsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.GetItemsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetItemsRequest::CopyFrom(const GetItemsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.GetItemsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemsRequest::IsInitialized() const {
  return true;
}

void GetItemsRequest::InternalSwap(GetItemsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(limit_, other->limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetItemsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetItemsResponse::InitAsDefaultInstance() {
}
class GetItemsResponse::_Internal {
 public:
};

void GetItemsResponse::clear_items() {
  items_.Clear();
}
GetItemsResponse::GetItemsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.GetItemsResponse)
}
GetItemsResponse::GetItemsResponse(const GetItemsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.GetItemsResponse)
}

void GetItemsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetItemsResponse_items_2fitems_2eproto.base);
}

GetItemsResponse::~GetItemsResponse() {
  // @@protoc_insertion_point(destructor:mruv.GetItemsResponse)
  SharedDtor();
}

void GetItemsResponse::SharedDtor() {
}

void GetItemsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetItemsResponse& GetItemsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetItemsResponse_items_2fitems_2eproto.base);
  return *internal_default_instance();
}


void GetItemsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.GetItemsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear();
}

const char* GetItemsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mruv.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetItemsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.GetItemsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mruv.Item items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.GetItemsResponse)
  return target;
}

size_t GetItemsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.GetItemsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mruv.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetItemsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.GetItemsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetItemsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetItemsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.GetItemsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.GetItemsResponse)
    MergeFrom(*source);
  }
}

void GetItemsResponse::MergeFrom(const GetItemsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.GetItemsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
}

void GetItemsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.GetItemsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetItemsResponse::CopyFrom(const GetItemsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.GetItemsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemsResponse::IsInitialized() const {
  return true;
}

void GetItemsResponse::InternalSwap(GetItemsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetItemsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetItemTypesRequest::InitAsDefaultInstance() {
}
class GetItemTypesRequest::_Internal {
 public:
};

GetItemTypesRequest::GetItemTypesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.GetItemTypesRequest)
}
GetItemTypesRequest::GetItemTypesRequest(const GetItemTypesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:mruv.GetItemTypesRequest)
}

void GetItemTypesRequest::SharedCtor() {
  limit_ = 0u;
}

GetItemTypesRequest::~GetItemTypesRequest() {
  // @@protoc_insertion_point(destructor:mruv.GetItemTypesRequest)
  SharedDtor();
}

void GetItemTypesRequest::SharedDtor() {
}

void GetItemTypesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetItemTypesRequest& GetItemTypesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetItemTypesRequest_items_2fitems_2eproto.base);
  return *internal_default_instance();
}


void GetItemTypesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.GetItemTypesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  limit_ = 0u;
  _internal_metadata_.Clear();
}

const char* GetItemTypesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetItemTypesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.GetItemTypesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 limit = 1;
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.GetItemTypesRequest)
  return target;
}

size_t GetItemTypesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.GetItemTypesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 limit = 1;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetItemTypesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.GetItemTypesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetItemTypesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetItemTypesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.GetItemTypesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.GetItemTypesRequest)
    MergeFrom(*source);
  }
}

void GetItemTypesRequest::MergeFrom(const GetItemTypesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.GetItemTypesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
}

void GetItemTypesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.GetItemTypesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetItemTypesRequest::CopyFrom(const GetItemTypesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.GetItemTypesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemTypesRequest::IsInitialized() const {
  return true;
}

void GetItemTypesRequest::InternalSwap(GetItemTypesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(limit_, other->limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetItemTypesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetItemTypesResponse::InitAsDefaultInstance() {
}
class GetItemTypesResponse::_Internal {
 public:
};

void GetItemTypesResponse::clear_item_types() {
  item_types_.Clear();
}
GetItemTypesResponse::GetItemTypesResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.GetItemTypesResponse)
}
GetItemTypesResponse::GetItemTypesResponse(const GetItemTypesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      item_types_(from.item_types_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.GetItemTypesResponse)
}

void GetItemTypesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetItemTypesResponse_items_2fitems_2eproto.base);
}

GetItemTypesResponse::~GetItemTypesResponse() {
  // @@protoc_insertion_point(destructor:mruv.GetItemTypesResponse)
  SharedDtor();
}

void GetItemTypesResponse::SharedDtor() {
}

void GetItemTypesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetItemTypesResponse& GetItemTypesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetItemTypesResponse_items_2fitems_2eproto.base);
  return *internal_default_instance();
}


void GetItemTypesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.GetItemTypesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_types_.Clear();
  _internal_metadata_.Clear();
}

const char* GetItemTypesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mruv.ItemType item_types = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetItemTypesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.GetItemTypesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mruv.ItemType item_types = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_item_types_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_item_types(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.GetItemTypesResponse)
  return target;
}

size_t GetItemTypesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.GetItemTypesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mruv.ItemType item_types = 1;
  total_size += 1UL * this->_internal_item_types_size();
  for (const auto& msg : this->item_types_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetItemTypesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.GetItemTypesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetItemTypesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetItemTypesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.GetItemTypesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.GetItemTypesResponse)
    MergeFrom(*source);
  }
}

void GetItemTypesResponse::MergeFrom(const GetItemTypesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.GetItemTypesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_types_.MergeFrom(from.item_types_);
}

void GetItemTypesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.GetItemTypesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetItemTypesResponse::CopyFrom(const GetItemTypesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.GetItemTypesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemTypesResponse::IsInitialized() const {
  return true;
}

void GetItemTypesResponse::InternalSwap(GetItemTypesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  item_types_.InternalSwap(&other->item_types_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetItemTypesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetContainersRequest::InitAsDefaultInstance() {
}
class GetContainersRequest::_Internal {
 public:
};

GetContainersRequest::GetContainersRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.GetContainersRequest)
}
GetContainersRequest::GetContainersRequest(const GetContainersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:mruv.GetContainersRequest)
}

void GetContainersRequest::SharedCtor() {
  limit_ = 0u;
}

GetContainersRequest::~GetContainersRequest() {
  // @@protoc_insertion_point(destructor:mruv.GetContainersRequest)
  SharedDtor();
}

void GetContainersRequest::SharedDtor() {
}

void GetContainersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetContainersRequest& GetContainersRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetContainersRequest_items_2fitems_2eproto.base);
  return *internal_default_instance();
}


void GetContainersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.GetContainersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  limit_ = 0u;
  _internal_metadata_.Clear();
}

const char* GetContainersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetContainersRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.GetContainersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 limit = 1;
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.GetContainersRequest)
  return target;
}

size_t GetContainersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.GetContainersRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 limit = 1;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetContainersRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.GetContainersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetContainersRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetContainersRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.GetContainersRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.GetContainersRequest)
    MergeFrom(*source);
  }
}

void GetContainersRequest::MergeFrom(const GetContainersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.GetContainersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
}

void GetContainersRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.GetContainersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetContainersRequest::CopyFrom(const GetContainersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.GetContainersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetContainersRequest::IsInitialized() const {
  return true;
}

void GetContainersRequest::InternalSwap(GetContainersRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(limit_, other->limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetContainersRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetContainersResponse::InitAsDefaultInstance() {
}
class GetContainersResponse::_Internal {
 public:
};

void GetContainersResponse::clear_containers() {
  containers_.Clear();
}
GetContainersResponse::GetContainersResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.GetContainersResponse)
}
GetContainersResponse::GetContainersResponse(const GetContainersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      containers_(from.containers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.GetContainersResponse)
}

void GetContainersResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetContainersResponse_items_2fitems_2eproto.base);
}

GetContainersResponse::~GetContainersResponse() {
  // @@protoc_insertion_point(destructor:mruv.GetContainersResponse)
  SharedDtor();
}

void GetContainersResponse::SharedDtor() {
}

void GetContainersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetContainersResponse& GetContainersResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetContainersResponse_items_2fitems_2eproto.base);
  return *internal_default_instance();
}


void GetContainersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.GetContainersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  containers_.Clear();
  _internal_metadata_.Clear();
}

const char* GetContainersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mruv.Container containers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_containers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetContainersResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.GetContainersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mruv.Container containers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_containers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_containers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.GetContainersResponse)
  return target;
}

size_t GetContainersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.GetContainersResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mruv.Container containers = 1;
  total_size += 1UL * this->_internal_containers_size();
  for (const auto& msg : this->containers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetContainersResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.GetContainersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetContainersResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetContainersResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.GetContainersResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.GetContainersResponse)
    MergeFrom(*source);
  }
}

void GetContainersResponse::MergeFrom(const GetContainersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.GetContainersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  containers_.MergeFrom(from.containers_);
}

void GetContainersResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.GetContainersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetContainersResponse::CopyFrom(const GetContainersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.GetContainersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetContainersResponse::IsInitialized() const {
  return true;
}

void GetContainersResponse::InternalSwap(GetContainersResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  containers_.InternalSwap(&other->containers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetContainersResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetContainerTypesRequest::InitAsDefaultInstance() {
}
class GetContainerTypesRequest::_Internal {
 public:
};

GetContainerTypesRequest::GetContainerTypesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.GetContainerTypesRequest)
}
GetContainerTypesRequest::GetContainerTypesRequest(const GetContainerTypesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:mruv.GetContainerTypesRequest)
}

void GetContainerTypesRequest::SharedCtor() {
  limit_ = 0u;
}

GetContainerTypesRequest::~GetContainerTypesRequest() {
  // @@protoc_insertion_point(destructor:mruv.GetContainerTypesRequest)
  SharedDtor();
}

void GetContainerTypesRequest::SharedDtor() {
}

void GetContainerTypesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetContainerTypesRequest& GetContainerTypesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetContainerTypesRequest_items_2fitems_2eproto.base);
  return *internal_default_instance();
}


void GetContainerTypesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.GetContainerTypesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  limit_ = 0u;
  _internal_metadata_.Clear();
}

const char* GetContainerTypesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetContainerTypesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.GetContainerTypesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 limit = 1;
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.GetContainerTypesRequest)
  return target;
}

size_t GetContainerTypesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.GetContainerTypesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 limit = 1;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetContainerTypesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.GetContainerTypesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetContainerTypesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetContainerTypesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.GetContainerTypesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.GetContainerTypesRequest)
    MergeFrom(*source);
  }
}

void GetContainerTypesRequest::MergeFrom(const GetContainerTypesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.GetContainerTypesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
}

void GetContainerTypesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.GetContainerTypesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetContainerTypesRequest::CopyFrom(const GetContainerTypesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.GetContainerTypesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetContainerTypesRequest::IsInitialized() const {
  return true;
}

void GetContainerTypesRequest::InternalSwap(GetContainerTypesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(limit_, other->limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetContainerTypesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetContainerTypesResponse::InitAsDefaultInstance() {
}
class GetContainerTypesResponse::_Internal {
 public:
};

void GetContainerTypesResponse::clear_container_types() {
  container_types_.Clear();
}
GetContainerTypesResponse::GetContainerTypesResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.GetContainerTypesResponse)
}
GetContainerTypesResponse::GetContainerTypesResponse(const GetContainerTypesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      container_types_(from.container_types_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.GetContainerTypesResponse)
}

void GetContainerTypesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetContainerTypesResponse_items_2fitems_2eproto.base);
}

GetContainerTypesResponse::~GetContainerTypesResponse() {
  // @@protoc_insertion_point(destructor:mruv.GetContainerTypesResponse)
  SharedDtor();
}

void GetContainerTypesResponse::SharedDtor() {
}

void GetContainerTypesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetContainerTypesResponse& GetContainerTypesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetContainerTypesResponse_items_2fitems_2eproto.base);
  return *internal_default_instance();
}


void GetContainerTypesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.GetContainerTypesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  container_types_.Clear();
  _internal_metadata_.Clear();
}

const char* GetContainerTypesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mruv.ContainerType container_types = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_container_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetContainerTypesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.GetContainerTypesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mruv.ContainerType container_types = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_container_types_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_container_types(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.GetContainerTypesResponse)
  return target;
}

size_t GetContainerTypesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.GetContainerTypesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mruv.ContainerType container_types = 1;
  total_size += 1UL * this->_internal_container_types_size();
  for (const auto& msg : this->container_types_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetContainerTypesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.GetContainerTypesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetContainerTypesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetContainerTypesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.GetContainerTypesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.GetContainerTypesResponse)
    MergeFrom(*source);
  }
}

void GetContainerTypesResponse::MergeFrom(const GetContainerTypesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.GetContainerTypesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  container_types_.MergeFrom(from.container_types_);
}

void GetContainerTypesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.GetContainerTypesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetContainerTypesResponse::CopyFrom(const GetContainerTypesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.GetContainerTypesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetContainerTypesResponse::IsInitialized() const {
  return true;
}

void GetContainerTypesResponse::InternalSwap(GetContainerTypesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  container_types_.InternalSwap(&other->container_types_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetContainerTypesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PutItemRequest::InitAsDefaultInstance() {
  ::mruv::_PutItemRequest_default_instance_.slot_ = 0;
}
class PutItemRequest::_Internal {
 public:
};

PutItemRequest::PutItemRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.PutItemRequest)
}
PutItemRequest::PutItemRequest(const PutItemRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&container_id_, &from.container_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_id_) -
    reinterpret_cast<char*>(&container_id_)) + sizeof(item_id_));
  clear_has_where();
  switch (from.where_case()) {
    case kSlot: {
      _internal_set_slot(from._internal_slot());
      break;
    }
    case WHERE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:mruv.PutItemRequest)
}

void PutItemRequest::SharedCtor() {
  ::memset(&container_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&item_id_) -
      reinterpret_cast<char*>(&container_id_)) + sizeof(item_id_));
  clear_has_where();
}

PutItemRequest::~PutItemRequest() {
  // @@protoc_insertion_point(destructor:mruv.PutItemRequest)
  SharedDtor();
}

void PutItemRequest::SharedDtor() {
  if (has_where()) {
    clear_where();
  }
}

void PutItemRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PutItemRequest& PutItemRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PutItemRequest_items_2fitems_2eproto.base);
  return *internal_default_instance();
}


void PutItemRequest::clear_where() {
// @@protoc_insertion_point(one_of_clear_start:mruv.PutItemRequest)
  switch (where_case()) {
    case kSlot: {
      // No need to clear
      break;
    }
    case WHERE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = WHERE_NOT_SET;
}


void PutItemRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.PutItemRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&container_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&item_id_) -
      reinterpret_cast<char*>(&container_id_)) + sizeof(item_id_));
  clear_where();
  _internal_metadata_.Clear();
}

const char* PutItemRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 container_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          container_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 slot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_slot(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PutItemRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.PutItemRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 container_id = 1;
  if (this->container_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_container_id(), target);
  }

  // uint32 item_id = 2;
  if (this->item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_item_id(), target);
  }

  // int32 slot = 3;
  if (_internal_has_slot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_slot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.PutItemRequest)
  return target;
}

size_t PutItemRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.PutItemRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 container_id = 1;
  if (this->container_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_container_id());
  }

  // uint32 item_id = 2;
  if (this->item_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_item_id());
  }

  switch (where_case()) {
    // int32 slot = 3;
    case kSlot: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_slot());
      break;
    }
    case WHERE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PutItemRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.PutItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PutItemRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PutItemRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.PutItemRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.PutItemRequest)
    MergeFrom(*source);
  }
}

void PutItemRequest::MergeFrom(const PutItemRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.PutItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.container_id() != 0) {
    _internal_set_container_id(from._internal_container_id());
  }
  if (from.item_id() != 0) {
    _internal_set_item_id(from._internal_item_id());
  }
  switch (from.where_case()) {
    case kSlot: {
      _internal_set_slot(from._internal_slot());
      break;
    }
    case WHERE_NOT_SET: {
      break;
    }
  }
}

void PutItemRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.PutItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutItemRequest::CopyFrom(const PutItemRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.PutItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutItemRequest::IsInitialized() const {
  return true;
}

void PutItemRequest::InternalSwap(PutItemRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(container_id_, other->container_id_);
  swap(item_id_, other->item_id_);
  swap(where_, other->where_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PutItemRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PutItemResponse::InitAsDefaultInstance() {
  ::mruv::_PutItemResponse_default_instance_._instance.get_mutable()->inside_item_ = const_cast< ::mruv::InsideItem*>(
      ::mruv::InsideItem::internal_default_instance());
}
class PutItemResponse::_Internal {
 public:
  static const ::mruv::InsideItem& inside_item(const PutItemResponse* msg);
};

const ::mruv::InsideItem&
PutItemResponse::_Internal::inside_item(const PutItemResponse* msg) {
  return *msg->inside_item_;
}
void PutItemResponse::clear_inside_item() {
  if (GetArenaNoVirtual() == nullptr && inside_item_ != nullptr) {
    delete inside_item_;
  }
  inside_item_ = nullptr;
}
PutItemResponse::PutItemResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.PutItemResponse)
}
PutItemResponse::PutItemResponse(const PutItemResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_inside_item()) {
    inside_item_ = new ::mruv::InsideItem(*from.inside_item_);
  } else {
    inside_item_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mruv.PutItemResponse)
}

void PutItemResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PutItemResponse_items_2fitems_2eproto.base);
  inside_item_ = nullptr;
}

PutItemResponse::~PutItemResponse() {
  // @@protoc_insertion_point(destructor:mruv.PutItemResponse)
  SharedDtor();
}

void PutItemResponse::SharedDtor() {
  if (this != internal_default_instance()) delete inside_item_;
}

void PutItemResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PutItemResponse& PutItemResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PutItemResponse_items_2fitems_2eproto.base);
  return *internal_default_instance();
}


void PutItemResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.PutItemResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && inside_item_ != nullptr) {
    delete inside_item_;
  }
  inside_item_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PutItemResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mruv.InsideItem inside_item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_inside_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PutItemResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.PutItemResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mruv.InsideItem inside_item = 1;
  if (this->has_inside_item()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::inside_item(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.PutItemResponse)
  return target;
}

size_t PutItemResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.PutItemResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mruv.InsideItem inside_item = 1;
  if (this->has_inside_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inside_item_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PutItemResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.PutItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PutItemResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PutItemResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.PutItemResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.PutItemResponse)
    MergeFrom(*source);
  }
}

void PutItemResponse::MergeFrom(const PutItemResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.PutItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_inside_item()) {
    _internal_mutable_inside_item()->::mruv::InsideItem::MergeFrom(from._internal_inside_item());
  }
}

void PutItemResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.PutItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutItemResponse::CopyFrom(const PutItemResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.PutItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutItemResponse::IsInitialized() const {
  return true;
}

void PutItemResponse::InternalSwap(PutItemResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(inside_item_, other->inside_item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PutItemResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetContainerItemsRequest::InitAsDefaultInstance() {
}
class GetContainerItemsRequest::_Internal {
 public:
};

GetContainerItemsRequest::GetContainerItemsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.GetContainerItemsRequest)
}
GetContainerItemsRequest::GetContainerItemsRequest(const GetContainerItemsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&container_id_, &from.container_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&container_id_)) + sizeof(limit_));
  // @@protoc_insertion_point(copy_constructor:mruv.GetContainerItemsRequest)
}

void GetContainerItemsRequest::SharedCtor() {
  ::memset(&container_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&container_id_)) + sizeof(limit_));
}

GetContainerItemsRequest::~GetContainerItemsRequest() {
  // @@protoc_insertion_point(destructor:mruv.GetContainerItemsRequest)
  SharedDtor();
}

void GetContainerItemsRequest::SharedDtor() {
}

void GetContainerItemsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetContainerItemsRequest& GetContainerItemsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetContainerItemsRequest_items_2fitems_2eproto.base);
  return *internal_default_instance();
}


void GetContainerItemsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.GetContainerItemsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&container_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&container_id_)) + sizeof(limit_));
  _internal_metadata_.Clear();
}

const char* GetContainerItemsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 container_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          container_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetContainerItemsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.GetContainerItemsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 container_id = 1;
  if (this->container_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_container_id(), target);
  }

  // uint32 limit = 2;
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.GetContainerItemsRequest)
  return target;
}

size_t GetContainerItemsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.GetContainerItemsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 container_id = 1;
  if (this->container_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_container_id());
  }

  // uint32 limit = 2;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetContainerItemsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.GetContainerItemsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetContainerItemsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetContainerItemsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.GetContainerItemsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.GetContainerItemsRequest)
    MergeFrom(*source);
  }
}

void GetContainerItemsRequest::MergeFrom(const GetContainerItemsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.GetContainerItemsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.container_id() != 0) {
    _internal_set_container_id(from._internal_container_id());
  }
  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
}

void GetContainerItemsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.GetContainerItemsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetContainerItemsRequest::CopyFrom(const GetContainerItemsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.GetContainerItemsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetContainerItemsRequest::IsInitialized() const {
  return true;
}

void GetContainerItemsRequest::InternalSwap(GetContainerItemsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(container_id_, other->container_id_);
  swap(limit_, other->limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetContainerItemsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetContainerItemsResponse::InitAsDefaultInstance() {
}
class GetContainerItemsResponse::_Internal {
 public:
};

void GetContainerItemsResponse::clear_items() {
  items_.Clear();
}
GetContainerItemsResponse::GetContainerItemsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.GetContainerItemsResponse)
}
GetContainerItemsResponse::GetContainerItemsResponse(const GetContainerItemsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.GetContainerItemsResponse)
}

void GetContainerItemsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetContainerItemsResponse_items_2fitems_2eproto.base);
}

GetContainerItemsResponse::~GetContainerItemsResponse() {
  // @@protoc_insertion_point(destructor:mruv.GetContainerItemsResponse)
  SharedDtor();
}

void GetContainerItemsResponse::SharedDtor() {
}

void GetContainerItemsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetContainerItemsResponse& GetContainerItemsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetContainerItemsResponse_items_2fitems_2eproto.base);
  return *internal_default_instance();
}


void GetContainerItemsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.GetContainerItemsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear();
}

const char* GetContainerItemsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mruv.InsideItem items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetContainerItemsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.GetContainerItemsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mruv.InsideItem items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.GetContainerItemsResponse)
  return target;
}

size_t GetContainerItemsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.GetContainerItemsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mruv.InsideItem items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetContainerItemsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.GetContainerItemsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetContainerItemsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetContainerItemsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.GetContainerItemsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.GetContainerItemsResponse)
    MergeFrom(*source);
  }
}

void GetContainerItemsResponse::MergeFrom(const GetContainerItemsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.GetContainerItemsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
}

void GetContainerItemsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.GetContainerItemsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetContainerItemsResponse::CopyFrom(const GetContainerItemsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.GetContainerItemsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetContainerItemsResponse::IsInitialized() const {
  return true;
}

void GetContainerItemsResponse::InternalSwap(GetContainerItemsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetContainerItemsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PullItemRequest::InitAsDefaultInstance() {
}
class PullItemRequest::_Internal {
 public:
};

PullItemRequest::PullItemRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.PullItemRequest)
}
PullItemRequest::PullItemRequest(const PullItemRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&container_id_, &from.container_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_id_) -
    reinterpret_cast<char*>(&container_id_)) + sizeof(item_id_));
  // @@protoc_insertion_point(copy_constructor:mruv.PullItemRequest)
}

void PullItemRequest::SharedCtor() {
  ::memset(&container_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&item_id_) -
      reinterpret_cast<char*>(&container_id_)) + sizeof(item_id_));
}

PullItemRequest::~PullItemRequest() {
  // @@protoc_insertion_point(destructor:mruv.PullItemRequest)
  SharedDtor();
}

void PullItemRequest::SharedDtor() {
}

void PullItemRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PullItemRequest& PullItemRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PullItemRequest_items_2fitems_2eproto.base);
  return *internal_default_instance();
}


void PullItemRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.PullItemRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&container_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&item_id_) -
      reinterpret_cast<char*>(&container_id_)) + sizeof(item_id_));
  _internal_metadata_.Clear();
}

const char* PullItemRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 container_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          container_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PullItemRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.PullItemRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 container_id = 1;
  if (this->container_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_container_id(), target);
  }

  // uint32 item_id = 2;
  if (this->item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.PullItemRequest)
  return target;
}

size_t PullItemRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.PullItemRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 container_id = 1;
  if (this->container_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_container_id());
  }

  // uint32 item_id = 2;
  if (this->item_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_item_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PullItemRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.PullItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PullItemRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PullItemRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.PullItemRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.PullItemRequest)
    MergeFrom(*source);
  }
}

void PullItemRequest::MergeFrom(const PullItemRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.PullItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.container_id() != 0) {
    _internal_set_container_id(from._internal_container_id());
  }
  if (from.item_id() != 0) {
    _internal_set_item_id(from._internal_item_id());
  }
}

void PullItemRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.PullItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PullItemRequest::CopyFrom(const PullItemRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.PullItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PullItemRequest::IsInitialized() const {
  return true;
}

void PullItemRequest::InternalSwap(PullItemRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(container_id_, other->container_id_);
  swap(item_id_, other->item_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PullItemRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SortItemsRequest::InitAsDefaultInstance() {
}
class SortItemsRequest::_Internal {
 public:
};

SortItemsRequest::SortItemsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.SortItemsRequest)
}
SortItemsRequest::SortItemsRequest(const SortItemsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&container_id_, &from.container_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sort_by_) -
    reinterpret_cast<char*>(&container_id_)) + sizeof(sort_by_));
  // @@protoc_insertion_point(copy_constructor:mruv.SortItemsRequest)
}

void SortItemsRequest::SharedCtor() {
  ::memset(&container_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sort_by_) -
      reinterpret_cast<char*>(&container_id_)) + sizeof(sort_by_));
}

SortItemsRequest::~SortItemsRequest() {
  // @@protoc_insertion_point(destructor:mruv.SortItemsRequest)
  SharedDtor();
}

void SortItemsRequest::SharedDtor() {
}

void SortItemsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SortItemsRequest& SortItemsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SortItemsRequest_items_2fitems_2eproto.base);
  return *internal_default_instance();
}


void SortItemsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.SortItemsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&container_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sort_by_) -
      reinterpret_cast<char*>(&container_id_)) + sizeof(sort_by_));
  _internal_metadata_.Clear();
}

const char* SortItemsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 container_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          container_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mruv.SortingMode sort_by = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_sort_by(static_cast<::mruv::SortingMode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SortItemsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.SortItemsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 container_id = 1;
  if (this->container_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_container_id(), target);
  }

  // .mruv.SortingMode sort_by = 2;
  if (this->sort_by() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_sort_by(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.SortItemsRequest)
  return target;
}

size_t SortItemsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.SortItemsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 container_id = 1;
  if (this->container_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_container_id());
  }

  // .mruv.SortingMode sort_by = 2;
  if (this->sort_by() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sort_by());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SortItemsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.SortItemsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SortItemsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SortItemsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.SortItemsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.SortItemsRequest)
    MergeFrom(*source);
  }
}

void SortItemsRequest::MergeFrom(const SortItemsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.SortItemsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.container_id() != 0) {
    _internal_set_container_id(from._internal_container_id());
  }
  if (from.sort_by() != 0) {
    _internal_set_sort_by(from._internal_sort_by());
  }
}

void SortItemsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.SortItemsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SortItemsRequest::CopyFrom(const SortItemsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.SortItemsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SortItemsRequest::IsInitialized() const {
  return true;
}

void SortItemsRequest::InternalSwap(SortItemsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(container_id_, other->container_id_);
  swap(sort_by_, other->sort_by_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SortItemsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SortItemsResponse::InitAsDefaultInstance() {
  ::mruv::_SortItemsResponse_default_instance_._instance.get_mutable()->container_ = const_cast< ::mruv::Container*>(
      ::mruv::Container::internal_default_instance());
}
class SortItemsResponse::_Internal {
 public:
  static const ::mruv::Container& container(const SortItemsResponse* msg);
};

const ::mruv::Container&
SortItemsResponse::_Internal::container(const SortItemsResponse* msg) {
  return *msg->container_;
}
void SortItemsResponse::clear_container() {
  if (GetArenaNoVirtual() == nullptr && container_ != nullptr) {
    delete container_;
  }
  container_ = nullptr;
}
SortItemsResponse::SortItemsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.SortItemsResponse)
}
SortItemsResponse::SortItemsResponse(const SortItemsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_container()) {
    container_ = new ::mruv::Container(*from.container_);
  } else {
    container_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mruv.SortItemsResponse)
}

void SortItemsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SortItemsResponse_items_2fitems_2eproto.base);
  container_ = nullptr;
}

SortItemsResponse::~SortItemsResponse() {
  // @@protoc_insertion_point(destructor:mruv.SortItemsResponse)
  SharedDtor();
}

void SortItemsResponse::SharedDtor() {
  if (this != internal_default_instance()) delete container_;
}

void SortItemsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SortItemsResponse& SortItemsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SortItemsResponse_items_2fitems_2eproto.base);
  return *internal_default_instance();
}


void SortItemsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.SortItemsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && container_ != nullptr) {
    delete container_;
  }
  container_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SortItemsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mruv.Container container = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_container(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SortItemsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.SortItemsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mruv.Container container = 1;
  if (this->has_container()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::container(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.SortItemsResponse)
  return target;
}

size_t SortItemsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.SortItemsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mruv.Container container = 1;
  if (this->has_container()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *container_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SortItemsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.SortItemsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SortItemsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SortItemsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.SortItemsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.SortItemsResponse)
    MergeFrom(*source);
  }
}

void SortItemsResponse::MergeFrom(const SortItemsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.SortItemsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_container()) {
    _internal_mutable_container()->::mruv::Container::MergeFrom(from._internal_container());
  }
}

void SortItemsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.SortItemsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SortItemsResponse::CopyFrom(const SortItemsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.SortItemsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SortItemsResponse::IsInitialized() const {
  return true;
}

void SortItemsResponse::InternalSwap(SortItemsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(container_, other->container_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SortItemsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetNearestItemsRequest::InitAsDefaultInstance() {
  ::mruv::_GetNearestItemsRequest_default_instance_._instance.get_mutable()->position_ = const_cast< ::mruv::Position*>(
      ::mruv::Position::internal_default_instance());
}
class GetNearestItemsRequest::_Internal {
 public:
  static const ::mruv::Position& position(const GetNearestItemsRequest* msg);
};

const ::mruv::Position&
GetNearestItemsRequest::_Internal::position(const GetNearestItemsRequest* msg) {
  return *msg->position_;
}
void GetNearestItemsRequest::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
GetNearestItemsRequest::GetNearestItemsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.GetNearestItemsRequest)
}
GetNearestItemsRequest::GetNearestItemsRequest(const GetNearestItemsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::mruv::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  ::memcpy(&distance_limit_, &from.distance_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&container_id_) -
    reinterpret_cast<char*>(&distance_limit_)) + sizeof(container_id_));
  // @@protoc_insertion_point(copy_constructor:mruv.GetNearestItemsRequest)
}

void GetNearestItemsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetNearestItemsRequest_items_2fitems_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&container_id_) -
      reinterpret_cast<char*>(&position_)) + sizeof(container_id_));
}

GetNearestItemsRequest::~GetNearestItemsRequest() {
  // @@protoc_insertion_point(destructor:mruv.GetNearestItemsRequest)
  SharedDtor();
}

void GetNearestItemsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void GetNearestItemsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNearestItemsRequest& GetNearestItemsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetNearestItemsRequest_items_2fitems_2eproto.base);
  return *internal_default_instance();
}


void GetNearestItemsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.GetNearestItemsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  ::memset(&distance_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&container_id_) -
      reinterpret_cast<char*>(&distance_limit_)) + sizeof(container_id_));
  _internal_metadata_.Clear();
}

const char* GetNearestItemsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mruv.Position position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 container_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          container_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double distance_limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          distance_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetNearestItemsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.GetNearestItemsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mruv.Position position = 1;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // uint32 container_id = 2;
  if (this->container_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_container_id(), target);
  }

  // double distance_limit = 3;
  if (!(this->distance_limit() <= 0 && this->distance_limit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_distance_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.GetNearestItemsRequest)
  return target;
}

size_t GetNearestItemsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.GetNearestItemsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mruv.Position position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // double distance_limit = 3;
  if (!(this->distance_limit() <= 0 && this->distance_limit() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 container_id = 2;
  if (this->container_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_container_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNearestItemsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.GetNearestItemsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNearestItemsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetNearestItemsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.GetNearestItemsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.GetNearestItemsRequest)
    MergeFrom(*source);
  }
}

void GetNearestItemsRequest::MergeFrom(const GetNearestItemsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.GetNearestItemsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::mruv::Position::MergeFrom(from._internal_position());
  }
  if (!(from.distance_limit() <= 0 && from.distance_limit() >= 0)) {
    _internal_set_distance_limit(from._internal_distance_limit());
  }
  if (from.container_id() != 0) {
    _internal_set_container_id(from._internal_container_id());
  }
}

void GetNearestItemsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.GetNearestItemsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNearestItemsRequest::CopyFrom(const GetNearestItemsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.GetNearestItemsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNearestItemsRequest::IsInitialized() const {
  return true;
}

void GetNearestItemsRequest::InternalSwap(GetNearestItemsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
  swap(distance_limit_, other->distance_limit_);
  swap(container_id_, other->container_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNearestItemsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetNearestItemsResponse::InitAsDefaultInstance() {
}
class GetNearestItemsResponse::_Internal {
 public:
};

void GetNearestItemsResponse::clear_item() {
  item_.Clear();
}
GetNearestItemsResponse::GetNearestItemsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.GetNearestItemsResponse)
}
GetNearestItemsResponse::GetNearestItemsResponse(const GetNearestItemsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      item_(from.item_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.GetNearestItemsResponse)
}

void GetNearestItemsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetNearestItemsResponse_items_2fitems_2eproto.base);
}

GetNearestItemsResponse::~GetNearestItemsResponse() {
  // @@protoc_insertion_point(destructor:mruv.GetNearestItemsResponse)
  SharedDtor();
}

void GetNearestItemsResponse::SharedDtor() {
}

void GetNearestItemsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNearestItemsResponse& GetNearestItemsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetNearestItemsResponse_items_2fitems_2eproto.base);
  return *internal_default_instance();
}


void GetNearestItemsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.GetNearestItemsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

const char* GetNearestItemsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mruv.InsideItem item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetNearestItemsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.GetNearestItemsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mruv.InsideItem item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_item_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_item(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.GetNearestItemsResponse)
  return target;
}

size_t GetNearestItemsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.GetNearestItemsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mruv.InsideItem item = 1;
  total_size += 1UL * this->_internal_item_size();
  for (const auto& msg : this->item_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNearestItemsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.GetNearestItemsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNearestItemsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetNearestItemsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.GetNearestItemsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.GetNearestItemsResponse)
    MergeFrom(*source);
  }
}

void GetNearestItemsResponse::MergeFrom(const GetNearestItemsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.GetNearestItemsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void GetNearestItemsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.GetNearestItemsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNearestItemsResponse::CopyFrom(const GetNearestItemsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.GetNearestItemsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNearestItemsResponse::IsInitialized() const {
  return true;
}

void GetNearestItemsResponse::InternalSwap(GetNearestItemsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  item_.InternalSwap(&other->item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNearestItemsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UseItemRequest::InitAsDefaultInstance() {
}
class UseItemRequest::_Internal {
 public:
};

UseItemRequest::UseItemRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.UseItemRequest)
}
UseItemRequest::UseItemRequest(const UseItemRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  item_id_ = from.item_id_;
  // @@protoc_insertion_point(copy_constructor:mruv.UseItemRequest)
}

void UseItemRequest::SharedCtor() {
  item_id_ = 0u;
}

UseItemRequest::~UseItemRequest() {
  // @@protoc_insertion_point(destructor:mruv.UseItemRequest)
  SharedDtor();
}

void UseItemRequest::SharedDtor() {
}

void UseItemRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UseItemRequest& UseItemRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UseItemRequest_items_2fitems_2eproto.base);
  return *internal_default_instance();
}


void UseItemRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.UseItemRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_id_ = 0u;
  _internal_metadata_.Clear();
}

const char* UseItemRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UseItemRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.UseItemRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 item_id = 1;
  if (this->item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.UseItemRequest)
  return target;
}

size_t UseItemRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.UseItemRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 item_id = 1;
  if (this->item_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_item_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UseItemRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.UseItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UseItemRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UseItemRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.UseItemRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.UseItemRequest)
    MergeFrom(*source);
  }
}

void UseItemRequest::MergeFrom(const UseItemRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.UseItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.item_id() != 0) {
    _internal_set_item_id(from._internal_item_id());
  }
}

void UseItemRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.UseItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseItemRequest::CopyFrom(const UseItemRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.UseItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseItemRequest::IsInitialized() const {
  return true;
}

void UseItemRequest::InternalSwap(UseItemRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(item_id_, other->item_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UseItemRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UseItemResponse::InitAsDefaultInstance() {
}
class UseItemResponse::_Internal {
 public:
};

UseItemResponse::UseItemResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.UseItemResponse)
}
UseItemResponse::UseItemResponse(const UseItemResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:mruv.UseItemResponse)
}

void UseItemResponse::SharedCtor() {
  success_ = false;
}

UseItemResponse::~UseItemResponse() {
  // @@protoc_insertion_point(destructor:mruv.UseItemResponse)
  SharedDtor();
}

void UseItemResponse::SharedDtor() {
}

void UseItemResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UseItemResponse& UseItemResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UseItemResponse_items_2fitems_2eproto.base);
  return *internal_default_instance();
}


void UseItemResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.UseItemResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear();
}

const char* UseItemResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UseItemResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.UseItemResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.UseItemResponse)
  return target;
}

size_t UseItemResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.UseItemResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UseItemResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.UseItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UseItemResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UseItemResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.UseItemResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.UseItemResponse)
    MergeFrom(*source);
  }
}

void UseItemResponse::MergeFrom(const UseItemResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.UseItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void UseItemResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.UseItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseItemResponse::CopyFrom(const UseItemResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.UseItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseItemResponse::IsInitialized() const {
  return true;
}

void UseItemResponse::InternalSwap(UseItemResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UseItemResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mruv
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mruv::GetItemsRequest* Arena::CreateMaybeMessage< ::mruv::GetItemsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::GetItemsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::GetItemsResponse* Arena::CreateMaybeMessage< ::mruv::GetItemsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::GetItemsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::GetItemTypesRequest* Arena::CreateMaybeMessage< ::mruv::GetItemTypesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::GetItemTypesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::GetItemTypesResponse* Arena::CreateMaybeMessage< ::mruv::GetItemTypesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::GetItemTypesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::GetContainersRequest* Arena::CreateMaybeMessage< ::mruv::GetContainersRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::GetContainersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::GetContainersResponse* Arena::CreateMaybeMessage< ::mruv::GetContainersResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::GetContainersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::GetContainerTypesRequest* Arena::CreateMaybeMessage< ::mruv::GetContainerTypesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::GetContainerTypesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::GetContainerTypesResponse* Arena::CreateMaybeMessage< ::mruv::GetContainerTypesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::GetContainerTypesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::PutItemRequest* Arena::CreateMaybeMessage< ::mruv::PutItemRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::PutItemRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::PutItemResponse* Arena::CreateMaybeMessage< ::mruv::PutItemResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::PutItemResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::GetContainerItemsRequest* Arena::CreateMaybeMessage< ::mruv::GetContainerItemsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::GetContainerItemsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::GetContainerItemsResponse* Arena::CreateMaybeMessage< ::mruv::GetContainerItemsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::GetContainerItemsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::PullItemRequest* Arena::CreateMaybeMessage< ::mruv::PullItemRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::PullItemRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::SortItemsRequest* Arena::CreateMaybeMessage< ::mruv::SortItemsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::SortItemsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::SortItemsResponse* Arena::CreateMaybeMessage< ::mruv::SortItemsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::SortItemsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::GetNearestItemsRequest* Arena::CreateMaybeMessage< ::mruv::GetNearestItemsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::GetNearestItemsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::GetNearestItemsResponse* Arena::CreateMaybeMessage< ::mruv::GetNearestItemsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::GetNearestItemsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::UseItemRequest* Arena::CreateMaybeMessage< ::mruv::UseItemRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::UseItemRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::UseItemResponse* Arena::CreateMaybeMessage< ::mruv::UseItemResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::UseItemResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
