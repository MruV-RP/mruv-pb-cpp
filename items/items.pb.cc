// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: items/items.proto

#include "items/items.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_2fspatial_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position_common_2fspatial_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_items_2fitems_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Container_items_2fitems_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_items_2fitems_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerType_items_2fitems_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_items_2fitems_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InsideItem_items_2fitems_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_items_2fitems_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Item_items_2fitems_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_items_2fitems_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ItemType_items_2fitems_5fmodel_2eproto;
namespace mruv {
namespace items {
class GetItemsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetItemsRequest> _instance;
} _GetItemsRequest_default_instance_;
class GetItemsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetItemsResponse> _instance;
} _GetItemsResponse_default_instance_;
class GetItemTypesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetItemTypesRequest> _instance;
} _GetItemTypesRequest_default_instance_;
class GetItemTypesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetItemTypesResponse> _instance;
} _GetItemTypesResponse_default_instance_;
class GetContainersRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetContainersRequest> _instance;
} _GetContainersRequest_default_instance_;
class GetContainersResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetContainersResponse> _instance;
} _GetContainersResponse_default_instance_;
class GetContainerTypesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetContainerTypesRequest> _instance;
} _GetContainerTypesRequest_default_instance_;
class GetContainerTypesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetContainerTypesResponse> _instance;
} _GetContainerTypesResponse_default_instance_;
class PutItemRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PutItemRequest> _instance;
  ::PROTOBUF_NAMESPACE_ID::int32 slot_;
} _PutItemRequest_default_instance_;
class PutItemResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PutItemResponse> _instance;
} _PutItemResponse_default_instance_;
class GetContainerItemsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetContainerItemsRequest> _instance;
} _GetContainerItemsRequest_default_instance_;
class GetContainerItemsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetContainerItemsResponse> _instance;
} _GetContainerItemsResponse_default_instance_;
class PullItemRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PullItemRequest> _instance;
} _PullItemRequest_default_instance_;
class SortItemsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SortItemsRequest> _instance;
} _SortItemsRequest_default_instance_;
class SortItemsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SortItemsResponse> _instance;
} _SortItemsResponse_default_instance_;
class GetNearestItemsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetNearestItemsRequest> _instance;
} _GetNearestItemsRequest_default_instance_;
class GetNearestItemsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetNearestItemsResponse> _instance;
} _GetNearestItemsResponse_default_instance_;
class UseItemRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UseItemRequest> _instance;
} _UseItemRequest_default_instance_;
class UseItemResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UseItemResponse> _instance;
} _UseItemResponse_default_instance_;
}  // namespace items
}  // namespace mruv
static void InitDefaultsscc_info_GetContainerItemsRequest_items_2fitems_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::items::_GetContainerItemsRequest_default_instance_;
    new (ptr) ::mruv::items::GetContainerItemsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::items::GetContainerItemsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetContainerItemsRequest_items_2fitems_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetContainerItemsRequest_items_2fitems_2eproto}, {}};

static void InitDefaultsscc_info_GetContainerItemsResponse_items_2fitems_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::items::_GetContainerItemsResponse_default_instance_;
    new (ptr) ::mruv::items::GetContainerItemsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::items::GetContainerItemsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetContainerItemsResponse_items_2fitems_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetContainerItemsResponse_items_2fitems_2eproto}, {
      &scc_info_InsideItem_items_2fitems_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_GetContainerTypesRequest_items_2fitems_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::items::_GetContainerTypesRequest_default_instance_;
    new (ptr) ::mruv::items::GetContainerTypesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::items::GetContainerTypesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetContainerTypesRequest_items_2fitems_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetContainerTypesRequest_items_2fitems_2eproto}, {}};

static void InitDefaultsscc_info_GetContainerTypesResponse_items_2fitems_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::items::_GetContainerTypesResponse_default_instance_;
    new (ptr) ::mruv::items::GetContainerTypesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::items::GetContainerTypesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetContainerTypesResponse_items_2fitems_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetContainerTypesResponse_items_2fitems_2eproto}, {
      &scc_info_ContainerType_items_2fitems_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_GetContainersRequest_items_2fitems_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::items::_GetContainersRequest_default_instance_;
    new (ptr) ::mruv::items::GetContainersRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::items::GetContainersRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetContainersRequest_items_2fitems_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetContainersRequest_items_2fitems_2eproto}, {}};

static void InitDefaultsscc_info_GetContainersResponse_items_2fitems_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::items::_GetContainersResponse_default_instance_;
    new (ptr) ::mruv::items::GetContainersResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::items::GetContainersResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetContainersResponse_items_2fitems_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetContainersResponse_items_2fitems_2eproto}, {
      &scc_info_Container_items_2fitems_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_GetItemTypesRequest_items_2fitems_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::items::_GetItemTypesRequest_default_instance_;
    new (ptr) ::mruv::items::GetItemTypesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::items::GetItemTypesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetItemTypesRequest_items_2fitems_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetItemTypesRequest_items_2fitems_2eproto}, {}};

static void InitDefaultsscc_info_GetItemTypesResponse_items_2fitems_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::items::_GetItemTypesResponse_default_instance_;
    new (ptr) ::mruv::items::GetItemTypesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::items::GetItemTypesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetItemTypesResponse_items_2fitems_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetItemTypesResponse_items_2fitems_2eproto}, {
      &scc_info_ItemType_items_2fitems_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_GetItemsRequest_items_2fitems_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::items::_GetItemsRequest_default_instance_;
    new (ptr) ::mruv::items::GetItemsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::items::GetItemsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetItemsRequest_items_2fitems_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetItemsRequest_items_2fitems_2eproto}, {}};

static void InitDefaultsscc_info_GetItemsResponse_items_2fitems_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::items::_GetItemsResponse_default_instance_;
    new (ptr) ::mruv::items::GetItemsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::items::GetItemsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetItemsResponse_items_2fitems_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetItemsResponse_items_2fitems_2eproto}, {
      &scc_info_Item_items_2fitems_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_GetNearestItemsRequest_items_2fitems_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::items::_GetNearestItemsRequest_default_instance_;
    new (ptr) ::mruv::items::GetNearestItemsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::items::GetNearestItemsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetNearestItemsRequest_items_2fitems_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetNearestItemsRequest_items_2fitems_2eproto}, {
      &scc_info_Position_common_2fspatial_2eproto.base,}};

static void InitDefaultsscc_info_GetNearestItemsResponse_items_2fitems_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::items::_GetNearestItemsResponse_default_instance_;
    new (ptr) ::mruv::items::GetNearestItemsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::items::GetNearestItemsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetNearestItemsResponse_items_2fitems_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetNearestItemsResponse_items_2fitems_2eproto}, {
      &scc_info_InsideItem_items_2fitems_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_PullItemRequest_items_2fitems_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::items::_PullItemRequest_default_instance_;
    new (ptr) ::mruv::items::PullItemRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::items::PullItemRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PullItemRequest_items_2fitems_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PullItemRequest_items_2fitems_2eproto}, {}};

static void InitDefaultsscc_info_PutItemRequest_items_2fitems_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::items::_PutItemRequest_default_instance_;
    new (ptr) ::mruv::items::PutItemRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::items::PutItemRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PutItemRequest_items_2fitems_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PutItemRequest_items_2fitems_2eproto}, {}};

static void InitDefaultsscc_info_PutItemResponse_items_2fitems_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::items::_PutItemResponse_default_instance_;
    new (ptr) ::mruv::items::PutItemResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::items::PutItemResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PutItemResponse_items_2fitems_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PutItemResponse_items_2fitems_2eproto}, {
      &scc_info_InsideItem_items_2fitems_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_SortItemsRequest_items_2fitems_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::items::_SortItemsRequest_default_instance_;
    new (ptr) ::mruv::items::SortItemsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::items::SortItemsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SortItemsRequest_items_2fitems_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SortItemsRequest_items_2fitems_2eproto}, {}};

static void InitDefaultsscc_info_SortItemsResponse_items_2fitems_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::items::_SortItemsResponse_default_instance_;
    new (ptr) ::mruv::items::SortItemsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::items::SortItemsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SortItemsResponse_items_2fitems_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SortItemsResponse_items_2fitems_2eproto}, {
      &scc_info_Container_items_2fitems_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_UseItemRequest_items_2fitems_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::items::_UseItemRequest_default_instance_;
    new (ptr) ::mruv::items::UseItemRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::items::UseItemRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UseItemRequest_items_2fitems_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UseItemRequest_items_2fitems_2eproto}, {}};

static void InitDefaultsscc_info_UseItemResponse_items_2fitems_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::items::_UseItemResponse_default_instance_;
    new (ptr) ::mruv::items::UseItemResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::items::UseItemResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UseItemResponse_items_2fitems_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UseItemResponse_items_2fitems_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_items_2fitems_2eproto[19];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_items_2fitems_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_items_2fitems_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_items_2fitems_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::items::GetItemsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::items::GetItemsRequest, limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::items::GetItemsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::items::GetItemsResponse, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::items::GetItemTypesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::items::GetItemTypesRequest, limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::items::GetItemTypesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::items::GetItemTypesResponse, item_types_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::items::GetContainersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::items::GetContainersRequest, limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::items::GetContainersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::items::GetContainersResponse, containers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::items::GetContainerTypesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::items::GetContainerTypesRequest, limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::items::GetContainerTypesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::items::GetContainerTypesResponse, container_types_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::items::PutItemRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::mruv::items::PutItemRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::items::PutItemRequest, container_id_),
  PROTOBUF_FIELD_OFFSET(::mruv::items::PutItemRequest, item_id_),
  offsetof(::mruv::items::PutItemRequestDefaultTypeInternal, slot_),
  PROTOBUF_FIELD_OFFSET(::mruv::items::PutItemRequest, where_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::items::PutItemResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::items::PutItemResponse, inside_item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::items::GetContainerItemsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::items::GetContainerItemsRequest, container_id_),
  PROTOBUF_FIELD_OFFSET(::mruv::items::GetContainerItemsRequest, limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::items::GetContainerItemsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::items::GetContainerItemsResponse, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::items::PullItemRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::items::PullItemRequest, container_id_),
  PROTOBUF_FIELD_OFFSET(::mruv::items::PullItemRequest, item_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::items::SortItemsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::items::SortItemsRequest, container_id_),
  PROTOBUF_FIELD_OFFSET(::mruv::items::SortItemsRequest, sort_by_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::items::SortItemsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::items::SortItemsResponse, container_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::items::GetNearestItemsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::items::GetNearestItemsRequest, position_),
  PROTOBUF_FIELD_OFFSET(::mruv::items::GetNearestItemsRequest, container_id_),
  PROTOBUF_FIELD_OFFSET(::mruv::items::GetNearestItemsRequest, distance_limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::items::GetNearestItemsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::items::GetNearestItemsResponse, item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::items::UseItemRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::items::UseItemRequest, item_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::items::UseItemResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::items::UseItemResponse, success_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mruv::items::GetItemsRequest)},
  { 6, -1, sizeof(::mruv::items::GetItemsResponse)},
  { 12, -1, sizeof(::mruv::items::GetItemTypesRequest)},
  { 18, -1, sizeof(::mruv::items::GetItemTypesResponse)},
  { 24, -1, sizeof(::mruv::items::GetContainersRequest)},
  { 30, -1, sizeof(::mruv::items::GetContainersResponse)},
  { 36, -1, sizeof(::mruv::items::GetContainerTypesRequest)},
  { 42, -1, sizeof(::mruv::items::GetContainerTypesResponse)},
  { 48, -1, sizeof(::mruv::items::PutItemRequest)},
  { 57, -1, sizeof(::mruv::items::PutItemResponse)},
  { 63, -1, sizeof(::mruv::items::GetContainerItemsRequest)},
  { 70, -1, sizeof(::mruv::items::GetContainerItemsResponse)},
  { 76, -1, sizeof(::mruv::items::PullItemRequest)},
  { 83, -1, sizeof(::mruv::items::SortItemsRequest)},
  { 90, -1, sizeof(::mruv::items::SortItemsResponse)},
  { 96, -1, sizeof(::mruv::items::GetNearestItemsRequest)},
  { 104, -1, sizeof(::mruv::items::GetNearestItemsResponse)},
  { 110, -1, sizeof(::mruv::items::UseItemRequest)},
  { 116, -1, sizeof(::mruv::items::UseItemResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::items::_GetItemsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::items::_GetItemsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::items::_GetItemTypesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::items::_GetItemTypesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::items::_GetContainersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::items::_GetContainersResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::items::_GetContainerTypesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::items::_GetContainerTypesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::items::_PutItemRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::items::_PutItemResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::items::_GetContainerItemsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::items::_GetContainerItemsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::items::_PullItemRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::items::_SortItemsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::items::_SortItemsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::items::_GetNearestItemsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::items::_GetNearestItemsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::items::_UseItemRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::items::_UseItemResponse_default_instance_),
};

const char descriptor_table_protodef_items_2fitems_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021items/items.proto\022\nmruv.items\032\034google/"
  "api/annotations.proto\032\023common/health.pro"
  "to\032\027items/items_model.proto\032\024common/spat"
  "ial.proto\" \n\017GetItemsRequest\022\r\n\005limit\030\001 "
  "\001(\r\"3\n\020GetItemsResponse\022\037\n\005items\030\001 \003(\0132\020"
  ".mruv.items.Item\"$\n\023GetItemTypesRequest\022"
  "\r\n\005limit\030\001 \001(\r\"@\n\024GetItemTypesResponse\022("
  "\n\nitem_types\030\001 \003(\0132\024.mruv.items.ItemType"
  "\"%\n\024GetContainersRequest\022\r\n\005limit\030\001 \001(\r\""
  "B\n\025GetContainersResponse\022)\n\ncontainers\030\001"
  " \003(\0132\025.mruv.items.Container\")\n\030GetContai"
  "nerTypesRequest\022\r\n\005limit\030\001 \001(\r\"O\n\031GetCon"
  "tainerTypesResponse\0222\n\017container_types\030\001"
  " \003(\0132\031.mruv.items.ContainerType\"P\n\016PutIt"
  "emRequest\022\024\n\014container_id\030\001 \001(\r\022\017\n\007item_"
  "id\030\002 \001(\r\022\016\n\004slot\030\003 \001(\005H\000B\007\n\005where\">\n\017Put"
  "ItemResponse\022+\n\013inside_item\030\001 \001(\0132\026.mruv"
  ".items.InsideItem\"\?\n\030GetContainerItemsRe"
  "quest\022\024\n\014container_id\030\001 \001(\r\022\r\n\005limit\030\002 \001"
  "(\r\"B\n\031GetContainerItemsResponse\022%\n\005items"
  "\030\001 \003(\0132\026.mruv.items.InsideItem\"8\n\017PullIt"
  "emRequest\022\024\n\014container_id\030\001 \001(\r\022\017\n\007item_"
  "id\030\002 \001(\r\"R\n\020SortItemsRequest\022\024\n\014containe"
  "r_id\030\001 \001(\r\022(\n\007sort_by\030\002 \001(\0162\027.mruv.items"
  ".SortingMode\"=\n\021SortItemsResponse\022(\n\tcon"
  "tainer\030\001 \001(\0132\025.mruv.items.Container\"o\n\026G"
  "etNearestItemsRequest\022\'\n\010position\030\001 \001(\0132"
  "\025.mruv.common.Position\022\024\n\014container_id\030\002"
  " \001(\r\022\026\n\016distance_limit\030\003 \001(\001\"\?\n\027GetNeare"
  "stItemsResponse\022$\n\004item\030\001 \003(\0132\026.mruv.ite"
  "ms.InsideItem\"!\n\016UseItemRequest\022\017\n\007item_"
  "id\030\001 \001(\r\"\"\n\017UseItemResponse\022\017\n\007success\030\001"
  " \001(\0102\250\024\n\017MruVItemService\022H\n\nCreateItem\022\020"
  ".mruv.items.Item\032\022.mruv.items.ItemID\"\024\202\323"
  "\344\223\002\016\"\t/v1/items:\001*\022G\n\007GetItem\022\022.mruv.ite"
  "ms.ItemID\032\020.mruv.items.Item\"\026\202\323\344\223\002\020\022\016/v1"
  "/items/{id}\022L\n\nDeleteItem\022\022.mruv.items.I"
  "temID\032\022.mruv.items.ItemID\"\026\202\323\344\223\002\020*\016/v1/i"
  "tems/{id}\022X\n\010GetItems\022\033.mruv.items.GetIt"
  "emsRequest\032\034.mruv.items.GetItemsResponse"
  "\"\021\202\323\344\223\002\013\022\t/v1/items\022X\n\016CreateItemType\022\024."
  "mruv.items.ItemType\032\026.mruv.items.ItemTyp"
  "eID\"\030\202\323\344\223\002\022\"\r/v1/itemTypes:\001*\022W\n\013GetItem"
  "Type\022\026.mruv.items.ItemTypeID\032\024.mruv.item"
  "s.ItemType\"\032\202\323\344\223\002\024\022\022/v1/itemTypes/{id}\022\\"
  "\n\016DeleteItemType\022\026.mruv.items.ItemTypeID"
  "\032\026.mruv.items.ItemTypeID\"\032\202\323\344\223\002\024*\022/v1/it"
  "emTypes/{id}\022h\n\014GetItemTypes\022\037.mruv.item"
  "s.GetItemTypesRequest\032 .mruv.items.GetIt"
  "emTypesResponse\"\025\202\323\344\223\002\017\022\r/v1/itemTypes\022\\"
  "\n\017CreateContainer\022\025.mruv.items.Container"
  "\032\027.mruv.items.ContainerID\"\031\202\323\344\223\002\023\"\016/v1/c"
  "ontainers:\001*\022[\n\014GetContainer\022\027.mruv.item"
  "s.ContainerID\032\025.mruv.items.Container\"\033\202\323"
  "\344\223\002\025\022\023/v1/containers/{id}\022`\n\017DeleteConta"
  "iner\022\027.mruv.items.ContainerID\032\027.mruv.ite"
  "ms.ContainerID\"\033\202\323\344\223\002\025*\023/v1/containers/{"
  "id}\022l\n\rGetContainers\022 .mruv.items.GetCon"
  "tainersRequest\032!.mruv.items.GetContainer"
  "sResponse\"\026\202\323\344\223\002\020\022\016/v1/containers\022l\n\023Cre"
  "ateContainerType\022\031.mruv.items.ContainerT"
  "ype\032\033.mruv.items.ContainerTypeID\"\035\202\323\344\223\002\027"
  "\"\022/v1/containerTypes:\001*\022k\n\020GetContainerT"
  "ype\022\033.mruv.items.ContainerTypeID\032\031.mruv."
  "items.ContainerType\"\037\202\323\344\223\002\031\022\027/v1/contain"
  "erTypes/{id}\022p\n\023DeleteContainerType\022\033.mr"
  "uv.items.ContainerTypeID\032\033.mruv.items.Co"
  "ntainerTypeID\"\037\202\323\344\223\002\031*\027/v1/containerType"
  "s/{id}\022|\n\021GetContainerTypes\022$.mruv.items"
  ".GetContainerTypesRequest\032%.mruv.items.G"
  "etContainerTypesResponse\"\032\202\323\344\223\002\024\022\022/v1/co"
  "ntainerTypes\022\215\001\n\021GetContainerItems\022$.mru"
  "v.items.GetContainerItemsRequest\032%.mruv."
  "items.GetContainerItemsResponse\"+\202\323\344\223\002%\022"
  "#/v1/containers/{container_id}/items\022p\n\010"
  "PullItem\022\033.mruv.items.PullItemRequest\032\020."
  "mruv.items.Item\"5\202\323\344\223\002/*-/v1/containers/"
  "{container_id}/items/{item_id}\022|\n\007PutIte"
  "m\022\032.mruv.items.PutItemRequest\032\033.mruv.ite"
  "ms.PutItemResponse\"8\202\323\344\223\0022\032-/v1/containe"
  "rs/{container_id}/items/{item_id}:\001*\022\204\001\n"
  "\tSortItems\022\034.mruv.items.SortItemsRequest"
  "\032\035.mruv.items.SortItemsResponse\":\202\323\344\223\0024\022"
  "2/v1/containers/{container_id}/items/sor"
  "t/{sort_by}\022\274\001\n\017GetNearestItems\022\".mruv.i"
  "tems.GetNearestItemsRequest\032#.mruv.items"
  ".GetNearestItemsResponse\"`\202\323\344\223\002Z\022X/v1/co"
  "ntainers/{container_id}/items/nearest/x/"
  "{position.x}/y/{position.y}/z/{position."
  "z}\022c\n\007UseItem\022\032.mruv.items.UseItemReques"
  "t\032\033.mruv.items.UseItemResponse\"\037\202\323\344\223\002\031\022\027"
  "/v1/items/{item_id}/use\022s\n\020GetServiceSta"
  "tus\022!.mruv.common.ServiceStatusRequest\032\""
  ".mruv.common.ServiceStatusResponse\"\030\202\323\344\223"
  "\002\022\022\020/v1/items/status\022i\n\021GetServiceVersio"
  "n\022\033.mruv.common.VersionRequest\032\034.mruv.co"
  "mmon.VersionResponse\"\031\202\323\344\223\002\023\022\021/v1/items/"
  "versionB%Z#github.com/MruV-RP/mruv-pb-go"
  "/itemsb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_items_2fitems_2eproto_deps[4] = {
  &::descriptor_table_common_2fhealth_2eproto,
  &::descriptor_table_common_2fspatial_2eproto,
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_items_2fitems_5fmodel_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_items_2fitems_2eproto_sccs[19] = {
  &scc_info_GetContainerItemsRequest_items_2fitems_2eproto.base,
  &scc_info_GetContainerItemsResponse_items_2fitems_2eproto.base,
  &scc_info_GetContainerTypesRequest_items_2fitems_2eproto.base,
  &scc_info_GetContainerTypesResponse_items_2fitems_2eproto.base,
  &scc_info_GetContainersRequest_items_2fitems_2eproto.base,
  &scc_info_GetContainersResponse_items_2fitems_2eproto.base,
  &scc_info_GetItemTypesRequest_items_2fitems_2eproto.base,
  &scc_info_GetItemTypesResponse_items_2fitems_2eproto.base,
  &scc_info_GetItemsRequest_items_2fitems_2eproto.base,
  &scc_info_GetItemsResponse_items_2fitems_2eproto.base,
  &scc_info_GetNearestItemsRequest_items_2fitems_2eproto.base,
  &scc_info_GetNearestItemsResponse_items_2fitems_2eproto.base,
  &scc_info_PullItemRequest_items_2fitems_2eproto.base,
  &scc_info_PutItemRequest_items_2fitems_2eproto.base,
  &scc_info_PutItemResponse_items_2fitems_2eproto.base,
  &scc_info_SortItemsRequest_items_2fitems_2eproto.base,
  &scc_info_SortItemsResponse_items_2fitems_2eproto.base,
  &scc_info_UseItemRequest_items_2fitems_2eproto.base,
  &scc_info_UseItemResponse_items_2fitems_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_items_2fitems_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_items_2fitems_2eproto = {
  false, false, descriptor_table_protodef_items_2fitems_2eproto, "items/items.proto", 3934,
  &descriptor_table_items_2fitems_2eproto_once, descriptor_table_items_2fitems_2eproto_sccs, descriptor_table_items_2fitems_2eproto_deps, 19, 4,
  schemas, file_default_instances, TableStruct_items_2fitems_2eproto::offsets,
  file_level_metadata_items_2fitems_2eproto, 19, file_level_enum_descriptors_items_2fitems_2eproto, file_level_service_descriptors_items_2fitems_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_items_2fitems_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_items_2fitems_2eproto)), true);
namespace mruv {
namespace items {

// ===================================================================

void GetItemsRequest::InitAsDefaultInstance() {
}
class GetItemsRequest::_Internal {
 public:
};

GetItemsRequest::GetItemsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.items.GetItemsRequest)
}
GetItemsRequest::GetItemsRequest(const GetItemsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:mruv.items.GetItemsRequest)
}

void GetItemsRequest::SharedCtor() {
  limit_ = 0u;
}

GetItemsRequest::~GetItemsRequest() {
  // @@protoc_insertion_point(destructor:mruv.items.GetItemsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetItemsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetItemsRequest::ArenaDtor(void* object) {
  GetItemsRequest* _this = reinterpret_cast< GetItemsRequest* >(object);
  (void)_this;
}
void GetItemsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetItemsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetItemsRequest& GetItemsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetItemsRequest_items_2fitems_2eproto.base);
  return *internal_default_instance();
}


void GetItemsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.items.GetItemsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  limit_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetItemsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetItemsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.items.GetItemsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 limit = 1;
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.items.GetItemsRequest)
  return target;
}

size_t GetItemsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.items.GetItemsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 limit = 1;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetItemsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.items.GetItemsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetItemsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetItemsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.items.GetItemsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.items.GetItemsRequest)
    MergeFrom(*source);
  }
}

void GetItemsRequest::MergeFrom(const GetItemsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.items.GetItemsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
}

void GetItemsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.items.GetItemsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetItemsRequest::CopyFrom(const GetItemsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.items.GetItemsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemsRequest::IsInitialized() const {
  return true;
}

void GetItemsRequest::InternalSwap(GetItemsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(limit_, other->limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetItemsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetItemsResponse::InitAsDefaultInstance() {
}
class GetItemsResponse::_Internal {
 public:
};

void GetItemsResponse::clear_items() {
  items_.Clear();
}
GetItemsResponse::GetItemsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.items.GetItemsResponse)
}
GetItemsResponse::GetItemsResponse(const GetItemsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.items.GetItemsResponse)
}

void GetItemsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetItemsResponse_items_2fitems_2eproto.base);
}

GetItemsResponse::~GetItemsResponse() {
  // @@protoc_insertion_point(destructor:mruv.items.GetItemsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetItemsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetItemsResponse::ArenaDtor(void* object) {
  GetItemsResponse* _this = reinterpret_cast< GetItemsResponse* >(object);
  (void)_this;
}
void GetItemsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetItemsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetItemsResponse& GetItemsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetItemsResponse_items_2fitems_2eproto.base);
  return *internal_default_instance();
}


void GetItemsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.items.GetItemsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetItemsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mruv.items.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetItemsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.items.GetItemsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mruv.items.Item items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.items.GetItemsResponse)
  return target;
}

size_t GetItemsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.items.GetItemsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mruv.items.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetItemsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.items.GetItemsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetItemsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetItemsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.items.GetItemsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.items.GetItemsResponse)
    MergeFrom(*source);
  }
}

void GetItemsResponse::MergeFrom(const GetItemsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.items.GetItemsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
}

void GetItemsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.items.GetItemsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetItemsResponse::CopyFrom(const GetItemsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.items.GetItemsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemsResponse::IsInitialized() const {
  return true;
}

void GetItemsResponse::InternalSwap(GetItemsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetItemsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetItemTypesRequest::InitAsDefaultInstance() {
}
class GetItemTypesRequest::_Internal {
 public:
};

GetItemTypesRequest::GetItemTypesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.items.GetItemTypesRequest)
}
GetItemTypesRequest::GetItemTypesRequest(const GetItemTypesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:mruv.items.GetItemTypesRequest)
}

void GetItemTypesRequest::SharedCtor() {
  limit_ = 0u;
}

GetItemTypesRequest::~GetItemTypesRequest() {
  // @@protoc_insertion_point(destructor:mruv.items.GetItemTypesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetItemTypesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetItemTypesRequest::ArenaDtor(void* object) {
  GetItemTypesRequest* _this = reinterpret_cast< GetItemTypesRequest* >(object);
  (void)_this;
}
void GetItemTypesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetItemTypesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetItemTypesRequest& GetItemTypesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetItemTypesRequest_items_2fitems_2eproto.base);
  return *internal_default_instance();
}


void GetItemTypesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.items.GetItemTypesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  limit_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetItemTypesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetItemTypesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.items.GetItemTypesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 limit = 1;
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.items.GetItemTypesRequest)
  return target;
}

size_t GetItemTypesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.items.GetItemTypesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 limit = 1;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetItemTypesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.items.GetItemTypesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetItemTypesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetItemTypesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.items.GetItemTypesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.items.GetItemTypesRequest)
    MergeFrom(*source);
  }
}

void GetItemTypesRequest::MergeFrom(const GetItemTypesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.items.GetItemTypesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
}

void GetItemTypesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.items.GetItemTypesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetItemTypesRequest::CopyFrom(const GetItemTypesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.items.GetItemTypesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemTypesRequest::IsInitialized() const {
  return true;
}

void GetItemTypesRequest::InternalSwap(GetItemTypesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(limit_, other->limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetItemTypesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetItemTypesResponse::InitAsDefaultInstance() {
}
class GetItemTypesResponse::_Internal {
 public:
};

void GetItemTypesResponse::clear_item_types() {
  item_types_.Clear();
}
GetItemTypesResponse::GetItemTypesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  item_types_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.items.GetItemTypesResponse)
}
GetItemTypesResponse::GetItemTypesResponse(const GetItemTypesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      item_types_(from.item_types_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.items.GetItemTypesResponse)
}

void GetItemTypesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetItemTypesResponse_items_2fitems_2eproto.base);
}

GetItemTypesResponse::~GetItemTypesResponse() {
  // @@protoc_insertion_point(destructor:mruv.items.GetItemTypesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetItemTypesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetItemTypesResponse::ArenaDtor(void* object) {
  GetItemTypesResponse* _this = reinterpret_cast< GetItemTypesResponse* >(object);
  (void)_this;
}
void GetItemTypesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetItemTypesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetItemTypesResponse& GetItemTypesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetItemTypesResponse_items_2fitems_2eproto.base);
  return *internal_default_instance();
}


void GetItemTypesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.items.GetItemTypesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_types_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetItemTypesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mruv.items.ItemType item_types = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetItemTypesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.items.GetItemTypesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mruv.items.ItemType item_types = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_item_types_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_item_types(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.items.GetItemTypesResponse)
  return target;
}

size_t GetItemTypesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.items.GetItemTypesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mruv.items.ItemType item_types = 1;
  total_size += 1UL * this->_internal_item_types_size();
  for (const auto& msg : this->item_types_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetItemTypesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.items.GetItemTypesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetItemTypesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetItemTypesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.items.GetItemTypesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.items.GetItemTypesResponse)
    MergeFrom(*source);
  }
}

void GetItemTypesResponse::MergeFrom(const GetItemTypesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.items.GetItemTypesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_types_.MergeFrom(from.item_types_);
}

void GetItemTypesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.items.GetItemTypesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetItemTypesResponse::CopyFrom(const GetItemTypesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.items.GetItemTypesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemTypesResponse::IsInitialized() const {
  return true;
}

void GetItemTypesResponse::InternalSwap(GetItemTypesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  item_types_.InternalSwap(&other->item_types_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetItemTypesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetContainersRequest::InitAsDefaultInstance() {
}
class GetContainersRequest::_Internal {
 public:
};

GetContainersRequest::GetContainersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.items.GetContainersRequest)
}
GetContainersRequest::GetContainersRequest(const GetContainersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:mruv.items.GetContainersRequest)
}

void GetContainersRequest::SharedCtor() {
  limit_ = 0u;
}

GetContainersRequest::~GetContainersRequest() {
  // @@protoc_insertion_point(destructor:mruv.items.GetContainersRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetContainersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetContainersRequest::ArenaDtor(void* object) {
  GetContainersRequest* _this = reinterpret_cast< GetContainersRequest* >(object);
  (void)_this;
}
void GetContainersRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetContainersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetContainersRequest& GetContainersRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetContainersRequest_items_2fitems_2eproto.base);
  return *internal_default_instance();
}


void GetContainersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.items.GetContainersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  limit_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetContainersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetContainersRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.items.GetContainersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 limit = 1;
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.items.GetContainersRequest)
  return target;
}

size_t GetContainersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.items.GetContainersRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 limit = 1;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetContainersRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.items.GetContainersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetContainersRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetContainersRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.items.GetContainersRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.items.GetContainersRequest)
    MergeFrom(*source);
  }
}

void GetContainersRequest::MergeFrom(const GetContainersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.items.GetContainersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
}

void GetContainersRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.items.GetContainersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetContainersRequest::CopyFrom(const GetContainersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.items.GetContainersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetContainersRequest::IsInitialized() const {
  return true;
}

void GetContainersRequest::InternalSwap(GetContainersRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(limit_, other->limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetContainersRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetContainersResponse::InitAsDefaultInstance() {
}
class GetContainersResponse::_Internal {
 public:
};

void GetContainersResponse::clear_containers() {
  containers_.Clear();
}
GetContainersResponse::GetContainersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  containers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.items.GetContainersResponse)
}
GetContainersResponse::GetContainersResponse(const GetContainersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      containers_(from.containers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.items.GetContainersResponse)
}

void GetContainersResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetContainersResponse_items_2fitems_2eproto.base);
}

GetContainersResponse::~GetContainersResponse() {
  // @@protoc_insertion_point(destructor:mruv.items.GetContainersResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetContainersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetContainersResponse::ArenaDtor(void* object) {
  GetContainersResponse* _this = reinterpret_cast< GetContainersResponse* >(object);
  (void)_this;
}
void GetContainersResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetContainersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetContainersResponse& GetContainersResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetContainersResponse_items_2fitems_2eproto.base);
  return *internal_default_instance();
}


void GetContainersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.items.GetContainersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  containers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetContainersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mruv.items.Container containers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_containers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetContainersResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.items.GetContainersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mruv.items.Container containers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_containers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_containers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.items.GetContainersResponse)
  return target;
}

size_t GetContainersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.items.GetContainersResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mruv.items.Container containers = 1;
  total_size += 1UL * this->_internal_containers_size();
  for (const auto& msg : this->containers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetContainersResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.items.GetContainersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetContainersResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetContainersResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.items.GetContainersResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.items.GetContainersResponse)
    MergeFrom(*source);
  }
}

void GetContainersResponse::MergeFrom(const GetContainersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.items.GetContainersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  containers_.MergeFrom(from.containers_);
}

void GetContainersResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.items.GetContainersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetContainersResponse::CopyFrom(const GetContainersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.items.GetContainersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetContainersResponse::IsInitialized() const {
  return true;
}

void GetContainersResponse::InternalSwap(GetContainersResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  containers_.InternalSwap(&other->containers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetContainersResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetContainerTypesRequest::InitAsDefaultInstance() {
}
class GetContainerTypesRequest::_Internal {
 public:
};

GetContainerTypesRequest::GetContainerTypesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.items.GetContainerTypesRequest)
}
GetContainerTypesRequest::GetContainerTypesRequest(const GetContainerTypesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:mruv.items.GetContainerTypesRequest)
}

void GetContainerTypesRequest::SharedCtor() {
  limit_ = 0u;
}

GetContainerTypesRequest::~GetContainerTypesRequest() {
  // @@protoc_insertion_point(destructor:mruv.items.GetContainerTypesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetContainerTypesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetContainerTypesRequest::ArenaDtor(void* object) {
  GetContainerTypesRequest* _this = reinterpret_cast< GetContainerTypesRequest* >(object);
  (void)_this;
}
void GetContainerTypesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetContainerTypesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetContainerTypesRequest& GetContainerTypesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetContainerTypesRequest_items_2fitems_2eproto.base);
  return *internal_default_instance();
}


void GetContainerTypesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.items.GetContainerTypesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  limit_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetContainerTypesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetContainerTypesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.items.GetContainerTypesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 limit = 1;
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.items.GetContainerTypesRequest)
  return target;
}

size_t GetContainerTypesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.items.GetContainerTypesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 limit = 1;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetContainerTypesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.items.GetContainerTypesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetContainerTypesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetContainerTypesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.items.GetContainerTypesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.items.GetContainerTypesRequest)
    MergeFrom(*source);
  }
}

void GetContainerTypesRequest::MergeFrom(const GetContainerTypesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.items.GetContainerTypesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
}

void GetContainerTypesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.items.GetContainerTypesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetContainerTypesRequest::CopyFrom(const GetContainerTypesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.items.GetContainerTypesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetContainerTypesRequest::IsInitialized() const {
  return true;
}

void GetContainerTypesRequest::InternalSwap(GetContainerTypesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(limit_, other->limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetContainerTypesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetContainerTypesResponse::InitAsDefaultInstance() {
}
class GetContainerTypesResponse::_Internal {
 public:
};

void GetContainerTypesResponse::clear_container_types() {
  container_types_.Clear();
}
GetContainerTypesResponse::GetContainerTypesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  container_types_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.items.GetContainerTypesResponse)
}
GetContainerTypesResponse::GetContainerTypesResponse(const GetContainerTypesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      container_types_(from.container_types_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.items.GetContainerTypesResponse)
}

void GetContainerTypesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetContainerTypesResponse_items_2fitems_2eproto.base);
}

GetContainerTypesResponse::~GetContainerTypesResponse() {
  // @@protoc_insertion_point(destructor:mruv.items.GetContainerTypesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetContainerTypesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetContainerTypesResponse::ArenaDtor(void* object) {
  GetContainerTypesResponse* _this = reinterpret_cast< GetContainerTypesResponse* >(object);
  (void)_this;
}
void GetContainerTypesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetContainerTypesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetContainerTypesResponse& GetContainerTypesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetContainerTypesResponse_items_2fitems_2eproto.base);
  return *internal_default_instance();
}


void GetContainerTypesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.items.GetContainerTypesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  container_types_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetContainerTypesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mruv.items.ContainerType container_types = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_container_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetContainerTypesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.items.GetContainerTypesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mruv.items.ContainerType container_types = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_container_types_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_container_types(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.items.GetContainerTypesResponse)
  return target;
}

size_t GetContainerTypesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.items.GetContainerTypesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mruv.items.ContainerType container_types = 1;
  total_size += 1UL * this->_internal_container_types_size();
  for (const auto& msg : this->container_types_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetContainerTypesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.items.GetContainerTypesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetContainerTypesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetContainerTypesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.items.GetContainerTypesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.items.GetContainerTypesResponse)
    MergeFrom(*source);
  }
}

void GetContainerTypesResponse::MergeFrom(const GetContainerTypesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.items.GetContainerTypesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  container_types_.MergeFrom(from.container_types_);
}

void GetContainerTypesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.items.GetContainerTypesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetContainerTypesResponse::CopyFrom(const GetContainerTypesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.items.GetContainerTypesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetContainerTypesResponse::IsInitialized() const {
  return true;
}

void GetContainerTypesResponse::InternalSwap(GetContainerTypesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  container_types_.InternalSwap(&other->container_types_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetContainerTypesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PutItemRequest::InitAsDefaultInstance() {
  ::mruv::items::_PutItemRequest_default_instance_.slot_ = 0;
}
class PutItemRequest::_Internal {
 public:
};

PutItemRequest::PutItemRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.items.PutItemRequest)
}
PutItemRequest::PutItemRequest(const PutItemRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&container_id_, &from.container_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_id_) -
    reinterpret_cast<char*>(&container_id_)) + sizeof(item_id_));
  clear_has_where();
  switch (from.where_case()) {
    case kSlot: {
      _internal_set_slot(from._internal_slot());
      break;
    }
    case WHERE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:mruv.items.PutItemRequest)
}

void PutItemRequest::SharedCtor() {
  ::memset(&container_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&item_id_) -
      reinterpret_cast<char*>(&container_id_)) + sizeof(item_id_));
  clear_has_where();
}

PutItemRequest::~PutItemRequest() {
  // @@protoc_insertion_point(destructor:mruv.items.PutItemRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PutItemRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_where()) {
    clear_where();
  }
}

void PutItemRequest::ArenaDtor(void* object) {
  PutItemRequest* _this = reinterpret_cast< PutItemRequest* >(object);
  (void)_this;
}
void PutItemRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PutItemRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PutItemRequest& PutItemRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PutItemRequest_items_2fitems_2eproto.base);
  return *internal_default_instance();
}


void PutItemRequest::clear_where() {
// @@protoc_insertion_point(one_of_clear_start:mruv.items.PutItemRequest)
  switch (where_case()) {
    case kSlot: {
      // No need to clear
      break;
    }
    case WHERE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = WHERE_NOT_SET;
}


void PutItemRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.items.PutItemRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&container_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&item_id_) -
      reinterpret_cast<char*>(&container_id_)) + sizeof(item_id_));
  clear_where();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PutItemRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 container_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          container_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 slot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_slot(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PutItemRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.items.PutItemRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 container_id = 1;
  if (this->container_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_container_id(), target);
  }

  // uint32 item_id = 2;
  if (this->item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_item_id(), target);
  }

  // int32 slot = 3;
  if (_internal_has_slot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_slot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.items.PutItemRequest)
  return target;
}

size_t PutItemRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.items.PutItemRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 container_id = 1;
  if (this->container_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_container_id());
  }

  // uint32 item_id = 2;
  if (this->item_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_item_id());
  }

  switch (where_case()) {
    // int32 slot = 3;
    case kSlot: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_slot());
      break;
    }
    case WHERE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PutItemRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.items.PutItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PutItemRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PutItemRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.items.PutItemRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.items.PutItemRequest)
    MergeFrom(*source);
  }
}

void PutItemRequest::MergeFrom(const PutItemRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.items.PutItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.container_id() != 0) {
    _internal_set_container_id(from._internal_container_id());
  }
  if (from.item_id() != 0) {
    _internal_set_item_id(from._internal_item_id());
  }
  switch (from.where_case()) {
    case kSlot: {
      _internal_set_slot(from._internal_slot());
      break;
    }
    case WHERE_NOT_SET: {
      break;
    }
  }
}

void PutItemRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.items.PutItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutItemRequest::CopyFrom(const PutItemRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.items.PutItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutItemRequest::IsInitialized() const {
  return true;
}

void PutItemRequest::InternalSwap(PutItemRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PutItemRequest, item_id_)
      + sizeof(PutItemRequest::item_id_)
      - PROTOBUF_FIELD_OFFSET(PutItemRequest, container_id_)>(
          reinterpret_cast<char*>(&container_id_),
          reinterpret_cast<char*>(&other->container_id_));
  swap(where_, other->where_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PutItemRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PutItemResponse::InitAsDefaultInstance() {
  ::mruv::items::_PutItemResponse_default_instance_._instance.get_mutable()->inside_item_ = const_cast< ::mruv::items::InsideItem*>(
      ::mruv::items::InsideItem::internal_default_instance());
}
class PutItemResponse::_Internal {
 public:
  static const ::mruv::items::InsideItem& inside_item(const PutItemResponse* msg);
};

const ::mruv::items::InsideItem&
PutItemResponse::_Internal::inside_item(const PutItemResponse* msg) {
  return *msg->inside_item_;
}
void PutItemResponse::clear_inside_item() {
  if (GetArena() == nullptr && inside_item_ != nullptr) {
    delete inside_item_;
  }
  inside_item_ = nullptr;
}
PutItemResponse::PutItemResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.items.PutItemResponse)
}
PutItemResponse::PutItemResponse(const PutItemResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_inside_item()) {
    inside_item_ = new ::mruv::items::InsideItem(*from.inside_item_);
  } else {
    inside_item_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mruv.items.PutItemResponse)
}

void PutItemResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PutItemResponse_items_2fitems_2eproto.base);
  inside_item_ = nullptr;
}

PutItemResponse::~PutItemResponse() {
  // @@protoc_insertion_point(destructor:mruv.items.PutItemResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PutItemResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete inside_item_;
}

void PutItemResponse::ArenaDtor(void* object) {
  PutItemResponse* _this = reinterpret_cast< PutItemResponse* >(object);
  (void)_this;
}
void PutItemResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PutItemResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PutItemResponse& PutItemResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PutItemResponse_items_2fitems_2eproto.base);
  return *internal_default_instance();
}


void PutItemResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.items.PutItemResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && inside_item_ != nullptr) {
    delete inside_item_;
  }
  inside_item_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PutItemResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mruv.items.InsideItem inside_item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_inside_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PutItemResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.items.PutItemResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mruv.items.InsideItem inside_item = 1;
  if (this->has_inside_item()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::inside_item(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.items.PutItemResponse)
  return target;
}

size_t PutItemResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.items.PutItemResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mruv.items.InsideItem inside_item = 1;
  if (this->has_inside_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inside_item_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PutItemResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.items.PutItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PutItemResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PutItemResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.items.PutItemResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.items.PutItemResponse)
    MergeFrom(*source);
  }
}

void PutItemResponse::MergeFrom(const PutItemResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.items.PutItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_inside_item()) {
    _internal_mutable_inside_item()->::mruv::items::InsideItem::MergeFrom(from._internal_inside_item());
  }
}

void PutItemResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.items.PutItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutItemResponse::CopyFrom(const PutItemResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.items.PutItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutItemResponse::IsInitialized() const {
  return true;
}

void PutItemResponse::InternalSwap(PutItemResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(inside_item_, other->inside_item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PutItemResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetContainerItemsRequest::InitAsDefaultInstance() {
}
class GetContainerItemsRequest::_Internal {
 public:
};

GetContainerItemsRequest::GetContainerItemsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.items.GetContainerItemsRequest)
}
GetContainerItemsRequest::GetContainerItemsRequest(const GetContainerItemsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&container_id_, &from.container_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&container_id_)) + sizeof(limit_));
  // @@protoc_insertion_point(copy_constructor:mruv.items.GetContainerItemsRequest)
}

void GetContainerItemsRequest::SharedCtor() {
  ::memset(&container_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&container_id_)) + sizeof(limit_));
}

GetContainerItemsRequest::~GetContainerItemsRequest() {
  // @@protoc_insertion_point(destructor:mruv.items.GetContainerItemsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetContainerItemsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetContainerItemsRequest::ArenaDtor(void* object) {
  GetContainerItemsRequest* _this = reinterpret_cast< GetContainerItemsRequest* >(object);
  (void)_this;
}
void GetContainerItemsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetContainerItemsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetContainerItemsRequest& GetContainerItemsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetContainerItemsRequest_items_2fitems_2eproto.base);
  return *internal_default_instance();
}


void GetContainerItemsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.items.GetContainerItemsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&container_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&container_id_)) + sizeof(limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetContainerItemsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 container_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          container_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetContainerItemsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.items.GetContainerItemsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 container_id = 1;
  if (this->container_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_container_id(), target);
  }

  // uint32 limit = 2;
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.items.GetContainerItemsRequest)
  return target;
}

size_t GetContainerItemsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.items.GetContainerItemsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 container_id = 1;
  if (this->container_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_container_id());
  }

  // uint32 limit = 2;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetContainerItemsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.items.GetContainerItemsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetContainerItemsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetContainerItemsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.items.GetContainerItemsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.items.GetContainerItemsRequest)
    MergeFrom(*source);
  }
}

void GetContainerItemsRequest::MergeFrom(const GetContainerItemsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.items.GetContainerItemsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.container_id() != 0) {
    _internal_set_container_id(from._internal_container_id());
  }
  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
}

void GetContainerItemsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.items.GetContainerItemsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetContainerItemsRequest::CopyFrom(const GetContainerItemsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.items.GetContainerItemsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetContainerItemsRequest::IsInitialized() const {
  return true;
}

void GetContainerItemsRequest::InternalSwap(GetContainerItemsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetContainerItemsRequest, limit_)
      + sizeof(GetContainerItemsRequest::limit_)
      - PROTOBUF_FIELD_OFFSET(GetContainerItemsRequest, container_id_)>(
          reinterpret_cast<char*>(&container_id_),
          reinterpret_cast<char*>(&other->container_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetContainerItemsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetContainerItemsResponse::InitAsDefaultInstance() {
}
class GetContainerItemsResponse::_Internal {
 public:
};

void GetContainerItemsResponse::clear_items() {
  items_.Clear();
}
GetContainerItemsResponse::GetContainerItemsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.items.GetContainerItemsResponse)
}
GetContainerItemsResponse::GetContainerItemsResponse(const GetContainerItemsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.items.GetContainerItemsResponse)
}

void GetContainerItemsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetContainerItemsResponse_items_2fitems_2eproto.base);
}

GetContainerItemsResponse::~GetContainerItemsResponse() {
  // @@protoc_insertion_point(destructor:mruv.items.GetContainerItemsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetContainerItemsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetContainerItemsResponse::ArenaDtor(void* object) {
  GetContainerItemsResponse* _this = reinterpret_cast< GetContainerItemsResponse* >(object);
  (void)_this;
}
void GetContainerItemsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetContainerItemsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetContainerItemsResponse& GetContainerItemsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetContainerItemsResponse_items_2fitems_2eproto.base);
  return *internal_default_instance();
}


void GetContainerItemsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.items.GetContainerItemsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetContainerItemsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mruv.items.InsideItem items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetContainerItemsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.items.GetContainerItemsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mruv.items.InsideItem items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.items.GetContainerItemsResponse)
  return target;
}

size_t GetContainerItemsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.items.GetContainerItemsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mruv.items.InsideItem items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetContainerItemsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.items.GetContainerItemsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetContainerItemsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetContainerItemsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.items.GetContainerItemsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.items.GetContainerItemsResponse)
    MergeFrom(*source);
  }
}

void GetContainerItemsResponse::MergeFrom(const GetContainerItemsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.items.GetContainerItemsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
}

void GetContainerItemsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.items.GetContainerItemsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetContainerItemsResponse::CopyFrom(const GetContainerItemsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.items.GetContainerItemsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetContainerItemsResponse::IsInitialized() const {
  return true;
}

void GetContainerItemsResponse::InternalSwap(GetContainerItemsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetContainerItemsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PullItemRequest::InitAsDefaultInstance() {
}
class PullItemRequest::_Internal {
 public:
};

PullItemRequest::PullItemRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.items.PullItemRequest)
}
PullItemRequest::PullItemRequest(const PullItemRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&container_id_, &from.container_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_id_) -
    reinterpret_cast<char*>(&container_id_)) + sizeof(item_id_));
  // @@protoc_insertion_point(copy_constructor:mruv.items.PullItemRequest)
}

void PullItemRequest::SharedCtor() {
  ::memset(&container_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&item_id_) -
      reinterpret_cast<char*>(&container_id_)) + sizeof(item_id_));
}

PullItemRequest::~PullItemRequest() {
  // @@protoc_insertion_point(destructor:mruv.items.PullItemRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PullItemRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PullItemRequest::ArenaDtor(void* object) {
  PullItemRequest* _this = reinterpret_cast< PullItemRequest* >(object);
  (void)_this;
}
void PullItemRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PullItemRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PullItemRequest& PullItemRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PullItemRequest_items_2fitems_2eproto.base);
  return *internal_default_instance();
}


void PullItemRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.items.PullItemRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&container_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&item_id_) -
      reinterpret_cast<char*>(&container_id_)) + sizeof(item_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PullItemRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 container_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          container_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PullItemRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.items.PullItemRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 container_id = 1;
  if (this->container_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_container_id(), target);
  }

  // uint32 item_id = 2;
  if (this->item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.items.PullItemRequest)
  return target;
}

size_t PullItemRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.items.PullItemRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 container_id = 1;
  if (this->container_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_container_id());
  }

  // uint32 item_id = 2;
  if (this->item_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_item_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PullItemRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.items.PullItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PullItemRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PullItemRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.items.PullItemRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.items.PullItemRequest)
    MergeFrom(*source);
  }
}

void PullItemRequest::MergeFrom(const PullItemRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.items.PullItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.container_id() != 0) {
    _internal_set_container_id(from._internal_container_id());
  }
  if (from.item_id() != 0) {
    _internal_set_item_id(from._internal_item_id());
  }
}

void PullItemRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.items.PullItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PullItemRequest::CopyFrom(const PullItemRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.items.PullItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PullItemRequest::IsInitialized() const {
  return true;
}

void PullItemRequest::InternalSwap(PullItemRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PullItemRequest, item_id_)
      + sizeof(PullItemRequest::item_id_)
      - PROTOBUF_FIELD_OFFSET(PullItemRequest, container_id_)>(
          reinterpret_cast<char*>(&container_id_),
          reinterpret_cast<char*>(&other->container_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PullItemRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SortItemsRequest::InitAsDefaultInstance() {
}
class SortItemsRequest::_Internal {
 public:
};

SortItemsRequest::SortItemsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.items.SortItemsRequest)
}
SortItemsRequest::SortItemsRequest(const SortItemsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&container_id_, &from.container_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sort_by_) -
    reinterpret_cast<char*>(&container_id_)) + sizeof(sort_by_));
  // @@protoc_insertion_point(copy_constructor:mruv.items.SortItemsRequest)
}

void SortItemsRequest::SharedCtor() {
  ::memset(&container_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sort_by_) -
      reinterpret_cast<char*>(&container_id_)) + sizeof(sort_by_));
}

SortItemsRequest::~SortItemsRequest() {
  // @@protoc_insertion_point(destructor:mruv.items.SortItemsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SortItemsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SortItemsRequest::ArenaDtor(void* object) {
  SortItemsRequest* _this = reinterpret_cast< SortItemsRequest* >(object);
  (void)_this;
}
void SortItemsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SortItemsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SortItemsRequest& SortItemsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SortItemsRequest_items_2fitems_2eproto.base);
  return *internal_default_instance();
}


void SortItemsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.items.SortItemsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&container_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sort_by_) -
      reinterpret_cast<char*>(&container_id_)) + sizeof(sort_by_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SortItemsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 container_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          container_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mruv.items.SortingMode sort_by = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sort_by(static_cast<::mruv::items::SortingMode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SortItemsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.items.SortItemsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 container_id = 1;
  if (this->container_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_container_id(), target);
  }

  // .mruv.items.SortingMode sort_by = 2;
  if (this->sort_by() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_sort_by(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.items.SortItemsRequest)
  return target;
}

size_t SortItemsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.items.SortItemsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 container_id = 1;
  if (this->container_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_container_id());
  }

  // .mruv.items.SortingMode sort_by = 2;
  if (this->sort_by() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sort_by());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SortItemsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.items.SortItemsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SortItemsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SortItemsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.items.SortItemsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.items.SortItemsRequest)
    MergeFrom(*source);
  }
}

void SortItemsRequest::MergeFrom(const SortItemsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.items.SortItemsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.container_id() != 0) {
    _internal_set_container_id(from._internal_container_id());
  }
  if (from.sort_by() != 0) {
    _internal_set_sort_by(from._internal_sort_by());
  }
}

void SortItemsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.items.SortItemsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SortItemsRequest::CopyFrom(const SortItemsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.items.SortItemsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SortItemsRequest::IsInitialized() const {
  return true;
}

void SortItemsRequest::InternalSwap(SortItemsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SortItemsRequest, sort_by_)
      + sizeof(SortItemsRequest::sort_by_)
      - PROTOBUF_FIELD_OFFSET(SortItemsRequest, container_id_)>(
          reinterpret_cast<char*>(&container_id_),
          reinterpret_cast<char*>(&other->container_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SortItemsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SortItemsResponse::InitAsDefaultInstance() {
  ::mruv::items::_SortItemsResponse_default_instance_._instance.get_mutable()->container_ = const_cast< ::mruv::items::Container*>(
      ::mruv::items::Container::internal_default_instance());
}
class SortItemsResponse::_Internal {
 public:
  static const ::mruv::items::Container& container(const SortItemsResponse* msg);
};

const ::mruv::items::Container&
SortItemsResponse::_Internal::container(const SortItemsResponse* msg) {
  return *msg->container_;
}
void SortItemsResponse::clear_container() {
  if (GetArena() == nullptr && container_ != nullptr) {
    delete container_;
  }
  container_ = nullptr;
}
SortItemsResponse::SortItemsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.items.SortItemsResponse)
}
SortItemsResponse::SortItemsResponse(const SortItemsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_container()) {
    container_ = new ::mruv::items::Container(*from.container_);
  } else {
    container_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mruv.items.SortItemsResponse)
}

void SortItemsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SortItemsResponse_items_2fitems_2eproto.base);
  container_ = nullptr;
}

SortItemsResponse::~SortItemsResponse() {
  // @@protoc_insertion_point(destructor:mruv.items.SortItemsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SortItemsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete container_;
}

void SortItemsResponse::ArenaDtor(void* object) {
  SortItemsResponse* _this = reinterpret_cast< SortItemsResponse* >(object);
  (void)_this;
}
void SortItemsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SortItemsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SortItemsResponse& SortItemsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SortItemsResponse_items_2fitems_2eproto.base);
  return *internal_default_instance();
}


void SortItemsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.items.SortItemsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && container_ != nullptr) {
    delete container_;
  }
  container_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SortItemsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mruv.items.Container container = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_container(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SortItemsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.items.SortItemsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mruv.items.Container container = 1;
  if (this->has_container()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::container(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.items.SortItemsResponse)
  return target;
}

size_t SortItemsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.items.SortItemsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mruv.items.Container container = 1;
  if (this->has_container()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *container_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SortItemsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.items.SortItemsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SortItemsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SortItemsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.items.SortItemsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.items.SortItemsResponse)
    MergeFrom(*source);
  }
}

void SortItemsResponse::MergeFrom(const SortItemsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.items.SortItemsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_container()) {
    _internal_mutable_container()->::mruv::items::Container::MergeFrom(from._internal_container());
  }
}

void SortItemsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.items.SortItemsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SortItemsResponse::CopyFrom(const SortItemsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.items.SortItemsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SortItemsResponse::IsInitialized() const {
  return true;
}

void SortItemsResponse::InternalSwap(SortItemsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(container_, other->container_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SortItemsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetNearestItemsRequest::InitAsDefaultInstance() {
  ::mruv::items::_GetNearestItemsRequest_default_instance_._instance.get_mutable()->position_ = const_cast< ::mruv::common::Position*>(
      ::mruv::common::Position::internal_default_instance());
}
class GetNearestItemsRequest::_Internal {
 public:
  static const ::mruv::common::Position& position(const GetNearestItemsRequest* msg);
};

const ::mruv::common::Position&
GetNearestItemsRequest::_Internal::position(const GetNearestItemsRequest* msg) {
  return *msg->position_;
}
void GetNearestItemsRequest::clear_position() {
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
GetNearestItemsRequest::GetNearestItemsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.items.GetNearestItemsRequest)
}
GetNearestItemsRequest::GetNearestItemsRequest(const GetNearestItemsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::mruv::common::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  ::memcpy(&distance_limit_, &from.distance_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&container_id_) -
    reinterpret_cast<char*>(&distance_limit_)) + sizeof(container_id_));
  // @@protoc_insertion_point(copy_constructor:mruv.items.GetNearestItemsRequest)
}

void GetNearestItemsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetNearestItemsRequest_items_2fitems_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&container_id_) -
      reinterpret_cast<char*>(&position_)) + sizeof(container_id_));
}

GetNearestItemsRequest::~GetNearestItemsRequest() {
  // @@protoc_insertion_point(destructor:mruv.items.GetNearestItemsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetNearestItemsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_;
}

void GetNearestItemsRequest::ArenaDtor(void* object) {
  GetNearestItemsRequest* _this = reinterpret_cast< GetNearestItemsRequest* >(object);
  (void)_this;
}
void GetNearestItemsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetNearestItemsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNearestItemsRequest& GetNearestItemsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetNearestItemsRequest_items_2fitems_2eproto.base);
  return *internal_default_instance();
}


void GetNearestItemsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.items.GetNearestItemsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  ::memset(&distance_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&container_id_) -
      reinterpret_cast<char*>(&distance_limit_)) + sizeof(container_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNearestItemsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mruv.common.Position position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 container_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          container_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double distance_limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          distance_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetNearestItemsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.items.GetNearestItemsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mruv.common.Position position = 1;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // uint32 container_id = 2;
  if (this->container_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_container_id(), target);
  }

  // double distance_limit = 3;
  if (!(this->distance_limit() <= 0 && this->distance_limit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_distance_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.items.GetNearestItemsRequest)
  return target;
}

size_t GetNearestItemsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.items.GetNearestItemsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mruv.common.Position position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // double distance_limit = 3;
  if (!(this->distance_limit() <= 0 && this->distance_limit() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 container_id = 2;
  if (this->container_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_container_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNearestItemsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.items.GetNearestItemsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNearestItemsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetNearestItemsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.items.GetNearestItemsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.items.GetNearestItemsRequest)
    MergeFrom(*source);
  }
}

void GetNearestItemsRequest::MergeFrom(const GetNearestItemsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.items.GetNearestItemsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::mruv::common::Position::MergeFrom(from._internal_position());
  }
  if (!(from.distance_limit() <= 0 && from.distance_limit() >= 0)) {
    _internal_set_distance_limit(from._internal_distance_limit());
  }
  if (from.container_id() != 0) {
    _internal_set_container_id(from._internal_container_id());
  }
}

void GetNearestItemsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.items.GetNearestItemsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNearestItemsRequest::CopyFrom(const GetNearestItemsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.items.GetNearestItemsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNearestItemsRequest::IsInitialized() const {
  return true;
}

void GetNearestItemsRequest::InternalSwap(GetNearestItemsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetNearestItemsRequest, container_id_)
      + sizeof(GetNearestItemsRequest::container_id_)
      - PROTOBUF_FIELD_OFFSET(GetNearestItemsRequest, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNearestItemsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetNearestItemsResponse::InitAsDefaultInstance() {
}
class GetNearestItemsResponse::_Internal {
 public:
};

void GetNearestItemsResponse::clear_item() {
  item_.Clear();
}
GetNearestItemsResponse::GetNearestItemsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  item_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.items.GetNearestItemsResponse)
}
GetNearestItemsResponse::GetNearestItemsResponse(const GetNearestItemsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      item_(from.item_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.items.GetNearestItemsResponse)
}

void GetNearestItemsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetNearestItemsResponse_items_2fitems_2eproto.base);
}

GetNearestItemsResponse::~GetNearestItemsResponse() {
  // @@protoc_insertion_point(destructor:mruv.items.GetNearestItemsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetNearestItemsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetNearestItemsResponse::ArenaDtor(void* object) {
  GetNearestItemsResponse* _this = reinterpret_cast< GetNearestItemsResponse* >(object);
  (void)_this;
}
void GetNearestItemsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetNearestItemsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNearestItemsResponse& GetNearestItemsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetNearestItemsResponse_items_2fitems_2eproto.base);
  return *internal_default_instance();
}


void GetNearestItemsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.items.GetNearestItemsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNearestItemsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mruv.items.InsideItem item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetNearestItemsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.items.GetNearestItemsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mruv.items.InsideItem item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_item_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_item(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.items.GetNearestItemsResponse)
  return target;
}

size_t GetNearestItemsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.items.GetNearestItemsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mruv.items.InsideItem item = 1;
  total_size += 1UL * this->_internal_item_size();
  for (const auto& msg : this->item_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNearestItemsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.items.GetNearestItemsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNearestItemsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetNearestItemsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.items.GetNearestItemsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.items.GetNearestItemsResponse)
    MergeFrom(*source);
  }
}

void GetNearestItemsResponse::MergeFrom(const GetNearestItemsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.items.GetNearestItemsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void GetNearestItemsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.items.GetNearestItemsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNearestItemsResponse::CopyFrom(const GetNearestItemsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.items.GetNearestItemsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNearestItemsResponse::IsInitialized() const {
  return true;
}

void GetNearestItemsResponse::InternalSwap(GetNearestItemsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  item_.InternalSwap(&other->item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNearestItemsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UseItemRequest::InitAsDefaultInstance() {
}
class UseItemRequest::_Internal {
 public:
};

UseItemRequest::UseItemRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.items.UseItemRequest)
}
UseItemRequest::UseItemRequest(const UseItemRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  item_id_ = from.item_id_;
  // @@protoc_insertion_point(copy_constructor:mruv.items.UseItemRequest)
}

void UseItemRequest::SharedCtor() {
  item_id_ = 0u;
}

UseItemRequest::~UseItemRequest() {
  // @@protoc_insertion_point(destructor:mruv.items.UseItemRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UseItemRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UseItemRequest::ArenaDtor(void* object) {
  UseItemRequest* _this = reinterpret_cast< UseItemRequest* >(object);
  (void)_this;
}
void UseItemRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UseItemRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UseItemRequest& UseItemRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UseItemRequest_items_2fitems_2eproto.base);
  return *internal_default_instance();
}


void UseItemRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.items.UseItemRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UseItemRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UseItemRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.items.UseItemRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 item_id = 1;
  if (this->item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.items.UseItemRequest)
  return target;
}

size_t UseItemRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.items.UseItemRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 item_id = 1;
  if (this->item_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_item_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UseItemRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.items.UseItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UseItemRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UseItemRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.items.UseItemRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.items.UseItemRequest)
    MergeFrom(*source);
  }
}

void UseItemRequest::MergeFrom(const UseItemRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.items.UseItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.item_id() != 0) {
    _internal_set_item_id(from._internal_item_id());
  }
}

void UseItemRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.items.UseItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseItemRequest::CopyFrom(const UseItemRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.items.UseItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseItemRequest::IsInitialized() const {
  return true;
}

void UseItemRequest::InternalSwap(UseItemRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(item_id_, other->item_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UseItemRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UseItemResponse::InitAsDefaultInstance() {
}
class UseItemResponse::_Internal {
 public:
};

UseItemResponse::UseItemResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.items.UseItemResponse)
}
UseItemResponse::UseItemResponse(const UseItemResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:mruv.items.UseItemResponse)
}

void UseItemResponse::SharedCtor() {
  success_ = false;
}

UseItemResponse::~UseItemResponse() {
  // @@protoc_insertion_point(destructor:mruv.items.UseItemResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UseItemResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UseItemResponse::ArenaDtor(void* object) {
  UseItemResponse* _this = reinterpret_cast< UseItemResponse* >(object);
  (void)_this;
}
void UseItemResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UseItemResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UseItemResponse& UseItemResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UseItemResponse_items_2fitems_2eproto.base);
  return *internal_default_instance();
}


void UseItemResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.items.UseItemResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UseItemResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UseItemResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.items.UseItemResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.items.UseItemResponse)
  return target;
}

size_t UseItemResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.items.UseItemResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UseItemResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.items.UseItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UseItemResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UseItemResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.items.UseItemResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.items.UseItemResponse)
    MergeFrom(*source);
  }
}

void UseItemResponse::MergeFrom(const UseItemResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.items.UseItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void UseItemResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.items.UseItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseItemResponse::CopyFrom(const UseItemResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.items.UseItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseItemResponse::IsInitialized() const {
  return true;
}

void UseItemResponse::InternalSwap(UseItemResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UseItemResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace items
}  // namespace mruv
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mruv::items::GetItemsRequest* Arena::CreateMaybeMessage< ::mruv::items::GetItemsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::items::GetItemsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::items::GetItemsResponse* Arena::CreateMaybeMessage< ::mruv::items::GetItemsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::items::GetItemsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::items::GetItemTypesRequest* Arena::CreateMaybeMessage< ::mruv::items::GetItemTypesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::items::GetItemTypesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::items::GetItemTypesResponse* Arena::CreateMaybeMessage< ::mruv::items::GetItemTypesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::items::GetItemTypesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::items::GetContainersRequest* Arena::CreateMaybeMessage< ::mruv::items::GetContainersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::items::GetContainersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::items::GetContainersResponse* Arena::CreateMaybeMessage< ::mruv::items::GetContainersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::items::GetContainersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::items::GetContainerTypesRequest* Arena::CreateMaybeMessage< ::mruv::items::GetContainerTypesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::items::GetContainerTypesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::items::GetContainerTypesResponse* Arena::CreateMaybeMessage< ::mruv::items::GetContainerTypesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::items::GetContainerTypesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::items::PutItemRequest* Arena::CreateMaybeMessage< ::mruv::items::PutItemRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::items::PutItemRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::items::PutItemResponse* Arena::CreateMaybeMessage< ::mruv::items::PutItemResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::items::PutItemResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::items::GetContainerItemsRequest* Arena::CreateMaybeMessage< ::mruv::items::GetContainerItemsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::items::GetContainerItemsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::items::GetContainerItemsResponse* Arena::CreateMaybeMessage< ::mruv::items::GetContainerItemsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::items::GetContainerItemsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::items::PullItemRequest* Arena::CreateMaybeMessage< ::mruv::items::PullItemRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::items::PullItemRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::items::SortItemsRequest* Arena::CreateMaybeMessage< ::mruv::items::SortItemsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::items::SortItemsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::items::SortItemsResponse* Arena::CreateMaybeMessage< ::mruv::items::SortItemsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::items::SortItemsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::items::GetNearestItemsRequest* Arena::CreateMaybeMessage< ::mruv::items::GetNearestItemsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::items::GetNearestItemsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::items::GetNearestItemsResponse* Arena::CreateMaybeMessage< ::mruv::items::GetNearestItemsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::items::GetNearestItemsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::items::UseItemRequest* Arena::CreateMaybeMessage< ::mruv::items::UseItemRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::items::UseItemRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::items::UseItemResponse* Arena::CreateMaybeMessage< ::mruv::items::UseItemResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::items::UseItemResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
