// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: items/items_model.proto

#include "items/items_model.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_items_2fitems_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InsideItem_items_2fitems_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_items_2fitems_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Item_items_2fitems_5fmodel_2eproto;
namespace mruv {
class ItemTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ItemType> _instance;
} _ItemType_default_instance_;
class ItemTypeIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ItemTypeID> _instance;
} _ItemTypeID_default_instance_;
class ItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Item> _instance;
} _Item_default_instance_;
class ItemIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ItemID> _instance;
} _ItemID_default_instance_;
class ContainerTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContainerType> _instance;
} _ContainerType_default_instance_;
class ContainerTypeIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContainerTypeID> _instance;
} _ContainerTypeID_default_instance_;
class ContainerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Container> _instance;
} _Container_default_instance_;
class ContainerIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContainerID> _instance;
} _ContainerID_default_instance_;
class InsideItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InsideItem> _instance;
  ::PROTOBUF_NAMESPACE_ID::uint32 item_id_;
  const ::mruv::Item* item_;
} _InsideItem_default_instance_;
}  // namespace mruv
static void InitDefaultsscc_info_Container_items_2fitems_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::_Container_default_instance_;
    new (ptr) ::mruv::Container();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::Container::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Container_items_2fitems_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Container_items_2fitems_5fmodel_2eproto}, {
      &scc_info_InsideItem_items_2fitems_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_ContainerID_items_2fitems_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::_ContainerID_default_instance_;
    new (ptr) ::mruv::ContainerID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::ContainerID::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerID_items_2fitems_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContainerID_items_2fitems_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_ContainerType_items_2fitems_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::_ContainerType_default_instance_;
    new (ptr) ::mruv::ContainerType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::ContainerType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerType_items_2fitems_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContainerType_items_2fitems_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_ContainerTypeID_items_2fitems_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::_ContainerTypeID_default_instance_;
    new (ptr) ::mruv::ContainerTypeID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::ContainerTypeID::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerTypeID_items_2fitems_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContainerTypeID_items_2fitems_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_InsideItem_items_2fitems_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::_InsideItem_default_instance_;
    new (ptr) ::mruv::InsideItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::InsideItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InsideItem_items_2fitems_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InsideItem_items_2fitems_5fmodel_2eproto}, {
      &scc_info_Item_items_2fitems_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_Item_items_2fitems_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::_Item_default_instance_;
    new (ptr) ::mruv::Item();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::Item::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Item_items_2fitems_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Item_items_2fitems_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_ItemID_items_2fitems_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::_ItemID_default_instance_;
    new (ptr) ::mruv::ItemID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::ItemID::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ItemID_items_2fitems_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ItemID_items_2fitems_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_ItemType_items_2fitems_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::_ItemType_default_instance_;
    new (ptr) ::mruv::ItemType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::ItemType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ItemType_items_2fitems_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ItemType_items_2fitems_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_ItemTypeID_items_2fitems_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::_ItemTypeID_default_instance_;
    new (ptr) ::mruv::ItemTypeID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::ItemTypeID::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ItemTypeID_items_2fitems_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ItemTypeID_items_2fitems_5fmodel_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_items_2fitems_5fmodel_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_items_2fitems_5fmodel_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_items_2fitems_5fmodel_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_items_2fitems_5fmodel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::ItemType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::ItemType, id_),
  PROTOBUF_FIELD_OFFSET(::mruv::ItemType, name_),
  PROTOBUF_FIELD_OFFSET(::mruv::ItemType, description_),
  PROTOBUF_FIELD_OFFSET(::mruv::ItemType, base_weight_),
  PROTOBUF_FIELD_OFFSET(::mruv::ItemType, base_volume_),
  PROTOBUF_FIELD_OFFSET(::mruv::ItemType, model_name_),
  PROTOBUF_FIELD_OFFSET(::mruv::ItemType, model_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::ItemTypeID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::ItemTypeID, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::Item, id_),
  PROTOBUF_FIELD_OFFSET(::mruv::Item, item_type_id_),
  PROTOBUF_FIELD_OFFSET(::mruv::Item, weight_),
  PROTOBUF_FIELD_OFFSET(::mruv::Item, volume_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::ItemID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::ItemID, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::ContainerType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::ContainerType, id_),
  PROTOBUF_FIELD_OFFSET(::mruv::ContainerType, container_item_type_id_),
  PROTOBUF_FIELD_OFFSET(::mruv::ContainerType, max_number_),
  PROTOBUF_FIELD_OFFSET(::mruv::ContainerType, max_volume_),
  PROTOBUF_FIELD_OFFSET(::mruv::ContainerType, max_weight_),
  PROTOBUF_FIELD_OFFSET(::mruv::ContainerType, valid_item_types_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::ContainerTypeID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::ContainerTypeID, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::Container, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::Container, id_),
  PROTOBUF_FIELD_OFFSET(::mruv::Container, type_id_),
  PROTOBUF_FIELD_OFFSET(::mruv::Container, item_id_),
  PROTOBUF_FIELD_OFFSET(::mruv::Container, items_inside_),
  PROTOBUF_FIELD_OFFSET(::mruv::Container, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::ContainerID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::ContainerID, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::InsideItem, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::mruv::InsideItem, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::InsideItem, container_id_),
  offsetof(::mruv::InsideItemDefaultTypeInternal, item_id_),
  offsetof(::mruv::InsideItemDefaultTypeInternal, item_),
  PROTOBUF_FIELD_OFFSET(::mruv::InsideItem, position_),
  PROTOBUF_FIELD_OFFSET(::mruv::InsideItem, item_or_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mruv::ItemType)},
  { 12, -1, sizeof(::mruv::ItemTypeID)},
  { 18, -1, sizeof(::mruv::Item)},
  { 27, -1, sizeof(::mruv::ItemID)},
  { 33, -1, sizeof(::mruv::ContainerType)},
  { 44, -1, sizeof(::mruv::ContainerTypeID)},
  { 50, -1, sizeof(::mruv::Container)},
  { 60, -1, sizeof(::mruv::ContainerID)},
  { 66, -1, sizeof(::mruv::InsideItem)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::_ItemType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::_ItemTypeID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::_Item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::_ItemID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::_ContainerType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::_ContainerTypeID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::_Container_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::_ContainerID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::_InsideItem_default_instance_),
};

const char descriptor_table_protodef_items_2fitems_5fmodel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027items/items_model.proto\022\004mruv\"\213\001\n\010Item"
  "Type\022\n\n\002id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\023\n\013descri"
  "ption\030\003 \001(\t\022\023\n\013base_weight\030\004 \001(\002\022\023\n\013base"
  "_volume\030\005 \001(\002\022\022\n\nmodel_name\030\006 \001(\t\022\022\n\nmod"
  "el_hash\030\007 \001(\005\"\030\n\nItemTypeID\022\n\n\002id\030\001 \001(\r\""
  "H\n\004Item\022\n\n\002id\030\001 \001(\r\022\024\n\014item_type_id\030\002 \001("
  "\r\022\016\n\006weight\030\003 \001(\002\022\016\n\006volume\030\004 \001(\002\"\024\n\006Ite"
  "mID\022\n\n\002id\030\001 \001(\r\"\221\001\n\rContainerType\022\n\n\002id\030"
  "\001 \001(\r\022\036\n\026container_item_type_id\030\002 \001(\r\022\022\n"
  "\nmax_number\030\003 \001(\r\022\022\n\nmax_volume\030\004 \001(\002\022\022\n"
  "\nmax_weight\030\005 \001(\002\022\030\n\020valid_item_types\030\010 "
  "\003(\003\"\035\n\017ContainerTypeID\022\n\n\002id\030\001 \001(\r\"p\n\tCo"
  "ntainer\022\n\n\002id\030\001 \001(\r\022\017\n\007type_id\030\002 \001(\r\022\017\n\007"
  "item_id\030\003 \001(\r\022\024\n\014items_inside\030\004 \001(\r\022\037\n\005i"
  "tems\030\005 \003(\0132\020.mruv.InsideItem\"\031\n\013Containe"
  "rID\022\n\n\002id\030\001 \001(\r\"q\n\nInsideItem\022\024\n\014contain"
  "er_id\030\001 \001(\r\022\021\n\007item_id\030\002 \001(\rH\000\022\032\n\004item\030\003"
  " \001(\0132\n.mruv.ItemH\000\022\020\n\010position\030\004 \001(\005B\014\n\n"
  "item_or_id*\\\n\013SortingMode\022\013\n\007UNKNOWN\020\000\022\017"
  "\n\013WEIGHT_DESC\020\001\022\016\n\nWEIGHT_ASC\020\002\022\017\n\013VOLUM"
  "E_DESC\020\003\022\016\n\nVOLUME_ASC\020\004B%Z#github.com/M"
  "ruV-RP/mruv-pb-go/itemsb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_items_2fitems_5fmodel_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_items_2fitems_5fmodel_2eproto_sccs[9] = {
  &scc_info_Container_items_2fitems_5fmodel_2eproto.base,
  &scc_info_ContainerID_items_2fitems_5fmodel_2eproto.base,
  &scc_info_ContainerType_items_2fitems_5fmodel_2eproto.base,
  &scc_info_ContainerTypeID_items_2fitems_5fmodel_2eproto.base,
  &scc_info_InsideItem_items_2fitems_5fmodel_2eproto.base,
  &scc_info_Item_items_2fitems_5fmodel_2eproto.base,
  &scc_info_ItemID_items_2fitems_5fmodel_2eproto.base,
  &scc_info_ItemType_items_2fitems_5fmodel_2eproto.base,
  &scc_info_ItemTypeID_items_2fitems_5fmodel_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_items_2fitems_5fmodel_2eproto_once;
static bool descriptor_table_items_2fitems_5fmodel_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_items_2fitems_5fmodel_2eproto = {
  &descriptor_table_items_2fitems_5fmodel_2eproto_initialized, descriptor_table_protodef_items_2fitems_5fmodel_2eproto, "items/items_model.proto", 871,
  &descriptor_table_items_2fitems_5fmodel_2eproto_once, descriptor_table_items_2fitems_5fmodel_2eproto_sccs, descriptor_table_items_2fitems_5fmodel_2eproto_deps, 9, 0,
  schemas, file_default_instances, TableStruct_items_2fitems_5fmodel_2eproto::offsets,
  file_level_metadata_items_2fitems_5fmodel_2eproto, 9, file_level_enum_descriptors_items_2fitems_5fmodel_2eproto, file_level_service_descriptors_items_2fitems_5fmodel_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_items_2fitems_5fmodel_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_items_2fitems_5fmodel_2eproto), true);
namespace mruv {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SortingMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_items_2fitems_5fmodel_2eproto);
  return file_level_enum_descriptors_items_2fitems_5fmodel_2eproto[0];
}
bool SortingMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ItemType::InitAsDefaultInstance() {
}
class ItemType::_Internal {
 public:
};

ItemType::ItemType()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.ItemType)
}
ItemType::ItemType(const ItemType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  model_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_name().empty()) {
    model_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&model_hash_) -
    reinterpret_cast<char*>(&id_)) + sizeof(model_hash_));
  // @@protoc_insertion_point(copy_constructor:mruv.ItemType)
}

void ItemType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ItemType_items_2fitems_5fmodel_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&model_hash_) -
      reinterpret_cast<char*>(&id_)) + sizeof(model_hash_));
}

ItemType::~ItemType() {
  // @@protoc_insertion_point(destructor:mruv.ItemType)
  SharedDtor();
}

void ItemType::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ItemType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ItemType& ItemType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ItemType_items_2fitems_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void ItemType::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.ItemType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&model_hash_) -
      reinterpret_cast<char*>(&id_)) + sizeof(model_hash_));
  _internal_metadata_.Clear();
}

const char* ItemType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.ItemType.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.ItemType.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float base_weight = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          base_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float base_volume = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          base_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string model_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_model_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.ItemType.model_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 model_hash = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          model_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ItemType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.ItemType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.ItemType.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.ItemType.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // float base_weight = 4;
  if (!(this->base_weight() <= 0 && this->base_weight() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_base_weight(), target);
  }

  // float base_volume = 5;
  if (!(this->base_volume() <= 0 && this->base_volume() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_base_volume(), target);
  }

  // string model_name = 6;
  if (this->model_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_name().data(), static_cast<int>(this->_internal_model_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.ItemType.model_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_model_name(), target);
  }

  // int32 model_hash = 7;
  if (this->model_hash() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_model_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.ItemType)
  return target;
}

size_t ItemType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.ItemType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string model_name = 6;
  if (this->model_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_name());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // float base_weight = 4;
  if (!(this->base_weight() <= 0 && this->base_weight() >= 0)) {
    total_size += 1 + 4;
  }

  // float base_volume = 5;
  if (!(this->base_volume() <= 0 && this->base_volume() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 model_hash = 7;
  if (this->model_hash() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_model_hash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ItemType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.ItemType)
  GOOGLE_DCHECK_NE(&from, this);
  const ItemType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ItemType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.ItemType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.ItemType)
    MergeFrom(*source);
  }
}

void ItemType::MergeFrom(const ItemType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.ItemType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.model_name().size() > 0) {

    model_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_name_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (!(from.base_weight() <= 0 && from.base_weight() >= 0)) {
    _internal_set_base_weight(from._internal_base_weight());
  }
  if (!(from.base_volume() <= 0 && from.base_volume() >= 0)) {
    _internal_set_base_volume(from._internal_base_volume());
  }
  if (from.model_hash() != 0) {
    _internal_set_model_hash(from._internal_model_hash());
  }
}

void ItemType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.ItemType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemType::CopyFrom(const ItemType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.ItemType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemType::IsInitialized() const {
  return true;
}

void ItemType::InternalSwap(ItemType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_name_.Swap(&other->model_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(base_weight_, other->base_weight_);
  swap(base_volume_, other->base_volume_);
  swap(model_hash_, other->model_hash_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ItemTypeID::InitAsDefaultInstance() {
}
class ItemTypeID::_Internal {
 public:
};

ItemTypeID::ItemTypeID()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.ItemTypeID)
}
ItemTypeID::ItemTypeID(const ItemTypeID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.ItemTypeID)
}

void ItemTypeID::SharedCtor() {
  id_ = 0u;
}

ItemTypeID::~ItemTypeID() {
  // @@protoc_insertion_point(destructor:mruv.ItemTypeID)
  SharedDtor();
}

void ItemTypeID::SharedDtor() {
}

void ItemTypeID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ItemTypeID& ItemTypeID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ItemTypeID_items_2fitems_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void ItemTypeID::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.ItemTypeID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear();
}

const char* ItemTypeID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ItemTypeID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.ItemTypeID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.ItemTypeID)
  return target;
}

size_t ItemTypeID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.ItemTypeID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ItemTypeID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.ItemTypeID)
  GOOGLE_DCHECK_NE(&from, this);
  const ItemTypeID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ItemTypeID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.ItemTypeID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.ItemTypeID)
    MergeFrom(*source);
  }
}

void ItemTypeID::MergeFrom(const ItemTypeID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.ItemTypeID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void ItemTypeID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.ItemTypeID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemTypeID::CopyFrom(const ItemTypeID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.ItemTypeID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemTypeID::IsInitialized() const {
  return true;
}

void ItemTypeID::InternalSwap(ItemTypeID* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemTypeID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Item::InitAsDefaultInstance() {
}
class Item::_Internal {
 public:
};

Item::Item()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.Item)
}
Item::Item(const Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&volume_) -
    reinterpret_cast<char*>(&id_)) + sizeof(volume_));
  // @@protoc_insertion_point(copy_constructor:mruv.Item)
}

void Item::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_) -
      reinterpret_cast<char*>(&id_)) + sizeof(volume_));
}

Item::~Item() {
  // @@protoc_insertion_point(destructor:mruv.Item)
  SharedDtor();
}

void Item::SharedDtor() {
}

void Item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Item& Item::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Item_items_2fitems_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void Item::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_) -
      reinterpret_cast<char*>(&id_)) + sizeof(volume_));
  _internal_metadata_.Clear();
}

const char* Item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 item_type_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          item_type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float weight = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float volume = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 item_type_id = 2;
  if (this->item_type_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_item_type_id(), target);
  }

  // float weight = 3;
  if (!(this->weight() <= 0 && this->weight() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_weight(), target);
  }

  // float volume = 4;
  if (!(this->volume() <= 0 && this->volume() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_volume(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.Item)
  return target;
}

size_t Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.Item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 item_type_id = 2;
  if (this->item_type_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_item_type_id());
  }

  // float weight = 3;
  if (!(this->weight() <= 0 && this->weight() >= 0)) {
    total_size += 1 + 4;
  }

  // float volume = 4;
  if (!(this->volume() <= 0 && this->volume() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.Item)
  GOOGLE_DCHECK_NE(&from, this);
  const Item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.Item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.Item)
    MergeFrom(*source);
  }
}

void Item::MergeFrom(const Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.item_type_id() != 0) {
    _internal_set_item_type_id(from._internal_item_type_id());
  }
  if (!(from.weight() <= 0 && from.weight() >= 0)) {
    _internal_set_weight(from._internal_weight());
  }
  if (!(from.volume() <= 0 && from.volume() >= 0)) {
    _internal_set_volume(from._internal_volume());
  }
}

void Item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item::CopyFrom(const Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item::IsInitialized() const {
  return true;
}

void Item::InternalSwap(Item* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(item_type_id_, other->item_type_id_);
  swap(weight_, other->weight_);
  swap(volume_, other->volume_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ItemID::InitAsDefaultInstance() {
}
class ItemID::_Internal {
 public:
};

ItemID::ItemID()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.ItemID)
}
ItemID::ItemID(const ItemID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.ItemID)
}

void ItemID::SharedCtor() {
  id_ = 0u;
}

ItemID::~ItemID() {
  // @@protoc_insertion_point(destructor:mruv.ItemID)
  SharedDtor();
}

void ItemID::SharedDtor() {
}

void ItemID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ItemID& ItemID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ItemID_items_2fitems_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void ItemID::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.ItemID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear();
}

const char* ItemID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ItemID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.ItemID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.ItemID)
  return target;
}

size_t ItemID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.ItemID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ItemID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.ItemID)
  GOOGLE_DCHECK_NE(&from, this);
  const ItemID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ItemID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.ItemID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.ItemID)
    MergeFrom(*source);
  }
}

void ItemID::MergeFrom(const ItemID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.ItemID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void ItemID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.ItemID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemID::CopyFrom(const ItemID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.ItemID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemID::IsInitialized() const {
  return true;
}

void ItemID::InternalSwap(ItemID* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContainerType::InitAsDefaultInstance() {
}
class ContainerType::_Internal {
 public:
};

ContainerType::ContainerType()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.ContainerType)
}
ContainerType::ContainerType(const ContainerType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      valid_item_types_(from.valid_item_types_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_weight_) -
    reinterpret_cast<char*>(&id_)) + sizeof(max_weight_));
  // @@protoc_insertion_point(copy_constructor:mruv.ContainerType)
}

void ContainerType::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_weight_) -
      reinterpret_cast<char*>(&id_)) + sizeof(max_weight_));
}

ContainerType::~ContainerType() {
  // @@protoc_insertion_point(destructor:mruv.ContainerType)
  SharedDtor();
}

void ContainerType::SharedDtor() {
}

void ContainerType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContainerType& ContainerType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContainerType_items_2fitems_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void ContainerType::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.ContainerType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  valid_item_types_.Clear();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_weight_) -
      reinterpret_cast<char*>(&id_)) + sizeof(max_weight_));
  _internal_metadata_.Clear();
}

const char* ContainerType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 container_item_type_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          container_item_type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          max_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float max_volume = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          max_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float max_weight = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          max_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated int64 valid_item_types = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_valid_item_types(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_valid_item_types(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContainerType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.ContainerType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 container_item_type_id = 2;
  if (this->container_item_type_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_container_item_type_id(), target);
  }

  // uint32 max_number = 3;
  if (this->max_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_max_number(), target);
  }

  // float max_volume = 4;
  if (!(this->max_volume() <= 0 && this->max_volume() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_max_volume(), target);
  }

  // float max_weight = 5;
  if (!(this->max_weight() <= 0 && this->max_weight() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_max_weight(), target);
  }

  // repeated int64 valid_item_types = 8;
  {
    int byte_size = _valid_item_types_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          8, _internal_valid_item_types(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.ContainerType)
  return target;
}

size_t ContainerType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.ContainerType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 valid_item_types = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->valid_item_types_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _valid_item_types_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 container_item_type_id = 2;
  if (this->container_item_type_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_container_item_type_id());
  }

  // uint32 max_number = 3;
  if (this->max_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_number());
  }

  // float max_volume = 4;
  if (!(this->max_volume() <= 0 && this->max_volume() >= 0)) {
    total_size += 1 + 4;
  }

  // float max_weight = 5;
  if (!(this->max_weight() <= 0 && this->max_weight() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContainerType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.ContainerType)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainerType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContainerType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.ContainerType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.ContainerType)
    MergeFrom(*source);
  }
}

void ContainerType::MergeFrom(const ContainerType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.ContainerType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  valid_item_types_.MergeFrom(from.valid_item_types_);
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.container_item_type_id() != 0) {
    _internal_set_container_item_type_id(from._internal_container_item_type_id());
  }
  if (from.max_number() != 0) {
    _internal_set_max_number(from._internal_max_number());
  }
  if (!(from.max_volume() <= 0 && from.max_volume() >= 0)) {
    _internal_set_max_volume(from._internal_max_volume());
  }
  if (!(from.max_weight() <= 0 && from.max_weight() >= 0)) {
    _internal_set_max_weight(from._internal_max_weight());
  }
}

void ContainerType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.ContainerType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerType::CopyFrom(const ContainerType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.ContainerType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerType::IsInitialized() const {
  return true;
}

void ContainerType::InternalSwap(ContainerType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  valid_item_types_.InternalSwap(&other->valid_item_types_);
  swap(id_, other->id_);
  swap(container_item_type_id_, other->container_item_type_id_);
  swap(max_number_, other->max_number_);
  swap(max_volume_, other->max_volume_);
  swap(max_weight_, other->max_weight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContainerTypeID::InitAsDefaultInstance() {
}
class ContainerTypeID::_Internal {
 public:
};

ContainerTypeID::ContainerTypeID()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.ContainerTypeID)
}
ContainerTypeID::ContainerTypeID(const ContainerTypeID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.ContainerTypeID)
}

void ContainerTypeID::SharedCtor() {
  id_ = 0u;
}

ContainerTypeID::~ContainerTypeID() {
  // @@protoc_insertion_point(destructor:mruv.ContainerTypeID)
  SharedDtor();
}

void ContainerTypeID::SharedDtor() {
}

void ContainerTypeID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContainerTypeID& ContainerTypeID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContainerTypeID_items_2fitems_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void ContainerTypeID::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.ContainerTypeID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear();
}

const char* ContainerTypeID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContainerTypeID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.ContainerTypeID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.ContainerTypeID)
  return target;
}

size_t ContainerTypeID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.ContainerTypeID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContainerTypeID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.ContainerTypeID)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainerTypeID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContainerTypeID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.ContainerTypeID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.ContainerTypeID)
    MergeFrom(*source);
  }
}

void ContainerTypeID::MergeFrom(const ContainerTypeID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.ContainerTypeID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void ContainerTypeID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.ContainerTypeID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerTypeID::CopyFrom(const ContainerTypeID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.ContainerTypeID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerTypeID::IsInitialized() const {
  return true;
}

void ContainerTypeID::InternalSwap(ContainerTypeID* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerTypeID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Container::InitAsDefaultInstance() {
}
class Container::_Internal {
 public:
};

Container::Container()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.Container)
}
Container::Container(const Container& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&items_inside_) -
    reinterpret_cast<char*>(&id_)) + sizeof(items_inside_));
  // @@protoc_insertion_point(copy_constructor:mruv.Container)
}

void Container::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Container_items_2fitems_5fmodel_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&items_inside_) -
      reinterpret_cast<char*>(&id_)) + sizeof(items_inside_));
}

Container::~Container() {
  // @@protoc_insertion_point(destructor:mruv.Container)
  SharedDtor();
}

void Container::SharedDtor() {
}

void Container::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Container& Container::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Container_items_2fitems_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void Container::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.Container)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&items_inside_) -
      reinterpret_cast<char*>(&id_)) + sizeof(items_inside_));
  _internal_metadata_.Clear();
}

const char* Container::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 type_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 item_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 items_inside = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          items_inside_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mruv.InsideItem items = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Container::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.Container)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 type_id = 2;
  if (this->type_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type_id(), target);
  }

  // uint32 item_id = 3;
  if (this->item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_item_id(), target);
  }

  // uint32 items_inside = 4;
  if (this->items_inside() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_items_inside(), target);
  }

  // repeated .mruv.InsideItem items = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.Container)
  return target;
}

size_t Container::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.Container)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mruv.InsideItem items = 5;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 type_id = 2;
  if (this->type_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type_id());
  }

  // uint32 item_id = 3;
  if (this->item_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_item_id());
  }

  // uint32 items_inside = 4;
  if (this->items_inside() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_items_inside());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Container::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.Container)
  GOOGLE_DCHECK_NE(&from, this);
  const Container* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Container>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.Container)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.Container)
    MergeFrom(*source);
  }
}

void Container::MergeFrom(const Container& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.Container)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type_id() != 0) {
    _internal_set_type_id(from._internal_type_id());
  }
  if (from.item_id() != 0) {
    _internal_set_item_id(from._internal_item_id());
  }
  if (from.items_inside() != 0) {
    _internal_set_items_inside(from._internal_items_inside());
  }
}

void Container::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.Container)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Container::CopyFrom(const Container& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.Container)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Container::IsInitialized() const {
  return true;
}

void Container::InternalSwap(Container* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  swap(id_, other->id_);
  swap(type_id_, other->type_id_);
  swap(item_id_, other->item_id_);
  swap(items_inside_, other->items_inside_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Container::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContainerID::InitAsDefaultInstance() {
}
class ContainerID::_Internal {
 public:
};

ContainerID::ContainerID()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.ContainerID)
}
ContainerID::ContainerID(const ContainerID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.ContainerID)
}

void ContainerID::SharedCtor() {
  id_ = 0u;
}

ContainerID::~ContainerID() {
  // @@protoc_insertion_point(destructor:mruv.ContainerID)
  SharedDtor();
}

void ContainerID::SharedDtor() {
}

void ContainerID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContainerID& ContainerID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContainerID_items_2fitems_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void ContainerID::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.ContainerID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear();
}

const char* ContainerID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContainerID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.ContainerID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.ContainerID)
  return target;
}

size_t ContainerID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.ContainerID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContainerID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.ContainerID)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainerID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContainerID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.ContainerID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.ContainerID)
    MergeFrom(*source);
  }
}

void ContainerID::MergeFrom(const ContainerID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.ContainerID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void ContainerID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.ContainerID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerID::CopyFrom(const ContainerID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.ContainerID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerID::IsInitialized() const {
  return true;
}

void ContainerID::InternalSwap(ContainerID* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InsideItem::InitAsDefaultInstance() {
  ::mruv::_InsideItem_default_instance_.item_id_ = 0u;
  ::mruv::_InsideItem_default_instance_.item_ = const_cast< ::mruv::Item*>(
      ::mruv::Item::internal_default_instance());
}
class InsideItem::_Internal {
 public:
  static const ::mruv::Item& item(const InsideItem* msg);
};

const ::mruv::Item&
InsideItem::_Internal::item(const InsideItem* msg) {
  return *msg->item_or_id_.item_;
}
void InsideItem::set_allocated_item(::mruv::Item* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_item_or_id();
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    set_has_item();
    item_or_id_.item_ = item;
  }
  // @@protoc_insertion_point(field_set_allocated:mruv.InsideItem.item)
}
InsideItem::InsideItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.InsideItem)
}
InsideItem::InsideItem(const InsideItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&container_id_, &from.container_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&container_id_)) + sizeof(position_));
  clear_has_item_or_id();
  switch (from.item_or_id_case()) {
    case kItemId: {
      _internal_set_item_id(from._internal_item_id());
      break;
    }
    case kItem: {
      _internal_mutable_item()->::mruv::Item::MergeFrom(from._internal_item());
      break;
    }
    case ITEM_OR_ID_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:mruv.InsideItem)
}

void InsideItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InsideItem_items_2fitems_5fmodel_2eproto.base);
  ::memset(&container_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_) -
      reinterpret_cast<char*>(&container_id_)) + sizeof(position_));
  clear_has_item_or_id();
}

InsideItem::~InsideItem() {
  // @@protoc_insertion_point(destructor:mruv.InsideItem)
  SharedDtor();
}

void InsideItem::SharedDtor() {
  if (has_item_or_id()) {
    clear_item_or_id();
  }
}

void InsideItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InsideItem& InsideItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InsideItem_items_2fitems_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void InsideItem::clear_item_or_id() {
// @@protoc_insertion_point(one_of_clear_start:mruv.InsideItem)
  switch (item_or_id_case()) {
    case kItemId: {
      // No need to clear
      break;
    }
    case kItem: {
      delete item_or_id_.item_;
      break;
    }
    case ITEM_OR_ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ITEM_OR_ID_NOT_SET;
}


void InsideItem::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.InsideItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&container_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_) -
      reinterpret_cast<char*>(&container_id_)) + sizeof(position_));
  clear_item_or_id();
  _internal_metadata_.Clear();
}

const char* InsideItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 container_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          container_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_item_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mruv.Item item = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsideItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.InsideItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 container_id = 1;
  if (this->container_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_container_id(), target);
  }

  // uint32 item_id = 2;
  if (_internal_has_item_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_item_id(), target);
  }

  // .mruv.Item item = 3;
  if (_internal_has_item()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::item(this), target, stream);
  }

  // int32 position = 4;
  if (this->position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.InsideItem)
  return target;
}

size_t InsideItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.InsideItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 container_id = 1;
  if (this->container_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_container_id());
  }

  // int32 position = 4;
  if (this->position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_position());
  }

  switch (item_or_id_case()) {
    // uint32 item_id = 2;
    case kItemId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_id());
      break;
    }
    // .mruv.Item item = 3;
    case kItem: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *item_or_id_.item_);
      break;
    }
    case ITEM_OR_ID_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsideItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.InsideItem)
  GOOGLE_DCHECK_NE(&from, this);
  const InsideItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsideItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.InsideItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.InsideItem)
    MergeFrom(*source);
  }
}

void InsideItem::MergeFrom(const InsideItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.InsideItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.container_id() != 0) {
    _internal_set_container_id(from._internal_container_id());
  }
  if (from.position() != 0) {
    _internal_set_position(from._internal_position());
  }
  switch (from.item_or_id_case()) {
    case kItemId: {
      _internal_set_item_id(from._internal_item_id());
      break;
    }
    case kItem: {
      _internal_mutable_item()->::mruv::Item::MergeFrom(from._internal_item());
      break;
    }
    case ITEM_OR_ID_NOT_SET: {
      break;
    }
  }
}

void InsideItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.InsideItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsideItem::CopyFrom(const InsideItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.InsideItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsideItem::IsInitialized() const {
  return true;
}

void InsideItem::InternalSwap(InsideItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(container_id_, other->container_id_);
  swap(position_, other->position_);
  swap(item_or_id_, other->item_or_id_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata InsideItem::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mruv
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mruv::ItemType* Arena::CreateMaybeMessage< ::mruv::ItemType >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::ItemType >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::ItemTypeID* Arena::CreateMaybeMessage< ::mruv::ItemTypeID >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::ItemTypeID >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::Item* Arena::CreateMaybeMessage< ::mruv::Item >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::Item >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::ItemID* Arena::CreateMaybeMessage< ::mruv::ItemID >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::ItemID >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::ContainerType* Arena::CreateMaybeMessage< ::mruv::ContainerType >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::ContainerType >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::ContainerTypeID* Arena::CreateMaybeMessage< ::mruv::ContainerTypeID >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::ContainerTypeID >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::Container* Arena::CreateMaybeMessage< ::mruv::Container >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::Container >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::ContainerID* Arena::CreateMaybeMessage< ::mruv::ContainerID >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::ContainerID >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::InsideItem* Arena::CreateMaybeMessage< ::mruv::InsideItem >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::InsideItem >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
