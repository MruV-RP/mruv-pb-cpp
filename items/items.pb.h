// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: items/items.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_items_2fitems_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_items_2fitems_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "common/health.pb.h"
#include "items/items_model.pb.h"
#include "common/spatial.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_items_2fitems_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_items_2fitems_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[19]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_items_2fitems_2eproto;
namespace mruv {
namespace items {
class GetContainerItemsRequest;
class GetContainerItemsRequestDefaultTypeInternal;
extern GetContainerItemsRequestDefaultTypeInternal _GetContainerItemsRequest_default_instance_;
class GetContainerItemsResponse;
class GetContainerItemsResponseDefaultTypeInternal;
extern GetContainerItemsResponseDefaultTypeInternal _GetContainerItemsResponse_default_instance_;
class GetContainerTypesRequest;
class GetContainerTypesRequestDefaultTypeInternal;
extern GetContainerTypesRequestDefaultTypeInternal _GetContainerTypesRequest_default_instance_;
class GetContainerTypesResponse;
class GetContainerTypesResponseDefaultTypeInternal;
extern GetContainerTypesResponseDefaultTypeInternal _GetContainerTypesResponse_default_instance_;
class GetContainersRequest;
class GetContainersRequestDefaultTypeInternal;
extern GetContainersRequestDefaultTypeInternal _GetContainersRequest_default_instance_;
class GetContainersResponse;
class GetContainersResponseDefaultTypeInternal;
extern GetContainersResponseDefaultTypeInternal _GetContainersResponse_default_instance_;
class GetItemTypesRequest;
class GetItemTypesRequestDefaultTypeInternal;
extern GetItemTypesRequestDefaultTypeInternal _GetItemTypesRequest_default_instance_;
class GetItemTypesResponse;
class GetItemTypesResponseDefaultTypeInternal;
extern GetItemTypesResponseDefaultTypeInternal _GetItemTypesResponse_default_instance_;
class GetItemsRequest;
class GetItemsRequestDefaultTypeInternal;
extern GetItemsRequestDefaultTypeInternal _GetItemsRequest_default_instance_;
class GetItemsResponse;
class GetItemsResponseDefaultTypeInternal;
extern GetItemsResponseDefaultTypeInternal _GetItemsResponse_default_instance_;
class GetNearestItemsRequest;
class GetNearestItemsRequestDefaultTypeInternal;
extern GetNearestItemsRequestDefaultTypeInternal _GetNearestItemsRequest_default_instance_;
class GetNearestItemsResponse;
class GetNearestItemsResponseDefaultTypeInternal;
extern GetNearestItemsResponseDefaultTypeInternal _GetNearestItemsResponse_default_instance_;
class PullItemRequest;
class PullItemRequestDefaultTypeInternal;
extern PullItemRequestDefaultTypeInternal _PullItemRequest_default_instance_;
class PutItemRequest;
class PutItemRequestDefaultTypeInternal;
extern PutItemRequestDefaultTypeInternal _PutItemRequest_default_instance_;
class PutItemResponse;
class PutItemResponseDefaultTypeInternal;
extern PutItemResponseDefaultTypeInternal _PutItemResponse_default_instance_;
class SortItemsRequest;
class SortItemsRequestDefaultTypeInternal;
extern SortItemsRequestDefaultTypeInternal _SortItemsRequest_default_instance_;
class SortItemsResponse;
class SortItemsResponseDefaultTypeInternal;
extern SortItemsResponseDefaultTypeInternal _SortItemsResponse_default_instance_;
class UseItemRequest;
class UseItemRequestDefaultTypeInternal;
extern UseItemRequestDefaultTypeInternal _UseItemRequest_default_instance_;
class UseItemResponse;
class UseItemResponseDefaultTypeInternal;
extern UseItemResponseDefaultTypeInternal _UseItemResponse_default_instance_;
}  // namespace items
}  // namespace mruv
PROTOBUF_NAMESPACE_OPEN
template<> ::mruv::items::GetContainerItemsRequest* Arena::CreateMaybeMessage<::mruv::items::GetContainerItemsRequest>(Arena*);
template<> ::mruv::items::GetContainerItemsResponse* Arena::CreateMaybeMessage<::mruv::items::GetContainerItemsResponse>(Arena*);
template<> ::mruv::items::GetContainerTypesRequest* Arena::CreateMaybeMessage<::mruv::items::GetContainerTypesRequest>(Arena*);
template<> ::mruv::items::GetContainerTypesResponse* Arena::CreateMaybeMessage<::mruv::items::GetContainerTypesResponse>(Arena*);
template<> ::mruv::items::GetContainersRequest* Arena::CreateMaybeMessage<::mruv::items::GetContainersRequest>(Arena*);
template<> ::mruv::items::GetContainersResponse* Arena::CreateMaybeMessage<::mruv::items::GetContainersResponse>(Arena*);
template<> ::mruv::items::GetItemTypesRequest* Arena::CreateMaybeMessage<::mruv::items::GetItemTypesRequest>(Arena*);
template<> ::mruv::items::GetItemTypesResponse* Arena::CreateMaybeMessage<::mruv::items::GetItemTypesResponse>(Arena*);
template<> ::mruv::items::GetItemsRequest* Arena::CreateMaybeMessage<::mruv::items::GetItemsRequest>(Arena*);
template<> ::mruv::items::GetItemsResponse* Arena::CreateMaybeMessage<::mruv::items::GetItemsResponse>(Arena*);
template<> ::mruv::items::GetNearestItemsRequest* Arena::CreateMaybeMessage<::mruv::items::GetNearestItemsRequest>(Arena*);
template<> ::mruv::items::GetNearestItemsResponse* Arena::CreateMaybeMessage<::mruv::items::GetNearestItemsResponse>(Arena*);
template<> ::mruv::items::PullItemRequest* Arena::CreateMaybeMessage<::mruv::items::PullItemRequest>(Arena*);
template<> ::mruv::items::PutItemRequest* Arena::CreateMaybeMessage<::mruv::items::PutItemRequest>(Arena*);
template<> ::mruv::items::PutItemResponse* Arena::CreateMaybeMessage<::mruv::items::PutItemResponse>(Arena*);
template<> ::mruv::items::SortItemsRequest* Arena::CreateMaybeMessage<::mruv::items::SortItemsRequest>(Arena*);
template<> ::mruv::items::SortItemsResponse* Arena::CreateMaybeMessage<::mruv::items::SortItemsResponse>(Arena*);
template<> ::mruv::items::UseItemRequest* Arena::CreateMaybeMessage<::mruv::items::UseItemRequest>(Arena*);
template<> ::mruv::items::UseItemResponse* Arena::CreateMaybeMessage<::mruv::items::UseItemResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mruv {
namespace items {

// ===================================================================

class GetItemsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.items.GetItemsRequest) */ {
 public:
  GetItemsRequest();
  virtual ~GetItemsRequest();

  GetItemsRequest(const GetItemsRequest& from);
  GetItemsRequest(GetItemsRequest&& from) noexcept
    : GetItemsRequest() {
    *this = ::std::move(from);
  }

  inline GetItemsRequest& operator=(const GetItemsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetItemsRequest& operator=(GetItemsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetItemsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetItemsRequest* internal_default_instance() {
    return reinterpret_cast<const GetItemsRequest*>(
               &_GetItemsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetItemsRequest& a, GetItemsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetItemsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetItemsRequest* New() const final {
    return CreateMaybeMessage<GetItemsRequest>(nullptr);
  }

  GetItemsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetItemsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetItemsRequest& from);
  void MergeFrom(const GetItemsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetItemsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.items.GetItemsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_items_2fitems_2eproto);
    return ::descriptor_table_items_2fitems_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLimitFieldNumber = 1,
  };
  // uint32 limit = 1;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.items.GetItemsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_items_2fitems_2eproto;
};
// -------------------------------------------------------------------

class GetItemsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.items.GetItemsResponse) */ {
 public:
  GetItemsResponse();
  virtual ~GetItemsResponse();

  GetItemsResponse(const GetItemsResponse& from);
  GetItemsResponse(GetItemsResponse&& from) noexcept
    : GetItemsResponse() {
    *this = ::std::move(from);
  }

  inline GetItemsResponse& operator=(const GetItemsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetItemsResponse& operator=(GetItemsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetItemsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetItemsResponse* internal_default_instance() {
    return reinterpret_cast<const GetItemsResponse*>(
               &_GetItemsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetItemsResponse& a, GetItemsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetItemsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetItemsResponse* New() const final {
    return CreateMaybeMessage<GetItemsResponse>(nullptr);
  }

  GetItemsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetItemsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetItemsResponse& from);
  void MergeFrom(const GetItemsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetItemsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.items.GetItemsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_items_2fitems_2eproto);
    return ::descriptor_table_items_2fitems_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .mruv.Item items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::mruv::Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::Item >*
      mutable_items();
  private:
  const ::mruv::Item& _internal_items(int index) const;
  ::mruv::Item* _internal_add_items();
  public:
  const ::mruv::Item& items(int index) const;
  ::mruv::Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::Item >&
      items() const;

  // @@protoc_insertion_point(class_scope:mruv.items.GetItemsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::Item > items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_items_2fitems_2eproto;
};
// -------------------------------------------------------------------

class GetItemTypesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.items.GetItemTypesRequest) */ {
 public:
  GetItemTypesRequest();
  virtual ~GetItemTypesRequest();

  GetItemTypesRequest(const GetItemTypesRequest& from);
  GetItemTypesRequest(GetItemTypesRequest&& from) noexcept
    : GetItemTypesRequest() {
    *this = ::std::move(from);
  }

  inline GetItemTypesRequest& operator=(const GetItemTypesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetItemTypesRequest& operator=(GetItemTypesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetItemTypesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetItemTypesRequest* internal_default_instance() {
    return reinterpret_cast<const GetItemTypesRequest*>(
               &_GetItemTypesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetItemTypesRequest& a, GetItemTypesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetItemTypesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetItemTypesRequest* New() const final {
    return CreateMaybeMessage<GetItemTypesRequest>(nullptr);
  }

  GetItemTypesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetItemTypesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetItemTypesRequest& from);
  void MergeFrom(const GetItemTypesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetItemTypesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.items.GetItemTypesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_items_2fitems_2eproto);
    return ::descriptor_table_items_2fitems_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLimitFieldNumber = 1,
  };
  // uint32 limit = 1;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.items.GetItemTypesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_items_2fitems_2eproto;
};
// -------------------------------------------------------------------

class GetItemTypesResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.items.GetItemTypesResponse) */ {
 public:
  GetItemTypesResponse();
  virtual ~GetItemTypesResponse();

  GetItemTypesResponse(const GetItemTypesResponse& from);
  GetItemTypesResponse(GetItemTypesResponse&& from) noexcept
    : GetItemTypesResponse() {
    *this = ::std::move(from);
  }

  inline GetItemTypesResponse& operator=(const GetItemTypesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetItemTypesResponse& operator=(GetItemTypesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetItemTypesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetItemTypesResponse* internal_default_instance() {
    return reinterpret_cast<const GetItemTypesResponse*>(
               &_GetItemTypesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetItemTypesResponse& a, GetItemTypesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetItemTypesResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetItemTypesResponse* New() const final {
    return CreateMaybeMessage<GetItemTypesResponse>(nullptr);
  }

  GetItemTypesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetItemTypesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetItemTypesResponse& from);
  void MergeFrom(const GetItemTypesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetItemTypesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.items.GetItemTypesResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_items_2fitems_2eproto);
    return ::descriptor_table_items_2fitems_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemTypesFieldNumber = 1,
  };
  // repeated .mruv.ItemType item_types = 1;
  int item_types_size() const;
  private:
  int _internal_item_types_size() const;
  public:
  void clear_item_types();
  ::mruv::ItemType* mutable_item_types(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::ItemType >*
      mutable_item_types();
  private:
  const ::mruv::ItemType& _internal_item_types(int index) const;
  ::mruv::ItemType* _internal_add_item_types();
  public:
  const ::mruv::ItemType& item_types(int index) const;
  ::mruv::ItemType* add_item_types();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::ItemType >&
      item_types() const;

  // @@protoc_insertion_point(class_scope:mruv.items.GetItemTypesResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::ItemType > item_types_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_items_2fitems_2eproto;
};
// -------------------------------------------------------------------

class GetContainersRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.items.GetContainersRequest) */ {
 public:
  GetContainersRequest();
  virtual ~GetContainersRequest();

  GetContainersRequest(const GetContainersRequest& from);
  GetContainersRequest(GetContainersRequest&& from) noexcept
    : GetContainersRequest() {
    *this = ::std::move(from);
  }

  inline GetContainersRequest& operator=(const GetContainersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetContainersRequest& operator=(GetContainersRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetContainersRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetContainersRequest* internal_default_instance() {
    return reinterpret_cast<const GetContainersRequest*>(
               &_GetContainersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetContainersRequest& a, GetContainersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetContainersRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetContainersRequest* New() const final {
    return CreateMaybeMessage<GetContainersRequest>(nullptr);
  }

  GetContainersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetContainersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetContainersRequest& from);
  void MergeFrom(const GetContainersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetContainersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.items.GetContainersRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_items_2fitems_2eproto);
    return ::descriptor_table_items_2fitems_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLimitFieldNumber = 1,
  };
  // uint32 limit = 1;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.items.GetContainersRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_items_2fitems_2eproto;
};
// -------------------------------------------------------------------

class GetContainersResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.items.GetContainersResponse) */ {
 public:
  GetContainersResponse();
  virtual ~GetContainersResponse();

  GetContainersResponse(const GetContainersResponse& from);
  GetContainersResponse(GetContainersResponse&& from) noexcept
    : GetContainersResponse() {
    *this = ::std::move(from);
  }

  inline GetContainersResponse& operator=(const GetContainersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetContainersResponse& operator=(GetContainersResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetContainersResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetContainersResponse* internal_default_instance() {
    return reinterpret_cast<const GetContainersResponse*>(
               &_GetContainersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetContainersResponse& a, GetContainersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetContainersResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetContainersResponse* New() const final {
    return CreateMaybeMessage<GetContainersResponse>(nullptr);
  }

  GetContainersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetContainersResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetContainersResponse& from);
  void MergeFrom(const GetContainersResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetContainersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.items.GetContainersResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_items_2fitems_2eproto);
    return ::descriptor_table_items_2fitems_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainersFieldNumber = 1,
  };
  // repeated .mruv.Container containers = 1;
  int containers_size() const;
  private:
  int _internal_containers_size() const;
  public:
  void clear_containers();
  ::mruv::Container* mutable_containers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::Container >*
      mutable_containers();
  private:
  const ::mruv::Container& _internal_containers(int index) const;
  ::mruv::Container* _internal_add_containers();
  public:
  const ::mruv::Container& containers(int index) const;
  ::mruv::Container* add_containers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::Container >&
      containers() const;

  // @@protoc_insertion_point(class_scope:mruv.items.GetContainersResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::Container > containers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_items_2fitems_2eproto;
};
// -------------------------------------------------------------------

class GetContainerTypesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.items.GetContainerTypesRequest) */ {
 public:
  GetContainerTypesRequest();
  virtual ~GetContainerTypesRequest();

  GetContainerTypesRequest(const GetContainerTypesRequest& from);
  GetContainerTypesRequest(GetContainerTypesRequest&& from) noexcept
    : GetContainerTypesRequest() {
    *this = ::std::move(from);
  }

  inline GetContainerTypesRequest& operator=(const GetContainerTypesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetContainerTypesRequest& operator=(GetContainerTypesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetContainerTypesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetContainerTypesRequest* internal_default_instance() {
    return reinterpret_cast<const GetContainerTypesRequest*>(
               &_GetContainerTypesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetContainerTypesRequest& a, GetContainerTypesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetContainerTypesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetContainerTypesRequest* New() const final {
    return CreateMaybeMessage<GetContainerTypesRequest>(nullptr);
  }

  GetContainerTypesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetContainerTypesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetContainerTypesRequest& from);
  void MergeFrom(const GetContainerTypesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetContainerTypesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.items.GetContainerTypesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_items_2fitems_2eproto);
    return ::descriptor_table_items_2fitems_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLimitFieldNumber = 1,
  };
  // uint32 limit = 1;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.items.GetContainerTypesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_items_2fitems_2eproto;
};
// -------------------------------------------------------------------

class GetContainerTypesResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.items.GetContainerTypesResponse) */ {
 public:
  GetContainerTypesResponse();
  virtual ~GetContainerTypesResponse();

  GetContainerTypesResponse(const GetContainerTypesResponse& from);
  GetContainerTypesResponse(GetContainerTypesResponse&& from) noexcept
    : GetContainerTypesResponse() {
    *this = ::std::move(from);
  }

  inline GetContainerTypesResponse& operator=(const GetContainerTypesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetContainerTypesResponse& operator=(GetContainerTypesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetContainerTypesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetContainerTypesResponse* internal_default_instance() {
    return reinterpret_cast<const GetContainerTypesResponse*>(
               &_GetContainerTypesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetContainerTypesResponse& a, GetContainerTypesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetContainerTypesResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetContainerTypesResponse* New() const final {
    return CreateMaybeMessage<GetContainerTypesResponse>(nullptr);
  }

  GetContainerTypesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetContainerTypesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetContainerTypesResponse& from);
  void MergeFrom(const GetContainerTypesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetContainerTypesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.items.GetContainerTypesResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_items_2fitems_2eproto);
    return ::descriptor_table_items_2fitems_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerTypesFieldNumber = 1,
  };
  // repeated .mruv.ContainerType container_types = 1;
  int container_types_size() const;
  private:
  int _internal_container_types_size() const;
  public:
  void clear_container_types();
  ::mruv::ContainerType* mutable_container_types(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::ContainerType >*
      mutable_container_types();
  private:
  const ::mruv::ContainerType& _internal_container_types(int index) const;
  ::mruv::ContainerType* _internal_add_container_types();
  public:
  const ::mruv::ContainerType& container_types(int index) const;
  ::mruv::ContainerType* add_container_types();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::ContainerType >&
      container_types() const;

  // @@protoc_insertion_point(class_scope:mruv.items.GetContainerTypesResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::ContainerType > container_types_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_items_2fitems_2eproto;
};
// -------------------------------------------------------------------

class PutItemRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.items.PutItemRequest) */ {
 public:
  PutItemRequest();
  virtual ~PutItemRequest();

  PutItemRequest(const PutItemRequest& from);
  PutItemRequest(PutItemRequest&& from) noexcept
    : PutItemRequest() {
    *this = ::std::move(from);
  }

  inline PutItemRequest& operator=(const PutItemRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutItemRequest& operator=(PutItemRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PutItemRequest& default_instance();

  enum WhereCase {
    kSlot = 3,
    WHERE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutItemRequest* internal_default_instance() {
    return reinterpret_cast<const PutItemRequest*>(
               &_PutItemRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PutItemRequest& a, PutItemRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PutItemRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PutItemRequest* New() const final {
    return CreateMaybeMessage<PutItemRequest>(nullptr);
  }

  PutItemRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PutItemRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PutItemRequest& from);
  void MergeFrom(const PutItemRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutItemRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.items.PutItemRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_items_2fitems_2eproto);
    return ::descriptor_table_items_2fitems_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerIdFieldNumber = 1,
    kItemIdFieldNumber = 2,
    kSlotFieldNumber = 3,
  };
  // uint32 container_id = 1;
  void clear_container_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 container_id() const;
  void set_container_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_container_id() const;
  void _internal_set_container_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 item_id = 2;
  void clear_item_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 item_id() const;
  void set_item_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_item_id() const;
  void _internal_set_item_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 slot = 3;
  private:
  bool _internal_has_slot() const;
  public:
  void clear_slot();
  ::PROTOBUF_NAMESPACE_ID::int32 slot() const;
  void set_slot(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_slot() const;
  void _internal_set_slot(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  void clear_where();
  WhereCase where_case() const;
  // @@protoc_insertion_point(class_scope:mruv.items.PutItemRequest)
 private:
  class _Internal;
  void set_has_slot();

  inline bool has_where() const;
  inline void clear_has_where();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 container_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 item_id_;
  union WhereUnion {
    WhereUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int32 slot_;
  } where_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_items_2fitems_2eproto;
};
// -------------------------------------------------------------------

class PutItemResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.items.PutItemResponse) */ {
 public:
  PutItemResponse();
  virtual ~PutItemResponse();

  PutItemResponse(const PutItemResponse& from);
  PutItemResponse(PutItemResponse&& from) noexcept
    : PutItemResponse() {
    *this = ::std::move(from);
  }

  inline PutItemResponse& operator=(const PutItemResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutItemResponse& operator=(PutItemResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PutItemResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutItemResponse* internal_default_instance() {
    return reinterpret_cast<const PutItemResponse*>(
               &_PutItemResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PutItemResponse& a, PutItemResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PutItemResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PutItemResponse* New() const final {
    return CreateMaybeMessage<PutItemResponse>(nullptr);
  }

  PutItemResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PutItemResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PutItemResponse& from);
  void MergeFrom(const PutItemResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutItemResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.items.PutItemResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_items_2fitems_2eproto);
    return ::descriptor_table_items_2fitems_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInsideItemFieldNumber = 1,
  };
  // .mruv.InsideItem inside_item = 1;
  bool has_inside_item() const;
  private:
  bool _internal_has_inside_item() const;
  public:
  void clear_inside_item();
  const ::mruv::InsideItem& inside_item() const;
  ::mruv::InsideItem* release_inside_item();
  ::mruv::InsideItem* mutable_inside_item();
  void set_allocated_inside_item(::mruv::InsideItem* inside_item);
  private:
  const ::mruv::InsideItem& _internal_inside_item() const;
  ::mruv::InsideItem* _internal_mutable_inside_item();
  public:

  // @@protoc_insertion_point(class_scope:mruv.items.PutItemResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mruv::InsideItem* inside_item_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_items_2fitems_2eproto;
};
// -------------------------------------------------------------------

class GetContainerItemsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.items.GetContainerItemsRequest) */ {
 public:
  GetContainerItemsRequest();
  virtual ~GetContainerItemsRequest();

  GetContainerItemsRequest(const GetContainerItemsRequest& from);
  GetContainerItemsRequest(GetContainerItemsRequest&& from) noexcept
    : GetContainerItemsRequest() {
    *this = ::std::move(from);
  }

  inline GetContainerItemsRequest& operator=(const GetContainerItemsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetContainerItemsRequest& operator=(GetContainerItemsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetContainerItemsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetContainerItemsRequest* internal_default_instance() {
    return reinterpret_cast<const GetContainerItemsRequest*>(
               &_GetContainerItemsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetContainerItemsRequest& a, GetContainerItemsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetContainerItemsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetContainerItemsRequest* New() const final {
    return CreateMaybeMessage<GetContainerItemsRequest>(nullptr);
  }

  GetContainerItemsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetContainerItemsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetContainerItemsRequest& from);
  void MergeFrom(const GetContainerItemsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetContainerItemsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.items.GetContainerItemsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_items_2fitems_2eproto);
    return ::descriptor_table_items_2fitems_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerIdFieldNumber = 1,
    kLimitFieldNumber = 2,
  };
  // uint32 container_id = 1;
  void clear_container_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 container_id() const;
  void set_container_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_container_id() const;
  void _internal_set_container_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 limit = 2;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.items.GetContainerItemsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 container_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_items_2fitems_2eproto;
};
// -------------------------------------------------------------------

class GetContainerItemsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.items.GetContainerItemsResponse) */ {
 public:
  GetContainerItemsResponse();
  virtual ~GetContainerItemsResponse();

  GetContainerItemsResponse(const GetContainerItemsResponse& from);
  GetContainerItemsResponse(GetContainerItemsResponse&& from) noexcept
    : GetContainerItemsResponse() {
    *this = ::std::move(from);
  }

  inline GetContainerItemsResponse& operator=(const GetContainerItemsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetContainerItemsResponse& operator=(GetContainerItemsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetContainerItemsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetContainerItemsResponse* internal_default_instance() {
    return reinterpret_cast<const GetContainerItemsResponse*>(
               &_GetContainerItemsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetContainerItemsResponse& a, GetContainerItemsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetContainerItemsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetContainerItemsResponse* New() const final {
    return CreateMaybeMessage<GetContainerItemsResponse>(nullptr);
  }

  GetContainerItemsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetContainerItemsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetContainerItemsResponse& from);
  void MergeFrom(const GetContainerItemsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetContainerItemsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.items.GetContainerItemsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_items_2fitems_2eproto);
    return ::descriptor_table_items_2fitems_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .mruv.InsideItem items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::mruv::InsideItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::InsideItem >*
      mutable_items();
  private:
  const ::mruv::InsideItem& _internal_items(int index) const;
  ::mruv::InsideItem* _internal_add_items();
  public:
  const ::mruv::InsideItem& items(int index) const;
  ::mruv::InsideItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::InsideItem >&
      items() const;

  // @@protoc_insertion_point(class_scope:mruv.items.GetContainerItemsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::InsideItem > items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_items_2fitems_2eproto;
};
// -------------------------------------------------------------------

class PullItemRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.items.PullItemRequest) */ {
 public:
  PullItemRequest();
  virtual ~PullItemRequest();

  PullItemRequest(const PullItemRequest& from);
  PullItemRequest(PullItemRequest&& from) noexcept
    : PullItemRequest() {
    *this = ::std::move(from);
  }

  inline PullItemRequest& operator=(const PullItemRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PullItemRequest& operator=(PullItemRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PullItemRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PullItemRequest* internal_default_instance() {
    return reinterpret_cast<const PullItemRequest*>(
               &_PullItemRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PullItemRequest& a, PullItemRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PullItemRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PullItemRequest* New() const final {
    return CreateMaybeMessage<PullItemRequest>(nullptr);
  }

  PullItemRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PullItemRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PullItemRequest& from);
  void MergeFrom(const PullItemRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PullItemRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.items.PullItemRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_items_2fitems_2eproto);
    return ::descriptor_table_items_2fitems_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerIdFieldNumber = 1,
    kItemIdFieldNumber = 2,
  };
  // uint32 container_id = 1;
  void clear_container_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 container_id() const;
  void set_container_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_container_id() const;
  void _internal_set_container_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 item_id = 2;
  void clear_item_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 item_id() const;
  void set_item_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_item_id() const;
  void _internal_set_item_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.items.PullItemRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 container_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 item_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_items_2fitems_2eproto;
};
// -------------------------------------------------------------------

class SortItemsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.items.SortItemsRequest) */ {
 public:
  SortItemsRequest();
  virtual ~SortItemsRequest();

  SortItemsRequest(const SortItemsRequest& from);
  SortItemsRequest(SortItemsRequest&& from) noexcept
    : SortItemsRequest() {
    *this = ::std::move(from);
  }

  inline SortItemsRequest& operator=(const SortItemsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SortItemsRequest& operator=(SortItemsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SortItemsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SortItemsRequest* internal_default_instance() {
    return reinterpret_cast<const SortItemsRequest*>(
               &_SortItemsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SortItemsRequest& a, SortItemsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SortItemsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SortItemsRequest* New() const final {
    return CreateMaybeMessage<SortItemsRequest>(nullptr);
  }

  SortItemsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SortItemsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SortItemsRequest& from);
  void MergeFrom(const SortItemsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SortItemsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.items.SortItemsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_items_2fitems_2eproto);
    return ::descriptor_table_items_2fitems_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerIdFieldNumber = 1,
    kSortByFieldNumber = 2,
  };
  // uint32 container_id = 1;
  void clear_container_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 container_id() const;
  void set_container_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_container_id() const;
  void _internal_set_container_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .mruv.SortingMode sort_by = 2;
  void clear_sort_by();
  ::mruv::SortingMode sort_by() const;
  void set_sort_by(::mruv::SortingMode value);
  private:
  ::mruv::SortingMode _internal_sort_by() const;
  void _internal_set_sort_by(::mruv::SortingMode value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.items.SortItemsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 container_id_;
  int sort_by_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_items_2fitems_2eproto;
};
// -------------------------------------------------------------------

class SortItemsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.items.SortItemsResponse) */ {
 public:
  SortItemsResponse();
  virtual ~SortItemsResponse();

  SortItemsResponse(const SortItemsResponse& from);
  SortItemsResponse(SortItemsResponse&& from) noexcept
    : SortItemsResponse() {
    *this = ::std::move(from);
  }

  inline SortItemsResponse& operator=(const SortItemsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SortItemsResponse& operator=(SortItemsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SortItemsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SortItemsResponse* internal_default_instance() {
    return reinterpret_cast<const SortItemsResponse*>(
               &_SortItemsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SortItemsResponse& a, SortItemsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SortItemsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SortItemsResponse* New() const final {
    return CreateMaybeMessage<SortItemsResponse>(nullptr);
  }

  SortItemsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SortItemsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SortItemsResponse& from);
  void MergeFrom(const SortItemsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SortItemsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.items.SortItemsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_items_2fitems_2eproto);
    return ::descriptor_table_items_2fitems_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerFieldNumber = 1,
  };
  // .mruv.Container container = 1;
  bool has_container() const;
  private:
  bool _internal_has_container() const;
  public:
  void clear_container();
  const ::mruv::Container& container() const;
  ::mruv::Container* release_container();
  ::mruv::Container* mutable_container();
  void set_allocated_container(::mruv::Container* container);
  private:
  const ::mruv::Container& _internal_container() const;
  ::mruv::Container* _internal_mutable_container();
  public:

  // @@protoc_insertion_point(class_scope:mruv.items.SortItemsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mruv::Container* container_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_items_2fitems_2eproto;
};
// -------------------------------------------------------------------

class GetNearestItemsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.items.GetNearestItemsRequest) */ {
 public:
  GetNearestItemsRequest();
  virtual ~GetNearestItemsRequest();

  GetNearestItemsRequest(const GetNearestItemsRequest& from);
  GetNearestItemsRequest(GetNearestItemsRequest&& from) noexcept
    : GetNearestItemsRequest() {
    *this = ::std::move(from);
  }

  inline GetNearestItemsRequest& operator=(const GetNearestItemsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNearestItemsRequest& operator=(GetNearestItemsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetNearestItemsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNearestItemsRequest* internal_default_instance() {
    return reinterpret_cast<const GetNearestItemsRequest*>(
               &_GetNearestItemsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GetNearestItemsRequest& a, GetNearestItemsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNearestItemsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetNearestItemsRequest* New() const final {
    return CreateMaybeMessage<GetNearestItemsRequest>(nullptr);
  }

  GetNearestItemsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetNearestItemsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetNearestItemsRequest& from);
  void MergeFrom(const GetNearestItemsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNearestItemsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.items.GetNearestItemsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_items_2fitems_2eproto);
    return ::descriptor_table_items_2fitems_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kDistanceLimitFieldNumber = 3,
    kContainerIdFieldNumber = 2,
  };
  // .mruv.Position position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::mruv::Position& position() const;
  ::mruv::Position* release_position();
  ::mruv::Position* mutable_position();
  void set_allocated_position(::mruv::Position* position);
  private:
  const ::mruv::Position& _internal_position() const;
  ::mruv::Position* _internal_mutable_position();
  public:

  // double distance_limit = 3;
  void clear_distance_limit();
  double distance_limit() const;
  void set_distance_limit(double value);
  private:
  double _internal_distance_limit() const;
  void _internal_set_distance_limit(double value);
  public:

  // uint32 container_id = 2;
  void clear_container_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 container_id() const;
  void set_container_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_container_id() const;
  void _internal_set_container_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.items.GetNearestItemsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mruv::Position* position_;
  double distance_limit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 container_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_items_2fitems_2eproto;
};
// -------------------------------------------------------------------

class GetNearestItemsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.items.GetNearestItemsResponse) */ {
 public:
  GetNearestItemsResponse();
  virtual ~GetNearestItemsResponse();

  GetNearestItemsResponse(const GetNearestItemsResponse& from);
  GetNearestItemsResponse(GetNearestItemsResponse&& from) noexcept
    : GetNearestItemsResponse() {
    *this = ::std::move(from);
  }

  inline GetNearestItemsResponse& operator=(const GetNearestItemsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNearestItemsResponse& operator=(GetNearestItemsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetNearestItemsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNearestItemsResponse* internal_default_instance() {
    return reinterpret_cast<const GetNearestItemsResponse*>(
               &_GetNearestItemsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GetNearestItemsResponse& a, GetNearestItemsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNearestItemsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetNearestItemsResponse* New() const final {
    return CreateMaybeMessage<GetNearestItemsResponse>(nullptr);
  }

  GetNearestItemsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetNearestItemsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetNearestItemsResponse& from);
  void MergeFrom(const GetNearestItemsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNearestItemsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.items.GetNearestItemsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_items_2fitems_2eproto);
    return ::descriptor_table_items_2fitems_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 1,
  };
  // repeated .mruv.InsideItem item = 1;
  int item_size() const;
  private:
  int _internal_item_size() const;
  public:
  void clear_item();
  ::mruv::InsideItem* mutable_item(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::InsideItem >*
      mutable_item();
  private:
  const ::mruv::InsideItem& _internal_item(int index) const;
  ::mruv::InsideItem* _internal_add_item();
  public:
  const ::mruv::InsideItem& item(int index) const;
  ::mruv::InsideItem* add_item();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::InsideItem >&
      item() const;

  // @@protoc_insertion_point(class_scope:mruv.items.GetNearestItemsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::InsideItem > item_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_items_2fitems_2eproto;
};
// -------------------------------------------------------------------

class UseItemRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.items.UseItemRequest) */ {
 public:
  UseItemRequest();
  virtual ~UseItemRequest();

  UseItemRequest(const UseItemRequest& from);
  UseItemRequest(UseItemRequest&& from) noexcept
    : UseItemRequest() {
    *this = ::std::move(from);
  }

  inline UseItemRequest& operator=(const UseItemRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UseItemRequest& operator=(UseItemRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UseItemRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UseItemRequest* internal_default_instance() {
    return reinterpret_cast<const UseItemRequest*>(
               &_UseItemRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(UseItemRequest& a, UseItemRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UseItemRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UseItemRequest* New() const final {
    return CreateMaybeMessage<UseItemRequest>(nullptr);
  }

  UseItemRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UseItemRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UseItemRequest& from);
  void MergeFrom(const UseItemRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UseItemRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.items.UseItemRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_items_2fitems_2eproto);
    return ::descriptor_table_items_2fitems_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdFieldNumber = 1,
  };
  // uint32 item_id = 1;
  void clear_item_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 item_id() const;
  void set_item_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_item_id() const;
  void _internal_set_item_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.items.UseItemRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 item_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_items_2fitems_2eproto;
};
// -------------------------------------------------------------------

class UseItemResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.items.UseItemResponse) */ {
 public:
  UseItemResponse();
  virtual ~UseItemResponse();

  UseItemResponse(const UseItemResponse& from);
  UseItemResponse(UseItemResponse&& from) noexcept
    : UseItemResponse() {
    *this = ::std::move(from);
  }

  inline UseItemResponse& operator=(const UseItemResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UseItemResponse& operator=(UseItemResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UseItemResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UseItemResponse* internal_default_instance() {
    return reinterpret_cast<const UseItemResponse*>(
               &_UseItemResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(UseItemResponse& a, UseItemResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UseItemResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UseItemResponse* New() const final {
    return CreateMaybeMessage<UseItemResponse>(nullptr);
  }

  UseItemResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UseItemResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UseItemResponse& from);
  void MergeFrom(const UseItemResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UseItemResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.items.UseItemResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_items_2fitems_2eproto);
    return ::descriptor_table_items_2fitems_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.items.UseItemResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_items_2fitems_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetItemsRequest

// uint32 limit = 1;
inline void GetItemsRequest::clear_limit() {
  limit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetItemsRequest::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetItemsRequest::limit() const {
  // @@protoc_insertion_point(field_get:mruv.items.GetItemsRequest.limit)
  return _internal_limit();
}
inline void GetItemsRequest::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  limit_ = value;
}
inline void GetItemsRequest::set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:mruv.items.GetItemsRequest.limit)
}

// -------------------------------------------------------------------

// GetItemsResponse

// repeated .mruv.Item items = 1;
inline int GetItemsResponse::_internal_items_size() const {
  return items_.size();
}
inline int GetItemsResponse::items_size() const {
  return _internal_items_size();
}
inline ::mruv::Item* GetItemsResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:mruv.items.GetItemsResponse.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::Item >*
GetItemsResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:mruv.items.GetItemsResponse.items)
  return &items_;
}
inline const ::mruv::Item& GetItemsResponse::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::mruv::Item& GetItemsResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:mruv.items.GetItemsResponse.items)
  return _internal_items(index);
}
inline ::mruv::Item* GetItemsResponse::_internal_add_items() {
  return items_.Add();
}
inline ::mruv::Item* GetItemsResponse::add_items() {
  // @@protoc_insertion_point(field_add:mruv.items.GetItemsResponse.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::Item >&
GetItemsResponse::items() const {
  // @@protoc_insertion_point(field_list:mruv.items.GetItemsResponse.items)
  return items_;
}

// -------------------------------------------------------------------

// GetItemTypesRequest

// uint32 limit = 1;
inline void GetItemTypesRequest::clear_limit() {
  limit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetItemTypesRequest::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetItemTypesRequest::limit() const {
  // @@protoc_insertion_point(field_get:mruv.items.GetItemTypesRequest.limit)
  return _internal_limit();
}
inline void GetItemTypesRequest::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  limit_ = value;
}
inline void GetItemTypesRequest::set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:mruv.items.GetItemTypesRequest.limit)
}

// -------------------------------------------------------------------

// GetItemTypesResponse

// repeated .mruv.ItemType item_types = 1;
inline int GetItemTypesResponse::_internal_item_types_size() const {
  return item_types_.size();
}
inline int GetItemTypesResponse::item_types_size() const {
  return _internal_item_types_size();
}
inline ::mruv::ItemType* GetItemTypesResponse::mutable_item_types(int index) {
  // @@protoc_insertion_point(field_mutable:mruv.items.GetItemTypesResponse.item_types)
  return item_types_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::ItemType >*
GetItemTypesResponse::mutable_item_types() {
  // @@protoc_insertion_point(field_mutable_list:mruv.items.GetItemTypesResponse.item_types)
  return &item_types_;
}
inline const ::mruv::ItemType& GetItemTypesResponse::_internal_item_types(int index) const {
  return item_types_.Get(index);
}
inline const ::mruv::ItemType& GetItemTypesResponse::item_types(int index) const {
  // @@protoc_insertion_point(field_get:mruv.items.GetItemTypesResponse.item_types)
  return _internal_item_types(index);
}
inline ::mruv::ItemType* GetItemTypesResponse::_internal_add_item_types() {
  return item_types_.Add();
}
inline ::mruv::ItemType* GetItemTypesResponse::add_item_types() {
  // @@protoc_insertion_point(field_add:mruv.items.GetItemTypesResponse.item_types)
  return _internal_add_item_types();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::ItemType >&
GetItemTypesResponse::item_types() const {
  // @@protoc_insertion_point(field_list:mruv.items.GetItemTypesResponse.item_types)
  return item_types_;
}

// -------------------------------------------------------------------

// GetContainersRequest

// uint32 limit = 1;
inline void GetContainersRequest::clear_limit() {
  limit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetContainersRequest::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetContainersRequest::limit() const {
  // @@protoc_insertion_point(field_get:mruv.items.GetContainersRequest.limit)
  return _internal_limit();
}
inline void GetContainersRequest::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  limit_ = value;
}
inline void GetContainersRequest::set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:mruv.items.GetContainersRequest.limit)
}

// -------------------------------------------------------------------

// GetContainersResponse

// repeated .mruv.Container containers = 1;
inline int GetContainersResponse::_internal_containers_size() const {
  return containers_.size();
}
inline int GetContainersResponse::containers_size() const {
  return _internal_containers_size();
}
inline ::mruv::Container* GetContainersResponse::mutable_containers(int index) {
  // @@protoc_insertion_point(field_mutable:mruv.items.GetContainersResponse.containers)
  return containers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::Container >*
GetContainersResponse::mutable_containers() {
  // @@protoc_insertion_point(field_mutable_list:mruv.items.GetContainersResponse.containers)
  return &containers_;
}
inline const ::mruv::Container& GetContainersResponse::_internal_containers(int index) const {
  return containers_.Get(index);
}
inline const ::mruv::Container& GetContainersResponse::containers(int index) const {
  // @@protoc_insertion_point(field_get:mruv.items.GetContainersResponse.containers)
  return _internal_containers(index);
}
inline ::mruv::Container* GetContainersResponse::_internal_add_containers() {
  return containers_.Add();
}
inline ::mruv::Container* GetContainersResponse::add_containers() {
  // @@protoc_insertion_point(field_add:mruv.items.GetContainersResponse.containers)
  return _internal_add_containers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::Container >&
GetContainersResponse::containers() const {
  // @@protoc_insertion_point(field_list:mruv.items.GetContainersResponse.containers)
  return containers_;
}

// -------------------------------------------------------------------

// GetContainerTypesRequest

// uint32 limit = 1;
inline void GetContainerTypesRequest::clear_limit() {
  limit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetContainerTypesRequest::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetContainerTypesRequest::limit() const {
  // @@protoc_insertion_point(field_get:mruv.items.GetContainerTypesRequest.limit)
  return _internal_limit();
}
inline void GetContainerTypesRequest::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  limit_ = value;
}
inline void GetContainerTypesRequest::set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:mruv.items.GetContainerTypesRequest.limit)
}

// -------------------------------------------------------------------

// GetContainerTypesResponse

// repeated .mruv.ContainerType container_types = 1;
inline int GetContainerTypesResponse::_internal_container_types_size() const {
  return container_types_.size();
}
inline int GetContainerTypesResponse::container_types_size() const {
  return _internal_container_types_size();
}
inline ::mruv::ContainerType* GetContainerTypesResponse::mutable_container_types(int index) {
  // @@protoc_insertion_point(field_mutable:mruv.items.GetContainerTypesResponse.container_types)
  return container_types_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::ContainerType >*
GetContainerTypesResponse::mutable_container_types() {
  // @@protoc_insertion_point(field_mutable_list:mruv.items.GetContainerTypesResponse.container_types)
  return &container_types_;
}
inline const ::mruv::ContainerType& GetContainerTypesResponse::_internal_container_types(int index) const {
  return container_types_.Get(index);
}
inline const ::mruv::ContainerType& GetContainerTypesResponse::container_types(int index) const {
  // @@protoc_insertion_point(field_get:mruv.items.GetContainerTypesResponse.container_types)
  return _internal_container_types(index);
}
inline ::mruv::ContainerType* GetContainerTypesResponse::_internal_add_container_types() {
  return container_types_.Add();
}
inline ::mruv::ContainerType* GetContainerTypesResponse::add_container_types() {
  // @@protoc_insertion_point(field_add:mruv.items.GetContainerTypesResponse.container_types)
  return _internal_add_container_types();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::ContainerType >&
GetContainerTypesResponse::container_types() const {
  // @@protoc_insertion_point(field_list:mruv.items.GetContainerTypesResponse.container_types)
  return container_types_;
}

// -------------------------------------------------------------------

// PutItemRequest

// uint32 container_id = 1;
inline void PutItemRequest::clear_container_id() {
  container_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PutItemRequest::_internal_container_id() const {
  return container_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PutItemRequest::container_id() const {
  // @@protoc_insertion_point(field_get:mruv.items.PutItemRequest.container_id)
  return _internal_container_id();
}
inline void PutItemRequest::_internal_set_container_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  container_id_ = value;
}
inline void PutItemRequest::set_container_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_container_id(value);
  // @@protoc_insertion_point(field_set:mruv.items.PutItemRequest.container_id)
}

// uint32 item_id = 2;
inline void PutItemRequest::clear_item_id() {
  item_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PutItemRequest::_internal_item_id() const {
  return item_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PutItemRequest::item_id() const {
  // @@protoc_insertion_point(field_get:mruv.items.PutItemRequest.item_id)
  return _internal_item_id();
}
inline void PutItemRequest::_internal_set_item_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  item_id_ = value;
}
inline void PutItemRequest::set_item_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:mruv.items.PutItemRequest.item_id)
}

// int32 slot = 3;
inline bool PutItemRequest::_internal_has_slot() const {
  return where_case() == kSlot;
}
inline void PutItemRequest::set_has_slot() {
  _oneof_case_[0] = kSlot;
}
inline void PutItemRequest::clear_slot() {
  if (_internal_has_slot()) {
    where_.slot_ = 0;
    clear_has_where();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PutItemRequest::_internal_slot() const {
  if (_internal_has_slot()) {
    return where_.slot_;
  }
  return 0;
}
inline void PutItemRequest::_internal_set_slot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_slot()) {
    clear_where();
    set_has_slot();
  }
  where_.slot_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PutItemRequest::slot() const {
  // @@protoc_insertion_point(field_get:mruv.items.PutItemRequest.slot)
  return _internal_slot();
}
inline void PutItemRequest::set_slot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_slot(value);
  // @@protoc_insertion_point(field_set:mruv.items.PutItemRequest.slot)
}

inline bool PutItemRequest::has_where() const {
  return where_case() != WHERE_NOT_SET;
}
inline void PutItemRequest::clear_has_where() {
  _oneof_case_[0] = WHERE_NOT_SET;
}
inline PutItemRequest::WhereCase PutItemRequest::where_case() const {
  return PutItemRequest::WhereCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PutItemResponse

// .mruv.InsideItem inside_item = 1;
inline bool PutItemResponse::_internal_has_inside_item() const {
  return this != internal_default_instance() && inside_item_ != nullptr;
}
inline bool PutItemResponse::has_inside_item() const {
  return _internal_has_inside_item();
}
inline const ::mruv::InsideItem& PutItemResponse::_internal_inside_item() const {
  const ::mruv::InsideItem* p = inside_item_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mruv::InsideItem*>(
      &::mruv::_InsideItem_default_instance_);
}
inline const ::mruv::InsideItem& PutItemResponse::inside_item() const {
  // @@protoc_insertion_point(field_get:mruv.items.PutItemResponse.inside_item)
  return _internal_inside_item();
}
inline ::mruv::InsideItem* PutItemResponse::release_inside_item() {
  // @@protoc_insertion_point(field_release:mruv.items.PutItemResponse.inside_item)
  
  ::mruv::InsideItem* temp = inside_item_;
  inside_item_ = nullptr;
  return temp;
}
inline ::mruv::InsideItem* PutItemResponse::_internal_mutable_inside_item() {
  
  if (inside_item_ == nullptr) {
    auto* p = CreateMaybeMessage<::mruv::InsideItem>(GetArenaNoVirtual());
    inside_item_ = p;
  }
  return inside_item_;
}
inline ::mruv::InsideItem* PutItemResponse::mutable_inside_item() {
  // @@protoc_insertion_point(field_mutable:mruv.items.PutItemResponse.inside_item)
  return _internal_mutable_inside_item();
}
inline void PutItemResponse::set_allocated_inside_item(::mruv::InsideItem* inside_item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(inside_item_);
  }
  if (inside_item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      inside_item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inside_item, submessage_arena);
    }
    
  } else {
    
  }
  inside_item_ = inside_item;
  // @@protoc_insertion_point(field_set_allocated:mruv.items.PutItemResponse.inside_item)
}

// -------------------------------------------------------------------

// GetContainerItemsRequest

// uint32 container_id = 1;
inline void GetContainerItemsRequest::clear_container_id() {
  container_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetContainerItemsRequest::_internal_container_id() const {
  return container_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetContainerItemsRequest::container_id() const {
  // @@protoc_insertion_point(field_get:mruv.items.GetContainerItemsRequest.container_id)
  return _internal_container_id();
}
inline void GetContainerItemsRequest::_internal_set_container_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  container_id_ = value;
}
inline void GetContainerItemsRequest::set_container_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_container_id(value);
  // @@protoc_insertion_point(field_set:mruv.items.GetContainerItemsRequest.container_id)
}

// uint32 limit = 2;
inline void GetContainerItemsRequest::clear_limit() {
  limit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetContainerItemsRequest::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetContainerItemsRequest::limit() const {
  // @@protoc_insertion_point(field_get:mruv.items.GetContainerItemsRequest.limit)
  return _internal_limit();
}
inline void GetContainerItemsRequest::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  limit_ = value;
}
inline void GetContainerItemsRequest::set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:mruv.items.GetContainerItemsRequest.limit)
}

// -------------------------------------------------------------------

// GetContainerItemsResponse

// repeated .mruv.InsideItem items = 1;
inline int GetContainerItemsResponse::_internal_items_size() const {
  return items_.size();
}
inline int GetContainerItemsResponse::items_size() const {
  return _internal_items_size();
}
inline ::mruv::InsideItem* GetContainerItemsResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:mruv.items.GetContainerItemsResponse.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::InsideItem >*
GetContainerItemsResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:mruv.items.GetContainerItemsResponse.items)
  return &items_;
}
inline const ::mruv::InsideItem& GetContainerItemsResponse::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::mruv::InsideItem& GetContainerItemsResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:mruv.items.GetContainerItemsResponse.items)
  return _internal_items(index);
}
inline ::mruv::InsideItem* GetContainerItemsResponse::_internal_add_items() {
  return items_.Add();
}
inline ::mruv::InsideItem* GetContainerItemsResponse::add_items() {
  // @@protoc_insertion_point(field_add:mruv.items.GetContainerItemsResponse.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::InsideItem >&
GetContainerItemsResponse::items() const {
  // @@protoc_insertion_point(field_list:mruv.items.GetContainerItemsResponse.items)
  return items_;
}

// -------------------------------------------------------------------

// PullItemRequest

// uint32 container_id = 1;
inline void PullItemRequest::clear_container_id() {
  container_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PullItemRequest::_internal_container_id() const {
  return container_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PullItemRequest::container_id() const {
  // @@protoc_insertion_point(field_get:mruv.items.PullItemRequest.container_id)
  return _internal_container_id();
}
inline void PullItemRequest::_internal_set_container_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  container_id_ = value;
}
inline void PullItemRequest::set_container_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_container_id(value);
  // @@protoc_insertion_point(field_set:mruv.items.PullItemRequest.container_id)
}

// uint32 item_id = 2;
inline void PullItemRequest::clear_item_id() {
  item_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PullItemRequest::_internal_item_id() const {
  return item_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PullItemRequest::item_id() const {
  // @@protoc_insertion_point(field_get:mruv.items.PullItemRequest.item_id)
  return _internal_item_id();
}
inline void PullItemRequest::_internal_set_item_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  item_id_ = value;
}
inline void PullItemRequest::set_item_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:mruv.items.PullItemRequest.item_id)
}

// -------------------------------------------------------------------

// SortItemsRequest

// uint32 container_id = 1;
inline void SortItemsRequest::clear_container_id() {
  container_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SortItemsRequest::_internal_container_id() const {
  return container_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SortItemsRequest::container_id() const {
  // @@protoc_insertion_point(field_get:mruv.items.SortItemsRequest.container_id)
  return _internal_container_id();
}
inline void SortItemsRequest::_internal_set_container_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  container_id_ = value;
}
inline void SortItemsRequest::set_container_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_container_id(value);
  // @@protoc_insertion_point(field_set:mruv.items.SortItemsRequest.container_id)
}

// .mruv.SortingMode sort_by = 2;
inline void SortItemsRequest::clear_sort_by() {
  sort_by_ = 0;
}
inline ::mruv::SortingMode SortItemsRequest::_internal_sort_by() const {
  return static_cast< ::mruv::SortingMode >(sort_by_);
}
inline ::mruv::SortingMode SortItemsRequest::sort_by() const {
  // @@protoc_insertion_point(field_get:mruv.items.SortItemsRequest.sort_by)
  return _internal_sort_by();
}
inline void SortItemsRequest::_internal_set_sort_by(::mruv::SortingMode value) {
  
  sort_by_ = value;
}
inline void SortItemsRequest::set_sort_by(::mruv::SortingMode value) {
  _internal_set_sort_by(value);
  // @@protoc_insertion_point(field_set:mruv.items.SortItemsRequest.sort_by)
}

// -------------------------------------------------------------------

// SortItemsResponse

// .mruv.Container container = 1;
inline bool SortItemsResponse::_internal_has_container() const {
  return this != internal_default_instance() && container_ != nullptr;
}
inline bool SortItemsResponse::has_container() const {
  return _internal_has_container();
}
inline const ::mruv::Container& SortItemsResponse::_internal_container() const {
  const ::mruv::Container* p = container_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mruv::Container*>(
      &::mruv::_Container_default_instance_);
}
inline const ::mruv::Container& SortItemsResponse::container() const {
  // @@protoc_insertion_point(field_get:mruv.items.SortItemsResponse.container)
  return _internal_container();
}
inline ::mruv::Container* SortItemsResponse::release_container() {
  // @@protoc_insertion_point(field_release:mruv.items.SortItemsResponse.container)
  
  ::mruv::Container* temp = container_;
  container_ = nullptr;
  return temp;
}
inline ::mruv::Container* SortItemsResponse::_internal_mutable_container() {
  
  if (container_ == nullptr) {
    auto* p = CreateMaybeMessage<::mruv::Container>(GetArenaNoVirtual());
    container_ = p;
  }
  return container_;
}
inline ::mruv::Container* SortItemsResponse::mutable_container() {
  // @@protoc_insertion_point(field_mutable:mruv.items.SortItemsResponse.container)
  return _internal_mutable_container();
}
inline void SortItemsResponse::set_allocated_container(::mruv::Container* container) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(container_);
  }
  if (container) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      container = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, container, submessage_arena);
    }
    
  } else {
    
  }
  container_ = container;
  // @@protoc_insertion_point(field_set_allocated:mruv.items.SortItemsResponse.container)
}

// -------------------------------------------------------------------

// GetNearestItemsRequest

// .mruv.Position position = 1;
inline bool GetNearestItemsRequest::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool GetNearestItemsRequest::has_position() const {
  return _internal_has_position();
}
inline const ::mruv::Position& GetNearestItemsRequest::_internal_position() const {
  const ::mruv::Position* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mruv::Position*>(
      &::mruv::_Position_default_instance_);
}
inline const ::mruv::Position& GetNearestItemsRequest::position() const {
  // @@protoc_insertion_point(field_get:mruv.items.GetNearestItemsRequest.position)
  return _internal_position();
}
inline ::mruv::Position* GetNearestItemsRequest::release_position() {
  // @@protoc_insertion_point(field_release:mruv.items.GetNearestItemsRequest.position)
  
  ::mruv::Position* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::mruv::Position* GetNearestItemsRequest::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::mruv::Position>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::mruv::Position* GetNearestItemsRequest::mutable_position() {
  // @@protoc_insertion_point(field_mutable:mruv.items.GetNearestItemsRequest.position)
  return _internal_mutable_position();
}
inline void GetNearestItemsRequest::set_allocated_position(::mruv::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:mruv.items.GetNearestItemsRequest.position)
}

// uint32 container_id = 2;
inline void GetNearestItemsRequest::clear_container_id() {
  container_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetNearestItemsRequest::_internal_container_id() const {
  return container_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetNearestItemsRequest::container_id() const {
  // @@protoc_insertion_point(field_get:mruv.items.GetNearestItemsRequest.container_id)
  return _internal_container_id();
}
inline void GetNearestItemsRequest::_internal_set_container_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  container_id_ = value;
}
inline void GetNearestItemsRequest::set_container_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_container_id(value);
  // @@protoc_insertion_point(field_set:mruv.items.GetNearestItemsRequest.container_id)
}

// double distance_limit = 3;
inline void GetNearestItemsRequest::clear_distance_limit() {
  distance_limit_ = 0;
}
inline double GetNearestItemsRequest::_internal_distance_limit() const {
  return distance_limit_;
}
inline double GetNearestItemsRequest::distance_limit() const {
  // @@protoc_insertion_point(field_get:mruv.items.GetNearestItemsRequest.distance_limit)
  return _internal_distance_limit();
}
inline void GetNearestItemsRequest::_internal_set_distance_limit(double value) {
  
  distance_limit_ = value;
}
inline void GetNearestItemsRequest::set_distance_limit(double value) {
  _internal_set_distance_limit(value);
  // @@protoc_insertion_point(field_set:mruv.items.GetNearestItemsRequest.distance_limit)
}

// -------------------------------------------------------------------

// GetNearestItemsResponse

// repeated .mruv.InsideItem item = 1;
inline int GetNearestItemsResponse::_internal_item_size() const {
  return item_.size();
}
inline int GetNearestItemsResponse::item_size() const {
  return _internal_item_size();
}
inline ::mruv::InsideItem* GetNearestItemsResponse::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:mruv.items.GetNearestItemsResponse.item)
  return item_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::InsideItem >*
GetNearestItemsResponse::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:mruv.items.GetNearestItemsResponse.item)
  return &item_;
}
inline const ::mruv::InsideItem& GetNearestItemsResponse::_internal_item(int index) const {
  return item_.Get(index);
}
inline const ::mruv::InsideItem& GetNearestItemsResponse::item(int index) const {
  // @@protoc_insertion_point(field_get:mruv.items.GetNearestItemsResponse.item)
  return _internal_item(index);
}
inline ::mruv::InsideItem* GetNearestItemsResponse::_internal_add_item() {
  return item_.Add();
}
inline ::mruv::InsideItem* GetNearestItemsResponse::add_item() {
  // @@protoc_insertion_point(field_add:mruv.items.GetNearestItemsResponse.item)
  return _internal_add_item();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::InsideItem >&
GetNearestItemsResponse::item() const {
  // @@protoc_insertion_point(field_list:mruv.items.GetNearestItemsResponse.item)
  return item_;
}

// -------------------------------------------------------------------

// UseItemRequest

// uint32 item_id = 1;
inline void UseItemRequest::clear_item_id() {
  item_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UseItemRequest::_internal_item_id() const {
  return item_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UseItemRequest::item_id() const {
  // @@protoc_insertion_point(field_get:mruv.items.UseItemRequest.item_id)
  return _internal_item_id();
}
inline void UseItemRequest::_internal_set_item_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  item_id_ = value;
}
inline void UseItemRequest::set_item_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:mruv.items.UseItemRequest.item_id)
}

// -------------------------------------------------------------------

// UseItemResponse

// bool success = 1;
inline void UseItemResponse::clear_success() {
  success_ = false;
}
inline bool UseItemResponse::_internal_success() const {
  return success_;
}
inline bool UseItemResponse::success() const {
  // @@protoc_insertion_point(field_get:mruv.items.UseItemResponse.success)
  return _internal_success();
}
inline void UseItemResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void UseItemResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:mruv.items.UseItemResponse.success)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace items
}  // namespace mruv

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_items_2fitems_2eproto
