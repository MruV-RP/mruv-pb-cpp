// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: objects/movable.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_objects_2fmovable_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_objects_2fmovable_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "objects/objects.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_objects_2fmovable_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_objects_2fmovable_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_objects_2fmovable_2eproto;
namespace mruv {
namespace objects {
class CreateMovableObjectRequest;
class CreateMovableObjectRequestDefaultTypeInternal;
extern CreateMovableObjectRequestDefaultTypeInternal _CreateMovableObjectRequest_default_instance_;
class CreateMovableObjectResponse;
class CreateMovableObjectResponseDefaultTypeInternal;
extern CreateMovableObjectResponseDefaultTypeInternal _CreateMovableObjectResponse_default_instance_;
class DeleteMovableObjectRequest;
class DeleteMovableObjectRequestDefaultTypeInternal;
extern DeleteMovableObjectRequestDefaultTypeInternal _DeleteMovableObjectRequest_default_instance_;
class DeleteMovableObjectResponse;
class DeleteMovableObjectResponseDefaultTypeInternal;
extern DeleteMovableObjectResponseDefaultTypeInternal _DeleteMovableObjectResponse_default_instance_;
class GetMovableObjectRequest;
class GetMovableObjectRequestDefaultTypeInternal;
extern GetMovableObjectRequestDefaultTypeInternal _GetMovableObjectRequest_default_instance_;
class GetMovableObjectResponse;
class GetMovableObjectResponseDefaultTypeInternal;
extern GetMovableObjectResponseDefaultTypeInternal _GetMovableObjectResponse_default_instance_;
class MovableObject;
class MovableObjectDefaultTypeInternal;
extern MovableObjectDefaultTypeInternal _MovableObject_default_instance_;
class MoveObjectNextRequest;
class MoveObjectNextRequestDefaultTypeInternal;
extern MoveObjectNextRequestDefaultTypeInternal _MoveObjectNextRequest_default_instance_;
class MoveObjectNextResponse;
class MoveObjectNextResponseDefaultTypeInternal;
extern MoveObjectNextResponseDefaultTypeInternal _MoveObjectNextResponse_default_instance_;
class MoveObjectPreviousRequest;
class MoveObjectPreviousRequestDefaultTypeInternal;
extern MoveObjectPreviousRequestDefaultTypeInternal _MoveObjectPreviousRequest_default_instance_;
class MoveObjectPreviousResponse;
class MoveObjectPreviousResponseDefaultTypeInternal;
extern MoveObjectPreviousResponseDefaultTypeInternal _MoveObjectPreviousResponse_default_instance_;
class MoveObjectRequest;
class MoveObjectRequestDefaultTypeInternal;
extern MoveObjectRequestDefaultTypeInternal _MoveObjectRequest_default_instance_;
class MoveObjectResponse;
class MoveObjectResponseDefaultTypeInternal;
extern MoveObjectResponseDefaultTypeInternal _MoveObjectResponse_default_instance_;
class State;
class StateDefaultTypeInternal;
extern StateDefaultTypeInternal _State_default_instance_;
class UpdateMovableObjectRequest;
class UpdateMovableObjectRequestDefaultTypeInternal;
extern UpdateMovableObjectRequestDefaultTypeInternal _UpdateMovableObjectRequest_default_instance_;
class UpdateMovableObjectResponse;
class UpdateMovableObjectResponseDefaultTypeInternal;
extern UpdateMovableObjectResponseDefaultTypeInternal _UpdateMovableObjectResponse_default_instance_;
}  // namespace objects
}  // namespace mruv
PROTOBUF_NAMESPACE_OPEN
template<> ::mruv::objects::CreateMovableObjectRequest* Arena::CreateMaybeMessage<::mruv::objects::CreateMovableObjectRequest>(Arena*);
template<> ::mruv::objects::CreateMovableObjectResponse* Arena::CreateMaybeMessage<::mruv::objects::CreateMovableObjectResponse>(Arena*);
template<> ::mruv::objects::DeleteMovableObjectRequest* Arena::CreateMaybeMessage<::mruv::objects::DeleteMovableObjectRequest>(Arena*);
template<> ::mruv::objects::DeleteMovableObjectResponse* Arena::CreateMaybeMessage<::mruv::objects::DeleteMovableObjectResponse>(Arena*);
template<> ::mruv::objects::GetMovableObjectRequest* Arena::CreateMaybeMessage<::mruv::objects::GetMovableObjectRequest>(Arena*);
template<> ::mruv::objects::GetMovableObjectResponse* Arena::CreateMaybeMessage<::mruv::objects::GetMovableObjectResponse>(Arena*);
template<> ::mruv::objects::MovableObject* Arena::CreateMaybeMessage<::mruv::objects::MovableObject>(Arena*);
template<> ::mruv::objects::MoveObjectNextRequest* Arena::CreateMaybeMessage<::mruv::objects::MoveObjectNextRequest>(Arena*);
template<> ::mruv::objects::MoveObjectNextResponse* Arena::CreateMaybeMessage<::mruv::objects::MoveObjectNextResponse>(Arena*);
template<> ::mruv::objects::MoveObjectPreviousRequest* Arena::CreateMaybeMessage<::mruv::objects::MoveObjectPreviousRequest>(Arena*);
template<> ::mruv::objects::MoveObjectPreviousResponse* Arena::CreateMaybeMessage<::mruv::objects::MoveObjectPreviousResponse>(Arena*);
template<> ::mruv::objects::MoveObjectRequest* Arena::CreateMaybeMessage<::mruv::objects::MoveObjectRequest>(Arena*);
template<> ::mruv::objects::MoveObjectResponse* Arena::CreateMaybeMessage<::mruv::objects::MoveObjectResponse>(Arena*);
template<> ::mruv::objects::State* Arena::CreateMaybeMessage<::mruv::objects::State>(Arena*);
template<> ::mruv::objects::UpdateMovableObjectRequest* Arena::CreateMaybeMessage<::mruv::objects::UpdateMovableObjectRequest>(Arena*);
template<> ::mruv::objects::UpdateMovableObjectResponse* Arena::CreateMaybeMessage<::mruv::objects::UpdateMovableObjectResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mruv {
namespace objects {

// ===================================================================

class State :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.objects.State) */ {
 public:
  State();
  virtual ~State();

  State(const State& from);
  State(State&& from) noexcept
    : State() {
    *this = ::std::move(from);
  }

  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }
  inline State& operator=(State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const State* internal_default_instance() {
    return reinterpret_cast<const State*>(
               &_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(State& a, State& b) {
    a.Swap(&b);
  }
  inline void Swap(State* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline State* New() const final {
    return CreateMaybeMessage<State>(nullptr);
  }

  State* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<State>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const State& from);
  void MergeFrom(const State& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(State* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.objects.State";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_objects_2fmovable_2eproto);
    return ::descriptor_table_objects_2fmovable_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
    kRxFieldNumber = 5,
    kRyFieldNumber = 6,
    kRzFieldNumber = 7,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 4;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float rx = 5;
  void clear_rx();
  float rx() const;
  void set_rx(float value);
  private:
  float _internal_rx() const;
  void _internal_set_rx(float value);
  public:

  // float ry = 6;
  void clear_ry();
  float ry() const;
  void set_ry(float value);
  private:
  float _internal_ry() const;
  void _internal_set_ry(float value);
  public:

  // float rz = 7;
  void clear_rz();
  float rz() const;
  void set_rz(float value);
  private:
  float _internal_rz() const;
  void _internal_set_rz(float value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.objects.State)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  float x_;
  float y_;
  float z_;
  float rx_;
  float ry_;
  float rz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_objects_2fmovable_2eproto;
};
// -------------------------------------------------------------------

class MovableObject :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.objects.MovableObject) */ {
 public:
  MovableObject();
  virtual ~MovableObject();

  MovableObject(const MovableObject& from);
  MovableObject(MovableObject&& from) noexcept
    : MovableObject() {
    *this = ::std::move(from);
  }

  inline MovableObject& operator=(const MovableObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline MovableObject& operator=(MovableObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MovableObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MovableObject* internal_default_instance() {
    return reinterpret_cast<const MovableObject*>(
               &_MovableObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MovableObject& a, MovableObject& b) {
    a.Swap(&b);
  }
  inline void Swap(MovableObject* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MovableObject* New() const final {
    return CreateMaybeMessage<MovableObject>(nullptr);
  }

  MovableObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MovableObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MovableObject& from);
  void MergeFrom(const MovableObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MovableObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.objects.MovableObject";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_objects_2fmovable_2eproto);
    return ::descriptor_table_objects_2fmovable_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatesFieldNumber = 2,
    kObjectFieldNumber = 1,
  };
  // repeated .mruv.objects.State states = 2;
  int states_size() const;
  private:
  int _internal_states_size() const;
  public:
  void clear_states();
  ::mruv::objects::State* mutable_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::objects::State >*
      mutable_states();
  private:
  const ::mruv::objects::State& _internal_states(int index) const;
  ::mruv::objects::State* _internal_add_states();
  public:
  const ::mruv::objects::State& states(int index) const;
  ::mruv::objects::State* add_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::objects::State >&
      states() const;

  // .mruv.objects.Object object = 1;
  bool has_object() const;
  private:
  bool _internal_has_object() const;
  public:
  void clear_object();
  const ::mruv::objects::Object& object() const;
  ::mruv::objects::Object* release_object();
  ::mruv::objects::Object* mutable_object();
  void set_allocated_object(::mruv::objects::Object* object);
  private:
  const ::mruv::objects::Object& _internal_object() const;
  ::mruv::objects::Object* _internal_mutable_object();
  public:

  // @@protoc_insertion_point(class_scope:mruv.objects.MovableObject)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::objects::State > states_;
  ::mruv::objects::Object* object_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_objects_2fmovable_2eproto;
};
// -------------------------------------------------------------------

class CreateMovableObjectRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.objects.CreateMovableObjectRequest) */ {
 public:
  CreateMovableObjectRequest();
  virtual ~CreateMovableObjectRequest();

  CreateMovableObjectRequest(const CreateMovableObjectRequest& from);
  CreateMovableObjectRequest(CreateMovableObjectRequest&& from) noexcept
    : CreateMovableObjectRequest() {
    *this = ::std::move(from);
  }

  inline CreateMovableObjectRequest& operator=(const CreateMovableObjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateMovableObjectRequest& operator=(CreateMovableObjectRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateMovableObjectRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateMovableObjectRequest* internal_default_instance() {
    return reinterpret_cast<const CreateMovableObjectRequest*>(
               &_CreateMovableObjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateMovableObjectRequest& a, CreateMovableObjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateMovableObjectRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateMovableObjectRequest* New() const final {
    return CreateMaybeMessage<CreateMovableObjectRequest>(nullptr);
  }

  CreateMovableObjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateMovableObjectRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateMovableObjectRequest& from);
  void MergeFrom(const CreateMovableObjectRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateMovableObjectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.objects.CreateMovableObjectRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_objects_2fmovable_2eproto);
    return ::descriptor_table_objects_2fmovable_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatesFieldNumber = 2,
    kObjectFieldNumber = 1,
  };
  // repeated .mruv.objects.State states = 2;
  int states_size() const;
  private:
  int _internal_states_size() const;
  public:
  void clear_states();
  ::mruv::objects::State* mutable_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::objects::State >*
      mutable_states();
  private:
  const ::mruv::objects::State& _internal_states(int index) const;
  ::mruv::objects::State* _internal_add_states();
  public:
  const ::mruv::objects::State& states(int index) const;
  ::mruv::objects::State* add_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::objects::State >&
      states() const;

  // .mruv.objects.Object object = 1;
  bool has_object() const;
  private:
  bool _internal_has_object() const;
  public:
  void clear_object();
  const ::mruv::objects::Object& object() const;
  ::mruv::objects::Object* release_object();
  ::mruv::objects::Object* mutable_object();
  void set_allocated_object(::mruv::objects::Object* object);
  private:
  const ::mruv::objects::Object& _internal_object() const;
  ::mruv::objects::Object* _internal_mutable_object();
  public:

  // @@protoc_insertion_point(class_scope:mruv.objects.CreateMovableObjectRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::objects::State > states_;
  ::mruv::objects::Object* object_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_objects_2fmovable_2eproto;
};
// -------------------------------------------------------------------

class CreateMovableObjectResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.objects.CreateMovableObjectResponse) */ {
 public:
  CreateMovableObjectResponse();
  virtual ~CreateMovableObjectResponse();

  CreateMovableObjectResponse(const CreateMovableObjectResponse& from);
  CreateMovableObjectResponse(CreateMovableObjectResponse&& from) noexcept
    : CreateMovableObjectResponse() {
    *this = ::std::move(from);
  }

  inline CreateMovableObjectResponse& operator=(const CreateMovableObjectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateMovableObjectResponse& operator=(CreateMovableObjectResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateMovableObjectResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateMovableObjectResponse* internal_default_instance() {
    return reinterpret_cast<const CreateMovableObjectResponse*>(
               &_CreateMovableObjectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateMovableObjectResponse& a, CreateMovableObjectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateMovableObjectResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateMovableObjectResponse* New() const final {
    return CreateMaybeMessage<CreateMovableObjectResponse>(nullptr);
  }

  CreateMovableObjectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateMovableObjectResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateMovableObjectResponse& from);
  void MergeFrom(const CreateMovableObjectResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateMovableObjectResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.objects.CreateMovableObjectResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_objects_2fmovable_2eproto);
    return ::descriptor_table_objects_2fmovable_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.objects.CreateMovableObjectResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_objects_2fmovable_2eproto;
};
// -------------------------------------------------------------------

class GetMovableObjectRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.objects.GetMovableObjectRequest) */ {
 public:
  GetMovableObjectRequest();
  virtual ~GetMovableObjectRequest();

  GetMovableObjectRequest(const GetMovableObjectRequest& from);
  GetMovableObjectRequest(GetMovableObjectRequest&& from) noexcept
    : GetMovableObjectRequest() {
    *this = ::std::move(from);
  }

  inline GetMovableObjectRequest& operator=(const GetMovableObjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMovableObjectRequest& operator=(GetMovableObjectRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMovableObjectRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMovableObjectRequest* internal_default_instance() {
    return reinterpret_cast<const GetMovableObjectRequest*>(
               &_GetMovableObjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetMovableObjectRequest& a, GetMovableObjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMovableObjectRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMovableObjectRequest* New() const final {
    return CreateMaybeMessage<GetMovableObjectRequest>(nullptr);
  }

  GetMovableObjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMovableObjectRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMovableObjectRequest& from);
  void MergeFrom(const GetMovableObjectRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMovableObjectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.objects.GetMovableObjectRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_objects_2fmovable_2eproto);
    return ::descriptor_table_objects_2fmovable_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.objects.GetMovableObjectRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_objects_2fmovable_2eproto;
};
// -------------------------------------------------------------------

class GetMovableObjectResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.objects.GetMovableObjectResponse) */ {
 public:
  GetMovableObjectResponse();
  virtual ~GetMovableObjectResponse();

  GetMovableObjectResponse(const GetMovableObjectResponse& from);
  GetMovableObjectResponse(GetMovableObjectResponse&& from) noexcept
    : GetMovableObjectResponse() {
    *this = ::std::move(from);
  }

  inline GetMovableObjectResponse& operator=(const GetMovableObjectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMovableObjectResponse& operator=(GetMovableObjectResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMovableObjectResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMovableObjectResponse* internal_default_instance() {
    return reinterpret_cast<const GetMovableObjectResponse*>(
               &_GetMovableObjectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetMovableObjectResponse& a, GetMovableObjectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMovableObjectResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMovableObjectResponse* New() const final {
    return CreateMaybeMessage<GetMovableObjectResponse>(nullptr);
  }

  GetMovableObjectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMovableObjectResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMovableObjectResponse& from);
  void MergeFrom(const GetMovableObjectResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMovableObjectResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.objects.GetMovableObjectResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_objects_2fmovable_2eproto);
    return ::descriptor_table_objects_2fmovable_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatesFieldNumber = 2,
    kCurrentStateNameFieldNumber = 4,
    kObjectFieldNumber = 1,
    kCurrentStateIdFieldNumber = 3,
  };
  // repeated .mruv.objects.State states = 2;
  int states_size() const;
  private:
  int _internal_states_size() const;
  public:
  void clear_states();
  ::mruv::objects::State* mutable_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::objects::State >*
      mutable_states();
  private:
  const ::mruv::objects::State& _internal_states(int index) const;
  ::mruv::objects::State* _internal_add_states();
  public:
  const ::mruv::objects::State& states(int index) const;
  ::mruv::objects::State* add_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::objects::State >&
      states() const;

  // string current_state_name = 4;
  void clear_current_state_name();
  const std::string& current_state_name() const;
  void set_current_state_name(const std::string& value);
  void set_current_state_name(std::string&& value);
  void set_current_state_name(const char* value);
  void set_current_state_name(const char* value, size_t size);
  std::string* mutable_current_state_name();
  std::string* release_current_state_name();
  void set_allocated_current_state_name(std::string* current_state_name);
  private:
  const std::string& _internal_current_state_name() const;
  void _internal_set_current_state_name(const std::string& value);
  std::string* _internal_mutable_current_state_name();
  public:

  // .mruv.objects.Object object = 1;
  bool has_object() const;
  private:
  bool _internal_has_object() const;
  public:
  void clear_object();
  const ::mruv::objects::Object& object() const;
  ::mruv::objects::Object* release_object();
  ::mruv::objects::Object* mutable_object();
  void set_allocated_object(::mruv::objects::Object* object);
  private:
  const ::mruv::objects::Object& _internal_object() const;
  ::mruv::objects::Object* _internal_mutable_object();
  public:

  // uint32 current_state_id = 3;
  void clear_current_state_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 current_state_id() const;
  void set_current_state_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_current_state_id() const;
  void _internal_set_current_state_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.objects.GetMovableObjectResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::objects::State > states_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr current_state_name_;
  ::mruv::objects::Object* object_;
  ::PROTOBUF_NAMESPACE_ID::uint32 current_state_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_objects_2fmovable_2eproto;
};
// -------------------------------------------------------------------

class UpdateMovableObjectRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.objects.UpdateMovableObjectRequest) */ {
 public:
  UpdateMovableObjectRequest();
  virtual ~UpdateMovableObjectRequest();

  UpdateMovableObjectRequest(const UpdateMovableObjectRequest& from);
  UpdateMovableObjectRequest(UpdateMovableObjectRequest&& from) noexcept
    : UpdateMovableObjectRequest() {
    *this = ::std::move(from);
  }

  inline UpdateMovableObjectRequest& operator=(const UpdateMovableObjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateMovableObjectRequest& operator=(UpdateMovableObjectRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateMovableObjectRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateMovableObjectRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateMovableObjectRequest*>(
               &_UpdateMovableObjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UpdateMovableObjectRequest& a, UpdateMovableObjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateMovableObjectRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateMovableObjectRequest* New() const final {
    return CreateMaybeMessage<UpdateMovableObjectRequest>(nullptr);
  }

  UpdateMovableObjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateMovableObjectRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateMovableObjectRequest& from);
  void MergeFrom(const UpdateMovableObjectRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateMovableObjectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.objects.UpdateMovableObjectRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_objects_2fmovable_2eproto);
    return ::descriptor_table_objects_2fmovable_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatesFieldNumber = 3,
    kIdFieldNumber = 1,
    kObjectIdFieldNumber = 2,
  };
  // repeated .mruv.objects.State states = 3;
  int states_size() const;
  private:
  int _internal_states_size() const;
  public:
  void clear_states();
  ::mruv::objects::State* mutable_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::objects::State >*
      mutable_states();
  private:
  const ::mruv::objects::State& _internal_states(int index) const;
  ::mruv::objects::State* _internal_add_states();
  public:
  const ::mruv::objects::State& states(int index) const;
  ::mruv::objects::State* add_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::objects::State >&
      states() const;

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 object_id = 2;
  void clear_object_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 object_id() const;
  void set_object_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_object_id() const;
  void _internal_set_object_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.objects.UpdateMovableObjectRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::objects::State > states_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 object_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_objects_2fmovable_2eproto;
};
// -------------------------------------------------------------------

class UpdateMovableObjectResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.objects.UpdateMovableObjectResponse) */ {
 public:
  UpdateMovableObjectResponse();
  virtual ~UpdateMovableObjectResponse();

  UpdateMovableObjectResponse(const UpdateMovableObjectResponse& from);
  UpdateMovableObjectResponse(UpdateMovableObjectResponse&& from) noexcept
    : UpdateMovableObjectResponse() {
    *this = ::std::move(from);
  }

  inline UpdateMovableObjectResponse& operator=(const UpdateMovableObjectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateMovableObjectResponse& operator=(UpdateMovableObjectResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateMovableObjectResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateMovableObjectResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateMovableObjectResponse*>(
               &_UpdateMovableObjectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UpdateMovableObjectResponse& a, UpdateMovableObjectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateMovableObjectResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateMovableObjectResponse* New() const final {
    return CreateMaybeMessage<UpdateMovableObjectResponse>(nullptr);
  }

  UpdateMovableObjectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateMovableObjectResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateMovableObjectResponse& from);
  void MergeFrom(const UpdateMovableObjectResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateMovableObjectResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.objects.UpdateMovableObjectResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_objects_2fmovable_2eproto);
    return ::descriptor_table_objects_2fmovable_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.objects.UpdateMovableObjectResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_objects_2fmovable_2eproto;
};
// -------------------------------------------------------------------

class DeleteMovableObjectRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.objects.DeleteMovableObjectRequest) */ {
 public:
  DeleteMovableObjectRequest();
  virtual ~DeleteMovableObjectRequest();

  DeleteMovableObjectRequest(const DeleteMovableObjectRequest& from);
  DeleteMovableObjectRequest(DeleteMovableObjectRequest&& from) noexcept
    : DeleteMovableObjectRequest() {
    *this = ::std::move(from);
  }

  inline DeleteMovableObjectRequest& operator=(const DeleteMovableObjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteMovableObjectRequest& operator=(DeleteMovableObjectRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteMovableObjectRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteMovableObjectRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteMovableObjectRequest*>(
               &_DeleteMovableObjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DeleteMovableObjectRequest& a, DeleteMovableObjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteMovableObjectRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteMovableObjectRequest* New() const final {
    return CreateMaybeMessage<DeleteMovableObjectRequest>(nullptr);
  }

  DeleteMovableObjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteMovableObjectRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteMovableObjectRequest& from);
  void MergeFrom(const DeleteMovableObjectRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteMovableObjectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.objects.DeleteMovableObjectRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_objects_2fmovable_2eproto);
    return ::descriptor_table_objects_2fmovable_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.objects.DeleteMovableObjectRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_objects_2fmovable_2eproto;
};
// -------------------------------------------------------------------

class DeleteMovableObjectResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.objects.DeleteMovableObjectResponse) */ {
 public:
  DeleteMovableObjectResponse();
  virtual ~DeleteMovableObjectResponse();

  DeleteMovableObjectResponse(const DeleteMovableObjectResponse& from);
  DeleteMovableObjectResponse(DeleteMovableObjectResponse&& from) noexcept
    : DeleteMovableObjectResponse() {
    *this = ::std::move(from);
  }

  inline DeleteMovableObjectResponse& operator=(const DeleteMovableObjectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteMovableObjectResponse& operator=(DeleteMovableObjectResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteMovableObjectResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteMovableObjectResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteMovableObjectResponse*>(
               &_DeleteMovableObjectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DeleteMovableObjectResponse& a, DeleteMovableObjectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteMovableObjectResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteMovableObjectResponse* New() const final {
    return CreateMaybeMessage<DeleteMovableObjectResponse>(nullptr);
  }

  DeleteMovableObjectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteMovableObjectResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteMovableObjectResponse& from);
  void MergeFrom(const DeleteMovableObjectResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteMovableObjectResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.objects.DeleteMovableObjectResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_objects_2fmovable_2eproto);
    return ::descriptor_table_objects_2fmovable_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.objects.DeleteMovableObjectResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_objects_2fmovable_2eproto;
};
// -------------------------------------------------------------------

class MoveObjectRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.objects.MoveObjectRequest) */ {
 public:
  MoveObjectRequest();
  virtual ~MoveObjectRequest();

  MoveObjectRequest(const MoveObjectRequest& from);
  MoveObjectRequest(MoveObjectRequest&& from) noexcept
    : MoveObjectRequest() {
    *this = ::std::move(from);
  }

  inline MoveObjectRequest& operator=(const MoveObjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveObjectRequest& operator=(MoveObjectRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveObjectRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveObjectRequest* internal_default_instance() {
    return reinterpret_cast<const MoveObjectRequest*>(
               &_MoveObjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MoveObjectRequest& a, MoveObjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveObjectRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoveObjectRequest* New() const final {
    return CreateMaybeMessage<MoveObjectRequest>(nullptr);
  }

  MoveObjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveObjectRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveObjectRequest& from);
  void MergeFrom(const MoveObjectRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveObjectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.objects.MoveObjectRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_objects_2fmovable_2eproto);
    return ::descriptor_table_objects_2fmovable_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // uint32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.objects.MoveObjectRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_objects_2fmovable_2eproto;
};
// -------------------------------------------------------------------

class MoveObjectResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.objects.MoveObjectResponse) */ {
 public:
  MoveObjectResponse();
  virtual ~MoveObjectResponse();

  MoveObjectResponse(const MoveObjectResponse& from);
  MoveObjectResponse(MoveObjectResponse&& from) noexcept
    : MoveObjectResponse() {
    *this = ::std::move(from);
  }

  inline MoveObjectResponse& operator=(const MoveObjectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveObjectResponse& operator=(MoveObjectResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveObjectResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveObjectResponse* internal_default_instance() {
    return reinterpret_cast<const MoveObjectResponse*>(
               &_MoveObjectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MoveObjectResponse& a, MoveObjectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveObjectResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoveObjectResponse* New() const final {
    return CreateMaybeMessage<MoveObjectResponse>(nullptr);
  }

  MoveObjectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveObjectResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveObjectResponse& from);
  void MergeFrom(const MoveObjectResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveObjectResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.objects.MoveObjectResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_objects_2fmovable_2eproto);
    return ::descriptor_table_objects_2fmovable_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.objects.MoveObjectResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_objects_2fmovable_2eproto;
};
// -------------------------------------------------------------------

class MoveObjectNextRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.objects.MoveObjectNextRequest) */ {
 public:
  MoveObjectNextRequest();
  virtual ~MoveObjectNextRequest();

  MoveObjectNextRequest(const MoveObjectNextRequest& from);
  MoveObjectNextRequest(MoveObjectNextRequest&& from) noexcept
    : MoveObjectNextRequest() {
    *this = ::std::move(from);
  }

  inline MoveObjectNextRequest& operator=(const MoveObjectNextRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveObjectNextRequest& operator=(MoveObjectNextRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveObjectNextRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveObjectNextRequest* internal_default_instance() {
    return reinterpret_cast<const MoveObjectNextRequest*>(
               &_MoveObjectNextRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(MoveObjectNextRequest& a, MoveObjectNextRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveObjectNextRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoveObjectNextRequest* New() const final {
    return CreateMaybeMessage<MoveObjectNextRequest>(nullptr);
  }

  MoveObjectNextRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveObjectNextRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveObjectNextRequest& from);
  void MergeFrom(const MoveObjectNextRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveObjectNextRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.objects.MoveObjectNextRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_objects_2fmovable_2eproto);
    return ::descriptor_table_objects_2fmovable_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.objects.MoveObjectNextRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_objects_2fmovable_2eproto;
};
// -------------------------------------------------------------------

class MoveObjectNextResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.objects.MoveObjectNextResponse) */ {
 public:
  MoveObjectNextResponse();
  virtual ~MoveObjectNextResponse();

  MoveObjectNextResponse(const MoveObjectNextResponse& from);
  MoveObjectNextResponse(MoveObjectNextResponse&& from) noexcept
    : MoveObjectNextResponse() {
    *this = ::std::move(from);
  }

  inline MoveObjectNextResponse& operator=(const MoveObjectNextResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveObjectNextResponse& operator=(MoveObjectNextResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveObjectNextResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveObjectNextResponse* internal_default_instance() {
    return reinterpret_cast<const MoveObjectNextResponse*>(
               &_MoveObjectNextResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(MoveObjectNextResponse& a, MoveObjectNextResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveObjectNextResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoveObjectNextResponse* New() const final {
    return CreateMaybeMessage<MoveObjectNextResponse>(nullptr);
  }

  MoveObjectNextResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveObjectNextResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveObjectNextResponse& from);
  void MergeFrom(const MoveObjectNextResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveObjectNextResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.objects.MoveObjectNextResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_objects_2fmovable_2eproto);
    return ::descriptor_table_objects_2fmovable_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateNameFieldNumber = 2,
    kStateIdFieldNumber = 1,
  };
  // string state_name = 2;
  void clear_state_name();
  const std::string& state_name() const;
  void set_state_name(const std::string& value);
  void set_state_name(std::string&& value);
  void set_state_name(const char* value);
  void set_state_name(const char* value, size_t size);
  std::string* mutable_state_name();
  std::string* release_state_name();
  void set_allocated_state_name(std::string* state_name);
  private:
  const std::string& _internal_state_name() const;
  void _internal_set_state_name(const std::string& value);
  std::string* _internal_mutable_state_name();
  public:

  // uint32 state_id = 1;
  void clear_state_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 state_id() const;
  void set_state_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_state_id() const;
  void _internal_set_state_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.objects.MoveObjectNextResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 state_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_objects_2fmovable_2eproto;
};
// -------------------------------------------------------------------

class MoveObjectPreviousRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.objects.MoveObjectPreviousRequest) */ {
 public:
  MoveObjectPreviousRequest();
  virtual ~MoveObjectPreviousRequest();

  MoveObjectPreviousRequest(const MoveObjectPreviousRequest& from);
  MoveObjectPreviousRequest(MoveObjectPreviousRequest&& from) noexcept
    : MoveObjectPreviousRequest() {
    *this = ::std::move(from);
  }

  inline MoveObjectPreviousRequest& operator=(const MoveObjectPreviousRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveObjectPreviousRequest& operator=(MoveObjectPreviousRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveObjectPreviousRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveObjectPreviousRequest* internal_default_instance() {
    return reinterpret_cast<const MoveObjectPreviousRequest*>(
               &_MoveObjectPreviousRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(MoveObjectPreviousRequest& a, MoveObjectPreviousRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveObjectPreviousRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoveObjectPreviousRequest* New() const final {
    return CreateMaybeMessage<MoveObjectPreviousRequest>(nullptr);
  }

  MoveObjectPreviousRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveObjectPreviousRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveObjectPreviousRequest& from);
  void MergeFrom(const MoveObjectPreviousRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveObjectPreviousRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.objects.MoveObjectPreviousRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_objects_2fmovable_2eproto);
    return ::descriptor_table_objects_2fmovable_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.objects.MoveObjectPreviousRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_objects_2fmovable_2eproto;
};
// -------------------------------------------------------------------

class MoveObjectPreviousResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.objects.MoveObjectPreviousResponse) */ {
 public:
  MoveObjectPreviousResponse();
  virtual ~MoveObjectPreviousResponse();

  MoveObjectPreviousResponse(const MoveObjectPreviousResponse& from);
  MoveObjectPreviousResponse(MoveObjectPreviousResponse&& from) noexcept
    : MoveObjectPreviousResponse() {
    *this = ::std::move(from);
  }

  inline MoveObjectPreviousResponse& operator=(const MoveObjectPreviousResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveObjectPreviousResponse& operator=(MoveObjectPreviousResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveObjectPreviousResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveObjectPreviousResponse* internal_default_instance() {
    return reinterpret_cast<const MoveObjectPreviousResponse*>(
               &_MoveObjectPreviousResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(MoveObjectPreviousResponse& a, MoveObjectPreviousResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveObjectPreviousResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoveObjectPreviousResponse* New() const final {
    return CreateMaybeMessage<MoveObjectPreviousResponse>(nullptr);
  }

  MoveObjectPreviousResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveObjectPreviousResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveObjectPreviousResponse& from);
  void MergeFrom(const MoveObjectPreviousResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveObjectPreviousResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.objects.MoveObjectPreviousResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_objects_2fmovable_2eproto);
    return ::descriptor_table_objects_2fmovable_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateNameFieldNumber = 2,
    kStateIdFieldNumber = 1,
  };
  // string state_name = 2;
  void clear_state_name();
  const std::string& state_name() const;
  void set_state_name(const std::string& value);
  void set_state_name(std::string&& value);
  void set_state_name(const char* value);
  void set_state_name(const char* value, size_t size);
  std::string* mutable_state_name();
  std::string* release_state_name();
  void set_allocated_state_name(std::string* state_name);
  private:
  const std::string& _internal_state_name() const;
  void _internal_set_state_name(const std::string& value);
  std::string* _internal_mutable_state_name();
  public:

  // uint32 state_id = 1;
  void clear_state_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 state_id() const;
  void set_state_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_state_id() const;
  void _internal_set_state_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.objects.MoveObjectPreviousResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 state_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_objects_2fmovable_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// State

// string name = 1;
inline void State::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& State::name() const {
  // @@protoc_insertion_point(field_get:mruv.objects.State.name)
  return _internal_name();
}
inline void State::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mruv.objects.State.name)
}
inline std::string* State::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mruv.objects.State.name)
  return _internal_mutable_name();
}
inline const std::string& State::_internal_name() const {
  return name_.GetNoArena();
}
inline void State::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void State::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.objects.State.name)
}
inline void State::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.objects.State.name)
}
inline void State::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.objects.State.name)
}
inline std::string* State::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* State::release_name() {
  // @@protoc_insertion_point(field_release:mruv.objects.State.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void State::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mruv.objects.State.name)
}

// float x = 2;
inline void State::clear_x() {
  x_ = 0;
}
inline float State::_internal_x() const {
  return x_;
}
inline float State::x() const {
  // @@protoc_insertion_point(field_get:mruv.objects.State.x)
  return _internal_x();
}
inline void State::_internal_set_x(float value) {
  
  x_ = value;
}
inline void State::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:mruv.objects.State.x)
}

// float y = 3;
inline void State::clear_y() {
  y_ = 0;
}
inline float State::_internal_y() const {
  return y_;
}
inline float State::y() const {
  // @@protoc_insertion_point(field_get:mruv.objects.State.y)
  return _internal_y();
}
inline void State::_internal_set_y(float value) {
  
  y_ = value;
}
inline void State::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:mruv.objects.State.y)
}

// float z = 4;
inline void State::clear_z() {
  z_ = 0;
}
inline float State::_internal_z() const {
  return z_;
}
inline float State::z() const {
  // @@protoc_insertion_point(field_get:mruv.objects.State.z)
  return _internal_z();
}
inline void State::_internal_set_z(float value) {
  
  z_ = value;
}
inline void State::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:mruv.objects.State.z)
}

// float rx = 5;
inline void State::clear_rx() {
  rx_ = 0;
}
inline float State::_internal_rx() const {
  return rx_;
}
inline float State::rx() const {
  // @@protoc_insertion_point(field_get:mruv.objects.State.rx)
  return _internal_rx();
}
inline void State::_internal_set_rx(float value) {
  
  rx_ = value;
}
inline void State::set_rx(float value) {
  _internal_set_rx(value);
  // @@protoc_insertion_point(field_set:mruv.objects.State.rx)
}

// float ry = 6;
inline void State::clear_ry() {
  ry_ = 0;
}
inline float State::_internal_ry() const {
  return ry_;
}
inline float State::ry() const {
  // @@protoc_insertion_point(field_get:mruv.objects.State.ry)
  return _internal_ry();
}
inline void State::_internal_set_ry(float value) {
  
  ry_ = value;
}
inline void State::set_ry(float value) {
  _internal_set_ry(value);
  // @@protoc_insertion_point(field_set:mruv.objects.State.ry)
}

// float rz = 7;
inline void State::clear_rz() {
  rz_ = 0;
}
inline float State::_internal_rz() const {
  return rz_;
}
inline float State::rz() const {
  // @@protoc_insertion_point(field_get:mruv.objects.State.rz)
  return _internal_rz();
}
inline void State::_internal_set_rz(float value) {
  
  rz_ = value;
}
inline void State::set_rz(float value) {
  _internal_set_rz(value);
  // @@protoc_insertion_point(field_set:mruv.objects.State.rz)
}

// -------------------------------------------------------------------

// MovableObject

// .mruv.objects.Object object = 1;
inline bool MovableObject::_internal_has_object() const {
  return this != internal_default_instance() && object_ != nullptr;
}
inline bool MovableObject::has_object() const {
  return _internal_has_object();
}
inline const ::mruv::objects::Object& MovableObject::_internal_object() const {
  const ::mruv::objects::Object* p = object_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mruv::objects::Object*>(
      &::mruv::objects::_Object_default_instance_);
}
inline const ::mruv::objects::Object& MovableObject::object() const {
  // @@protoc_insertion_point(field_get:mruv.objects.MovableObject.object)
  return _internal_object();
}
inline ::mruv::objects::Object* MovableObject::release_object() {
  // @@protoc_insertion_point(field_release:mruv.objects.MovableObject.object)
  
  ::mruv::objects::Object* temp = object_;
  object_ = nullptr;
  return temp;
}
inline ::mruv::objects::Object* MovableObject::_internal_mutable_object() {
  
  if (object_ == nullptr) {
    auto* p = CreateMaybeMessage<::mruv::objects::Object>(GetArenaNoVirtual());
    object_ = p;
  }
  return object_;
}
inline ::mruv::objects::Object* MovableObject::mutable_object() {
  // @@protoc_insertion_point(field_mutable:mruv.objects.MovableObject.object)
  return _internal_mutable_object();
}
inline void MovableObject::set_allocated_object(::mruv::objects::Object* object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_);
  }
  if (object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object, submessage_arena);
    }
    
  } else {
    
  }
  object_ = object;
  // @@protoc_insertion_point(field_set_allocated:mruv.objects.MovableObject.object)
}

// repeated .mruv.objects.State states = 2;
inline int MovableObject::_internal_states_size() const {
  return states_.size();
}
inline int MovableObject::states_size() const {
  return _internal_states_size();
}
inline void MovableObject::clear_states() {
  states_.Clear();
}
inline ::mruv::objects::State* MovableObject::mutable_states(int index) {
  // @@protoc_insertion_point(field_mutable:mruv.objects.MovableObject.states)
  return states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::objects::State >*
MovableObject::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:mruv.objects.MovableObject.states)
  return &states_;
}
inline const ::mruv::objects::State& MovableObject::_internal_states(int index) const {
  return states_.Get(index);
}
inline const ::mruv::objects::State& MovableObject::states(int index) const {
  // @@protoc_insertion_point(field_get:mruv.objects.MovableObject.states)
  return _internal_states(index);
}
inline ::mruv::objects::State* MovableObject::_internal_add_states() {
  return states_.Add();
}
inline ::mruv::objects::State* MovableObject::add_states() {
  // @@protoc_insertion_point(field_add:mruv.objects.MovableObject.states)
  return _internal_add_states();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::objects::State >&
MovableObject::states() const {
  // @@protoc_insertion_point(field_list:mruv.objects.MovableObject.states)
  return states_;
}

// -------------------------------------------------------------------

// CreateMovableObjectRequest

// .mruv.objects.Object object = 1;
inline bool CreateMovableObjectRequest::_internal_has_object() const {
  return this != internal_default_instance() && object_ != nullptr;
}
inline bool CreateMovableObjectRequest::has_object() const {
  return _internal_has_object();
}
inline const ::mruv::objects::Object& CreateMovableObjectRequest::_internal_object() const {
  const ::mruv::objects::Object* p = object_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mruv::objects::Object*>(
      &::mruv::objects::_Object_default_instance_);
}
inline const ::mruv::objects::Object& CreateMovableObjectRequest::object() const {
  // @@protoc_insertion_point(field_get:mruv.objects.CreateMovableObjectRequest.object)
  return _internal_object();
}
inline ::mruv::objects::Object* CreateMovableObjectRequest::release_object() {
  // @@protoc_insertion_point(field_release:mruv.objects.CreateMovableObjectRequest.object)
  
  ::mruv::objects::Object* temp = object_;
  object_ = nullptr;
  return temp;
}
inline ::mruv::objects::Object* CreateMovableObjectRequest::_internal_mutable_object() {
  
  if (object_ == nullptr) {
    auto* p = CreateMaybeMessage<::mruv::objects::Object>(GetArenaNoVirtual());
    object_ = p;
  }
  return object_;
}
inline ::mruv::objects::Object* CreateMovableObjectRequest::mutable_object() {
  // @@protoc_insertion_point(field_mutable:mruv.objects.CreateMovableObjectRequest.object)
  return _internal_mutable_object();
}
inline void CreateMovableObjectRequest::set_allocated_object(::mruv::objects::Object* object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_);
  }
  if (object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object, submessage_arena);
    }
    
  } else {
    
  }
  object_ = object;
  // @@protoc_insertion_point(field_set_allocated:mruv.objects.CreateMovableObjectRequest.object)
}

// repeated .mruv.objects.State states = 2;
inline int CreateMovableObjectRequest::_internal_states_size() const {
  return states_.size();
}
inline int CreateMovableObjectRequest::states_size() const {
  return _internal_states_size();
}
inline void CreateMovableObjectRequest::clear_states() {
  states_.Clear();
}
inline ::mruv::objects::State* CreateMovableObjectRequest::mutable_states(int index) {
  // @@protoc_insertion_point(field_mutable:mruv.objects.CreateMovableObjectRequest.states)
  return states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::objects::State >*
CreateMovableObjectRequest::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:mruv.objects.CreateMovableObjectRequest.states)
  return &states_;
}
inline const ::mruv::objects::State& CreateMovableObjectRequest::_internal_states(int index) const {
  return states_.Get(index);
}
inline const ::mruv::objects::State& CreateMovableObjectRequest::states(int index) const {
  // @@protoc_insertion_point(field_get:mruv.objects.CreateMovableObjectRequest.states)
  return _internal_states(index);
}
inline ::mruv::objects::State* CreateMovableObjectRequest::_internal_add_states() {
  return states_.Add();
}
inline ::mruv::objects::State* CreateMovableObjectRequest::add_states() {
  // @@protoc_insertion_point(field_add:mruv.objects.CreateMovableObjectRequest.states)
  return _internal_add_states();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::objects::State >&
CreateMovableObjectRequest::states() const {
  // @@protoc_insertion_point(field_list:mruv.objects.CreateMovableObjectRequest.states)
  return states_;
}

// -------------------------------------------------------------------

// CreateMovableObjectResponse

// uint32 id = 1;
inline void CreateMovableObjectResponse::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateMovableObjectResponse::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateMovableObjectResponse::id() const {
  // @@protoc_insertion_point(field_get:mruv.objects.CreateMovableObjectResponse.id)
  return _internal_id();
}
inline void CreateMovableObjectResponse::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void CreateMovableObjectResponse::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.objects.CreateMovableObjectResponse.id)
}

// -------------------------------------------------------------------

// GetMovableObjectRequest

// uint32 id = 1;
inline void GetMovableObjectRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetMovableObjectRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetMovableObjectRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.objects.GetMovableObjectRequest.id)
  return _internal_id();
}
inline void GetMovableObjectRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void GetMovableObjectRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.objects.GetMovableObjectRequest.id)
}

// -------------------------------------------------------------------

// GetMovableObjectResponse

// .mruv.objects.Object object = 1;
inline bool GetMovableObjectResponse::_internal_has_object() const {
  return this != internal_default_instance() && object_ != nullptr;
}
inline bool GetMovableObjectResponse::has_object() const {
  return _internal_has_object();
}
inline const ::mruv::objects::Object& GetMovableObjectResponse::_internal_object() const {
  const ::mruv::objects::Object* p = object_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mruv::objects::Object*>(
      &::mruv::objects::_Object_default_instance_);
}
inline const ::mruv::objects::Object& GetMovableObjectResponse::object() const {
  // @@protoc_insertion_point(field_get:mruv.objects.GetMovableObjectResponse.object)
  return _internal_object();
}
inline ::mruv::objects::Object* GetMovableObjectResponse::release_object() {
  // @@protoc_insertion_point(field_release:mruv.objects.GetMovableObjectResponse.object)
  
  ::mruv::objects::Object* temp = object_;
  object_ = nullptr;
  return temp;
}
inline ::mruv::objects::Object* GetMovableObjectResponse::_internal_mutable_object() {
  
  if (object_ == nullptr) {
    auto* p = CreateMaybeMessage<::mruv::objects::Object>(GetArenaNoVirtual());
    object_ = p;
  }
  return object_;
}
inline ::mruv::objects::Object* GetMovableObjectResponse::mutable_object() {
  // @@protoc_insertion_point(field_mutable:mruv.objects.GetMovableObjectResponse.object)
  return _internal_mutable_object();
}
inline void GetMovableObjectResponse::set_allocated_object(::mruv::objects::Object* object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_);
  }
  if (object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object, submessage_arena);
    }
    
  } else {
    
  }
  object_ = object;
  // @@protoc_insertion_point(field_set_allocated:mruv.objects.GetMovableObjectResponse.object)
}

// repeated .mruv.objects.State states = 2;
inline int GetMovableObjectResponse::_internal_states_size() const {
  return states_.size();
}
inline int GetMovableObjectResponse::states_size() const {
  return _internal_states_size();
}
inline void GetMovableObjectResponse::clear_states() {
  states_.Clear();
}
inline ::mruv::objects::State* GetMovableObjectResponse::mutable_states(int index) {
  // @@protoc_insertion_point(field_mutable:mruv.objects.GetMovableObjectResponse.states)
  return states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::objects::State >*
GetMovableObjectResponse::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:mruv.objects.GetMovableObjectResponse.states)
  return &states_;
}
inline const ::mruv::objects::State& GetMovableObjectResponse::_internal_states(int index) const {
  return states_.Get(index);
}
inline const ::mruv::objects::State& GetMovableObjectResponse::states(int index) const {
  // @@protoc_insertion_point(field_get:mruv.objects.GetMovableObjectResponse.states)
  return _internal_states(index);
}
inline ::mruv::objects::State* GetMovableObjectResponse::_internal_add_states() {
  return states_.Add();
}
inline ::mruv::objects::State* GetMovableObjectResponse::add_states() {
  // @@protoc_insertion_point(field_add:mruv.objects.GetMovableObjectResponse.states)
  return _internal_add_states();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::objects::State >&
GetMovableObjectResponse::states() const {
  // @@protoc_insertion_point(field_list:mruv.objects.GetMovableObjectResponse.states)
  return states_;
}

// uint32 current_state_id = 3;
inline void GetMovableObjectResponse::clear_current_state_id() {
  current_state_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetMovableObjectResponse::_internal_current_state_id() const {
  return current_state_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetMovableObjectResponse::current_state_id() const {
  // @@protoc_insertion_point(field_get:mruv.objects.GetMovableObjectResponse.current_state_id)
  return _internal_current_state_id();
}
inline void GetMovableObjectResponse::_internal_set_current_state_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  current_state_id_ = value;
}
inline void GetMovableObjectResponse::set_current_state_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_current_state_id(value);
  // @@protoc_insertion_point(field_set:mruv.objects.GetMovableObjectResponse.current_state_id)
}

// string current_state_name = 4;
inline void GetMovableObjectResponse::clear_current_state_name() {
  current_state_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetMovableObjectResponse::current_state_name() const {
  // @@protoc_insertion_point(field_get:mruv.objects.GetMovableObjectResponse.current_state_name)
  return _internal_current_state_name();
}
inline void GetMovableObjectResponse::set_current_state_name(const std::string& value) {
  _internal_set_current_state_name(value);
  // @@protoc_insertion_point(field_set:mruv.objects.GetMovableObjectResponse.current_state_name)
}
inline std::string* GetMovableObjectResponse::mutable_current_state_name() {
  // @@protoc_insertion_point(field_mutable:mruv.objects.GetMovableObjectResponse.current_state_name)
  return _internal_mutable_current_state_name();
}
inline const std::string& GetMovableObjectResponse::_internal_current_state_name() const {
  return current_state_name_.GetNoArena();
}
inline void GetMovableObjectResponse::_internal_set_current_state_name(const std::string& value) {
  
  current_state_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetMovableObjectResponse::set_current_state_name(std::string&& value) {
  
  current_state_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.objects.GetMovableObjectResponse.current_state_name)
}
inline void GetMovableObjectResponse::set_current_state_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  current_state_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.objects.GetMovableObjectResponse.current_state_name)
}
inline void GetMovableObjectResponse::set_current_state_name(const char* value, size_t size) {
  
  current_state_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.objects.GetMovableObjectResponse.current_state_name)
}
inline std::string* GetMovableObjectResponse::_internal_mutable_current_state_name() {
  
  return current_state_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetMovableObjectResponse::release_current_state_name() {
  // @@protoc_insertion_point(field_release:mruv.objects.GetMovableObjectResponse.current_state_name)
  
  return current_state_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetMovableObjectResponse::set_allocated_current_state_name(std::string* current_state_name) {
  if (current_state_name != nullptr) {
    
  } else {
    
  }
  current_state_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), current_state_name);
  // @@protoc_insertion_point(field_set_allocated:mruv.objects.GetMovableObjectResponse.current_state_name)
}

// -------------------------------------------------------------------

// UpdateMovableObjectRequest

// uint32 id = 1;
inline void UpdateMovableObjectRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateMovableObjectRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateMovableObjectRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.objects.UpdateMovableObjectRequest.id)
  return _internal_id();
}
inline void UpdateMovableObjectRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void UpdateMovableObjectRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.objects.UpdateMovableObjectRequest.id)
}

// uint32 object_id = 2;
inline void UpdateMovableObjectRequest::clear_object_id() {
  object_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateMovableObjectRequest::_internal_object_id() const {
  return object_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateMovableObjectRequest::object_id() const {
  // @@protoc_insertion_point(field_get:mruv.objects.UpdateMovableObjectRequest.object_id)
  return _internal_object_id();
}
inline void UpdateMovableObjectRequest::_internal_set_object_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  object_id_ = value;
}
inline void UpdateMovableObjectRequest::set_object_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:mruv.objects.UpdateMovableObjectRequest.object_id)
}

// repeated .mruv.objects.State states = 3;
inline int UpdateMovableObjectRequest::_internal_states_size() const {
  return states_.size();
}
inline int UpdateMovableObjectRequest::states_size() const {
  return _internal_states_size();
}
inline void UpdateMovableObjectRequest::clear_states() {
  states_.Clear();
}
inline ::mruv::objects::State* UpdateMovableObjectRequest::mutable_states(int index) {
  // @@protoc_insertion_point(field_mutable:mruv.objects.UpdateMovableObjectRequest.states)
  return states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::objects::State >*
UpdateMovableObjectRequest::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:mruv.objects.UpdateMovableObjectRequest.states)
  return &states_;
}
inline const ::mruv::objects::State& UpdateMovableObjectRequest::_internal_states(int index) const {
  return states_.Get(index);
}
inline const ::mruv::objects::State& UpdateMovableObjectRequest::states(int index) const {
  // @@protoc_insertion_point(field_get:mruv.objects.UpdateMovableObjectRequest.states)
  return _internal_states(index);
}
inline ::mruv::objects::State* UpdateMovableObjectRequest::_internal_add_states() {
  return states_.Add();
}
inline ::mruv::objects::State* UpdateMovableObjectRequest::add_states() {
  // @@protoc_insertion_point(field_add:mruv.objects.UpdateMovableObjectRequest.states)
  return _internal_add_states();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::objects::State >&
UpdateMovableObjectRequest::states() const {
  // @@protoc_insertion_point(field_list:mruv.objects.UpdateMovableObjectRequest.states)
  return states_;
}

// -------------------------------------------------------------------

// UpdateMovableObjectResponse

// -------------------------------------------------------------------

// DeleteMovableObjectRequest

// uint32 id = 1;
inline void DeleteMovableObjectRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteMovableObjectRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteMovableObjectRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.objects.DeleteMovableObjectRequest.id)
  return _internal_id();
}
inline void DeleteMovableObjectRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void DeleteMovableObjectRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.objects.DeleteMovableObjectRequest.id)
}

// -------------------------------------------------------------------

// DeleteMovableObjectResponse

// -------------------------------------------------------------------

// MoveObjectRequest

// uint32 state = 1;
inline void MoveObjectRequest::clear_state() {
  state_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveObjectRequest::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveObjectRequest::state() const {
  // @@protoc_insertion_point(field_get:mruv.objects.MoveObjectRequest.state)
  return _internal_state();
}
inline void MoveObjectRequest::_internal_set_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  state_ = value;
}
inline void MoveObjectRequest::set_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:mruv.objects.MoveObjectRequest.state)
}

// -------------------------------------------------------------------

// MoveObjectResponse

// -------------------------------------------------------------------

// MoveObjectNextRequest

// uint32 id = 1;
inline void MoveObjectNextRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveObjectNextRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveObjectNextRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.objects.MoveObjectNextRequest.id)
  return _internal_id();
}
inline void MoveObjectNextRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void MoveObjectNextRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.objects.MoveObjectNextRequest.id)
}

// -------------------------------------------------------------------

// MoveObjectNextResponse

// uint32 state_id = 1;
inline void MoveObjectNextResponse::clear_state_id() {
  state_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveObjectNextResponse::_internal_state_id() const {
  return state_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveObjectNextResponse::state_id() const {
  // @@protoc_insertion_point(field_get:mruv.objects.MoveObjectNextResponse.state_id)
  return _internal_state_id();
}
inline void MoveObjectNextResponse::_internal_set_state_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  state_id_ = value;
}
inline void MoveObjectNextResponse::set_state_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_state_id(value);
  // @@protoc_insertion_point(field_set:mruv.objects.MoveObjectNextResponse.state_id)
}

// string state_name = 2;
inline void MoveObjectNextResponse::clear_state_name() {
  state_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MoveObjectNextResponse::state_name() const {
  // @@protoc_insertion_point(field_get:mruv.objects.MoveObjectNextResponse.state_name)
  return _internal_state_name();
}
inline void MoveObjectNextResponse::set_state_name(const std::string& value) {
  _internal_set_state_name(value);
  // @@protoc_insertion_point(field_set:mruv.objects.MoveObjectNextResponse.state_name)
}
inline std::string* MoveObjectNextResponse::mutable_state_name() {
  // @@protoc_insertion_point(field_mutable:mruv.objects.MoveObjectNextResponse.state_name)
  return _internal_mutable_state_name();
}
inline const std::string& MoveObjectNextResponse::_internal_state_name() const {
  return state_name_.GetNoArena();
}
inline void MoveObjectNextResponse::_internal_set_state_name(const std::string& value) {
  
  state_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MoveObjectNextResponse::set_state_name(std::string&& value) {
  
  state_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.objects.MoveObjectNextResponse.state_name)
}
inline void MoveObjectNextResponse::set_state_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  state_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.objects.MoveObjectNextResponse.state_name)
}
inline void MoveObjectNextResponse::set_state_name(const char* value, size_t size) {
  
  state_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.objects.MoveObjectNextResponse.state_name)
}
inline std::string* MoveObjectNextResponse::_internal_mutable_state_name() {
  
  return state_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MoveObjectNextResponse::release_state_name() {
  // @@protoc_insertion_point(field_release:mruv.objects.MoveObjectNextResponse.state_name)
  
  return state_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MoveObjectNextResponse::set_allocated_state_name(std::string* state_name) {
  if (state_name != nullptr) {
    
  } else {
    
  }
  state_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state_name);
  // @@protoc_insertion_point(field_set_allocated:mruv.objects.MoveObjectNextResponse.state_name)
}

// -------------------------------------------------------------------

// MoveObjectPreviousRequest

// uint32 id = 1;
inline void MoveObjectPreviousRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveObjectPreviousRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveObjectPreviousRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.objects.MoveObjectPreviousRequest.id)
  return _internal_id();
}
inline void MoveObjectPreviousRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void MoveObjectPreviousRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.objects.MoveObjectPreviousRequest.id)
}

// -------------------------------------------------------------------

// MoveObjectPreviousResponse

// uint32 state_id = 1;
inline void MoveObjectPreviousResponse::clear_state_id() {
  state_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveObjectPreviousResponse::_internal_state_id() const {
  return state_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveObjectPreviousResponse::state_id() const {
  // @@protoc_insertion_point(field_get:mruv.objects.MoveObjectPreviousResponse.state_id)
  return _internal_state_id();
}
inline void MoveObjectPreviousResponse::_internal_set_state_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  state_id_ = value;
}
inline void MoveObjectPreviousResponse::set_state_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_state_id(value);
  // @@protoc_insertion_point(field_set:mruv.objects.MoveObjectPreviousResponse.state_id)
}

// string state_name = 2;
inline void MoveObjectPreviousResponse::clear_state_name() {
  state_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MoveObjectPreviousResponse::state_name() const {
  // @@protoc_insertion_point(field_get:mruv.objects.MoveObjectPreviousResponse.state_name)
  return _internal_state_name();
}
inline void MoveObjectPreviousResponse::set_state_name(const std::string& value) {
  _internal_set_state_name(value);
  // @@protoc_insertion_point(field_set:mruv.objects.MoveObjectPreviousResponse.state_name)
}
inline std::string* MoveObjectPreviousResponse::mutable_state_name() {
  // @@protoc_insertion_point(field_mutable:mruv.objects.MoveObjectPreviousResponse.state_name)
  return _internal_mutable_state_name();
}
inline const std::string& MoveObjectPreviousResponse::_internal_state_name() const {
  return state_name_.GetNoArena();
}
inline void MoveObjectPreviousResponse::_internal_set_state_name(const std::string& value) {
  
  state_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MoveObjectPreviousResponse::set_state_name(std::string&& value) {
  
  state_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.objects.MoveObjectPreviousResponse.state_name)
}
inline void MoveObjectPreviousResponse::set_state_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  state_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.objects.MoveObjectPreviousResponse.state_name)
}
inline void MoveObjectPreviousResponse::set_state_name(const char* value, size_t size) {
  
  state_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.objects.MoveObjectPreviousResponse.state_name)
}
inline std::string* MoveObjectPreviousResponse::_internal_mutable_state_name() {
  
  return state_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MoveObjectPreviousResponse::release_state_name() {
  // @@protoc_insertion_point(field_release:mruv.objects.MoveObjectPreviousResponse.state_name)
  
  return state_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MoveObjectPreviousResponse::set_allocated_state_name(std::string* state_name) {
  if (state_name != nullptr) {
    
  } else {
    
  }
  state_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state_name);
  // @@protoc_insertion_point(field_set_allocated:mruv.objects.MoveObjectPreviousResponse.state_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace objects
}  // namespace mruv

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_objects_2fmovable_2eproto
