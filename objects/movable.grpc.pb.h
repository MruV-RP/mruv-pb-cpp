// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: objects/movable.proto
#ifndef GRPC_objects_2fmovable_2eproto__INCLUDED
#define GRPC_objects_2fmovable_2eproto__INCLUDED

#include "objects/movable.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace mruv {
namespace objects {

// The MruV objects service provides procedures for movable game objects.
class MruVMovableObjectsService final {
 public:
  static constexpr char const* service_full_name() {
    return "mruv.objects.MruVMovableObjectsService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Create a movable object.
    virtual ::grpc::Status CreateMovableObject(::grpc::ClientContext* context, const ::mruv::objects::CreateMovableObjectRequest& request, ::mruv::objects::CreateMovableObjectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::CreateMovableObjectResponse>> AsyncCreateMovableObject(::grpc::ClientContext* context, const ::mruv::objects::CreateMovableObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::CreateMovableObjectResponse>>(AsyncCreateMovableObjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::CreateMovableObjectResponse>> PrepareAsyncCreateMovableObject(::grpc::ClientContext* context, const ::mruv::objects::CreateMovableObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::CreateMovableObjectResponse>>(PrepareAsyncCreateMovableObjectRaw(context, request, cq));
    }
    // Get a movable object.
    virtual ::grpc::Status GetMovableObject(::grpc::ClientContext* context, const ::mruv::objects::GetMovableObjectRequest& request, ::mruv::objects::GetMovableObjectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::GetMovableObjectResponse>> AsyncGetMovableObject(::grpc::ClientContext* context, const ::mruv::objects::GetMovableObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::GetMovableObjectResponse>>(AsyncGetMovableObjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::GetMovableObjectResponse>> PrepareAsyncGetMovableObject(::grpc::ClientContext* context, const ::mruv::objects::GetMovableObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::GetMovableObjectResponse>>(PrepareAsyncGetMovableObjectRaw(context, request, cq));
    }
    // Update a movable object.
    virtual ::grpc::Status UpdateMovableObject(::grpc::ClientContext* context, const ::mruv::objects::UpdateMovableObjectRequest& request, ::mruv::objects::UpdateMovableObjectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::UpdateMovableObjectResponse>> AsyncUpdateMovableObject(::grpc::ClientContext* context, const ::mruv::objects::UpdateMovableObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::UpdateMovableObjectResponse>>(AsyncUpdateMovableObjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::UpdateMovableObjectResponse>> PrepareAsyncUpdateMovableObject(::grpc::ClientContext* context, const ::mruv::objects::UpdateMovableObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::UpdateMovableObjectResponse>>(PrepareAsyncUpdateMovableObjectRaw(context, request, cq));
    }
    // Delete a movable object.
    virtual ::grpc::Status DeleteMovableObject(::grpc::ClientContext* context, const ::mruv::objects::DeleteMovableObjectRequest& request, ::mruv::objects::DeleteMovableObjectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::DeleteMovableObjectResponse>> AsyncDeleteMovableObject(::grpc::ClientContext* context, const ::mruv::objects::DeleteMovableObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::DeleteMovableObjectResponse>>(AsyncDeleteMovableObjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::DeleteMovableObjectResponse>> PrepareAsyncDeleteMovableObject(::grpc::ClientContext* context, const ::mruv::objects::DeleteMovableObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::DeleteMovableObjectResponse>>(PrepareAsyncDeleteMovableObjectRaw(context, request, cq));
    }
    // Move an object to other state.
    virtual ::grpc::Status MoveObject(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectRequest& request, ::mruv::objects::MoveObjectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::MoveObjectResponse>> AsyncMoveObject(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::MoveObjectResponse>>(AsyncMoveObjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::MoveObjectResponse>> PrepareAsyncMoveObject(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::MoveObjectResponse>>(PrepareAsyncMoveObjectRaw(context, request, cq));
    }
    // Move an object to next state.
    virtual ::grpc::Status MoveObjectNext(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectNextRequest& request, ::mruv::objects::MoveObjectNextResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::MoveObjectNextResponse>> AsyncMoveObjectNext(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectNextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::MoveObjectNextResponse>>(AsyncMoveObjectNextRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::MoveObjectNextResponse>> PrepareAsyncMoveObjectNext(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectNextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::MoveObjectNextResponse>>(PrepareAsyncMoveObjectNextRaw(context, request, cq));
    }
    // Move an object to previous state.
    virtual ::grpc::Status MoveObjectPrevious(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectPreviousRequest& request, ::mruv::objects::MoveObjectPreviousResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::MoveObjectPreviousResponse>> AsyncMoveObjectPrevious(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectPreviousRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::MoveObjectPreviousResponse>>(AsyncMoveObjectPreviousRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::MoveObjectPreviousResponse>> PrepareAsyncMoveObjectPrevious(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectPreviousRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::MoveObjectPreviousResponse>>(PrepareAsyncMoveObjectPreviousRaw(context, request, cq));
    }
    //
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mruv::objects::FetchAllMovableObjectsResponse>> FetchAllMovableObjects(::grpc::ClientContext* context, const ::mruv::objects::FetchAllMovableObjectsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mruv::objects::FetchAllMovableObjectsResponse>>(FetchAllMovableObjectsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mruv::objects::FetchAllMovableObjectsResponse>> AsyncFetchAllMovableObjects(::grpc::ClientContext* context, const ::mruv::objects::FetchAllMovableObjectsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mruv::objects::FetchAllMovableObjectsResponse>>(AsyncFetchAllMovableObjectsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mruv::objects::FetchAllMovableObjectsResponse>> PrepareAsyncFetchAllMovableObjects(::grpc::ClientContext* context, const ::mruv::objects::FetchAllMovableObjectsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mruv::objects::FetchAllMovableObjectsResponse>>(PrepareAsyncFetchAllMovableObjectsRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Create a movable object.
      virtual void CreateMovableObject(::grpc::ClientContext* context, const ::mruv::objects::CreateMovableObjectRequest* request, ::mruv::objects::CreateMovableObjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateMovableObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::CreateMovableObjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateMovableObject(::grpc::ClientContext* context, const ::mruv::objects::CreateMovableObjectRequest* request, ::mruv::objects::CreateMovableObjectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateMovableObject(::grpc::ClientContext* context, const ::mruv::objects::CreateMovableObjectRequest* request, ::mruv::objects::CreateMovableObjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateMovableObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::CreateMovableObjectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateMovableObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::CreateMovableObjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get a movable object.
      virtual void GetMovableObject(::grpc::ClientContext* context, const ::mruv::objects::GetMovableObjectRequest* request, ::mruv::objects::GetMovableObjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMovableObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::GetMovableObjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetMovableObject(::grpc::ClientContext* context, const ::mruv::objects::GetMovableObjectRequest* request, ::mruv::objects::GetMovableObjectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetMovableObject(::grpc::ClientContext* context, const ::mruv::objects::GetMovableObjectRequest* request, ::mruv::objects::GetMovableObjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetMovableObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::GetMovableObjectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetMovableObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::GetMovableObjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Update a movable object.
      virtual void UpdateMovableObject(::grpc::ClientContext* context, const ::mruv::objects::UpdateMovableObjectRequest* request, ::mruv::objects::UpdateMovableObjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateMovableObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::UpdateMovableObjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateMovableObject(::grpc::ClientContext* context, const ::mruv::objects::UpdateMovableObjectRequest* request, ::mruv::objects::UpdateMovableObjectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateMovableObject(::grpc::ClientContext* context, const ::mruv::objects::UpdateMovableObjectRequest* request, ::mruv::objects::UpdateMovableObjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateMovableObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::UpdateMovableObjectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateMovableObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::UpdateMovableObjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Delete a movable object.
      virtual void DeleteMovableObject(::grpc::ClientContext* context, const ::mruv::objects::DeleteMovableObjectRequest* request, ::mruv::objects::DeleteMovableObjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteMovableObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::DeleteMovableObjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteMovableObject(::grpc::ClientContext* context, const ::mruv::objects::DeleteMovableObjectRequest* request, ::mruv::objects::DeleteMovableObjectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteMovableObject(::grpc::ClientContext* context, const ::mruv::objects::DeleteMovableObjectRequest* request, ::mruv::objects::DeleteMovableObjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteMovableObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::DeleteMovableObjectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteMovableObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::DeleteMovableObjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Move an object to other state.
      virtual void MoveObject(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectRequest* request, ::mruv::objects::MoveObjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MoveObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::MoveObjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void MoveObject(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectRequest* request, ::mruv::objects::MoveObjectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void MoveObject(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectRequest* request, ::mruv::objects::MoveObjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void MoveObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::MoveObjectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void MoveObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::MoveObjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Move an object to next state.
      virtual void MoveObjectNext(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectNextRequest* request, ::mruv::objects::MoveObjectNextResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MoveObjectNext(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::MoveObjectNextResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void MoveObjectNext(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectNextRequest* request, ::mruv::objects::MoveObjectNextResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void MoveObjectNext(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectNextRequest* request, ::mruv::objects::MoveObjectNextResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void MoveObjectNext(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::MoveObjectNextResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void MoveObjectNext(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::MoveObjectNextResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Move an object to previous state.
      virtual void MoveObjectPrevious(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectPreviousRequest* request, ::mruv::objects::MoveObjectPreviousResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MoveObjectPrevious(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::MoveObjectPreviousResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void MoveObjectPrevious(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectPreviousRequest* request, ::mruv::objects::MoveObjectPreviousResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void MoveObjectPrevious(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectPreviousRequest* request, ::mruv::objects::MoveObjectPreviousResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void MoveObjectPrevious(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::MoveObjectPreviousResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void MoveObjectPrevious(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::MoveObjectPreviousResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      //
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void FetchAllMovableObjects(::grpc::ClientContext* context, ::mruv::objects::FetchAllMovableObjectsRequest* request, ::grpc::ClientReadReactor< ::mruv::objects::FetchAllMovableObjectsResponse>* reactor) = 0;
      #else
      virtual void FetchAllMovableObjects(::grpc::ClientContext* context, ::mruv::objects::FetchAllMovableObjectsRequest* request, ::grpc::experimental::ClientReadReactor< ::mruv::objects::FetchAllMovableObjectsResponse>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::CreateMovableObjectResponse>* AsyncCreateMovableObjectRaw(::grpc::ClientContext* context, const ::mruv::objects::CreateMovableObjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::CreateMovableObjectResponse>* PrepareAsyncCreateMovableObjectRaw(::grpc::ClientContext* context, const ::mruv::objects::CreateMovableObjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::GetMovableObjectResponse>* AsyncGetMovableObjectRaw(::grpc::ClientContext* context, const ::mruv::objects::GetMovableObjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::GetMovableObjectResponse>* PrepareAsyncGetMovableObjectRaw(::grpc::ClientContext* context, const ::mruv::objects::GetMovableObjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::UpdateMovableObjectResponse>* AsyncUpdateMovableObjectRaw(::grpc::ClientContext* context, const ::mruv::objects::UpdateMovableObjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::UpdateMovableObjectResponse>* PrepareAsyncUpdateMovableObjectRaw(::grpc::ClientContext* context, const ::mruv::objects::UpdateMovableObjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::DeleteMovableObjectResponse>* AsyncDeleteMovableObjectRaw(::grpc::ClientContext* context, const ::mruv::objects::DeleteMovableObjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::DeleteMovableObjectResponse>* PrepareAsyncDeleteMovableObjectRaw(::grpc::ClientContext* context, const ::mruv::objects::DeleteMovableObjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::MoveObjectResponse>* AsyncMoveObjectRaw(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::MoveObjectResponse>* PrepareAsyncMoveObjectRaw(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::MoveObjectNextResponse>* AsyncMoveObjectNextRaw(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectNextRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::MoveObjectNextResponse>* PrepareAsyncMoveObjectNextRaw(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectNextRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::MoveObjectPreviousResponse>* AsyncMoveObjectPreviousRaw(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectPreviousRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::MoveObjectPreviousResponse>* PrepareAsyncMoveObjectPreviousRaw(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectPreviousRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::mruv::objects::FetchAllMovableObjectsResponse>* FetchAllMovableObjectsRaw(::grpc::ClientContext* context, const ::mruv::objects::FetchAllMovableObjectsRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mruv::objects::FetchAllMovableObjectsResponse>* AsyncFetchAllMovableObjectsRaw(::grpc::ClientContext* context, const ::mruv::objects::FetchAllMovableObjectsRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mruv::objects::FetchAllMovableObjectsResponse>* PrepareAsyncFetchAllMovableObjectsRaw(::grpc::ClientContext* context, const ::mruv::objects::FetchAllMovableObjectsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateMovableObject(::grpc::ClientContext* context, const ::mruv::objects::CreateMovableObjectRequest& request, ::mruv::objects::CreateMovableObjectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::CreateMovableObjectResponse>> AsyncCreateMovableObject(::grpc::ClientContext* context, const ::mruv::objects::CreateMovableObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::CreateMovableObjectResponse>>(AsyncCreateMovableObjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::CreateMovableObjectResponse>> PrepareAsyncCreateMovableObject(::grpc::ClientContext* context, const ::mruv::objects::CreateMovableObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::CreateMovableObjectResponse>>(PrepareAsyncCreateMovableObjectRaw(context, request, cq));
    }
    ::grpc::Status GetMovableObject(::grpc::ClientContext* context, const ::mruv::objects::GetMovableObjectRequest& request, ::mruv::objects::GetMovableObjectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::GetMovableObjectResponse>> AsyncGetMovableObject(::grpc::ClientContext* context, const ::mruv::objects::GetMovableObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::GetMovableObjectResponse>>(AsyncGetMovableObjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::GetMovableObjectResponse>> PrepareAsyncGetMovableObject(::grpc::ClientContext* context, const ::mruv::objects::GetMovableObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::GetMovableObjectResponse>>(PrepareAsyncGetMovableObjectRaw(context, request, cq));
    }
    ::grpc::Status UpdateMovableObject(::grpc::ClientContext* context, const ::mruv::objects::UpdateMovableObjectRequest& request, ::mruv::objects::UpdateMovableObjectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::UpdateMovableObjectResponse>> AsyncUpdateMovableObject(::grpc::ClientContext* context, const ::mruv::objects::UpdateMovableObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::UpdateMovableObjectResponse>>(AsyncUpdateMovableObjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::UpdateMovableObjectResponse>> PrepareAsyncUpdateMovableObject(::grpc::ClientContext* context, const ::mruv::objects::UpdateMovableObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::UpdateMovableObjectResponse>>(PrepareAsyncUpdateMovableObjectRaw(context, request, cq));
    }
    ::grpc::Status DeleteMovableObject(::grpc::ClientContext* context, const ::mruv::objects::DeleteMovableObjectRequest& request, ::mruv::objects::DeleteMovableObjectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::DeleteMovableObjectResponse>> AsyncDeleteMovableObject(::grpc::ClientContext* context, const ::mruv::objects::DeleteMovableObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::DeleteMovableObjectResponse>>(AsyncDeleteMovableObjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::DeleteMovableObjectResponse>> PrepareAsyncDeleteMovableObject(::grpc::ClientContext* context, const ::mruv::objects::DeleteMovableObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::DeleteMovableObjectResponse>>(PrepareAsyncDeleteMovableObjectRaw(context, request, cq));
    }
    ::grpc::Status MoveObject(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectRequest& request, ::mruv::objects::MoveObjectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::MoveObjectResponse>> AsyncMoveObject(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::MoveObjectResponse>>(AsyncMoveObjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::MoveObjectResponse>> PrepareAsyncMoveObject(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::MoveObjectResponse>>(PrepareAsyncMoveObjectRaw(context, request, cq));
    }
    ::grpc::Status MoveObjectNext(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectNextRequest& request, ::mruv::objects::MoveObjectNextResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::MoveObjectNextResponse>> AsyncMoveObjectNext(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectNextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::MoveObjectNextResponse>>(AsyncMoveObjectNextRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::MoveObjectNextResponse>> PrepareAsyncMoveObjectNext(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectNextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::MoveObjectNextResponse>>(PrepareAsyncMoveObjectNextRaw(context, request, cq));
    }
    ::grpc::Status MoveObjectPrevious(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectPreviousRequest& request, ::mruv::objects::MoveObjectPreviousResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::MoveObjectPreviousResponse>> AsyncMoveObjectPrevious(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectPreviousRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::MoveObjectPreviousResponse>>(AsyncMoveObjectPreviousRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::MoveObjectPreviousResponse>> PrepareAsyncMoveObjectPrevious(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectPreviousRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::MoveObjectPreviousResponse>>(PrepareAsyncMoveObjectPreviousRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::mruv::objects::FetchAllMovableObjectsResponse>> FetchAllMovableObjects(::grpc::ClientContext* context, const ::mruv::objects::FetchAllMovableObjectsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mruv::objects::FetchAllMovableObjectsResponse>>(FetchAllMovableObjectsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mruv::objects::FetchAllMovableObjectsResponse>> AsyncFetchAllMovableObjects(::grpc::ClientContext* context, const ::mruv::objects::FetchAllMovableObjectsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mruv::objects::FetchAllMovableObjectsResponse>>(AsyncFetchAllMovableObjectsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mruv::objects::FetchAllMovableObjectsResponse>> PrepareAsyncFetchAllMovableObjects(::grpc::ClientContext* context, const ::mruv::objects::FetchAllMovableObjectsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mruv::objects::FetchAllMovableObjectsResponse>>(PrepareAsyncFetchAllMovableObjectsRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateMovableObject(::grpc::ClientContext* context, const ::mruv::objects::CreateMovableObjectRequest* request, ::mruv::objects::CreateMovableObjectResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateMovableObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::CreateMovableObjectResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateMovableObject(::grpc::ClientContext* context, const ::mruv::objects::CreateMovableObjectRequest* request, ::mruv::objects::CreateMovableObjectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateMovableObject(::grpc::ClientContext* context, const ::mruv::objects::CreateMovableObjectRequest* request, ::mruv::objects::CreateMovableObjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateMovableObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::CreateMovableObjectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateMovableObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::CreateMovableObjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetMovableObject(::grpc::ClientContext* context, const ::mruv::objects::GetMovableObjectRequest* request, ::mruv::objects::GetMovableObjectResponse* response, std::function<void(::grpc::Status)>) override;
      void GetMovableObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::GetMovableObjectResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetMovableObject(::grpc::ClientContext* context, const ::mruv::objects::GetMovableObjectRequest* request, ::mruv::objects::GetMovableObjectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetMovableObject(::grpc::ClientContext* context, const ::mruv::objects::GetMovableObjectRequest* request, ::mruv::objects::GetMovableObjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetMovableObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::GetMovableObjectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetMovableObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::GetMovableObjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateMovableObject(::grpc::ClientContext* context, const ::mruv::objects::UpdateMovableObjectRequest* request, ::mruv::objects::UpdateMovableObjectResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateMovableObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::UpdateMovableObjectResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateMovableObject(::grpc::ClientContext* context, const ::mruv::objects::UpdateMovableObjectRequest* request, ::mruv::objects::UpdateMovableObjectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateMovableObject(::grpc::ClientContext* context, const ::mruv::objects::UpdateMovableObjectRequest* request, ::mruv::objects::UpdateMovableObjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateMovableObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::UpdateMovableObjectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateMovableObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::UpdateMovableObjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteMovableObject(::grpc::ClientContext* context, const ::mruv::objects::DeleteMovableObjectRequest* request, ::mruv::objects::DeleteMovableObjectResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteMovableObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::DeleteMovableObjectResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteMovableObject(::grpc::ClientContext* context, const ::mruv::objects::DeleteMovableObjectRequest* request, ::mruv::objects::DeleteMovableObjectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteMovableObject(::grpc::ClientContext* context, const ::mruv::objects::DeleteMovableObjectRequest* request, ::mruv::objects::DeleteMovableObjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteMovableObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::DeleteMovableObjectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteMovableObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::DeleteMovableObjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void MoveObject(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectRequest* request, ::mruv::objects::MoveObjectResponse* response, std::function<void(::grpc::Status)>) override;
      void MoveObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::MoveObjectResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void MoveObject(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectRequest* request, ::mruv::objects::MoveObjectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void MoveObject(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectRequest* request, ::mruv::objects::MoveObjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void MoveObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::MoveObjectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void MoveObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::MoveObjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void MoveObjectNext(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectNextRequest* request, ::mruv::objects::MoveObjectNextResponse* response, std::function<void(::grpc::Status)>) override;
      void MoveObjectNext(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::MoveObjectNextResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void MoveObjectNext(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectNextRequest* request, ::mruv::objects::MoveObjectNextResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void MoveObjectNext(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectNextRequest* request, ::mruv::objects::MoveObjectNextResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void MoveObjectNext(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::MoveObjectNextResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void MoveObjectNext(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::MoveObjectNextResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void MoveObjectPrevious(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectPreviousRequest* request, ::mruv::objects::MoveObjectPreviousResponse* response, std::function<void(::grpc::Status)>) override;
      void MoveObjectPrevious(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::MoveObjectPreviousResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void MoveObjectPrevious(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectPreviousRequest* request, ::mruv::objects::MoveObjectPreviousResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void MoveObjectPrevious(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectPreviousRequest* request, ::mruv::objects::MoveObjectPreviousResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void MoveObjectPrevious(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::MoveObjectPreviousResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void MoveObjectPrevious(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::MoveObjectPreviousResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void FetchAllMovableObjects(::grpc::ClientContext* context, ::mruv::objects::FetchAllMovableObjectsRequest* request, ::grpc::ClientReadReactor< ::mruv::objects::FetchAllMovableObjectsResponse>* reactor) override;
      #else
      void FetchAllMovableObjects(::grpc::ClientContext* context, ::mruv::objects::FetchAllMovableObjectsRequest* request, ::grpc::experimental::ClientReadReactor< ::mruv::objects::FetchAllMovableObjectsResponse>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mruv::objects::CreateMovableObjectResponse>* AsyncCreateMovableObjectRaw(::grpc::ClientContext* context, const ::mruv::objects::CreateMovableObjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::objects::CreateMovableObjectResponse>* PrepareAsyncCreateMovableObjectRaw(::grpc::ClientContext* context, const ::mruv::objects::CreateMovableObjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::objects::GetMovableObjectResponse>* AsyncGetMovableObjectRaw(::grpc::ClientContext* context, const ::mruv::objects::GetMovableObjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::objects::GetMovableObjectResponse>* PrepareAsyncGetMovableObjectRaw(::grpc::ClientContext* context, const ::mruv::objects::GetMovableObjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::objects::UpdateMovableObjectResponse>* AsyncUpdateMovableObjectRaw(::grpc::ClientContext* context, const ::mruv::objects::UpdateMovableObjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::objects::UpdateMovableObjectResponse>* PrepareAsyncUpdateMovableObjectRaw(::grpc::ClientContext* context, const ::mruv::objects::UpdateMovableObjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::objects::DeleteMovableObjectResponse>* AsyncDeleteMovableObjectRaw(::grpc::ClientContext* context, const ::mruv::objects::DeleteMovableObjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::objects::DeleteMovableObjectResponse>* PrepareAsyncDeleteMovableObjectRaw(::grpc::ClientContext* context, const ::mruv::objects::DeleteMovableObjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::objects::MoveObjectResponse>* AsyncMoveObjectRaw(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::objects::MoveObjectResponse>* PrepareAsyncMoveObjectRaw(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::objects::MoveObjectNextResponse>* AsyncMoveObjectNextRaw(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectNextRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::objects::MoveObjectNextResponse>* PrepareAsyncMoveObjectNextRaw(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectNextRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::objects::MoveObjectPreviousResponse>* AsyncMoveObjectPreviousRaw(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectPreviousRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::objects::MoveObjectPreviousResponse>* PrepareAsyncMoveObjectPreviousRaw(::grpc::ClientContext* context, const ::mruv::objects::MoveObjectPreviousRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::mruv::objects::FetchAllMovableObjectsResponse>* FetchAllMovableObjectsRaw(::grpc::ClientContext* context, const ::mruv::objects::FetchAllMovableObjectsRequest& request) override;
    ::grpc::ClientAsyncReader< ::mruv::objects::FetchAllMovableObjectsResponse>* AsyncFetchAllMovableObjectsRaw(::grpc::ClientContext* context, const ::mruv::objects::FetchAllMovableObjectsRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mruv::objects::FetchAllMovableObjectsResponse>* PrepareAsyncFetchAllMovableObjectsRaw(::grpc::ClientContext* context, const ::mruv::objects::FetchAllMovableObjectsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateMovableObject_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMovableObject_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateMovableObject_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteMovableObject_;
    const ::grpc::internal::RpcMethod rpcmethod_MoveObject_;
    const ::grpc::internal::RpcMethod rpcmethod_MoveObjectNext_;
    const ::grpc::internal::RpcMethod rpcmethod_MoveObjectPrevious_;
    const ::grpc::internal::RpcMethod rpcmethod_FetchAllMovableObjects_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Create a movable object.
    virtual ::grpc::Status CreateMovableObject(::grpc::ServerContext* context, const ::mruv::objects::CreateMovableObjectRequest* request, ::mruv::objects::CreateMovableObjectResponse* response);
    // Get a movable object.
    virtual ::grpc::Status GetMovableObject(::grpc::ServerContext* context, const ::mruv::objects::GetMovableObjectRequest* request, ::mruv::objects::GetMovableObjectResponse* response);
    // Update a movable object.
    virtual ::grpc::Status UpdateMovableObject(::grpc::ServerContext* context, const ::mruv::objects::UpdateMovableObjectRequest* request, ::mruv::objects::UpdateMovableObjectResponse* response);
    // Delete a movable object.
    virtual ::grpc::Status DeleteMovableObject(::grpc::ServerContext* context, const ::mruv::objects::DeleteMovableObjectRequest* request, ::mruv::objects::DeleteMovableObjectResponse* response);
    // Move an object to other state.
    virtual ::grpc::Status MoveObject(::grpc::ServerContext* context, const ::mruv::objects::MoveObjectRequest* request, ::mruv::objects::MoveObjectResponse* response);
    // Move an object to next state.
    virtual ::grpc::Status MoveObjectNext(::grpc::ServerContext* context, const ::mruv::objects::MoveObjectNextRequest* request, ::mruv::objects::MoveObjectNextResponse* response);
    // Move an object to previous state.
    virtual ::grpc::Status MoveObjectPrevious(::grpc::ServerContext* context, const ::mruv::objects::MoveObjectPreviousRequest* request, ::mruv::objects::MoveObjectPreviousResponse* response);
    //
    virtual ::grpc::Status FetchAllMovableObjects(::grpc::ServerContext* context, const ::mruv::objects::FetchAllMovableObjectsRequest* request, ::grpc::ServerWriter< ::mruv::objects::FetchAllMovableObjectsResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateMovableObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateMovableObject() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateMovableObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateMovableObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::CreateMovableObjectRequest* /*request*/, ::mruv::objects::CreateMovableObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateMovableObject(::grpc::ServerContext* context, ::mruv::objects::CreateMovableObjectRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::objects::CreateMovableObjectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMovableObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMovableObject() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetMovableObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMovableObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::GetMovableObjectRequest* /*request*/, ::mruv::objects::GetMovableObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMovableObject(::grpc::ServerContext* context, ::mruv::objects::GetMovableObjectRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::objects::GetMovableObjectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateMovableObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateMovableObject() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateMovableObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateMovableObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::UpdateMovableObjectRequest* /*request*/, ::mruv::objects::UpdateMovableObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateMovableObject(::grpc::ServerContext* context, ::mruv::objects::UpdateMovableObjectRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::objects::UpdateMovableObjectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteMovableObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteMovableObject() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteMovableObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteMovableObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::DeleteMovableObjectRequest* /*request*/, ::mruv::objects::DeleteMovableObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteMovableObject(::grpc::ServerContext* context, ::mruv::objects::DeleteMovableObjectRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::objects::DeleteMovableObjectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MoveObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MoveObject() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_MoveObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::MoveObjectRequest* /*request*/, ::mruv::objects::MoveObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMoveObject(::grpc::ServerContext* context, ::mruv::objects::MoveObjectRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::objects::MoveObjectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MoveObjectNext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MoveObjectNext() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_MoveObjectNext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveObjectNext(::grpc::ServerContext* /*context*/, const ::mruv::objects::MoveObjectNextRequest* /*request*/, ::mruv::objects::MoveObjectNextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMoveObjectNext(::grpc::ServerContext* context, ::mruv::objects::MoveObjectNextRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::objects::MoveObjectNextResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MoveObjectPrevious : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MoveObjectPrevious() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_MoveObjectPrevious() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveObjectPrevious(::grpc::ServerContext* /*context*/, const ::mruv::objects::MoveObjectPreviousRequest* /*request*/, ::mruv::objects::MoveObjectPreviousResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMoveObjectPrevious(::grpc::ServerContext* context, ::mruv::objects::MoveObjectPreviousRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::objects::MoveObjectPreviousResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FetchAllMovableObjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FetchAllMovableObjects() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_FetchAllMovableObjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchAllMovableObjects(::grpc::ServerContext* /*context*/, const ::mruv::objects::FetchAllMovableObjectsRequest* /*request*/, ::grpc::ServerWriter< ::mruv::objects::FetchAllMovableObjectsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchAllMovableObjects(::grpc::ServerContext* context, ::mruv::objects::FetchAllMovableObjectsRequest* request, ::grpc::ServerAsyncWriter< ::mruv::objects::FetchAllMovableObjectsResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(7, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateMovableObject<WithAsyncMethod_GetMovableObject<WithAsyncMethod_UpdateMovableObject<WithAsyncMethod_DeleteMovableObject<WithAsyncMethod_MoveObject<WithAsyncMethod_MoveObjectNext<WithAsyncMethod_MoveObjectPrevious<WithAsyncMethod_FetchAllMovableObjects<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateMovableObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateMovableObject() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::objects::CreateMovableObjectRequest, ::mruv::objects::CreateMovableObjectResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::objects::CreateMovableObjectRequest* request, ::mruv::objects::CreateMovableObjectResponse* response) { return this->CreateMovableObject(context, request, response); }));}
    void SetMessageAllocatorFor_CreateMovableObject(
        ::grpc::experimental::MessageAllocator< ::mruv::objects::CreateMovableObjectRequest, ::mruv::objects::CreateMovableObjectResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::objects::CreateMovableObjectRequest, ::mruv::objects::CreateMovableObjectResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateMovableObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateMovableObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::CreateMovableObjectRequest* /*request*/, ::mruv::objects::CreateMovableObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateMovableObject(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::objects::CreateMovableObjectRequest* /*request*/, ::mruv::objects::CreateMovableObjectResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateMovableObject(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::objects::CreateMovableObjectRequest* /*request*/, ::mruv::objects::CreateMovableObjectResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetMovableObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetMovableObject() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::objects::GetMovableObjectRequest, ::mruv::objects::GetMovableObjectResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::objects::GetMovableObjectRequest* request, ::mruv::objects::GetMovableObjectResponse* response) { return this->GetMovableObject(context, request, response); }));}
    void SetMessageAllocatorFor_GetMovableObject(
        ::grpc::experimental::MessageAllocator< ::mruv::objects::GetMovableObjectRequest, ::mruv::objects::GetMovableObjectResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::objects::GetMovableObjectRequest, ::mruv::objects::GetMovableObjectResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetMovableObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMovableObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::GetMovableObjectRequest* /*request*/, ::mruv::objects::GetMovableObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetMovableObject(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::objects::GetMovableObjectRequest* /*request*/, ::mruv::objects::GetMovableObjectResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetMovableObject(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::objects::GetMovableObjectRequest* /*request*/, ::mruv::objects::GetMovableObjectResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateMovableObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateMovableObject() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::objects::UpdateMovableObjectRequest, ::mruv::objects::UpdateMovableObjectResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::objects::UpdateMovableObjectRequest* request, ::mruv::objects::UpdateMovableObjectResponse* response) { return this->UpdateMovableObject(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateMovableObject(
        ::grpc::experimental::MessageAllocator< ::mruv::objects::UpdateMovableObjectRequest, ::mruv::objects::UpdateMovableObjectResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::objects::UpdateMovableObjectRequest, ::mruv::objects::UpdateMovableObjectResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateMovableObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateMovableObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::UpdateMovableObjectRequest* /*request*/, ::mruv::objects::UpdateMovableObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateMovableObject(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::objects::UpdateMovableObjectRequest* /*request*/, ::mruv::objects::UpdateMovableObjectResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateMovableObject(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::objects::UpdateMovableObjectRequest* /*request*/, ::mruv::objects::UpdateMovableObjectResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteMovableObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteMovableObject() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::objects::DeleteMovableObjectRequest, ::mruv::objects::DeleteMovableObjectResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::objects::DeleteMovableObjectRequest* request, ::mruv::objects::DeleteMovableObjectResponse* response) { return this->DeleteMovableObject(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteMovableObject(
        ::grpc::experimental::MessageAllocator< ::mruv::objects::DeleteMovableObjectRequest, ::mruv::objects::DeleteMovableObjectResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::objects::DeleteMovableObjectRequest, ::mruv::objects::DeleteMovableObjectResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteMovableObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteMovableObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::DeleteMovableObjectRequest* /*request*/, ::mruv::objects::DeleteMovableObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteMovableObject(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::objects::DeleteMovableObjectRequest* /*request*/, ::mruv::objects::DeleteMovableObjectResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteMovableObject(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::objects::DeleteMovableObjectRequest* /*request*/, ::mruv::objects::DeleteMovableObjectResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_MoveObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_MoveObject() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::objects::MoveObjectRequest, ::mruv::objects::MoveObjectResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::objects::MoveObjectRequest* request, ::mruv::objects::MoveObjectResponse* response) { return this->MoveObject(context, request, response); }));}
    void SetMessageAllocatorFor_MoveObject(
        ::grpc::experimental::MessageAllocator< ::mruv::objects::MoveObjectRequest, ::mruv::objects::MoveObjectResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::objects::MoveObjectRequest, ::mruv::objects::MoveObjectResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_MoveObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::MoveObjectRequest* /*request*/, ::mruv::objects::MoveObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* MoveObject(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::objects::MoveObjectRequest* /*request*/, ::mruv::objects::MoveObjectResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* MoveObject(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::objects::MoveObjectRequest* /*request*/, ::mruv::objects::MoveObjectResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_MoveObjectNext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_MoveObjectNext() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::objects::MoveObjectNextRequest, ::mruv::objects::MoveObjectNextResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::objects::MoveObjectNextRequest* request, ::mruv::objects::MoveObjectNextResponse* response) { return this->MoveObjectNext(context, request, response); }));}
    void SetMessageAllocatorFor_MoveObjectNext(
        ::grpc::experimental::MessageAllocator< ::mruv::objects::MoveObjectNextRequest, ::mruv::objects::MoveObjectNextResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::objects::MoveObjectNextRequest, ::mruv::objects::MoveObjectNextResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_MoveObjectNext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveObjectNext(::grpc::ServerContext* /*context*/, const ::mruv::objects::MoveObjectNextRequest* /*request*/, ::mruv::objects::MoveObjectNextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* MoveObjectNext(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::objects::MoveObjectNextRequest* /*request*/, ::mruv::objects::MoveObjectNextResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* MoveObjectNext(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::objects::MoveObjectNextRequest* /*request*/, ::mruv::objects::MoveObjectNextResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_MoveObjectPrevious : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_MoveObjectPrevious() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::objects::MoveObjectPreviousRequest, ::mruv::objects::MoveObjectPreviousResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::objects::MoveObjectPreviousRequest* request, ::mruv::objects::MoveObjectPreviousResponse* response) { return this->MoveObjectPrevious(context, request, response); }));}
    void SetMessageAllocatorFor_MoveObjectPrevious(
        ::grpc::experimental::MessageAllocator< ::mruv::objects::MoveObjectPreviousRequest, ::mruv::objects::MoveObjectPreviousResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::objects::MoveObjectPreviousRequest, ::mruv::objects::MoveObjectPreviousResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_MoveObjectPrevious() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveObjectPrevious(::grpc::ServerContext* /*context*/, const ::mruv::objects::MoveObjectPreviousRequest* /*request*/, ::mruv::objects::MoveObjectPreviousResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* MoveObjectPrevious(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::objects::MoveObjectPreviousRequest* /*request*/, ::mruv::objects::MoveObjectPreviousResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* MoveObjectPrevious(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::objects::MoveObjectPreviousRequest* /*request*/, ::mruv::objects::MoveObjectPreviousResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_FetchAllMovableObjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_FetchAllMovableObjects() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::mruv::objects::FetchAllMovableObjectsRequest, ::mruv::objects::FetchAllMovableObjectsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::objects::FetchAllMovableObjectsRequest* request) { return this->FetchAllMovableObjects(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_FetchAllMovableObjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchAllMovableObjects(::grpc::ServerContext* /*context*/, const ::mruv::objects::FetchAllMovableObjectsRequest* /*request*/, ::grpc::ServerWriter< ::mruv::objects::FetchAllMovableObjectsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::mruv::objects::FetchAllMovableObjectsResponse>* FetchAllMovableObjects(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::objects::FetchAllMovableObjectsRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::mruv::objects::FetchAllMovableObjectsResponse>* FetchAllMovableObjects(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::objects::FetchAllMovableObjectsRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_CreateMovableObject<ExperimentalWithCallbackMethod_GetMovableObject<ExperimentalWithCallbackMethod_UpdateMovableObject<ExperimentalWithCallbackMethod_DeleteMovableObject<ExperimentalWithCallbackMethod_MoveObject<ExperimentalWithCallbackMethod_MoveObjectNext<ExperimentalWithCallbackMethod_MoveObjectPrevious<ExperimentalWithCallbackMethod_FetchAllMovableObjects<Service > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_CreateMovableObject<ExperimentalWithCallbackMethod_GetMovableObject<ExperimentalWithCallbackMethod_UpdateMovableObject<ExperimentalWithCallbackMethod_DeleteMovableObject<ExperimentalWithCallbackMethod_MoveObject<ExperimentalWithCallbackMethod_MoveObjectNext<ExperimentalWithCallbackMethod_MoveObjectPrevious<ExperimentalWithCallbackMethod_FetchAllMovableObjects<Service > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateMovableObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateMovableObject() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateMovableObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateMovableObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::CreateMovableObjectRequest* /*request*/, ::mruv::objects::CreateMovableObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMovableObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMovableObject() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetMovableObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMovableObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::GetMovableObjectRequest* /*request*/, ::mruv::objects::GetMovableObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateMovableObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateMovableObject() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateMovableObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateMovableObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::UpdateMovableObjectRequest* /*request*/, ::mruv::objects::UpdateMovableObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteMovableObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteMovableObject() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteMovableObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteMovableObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::DeleteMovableObjectRequest* /*request*/, ::mruv::objects::DeleteMovableObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MoveObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MoveObject() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_MoveObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::MoveObjectRequest* /*request*/, ::mruv::objects::MoveObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MoveObjectNext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MoveObjectNext() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_MoveObjectNext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveObjectNext(::grpc::ServerContext* /*context*/, const ::mruv::objects::MoveObjectNextRequest* /*request*/, ::mruv::objects::MoveObjectNextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MoveObjectPrevious : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MoveObjectPrevious() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_MoveObjectPrevious() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveObjectPrevious(::grpc::ServerContext* /*context*/, const ::mruv::objects::MoveObjectPreviousRequest* /*request*/, ::mruv::objects::MoveObjectPreviousResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FetchAllMovableObjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FetchAllMovableObjects() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_FetchAllMovableObjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchAllMovableObjects(::grpc::ServerContext* /*context*/, const ::mruv::objects::FetchAllMovableObjectsRequest* /*request*/, ::grpc::ServerWriter< ::mruv::objects::FetchAllMovableObjectsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateMovableObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateMovableObject() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateMovableObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateMovableObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::CreateMovableObjectRequest* /*request*/, ::mruv::objects::CreateMovableObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateMovableObject(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMovableObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMovableObject() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetMovableObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMovableObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::GetMovableObjectRequest* /*request*/, ::mruv::objects::GetMovableObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMovableObject(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateMovableObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateMovableObject() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateMovableObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateMovableObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::UpdateMovableObjectRequest* /*request*/, ::mruv::objects::UpdateMovableObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateMovableObject(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteMovableObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteMovableObject() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteMovableObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteMovableObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::DeleteMovableObjectRequest* /*request*/, ::mruv::objects::DeleteMovableObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteMovableObject(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MoveObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MoveObject() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_MoveObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::MoveObjectRequest* /*request*/, ::mruv::objects::MoveObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMoveObject(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MoveObjectNext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MoveObjectNext() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_MoveObjectNext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveObjectNext(::grpc::ServerContext* /*context*/, const ::mruv::objects::MoveObjectNextRequest* /*request*/, ::mruv::objects::MoveObjectNextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMoveObjectNext(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MoveObjectPrevious : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MoveObjectPrevious() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_MoveObjectPrevious() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveObjectPrevious(::grpc::ServerContext* /*context*/, const ::mruv::objects::MoveObjectPreviousRequest* /*request*/, ::mruv::objects::MoveObjectPreviousResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMoveObjectPrevious(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FetchAllMovableObjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FetchAllMovableObjects() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_FetchAllMovableObjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchAllMovableObjects(::grpc::ServerContext* /*context*/, const ::mruv::objects::FetchAllMovableObjectsRequest* /*request*/, ::grpc::ServerWriter< ::mruv::objects::FetchAllMovableObjectsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchAllMovableObjects(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(7, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateMovableObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateMovableObject() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateMovableObject(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateMovableObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateMovableObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::CreateMovableObjectRequest* /*request*/, ::mruv::objects::CreateMovableObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateMovableObject(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateMovableObject(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetMovableObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetMovableObject() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMovableObject(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetMovableObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMovableObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::GetMovableObjectRequest* /*request*/, ::mruv::objects::GetMovableObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetMovableObject(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetMovableObject(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateMovableObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateMovableObject() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateMovableObject(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateMovableObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateMovableObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::UpdateMovableObjectRequest* /*request*/, ::mruv::objects::UpdateMovableObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateMovableObject(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateMovableObject(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteMovableObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteMovableObject() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteMovableObject(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteMovableObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteMovableObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::DeleteMovableObjectRequest* /*request*/, ::mruv::objects::DeleteMovableObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteMovableObject(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteMovableObject(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_MoveObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_MoveObject() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MoveObject(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_MoveObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::MoveObjectRequest* /*request*/, ::mruv::objects::MoveObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* MoveObject(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* MoveObject(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_MoveObjectNext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_MoveObjectNext() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MoveObjectNext(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_MoveObjectNext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveObjectNext(::grpc::ServerContext* /*context*/, const ::mruv::objects::MoveObjectNextRequest* /*request*/, ::mruv::objects::MoveObjectNextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* MoveObjectNext(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* MoveObjectNext(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_MoveObjectPrevious : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_MoveObjectPrevious() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MoveObjectPrevious(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_MoveObjectPrevious() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveObjectPrevious(::grpc::ServerContext* /*context*/, const ::mruv::objects::MoveObjectPreviousRequest* /*request*/, ::mruv::objects::MoveObjectPreviousResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* MoveObjectPrevious(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* MoveObjectPrevious(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_FetchAllMovableObjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_FetchAllMovableObjects() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->FetchAllMovableObjects(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_FetchAllMovableObjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchAllMovableObjects(::grpc::ServerContext* /*context*/, const ::mruv::objects::FetchAllMovableObjectsRequest* /*request*/, ::grpc::ServerWriter< ::mruv::objects::FetchAllMovableObjectsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* FetchAllMovableObjects(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* FetchAllMovableObjects(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateMovableObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateMovableObject() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::objects::CreateMovableObjectRequest, ::mruv::objects::CreateMovableObjectResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::objects::CreateMovableObjectRequest, ::mruv::objects::CreateMovableObjectResponse>* streamer) {
                       return this->StreamedCreateMovableObject(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateMovableObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateMovableObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::CreateMovableObjectRequest* /*request*/, ::mruv::objects::CreateMovableObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateMovableObject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::objects::CreateMovableObjectRequest,::mruv::objects::CreateMovableObjectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMovableObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMovableObject() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::objects::GetMovableObjectRequest, ::mruv::objects::GetMovableObjectResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::objects::GetMovableObjectRequest, ::mruv::objects::GetMovableObjectResponse>* streamer) {
                       return this->StreamedGetMovableObject(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMovableObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMovableObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::GetMovableObjectRequest* /*request*/, ::mruv::objects::GetMovableObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMovableObject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::objects::GetMovableObjectRequest,::mruv::objects::GetMovableObjectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateMovableObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateMovableObject() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::objects::UpdateMovableObjectRequest, ::mruv::objects::UpdateMovableObjectResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::objects::UpdateMovableObjectRequest, ::mruv::objects::UpdateMovableObjectResponse>* streamer) {
                       return this->StreamedUpdateMovableObject(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateMovableObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateMovableObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::UpdateMovableObjectRequest* /*request*/, ::mruv::objects::UpdateMovableObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateMovableObject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::objects::UpdateMovableObjectRequest,::mruv::objects::UpdateMovableObjectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteMovableObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteMovableObject() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::objects::DeleteMovableObjectRequest, ::mruv::objects::DeleteMovableObjectResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::objects::DeleteMovableObjectRequest, ::mruv::objects::DeleteMovableObjectResponse>* streamer) {
                       return this->StreamedDeleteMovableObject(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteMovableObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteMovableObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::DeleteMovableObjectRequest* /*request*/, ::mruv::objects::DeleteMovableObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteMovableObject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::objects::DeleteMovableObjectRequest,::mruv::objects::DeleteMovableObjectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MoveObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MoveObject() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::objects::MoveObjectRequest, ::mruv::objects::MoveObjectResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::objects::MoveObjectRequest, ::mruv::objects::MoveObjectResponse>* streamer) {
                       return this->StreamedMoveObject(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MoveObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MoveObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::MoveObjectRequest* /*request*/, ::mruv::objects::MoveObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMoveObject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::objects::MoveObjectRequest,::mruv::objects::MoveObjectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MoveObjectNext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MoveObjectNext() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::objects::MoveObjectNextRequest, ::mruv::objects::MoveObjectNextResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::objects::MoveObjectNextRequest, ::mruv::objects::MoveObjectNextResponse>* streamer) {
                       return this->StreamedMoveObjectNext(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MoveObjectNext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MoveObjectNext(::grpc::ServerContext* /*context*/, const ::mruv::objects::MoveObjectNextRequest* /*request*/, ::mruv::objects::MoveObjectNextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMoveObjectNext(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::objects::MoveObjectNextRequest,::mruv::objects::MoveObjectNextResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MoveObjectPrevious : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MoveObjectPrevious() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::objects::MoveObjectPreviousRequest, ::mruv::objects::MoveObjectPreviousResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::objects::MoveObjectPreviousRequest, ::mruv::objects::MoveObjectPreviousResponse>* streamer) {
                       return this->StreamedMoveObjectPrevious(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MoveObjectPrevious() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MoveObjectPrevious(::grpc::ServerContext* /*context*/, const ::mruv::objects::MoveObjectPreviousRequest* /*request*/, ::mruv::objects::MoveObjectPreviousResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMoveObjectPrevious(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::objects::MoveObjectPreviousRequest,::mruv::objects::MoveObjectPreviousResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateMovableObject<WithStreamedUnaryMethod_GetMovableObject<WithStreamedUnaryMethod_UpdateMovableObject<WithStreamedUnaryMethod_DeleteMovableObject<WithStreamedUnaryMethod_MoveObject<WithStreamedUnaryMethod_MoveObjectNext<WithStreamedUnaryMethod_MoveObjectPrevious<Service > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_FetchAllMovableObjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_FetchAllMovableObjects() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::mruv::objects::FetchAllMovableObjectsRequest, ::mruv::objects::FetchAllMovableObjectsResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerSplitStreamer<
                     ::mruv::objects::FetchAllMovableObjectsRequest, ::mruv::objects::FetchAllMovableObjectsResponse>* streamer) {
                       return this->StreamedFetchAllMovableObjects(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_FetchAllMovableObjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FetchAllMovableObjects(::grpc::ServerContext* /*context*/, const ::mruv::objects::FetchAllMovableObjectsRequest* /*request*/, ::grpc::ServerWriter< ::mruv::objects::FetchAllMovableObjectsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedFetchAllMovableObjects(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::mruv::objects::FetchAllMovableObjectsRequest,::mruv::objects::FetchAllMovableObjectsResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_FetchAllMovableObjects<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateMovableObject<WithStreamedUnaryMethod_GetMovableObject<WithStreamedUnaryMethod_UpdateMovableObject<WithStreamedUnaryMethod_DeleteMovableObject<WithStreamedUnaryMethod_MoveObject<WithStreamedUnaryMethod_MoveObjectNext<WithStreamedUnaryMethod_MoveObjectPrevious<WithSplitStreamingMethod_FetchAllMovableObjects<Service > > > > > > > > StreamedService;
};

}  // namespace objects
}  // namespace mruv


#endif  // GRPC_objects_2fmovable_2eproto__INCLUDED
