// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: objects/models.proto

#include "objects/models.pb.h"
#include "objects/models.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace mruv {
namespace objects {

static const char* MruVObjectModelsService_method_names[] = {
  "/mruv.objects.MruVObjectModelsService/CreateObjectModel",
  "/mruv.objects.MruVObjectModelsService/GetObjectModel",
  "/mruv.objects.MruVObjectModelsService/UpdateObjectModel",
  "/mruv.objects.MruVObjectModelsService/DeleteObjectModel",
};

std::unique_ptr< MruVObjectModelsService::Stub> MruVObjectModelsService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MruVObjectModelsService::Stub> stub(new MruVObjectModelsService::Stub(channel));
  return stub;
}

MruVObjectModelsService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateObjectModel_(MruVObjectModelsService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetObjectModel_(MruVObjectModelsService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateObjectModel_(MruVObjectModelsService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteObjectModel_(MruVObjectModelsService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MruVObjectModelsService::Stub::CreateObjectModel(::grpc::ClientContext* context, const ::mruv::objects::CreateObjectModelRequest& request, ::mruv::objects::CreateObjectModelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateObjectModel_, context, request, response);
}

void MruVObjectModelsService::Stub::experimental_async::CreateObjectModel(::grpc::ClientContext* context, const ::mruv::objects::CreateObjectModelRequest* request, ::mruv::objects::CreateObjectModelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateObjectModel_, context, request, response, std::move(f));
}

void MruVObjectModelsService::Stub::experimental_async::CreateObjectModel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::CreateObjectModelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateObjectModel_, context, request, response, std::move(f));
}

void MruVObjectModelsService::Stub::experimental_async::CreateObjectModel(::grpc::ClientContext* context, const ::mruv::objects::CreateObjectModelRequest* request, ::mruv::objects::CreateObjectModelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateObjectModel_, context, request, response, reactor);
}

void MruVObjectModelsService::Stub::experimental_async::CreateObjectModel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::CreateObjectModelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateObjectModel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::objects::CreateObjectModelResponse>* MruVObjectModelsService::Stub::AsyncCreateObjectModelRaw(::grpc::ClientContext* context, const ::mruv::objects::CreateObjectModelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::objects::CreateObjectModelResponse>::Create(channel_.get(), cq, rpcmethod_CreateObjectModel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::objects::CreateObjectModelResponse>* MruVObjectModelsService::Stub::PrepareAsyncCreateObjectModelRaw(::grpc::ClientContext* context, const ::mruv::objects::CreateObjectModelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::objects::CreateObjectModelResponse>::Create(channel_.get(), cq, rpcmethod_CreateObjectModel_, context, request, false);
}

::grpc::Status MruVObjectModelsService::Stub::GetObjectModel(::grpc::ClientContext* context, const ::mruv::objects::GetObjectModelRequest& request, ::mruv::objects::GetObjectModelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetObjectModel_, context, request, response);
}

void MruVObjectModelsService::Stub::experimental_async::GetObjectModel(::grpc::ClientContext* context, const ::mruv::objects::GetObjectModelRequest* request, ::mruv::objects::GetObjectModelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetObjectModel_, context, request, response, std::move(f));
}

void MruVObjectModelsService::Stub::experimental_async::GetObjectModel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::GetObjectModelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetObjectModel_, context, request, response, std::move(f));
}

void MruVObjectModelsService::Stub::experimental_async::GetObjectModel(::grpc::ClientContext* context, const ::mruv::objects::GetObjectModelRequest* request, ::mruv::objects::GetObjectModelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetObjectModel_, context, request, response, reactor);
}

void MruVObjectModelsService::Stub::experimental_async::GetObjectModel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::GetObjectModelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetObjectModel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::objects::GetObjectModelResponse>* MruVObjectModelsService::Stub::AsyncGetObjectModelRaw(::grpc::ClientContext* context, const ::mruv::objects::GetObjectModelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::objects::GetObjectModelResponse>::Create(channel_.get(), cq, rpcmethod_GetObjectModel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::objects::GetObjectModelResponse>* MruVObjectModelsService::Stub::PrepareAsyncGetObjectModelRaw(::grpc::ClientContext* context, const ::mruv::objects::GetObjectModelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::objects::GetObjectModelResponse>::Create(channel_.get(), cq, rpcmethod_GetObjectModel_, context, request, false);
}

::grpc::Status MruVObjectModelsService::Stub::UpdateObjectModel(::grpc::ClientContext* context, const ::mruv::objects::UpdateObjectModelRequest& request, ::mruv::objects::UpdateObjectModelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateObjectModel_, context, request, response);
}

void MruVObjectModelsService::Stub::experimental_async::UpdateObjectModel(::grpc::ClientContext* context, const ::mruv::objects::UpdateObjectModelRequest* request, ::mruv::objects::UpdateObjectModelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateObjectModel_, context, request, response, std::move(f));
}

void MruVObjectModelsService::Stub::experimental_async::UpdateObjectModel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::UpdateObjectModelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateObjectModel_, context, request, response, std::move(f));
}

void MruVObjectModelsService::Stub::experimental_async::UpdateObjectModel(::grpc::ClientContext* context, const ::mruv::objects::UpdateObjectModelRequest* request, ::mruv::objects::UpdateObjectModelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateObjectModel_, context, request, response, reactor);
}

void MruVObjectModelsService::Stub::experimental_async::UpdateObjectModel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::UpdateObjectModelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateObjectModel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::objects::UpdateObjectModelResponse>* MruVObjectModelsService::Stub::AsyncUpdateObjectModelRaw(::grpc::ClientContext* context, const ::mruv::objects::UpdateObjectModelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::objects::UpdateObjectModelResponse>::Create(channel_.get(), cq, rpcmethod_UpdateObjectModel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::objects::UpdateObjectModelResponse>* MruVObjectModelsService::Stub::PrepareAsyncUpdateObjectModelRaw(::grpc::ClientContext* context, const ::mruv::objects::UpdateObjectModelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::objects::UpdateObjectModelResponse>::Create(channel_.get(), cq, rpcmethod_UpdateObjectModel_, context, request, false);
}

::grpc::Status MruVObjectModelsService::Stub::DeleteObjectModel(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectModelRequest& request, ::mruv::objects::DeleteObjectModelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteObjectModel_, context, request, response);
}

void MruVObjectModelsService::Stub::experimental_async::DeleteObjectModel(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectModelRequest* request, ::mruv::objects::DeleteObjectModelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteObjectModel_, context, request, response, std::move(f));
}

void MruVObjectModelsService::Stub::experimental_async::DeleteObjectModel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::DeleteObjectModelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteObjectModel_, context, request, response, std::move(f));
}

void MruVObjectModelsService::Stub::experimental_async::DeleteObjectModel(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectModelRequest* request, ::mruv::objects::DeleteObjectModelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteObjectModel_, context, request, response, reactor);
}

void MruVObjectModelsService::Stub::experimental_async::DeleteObjectModel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::DeleteObjectModelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteObjectModel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::objects::DeleteObjectModelResponse>* MruVObjectModelsService::Stub::AsyncDeleteObjectModelRaw(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectModelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::objects::DeleteObjectModelResponse>::Create(channel_.get(), cq, rpcmethod_DeleteObjectModel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::objects::DeleteObjectModelResponse>* MruVObjectModelsService::Stub::PrepareAsyncDeleteObjectModelRaw(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectModelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::objects::DeleteObjectModelResponse>::Create(channel_.get(), cq, rpcmethod_DeleteObjectModel_, context, request, false);
}

MruVObjectModelsService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVObjectModelsService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVObjectModelsService::Service, ::mruv::objects::CreateObjectModelRequest, ::mruv::objects::CreateObjectModelResponse>(
          [](MruVObjectModelsService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mruv::objects::CreateObjectModelRequest* req,
             ::mruv::objects::CreateObjectModelResponse* resp) {
               return service->CreateObjectModel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVObjectModelsService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVObjectModelsService::Service, ::mruv::objects::GetObjectModelRequest, ::mruv::objects::GetObjectModelResponse>(
          [](MruVObjectModelsService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mruv::objects::GetObjectModelRequest* req,
             ::mruv::objects::GetObjectModelResponse* resp) {
               return service->GetObjectModel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVObjectModelsService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVObjectModelsService::Service, ::mruv::objects::UpdateObjectModelRequest, ::mruv::objects::UpdateObjectModelResponse>(
          [](MruVObjectModelsService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mruv::objects::UpdateObjectModelRequest* req,
             ::mruv::objects::UpdateObjectModelResponse* resp) {
               return service->UpdateObjectModel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVObjectModelsService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVObjectModelsService::Service, ::mruv::objects::DeleteObjectModelRequest, ::mruv::objects::DeleteObjectModelResponse>(
          [](MruVObjectModelsService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mruv::objects::DeleteObjectModelRequest* req,
             ::mruv::objects::DeleteObjectModelResponse* resp) {
               return service->DeleteObjectModel(ctx, req, resp);
             }, this)));
}

MruVObjectModelsService::Service::~Service() {
}

::grpc::Status MruVObjectModelsService::Service::CreateObjectModel(::grpc::ServerContext* context, const ::mruv::objects::CreateObjectModelRequest* request, ::mruv::objects::CreateObjectModelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVObjectModelsService::Service::GetObjectModel(::grpc::ServerContext* context, const ::mruv::objects::GetObjectModelRequest* request, ::mruv::objects::GetObjectModelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVObjectModelsService::Service::UpdateObjectModel(::grpc::ServerContext* context, const ::mruv::objects::UpdateObjectModelRequest* request, ::mruv::objects::UpdateObjectModelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVObjectModelsService::Service::DeleteObjectModel(::grpc::ServerContext* context, const ::mruv::objects::DeleteObjectModelRequest* request, ::mruv::objects::DeleteObjectModelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mruv
}  // namespace objects

