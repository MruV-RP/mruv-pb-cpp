// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: objects/objects.proto
#ifndef GRPC_objects_2fobjects_2eproto__INCLUDED
#define GRPC_objects_2fobjects_2eproto__INCLUDED

#include "objects/objects.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace mruv {
namespace objects {

// The MruV objects service provides procedures for game objects.
class MruVObjectsService final {
 public:
  static constexpr char const* service_full_name() {
    return "mruv.objects.MruVObjectsService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Create an object.
    virtual ::grpc::Status CreateObject(::grpc::ClientContext* context, const ::mruv::objects::CreateObjectRequest& request, ::mruv::objects::CreateObjectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::CreateObjectResponse>> AsyncCreateObject(::grpc::ClientContext* context, const ::mruv::objects::CreateObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::CreateObjectResponse>>(AsyncCreateObjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::CreateObjectResponse>> PrepareAsyncCreateObject(::grpc::ClientContext* context, const ::mruv::objects::CreateObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::CreateObjectResponse>>(PrepareAsyncCreateObjectRaw(context, request, cq));
    }
    // Get an object.
    virtual ::grpc::Status GetObject(::grpc::ClientContext* context, const ::mruv::objects::GetObjectRequest& request, ::mruv::objects::GetObjectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::GetObjectResponse>> AsyncGetObject(::grpc::ClientContext* context, const ::mruv::objects::GetObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::GetObjectResponse>>(AsyncGetObjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::GetObjectResponse>> PrepareAsyncGetObject(::grpc::ClientContext* context, const ::mruv::objects::GetObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::GetObjectResponse>>(PrepareAsyncGetObjectRaw(context, request, cq));
    }
    // Update an object.
    virtual ::grpc::Status UpdateObject(::grpc::ClientContext* context, const ::mruv::objects::UpdateObjectRequest& request, ::mruv::objects::UpdateObjectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::UpdateObjectResponse>> AsyncUpdateObject(::grpc::ClientContext* context, const ::mruv::objects::UpdateObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::UpdateObjectResponse>>(AsyncUpdateObjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::UpdateObjectResponse>> PrepareAsyncUpdateObject(::grpc::ClientContext* context, const ::mruv::objects::UpdateObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::UpdateObjectResponse>>(PrepareAsyncUpdateObjectRaw(context, request, cq));
    }
    // Delete an object.
    virtual ::grpc::Status DeleteObject(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectRequest& request, ::mruv::objects::DeleteObjectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::DeleteObjectResponse>> AsyncDeleteObject(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::DeleteObjectResponse>>(AsyncDeleteObjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::DeleteObjectResponse>> PrepareAsyncDeleteObject(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::DeleteObjectResponse>>(PrepareAsyncDeleteObjectRaw(context, request, cq));
    }
    // Add a material to existing object.
    virtual ::grpc::Status AddObjectMaterial(::grpc::ClientContext* context, const ::mruv::objects::AddObjectMaterialRequest& request, ::mruv::objects::AddObjectMaterialResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::AddObjectMaterialResponse>> AsyncAddObjectMaterial(::grpc::ClientContext* context, const ::mruv::objects::AddObjectMaterialRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::AddObjectMaterialResponse>>(AsyncAddObjectMaterialRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::AddObjectMaterialResponse>> PrepareAsyncAddObjectMaterial(::grpc::ClientContext* context, const ::mruv::objects::AddObjectMaterialRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::AddObjectMaterialResponse>>(PrepareAsyncAddObjectMaterialRaw(context, request, cq));
    }
    // Get all object materials.
    virtual ::grpc::Status GetObjectMaterials(::grpc::ClientContext* context, const ::mruv::objects::GetObjectMaterialsRequest& request, ::mruv::objects::GetObjectMaterialsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::GetObjectMaterialsResponse>> AsyncGetObjectMaterials(::grpc::ClientContext* context, const ::mruv::objects::GetObjectMaterialsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::GetObjectMaterialsResponse>>(AsyncGetObjectMaterialsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::GetObjectMaterialsResponse>> PrepareAsyncGetObjectMaterials(::grpc::ClientContext* context, const ::mruv::objects::GetObjectMaterialsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::GetObjectMaterialsResponse>>(PrepareAsyncGetObjectMaterialsRaw(context, request, cq));
    }
    // Delete a material assigned to an object.
    virtual ::grpc::Status DeleteObjectMaterial(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectMaterialRequest& request, ::mruv::objects::DeleteObjectMaterialResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::DeleteObjectMaterialResponse>> AsyncDeleteObjectMaterial(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectMaterialRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::DeleteObjectMaterialResponse>>(AsyncDeleteObjectMaterialRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::DeleteObjectMaterialResponse>> PrepareAsyncDeleteObjectMaterial(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectMaterialRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::DeleteObjectMaterialResponse>>(PrepareAsyncDeleteObjectMaterialRaw(context, request, cq));
    }
    // Add a material text to existing object.
    virtual ::grpc::Status AddObjectMaterialText(::grpc::ClientContext* context, const ::mruv::objects::AddObjectMaterialTextRequest& request, ::mruv::objects::AddObjectMaterialTextResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::AddObjectMaterialTextResponse>> AsyncAddObjectMaterialText(::grpc::ClientContext* context, const ::mruv::objects::AddObjectMaterialTextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::AddObjectMaterialTextResponse>>(AsyncAddObjectMaterialTextRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::AddObjectMaterialTextResponse>> PrepareAsyncAddObjectMaterialText(::grpc::ClientContext* context, const ::mruv::objects::AddObjectMaterialTextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::AddObjectMaterialTextResponse>>(PrepareAsyncAddObjectMaterialTextRaw(context, request, cq));
    }
    // Get all object material texts.
    virtual ::grpc::Status GetObjectMaterialTexts(::grpc::ClientContext* context, const ::mruv::objects::GetObjectMaterialTextsRequest& request, ::mruv::objects::GetObjectMaterialTextsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::GetObjectMaterialTextsResponse>> AsyncGetObjectMaterialTexts(::grpc::ClientContext* context, const ::mruv::objects::GetObjectMaterialTextsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::GetObjectMaterialTextsResponse>>(AsyncGetObjectMaterialTextsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::GetObjectMaterialTextsResponse>> PrepareAsyncGetObjectMaterialTexts(::grpc::ClientContext* context, const ::mruv::objects::GetObjectMaterialTextsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::GetObjectMaterialTextsResponse>>(PrepareAsyncGetObjectMaterialTextsRaw(context, request, cq));
    }
    // Delete a material text assigned to an object.
    virtual ::grpc::Status DeleteObjectMaterialText(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectMaterialTextRequest& request, ::mruv::objects::DeleteObjectMaterialTextResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::DeleteObjectMaterialTextResponse>> AsyncDeleteObjectMaterialText(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectMaterialTextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::DeleteObjectMaterialTextResponse>>(AsyncDeleteObjectMaterialTextRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::DeleteObjectMaterialTextResponse>> PrepareAsyncDeleteObjectMaterialText(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectMaterialTextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::DeleteObjectMaterialTextResponse>>(PrepareAsyncDeleteObjectMaterialTextRaw(context, request, cq));
    }
    // Removes a object from GTA SA map.
    virtual ::grpc::Status AddRemoveBuilding(::grpc::ClientContext* context, const ::mruv::objects::AddRemoveBuildingRequest& request, ::mruv::objects::AddRemoveBuildingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::AddRemoveBuildingResponse>> AsyncAddRemoveBuilding(::grpc::ClientContext* context, const ::mruv::objects::AddRemoveBuildingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::AddRemoveBuildingResponse>>(AsyncAddRemoveBuildingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::AddRemoveBuildingResponse>> PrepareAsyncAddRemoveBuilding(::grpc::ClientContext* context, const ::mruv::objects::AddRemoveBuildingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::AddRemoveBuildingResponse>>(PrepareAsyncAddRemoveBuildingRaw(context, request, cq));
    }
    // Get all removed objects.
    virtual ::grpc::Status GetRemovedBuildings(::grpc::ClientContext* context, const ::mruv::objects::GetRemovedBuildingsRequest& request, ::mruv::objects::GetRemovedBuildingsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::GetRemovedBuildingsResponse>> AsyncGetRemovedBuildings(::grpc::ClientContext* context, const ::mruv::objects::GetRemovedBuildingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::GetRemovedBuildingsResponse>>(AsyncGetRemovedBuildingsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::GetRemovedBuildingsResponse>> PrepareAsyncGetRemovedBuildings(::grpc::ClientContext* context, const ::mruv::objects::GetRemovedBuildingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::GetRemovedBuildingsResponse>>(PrepareAsyncGetRemovedBuildingsRaw(context, request, cq));
    }
    // Delete removed buildings.
    virtual ::grpc::Status DeleteRemoveBuilding(::grpc::ClientContext* context, const ::mruv::objects::DeleteRemoveBuildingRequest& request, ::mruv::objects::DeleteRemoveBuildingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::DeleteRemoveBuildingResponse>> AsyncDeleteRemoveBuilding(::grpc::ClientContext* context, const ::mruv::objects::DeleteRemoveBuildingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::DeleteRemoveBuildingResponse>>(AsyncDeleteRemoveBuildingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::DeleteRemoveBuildingResponse>> PrepareAsyncDeleteRemoveBuilding(::grpc::ClientContext* context, const ::mruv::objects::DeleteRemoveBuildingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::DeleteRemoveBuildingResponse>>(PrepareAsyncDeleteRemoveBuildingRaw(context, request, cq));
    }
    // Fetch all existing objects.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mruv::objects::FetchAllResponse>> FetchAll(::grpc::ClientContext* context, const ::mruv::objects::FetchAllRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mruv::objects::FetchAllResponse>>(FetchAllRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mruv::objects::FetchAllResponse>> AsyncFetchAll(::grpc::ClientContext* context, const ::mruv::objects::FetchAllRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mruv::objects::FetchAllResponse>>(AsyncFetchAllRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mruv::objects::FetchAllResponse>> PrepareAsyncFetchAll(::grpc::ClientContext* context, const ::mruv::objects::FetchAllRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mruv::objects::FetchAllResponse>>(PrepareAsyncFetchAllRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Create an object.
      virtual void CreateObject(::grpc::ClientContext* context, const ::mruv::objects::CreateObjectRequest* request, ::mruv::objects::CreateObjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::CreateObjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateObject(::grpc::ClientContext* context, const ::mruv::objects::CreateObjectRequest* request, ::mruv::objects::CreateObjectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateObject(::grpc::ClientContext* context, const ::mruv::objects::CreateObjectRequest* request, ::mruv::objects::CreateObjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::CreateObjectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::CreateObjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get an object.
      virtual void GetObject(::grpc::ClientContext* context, const ::mruv::objects::GetObjectRequest* request, ::mruv::objects::GetObjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::GetObjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetObject(::grpc::ClientContext* context, const ::mruv::objects::GetObjectRequest* request, ::mruv::objects::GetObjectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetObject(::grpc::ClientContext* context, const ::mruv::objects::GetObjectRequest* request, ::mruv::objects::GetObjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::GetObjectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::GetObjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Update an object.
      virtual void UpdateObject(::grpc::ClientContext* context, const ::mruv::objects::UpdateObjectRequest* request, ::mruv::objects::UpdateObjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::UpdateObjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateObject(::grpc::ClientContext* context, const ::mruv::objects::UpdateObjectRequest* request, ::mruv::objects::UpdateObjectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateObject(::grpc::ClientContext* context, const ::mruv::objects::UpdateObjectRequest* request, ::mruv::objects::UpdateObjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::UpdateObjectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::UpdateObjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Delete an object.
      virtual void DeleteObject(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectRequest* request, ::mruv::objects::DeleteObjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::DeleteObjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteObject(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectRequest* request, ::mruv::objects::DeleteObjectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteObject(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectRequest* request, ::mruv::objects::DeleteObjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::DeleteObjectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::DeleteObjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Add a material to existing object.
      virtual void AddObjectMaterial(::grpc::ClientContext* context, const ::mruv::objects::AddObjectMaterialRequest* request, ::mruv::objects::AddObjectMaterialResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddObjectMaterial(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::AddObjectMaterialResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddObjectMaterial(::grpc::ClientContext* context, const ::mruv::objects::AddObjectMaterialRequest* request, ::mruv::objects::AddObjectMaterialResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddObjectMaterial(::grpc::ClientContext* context, const ::mruv::objects::AddObjectMaterialRequest* request, ::mruv::objects::AddObjectMaterialResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddObjectMaterial(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::AddObjectMaterialResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddObjectMaterial(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::AddObjectMaterialResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get all object materials.
      virtual void GetObjectMaterials(::grpc::ClientContext* context, const ::mruv::objects::GetObjectMaterialsRequest* request, ::mruv::objects::GetObjectMaterialsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetObjectMaterials(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::GetObjectMaterialsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetObjectMaterials(::grpc::ClientContext* context, const ::mruv::objects::GetObjectMaterialsRequest* request, ::mruv::objects::GetObjectMaterialsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetObjectMaterials(::grpc::ClientContext* context, const ::mruv::objects::GetObjectMaterialsRequest* request, ::mruv::objects::GetObjectMaterialsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetObjectMaterials(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::GetObjectMaterialsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetObjectMaterials(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::GetObjectMaterialsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Delete a material assigned to an object.
      virtual void DeleteObjectMaterial(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectMaterialRequest* request, ::mruv::objects::DeleteObjectMaterialResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteObjectMaterial(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::DeleteObjectMaterialResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteObjectMaterial(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectMaterialRequest* request, ::mruv::objects::DeleteObjectMaterialResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteObjectMaterial(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectMaterialRequest* request, ::mruv::objects::DeleteObjectMaterialResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteObjectMaterial(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::DeleteObjectMaterialResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteObjectMaterial(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::DeleteObjectMaterialResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Add a material text to existing object.
      virtual void AddObjectMaterialText(::grpc::ClientContext* context, const ::mruv::objects::AddObjectMaterialTextRequest* request, ::mruv::objects::AddObjectMaterialTextResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddObjectMaterialText(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::AddObjectMaterialTextResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddObjectMaterialText(::grpc::ClientContext* context, const ::mruv::objects::AddObjectMaterialTextRequest* request, ::mruv::objects::AddObjectMaterialTextResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddObjectMaterialText(::grpc::ClientContext* context, const ::mruv::objects::AddObjectMaterialTextRequest* request, ::mruv::objects::AddObjectMaterialTextResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddObjectMaterialText(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::AddObjectMaterialTextResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddObjectMaterialText(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::AddObjectMaterialTextResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get all object material texts.
      virtual void GetObjectMaterialTexts(::grpc::ClientContext* context, const ::mruv::objects::GetObjectMaterialTextsRequest* request, ::mruv::objects::GetObjectMaterialTextsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetObjectMaterialTexts(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::GetObjectMaterialTextsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetObjectMaterialTexts(::grpc::ClientContext* context, const ::mruv::objects::GetObjectMaterialTextsRequest* request, ::mruv::objects::GetObjectMaterialTextsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetObjectMaterialTexts(::grpc::ClientContext* context, const ::mruv::objects::GetObjectMaterialTextsRequest* request, ::mruv::objects::GetObjectMaterialTextsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetObjectMaterialTexts(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::GetObjectMaterialTextsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetObjectMaterialTexts(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::GetObjectMaterialTextsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Delete a material text assigned to an object.
      virtual void DeleteObjectMaterialText(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectMaterialTextRequest* request, ::mruv::objects::DeleteObjectMaterialTextResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteObjectMaterialText(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::DeleteObjectMaterialTextResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteObjectMaterialText(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectMaterialTextRequest* request, ::mruv::objects::DeleteObjectMaterialTextResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteObjectMaterialText(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectMaterialTextRequest* request, ::mruv::objects::DeleteObjectMaterialTextResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteObjectMaterialText(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::DeleteObjectMaterialTextResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteObjectMaterialText(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::DeleteObjectMaterialTextResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Removes a object from GTA SA map.
      virtual void AddRemoveBuilding(::grpc::ClientContext* context, const ::mruv::objects::AddRemoveBuildingRequest* request, ::mruv::objects::AddRemoveBuildingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddRemoveBuilding(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::AddRemoveBuildingResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddRemoveBuilding(::grpc::ClientContext* context, const ::mruv::objects::AddRemoveBuildingRequest* request, ::mruv::objects::AddRemoveBuildingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddRemoveBuilding(::grpc::ClientContext* context, const ::mruv::objects::AddRemoveBuildingRequest* request, ::mruv::objects::AddRemoveBuildingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddRemoveBuilding(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::AddRemoveBuildingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddRemoveBuilding(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::AddRemoveBuildingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get all removed objects.
      virtual void GetRemovedBuildings(::grpc::ClientContext* context, const ::mruv::objects::GetRemovedBuildingsRequest* request, ::mruv::objects::GetRemovedBuildingsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRemovedBuildings(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::GetRemovedBuildingsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetRemovedBuildings(::grpc::ClientContext* context, const ::mruv::objects::GetRemovedBuildingsRequest* request, ::mruv::objects::GetRemovedBuildingsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetRemovedBuildings(::grpc::ClientContext* context, const ::mruv::objects::GetRemovedBuildingsRequest* request, ::mruv::objects::GetRemovedBuildingsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetRemovedBuildings(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::GetRemovedBuildingsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetRemovedBuildings(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::GetRemovedBuildingsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Delete removed buildings.
      virtual void DeleteRemoveBuilding(::grpc::ClientContext* context, const ::mruv::objects::DeleteRemoveBuildingRequest* request, ::mruv::objects::DeleteRemoveBuildingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteRemoveBuilding(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::DeleteRemoveBuildingResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteRemoveBuilding(::grpc::ClientContext* context, const ::mruv::objects::DeleteRemoveBuildingRequest* request, ::mruv::objects::DeleteRemoveBuildingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteRemoveBuilding(::grpc::ClientContext* context, const ::mruv::objects::DeleteRemoveBuildingRequest* request, ::mruv::objects::DeleteRemoveBuildingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteRemoveBuilding(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::DeleteRemoveBuildingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteRemoveBuilding(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::DeleteRemoveBuildingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Fetch all existing objects.
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void FetchAll(::grpc::ClientContext* context, ::mruv::objects::FetchAllRequest* request, ::grpc::ClientReadReactor< ::mruv::objects::FetchAllResponse>* reactor) = 0;
      #else
      virtual void FetchAll(::grpc::ClientContext* context, ::mruv::objects::FetchAllRequest* request, ::grpc::experimental::ClientReadReactor< ::mruv::objects::FetchAllResponse>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::CreateObjectResponse>* AsyncCreateObjectRaw(::grpc::ClientContext* context, const ::mruv::objects::CreateObjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::CreateObjectResponse>* PrepareAsyncCreateObjectRaw(::grpc::ClientContext* context, const ::mruv::objects::CreateObjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::GetObjectResponse>* AsyncGetObjectRaw(::grpc::ClientContext* context, const ::mruv::objects::GetObjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::GetObjectResponse>* PrepareAsyncGetObjectRaw(::grpc::ClientContext* context, const ::mruv::objects::GetObjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::UpdateObjectResponse>* AsyncUpdateObjectRaw(::grpc::ClientContext* context, const ::mruv::objects::UpdateObjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::UpdateObjectResponse>* PrepareAsyncUpdateObjectRaw(::grpc::ClientContext* context, const ::mruv::objects::UpdateObjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::DeleteObjectResponse>* AsyncDeleteObjectRaw(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::DeleteObjectResponse>* PrepareAsyncDeleteObjectRaw(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::AddObjectMaterialResponse>* AsyncAddObjectMaterialRaw(::grpc::ClientContext* context, const ::mruv::objects::AddObjectMaterialRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::AddObjectMaterialResponse>* PrepareAsyncAddObjectMaterialRaw(::grpc::ClientContext* context, const ::mruv::objects::AddObjectMaterialRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::GetObjectMaterialsResponse>* AsyncGetObjectMaterialsRaw(::grpc::ClientContext* context, const ::mruv::objects::GetObjectMaterialsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::GetObjectMaterialsResponse>* PrepareAsyncGetObjectMaterialsRaw(::grpc::ClientContext* context, const ::mruv::objects::GetObjectMaterialsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::DeleteObjectMaterialResponse>* AsyncDeleteObjectMaterialRaw(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectMaterialRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::DeleteObjectMaterialResponse>* PrepareAsyncDeleteObjectMaterialRaw(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectMaterialRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::AddObjectMaterialTextResponse>* AsyncAddObjectMaterialTextRaw(::grpc::ClientContext* context, const ::mruv::objects::AddObjectMaterialTextRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::AddObjectMaterialTextResponse>* PrepareAsyncAddObjectMaterialTextRaw(::grpc::ClientContext* context, const ::mruv::objects::AddObjectMaterialTextRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::GetObjectMaterialTextsResponse>* AsyncGetObjectMaterialTextsRaw(::grpc::ClientContext* context, const ::mruv::objects::GetObjectMaterialTextsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::GetObjectMaterialTextsResponse>* PrepareAsyncGetObjectMaterialTextsRaw(::grpc::ClientContext* context, const ::mruv::objects::GetObjectMaterialTextsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::DeleteObjectMaterialTextResponse>* AsyncDeleteObjectMaterialTextRaw(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectMaterialTextRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::DeleteObjectMaterialTextResponse>* PrepareAsyncDeleteObjectMaterialTextRaw(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectMaterialTextRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::AddRemoveBuildingResponse>* AsyncAddRemoveBuildingRaw(::grpc::ClientContext* context, const ::mruv::objects::AddRemoveBuildingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::AddRemoveBuildingResponse>* PrepareAsyncAddRemoveBuildingRaw(::grpc::ClientContext* context, const ::mruv::objects::AddRemoveBuildingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::GetRemovedBuildingsResponse>* AsyncGetRemovedBuildingsRaw(::grpc::ClientContext* context, const ::mruv::objects::GetRemovedBuildingsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::GetRemovedBuildingsResponse>* PrepareAsyncGetRemovedBuildingsRaw(::grpc::ClientContext* context, const ::mruv::objects::GetRemovedBuildingsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::DeleteRemoveBuildingResponse>* AsyncDeleteRemoveBuildingRaw(::grpc::ClientContext* context, const ::mruv::objects::DeleteRemoveBuildingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::objects::DeleteRemoveBuildingResponse>* PrepareAsyncDeleteRemoveBuildingRaw(::grpc::ClientContext* context, const ::mruv::objects::DeleteRemoveBuildingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::mruv::objects::FetchAllResponse>* FetchAllRaw(::grpc::ClientContext* context, const ::mruv::objects::FetchAllRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mruv::objects::FetchAllResponse>* AsyncFetchAllRaw(::grpc::ClientContext* context, const ::mruv::objects::FetchAllRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mruv::objects::FetchAllResponse>* PrepareAsyncFetchAllRaw(::grpc::ClientContext* context, const ::mruv::objects::FetchAllRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateObject(::grpc::ClientContext* context, const ::mruv::objects::CreateObjectRequest& request, ::mruv::objects::CreateObjectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::CreateObjectResponse>> AsyncCreateObject(::grpc::ClientContext* context, const ::mruv::objects::CreateObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::CreateObjectResponse>>(AsyncCreateObjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::CreateObjectResponse>> PrepareAsyncCreateObject(::grpc::ClientContext* context, const ::mruv::objects::CreateObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::CreateObjectResponse>>(PrepareAsyncCreateObjectRaw(context, request, cq));
    }
    ::grpc::Status GetObject(::grpc::ClientContext* context, const ::mruv::objects::GetObjectRequest& request, ::mruv::objects::GetObjectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::GetObjectResponse>> AsyncGetObject(::grpc::ClientContext* context, const ::mruv::objects::GetObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::GetObjectResponse>>(AsyncGetObjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::GetObjectResponse>> PrepareAsyncGetObject(::grpc::ClientContext* context, const ::mruv::objects::GetObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::GetObjectResponse>>(PrepareAsyncGetObjectRaw(context, request, cq));
    }
    ::grpc::Status UpdateObject(::grpc::ClientContext* context, const ::mruv::objects::UpdateObjectRequest& request, ::mruv::objects::UpdateObjectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::UpdateObjectResponse>> AsyncUpdateObject(::grpc::ClientContext* context, const ::mruv::objects::UpdateObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::UpdateObjectResponse>>(AsyncUpdateObjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::UpdateObjectResponse>> PrepareAsyncUpdateObject(::grpc::ClientContext* context, const ::mruv::objects::UpdateObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::UpdateObjectResponse>>(PrepareAsyncUpdateObjectRaw(context, request, cq));
    }
    ::grpc::Status DeleteObject(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectRequest& request, ::mruv::objects::DeleteObjectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::DeleteObjectResponse>> AsyncDeleteObject(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::DeleteObjectResponse>>(AsyncDeleteObjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::DeleteObjectResponse>> PrepareAsyncDeleteObject(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::DeleteObjectResponse>>(PrepareAsyncDeleteObjectRaw(context, request, cq));
    }
    ::grpc::Status AddObjectMaterial(::grpc::ClientContext* context, const ::mruv::objects::AddObjectMaterialRequest& request, ::mruv::objects::AddObjectMaterialResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::AddObjectMaterialResponse>> AsyncAddObjectMaterial(::grpc::ClientContext* context, const ::mruv::objects::AddObjectMaterialRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::AddObjectMaterialResponse>>(AsyncAddObjectMaterialRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::AddObjectMaterialResponse>> PrepareAsyncAddObjectMaterial(::grpc::ClientContext* context, const ::mruv::objects::AddObjectMaterialRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::AddObjectMaterialResponse>>(PrepareAsyncAddObjectMaterialRaw(context, request, cq));
    }
    ::grpc::Status GetObjectMaterials(::grpc::ClientContext* context, const ::mruv::objects::GetObjectMaterialsRequest& request, ::mruv::objects::GetObjectMaterialsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::GetObjectMaterialsResponse>> AsyncGetObjectMaterials(::grpc::ClientContext* context, const ::mruv::objects::GetObjectMaterialsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::GetObjectMaterialsResponse>>(AsyncGetObjectMaterialsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::GetObjectMaterialsResponse>> PrepareAsyncGetObjectMaterials(::grpc::ClientContext* context, const ::mruv::objects::GetObjectMaterialsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::GetObjectMaterialsResponse>>(PrepareAsyncGetObjectMaterialsRaw(context, request, cq));
    }
    ::grpc::Status DeleteObjectMaterial(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectMaterialRequest& request, ::mruv::objects::DeleteObjectMaterialResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::DeleteObjectMaterialResponse>> AsyncDeleteObjectMaterial(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectMaterialRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::DeleteObjectMaterialResponse>>(AsyncDeleteObjectMaterialRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::DeleteObjectMaterialResponse>> PrepareAsyncDeleteObjectMaterial(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectMaterialRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::DeleteObjectMaterialResponse>>(PrepareAsyncDeleteObjectMaterialRaw(context, request, cq));
    }
    ::grpc::Status AddObjectMaterialText(::grpc::ClientContext* context, const ::mruv::objects::AddObjectMaterialTextRequest& request, ::mruv::objects::AddObjectMaterialTextResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::AddObjectMaterialTextResponse>> AsyncAddObjectMaterialText(::grpc::ClientContext* context, const ::mruv::objects::AddObjectMaterialTextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::AddObjectMaterialTextResponse>>(AsyncAddObjectMaterialTextRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::AddObjectMaterialTextResponse>> PrepareAsyncAddObjectMaterialText(::grpc::ClientContext* context, const ::mruv::objects::AddObjectMaterialTextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::AddObjectMaterialTextResponse>>(PrepareAsyncAddObjectMaterialTextRaw(context, request, cq));
    }
    ::grpc::Status GetObjectMaterialTexts(::grpc::ClientContext* context, const ::mruv::objects::GetObjectMaterialTextsRequest& request, ::mruv::objects::GetObjectMaterialTextsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::GetObjectMaterialTextsResponse>> AsyncGetObjectMaterialTexts(::grpc::ClientContext* context, const ::mruv::objects::GetObjectMaterialTextsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::GetObjectMaterialTextsResponse>>(AsyncGetObjectMaterialTextsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::GetObjectMaterialTextsResponse>> PrepareAsyncGetObjectMaterialTexts(::grpc::ClientContext* context, const ::mruv::objects::GetObjectMaterialTextsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::GetObjectMaterialTextsResponse>>(PrepareAsyncGetObjectMaterialTextsRaw(context, request, cq));
    }
    ::grpc::Status DeleteObjectMaterialText(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectMaterialTextRequest& request, ::mruv::objects::DeleteObjectMaterialTextResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::DeleteObjectMaterialTextResponse>> AsyncDeleteObjectMaterialText(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectMaterialTextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::DeleteObjectMaterialTextResponse>>(AsyncDeleteObjectMaterialTextRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::DeleteObjectMaterialTextResponse>> PrepareAsyncDeleteObjectMaterialText(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectMaterialTextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::DeleteObjectMaterialTextResponse>>(PrepareAsyncDeleteObjectMaterialTextRaw(context, request, cq));
    }
    ::grpc::Status AddRemoveBuilding(::grpc::ClientContext* context, const ::mruv::objects::AddRemoveBuildingRequest& request, ::mruv::objects::AddRemoveBuildingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::AddRemoveBuildingResponse>> AsyncAddRemoveBuilding(::grpc::ClientContext* context, const ::mruv::objects::AddRemoveBuildingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::AddRemoveBuildingResponse>>(AsyncAddRemoveBuildingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::AddRemoveBuildingResponse>> PrepareAsyncAddRemoveBuilding(::grpc::ClientContext* context, const ::mruv::objects::AddRemoveBuildingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::AddRemoveBuildingResponse>>(PrepareAsyncAddRemoveBuildingRaw(context, request, cq));
    }
    ::grpc::Status GetRemovedBuildings(::grpc::ClientContext* context, const ::mruv::objects::GetRemovedBuildingsRequest& request, ::mruv::objects::GetRemovedBuildingsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::GetRemovedBuildingsResponse>> AsyncGetRemovedBuildings(::grpc::ClientContext* context, const ::mruv::objects::GetRemovedBuildingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::GetRemovedBuildingsResponse>>(AsyncGetRemovedBuildingsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::GetRemovedBuildingsResponse>> PrepareAsyncGetRemovedBuildings(::grpc::ClientContext* context, const ::mruv::objects::GetRemovedBuildingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::GetRemovedBuildingsResponse>>(PrepareAsyncGetRemovedBuildingsRaw(context, request, cq));
    }
    ::grpc::Status DeleteRemoveBuilding(::grpc::ClientContext* context, const ::mruv::objects::DeleteRemoveBuildingRequest& request, ::mruv::objects::DeleteRemoveBuildingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::DeleteRemoveBuildingResponse>> AsyncDeleteRemoveBuilding(::grpc::ClientContext* context, const ::mruv::objects::DeleteRemoveBuildingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::DeleteRemoveBuildingResponse>>(AsyncDeleteRemoveBuildingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::DeleteRemoveBuildingResponse>> PrepareAsyncDeleteRemoveBuilding(::grpc::ClientContext* context, const ::mruv::objects::DeleteRemoveBuildingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::objects::DeleteRemoveBuildingResponse>>(PrepareAsyncDeleteRemoveBuildingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::mruv::objects::FetchAllResponse>> FetchAll(::grpc::ClientContext* context, const ::mruv::objects::FetchAllRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mruv::objects::FetchAllResponse>>(FetchAllRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mruv::objects::FetchAllResponse>> AsyncFetchAll(::grpc::ClientContext* context, const ::mruv::objects::FetchAllRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mruv::objects::FetchAllResponse>>(AsyncFetchAllRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mruv::objects::FetchAllResponse>> PrepareAsyncFetchAll(::grpc::ClientContext* context, const ::mruv::objects::FetchAllRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mruv::objects::FetchAllResponse>>(PrepareAsyncFetchAllRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateObject(::grpc::ClientContext* context, const ::mruv::objects::CreateObjectRequest* request, ::mruv::objects::CreateObjectResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::CreateObjectResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateObject(::grpc::ClientContext* context, const ::mruv::objects::CreateObjectRequest* request, ::mruv::objects::CreateObjectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateObject(::grpc::ClientContext* context, const ::mruv::objects::CreateObjectRequest* request, ::mruv::objects::CreateObjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::CreateObjectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::CreateObjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetObject(::grpc::ClientContext* context, const ::mruv::objects::GetObjectRequest* request, ::mruv::objects::GetObjectResponse* response, std::function<void(::grpc::Status)>) override;
      void GetObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::GetObjectResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetObject(::grpc::ClientContext* context, const ::mruv::objects::GetObjectRequest* request, ::mruv::objects::GetObjectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetObject(::grpc::ClientContext* context, const ::mruv::objects::GetObjectRequest* request, ::mruv::objects::GetObjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::GetObjectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::GetObjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateObject(::grpc::ClientContext* context, const ::mruv::objects::UpdateObjectRequest* request, ::mruv::objects::UpdateObjectResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::UpdateObjectResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateObject(::grpc::ClientContext* context, const ::mruv::objects::UpdateObjectRequest* request, ::mruv::objects::UpdateObjectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateObject(::grpc::ClientContext* context, const ::mruv::objects::UpdateObjectRequest* request, ::mruv::objects::UpdateObjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::UpdateObjectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::UpdateObjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteObject(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectRequest* request, ::mruv::objects::DeleteObjectResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::DeleteObjectResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteObject(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectRequest* request, ::mruv::objects::DeleteObjectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteObject(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectRequest* request, ::mruv::objects::DeleteObjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::DeleteObjectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::DeleteObjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void AddObjectMaterial(::grpc::ClientContext* context, const ::mruv::objects::AddObjectMaterialRequest* request, ::mruv::objects::AddObjectMaterialResponse* response, std::function<void(::grpc::Status)>) override;
      void AddObjectMaterial(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::AddObjectMaterialResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddObjectMaterial(::grpc::ClientContext* context, const ::mruv::objects::AddObjectMaterialRequest* request, ::mruv::objects::AddObjectMaterialResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddObjectMaterial(::grpc::ClientContext* context, const ::mruv::objects::AddObjectMaterialRequest* request, ::mruv::objects::AddObjectMaterialResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddObjectMaterial(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::AddObjectMaterialResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddObjectMaterial(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::AddObjectMaterialResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetObjectMaterials(::grpc::ClientContext* context, const ::mruv::objects::GetObjectMaterialsRequest* request, ::mruv::objects::GetObjectMaterialsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetObjectMaterials(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::GetObjectMaterialsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetObjectMaterials(::grpc::ClientContext* context, const ::mruv::objects::GetObjectMaterialsRequest* request, ::mruv::objects::GetObjectMaterialsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetObjectMaterials(::grpc::ClientContext* context, const ::mruv::objects::GetObjectMaterialsRequest* request, ::mruv::objects::GetObjectMaterialsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetObjectMaterials(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::GetObjectMaterialsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetObjectMaterials(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::GetObjectMaterialsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteObjectMaterial(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectMaterialRequest* request, ::mruv::objects::DeleteObjectMaterialResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteObjectMaterial(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::DeleteObjectMaterialResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteObjectMaterial(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectMaterialRequest* request, ::mruv::objects::DeleteObjectMaterialResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteObjectMaterial(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectMaterialRequest* request, ::mruv::objects::DeleteObjectMaterialResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteObjectMaterial(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::DeleteObjectMaterialResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteObjectMaterial(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::DeleteObjectMaterialResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void AddObjectMaterialText(::grpc::ClientContext* context, const ::mruv::objects::AddObjectMaterialTextRequest* request, ::mruv::objects::AddObjectMaterialTextResponse* response, std::function<void(::grpc::Status)>) override;
      void AddObjectMaterialText(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::AddObjectMaterialTextResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddObjectMaterialText(::grpc::ClientContext* context, const ::mruv::objects::AddObjectMaterialTextRequest* request, ::mruv::objects::AddObjectMaterialTextResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddObjectMaterialText(::grpc::ClientContext* context, const ::mruv::objects::AddObjectMaterialTextRequest* request, ::mruv::objects::AddObjectMaterialTextResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddObjectMaterialText(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::AddObjectMaterialTextResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddObjectMaterialText(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::AddObjectMaterialTextResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetObjectMaterialTexts(::grpc::ClientContext* context, const ::mruv::objects::GetObjectMaterialTextsRequest* request, ::mruv::objects::GetObjectMaterialTextsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetObjectMaterialTexts(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::GetObjectMaterialTextsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetObjectMaterialTexts(::grpc::ClientContext* context, const ::mruv::objects::GetObjectMaterialTextsRequest* request, ::mruv::objects::GetObjectMaterialTextsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetObjectMaterialTexts(::grpc::ClientContext* context, const ::mruv::objects::GetObjectMaterialTextsRequest* request, ::mruv::objects::GetObjectMaterialTextsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetObjectMaterialTexts(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::GetObjectMaterialTextsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetObjectMaterialTexts(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::GetObjectMaterialTextsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteObjectMaterialText(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectMaterialTextRequest* request, ::mruv::objects::DeleteObjectMaterialTextResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteObjectMaterialText(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::DeleteObjectMaterialTextResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteObjectMaterialText(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectMaterialTextRequest* request, ::mruv::objects::DeleteObjectMaterialTextResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteObjectMaterialText(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectMaterialTextRequest* request, ::mruv::objects::DeleteObjectMaterialTextResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteObjectMaterialText(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::DeleteObjectMaterialTextResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteObjectMaterialText(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::DeleteObjectMaterialTextResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void AddRemoveBuilding(::grpc::ClientContext* context, const ::mruv::objects::AddRemoveBuildingRequest* request, ::mruv::objects::AddRemoveBuildingResponse* response, std::function<void(::grpc::Status)>) override;
      void AddRemoveBuilding(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::AddRemoveBuildingResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddRemoveBuilding(::grpc::ClientContext* context, const ::mruv::objects::AddRemoveBuildingRequest* request, ::mruv::objects::AddRemoveBuildingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddRemoveBuilding(::grpc::ClientContext* context, const ::mruv::objects::AddRemoveBuildingRequest* request, ::mruv::objects::AddRemoveBuildingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddRemoveBuilding(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::AddRemoveBuildingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddRemoveBuilding(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::AddRemoveBuildingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetRemovedBuildings(::grpc::ClientContext* context, const ::mruv::objects::GetRemovedBuildingsRequest* request, ::mruv::objects::GetRemovedBuildingsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetRemovedBuildings(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::GetRemovedBuildingsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetRemovedBuildings(::grpc::ClientContext* context, const ::mruv::objects::GetRemovedBuildingsRequest* request, ::mruv::objects::GetRemovedBuildingsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetRemovedBuildings(::grpc::ClientContext* context, const ::mruv::objects::GetRemovedBuildingsRequest* request, ::mruv::objects::GetRemovedBuildingsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetRemovedBuildings(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::GetRemovedBuildingsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetRemovedBuildings(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::GetRemovedBuildingsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteRemoveBuilding(::grpc::ClientContext* context, const ::mruv::objects::DeleteRemoveBuildingRequest* request, ::mruv::objects::DeleteRemoveBuildingResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteRemoveBuilding(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::DeleteRemoveBuildingResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteRemoveBuilding(::grpc::ClientContext* context, const ::mruv::objects::DeleteRemoveBuildingRequest* request, ::mruv::objects::DeleteRemoveBuildingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteRemoveBuilding(::grpc::ClientContext* context, const ::mruv::objects::DeleteRemoveBuildingRequest* request, ::mruv::objects::DeleteRemoveBuildingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteRemoveBuilding(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::DeleteRemoveBuildingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteRemoveBuilding(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::DeleteRemoveBuildingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void FetchAll(::grpc::ClientContext* context, ::mruv::objects::FetchAllRequest* request, ::grpc::ClientReadReactor< ::mruv::objects::FetchAllResponse>* reactor) override;
      #else
      void FetchAll(::grpc::ClientContext* context, ::mruv::objects::FetchAllRequest* request, ::grpc::experimental::ClientReadReactor< ::mruv::objects::FetchAllResponse>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mruv::objects::CreateObjectResponse>* AsyncCreateObjectRaw(::grpc::ClientContext* context, const ::mruv::objects::CreateObjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::objects::CreateObjectResponse>* PrepareAsyncCreateObjectRaw(::grpc::ClientContext* context, const ::mruv::objects::CreateObjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::objects::GetObjectResponse>* AsyncGetObjectRaw(::grpc::ClientContext* context, const ::mruv::objects::GetObjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::objects::GetObjectResponse>* PrepareAsyncGetObjectRaw(::grpc::ClientContext* context, const ::mruv::objects::GetObjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::objects::UpdateObjectResponse>* AsyncUpdateObjectRaw(::grpc::ClientContext* context, const ::mruv::objects::UpdateObjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::objects::UpdateObjectResponse>* PrepareAsyncUpdateObjectRaw(::grpc::ClientContext* context, const ::mruv::objects::UpdateObjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::objects::DeleteObjectResponse>* AsyncDeleteObjectRaw(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::objects::DeleteObjectResponse>* PrepareAsyncDeleteObjectRaw(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::objects::AddObjectMaterialResponse>* AsyncAddObjectMaterialRaw(::grpc::ClientContext* context, const ::mruv::objects::AddObjectMaterialRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::objects::AddObjectMaterialResponse>* PrepareAsyncAddObjectMaterialRaw(::grpc::ClientContext* context, const ::mruv::objects::AddObjectMaterialRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::objects::GetObjectMaterialsResponse>* AsyncGetObjectMaterialsRaw(::grpc::ClientContext* context, const ::mruv::objects::GetObjectMaterialsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::objects::GetObjectMaterialsResponse>* PrepareAsyncGetObjectMaterialsRaw(::grpc::ClientContext* context, const ::mruv::objects::GetObjectMaterialsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::objects::DeleteObjectMaterialResponse>* AsyncDeleteObjectMaterialRaw(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectMaterialRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::objects::DeleteObjectMaterialResponse>* PrepareAsyncDeleteObjectMaterialRaw(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectMaterialRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::objects::AddObjectMaterialTextResponse>* AsyncAddObjectMaterialTextRaw(::grpc::ClientContext* context, const ::mruv::objects::AddObjectMaterialTextRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::objects::AddObjectMaterialTextResponse>* PrepareAsyncAddObjectMaterialTextRaw(::grpc::ClientContext* context, const ::mruv::objects::AddObjectMaterialTextRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::objects::GetObjectMaterialTextsResponse>* AsyncGetObjectMaterialTextsRaw(::grpc::ClientContext* context, const ::mruv::objects::GetObjectMaterialTextsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::objects::GetObjectMaterialTextsResponse>* PrepareAsyncGetObjectMaterialTextsRaw(::grpc::ClientContext* context, const ::mruv::objects::GetObjectMaterialTextsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::objects::DeleteObjectMaterialTextResponse>* AsyncDeleteObjectMaterialTextRaw(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectMaterialTextRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::objects::DeleteObjectMaterialTextResponse>* PrepareAsyncDeleteObjectMaterialTextRaw(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectMaterialTextRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::objects::AddRemoveBuildingResponse>* AsyncAddRemoveBuildingRaw(::grpc::ClientContext* context, const ::mruv::objects::AddRemoveBuildingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::objects::AddRemoveBuildingResponse>* PrepareAsyncAddRemoveBuildingRaw(::grpc::ClientContext* context, const ::mruv::objects::AddRemoveBuildingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::objects::GetRemovedBuildingsResponse>* AsyncGetRemovedBuildingsRaw(::grpc::ClientContext* context, const ::mruv::objects::GetRemovedBuildingsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::objects::GetRemovedBuildingsResponse>* PrepareAsyncGetRemovedBuildingsRaw(::grpc::ClientContext* context, const ::mruv::objects::GetRemovedBuildingsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::objects::DeleteRemoveBuildingResponse>* AsyncDeleteRemoveBuildingRaw(::grpc::ClientContext* context, const ::mruv::objects::DeleteRemoveBuildingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::objects::DeleteRemoveBuildingResponse>* PrepareAsyncDeleteRemoveBuildingRaw(::grpc::ClientContext* context, const ::mruv::objects::DeleteRemoveBuildingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::mruv::objects::FetchAllResponse>* FetchAllRaw(::grpc::ClientContext* context, const ::mruv::objects::FetchAllRequest& request) override;
    ::grpc::ClientAsyncReader< ::mruv::objects::FetchAllResponse>* AsyncFetchAllRaw(::grpc::ClientContext* context, const ::mruv::objects::FetchAllRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mruv::objects::FetchAllResponse>* PrepareAsyncFetchAllRaw(::grpc::ClientContext* context, const ::mruv::objects::FetchAllRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateObject_;
    const ::grpc::internal::RpcMethod rpcmethod_GetObject_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateObject_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteObject_;
    const ::grpc::internal::RpcMethod rpcmethod_AddObjectMaterial_;
    const ::grpc::internal::RpcMethod rpcmethod_GetObjectMaterials_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteObjectMaterial_;
    const ::grpc::internal::RpcMethod rpcmethod_AddObjectMaterialText_;
    const ::grpc::internal::RpcMethod rpcmethod_GetObjectMaterialTexts_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteObjectMaterialText_;
    const ::grpc::internal::RpcMethod rpcmethod_AddRemoveBuilding_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRemovedBuildings_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteRemoveBuilding_;
    const ::grpc::internal::RpcMethod rpcmethod_FetchAll_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Create an object.
    virtual ::grpc::Status CreateObject(::grpc::ServerContext* context, const ::mruv::objects::CreateObjectRequest* request, ::mruv::objects::CreateObjectResponse* response);
    // Get an object.
    virtual ::grpc::Status GetObject(::grpc::ServerContext* context, const ::mruv::objects::GetObjectRequest* request, ::mruv::objects::GetObjectResponse* response);
    // Update an object.
    virtual ::grpc::Status UpdateObject(::grpc::ServerContext* context, const ::mruv::objects::UpdateObjectRequest* request, ::mruv::objects::UpdateObjectResponse* response);
    // Delete an object.
    virtual ::grpc::Status DeleteObject(::grpc::ServerContext* context, const ::mruv::objects::DeleteObjectRequest* request, ::mruv::objects::DeleteObjectResponse* response);
    // Add a material to existing object.
    virtual ::grpc::Status AddObjectMaterial(::grpc::ServerContext* context, const ::mruv::objects::AddObjectMaterialRequest* request, ::mruv::objects::AddObjectMaterialResponse* response);
    // Get all object materials.
    virtual ::grpc::Status GetObjectMaterials(::grpc::ServerContext* context, const ::mruv::objects::GetObjectMaterialsRequest* request, ::mruv::objects::GetObjectMaterialsResponse* response);
    // Delete a material assigned to an object.
    virtual ::grpc::Status DeleteObjectMaterial(::grpc::ServerContext* context, const ::mruv::objects::DeleteObjectMaterialRequest* request, ::mruv::objects::DeleteObjectMaterialResponse* response);
    // Add a material text to existing object.
    virtual ::grpc::Status AddObjectMaterialText(::grpc::ServerContext* context, const ::mruv::objects::AddObjectMaterialTextRequest* request, ::mruv::objects::AddObjectMaterialTextResponse* response);
    // Get all object material texts.
    virtual ::grpc::Status GetObjectMaterialTexts(::grpc::ServerContext* context, const ::mruv::objects::GetObjectMaterialTextsRequest* request, ::mruv::objects::GetObjectMaterialTextsResponse* response);
    // Delete a material text assigned to an object.
    virtual ::grpc::Status DeleteObjectMaterialText(::grpc::ServerContext* context, const ::mruv::objects::DeleteObjectMaterialTextRequest* request, ::mruv::objects::DeleteObjectMaterialTextResponse* response);
    // Removes a object from GTA SA map.
    virtual ::grpc::Status AddRemoveBuilding(::grpc::ServerContext* context, const ::mruv::objects::AddRemoveBuildingRequest* request, ::mruv::objects::AddRemoveBuildingResponse* response);
    // Get all removed objects.
    virtual ::grpc::Status GetRemovedBuildings(::grpc::ServerContext* context, const ::mruv::objects::GetRemovedBuildingsRequest* request, ::mruv::objects::GetRemovedBuildingsResponse* response);
    // Delete removed buildings.
    virtual ::grpc::Status DeleteRemoveBuilding(::grpc::ServerContext* context, const ::mruv::objects::DeleteRemoveBuildingRequest* request, ::mruv::objects::DeleteRemoveBuildingResponse* response);
    // Fetch all existing objects.
    virtual ::grpc::Status FetchAll(::grpc::ServerContext* context, const ::mruv::objects::FetchAllRequest* request, ::grpc::ServerWriter< ::mruv::objects::FetchAllResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateObject() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::CreateObjectRequest* /*request*/, ::mruv::objects::CreateObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateObject(::grpc::ServerContext* context, ::mruv::objects::CreateObjectRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::objects::CreateObjectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetObject() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::GetObjectRequest* /*request*/, ::mruv::objects::GetObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetObject(::grpc::ServerContext* context, ::mruv::objects::GetObjectRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::objects::GetObjectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateObject() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::UpdateObjectRequest* /*request*/, ::mruv::objects::UpdateObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateObject(::grpc::ServerContext* context, ::mruv::objects::UpdateObjectRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::objects::UpdateObjectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteObject() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::DeleteObjectRequest* /*request*/, ::mruv::objects::DeleteObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteObject(::grpc::ServerContext* context, ::mruv::objects::DeleteObjectRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::objects::DeleteObjectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddObjectMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddObjectMaterial() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_AddObjectMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddObjectMaterial(::grpc::ServerContext* /*context*/, const ::mruv::objects::AddObjectMaterialRequest* /*request*/, ::mruv::objects::AddObjectMaterialResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddObjectMaterial(::grpc::ServerContext* context, ::mruv::objects::AddObjectMaterialRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::objects::AddObjectMaterialResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetObjectMaterials : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetObjectMaterials() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetObjectMaterials() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetObjectMaterials(::grpc::ServerContext* /*context*/, const ::mruv::objects::GetObjectMaterialsRequest* /*request*/, ::mruv::objects::GetObjectMaterialsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetObjectMaterials(::grpc::ServerContext* context, ::mruv::objects::GetObjectMaterialsRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::objects::GetObjectMaterialsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteObjectMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteObjectMaterial() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_DeleteObjectMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteObjectMaterial(::grpc::ServerContext* /*context*/, const ::mruv::objects::DeleteObjectMaterialRequest* /*request*/, ::mruv::objects::DeleteObjectMaterialResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteObjectMaterial(::grpc::ServerContext* context, ::mruv::objects::DeleteObjectMaterialRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::objects::DeleteObjectMaterialResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddObjectMaterialText : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddObjectMaterialText() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_AddObjectMaterialText() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddObjectMaterialText(::grpc::ServerContext* /*context*/, const ::mruv::objects::AddObjectMaterialTextRequest* /*request*/, ::mruv::objects::AddObjectMaterialTextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddObjectMaterialText(::grpc::ServerContext* context, ::mruv::objects::AddObjectMaterialTextRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::objects::AddObjectMaterialTextResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetObjectMaterialTexts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetObjectMaterialTexts() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_GetObjectMaterialTexts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetObjectMaterialTexts(::grpc::ServerContext* /*context*/, const ::mruv::objects::GetObjectMaterialTextsRequest* /*request*/, ::mruv::objects::GetObjectMaterialTextsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetObjectMaterialTexts(::grpc::ServerContext* context, ::mruv::objects::GetObjectMaterialTextsRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::objects::GetObjectMaterialTextsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteObjectMaterialText : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteObjectMaterialText() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_DeleteObjectMaterialText() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteObjectMaterialText(::grpc::ServerContext* /*context*/, const ::mruv::objects::DeleteObjectMaterialTextRequest* /*request*/, ::mruv::objects::DeleteObjectMaterialTextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteObjectMaterialText(::grpc::ServerContext* context, ::mruv::objects::DeleteObjectMaterialTextRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::objects::DeleteObjectMaterialTextResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddRemoveBuilding : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddRemoveBuilding() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_AddRemoveBuilding() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddRemoveBuilding(::grpc::ServerContext* /*context*/, const ::mruv::objects::AddRemoveBuildingRequest* /*request*/, ::mruv::objects::AddRemoveBuildingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddRemoveBuilding(::grpc::ServerContext* context, ::mruv::objects::AddRemoveBuildingRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::objects::AddRemoveBuildingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRemovedBuildings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRemovedBuildings() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_GetRemovedBuildings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRemovedBuildings(::grpc::ServerContext* /*context*/, const ::mruv::objects::GetRemovedBuildingsRequest* /*request*/, ::mruv::objects::GetRemovedBuildingsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRemovedBuildings(::grpc::ServerContext* context, ::mruv::objects::GetRemovedBuildingsRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::objects::GetRemovedBuildingsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteRemoveBuilding : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteRemoveBuilding() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_DeleteRemoveBuilding() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRemoveBuilding(::grpc::ServerContext* /*context*/, const ::mruv::objects::DeleteRemoveBuildingRequest* /*request*/, ::mruv::objects::DeleteRemoveBuildingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRemoveBuilding(::grpc::ServerContext* context, ::mruv::objects::DeleteRemoveBuildingRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::objects::DeleteRemoveBuildingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FetchAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FetchAll() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_FetchAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchAll(::grpc::ServerContext* /*context*/, const ::mruv::objects::FetchAllRequest* /*request*/, ::grpc::ServerWriter< ::mruv::objects::FetchAllResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchAll(::grpc::ServerContext* context, ::mruv::objects::FetchAllRequest* request, ::grpc::ServerAsyncWriter< ::mruv::objects::FetchAllResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(13, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateObject<WithAsyncMethod_GetObject<WithAsyncMethod_UpdateObject<WithAsyncMethod_DeleteObject<WithAsyncMethod_AddObjectMaterial<WithAsyncMethod_GetObjectMaterials<WithAsyncMethod_DeleteObjectMaterial<WithAsyncMethod_AddObjectMaterialText<WithAsyncMethod_GetObjectMaterialTexts<WithAsyncMethod_DeleteObjectMaterialText<WithAsyncMethod_AddRemoveBuilding<WithAsyncMethod_GetRemovedBuildings<WithAsyncMethod_DeleteRemoveBuilding<WithAsyncMethod_FetchAll<Service > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateObject() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::objects::CreateObjectRequest, ::mruv::objects::CreateObjectResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::objects::CreateObjectRequest* request, ::mruv::objects::CreateObjectResponse* response) { return this->CreateObject(context, request, response); }));}
    void SetMessageAllocatorFor_CreateObject(
        ::grpc::experimental::MessageAllocator< ::mruv::objects::CreateObjectRequest, ::mruv::objects::CreateObjectResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::objects::CreateObjectRequest, ::mruv::objects::CreateObjectResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::CreateObjectRequest* /*request*/, ::mruv::objects::CreateObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateObject(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::objects::CreateObjectRequest* /*request*/, ::mruv::objects::CreateObjectResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateObject(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::objects::CreateObjectRequest* /*request*/, ::mruv::objects::CreateObjectResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetObject() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::objects::GetObjectRequest, ::mruv::objects::GetObjectResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::objects::GetObjectRequest* request, ::mruv::objects::GetObjectResponse* response) { return this->GetObject(context, request, response); }));}
    void SetMessageAllocatorFor_GetObject(
        ::grpc::experimental::MessageAllocator< ::mruv::objects::GetObjectRequest, ::mruv::objects::GetObjectResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::objects::GetObjectRequest, ::mruv::objects::GetObjectResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::GetObjectRequest* /*request*/, ::mruv::objects::GetObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetObject(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::objects::GetObjectRequest* /*request*/, ::mruv::objects::GetObjectResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetObject(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::objects::GetObjectRequest* /*request*/, ::mruv::objects::GetObjectResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateObject() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::objects::UpdateObjectRequest, ::mruv::objects::UpdateObjectResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::objects::UpdateObjectRequest* request, ::mruv::objects::UpdateObjectResponse* response) { return this->UpdateObject(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateObject(
        ::grpc::experimental::MessageAllocator< ::mruv::objects::UpdateObjectRequest, ::mruv::objects::UpdateObjectResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::objects::UpdateObjectRequest, ::mruv::objects::UpdateObjectResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::UpdateObjectRequest* /*request*/, ::mruv::objects::UpdateObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateObject(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::objects::UpdateObjectRequest* /*request*/, ::mruv::objects::UpdateObjectResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateObject(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::objects::UpdateObjectRequest* /*request*/, ::mruv::objects::UpdateObjectResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteObject() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::objects::DeleteObjectRequest, ::mruv::objects::DeleteObjectResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::objects::DeleteObjectRequest* request, ::mruv::objects::DeleteObjectResponse* response) { return this->DeleteObject(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteObject(
        ::grpc::experimental::MessageAllocator< ::mruv::objects::DeleteObjectRequest, ::mruv::objects::DeleteObjectResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::objects::DeleteObjectRequest, ::mruv::objects::DeleteObjectResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::DeleteObjectRequest* /*request*/, ::mruv::objects::DeleteObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteObject(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::objects::DeleteObjectRequest* /*request*/, ::mruv::objects::DeleteObjectResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteObject(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::objects::DeleteObjectRequest* /*request*/, ::mruv::objects::DeleteObjectResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddObjectMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AddObjectMaterial() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::objects::AddObjectMaterialRequest, ::mruv::objects::AddObjectMaterialResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::objects::AddObjectMaterialRequest* request, ::mruv::objects::AddObjectMaterialResponse* response) { return this->AddObjectMaterial(context, request, response); }));}
    void SetMessageAllocatorFor_AddObjectMaterial(
        ::grpc::experimental::MessageAllocator< ::mruv::objects::AddObjectMaterialRequest, ::mruv::objects::AddObjectMaterialResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::objects::AddObjectMaterialRequest, ::mruv::objects::AddObjectMaterialResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AddObjectMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddObjectMaterial(::grpc::ServerContext* /*context*/, const ::mruv::objects::AddObjectMaterialRequest* /*request*/, ::mruv::objects::AddObjectMaterialResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddObjectMaterial(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::objects::AddObjectMaterialRequest* /*request*/, ::mruv::objects::AddObjectMaterialResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddObjectMaterial(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::objects::AddObjectMaterialRequest* /*request*/, ::mruv::objects::AddObjectMaterialResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetObjectMaterials : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetObjectMaterials() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::objects::GetObjectMaterialsRequest, ::mruv::objects::GetObjectMaterialsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::objects::GetObjectMaterialsRequest* request, ::mruv::objects::GetObjectMaterialsResponse* response) { return this->GetObjectMaterials(context, request, response); }));}
    void SetMessageAllocatorFor_GetObjectMaterials(
        ::grpc::experimental::MessageAllocator< ::mruv::objects::GetObjectMaterialsRequest, ::mruv::objects::GetObjectMaterialsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::objects::GetObjectMaterialsRequest, ::mruv::objects::GetObjectMaterialsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetObjectMaterials() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetObjectMaterials(::grpc::ServerContext* /*context*/, const ::mruv::objects::GetObjectMaterialsRequest* /*request*/, ::mruv::objects::GetObjectMaterialsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetObjectMaterials(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::objects::GetObjectMaterialsRequest* /*request*/, ::mruv::objects::GetObjectMaterialsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetObjectMaterials(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::objects::GetObjectMaterialsRequest* /*request*/, ::mruv::objects::GetObjectMaterialsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteObjectMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteObjectMaterial() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::objects::DeleteObjectMaterialRequest, ::mruv::objects::DeleteObjectMaterialResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::objects::DeleteObjectMaterialRequest* request, ::mruv::objects::DeleteObjectMaterialResponse* response) { return this->DeleteObjectMaterial(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteObjectMaterial(
        ::grpc::experimental::MessageAllocator< ::mruv::objects::DeleteObjectMaterialRequest, ::mruv::objects::DeleteObjectMaterialResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::objects::DeleteObjectMaterialRequest, ::mruv::objects::DeleteObjectMaterialResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteObjectMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteObjectMaterial(::grpc::ServerContext* /*context*/, const ::mruv::objects::DeleteObjectMaterialRequest* /*request*/, ::mruv::objects::DeleteObjectMaterialResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteObjectMaterial(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::objects::DeleteObjectMaterialRequest* /*request*/, ::mruv::objects::DeleteObjectMaterialResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteObjectMaterial(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::objects::DeleteObjectMaterialRequest* /*request*/, ::mruv::objects::DeleteObjectMaterialResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddObjectMaterialText : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AddObjectMaterialText() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::objects::AddObjectMaterialTextRequest, ::mruv::objects::AddObjectMaterialTextResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::objects::AddObjectMaterialTextRequest* request, ::mruv::objects::AddObjectMaterialTextResponse* response) { return this->AddObjectMaterialText(context, request, response); }));}
    void SetMessageAllocatorFor_AddObjectMaterialText(
        ::grpc::experimental::MessageAllocator< ::mruv::objects::AddObjectMaterialTextRequest, ::mruv::objects::AddObjectMaterialTextResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::objects::AddObjectMaterialTextRequest, ::mruv::objects::AddObjectMaterialTextResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AddObjectMaterialText() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddObjectMaterialText(::grpc::ServerContext* /*context*/, const ::mruv::objects::AddObjectMaterialTextRequest* /*request*/, ::mruv::objects::AddObjectMaterialTextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddObjectMaterialText(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::objects::AddObjectMaterialTextRequest* /*request*/, ::mruv::objects::AddObjectMaterialTextResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddObjectMaterialText(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::objects::AddObjectMaterialTextRequest* /*request*/, ::mruv::objects::AddObjectMaterialTextResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetObjectMaterialTexts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetObjectMaterialTexts() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::objects::GetObjectMaterialTextsRequest, ::mruv::objects::GetObjectMaterialTextsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::objects::GetObjectMaterialTextsRequest* request, ::mruv::objects::GetObjectMaterialTextsResponse* response) { return this->GetObjectMaterialTexts(context, request, response); }));}
    void SetMessageAllocatorFor_GetObjectMaterialTexts(
        ::grpc::experimental::MessageAllocator< ::mruv::objects::GetObjectMaterialTextsRequest, ::mruv::objects::GetObjectMaterialTextsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(8);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::objects::GetObjectMaterialTextsRequest, ::mruv::objects::GetObjectMaterialTextsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetObjectMaterialTexts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetObjectMaterialTexts(::grpc::ServerContext* /*context*/, const ::mruv::objects::GetObjectMaterialTextsRequest* /*request*/, ::mruv::objects::GetObjectMaterialTextsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetObjectMaterialTexts(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::objects::GetObjectMaterialTextsRequest* /*request*/, ::mruv::objects::GetObjectMaterialTextsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetObjectMaterialTexts(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::objects::GetObjectMaterialTextsRequest* /*request*/, ::mruv::objects::GetObjectMaterialTextsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteObjectMaterialText : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteObjectMaterialText() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(9,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::objects::DeleteObjectMaterialTextRequest, ::mruv::objects::DeleteObjectMaterialTextResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::objects::DeleteObjectMaterialTextRequest* request, ::mruv::objects::DeleteObjectMaterialTextResponse* response) { return this->DeleteObjectMaterialText(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteObjectMaterialText(
        ::grpc::experimental::MessageAllocator< ::mruv::objects::DeleteObjectMaterialTextRequest, ::mruv::objects::DeleteObjectMaterialTextResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(9);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::objects::DeleteObjectMaterialTextRequest, ::mruv::objects::DeleteObjectMaterialTextResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteObjectMaterialText() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteObjectMaterialText(::grpc::ServerContext* /*context*/, const ::mruv::objects::DeleteObjectMaterialTextRequest* /*request*/, ::mruv::objects::DeleteObjectMaterialTextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteObjectMaterialText(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::objects::DeleteObjectMaterialTextRequest* /*request*/, ::mruv::objects::DeleteObjectMaterialTextResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteObjectMaterialText(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::objects::DeleteObjectMaterialTextRequest* /*request*/, ::mruv::objects::DeleteObjectMaterialTextResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddRemoveBuilding : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AddRemoveBuilding() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(10,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::objects::AddRemoveBuildingRequest, ::mruv::objects::AddRemoveBuildingResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::objects::AddRemoveBuildingRequest* request, ::mruv::objects::AddRemoveBuildingResponse* response) { return this->AddRemoveBuilding(context, request, response); }));}
    void SetMessageAllocatorFor_AddRemoveBuilding(
        ::grpc::experimental::MessageAllocator< ::mruv::objects::AddRemoveBuildingRequest, ::mruv::objects::AddRemoveBuildingResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(10);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::objects::AddRemoveBuildingRequest, ::mruv::objects::AddRemoveBuildingResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AddRemoveBuilding() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddRemoveBuilding(::grpc::ServerContext* /*context*/, const ::mruv::objects::AddRemoveBuildingRequest* /*request*/, ::mruv::objects::AddRemoveBuildingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddRemoveBuilding(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::objects::AddRemoveBuildingRequest* /*request*/, ::mruv::objects::AddRemoveBuildingResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddRemoveBuilding(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::objects::AddRemoveBuildingRequest* /*request*/, ::mruv::objects::AddRemoveBuildingResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetRemovedBuildings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetRemovedBuildings() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(11,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::objects::GetRemovedBuildingsRequest, ::mruv::objects::GetRemovedBuildingsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::objects::GetRemovedBuildingsRequest* request, ::mruv::objects::GetRemovedBuildingsResponse* response) { return this->GetRemovedBuildings(context, request, response); }));}
    void SetMessageAllocatorFor_GetRemovedBuildings(
        ::grpc::experimental::MessageAllocator< ::mruv::objects::GetRemovedBuildingsRequest, ::mruv::objects::GetRemovedBuildingsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(11);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::objects::GetRemovedBuildingsRequest, ::mruv::objects::GetRemovedBuildingsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetRemovedBuildings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRemovedBuildings(::grpc::ServerContext* /*context*/, const ::mruv::objects::GetRemovedBuildingsRequest* /*request*/, ::mruv::objects::GetRemovedBuildingsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetRemovedBuildings(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::objects::GetRemovedBuildingsRequest* /*request*/, ::mruv::objects::GetRemovedBuildingsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetRemovedBuildings(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::objects::GetRemovedBuildingsRequest* /*request*/, ::mruv::objects::GetRemovedBuildingsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteRemoveBuilding : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteRemoveBuilding() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(12,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::objects::DeleteRemoveBuildingRequest, ::mruv::objects::DeleteRemoveBuildingResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::objects::DeleteRemoveBuildingRequest* request, ::mruv::objects::DeleteRemoveBuildingResponse* response) { return this->DeleteRemoveBuilding(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteRemoveBuilding(
        ::grpc::experimental::MessageAllocator< ::mruv::objects::DeleteRemoveBuildingRequest, ::mruv::objects::DeleteRemoveBuildingResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(12);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::objects::DeleteRemoveBuildingRequest, ::mruv::objects::DeleteRemoveBuildingResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteRemoveBuilding() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRemoveBuilding(::grpc::ServerContext* /*context*/, const ::mruv::objects::DeleteRemoveBuildingRequest* /*request*/, ::mruv::objects::DeleteRemoveBuildingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteRemoveBuilding(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::objects::DeleteRemoveBuildingRequest* /*request*/, ::mruv::objects::DeleteRemoveBuildingResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteRemoveBuilding(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::objects::DeleteRemoveBuildingRequest* /*request*/, ::mruv::objects::DeleteRemoveBuildingResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_FetchAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_FetchAll() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(13,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::mruv::objects::FetchAllRequest, ::mruv::objects::FetchAllResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::objects::FetchAllRequest* request) { return this->FetchAll(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_FetchAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchAll(::grpc::ServerContext* /*context*/, const ::mruv::objects::FetchAllRequest* /*request*/, ::grpc::ServerWriter< ::mruv::objects::FetchAllResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::mruv::objects::FetchAllResponse>* FetchAll(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::objects::FetchAllRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::mruv::objects::FetchAllResponse>* FetchAll(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::objects::FetchAllRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_CreateObject<ExperimentalWithCallbackMethod_GetObject<ExperimentalWithCallbackMethod_UpdateObject<ExperimentalWithCallbackMethod_DeleteObject<ExperimentalWithCallbackMethod_AddObjectMaterial<ExperimentalWithCallbackMethod_GetObjectMaterials<ExperimentalWithCallbackMethod_DeleteObjectMaterial<ExperimentalWithCallbackMethod_AddObjectMaterialText<ExperimentalWithCallbackMethod_GetObjectMaterialTexts<ExperimentalWithCallbackMethod_DeleteObjectMaterialText<ExperimentalWithCallbackMethod_AddRemoveBuilding<ExperimentalWithCallbackMethod_GetRemovedBuildings<ExperimentalWithCallbackMethod_DeleteRemoveBuilding<ExperimentalWithCallbackMethod_FetchAll<Service > > > > > > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_CreateObject<ExperimentalWithCallbackMethod_GetObject<ExperimentalWithCallbackMethod_UpdateObject<ExperimentalWithCallbackMethod_DeleteObject<ExperimentalWithCallbackMethod_AddObjectMaterial<ExperimentalWithCallbackMethod_GetObjectMaterials<ExperimentalWithCallbackMethod_DeleteObjectMaterial<ExperimentalWithCallbackMethod_AddObjectMaterialText<ExperimentalWithCallbackMethod_GetObjectMaterialTexts<ExperimentalWithCallbackMethod_DeleteObjectMaterialText<ExperimentalWithCallbackMethod_AddRemoveBuilding<ExperimentalWithCallbackMethod_GetRemovedBuildings<ExperimentalWithCallbackMethod_DeleteRemoveBuilding<ExperimentalWithCallbackMethod_FetchAll<Service > > > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateObject() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::CreateObjectRequest* /*request*/, ::mruv::objects::CreateObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetObject() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::GetObjectRequest* /*request*/, ::mruv::objects::GetObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateObject() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::UpdateObjectRequest* /*request*/, ::mruv::objects::UpdateObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteObject() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::DeleteObjectRequest* /*request*/, ::mruv::objects::DeleteObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddObjectMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddObjectMaterial() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_AddObjectMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddObjectMaterial(::grpc::ServerContext* /*context*/, const ::mruv::objects::AddObjectMaterialRequest* /*request*/, ::mruv::objects::AddObjectMaterialResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetObjectMaterials : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetObjectMaterials() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetObjectMaterials() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetObjectMaterials(::grpc::ServerContext* /*context*/, const ::mruv::objects::GetObjectMaterialsRequest* /*request*/, ::mruv::objects::GetObjectMaterialsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteObjectMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteObjectMaterial() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_DeleteObjectMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteObjectMaterial(::grpc::ServerContext* /*context*/, const ::mruv::objects::DeleteObjectMaterialRequest* /*request*/, ::mruv::objects::DeleteObjectMaterialResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddObjectMaterialText : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddObjectMaterialText() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_AddObjectMaterialText() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddObjectMaterialText(::grpc::ServerContext* /*context*/, const ::mruv::objects::AddObjectMaterialTextRequest* /*request*/, ::mruv::objects::AddObjectMaterialTextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetObjectMaterialTexts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetObjectMaterialTexts() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_GetObjectMaterialTexts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetObjectMaterialTexts(::grpc::ServerContext* /*context*/, const ::mruv::objects::GetObjectMaterialTextsRequest* /*request*/, ::mruv::objects::GetObjectMaterialTextsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteObjectMaterialText : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteObjectMaterialText() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_DeleteObjectMaterialText() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteObjectMaterialText(::grpc::ServerContext* /*context*/, const ::mruv::objects::DeleteObjectMaterialTextRequest* /*request*/, ::mruv::objects::DeleteObjectMaterialTextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddRemoveBuilding : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddRemoveBuilding() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_AddRemoveBuilding() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddRemoveBuilding(::grpc::ServerContext* /*context*/, const ::mruv::objects::AddRemoveBuildingRequest* /*request*/, ::mruv::objects::AddRemoveBuildingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRemovedBuildings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRemovedBuildings() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_GetRemovedBuildings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRemovedBuildings(::grpc::ServerContext* /*context*/, const ::mruv::objects::GetRemovedBuildingsRequest* /*request*/, ::mruv::objects::GetRemovedBuildingsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteRemoveBuilding : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteRemoveBuilding() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_DeleteRemoveBuilding() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRemoveBuilding(::grpc::ServerContext* /*context*/, const ::mruv::objects::DeleteRemoveBuildingRequest* /*request*/, ::mruv::objects::DeleteRemoveBuildingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FetchAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FetchAll() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_FetchAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchAll(::grpc::ServerContext* /*context*/, const ::mruv::objects::FetchAllRequest* /*request*/, ::grpc::ServerWriter< ::mruv::objects::FetchAllResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateObject() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::CreateObjectRequest* /*request*/, ::mruv::objects::CreateObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateObject(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetObject() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::GetObjectRequest* /*request*/, ::mruv::objects::GetObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetObject(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateObject() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::UpdateObjectRequest* /*request*/, ::mruv::objects::UpdateObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateObject(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteObject() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::DeleteObjectRequest* /*request*/, ::mruv::objects::DeleteObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteObject(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddObjectMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddObjectMaterial() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_AddObjectMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddObjectMaterial(::grpc::ServerContext* /*context*/, const ::mruv::objects::AddObjectMaterialRequest* /*request*/, ::mruv::objects::AddObjectMaterialResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddObjectMaterial(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetObjectMaterials : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetObjectMaterials() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetObjectMaterials() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetObjectMaterials(::grpc::ServerContext* /*context*/, const ::mruv::objects::GetObjectMaterialsRequest* /*request*/, ::mruv::objects::GetObjectMaterialsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetObjectMaterials(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteObjectMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteObjectMaterial() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_DeleteObjectMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteObjectMaterial(::grpc::ServerContext* /*context*/, const ::mruv::objects::DeleteObjectMaterialRequest* /*request*/, ::mruv::objects::DeleteObjectMaterialResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteObjectMaterial(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddObjectMaterialText : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddObjectMaterialText() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_AddObjectMaterialText() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddObjectMaterialText(::grpc::ServerContext* /*context*/, const ::mruv::objects::AddObjectMaterialTextRequest* /*request*/, ::mruv::objects::AddObjectMaterialTextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddObjectMaterialText(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetObjectMaterialTexts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetObjectMaterialTexts() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_GetObjectMaterialTexts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetObjectMaterialTexts(::grpc::ServerContext* /*context*/, const ::mruv::objects::GetObjectMaterialTextsRequest* /*request*/, ::mruv::objects::GetObjectMaterialTextsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetObjectMaterialTexts(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteObjectMaterialText : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteObjectMaterialText() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_DeleteObjectMaterialText() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteObjectMaterialText(::grpc::ServerContext* /*context*/, const ::mruv::objects::DeleteObjectMaterialTextRequest* /*request*/, ::mruv::objects::DeleteObjectMaterialTextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteObjectMaterialText(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddRemoveBuilding : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddRemoveBuilding() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_AddRemoveBuilding() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddRemoveBuilding(::grpc::ServerContext* /*context*/, const ::mruv::objects::AddRemoveBuildingRequest* /*request*/, ::mruv::objects::AddRemoveBuildingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddRemoveBuilding(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRemovedBuildings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRemovedBuildings() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_GetRemovedBuildings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRemovedBuildings(::grpc::ServerContext* /*context*/, const ::mruv::objects::GetRemovedBuildingsRequest* /*request*/, ::mruv::objects::GetRemovedBuildingsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRemovedBuildings(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteRemoveBuilding : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteRemoveBuilding() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_DeleteRemoveBuilding() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRemoveBuilding(::grpc::ServerContext* /*context*/, const ::mruv::objects::DeleteRemoveBuildingRequest* /*request*/, ::mruv::objects::DeleteRemoveBuildingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRemoveBuilding(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FetchAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FetchAll() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_FetchAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchAll(::grpc::ServerContext* /*context*/, const ::mruv::objects::FetchAllRequest* /*request*/, ::grpc::ServerWriter< ::mruv::objects::FetchAllResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchAll(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(13, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateObject() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateObject(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::CreateObjectRequest* /*request*/, ::mruv::objects::CreateObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateObject(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateObject(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetObject() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetObject(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::GetObjectRequest* /*request*/, ::mruv::objects::GetObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetObject(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetObject(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateObject() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateObject(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::UpdateObjectRequest* /*request*/, ::mruv::objects::UpdateObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateObject(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateObject(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteObject() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteObject(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::DeleteObjectRequest* /*request*/, ::mruv::objects::DeleteObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteObject(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteObject(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddObjectMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AddObjectMaterial() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddObjectMaterial(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AddObjectMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddObjectMaterial(::grpc::ServerContext* /*context*/, const ::mruv::objects::AddObjectMaterialRequest* /*request*/, ::mruv::objects::AddObjectMaterialResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddObjectMaterial(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddObjectMaterial(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetObjectMaterials : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetObjectMaterials() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetObjectMaterials(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetObjectMaterials() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetObjectMaterials(::grpc::ServerContext* /*context*/, const ::mruv::objects::GetObjectMaterialsRequest* /*request*/, ::mruv::objects::GetObjectMaterialsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetObjectMaterials(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetObjectMaterials(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteObjectMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteObjectMaterial() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteObjectMaterial(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteObjectMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteObjectMaterial(::grpc::ServerContext* /*context*/, const ::mruv::objects::DeleteObjectMaterialRequest* /*request*/, ::mruv::objects::DeleteObjectMaterialResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteObjectMaterial(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteObjectMaterial(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddObjectMaterialText : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AddObjectMaterialText() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddObjectMaterialText(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AddObjectMaterialText() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddObjectMaterialText(::grpc::ServerContext* /*context*/, const ::mruv::objects::AddObjectMaterialTextRequest* /*request*/, ::mruv::objects::AddObjectMaterialTextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddObjectMaterialText(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddObjectMaterialText(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetObjectMaterialTexts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetObjectMaterialTexts() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetObjectMaterialTexts(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetObjectMaterialTexts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetObjectMaterialTexts(::grpc::ServerContext* /*context*/, const ::mruv::objects::GetObjectMaterialTextsRequest* /*request*/, ::mruv::objects::GetObjectMaterialTextsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetObjectMaterialTexts(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetObjectMaterialTexts(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteObjectMaterialText : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteObjectMaterialText() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(9,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteObjectMaterialText(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteObjectMaterialText() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteObjectMaterialText(::grpc::ServerContext* /*context*/, const ::mruv::objects::DeleteObjectMaterialTextRequest* /*request*/, ::mruv::objects::DeleteObjectMaterialTextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteObjectMaterialText(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteObjectMaterialText(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddRemoveBuilding : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AddRemoveBuilding() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(10,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddRemoveBuilding(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AddRemoveBuilding() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddRemoveBuilding(::grpc::ServerContext* /*context*/, const ::mruv::objects::AddRemoveBuildingRequest* /*request*/, ::mruv::objects::AddRemoveBuildingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddRemoveBuilding(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddRemoveBuilding(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetRemovedBuildings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetRemovedBuildings() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(11,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetRemovedBuildings(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetRemovedBuildings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRemovedBuildings(::grpc::ServerContext* /*context*/, const ::mruv::objects::GetRemovedBuildingsRequest* /*request*/, ::mruv::objects::GetRemovedBuildingsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetRemovedBuildings(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetRemovedBuildings(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteRemoveBuilding : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteRemoveBuilding() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(12,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteRemoveBuilding(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteRemoveBuilding() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRemoveBuilding(::grpc::ServerContext* /*context*/, const ::mruv::objects::DeleteRemoveBuildingRequest* /*request*/, ::mruv::objects::DeleteRemoveBuildingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteRemoveBuilding(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteRemoveBuilding(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_FetchAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_FetchAll() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(13,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->FetchAll(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_FetchAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchAll(::grpc::ServerContext* /*context*/, const ::mruv::objects::FetchAllRequest* /*request*/, ::grpc::ServerWriter< ::mruv::objects::FetchAllResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* FetchAll(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* FetchAll(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateObject() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::objects::CreateObjectRequest, ::mruv::objects::CreateObjectResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::objects::CreateObjectRequest, ::mruv::objects::CreateObjectResponse>* streamer) {
                       return this->StreamedCreateObject(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::CreateObjectRequest* /*request*/, ::mruv::objects::CreateObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateObject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::objects::CreateObjectRequest,::mruv::objects::CreateObjectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetObject() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::objects::GetObjectRequest, ::mruv::objects::GetObjectResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::objects::GetObjectRequest, ::mruv::objects::GetObjectResponse>* streamer) {
                       return this->StreamedGetObject(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::GetObjectRequest* /*request*/, ::mruv::objects::GetObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetObject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::objects::GetObjectRequest,::mruv::objects::GetObjectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateObject() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::objects::UpdateObjectRequest, ::mruv::objects::UpdateObjectResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::objects::UpdateObjectRequest, ::mruv::objects::UpdateObjectResponse>* streamer) {
                       return this->StreamedUpdateObject(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::UpdateObjectRequest* /*request*/, ::mruv::objects::UpdateObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateObject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::objects::UpdateObjectRequest,::mruv::objects::UpdateObjectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteObject() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::objects::DeleteObjectRequest, ::mruv::objects::DeleteObjectResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::objects::DeleteObjectRequest, ::mruv::objects::DeleteObjectResponse>* streamer) {
                       return this->StreamedDeleteObject(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteObject(::grpc::ServerContext* /*context*/, const ::mruv::objects::DeleteObjectRequest* /*request*/, ::mruv::objects::DeleteObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteObject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::objects::DeleteObjectRequest,::mruv::objects::DeleteObjectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddObjectMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddObjectMaterial() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::objects::AddObjectMaterialRequest, ::mruv::objects::AddObjectMaterialResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::objects::AddObjectMaterialRequest, ::mruv::objects::AddObjectMaterialResponse>* streamer) {
                       return this->StreamedAddObjectMaterial(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddObjectMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddObjectMaterial(::grpc::ServerContext* /*context*/, const ::mruv::objects::AddObjectMaterialRequest* /*request*/, ::mruv::objects::AddObjectMaterialResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddObjectMaterial(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::objects::AddObjectMaterialRequest,::mruv::objects::AddObjectMaterialResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetObjectMaterials : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetObjectMaterials() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::objects::GetObjectMaterialsRequest, ::mruv::objects::GetObjectMaterialsResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::objects::GetObjectMaterialsRequest, ::mruv::objects::GetObjectMaterialsResponse>* streamer) {
                       return this->StreamedGetObjectMaterials(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetObjectMaterials() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetObjectMaterials(::grpc::ServerContext* /*context*/, const ::mruv::objects::GetObjectMaterialsRequest* /*request*/, ::mruv::objects::GetObjectMaterialsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetObjectMaterials(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::objects::GetObjectMaterialsRequest,::mruv::objects::GetObjectMaterialsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteObjectMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteObjectMaterial() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::objects::DeleteObjectMaterialRequest, ::mruv::objects::DeleteObjectMaterialResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::objects::DeleteObjectMaterialRequest, ::mruv::objects::DeleteObjectMaterialResponse>* streamer) {
                       return this->StreamedDeleteObjectMaterial(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteObjectMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteObjectMaterial(::grpc::ServerContext* /*context*/, const ::mruv::objects::DeleteObjectMaterialRequest* /*request*/, ::mruv::objects::DeleteObjectMaterialResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteObjectMaterial(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::objects::DeleteObjectMaterialRequest,::mruv::objects::DeleteObjectMaterialResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddObjectMaterialText : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddObjectMaterialText() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::objects::AddObjectMaterialTextRequest, ::mruv::objects::AddObjectMaterialTextResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::objects::AddObjectMaterialTextRequest, ::mruv::objects::AddObjectMaterialTextResponse>* streamer) {
                       return this->StreamedAddObjectMaterialText(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddObjectMaterialText() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddObjectMaterialText(::grpc::ServerContext* /*context*/, const ::mruv::objects::AddObjectMaterialTextRequest* /*request*/, ::mruv::objects::AddObjectMaterialTextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddObjectMaterialText(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::objects::AddObjectMaterialTextRequest,::mruv::objects::AddObjectMaterialTextResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetObjectMaterialTexts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetObjectMaterialTexts() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::objects::GetObjectMaterialTextsRequest, ::mruv::objects::GetObjectMaterialTextsResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::objects::GetObjectMaterialTextsRequest, ::mruv::objects::GetObjectMaterialTextsResponse>* streamer) {
                       return this->StreamedGetObjectMaterialTexts(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetObjectMaterialTexts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetObjectMaterialTexts(::grpc::ServerContext* /*context*/, const ::mruv::objects::GetObjectMaterialTextsRequest* /*request*/, ::mruv::objects::GetObjectMaterialTextsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetObjectMaterialTexts(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::objects::GetObjectMaterialTextsRequest,::mruv::objects::GetObjectMaterialTextsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteObjectMaterialText : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteObjectMaterialText() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::objects::DeleteObjectMaterialTextRequest, ::mruv::objects::DeleteObjectMaterialTextResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::objects::DeleteObjectMaterialTextRequest, ::mruv::objects::DeleteObjectMaterialTextResponse>* streamer) {
                       return this->StreamedDeleteObjectMaterialText(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteObjectMaterialText() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteObjectMaterialText(::grpc::ServerContext* /*context*/, const ::mruv::objects::DeleteObjectMaterialTextRequest* /*request*/, ::mruv::objects::DeleteObjectMaterialTextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteObjectMaterialText(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::objects::DeleteObjectMaterialTextRequest,::mruv::objects::DeleteObjectMaterialTextResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddRemoveBuilding : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddRemoveBuilding() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::objects::AddRemoveBuildingRequest, ::mruv::objects::AddRemoveBuildingResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::objects::AddRemoveBuildingRequest, ::mruv::objects::AddRemoveBuildingResponse>* streamer) {
                       return this->StreamedAddRemoveBuilding(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddRemoveBuilding() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddRemoveBuilding(::grpc::ServerContext* /*context*/, const ::mruv::objects::AddRemoveBuildingRequest* /*request*/, ::mruv::objects::AddRemoveBuildingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddRemoveBuilding(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::objects::AddRemoveBuildingRequest,::mruv::objects::AddRemoveBuildingResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRemovedBuildings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRemovedBuildings() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::objects::GetRemovedBuildingsRequest, ::mruv::objects::GetRemovedBuildingsResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::objects::GetRemovedBuildingsRequest, ::mruv::objects::GetRemovedBuildingsResponse>* streamer) {
                       return this->StreamedGetRemovedBuildings(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetRemovedBuildings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRemovedBuildings(::grpc::ServerContext* /*context*/, const ::mruv::objects::GetRemovedBuildingsRequest* /*request*/, ::mruv::objects::GetRemovedBuildingsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRemovedBuildings(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::objects::GetRemovedBuildingsRequest,::mruv::objects::GetRemovedBuildingsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteRemoveBuilding : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteRemoveBuilding() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::objects::DeleteRemoveBuildingRequest, ::mruv::objects::DeleteRemoveBuildingResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::objects::DeleteRemoveBuildingRequest, ::mruv::objects::DeleteRemoveBuildingResponse>* streamer) {
                       return this->StreamedDeleteRemoveBuilding(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteRemoveBuilding() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteRemoveBuilding(::grpc::ServerContext* /*context*/, const ::mruv::objects::DeleteRemoveBuildingRequest* /*request*/, ::mruv::objects::DeleteRemoveBuildingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteRemoveBuilding(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::objects::DeleteRemoveBuildingRequest,::mruv::objects::DeleteRemoveBuildingResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateObject<WithStreamedUnaryMethod_GetObject<WithStreamedUnaryMethod_UpdateObject<WithStreamedUnaryMethod_DeleteObject<WithStreamedUnaryMethod_AddObjectMaterial<WithStreamedUnaryMethod_GetObjectMaterials<WithStreamedUnaryMethod_DeleteObjectMaterial<WithStreamedUnaryMethod_AddObjectMaterialText<WithStreamedUnaryMethod_GetObjectMaterialTexts<WithStreamedUnaryMethod_DeleteObjectMaterialText<WithStreamedUnaryMethod_AddRemoveBuilding<WithStreamedUnaryMethod_GetRemovedBuildings<WithStreamedUnaryMethod_DeleteRemoveBuilding<Service > > > > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_FetchAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_FetchAll() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::mruv::objects::FetchAllRequest, ::mruv::objects::FetchAllResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerSplitStreamer<
                     ::mruv::objects::FetchAllRequest, ::mruv::objects::FetchAllResponse>* streamer) {
                       return this->StreamedFetchAll(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_FetchAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FetchAll(::grpc::ServerContext* /*context*/, const ::mruv::objects::FetchAllRequest* /*request*/, ::grpc::ServerWriter< ::mruv::objects::FetchAllResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedFetchAll(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::mruv::objects::FetchAllRequest,::mruv::objects::FetchAllResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_FetchAll<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateObject<WithStreamedUnaryMethod_GetObject<WithStreamedUnaryMethod_UpdateObject<WithStreamedUnaryMethod_DeleteObject<WithStreamedUnaryMethod_AddObjectMaterial<WithStreamedUnaryMethod_GetObjectMaterials<WithStreamedUnaryMethod_DeleteObjectMaterial<WithStreamedUnaryMethod_AddObjectMaterialText<WithStreamedUnaryMethod_GetObjectMaterialTexts<WithStreamedUnaryMethod_DeleteObjectMaterialText<WithStreamedUnaryMethod_AddRemoveBuilding<WithStreamedUnaryMethod_GetRemovedBuildings<WithStreamedUnaryMethod_DeleteRemoveBuilding<WithSplitStreamingMethod_FetchAll<Service > > > > > > > > > > > > > > StreamedService;
};

}  // namespace objects
}  // namespace mruv


#endif  // GRPC_objects_2fobjects_2eproto__INCLUDED
