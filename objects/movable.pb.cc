// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: objects/movable.proto

#include "objects/movable.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_objects_2fmovable_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FetchAllMovableObjectsResponse_MovableObjectsEntry_DoNotUse_objects_2fmovable_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_objects_2fmovable_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MovableObject_objects_2fmovable_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_objects_2fobjects_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Object_objects_2fobjects_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_objects_2fmovable_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_State_objects_2fmovable_2eproto;
namespace mruv {
namespace objects {
class StateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<State> _instance;
} _State_default_instance_;
class MovableObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MovableObject> _instance;
} _MovableObject_default_instance_;
class CreateMovableObjectRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateMovableObjectRequest> _instance;
} _CreateMovableObjectRequest_default_instance_;
class CreateMovableObjectResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateMovableObjectResponse> _instance;
} _CreateMovableObjectResponse_default_instance_;
class GetMovableObjectRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMovableObjectRequest> _instance;
} _GetMovableObjectRequest_default_instance_;
class GetMovableObjectResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMovableObjectResponse> _instance;
} _GetMovableObjectResponse_default_instance_;
class UpdateMovableObjectRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateMovableObjectRequest> _instance;
} _UpdateMovableObjectRequest_default_instance_;
class UpdateMovableObjectResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateMovableObjectResponse> _instance;
} _UpdateMovableObjectResponse_default_instance_;
class DeleteMovableObjectRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteMovableObjectRequest> _instance;
} _DeleteMovableObjectRequest_default_instance_;
class DeleteMovableObjectResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteMovableObjectResponse> _instance;
} _DeleteMovableObjectResponse_default_instance_;
class MoveObjectRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveObjectRequest> _instance;
} _MoveObjectRequest_default_instance_;
class MoveObjectResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveObjectResponse> _instance;
} _MoveObjectResponse_default_instance_;
class MoveObjectNextRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveObjectNextRequest> _instance;
} _MoveObjectNextRequest_default_instance_;
class MoveObjectNextResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveObjectNextResponse> _instance;
} _MoveObjectNextResponse_default_instance_;
class MoveObjectPreviousRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveObjectPreviousRequest> _instance;
} _MoveObjectPreviousRequest_default_instance_;
class MoveObjectPreviousResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveObjectPreviousResponse> _instance;
} _MoveObjectPreviousResponse_default_instance_;
class FetchAllMovableObjectsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FetchAllMovableObjectsRequest> _instance;
} _FetchAllMovableObjectsRequest_default_instance_;
class FetchAllMovableObjectsResponse_MovableObjectsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FetchAllMovableObjectsResponse_MovableObjectsEntry_DoNotUse> _instance;
} _FetchAllMovableObjectsResponse_MovableObjectsEntry_DoNotUse_default_instance_;
class FetchAllMovableObjectsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FetchAllMovableObjectsResponse> _instance;
} _FetchAllMovableObjectsResponse_default_instance_;
}  // namespace objects
}  // namespace mruv
static void InitDefaultsscc_info_CreateMovableObjectRequest_objects_2fmovable_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::objects::_CreateMovableObjectRequest_default_instance_;
    new (ptr) ::mruv::objects::CreateMovableObjectRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::objects::CreateMovableObjectRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CreateMovableObjectRequest_objects_2fmovable_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CreateMovableObjectRequest_objects_2fmovable_2eproto}, {
      &scc_info_Object_objects_2fobjects_2eproto.base,
      &scc_info_State_objects_2fmovable_2eproto.base,}};

static void InitDefaultsscc_info_CreateMovableObjectResponse_objects_2fmovable_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::objects::_CreateMovableObjectResponse_default_instance_;
    new (ptr) ::mruv::objects::CreateMovableObjectResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::objects::CreateMovableObjectResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateMovableObjectResponse_objects_2fmovable_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateMovableObjectResponse_objects_2fmovable_2eproto}, {}};

static void InitDefaultsscc_info_DeleteMovableObjectRequest_objects_2fmovable_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::objects::_DeleteMovableObjectRequest_default_instance_;
    new (ptr) ::mruv::objects::DeleteMovableObjectRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::objects::DeleteMovableObjectRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteMovableObjectRequest_objects_2fmovable_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteMovableObjectRequest_objects_2fmovable_2eproto}, {}};

static void InitDefaultsscc_info_DeleteMovableObjectResponse_objects_2fmovable_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::objects::_DeleteMovableObjectResponse_default_instance_;
    new (ptr) ::mruv::objects::DeleteMovableObjectResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::objects::DeleteMovableObjectResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteMovableObjectResponse_objects_2fmovable_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteMovableObjectResponse_objects_2fmovable_2eproto}, {}};

static void InitDefaultsscc_info_FetchAllMovableObjectsRequest_objects_2fmovable_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::objects::_FetchAllMovableObjectsRequest_default_instance_;
    new (ptr) ::mruv::objects::FetchAllMovableObjectsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::objects::FetchAllMovableObjectsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FetchAllMovableObjectsRequest_objects_2fmovable_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FetchAllMovableObjectsRequest_objects_2fmovable_2eproto}, {}};

static void InitDefaultsscc_info_FetchAllMovableObjectsResponse_objects_2fmovable_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::objects::_FetchAllMovableObjectsResponse_default_instance_;
    new (ptr) ::mruv::objects::FetchAllMovableObjectsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::objects::FetchAllMovableObjectsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FetchAllMovableObjectsResponse_objects_2fmovable_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FetchAllMovableObjectsResponse_objects_2fmovable_2eproto}, {
      &scc_info_FetchAllMovableObjectsResponse_MovableObjectsEntry_DoNotUse_objects_2fmovable_2eproto.base,}};

static void InitDefaultsscc_info_FetchAllMovableObjectsResponse_MovableObjectsEntry_DoNotUse_objects_2fmovable_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::objects::_FetchAllMovableObjectsResponse_MovableObjectsEntry_DoNotUse_default_instance_;
    new (ptr) ::mruv::objects::FetchAllMovableObjectsResponse_MovableObjectsEntry_DoNotUse();
  }
  ::mruv::objects::FetchAllMovableObjectsResponse_MovableObjectsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FetchAllMovableObjectsResponse_MovableObjectsEntry_DoNotUse_objects_2fmovable_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FetchAllMovableObjectsResponse_MovableObjectsEntry_DoNotUse_objects_2fmovable_2eproto}, {
      &scc_info_MovableObject_objects_2fmovable_2eproto.base,}};

static void InitDefaultsscc_info_GetMovableObjectRequest_objects_2fmovable_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::objects::_GetMovableObjectRequest_default_instance_;
    new (ptr) ::mruv::objects::GetMovableObjectRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::objects::GetMovableObjectRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetMovableObjectRequest_objects_2fmovable_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetMovableObjectRequest_objects_2fmovable_2eproto}, {}};

static void InitDefaultsscc_info_GetMovableObjectResponse_objects_2fmovable_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::objects::_GetMovableObjectResponse_default_instance_;
    new (ptr) ::mruv::objects::GetMovableObjectResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::objects::GetMovableObjectResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetMovableObjectResponse_objects_2fmovable_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetMovableObjectResponse_objects_2fmovable_2eproto}, {
      &scc_info_Object_objects_2fobjects_2eproto.base,
      &scc_info_State_objects_2fmovable_2eproto.base,}};

static void InitDefaultsscc_info_MovableObject_objects_2fmovable_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::objects::_MovableObject_default_instance_;
    new (ptr) ::mruv::objects::MovableObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::objects::MovableObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MovableObject_objects_2fmovable_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MovableObject_objects_2fmovable_2eproto}, {
      &scc_info_Object_objects_2fobjects_2eproto.base,
      &scc_info_State_objects_2fmovable_2eproto.base,}};

static void InitDefaultsscc_info_MoveObjectNextRequest_objects_2fmovable_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::objects::_MoveObjectNextRequest_default_instance_;
    new (ptr) ::mruv::objects::MoveObjectNextRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::objects::MoveObjectNextRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveObjectNextRequest_objects_2fmovable_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoveObjectNextRequest_objects_2fmovable_2eproto}, {}};

static void InitDefaultsscc_info_MoveObjectNextResponse_objects_2fmovable_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::objects::_MoveObjectNextResponse_default_instance_;
    new (ptr) ::mruv::objects::MoveObjectNextResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::objects::MoveObjectNextResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveObjectNextResponse_objects_2fmovable_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoveObjectNextResponse_objects_2fmovable_2eproto}, {}};

static void InitDefaultsscc_info_MoveObjectPreviousRequest_objects_2fmovable_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::objects::_MoveObjectPreviousRequest_default_instance_;
    new (ptr) ::mruv::objects::MoveObjectPreviousRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::objects::MoveObjectPreviousRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveObjectPreviousRequest_objects_2fmovable_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoveObjectPreviousRequest_objects_2fmovable_2eproto}, {}};

static void InitDefaultsscc_info_MoveObjectPreviousResponse_objects_2fmovable_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::objects::_MoveObjectPreviousResponse_default_instance_;
    new (ptr) ::mruv::objects::MoveObjectPreviousResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::objects::MoveObjectPreviousResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveObjectPreviousResponse_objects_2fmovable_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoveObjectPreviousResponse_objects_2fmovable_2eproto}, {}};

static void InitDefaultsscc_info_MoveObjectRequest_objects_2fmovable_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::objects::_MoveObjectRequest_default_instance_;
    new (ptr) ::mruv::objects::MoveObjectRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::objects::MoveObjectRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveObjectRequest_objects_2fmovable_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoveObjectRequest_objects_2fmovable_2eproto}, {}};

static void InitDefaultsscc_info_MoveObjectResponse_objects_2fmovable_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::objects::_MoveObjectResponse_default_instance_;
    new (ptr) ::mruv::objects::MoveObjectResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::objects::MoveObjectResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveObjectResponse_objects_2fmovable_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoveObjectResponse_objects_2fmovable_2eproto}, {}};

static void InitDefaultsscc_info_State_objects_2fmovable_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::objects::_State_default_instance_;
    new (ptr) ::mruv::objects::State();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::objects::State::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_State_objects_2fmovable_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_State_objects_2fmovable_2eproto}, {}};

static void InitDefaultsscc_info_UpdateMovableObjectRequest_objects_2fmovable_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::objects::_UpdateMovableObjectRequest_default_instance_;
    new (ptr) ::mruv::objects::UpdateMovableObjectRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::objects::UpdateMovableObjectRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateMovableObjectRequest_objects_2fmovable_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateMovableObjectRequest_objects_2fmovable_2eproto}, {
      &scc_info_State_objects_2fmovable_2eproto.base,}};

static void InitDefaultsscc_info_UpdateMovableObjectResponse_objects_2fmovable_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::objects::_UpdateMovableObjectResponse_default_instance_;
    new (ptr) ::mruv::objects::UpdateMovableObjectResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::objects::UpdateMovableObjectResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateMovableObjectResponse_objects_2fmovable_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateMovableObjectResponse_objects_2fmovable_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_objects_2fmovable_2eproto[19];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_objects_2fmovable_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_objects_2fmovable_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_objects_2fmovable_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::objects::State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::objects::State, name_),
  PROTOBUF_FIELD_OFFSET(::mruv::objects::State, x_),
  PROTOBUF_FIELD_OFFSET(::mruv::objects::State, y_),
  PROTOBUF_FIELD_OFFSET(::mruv::objects::State, z_),
  PROTOBUF_FIELD_OFFSET(::mruv::objects::State, rx_),
  PROTOBUF_FIELD_OFFSET(::mruv::objects::State, ry_),
  PROTOBUF_FIELD_OFFSET(::mruv::objects::State, rz_),
  PROTOBUF_FIELD_OFFSET(::mruv::objects::State, transition_speed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::objects::MovableObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::objects::MovableObject, object_),
  PROTOBUF_FIELD_OFFSET(::mruv::objects::MovableObject, states_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::objects::CreateMovableObjectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::objects::CreateMovableObjectRequest, object_),
  PROTOBUF_FIELD_OFFSET(::mruv::objects::CreateMovableObjectRequest, states_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::objects::CreateMovableObjectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::objects::CreateMovableObjectResponse, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::objects::GetMovableObjectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::objects::GetMovableObjectRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::objects::GetMovableObjectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::objects::GetMovableObjectResponse, object_),
  PROTOBUF_FIELD_OFFSET(::mruv::objects::GetMovableObjectResponse, states_),
  PROTOBUF_FIELD_OFFSET(::mruv::objects::GetMovableObjectResponse, current_state_id_),
  PROTOBUF_FIELD_OFFSET(::mruv::objects::GetMovableObjectResponse, current_state_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::objects::UpdateMovableObjectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::objects::UpdateMovableObjectRequest, id_),
  PROTOBUF_FIELD_OFFSET(::mruv::objects::UpdateMovableObjectRequest, object_id_),
  PROTOBUF_FIELD_OFFSET(::mruv::objects::UpdateMovableObjectRequest, states_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::objects::UpdateMovableObjectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::objects::DeleteMovableObjectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::objects::DeleteMovableObjectRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::objects::DeleteMovableObjectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::objects::MoveObjectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::objects::MoveObjectRequest, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::objects::MoveObjectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::objects::MoveObjectNextRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::objects::MoveObjectNextRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::objects::MoveObjectNextResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::objects::MoveObjectNextResponse, state_id_),
  PROTOBUF_FIELD_OFFSET(::mruv::objects::MoveObjectNextResponse, state_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::objects::MoveObjectPreviousRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::objects::MoveObjectPreviousRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::objects::MoveObjectPreviousResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::objects::MoveObjectPreviousResponse, state_id_),
  PROTOBUF_FIELD_OFFSET(::mruv::objects::MoveObjectPreviousResponse, state_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::objects::FetchAllMovableObjectsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::objects::FetchAllMovableObjectsRequest, chunk_size_),
  PROTOBUF_FIELD_OFFSET(::mruv::objects::FetchAllMovableObjectsResponse_MovableObjectsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mruv::objects::FetchAllMovableObjectsResponse_MovableObjectsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::objects::FetchAllMovableObjectsResponse_MovableObjectsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mruv::objects::FetchAllMovableObjectsResponse_MovableObjectsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::objects::FetchAllMovableObjectsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::objects::FetchAllMovableObjectsResponse, movable_objects_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mruv::objects::State)},
  { 13, -1, sizeof(::mruv::objects::MovableObject)},
  { 20, -1, sizeof(::mruv::objects::CreateMovableObjectRequest)},
  { 27, -1, sizeof(::mruv::objects::CreateMovableObjectResponse)},
  { 33, -1, sizeof(::mruv::objects::GetMovableObjectRequest)},
  { 39, -1, sizeof(::mruv::objects::GetMovableObjectResponse)},
  { 48, -1, sizeof(::mruv::objects::UpdateMovableObjectRequest)},
  { 56, -1, sizeof(::mruv::objects::UpdateMovableObjectResponse)},
  { 61, -1, sizeof(::mruv::objects::DeleteMovableObjectRequest)},
  { 67, -1, sizeof(::mruv::objects::DeleteMovableObjectResponse)},
  { 72, -1, sizeof(::mruv::objects::MoveObjectRequest)},
  { 78, -1, sizeof(::mruv::objects::MoveObjectResponse)},
  { 83, -1, sizeof(::mruv::objects::MoveObjectNextRequest)},
  { 89, -1, sizeof(::mruv::objects::MoveObjectNextResponse)},
  { 96, -1, sizeof(::mruv::objects::MoveObjectPreviousRequest)},
  { 102, -1, sizeof(::mruv::objects::MoveObjectPreviousResponse)},
  { 109, -1, sizeof(::mruv::objects::FetchAllMovableObjectsRequest)},
  { 115, 122, sizeof(::mruv::objects::FetchAllMovableObjectsResponse_MovableObjectsEntry_DoNotUse)},
  { 124, -1, sizeof(::mruv::objects::FetchAllMovableObjectsResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::objects::_State_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::objects::_MovableObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::objects::_CreateMovableObjectRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::objects::_CreateMovableObjectResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::objects::_GetMovableObjectRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::objects::_GetMovableObjectResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::objects::_UpdateMovableObjectRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::objects::_UpdateMovableObjectResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::objects::_DeleteMovableObjectRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::objects::_DeleteMovableObjectResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::objects::_MoveObjectRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::objects::_MoveObjectResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::objects::_MoveObjectNextRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::objects::_MoveObjectNextResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::objects::_MoveObjectPreviousRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::objects::_MoveObjectPreviousResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::objects::_FetchAllMovableObjectsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::objects::_FetchAllMovableObjectsResponse_MovableObjectsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::objects::_FetchAllMovableObjectsResponse_default_instance_),
};

const char descriptor_table_protodef_objects_2fmovable_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025objects/movable.proto\022\014mruv.objects\032\034g"
  "oogle/api/annotations.proto\032\025objects/obj"
  "ects.proto\"t\n\005State\022\014\n\004name\030\001 \001(\t\022\t\n\001x\030\002"
  " \001(\002\022\t\n\001y\030\003 \001(\002\022\t\n\001z\030\004 \001(\002\022\n\n\002rx\030\005 \001(\002\022\n"
  "\n\002ry\030\006 \001(\002\022\n\n\002rz\030\007 \001(\002\022\030\n\020transition_spe"
  "ed\030\010 \001(\002\"Z\n\rMovableObject\022$\n\006object\030\001 \001("
  "\0132\024.mruv.objects.Object\022#\n\006states\030\002 \003(\0132"
  "\023.mruv.objects.State\"g\n\032CreateMovableObj"
  "ectRequest\022$\n\006object\030\001 \001(\0132\024.mruv.object"
  "s.Object\022#\n\006states\030\002 \003(\0132\023.mruv.objects."
  "State\")\n\033CreateMovableObjectResponse\022\n\n\002"
  "id\030\001 \001(\r\"%\n\027GetMovableObjectRequest\022\n\n\002i"
  "d\030\001 \001(\r\"\233\001\n\030GetMovableObjectResponse\022$\n\006"
  "object\030\001 \001(\0132\024.mruv.objects.Object\022#\n\006st"
  "ates\030\002 \003(\0132\023.mruv.objects.State\022\030\n\020curre"
  "nt_state_id\030\003 \001(\r\022\032\n\022current_state_name\030"
  "\004 \001(\t\"`\n\032UpdateMovableObjectRequest\022\n\n\002i"
  "d\030\001 \001(\r\022\021\n\tobject_id\030\002 \001(\r\022#\n\006states\030\003 \003"
  "(\0132\023.mruv.objects.State\"\035\n\033UpdateMovable"
  "ObjectResponse\"(\n\032DeleteMovableObjectReq"
  "uest\022\n\n\002id\030\001 \001(\r\"\035\n\033DeleteMovableObjectR"
  "esponse\"\"\n\021MoveObjectRequest\022\r\n\005state\030\001 "
  "\001(\r\"\024\n\022MoveObjectResponse\"#\n\025MoveObjectN"
  "extRequest\022\n\n\002id\030\001 \001(\r\">\n\026MoveObjectNext"
  "Response\022\020\n\010state_id\030\001 \001(\r\022\022\n\nstate_name"
  "\030\002 \001(\t\"\'\n\031MoveObjectPreviousRequest\022\n\n\002i"
  "d\030\001 \001(\r\"B\n\032MoveObjectPreviousResponse\022\020\n"
  "\010state_id\030\001 \001(\r\022\022\n\nstate_name\030\002 \001(\t\"3\n\035F"
  "etchAllMovableObjectsRequest\022\022\n\nchunk_si"
  "ze\030\001 \001(\r\"\317\001\n\036FetchAllMovableObjectsRespo"
  "nse\022Y\n\017movable_objects\030\001 \003(\0132@.mruv.obje"
  "cts.FetchAllMovableObjectsResponse.Movab"
  "leObjectsEntry\032R\n\023MovableObjectsEntry\022\013\n"
  "\003key\030\001 \001(\r\022*\n\005value\030\002 \001(\0132\033.mruv.objects"
  ".MovableObject:\0028\0012\313\010\n\031MruVMovableObject"
  "sService\022\206\001\n\023CreateMovableObject\022(.mruv."
  "objects.CreateMovableObjectRequest\032).mru"
  "v.objects.CreateMovableObjectResponse\"\032\202"
  "\323\344\223\002\024\"\022/v1/movableObjects\022\202\001\n\020GetMovable"
  "Object\022%.mruv.objects.GetMovableObjectRe"
  "quest\032&.mruv.objects.GetMovableObjectRes"
  "ponse\"\037\202\323\344\223\002\031\022\027/v1/movableObjects/{id}\022\213"
  "\001\n\023UpdateMovableObject\022(.mruv.objects.Up"
  "dateMovableObjectRequest\032).mruv.objects."
  "UpdateMovableObjectResponse\"\037\202\323\344\223\002\0312\027/v1"
  "/movableObjects/{id}\022\213\001\n\023DeleteMovableOb"
  "ject\022(.mruv.objects.DeleteMovableObjectR"
  "equest\032).mruv.objects.DeleteMovableObjec"
  "tResponse\"\037\202\323\344\223\002\031*\027/v1/movableObjects/{i"
  "d}\022q\n\nMoveObject\022\037.mruv.objects.MoveObje"
  "ctRequest\032 .mruv.objects.MoveObjectRespo"
  "nse\" \202\323\344\223\002\032\"\030/v1/movableObjects/moves\022\202\001"
  "\n\016MoveObjectNext\022#.mruv.objects.MoveObje"
  "ctNextRequest\032$.mruv.objects.MoveObjectN"
  "extResponse\"%\202\323\344\223\002\037\"\035/v1/movableObjects/"
  "moves/next\022\222\001\n\022MoveObjectPrevious\022\'.mruv"
  ".objects.MoveObjectPreviousRequest\032(.mru"
  "v.objects.MoveObjectPreviousResponse\")\202\323"
  "\344\223\002#\"!/v1/movableObjects/moves/previous\022"
  "w\n\026FetchAllMovableObjects\022+.mruv.objects"
  ".FetchAllMovableObjectsRequest\032,.mruv.ob"
  "jects.FetchAllMovableObjectsResponse\"\0000\001"
  "B\'Z%github.com/MruV-RP/mruv-pb-go/object"
  "sb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_objects_2fmovable_2eproto_deps[2] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_objects_2fobjects_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_objects_2fmovable_2eproto_sccs[19] = {
  &scc_info_CreateMovableObjectRequest_objects_2fmovable_2eproto.base,
  &scc_info_CreateMovableObjectResponse_objects_2fmovable_2eproto.base,
  &scc_info_DeleteMovableObjectRequest_objects_2fmovable_2eproto.base,
  &scc_info_DeleteMovableObjectResponse_objects_2fmovable_2eproto.base,
  &scc_info_FetchAllMovableObjectsRequest_objects_2fmovable_2eproto.base,
  &scc_info_FetchAllMovableObjectsResponse_objects_2fmovable_2eproto.base,
  &scc_info_FetchAllMovableObjectsResponse_MovableObjectsEntry_DoNotUse_objects_2fmovable_2eproto.base,
  &scc_info_GetMovableObjectRequest_objects_2fmovable_2eproto.base,
  &scc_info_GetMovableObjectResponse_objects_2fmovable_2eproto.base,
  &scc_info_MovableObject_objects_2fmovable_2eproto.base,
  &scc_info_MoveObjectNextRequest_objects_2fmovable_2eproto.base,
  &scc_info_MoveObjectNextResponse_objects_2fmovable_2eproto.base,
  &scc_info_MoveObjectPreviousRequest_objects_2fmovable_2eproto.base,
  &scc_info_MoveObjectPreviousResponse_objects_2fmovable_2eproto.base,
  &scc_info_MoveObjectRequest_objects_2fmovable_2eproto.base,
  &scc_info_MoveObjectResponse_objects_2fmovable_2eproto.base,
  &scc_info_State_objects_2fmovable_2eproto.base,
  &scc_info_UpdateMovableObjectRequest_objects_2fmovable_2eproto.base,
  &scc_info_UpdateMovableObjectResponse_objects_2fmovable_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_objects_2fmovable_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_objects_2fmovable_2eproto = {
  false, false, descriptor_table_protodef_objects_2fmovable_2eproto, "objects/movable.proto", 2529,
  &descriptor_table_objects_2fmovable_2eproto_once, descriptor_table_objects_2fmovable_2eproto_sccs, descriptor_table_objects_2fmovable_2eproto_deps, 19, 2,
  schemas, file_default_instances, TableStruct_objects_2fmovable_2eproto::offsets,
  file_level_metadata_objects_2fmovable_2eproto, 19, file_level_enum_descriptors_objects_2fmovable_2eproto, file_level_service_descriptors_objects_2fmovable_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_objects_2fmovable_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_objects_2fmovable_2eproto)), true);
namespace mruv {
namespace objects {

// ===================================================================

void State::InitAsDefaultInstance() {
}
class State::_Internal {
 public:
};

State::State(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.objects.State)
}
State::State(const State& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&transition_speed_) -
    reinterpret_cast<char*>(&x_)) + sizeof(transition_speed_));
  // @@protoc_insertion_point(copy_constructor:mruv.objects.State)
}

void State::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_State_objects_2fmovable_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transition_speed_) -
      reinterpret_cast<char*>(&x_)) + sizeof(transition_speed_));
}

State::~State() {
  // @@protoc_insertion_point(destructor:mruv.objects.State)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void State::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void State::ArenaDtor(void* object) {
  State* _this = reinterpret_cast< State* >(object);
  (void)_this;
}
void State::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void State::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const State& State::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_State_objects_2fmovable_2eproto.base);
  return *internal_default_instance();
}


void State::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.objects.State)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transition_speed_) -
      reinterpret_cast<char*>(&x_)) + sizeof(transition_speed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* State::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.objects.State.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float rx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          rx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float ry = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          ry_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float rz = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          rz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float transition_speed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          transition_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* State::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.objects.State)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.objects.State.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  // float rx = 5;
  if (!(this->rx() <= 0 && this->rx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_rx(), target);
  }

  // float ry = 6;
  if (!(this->ry() <= 0 && this->ry() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_ry(), target);
  }

  // float rz = 7;
  if (!(this->rz() <= 0 && this->rz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_rz(), target);
  }

  // float transition_speed = 8;
  if (!(this->transition_speed() <= 0 && this->transition_speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_transition_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.objects.State)
  return target;
}

size_t State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.objects.State)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  // float rx = 5;
  if (!(this->rx() <= 0 && this->rx() >= 0)) {
    total_size += 1 + 4;
  }

  // float ry = 6;
  if (!(this->ry() <= 0 && this->ry() >= 0)) {
    total_size += 1 + 4;
  }

  // float rz = 7;
  if (!(this->rz() <= 0 && this->rz() >= 0)) {
    total_size += 1 + 4;
  }

  // float transition_speed = 8;
  if (!(this->transition_speed() <= 0 && this->transition_speed() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void State::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.objects.State)
  GOOGLE_DCHECK_NE(&from, this);
  const State* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<State>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.objects.State)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.objects.State)
    MergeFrom(*source);
  }
}

void State::MergeFrom(const State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.objects.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  if (!(from.rx() <= 0 && from.rx() >= 0)) {
    _internal_set_rx(from._internal_rx());
  }
  if (!(from.ry() <= 0 && from.ry() >= 0)) {
    _internal_set_ry(from._internal_ry());
  }
  if (!(from.rz() <= 0 && from.rz() >= 0)) {
    _internal_set_rz(from._internal_rz());
  }
  if (!(from.transition_speed() <= 0 && from.transition_speed() >= 0)) {
    _internal_set_transition_speed(from._internal_transition_speed());
  }
}

void State::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.objects.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void State::CopyFrom(const State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.objects.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State::IsInitialized() const {
  return true;
}

void State::InternalSwap(State* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(State, transition_speed_)
      + sizeof(State::transition_speed_)
      - PROTOBUF_FIELD_OFFSET(State, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata State::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MovableObject::InitAsDefaultInstance() {
  ::mruv::objects::_MovableObject_default_instance_._instance.get_mutable()->object_ = const_cast< ::mruv::objects::Object*>(
      ::mruv::objects::Object::internal_default_instance());
}
class MovableObject::_Internal {
 public:
  static const ::mruv::objects::Object& object(const MovableObject* msg);
};

const ::mruv::objects::Object&
MovableObject::_Internal::object(const MovableObject* msg) {
  return *msg->object_;
}
void MovableObject::clear_object() {
  if (GetArena() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
}
MovableObject::MovableObject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  states_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.objects.MovableObject)
}
MovableObject::MovableObject(const MovableObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      states_(from.states_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_object()) {
    object_ = new ::mruv::objects::Object(*from.object_);
  } else {
    object_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mruv.objects.MovableObject)
}

void MovableObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MovableObject_objects_2fmovable_2eproto.base);
  object_ = nullptr;
}

MovableObject::~MovableObject() {
  // @@protoc_insertion_point(destructor:mruv.objects.MovableObject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MovableObject::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete object_;
}

void MovableObject::ArenaDtor(void* object) {
  MovableObject* _this = reinterpret_cast< MovableObject* >(object);
  (void)_this;
}
void MovableObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MovableObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MovableObject& MovableObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MovableObject_objects_2fmovable_2eproto.base);
  return *internal_default_instance();
}


void MovableObject::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.objects.MovableObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  states_.Clear();
  if (GetArena() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MovableObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mruv.objects.Object object = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mruv.objects.State states = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MovableObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.objects.MovableObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mruv.objects.Object object = 1;
  if (this->has_object()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::object(this), target, stream);
  }

  // repeated .mruv.objects.State states = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_states_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_states(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.objects.MovableObject)
  return target;
}

size_t MovableObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.objects.MovableObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mruv.objects.State states = 2;
  total_size += 1UL * this->_internal_states_size();
  for (const auto& msg : this->states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .mruv.objects.Object object = 1;
  if (this->has_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MovableObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.objects.MovableObject)
  GOOGLE_DCHECK_NE(&from, this);
  const MovableObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MovableObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.objects.MovableObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.objects.MovableObject)
    MergeFrom(*source);
  }
}

void MovableObject::MergeFrom(const MovableObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.objects.MovableObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  states_.MergeFrom(from.states_);
  if (from.has_object()) {
    _internal_mutable_object()->::mruv::objects::Object::MergeFrom(from._internal_object());
  }
}

void MovableObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.objects.MovableObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MovableObject::CopyFrom(const MovableObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.objects.MovableObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovableObject::IsInitialized() const {
  return true;
}

void MovableObject::InternalSwap(MovableObject* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  states_.InternalSwap(&other->states_);
  swap(object_, other->object_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MovableObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateMovableObjectRequest::InitAsDefaultInstance() {
  ::mruv::objects::_CreateMovableObjectRequest_default_instance_._instance.get_mutable()->object_ = const_cast< ::mruv::objects::Object*>(
      ::mruv::objects::Object::internal_default_instance());
}
class CreateMovableObjectRequest::_Internal {
 public:
  static const ::mruv::objects::Object& object(const CreateMovableObjectRequest* msg);
};

const ::mruv::objects::Object&
CreateMovableObjectRequest::_Internal::object(const CreateMovableObjectRequest* msg) {
  return *msg->object_;
}
void CreateMovableObjectRequest::clear_object() {
  if (GetArena() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
}
CreateMovableObjectRequest::CreateMovableObjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  states_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.objects.CreateMovableObjectRequest)
}
CreateMovableObjectRequest::CreateMovableObjectRequest(const CreateMovableObjectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      states_(from.states_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_object()) {
    object_ = new ::mruv::objects::Object(*from.object_);
  } else {
    object_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mruv.objects.CreateMovableObjectRequest)
}

void CreateMovableObjectRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateMovableObjectRequest_objects_2fmovable_2eproto.base);
  object_ = nullptr;
}

CreateMovableObjectRequest::~CreateMovableObjectRequest() {
  // @@protoc_insertion_point(destructor:mruv.objects.CreateMovableObjectRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateMovableObjectRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete object_;
}

void CreateMovableObjectRequest::ArenaDtor(void* object) {
  CreateMovableObjectRequest* _this = reinterpret_cast< CreateMovableObjectRequest* >(object);
  (void)_this;
}
void CreateMovableObjectRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateMovableObjectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateMovableObjectRequest& CreateMovableObjectRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateMovableObjectRequest_objects_2fmovable_2eproto.base);
  return *internal_default_instance();
}


void CreateMovableObjectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.objects.CreateMovableObjectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  states_.Clear();
  if (GetArena() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateMovableObjectRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mruv.objects.Object object = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mruv.objects.State states = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateMovableObjectRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.objects.CreateMovableObjectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mruv.objects.Object object = 1;
  if (this->has_object()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::object(this), target, stream);
  }

  // repeated .mruv.objects.State states = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_states_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_states(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.objects.CreateMovableObjectRequest)
  return target;
}

size_t CreateMovableObjectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.objects.CreateMovableObjectRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mruv.objects.State states = 2;
  total_size += 1UL * this->_internal_states_size();
  for (const auto& msg : this->states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .mruv.objects.Object object = 1;
  if (this->has_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateMovableObjectRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.objects.CreateMovableObjectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateMovableObjectRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateMovableObjectRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.objects.CreateMovableObjectRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.objects.CreateMovableObjectRequest)
    MergeFrom(*source);
  }
}

void CreateMovableObjectRequest::MergeFrom(const CreateMovableObjectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.objects.CreateMovableObjectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  states_.MergeFrom(from.states_);
  if (from.has_object()) {
    _internal_mutable_object()->::mruv::objects::Object::MergeFrom(from._internal_object());
  }
}

void CreateMovableObjectRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.objects.CreateMovableObjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateMovableObjectRequest::CopyFrom(const CreateMovableObjectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.objects.CreateMovableObjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateMovableObjectRequest::IsInitialized() const {
  return true;
}

void CreateMovableObjectRequest::InternalSwap(CreateMovableObjectRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  states_.InternalSwap(&other->states_);
  swap(object_, other->object_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateMovableObjectRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateMovableObjectResponse::InitAsDefaultInstance() {
}
class CreateMovableObjectResponse::_Internal {
 public:
};

CreateMovableObjectResponse::CreateMovableObjectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.objects.CreateMovableObjectResponse)
}
CreateMovableObjectResponse::CreateMovableObjectResponse(const CreateMovableObjectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.objects.CreateMovableObjectResponse)
}

void CreateMovableObjectResponse::SharedCtor() {
  id_ = 0u;
}

CreateMovableObjectResponse::~CreateMovableObjectResponse() {
  // @@protoc_insertion_point(destructor:mruv.objects.CreateMovableObjectResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateMovableObjectResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CreateMovableObjectResponse::ArenaDtor(void* object) {
  CreateMovableObjectResponse* _this = reinterpret_cast< CreateMovableObjectResponse* >(object);
  (void)_this;
}
void CreateMovableObjectResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateMovableObjectResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateMovableObjectResponse& CreateMovableObjectResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateMovableObjectResponse_objects_2fmovable_2eproto.base);
  return *internal_default_instance();
}


void CreateMovableObjectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.objects.CreateMovableObjectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateMovableObjectResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateMovableObjectResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.objects.CreateMovableObjectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.objects.CreateMovableObjectResponse)
  return target;
}

size_t CreateMovableObjectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.objects.CreateMovableObjectResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateMovableObjectResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.objects.CreateMovableObjectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateMovableObjectResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateMovableObjectResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.objects.CreateMovableObjectResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.objects.CreateMovableObjectResponse)
    MergeFrom(*source);
  }
}

void CreateMovableObjectResponse::MergeFrom(const CreateMovableObjectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.objects.CreateMovableObjectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void CreateMovableObjectResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.objects.CreateMovableObjectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateMovableObjectResponse::CopyFrom(const CreateMovableObjectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.objects.CreateMovableObjectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateMovableObjectResponse::IsInitialized() const {
  return true;
}

void CreateMovableObjectResponse::InternalSwap(CreateMovableObjectResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateMovableObjectResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetMovableObjectRequest::InitAsDefaultInstance() {
}
class GetMovableObjectRequest::_Internal {
 public:
};

GetMovableObjectRequest::GetMovableObjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.objects.GetMovableObjectRequest)
}
GetMovableObjectRequest::GetMovableObjectRequest(const GetMovableObjectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.objects.GetMovableObjectRequest)
}

void GetMovableObjectRequest::SharedCtor() {
  id_ = 0u;
}

GetMovableObjectRequest::~GetMovableObjectRequest() {
  // @@protoc_insertion_point(destructor:mruv.objects.GetMovableObjectRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetMovableObjectRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetMovableObjectRequest::ArenaDtor(void* object) {
  GetMovableObjectRequest* _this = reinterpret_cast< GetMovableObjectRequest* >(object);
  (void)_this;
}
void GetMovableObjectRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetMovableObjectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMovableObjectRequest& GetMovableObjectRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMovableObjectRequest_objects_2fmovable_2eproto.base);
  return *internal_default_instance();
}


void GetMovableObjectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.objects.GetMovableObjectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMovableObjectRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMovableObjectRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.objects.GetMovableObjectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.objects.GetMovableObjectRequest)
  return target;
}

size_t GetMovableObjectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.objects.GetMovableObjectRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMovableObjectRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.objects.GetMovableObjectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMovableObjectRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMovableObjectRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.objects.GetMovableObjectRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.objects.GetMovableObjectRequest)
    MergeFrom(*source);
  }
}

void GetMovableObjectRequest::MergeFrom(const GetMovableObjectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.objects.GetMovableObjectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetMovableObjectRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.objects.GetMovableObjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMovableObjectRequest::CopyFrom(const GetMovableObjectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.objects.GetMovableObjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMovableObjectRequest::IsInitialized() const {
  return true;
}

void GetMovableObjectRequest::InternalSwap(GetMovableObjectRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMovableObjectRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetMovableObjectResponse::InitAsDefaultInstance() {
  ::mruv::objects::_GetMovableObjectResponse_default_instance_._instance.get_mutable()->object_ = const_cast< ::mruv::objects::Object*>(
      ::mruv::objects::Object::internal_default_instance());
}
class GetMovableObjectResponse::_Internal {
 public:
  static const ::mruv::objects::Object& object(const GetMovableObjectResponse* msg);
};

const ::mruv::objects::Object&
GetMovableObjectResponse::_Internal::object(const GetMovableObjectResponse* msg) {
  return *msg->object_;
}
void GetMovableObjectResponse::clear_object() {
  if (GetArena() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
}
GetMovableObjectResponse::GetMovableObjectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  states_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.objects.GetMovableObjectResponse)
}
GetMovableObjectResponse::GetMovableObjectResponse(const GetMovableObjectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      states_(from.states_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  current_state_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_current_state_name().empty()) {
    current_state_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_current_state_name(),
      GetArena());
  }
  if (from._internal_has_object()) {
    object_ = new ::mruv::objects::Object(*from.object_);
  } else {
    object_ = nullptr;
  }
  current_state_id_ = from.current_state_id_;
  // @@protoc_insertion_point(copy_constructor:mruv.objects.GetMovableObjectResponse)
}

void GetMovableObjectResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetMovableObjectResponse_objects_2fmovable_2eproto.base);
  current_state_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&object_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_state_id_) -
      reinterpret_cast<char*>(&object_)) + sizeof(current_state_id_));
}

GetMovableObjectResponse::~GetMovableObjectResponse() {
  // @@protoc_insertion_point(destructor:mruv.objects.GetMovableObjectResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetMovableObjectResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  current_state_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete object_;
}

void GetMovableObjectResponse::ArenaDtor(void* object) {
  GetMovableObjectResponse* _this = reinterpret_cast< GetMovableObjectResponse* >(object);
  (void)_this;
}
void GetMovableObjectResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetMovableObjectResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMovableObjectResponse& GetMovableObjectResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMovableObjectResponse_objects_2fmovable_2eproto.base);
  return *internal_default_instance();
}


void GetMovableObjectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.objects.GetMovableObjectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  states_.Clear();
  current_state_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
  current_state_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMovableObjectResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mruv.objects.Object object = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mruv.objects.State states = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 current_state_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          current_state_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string current_state_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_current_state_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.objects.GetMovableObjectResponse.current_state_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMovableObjectResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.objects.GetMovableObjectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mruv.objects.Object object = 1;
  if (this->has_object()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::object(this), target, stream);
  }

  // repeated .mruv.objects.State states = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_states_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_states(i), target, stream);
  }

  // uint32 current_state_id = 3;
  if (this->current_state_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_current_state_id(), target);
  }

  // string current_state_name = 4;
  if (this->current_state_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_current_state_name().data(), static_cast<int>(this->_internal_current_state_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.objects.GetMovableObjectResponse.current_state_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_current_state_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.objects.GetMovableObjectResponse)
  return target;
}

size_t GetMovableObjectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.objects.GetMovableObjectResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mruv.objects.State states = 2;
  total_size += 1UL * this->_internal_states_size();
  for (const auto& msg : this->states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string current_state_name = 4;
  if (this->current_state_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_current_state_name());
  }

  // .mruv.objects.Object object = 1;
  if (this->has_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_);
  }

  // uint32 current_state_id = 3;
  if (this->current_state_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_current_state_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMovableObjectResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.objects.GetMovableObjectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMovableObjectResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMovableObjectResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.objects.GetMovableObjectResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.objects.GetMovableObjectResponse)
    MergeFrom(*source);
  }
}

void GetMovableObjectResponse::MergeFrom(const GetMovableObjectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.objects.GetMovableObjectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  states_.MergeFrom(from.states_);
  if (from.current_state_name().size() > 0) {
    _internal_set_current_state_name(from._internal_current_state_name());
  }
  if (from.has_object()) {
    _internal_mutable_object()->::mruv::objects::Object::MergeFrom(from._internal_object());
  }
  if (from.current_state_id() != 0) {
    _internal_set_current_state_id(from._internal_current_state_id());
  }
}

void GetMovableObjectResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.objects.GetMovableObjectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMovableObjectResponse::CopyFrom(const GetMovableObjectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.objects.GetMovableObjectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMovableObjectResponse::IsInitialized() const {
  return true;
}

void GetMovableObjectResponse::InternalSwap(GetMovableObjectResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  states_.InternalSwap(&other->states_);
  current_state_name_.Swap(&other->current_state_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetMovableObjectResponse, current_state_id_)
      + sizeof(GetMovableObjectResponse::current_state_id_)
      - PROTOBUF_FIELD_OFFSET(GetMovableObjectResponse, object_)>(
          reinterpret_cast<char*>(&object_),
          reinterpret_cast<char*>(&other->object_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMovableObjectResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateMovableObjectRequest::InitAsDefaultInstance() {
}
class UpdateMovableObjectRequest::_Internal {
 public:
};

UpdateMovableObjectRequest::UpdateMovableObjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  states_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.objects.UpdateMovableObjectRequest)
}
UpdateMovableObjectRequest::UpdateMovableObjectRequest(const UpdateMovableObjectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      states_(from.states_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&object_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(object_id_));
  // @@protoc_insertion_point(copy_constructor:mruv.objects.UpdateMovableObjectRequest)
}

void UpdateMovableObjectRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateMovableObjectRequest_objects_2fmovable_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&object_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(object_id_));
}

UpdateMovableObjectRequest::~UpdateMovableObjectRequest() {
  // @@protoc_insertion_point(destructor:mruv.objects.UpdateMovableObjectRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateMovableObjectRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UpdateMovableObjectRequest::ArenaDtor(void* object) {
  UpdateMovableObjectRequest* _this = reinterpret_cast< UpdateMovableObjectRequest* >(object);
  (void)_this;
}
void UpdateMovableObjectRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateMovableObjectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateMovableObjectRequest& UpdateMovableObjectRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateMovableObjectRequest_objects_2fmovable_2eproto.base);
  return *internal_default_instance();
}


void UpdateMovableObjectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.objects.UpdateMovableObjectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  states_.Clear();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&object_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(object_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateMovableObjectRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 object_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mruv.objects.State states = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateMovableObjectRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.objects.UpdateMovableObjectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 object_id = 2;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_object_id(), target);
  }

  // repeated .mruv.objects.State states = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_states_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_states(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.objects.UpdateMovableObjectRequest)
  return target;
}

size_t UpdateMovableObjectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.objects.UpdateMovableObjectRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mruv.objects.State states = 3;
  total_size += 1UL * this->_internal_states_size();
  for (const auto& msg : this->states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 object_id = 2;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_object_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateMovableObjectRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.objects.UpdateMovableObjectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateMovableObjectRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateMovableObjectRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.objects.UpdateMovableObjectRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.objects.UpdateMovableObjectRequest)
    MergeFrom(*source);
  }
}

void UpdateMovableObjectRequest::MergeFrom(const UpdateMovableObjectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.objects.UpdateMovableObjectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  states_.MergeFrom(from.states_);
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
}

void UpdateMovableObjectRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.objects.UpdateMovableObjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateMovableObjectRequest::CopyFrom(const UpdateMovableObjectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.objects.UpdateMovableObjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateMovableObjectRequest::IsInitialized() const {
  return true;
}

void UpdateMovableObjectRequest::InternalSwap(UpdateMovableObjectRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  states_.InternalSwap(&other->states_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateMovableObjectRequest, object_id_)
      + sizeof(UpdateMovableObjectRequest::object_id_)
      - PROTOBUF_FIELD_OFFSET(UpdateMovableObjectRequest, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateMovableObjectRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateMovableObjectResponse::InitAsDefaultInstance() {
}
class UpdateMovableObjectResponse::_Internal {
 public:
};

UpdateMovableObjectResponse::UpdateMovableObjectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.objects.UpdateMovableObjectResponse)
}
UpdateMovableObjectResponse::UpdateMovableObjectResponse(const UpdateMovableObjectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.objects.UpdateMovableObjectResponse)
}

void UpdateMovableObjectResponse::SharedCtor() {
}

UpdateMovableObjectResponse::~UpdateMovableObjectResponse() {
  // @@protoc_insertion_point(destructor:mruv.objects.UpdateMovableObjectResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateMovableObjectResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UpdateMovableObjectResponse::ArenaDtor(void* object) {
  UpdateMovableObjectResponse* _this = reinterpret_cast< UpdateMovableObjectResponse* >(object);
  (void)_this;
}
void UpdateMovableObjectResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateMovableObjectResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateMovableObjectResponse& UpdateMovableObjectResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateMovableObjectResponse_objects_2fmovable_2eproto.base);
  return *internal_default_instance();
}


void UpdateMovableObjectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.objects.UpdateMovableObjectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateMovableObjectResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateMovableObjectResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.objects.UpdateMovableObjectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.objects.UpdateMovableObjectResponse)
  return target;
}

size_t UpdateMovableObjectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.objects.UpdateMovableObjectResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateMovableObjectResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.objects.UpdateMovableObjectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateMovableObjectResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateMovableObjectResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.objects.UpdateMovableObjectResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.objects.UpdateMovableObjectResponse)
    MergeFrom(*source);
  }
}

void UpdateMovableObjectResponse::MergeFrom(const UpdateMovableObjectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.objects.UpdateMovableObjectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UpdateMovableObjectResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.objects.UpdateMovableObjectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateMovableObjectResponse::CopyFrom(const UpdateMovableObjectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.objects.UpdateMovableObjectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateMovableObjectResponse::IsInitialized() const {
  return true;
}

void UpdateMovableObjectResponse::InternalSwap(UpdateMovableObjectResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateMovableObjectResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteMovableObjectRequest::InitAsDefaultInstance() {
}
class DeleteMovableObjectRequest::_Internal {
 public:
};

DeleteMovableObjectRequest::DeleteMovableObjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.objects.DeleteMovableObjectRequest)
}
DeleteMovableObjectRequest::DeleteMovableObjectRequest(const DeleteMovableObjectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.objects.DeleteMovableObjectRequest)
}

void DeleteMovableObjectRequest::SharedCtor() {
  id_ = 0u;
}

DeleteMovableObjectRequest::~DeleteMovableObjectRequest() {
  // @@protoc_insertion_point(destructor:mruv.objects.DeleteMovableObjectRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteMovableObjectRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteMovableObjectRequest::ArenaDtor(void* object) {
  DeleteMovableObjectRequest* _this = reinterpret_cast< DeleteMovableObjectRequest* >(object);
  (void)_this;
}
void DeleteMovableObjectRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteMovableObjectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteMovableObjectRequest& DeleteMovableObjectRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteMovableObjectRequest_objects_2fmovable_2eproto.base);
  return *internal_default_instance();
}


void DeleteMovableObjectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.objects.DeleteMovableObjectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteMovableObjectRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteMovableObjectRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.objects.DeleteMovableObjectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.objects.DeleteMovableObjectRequest)
  return target;
}

size_t DeleteMovableObjectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.objects.DeleteMovableObjectRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteMovableObjectRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.objects.DeleteMovableObjectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteMovableObjectRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteMovableObjectRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.objects.DeleteMovableObjectRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.objects.DeleteMovableObjectRequest)
    MergeFrom(*source);
  }
}

void DeleteMovableObjectRequest::MergeFrom(const DeleteMovableObjectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.objects.DeleteMovableObjectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void DeleteMovableObjectRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.objects.DeleteMovableObjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteMovableObjectRequest::CopyFrom(const DeleteMovableObjectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.objects.DeleteMovableObjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteMovableObjectRequest::IsInitialized() const {
  return true;
}

void DeleteMovableObjectRequest::InternalSwap(DeleteMovableObjectRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteMovableObjectRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteMovableObjectResponse::InitAsDefaultInstance() {
}
class DeleteMovableObjectResponse::_Internal {
 public:
};

DeleteMovableObjectResponse::DeleteMovableObjectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.objects.DeleteMovableObjectResponse)
}
DeleteMovableObjectResponse::DeleteMovableObjectResponse(const DeleteMovableObjectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.objects.DeleteMovableObjectResponse)
}

void DeleteMovableObjectResponse::SharedCtor() {
}

DeleteMovableObjectResponse::~DeleteMovableObjectResponse() {
  // @@protoc_insertion_point(destructor:mruv.objects.DeleteMovableObjectResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteMovableObjectResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteMovableObjectResponse::ArenaDtor(void* object) {
  DeleteMovableObjectResponse* _this = reinterpret_cast< DeleteMovableObjectResponse* >(object);
  (void)_this;
}
void DeleteMovableObjectResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteMovableObjectResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteMovableObjectResponse& DeleteMovableObjectResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteMovableObjectResponse_objects_2fmovable_2eproto.base);
  return *internal_default_instance();
}


void DeleteMovableObjectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.objects.DeleteMovableObjectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteMovableObjectResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteMovableObjectResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.objects.DeleteMovableObjectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.objects.DeleteMovableObjectResponse)
  return target;
}

size_t DeleteMovableObjectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.objects.DeleteMovableObjectResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteMovableObjectResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.objects.DeleteMovableObjectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteMovableObjectResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteMovableObjectResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.objects.DeleteMovableObjectResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.objects.DeleteMovableObjectResponse)
    MergeFrom(*source);
  }
}

void DeleteMovableObjectResponse::MergeFrom(const DeleteMovableObjectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.objects.DeleteMovableObjectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteMovableObjectResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.objects.DeleteMovableObjectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteMovableObjectResponse::CopyFrom(const DeleteMovableObjectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.objects.DeleteMovableObjectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteMovableObjectResponse::IsInitialized() const {
  return true;
}

void DeleteMovableObjectResponse::InternalSwap(DeleteMovableObjectResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteMovableObjectResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveObjectRequest::InitAsDefaultInstance() {
}
class MoveObjectRequest::_Internal {
 public:
};

MoveObjectRequest::MoveObjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.objects.MoveObjectRequest)
}
MoveObjectRequest::MoveObjectRequest(const MoveObjectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:mruv.objects.MoveObjectRequest)
}

void MoveObjectRequest::SharedCtor() {
  state_ = 0u;
}

MoveObjectRequest::~MoveObjectRequest() {
  // @@protoc_insertion_point(destructor:mruv.objects.MoveObjectRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MoveObjectRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MoveObjectRequest::ArenaDtor(void* object) {
  MoveObjectRequest* _this = reinterpret_cast< MoveObjectRequest* >(object);
  (void)_this;
}
void MoveObjectRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveObjectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveObjectRequest& MoveObjectRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveObjectRequest_objects_2fmovable_2eproto.base);
  return *internal_default_instance();
}


void MoveObjectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.objects.MoveObjectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveObjectRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveObjectRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.objects.MoveObjectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.objects.MoveObjectRequest)
  return target;
}

size_t MoveObjectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.objects.MoveObjectRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveObjectRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.objects.MoveObjectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveObjectRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveObjectRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.objects.MoveObjectRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.objects.MoveObjectRequest)
    MergeFrom(*source);
  }
}

void MoveObjectRequest::MergeFrom(const MoveObjectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.objects.MoveObjectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void MoveObjectRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.objects.MoveObjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveObjectRequest::CopyFrom(const MoveObjectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.objects.MoveObjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveObjectRequest::IsInitialized() const {
  return true;
}

void MoveObjectRequest::InternalSwap(MoveObjectRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveObjectRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveObjectResponse::InitAsDefaultInstance() {
}
class MoveObjectResponse::_Internal {
 public:
};

MoveObjectResponse::MoveObjectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.objects.MoveObjectResponse)
}
MoveObjectResponse::MoveObjectResponse(const MoveObjectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.objects.MoveObjectResponse)
}

void MoveObjectResponse::SharedCtor() {
}

MoveObjectResponse::~MoveObjectResponse() {
  // @@protoc_insertion_point(destructor:mruv.objects.MoveObjectResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MoveObjectResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MoveObjectResponse::ArenaDtor(void* object) {
  MoveObjectResponse* _this = reinterpret_cast< MoveObjectResponse* >(object);
  (void)_this;
}
void MoveObjectResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveObjectResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveObjectResponse& MoveObjectResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveObjectResponse_objects_2fmovable_2eproto.base);
  return *internal_default_instance();
}


void MoveObjectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.objects.MoveObjectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveObjectResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveObjectResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.objects.MoveObjectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.objects.MoveObjectResponse)
  return target;
}

size_t MoveObjectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.objects.MoveObjectResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveObjectResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.objects.MoveObjectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveObjectResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveObjectResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.objects.MoveObjectResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.objects.MoveObjectResponse)
    MergeFrom(*source);
  }
}

void MoveObjectResponse::MergeFrom(const MoveObjectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.objects.MoveObjectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MoveObjectResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.objects.MoveObjectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveObjectResponse::CopyFrom(const MoveObjectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.objects.MoveObjectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveObjectResponse::IsInitialized() const {
  return true;
}

void MoveObjectResponse::InternalSwap(MoveObjectResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveObjectResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveObjectNextRequest::InitAsDefaultInstance() {
}
class MoveObjectNextRequest::_Internal {
 public:
};

MoveObjectNextRequest::MoveObjectNextRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.objects.MoveObjectNextRequest)
}
MoveObjectNextRequest::MoveObjectNextRequest(const MoveObjectNextRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.objects.MoveObjectNextRequest)
}

void MoveObjectNextRequest::SharedCtor() {
  id_ = 0u;
}

MoveObjectNextRequest::~MoveObjectNextRequest() {
  // @@protoc_insertion_point(destructor:mruv.objects.MoveObjectNextRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MoveObjectNextRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MoveObjectNextRequest::ArenaDtor(void* object) {
  MoveObjectNextRequest* _this = reinterpret_cast< MoveObjectNextRequest* >(object);
  (void)_this;
}
void MoveObjectNextRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveObjectNextRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveObjectNextRequest& MoveObjectNextRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveObjectNextRequest_objects_2fmovable_2eproto.base);
  return *internal_default_instance();
}


void MoveObjectNextRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.objects.MoveObjectNextRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveObjectNextRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveObjectNextRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.objects.MoveObjectNextRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.objects.MoveObjectNextRequest)
  return target;
}

size_t MoveObjectNextRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.objects.MoveObjectNextRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveObjectNextRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.objects.MoveObjectNextRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveObjectNextRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveObjectNextRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.objects.MoveObjectNextRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.objects.MoveObjectNextRequest)
    MergeFrom(*source);
  }
}

void MoveObjectNextRequest::MergeFrom(const MoveObjectNextRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.objects.MoveObjectNextRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void MoveObjectNextRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.objects.MoveObjectNextRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveObjectNextRequest::CopyFrom(const MoveObjectNextRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.objects.MoveObjectNextRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveObjectNextRequest::IsInitialized() const {
  return true;
}

void MoveObjectNextRequest::InternalSwap(MoveObjectNextRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveObjectNextRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveObjectNextResponse::InitAsDefaultInstance() {
}
class MoveObjectNextResponse::_Internal {
 public:
};

MoveObjectNextResponse::MoveObjectNextResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.objects.MoveObjectNextResponse)
}
MoveObjectNextResponse::MoveObjectNextResponse(const MoveObjectNextResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_state_name().empty()) {
    state_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_state_name(),
      GetArena());
  }
  state_id_ = from.state_id_;
  // @@protoc_insertion_point(copy_constructor:mruv.objects.MoveObjectNextResponse)
}

void MoveObjectNextResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoveObjectNextResponse_objects_2fmovable_2eproto.base);
  state_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_id_ = 0u;
}

MoveObjectNextResponse::~MoveObjectNextResponse() {
  // @@protoc_insertion_point(destructor:mruv.objects.MoveObjectNextResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MoveObjectNextResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  state_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MoveObjectNextResponse::ArenaDtor(void* object) {
  MoveObjectNextResponse* _this = reinterpret_cast< MoveObjectNextResponse* >(object);
  (void)_this;
}
void MoveObjectNextResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveObjectNextResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveObjectNextResponse& MoveObjectNextResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveObjectNextResponse_objects_2fmovable_2eproto.base);
  return *internal_default_instance();
}


void MoveObjectNextResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.objects.MoveObjectNextResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  state_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveObjectNextResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 state_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string state_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_state_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.objects.MoveObjectNextResponse.state_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveObjectNextResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.objects.MoveObjectNextResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 state_id = 1;
  if (this->state_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_state_id(), target);
  }

  // string state_name = 2;
  if (this->state_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state_name().data(), static_cast<int>(this->_internal_state_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.objects.MoveObjectNextResponse.state_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_state_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.objects.MoveObjectNextResponse)
  return target;
}

size_t MoveObjectNextResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.objects.MoveObjectNextResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string state_name = 2;
  if (this->state_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state_name());
  }

  // uint32 state_id = 1;
  if (this->state_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_state_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveObjectNextResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.objects.MoveObjectNextResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveObjectNextResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveObjectNextResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.objects.MoveObjectNextResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.objects.MoveObjectNextResponse)
    MergeFrom(*source);
  }
}

void MoveObjectNextResponse::MergeFrom(const MoveObjectNextResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.objects.MoveObjectNextResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state_name().size() > 0) {
    _internal_set_state_name(from._internal_state_name());
  }
  if (from.state_id() != 0) {
    _internal_set_state_id(from._internal_state_id());
  }
}

void MoveObjectNextResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.objects.MoveObjectNextResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveObjectNextResponse::CopyFrom(const MoveObjectNextResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.objects.MoveObjectNextResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveObjectNextResponse::IsInitialized() const {
  return true;
}

void MoveObjectNextResponse::InternalSwap(MoveObjectNextResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  state_name_.Swap(&other->state_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(state_id_, other->state_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveObjectNextResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveObjectPreviousRequest::InitAsDefaultInstance() {
}
class MoveObjectPreviousRequest::_Internal {
 public:
};

MoveObjectPreviousRequest::MoveObjectPreviousRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.objects.MoveObjectPreviousRequest)
}
MoveObjectPreviousRequest::MoveObjectPreviousRequest(const MoveObjectPreviousRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.objects.MoveObjectPreviousRequest)
}

void MoveObjectPreviousRequest::SharedCtor() {
  id_ = 0u;
}

MoveObjectPreviousRequest::~MoveObjectPreviousRequest() {
  // @@protoc_insertion_point(destructor:mruv.objects.MoveObjectPreviousRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MoveObjectPreviousRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MoveObjectPreviousRequest::ArenaDtor(void* object) {
  MoveObjectPreviousRequest* _this = reinterpret_cast< MoveObjectPreviousRequest* >(object);
  (void)_this;
}
void MoveObjectPreviousRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveObjectPreviousRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveObjectPreviousRequest& MoveObjectPreviousRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveObjectPreviousRequest_objects_2fmovable_2eproto.base);
  return *internal_default_instance();
}


void MoveObjectPreviousRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.objects.MoveObjectPreviousRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveObjectPreviousRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveObjectPreviousRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.objects.MoveObjectPreviousRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.objects.MoveObjectPreviousRequest)
  return target;
}

size_t MoveObjectPreviousRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.objects.MoveObjectPreviousRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveObjectPreviousRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.objects.MoveObjectPreviousRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveObjectPreviousRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveObjectPreviousRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.objects.MoveObjectPreviousRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.objects.MoveObjectPreviousRequest)
    MergeFrom(*source);
  }
}

void MoveObjectPreviousRequest::MergeFrom(const MoveObjectPreviousRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.objects.MoveObjectPreviousRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void MoveObjectPreviousRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.objects.MoveObjectPreviousRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveObjectPreviousRequest::CopyFrom(const MoveObjectPreviousRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.objects.MoveObjectPreviousRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveObjectPreviousRequest::IsInitialized() const {
  return true;
}

void MoveObjectPreviousRequest::InternalSwap(MoveObjectPreviousRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveObjectPreviousRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveObjectPreviousResponse::InitAsDefaultInstance() {
}
class MoveObjectPreviousResponse::_Internal {
 public:
};

MoveObjectPreviousResponse::MoveObjectPreviousResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.objects.MoveObjectPreviousResponse)
}
MoveObjectPreviousResponse::MoveObjectPreviousResponse(const MoveObjectPreviousResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_state_name().empty()) {
    state_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_state_name(),
      GetArena());
  }
  state_id_ = from.state_id_;
  // @@protoc_insertion_point(copy_constructor:mruv.objects.MoveObjectPreviousResponse)
}

void MoveObjectPreviousResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoveObjectPreviousResponse_objects_2fmovable_2eproto.base);
  state_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_id_ = 0u;
}

MoveObjectPreviousResponse::~MoveObjectPreviousResponse() {
  // @@protoc_insertion_point(destructor:mruv.objects.MoveObjectPreviousResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MoveObjectPreviousResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  state_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MoveObjectPreviousResponse::ArenaDtor(void* object) {
  MoveObjectPreviousResponse* _this = reinterpret_cast< MoveObjectPreviousResponse* >(object);
  (void)_this;
}
void MoveObjectPreviousResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveObjectPreviousResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveObjectPreviousResponse& MoveObjectPreviousResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveObjectPreviousResponse_objects_2fmovable_2eproto.base);
  return *internal_default_instance();
}


void MoveObjectPreviousResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.objects.MoveObjectPreviousResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  state_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveObjectPreviousResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 state_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string state_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_state_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.objects.MoveObjectPreviousResponse.state_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveObjectPreviousResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.objects.MoveObjectPreviousResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 state_id = 1;
  if (this->state_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_state_id(), target);
  }

  // string state_name = 2;
  if (this->state_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state_name().data(), static_cast<int>(this->_internal_state_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.objects.MoveObjectPreviousResponse.state_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_state_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.objects.MoveObjectPreviousResponse)
  return target;
}

size_t MoveObjectPreviousResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.objects.MoveObjectPreviousResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string state_name = 2;
  if (this->state_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state_name());
  }

  // uint32 state_id = 1;
  if (this->state_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_state_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveObjectPreviousResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.objects.MoveObjectPreviousResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveObjectPreviousResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveObjectPreviousResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.objects.MoveObjectPreviousResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.objects.MoveObjectPreviousResponse)
    MergeFrom(*source);
  }
}

void MoveObjectPreviousResponse::MergeFrom(const MoveObjectPreviousResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.objects.MoveObjectPreviousResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state_name().size() > 0) {
    _internal_set_state_name(from._internal_state_name());
  }
  if (from.state_id() != 0) {
    _internal_set_state_id(from._internal_state_id());
  }
}

void MoveObjectPreviousResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.objects.MoveObjectPreviousResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveObjectPreviousResponse::CopyFrom(const MoveObjectPreviousResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.objects.MoveObjectPreviousResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveObjectPreviousResponse::IsInitialized() const {
  return true;
}

void MoveObjectPreviousResponse::InternalSwap(MoveObjectPreviousResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  state_name_.Swap(&other->state_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(state_id_, other->state_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveObjectPreviousResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FetchAllMovableObjectsRequest::InitAsDefaultInstance() {
}
class FetchAllMovableObjectsRequest::_Internal {
 public:
};

FetchAllMovableObjectsRequest::FetchAllMovableObjectsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.objects.FetchAllMovableObjectsRequest)
}
FetchAllMovableObjectsRequest::FetchAllMovableObjectsRequest(const FetchAllMovableObjectsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chunk_size_ = from.chunk_size_;
  // @@protoc_insertion_point(copy_constructor:mruv.objects.FetchAllMovableObjectsRequest)
}

void FetchAllMovableObjectsRequest::SharedCtor() {
  chunk_size_ = 0u;
}

FetchAllMovableObjectsRequest::~FetchAllMovableObjectsRequest() {
  // @@protoc_insertion_point(destructor:mruv.objects.FetchAllMovableObjectsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FetchAllMovableObjectsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FetchAllMovableObjectsRequest::ArenaDtor(void* object) {
  FetchAllMovableObjectsRequest* _this = reinterpret_cast< FetchAllMovableObjectsRequest* >(object);
  (void)_this;
}
void FetchAllMovableObjectsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchAllMovableObjectsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FetchAllMovableObjectsRequest& FetchAllMovableObjectsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FetchAllMovableObjectsRequest_objects_2fmovable_2eproto.base);
  return *internal_default_instance();
}


void FetchAllMovableObjectsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.objects.FetchAllMovableObjectsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chunk_size_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchAllMovableObjectsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 chunk_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chunk_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchAllMovableObjectsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.objects.FetchAllMovableObjectsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 chunk_size = 1;
  if (this->chunk_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_chunk_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.objects.FetchAllMovableObjectsRequest)
  return target;
}

size_t FetchAllMovableObjectsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.objects.FetchAllMovableObjectsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 chunk_size = 1;
  if (this->chunk_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chunk_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchAllMovableObjectsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.objects.FetchAllMovableObjectsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchAllMovableObjectsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchAllMovableObjectsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.objects.FetchAllMovableObjectsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.objects.FetchAllMovableObjectsRequest)
    MergeFrom(*source);
  }
}

void FetchAllMovableObjectsRequest::MergeFrom(const FetchAllMovableObjectsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.objects.FetchAllMovableObjectsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chunk_size() != 0) {
    _internal_set_chunk_size(from._internal_chunk_size());
  }
}

void FetchAllMovableObjectsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.objects.FetchAllMovableObjectsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchAllMovableObjectsRequest::CopyFrom(const FetchAllMovableObjectsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.objects.FetchAllMovableObjectsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchAllMovableObjectsRequest::IsInitialized() const {
  return true;
}

void FetchAllMovableObjectsRequest::InternalSwap(FetchAllMovableObjectsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(chunk_size_, other->chunk_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchAllMovableObjectsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

FetchAllMovableObjectsResponse_MovableObjectsEntry_DoNotUse::FetchAllMovableObjectsResponse_MovableObjectsEntry_DoNotUse() {}
FetchAllMovableObjectsResponse_MovableObjectsEntry_DoNotUse::FetchAllMovableObjectsResponse_MovableObjectsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FetchAllMovableObjectsResponse_MovableObjectsEntry_DoNotUse::MergeFrom(const FetchAllMovableObjectsResponse_MovableObjectsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FetchAllMovableObjectsResponse_MovableObjectsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void FetchAllMovableObjectsResponse_MovableObjectsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void FetchAllMovableObjectsResponse::InitAsDefaultInstance() {
}
class FetchAllMovableObjectsResponse::_Internal {
 public:
};

FetchAllMovableObjectsResponse::FetchAllMovableObjectsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  movable_objects_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.objects.FetchAllMovableObjectsResponse)
}
FetchAllMovableObjectsResponse::FetchAllMovableObjectsResponse(const FetchAllMovableObjectsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  movable_objects_.MergeFrom(from.movable_objects_);
  // @@protoc_insertion_point(copy_constructor:mruv.objects.FetchAllMovableObjectsResponse)
}

void FetchAllMovableObjectsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FetchAllMovableObjectsResponse_objects_2fmovable_2eproto.base);
}

FetchAllMovableObjectsResponse::~FetchAllMovableObjectsResponse() {
  // @@protoc_insertion_point(destructor:mruv.objects.FetchAllMovableObjectsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FetchAllMovableObjectsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FetchAllMovableObjectsResponse::ArenaDtor(void* object) {
  FetchAllMovableObjectsResponse* _this = reinterpret_cast< FetchAllMovableObjectsResponse* >(object);
  (void)_this;
}
void FetchAllMovableObjectsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchAllMovableObjectsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FetchAllMovableObjectsResponse& FetchAllMovableObjectsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FetchAllMovableObjectsResponse_objects_2fmovable_2eproto.base);
  return *internal_default_instance();
}


void FetchAllMovableObjectsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.objects.FetchAllMovableObjectsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  movable_objects_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchAllMovableObjectsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<uint32, .mruv.objects.MovableObject> movable_objects = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&movable_objects_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchAllMovableObjectsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.objects.FetchAllMovableObjectsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, .mruv.objects.MovableObject> movable_objects = 1;
  if (!this->_internal_movable_objects().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::mruv::objects::MovableObject >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_movable_objects().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_movable_objects().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::mruv::objects::MovableObject >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::mruv::objects::MovableObject >::const_iterator
          it = this->_internal_movable_objects().begin();
          it != this->_internal_movable_objects().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = FetchAllMovableObjectsResponse_MovableObjectsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::mruv::objects::MovableObject >::const_iterator
          it = this->_internal_movable_objects().begin();
          it != this->_internal_movable_objects().end(); ++it) {
        target = FetchAllMovableObjectsResponse_MovableObjectsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.objects.FetchAllMovableObjectsResponse)
  return target;
}

size_t FetchAllMovableObjectsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.objects.FetchAllMovableObjectsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .mruv.objects.MovableObject> movable_objects = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_movable_objects_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::mruv::objects::MovableObject >::const_iterator
      it = this->_internal_movable_objects().begin();
      it != this->_internal_movable_objects().end(); ++it) {
    total_size += FetchAllMovableObjectsResponse_MovableObjectsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchAllMovableObjectsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.objects.FetchAllMovableObjectsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchAllMovableObjectsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchAllMovableObjectsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.objects.FetchAllMovableObjectsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.objects.FetchAllMovableObjectsResponse)
    MergeFrom(*source);
  }
}

void FetchAllMovableObjectsResponse::MergeFrom(const FetchAllMovableObjectsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.objects.FetchAllMovableObjectsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  movable_objects_.MergeFrom(from.movable_objects_);
}

void FetchAllMovableObjectsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.objects.FetchAllMovableObjectsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchAllMovableObjectsResponse::CopyFrom(const FetchAllMovableObjectsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.objects.FetchAllMovableObjectsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchAllMovableObjectsResponse::IsInitialized() const {
  return true;
}

void FetchAllMovableObjectsResponse::InternalSwap(FetchAllMovableObjectsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  movable_objects_.Swap(&other->movable_objects_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchAllMovableObjectsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace objects
}  // namespace mruv
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mruv::objects::State* Arena::CreateMaybeMessage< ::mruv::objects::State >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::objects::State >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::objects::MovableObject* Arena::CreateMaybeMessage< ::mruv::objects::MovableObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::objects::MovableObject >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::objects::CreateMovableObjectRequest* Arena::CreateMaybeMessage< ::mruv::objects::CreateMovableObjectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::objects::CreateMovableObjectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::objects::CreateMovableObjectResponse* Arena::CreateMaybeMessage< ::mruv::objects::CreateMovableObjectResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::objects::CreateMovableObjectResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::objects::GetMovableObjectRequest* Arena::CreateMaybeMessage< ::mruv::objects::GetMovableObjectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::objects::GetMovableObjectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::objects::GetMovableObjectResponse* Arena::CreateMaybeMessage< ::mruv::objects::GetMovableObjectResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::objects::GetMovableObjectResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::objects::UpdateMovableObjectRequest* Arena::CreateMaybeMessage< ::mruv::objects::UpdateMovableObjectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::objects::UpdateMovableObjectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::objects::UpdateMovableObjectResponse* Arena::CreateMaybeMessage< ::mruv::objects::UpdateMovableObjectResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::objects::UpdateMovableObjectResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::objects::DeleteMovableObjectRequest* Arena::CreateMaybeMessage< ::mruv::objects::DeleteMovableObjectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::objects::DeleteMovableObjectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::objects::DeleteMovableObjectResponse* Arena::CreateMaybeMessage< ::mruv::objects::DeleteMovableObjectResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::objects::DeleteMovableObjectResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::objects::MoveObjectRequest* Arena::CreateMaybeMessage< ::mruv::objects::MoveObjectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::objects::MoveObjectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::objects::MoveObjectResponse* Arena::CreateMaybeMessage< ::mruv::objects::MoveObjectResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::objects::MoveObjectResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::objects::MoveObjectNextRequest* Arena::CreateMaybeMessage< ::mruv::objects::MoveObjectNextRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::objects::MoveObjectNextRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::objects::MoveObjectNextResponse* Arena::CreateMaybeMessage< ::mruv::objects::MoveObjectNextResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::objects::MoveObjectNextResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::objects::MoveObjectPreviousRequest* Arena::CreateMaybeMessage< ::mruv::objects::MoveObjectPreviousRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::objects::MoveObjectPreviousRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::objects::MoveObjectPreviousResponse* Arena::CreateMaybeMessage< ::mruv::objects::MoveObjectPreviousResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::objects::MoveObjectPreviousResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::objects::FetchAllMovableObjectsRequest* Arena::CreateMaybeMessage< ::mruv::objects::FetchAllMovableObjectsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::objects::FetchAllMovableObjectsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::objects::FetchAllMovableObjectsResponse_MovableObjectsEntry_DoNotUse* Arena::CreateMaybeMessage< ::mruv::objects::FetchAllMovableObjectsResponse_MovableObjectsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::objects::FetchAllMovableObjectsResponse_MovableObjectsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::objects::FetchAllMovableObjectsResponse* Arena::CreateMaybeMessage< ::mruv::objects::FetchAllMovableObjectsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::objects::FetchAllMovableObjectsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
