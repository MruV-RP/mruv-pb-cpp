// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: objects/models.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_objects_2fmodels_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_objects_2fmodels_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_objects_2fmodels_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_objects_2fmodels_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_objects_2fmodels_2eproto;
namespace mruv {
namespace objects {
class CreateObjectModelRequest;
class CreateObjectModelRequestDefaultTypeInternal;
extern CreateObjectModelRequestDefaultTypeInternal _CreateObjectModelRequest_default_instance_;
class CreateObjectModelResponse;
class CreateObjectModelResponseDefaultTypeInternal;
extern CreateObjectModelResponseDefaultTypeInternal _CreateObjectModelResponse_default_instance_;
class DeleteObjectModelRequest;
class DeleteObjectModelRequestDefaultTypeInternal;
extern DeleteObjectModelRequestDefaultTypeInternal _DeleteObjectModelRequest_default_instance_;
class DeleteObjectModelResponse;
class DeleteObjectModelResponseDefaultTypeInternal;
extern DeleteObjectModelResponseDefaultTypeInternal _DeleteObjectModelResponse_default_instance_;
class FetchAllModelsRequest;
class FetchAllModelsRequestDefaultTypeInternal;
extern FetchAllModelsRequestDefaultTypeInternal _FetchAllModelsRequest_default_instance_;
class FetchAllModelsResponse;
class FetchAllModelsResponseDefaultTypeInternal;
extern FetchAllModelsResponseDefaultTypeInternal _FetchAllModelsResponse_default_instance_;
class FetchAllModelsResponse_ModelsEntry_DoNotUse;
class FetchAllModelsResponse_ModelsEntry_DoNotUseDefaultTypeInternal;
extern FetchAllModelsResponse_ModelsEntry_DoNotUseDefaultTypeInternal _FetchAllModelsResponse_ModelsEntry_DoNotUse_default_instance_;
class GetObjectModelRequest;
class GetObjectModelRequestDefaultTypeInternal;
extern GetObjectModelRequestDefaultTypeInternal _GetObjectModelRequest_default_instance_;
class GetObjectModelResponse;
class GetObjectModelResponseDefaultTypeInternal;
extern GetObjectModelResponseDefaultTypeInternal _GetObjectModelResponse_default_instance_;
class ObjectModel;
class ObjectModelDefaultTypeInternal;
extern ObjectModelDefaultTypeInternal _ObjectModel_default_instance_;
class UpdateObjectModelRequest;
class UpdateObjectModelRequestDefaultTypeInternal;
extern UpdateObjectModelRequestDefaultTypeInternal _UpdateObjectModelRequest_default_instance_;
class UpdateObjectModelResponse;
class UpdateObjectModelResponseDefaultTypeInternal;
extern UpdateObjectModelResponseDefaultTypeInternal _UpdateObjectModelResponse_default_instance_;
}  // namespace objects
}  // namespace mruv
PROTOBUF_NAMESPACE_OPEN
template<> ::mruv::objects::CreateObjectModelRequest* Arena::CreateMaybeMessage<::mruv::objects::CreateObjectModelRequest>(Arena*);
template<> ::mruv::objects::CreateObjectModelResponse* Arena::CreateMaybeMessage<::mruv::objects::CreateObjectModelResponse>(Arena*);
template<> ::mruv::objects::DeleteObjectModelRequest* Arena::CreateMaybeMessage<::mruv::objects::DeleteObjectModelRequest>(Arena*);
template<> ::mruv::objects::DeleteObjectModelResponse* Arena::CreateMaybeMessage<::mruv::objects::DeleteObjectModelResponse>(Arena*);
template<> ::mruv::objects::FetchAllModelsRequest* Arena::CreateMaybeMessage<::mruv::objects::FetchAllModelsRequest>(Arena*);
template<> ::mruv::objects::FetchAllModelsResponse* Arena::CreateMaybeMessage<::mruv::objects::FetchAllModelsResponse>(Arena*);
template<> ::mruv::objects::FetchAllModelsResponse_ModelsEntry_DoNotUse* Arena::CreateMaybeMessage<::mruv::objects::FetchAllModelsResponse_ModelsEntry_DoNotUse>(Arena*);
template<> ::mruv::objects::GetObjectModelRequest* Arena::CreateMaybeMessage<::mruv::objects::GetObjectModelRequest>(Arena*);
template<> ::mruv::objects::GetObjectModelResponse* Arena::CreateMaybeMessage<::mruv::objects::GetObjectModelResponse>(Arena*);
template<> ::mruv::objects::ObjectModel* Arena::CreateMaybeMessage<::mruv::objects::ObjectModel>(Arena*);
template<> ::mruv::objects::UpdateObjectModelRequest* Arena::CreateMaybeMessage<::mruv::objects::UpdateObjectModelRequest>(Arena*);
template<> ::mruv::objects::UpdateObjectModelResponse* Arena::CreateMaybeMessage<::mruv::objects::UpdateObjectModelResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mruv {
namespace objects {

// ===================================================================

class ObjectModel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.objects.ObjectModel) */ {
 public:
  inline ObjectModel() : ObjectModel(nullptr) {}
  virtual ~ObjectModel();

  ObjectModel(const ObjectModel& from);
  ObjectModel(ObjectModel&& from) noexcept
    : ObjectModel() {
    *this = ::std::move(from);
  }

  inline ObjectModel& operator=(const ObjectModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectModel& operator=(ObjectModel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjectModel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectModel* internal_default_instance() {
    return reinterpret_cast<const ObjectModel*>(
               &_ObjectModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ObjectModel& a, ObjectModel& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectModel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectModel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectModel* New() const final {
    return CreateMaybeMessage<ObjectModel>(nullptr);
  }

  ObjectModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectModel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectModel& from);
  void MergeFrom(const ObjectModel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectModel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.objects.ObjectModel";
  }
  protected:
  explicit ObjectModel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_objects_2fmodels_2eproto);
    return ::descriptor_table_objects_2fmodels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 9,
    kModelNameFieldNumber = 2,
    kNameFieldNumber = 3,
    kCategoryFieldNumber = 4,
    kLengthFieldNumber = 5,
    kWidthFieldNumber = 6,
    kHeightFieldNumber = 7,
    kSizeFieldNumber = 8,
    kModelFieldNumber = 1,
    kHasCollisionFieldNumber = 10,
    kBreaksOnHitFieldNumber = 11,
    kHasAnimationFieldNumber = 12,
    kVisibleByTimeFieldNumber = 16,
    kVisibleFromFieldNumber = 17,
    kVisibleToFieldNumber = 18,
  };
  // repeated string tags = 9;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // string model_name = 2;
  void clear_model_name();
  const std::string& model_name() const;
  void set_model_name(const std::string& value);
  void set_model_name(std::string&& value);
  void set_model_name(const char* value);
  void set_model_name(const char* value, size_t size);
  std::string* mutable_model_name();
  std::string* release_model_name();
  void set_allocated_model_name(std::string* model_name);
  private:
  const std::string& _internal_model_name() const;
  void _internal_set_model_name(const std::string& value);
  std::string* _internal_mutable_model_name();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string category = 4;
  void clear_category();
  const std::string& category() const;
  void set_category(const std::string& value);
  void set_category(std::string&& value);
  void set_category(const char* value);
  void set_category(const char* value, size_t size);
  std::string* mutable_category();
  std::string* release_category();
  void set_allocated_category(std::string* category);
  private:
  const std::string& _internal_category() const;
  void _internal_set_category(const std::string& value);
  std::string* _internal_mutable_category();
  public:

  // double length = 5;
  void clear_length();
  double length() const;
  void set_length(double value);
  private:
  double _internal_length() const;
  void _internal_set_length(double value);
  public:

  // double width = 6;
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // double height = 7;
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // double size = 8;
  void clear_size();
  double size() const;
  void set_size(double value);
  private:
  double _internal_size() const;
  void _internal_set_size(double value);
  public:

  // int32 model = 1;
  void clear_model();
  ::PROTOBUF_NAMESPACE_ID::int32 model() const;
  void set_model(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_model() const;
  void _internal_set_model(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool has_collision = 10;
  void clear_has_collision();
  bool has_collision() const;
  void set_has_collision(bool value);
  private:
  bool _internal_has_collision() const;
  void _internal_set_has_collision(bool value);
  public:

  // bool breaks_on_hit = 11;
  void clear_breaks_on_hit();
  bool breaks_on_hit() const;
  void set_breaks_on_hit(bool value);
  private:
  bool _internal_breaks_on_hit() const;
  void _internal_set_breaks_on_hit(bool value);
  public:

  // bool has_animation = 12;
  void clear_has_animation();
  bool has_animation() const;
  void set_has_animation(bool value);
  private:
  bool _internal_has_animation() const;
  void _internal_set_has_animation(bool value);
  public:

  // bool visible_by_time = 16;
  void clear_visible_by_time();
  bool visible_by_time() const;
  void set_visible_by_time(bool value);
  private:
  bool _internal_visible_by_time() const;
  void _internal_set_visible_by_time(bool value);
  public:

  // uint32 visible_from = 17;
  void clear_visible_from();
  ::PROTOBUF_NAMESPACE_ID::uint32 visible_from() const;
  void set_visible_from(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_visible_from() const;
  void _internal_set_visible_from(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 visible_to = 18;
  void clear_visible_to();
  ::PROTOBUF_NAMESPACE_ID::uint32 visible_to() const;
  void set_visible_to(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_visible_to() const;
  void _internal_set_visible_to(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.objects.ObjectModel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr category_;
  double length_;
  double width_;
  double height_;
  double size_;
  ::PROTOBUF_NAMESPACE_ID::int32 model_;
  bool has_collision_;
  bool breaks_on_hit_;
  bool has_animation_;
  bool visible_by_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 visible_from_;
  ::PROTOBUF_NAMESPACE_ID::uint32 visible_to_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_objects_2fmodels_2eproto;
};
// -------------------------------------------------------------------

class CreateObjectModelRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.objects.CreateObjectModelRequest) */ {
 public:
  inline CreateObjectModelRequest() : CreateObjectModelRequest(nullptr) {}
  virtual ~CreateObjectModelRequest();

  CreateObjectModelRequest(const CreateObjectModelRequest& from);
  CreateObjectModelRequest(CreateObjectModelRequest&& from) noexcept
    : CreateObjectModelRequest() {
    *this = ::std::move(from);
  }

  inline CreateObjectModelRequest& operator=(const CreateObjectModelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateObjectModelRequest& operator=(CreateObjectModelRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateObjectModelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateObjectModelRequest* internal_default_instance() {
    return reinterpret_cast<const CreateObjectModelRequest*>(
               &_CreateObjectModelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateObjectModelRequest& a, CreateObjectModelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateObjectModelRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateObjectModelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateObjectModelRequest* New() const final {
    return CreateMaybeMessage<CreateObjectModelRequest>(nullptr);
  }

  CreateObjectModelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateObjectModelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateObjectModelRequest& from);
  void MergeFrom(const CreateObjectModelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateObjectModelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.objects.CreateObjectModelRequest";
  }
  protected:
  explicit CreateObjectModelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_objects_2fmodels_2eproto);
    return ::descriptor_table_objects_2fmodels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectTypeFieldNumber = 1,
  };
  // .mruv.objects.ObjectModel object_type = 1;
  bool has_object_type() const;
  private:
  bool _internal_has_object_type() const;
  public:
  void clear_object_type();
  const ::mruv::objects::ObjectModel& object_type() const;
  ::mruv::objects::ObjectModel* release_object_type();
  ::mruv::objects::ObjectModel* mutable_object_type();
  void set_allocated_object_type(::mruv::objects::ObjectModel* object_type);
  private:
  const ::mruv::objects::ObjectModel& _internal_object_type() const;
  ::mruv::objects::ObjectModel* _internal_mutable_object_type();
  public:
  void unsafe_arena_set_allocated_object_type(
      ::mruv::objects::ObjectModel* object_type);
  ::mruv::objects::ObjectModel* unsafe_arena_release_object_type();

  // @@protoc_insertion_point(class_scope:mruv.objects.CreateObjectModelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mruv::objects::ObjectModel* object_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_objects_2fmodels_2eproto;
};
// -------------------------------------------------------------------

class CreateObjectModelResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.objects.CreateObjectModelResponse) */ {
 public:
  inline CreateObjectModelResponse() : CreateObjectModelResponse(nullptr) {}
  virtual ~CreateObjectModelResponse();

  CreateObjectModelResponse(const CreateObjectModelResponse& from);
  CreateObjectModelResponse(CreateObjectModelResponse&& from) noexcept
    : CreateObjectModelResponse() {
    *this = ::std::move(from);
  }

  inline CreateObjectModelResponse& operator=(const CreateObjectModelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateObjectModelResponse& operator=(CreateObjectModelResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateObjectModelResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateObjectModelResponse* internal_default_instance() {
    return reinterpret_cast<const CreateObjectModelResponse*>(
               &_CreateObjectModelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateObjectModelResponse& a, CreateObjectModelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateObjectModelResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateObjectModelResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateObjectModelResponse* New() const final {
    return CreateMaybeMessage<CreateObjectModelResponse>(nullptr);
  }

  CreateObjectModelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateObjectModelResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateObjectModelResponse& from);
  void MergeFrom(const CreateObjectModelResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateObjectModelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.objects.CreateObjectModelResponse";
  }
  protected:
  explicit CreateObjectModelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_objects_2fmodels_2eproto);
    return ::descriptor_table_objects_2fmodels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.objects.CreateObjectModelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_objects_2fmodels_2eproto;
};
// -------------------------------------------------------------------

class GetObjectModelRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.objects.GetObjectModelRequest) */ {
 public:
  inline GetObjectModelRequest() : GetObjectModelRequest(nullptr) {}
  virtual ~GetObjectModelRequest();

  GetObjectModelRequest(const GetObjectModelRequest& from);
  GetObjectModelRequest(GetObjectModelRequest&& from) noexcept
    : GetObjectModelRequest() {
    *this = ::std::move(from);
  }

  inline GetObjectModelRequest& operator=(const GetObjectModelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetObjectModelRequest& operator=(GetObjectModelRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetObjectModelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetObjectModelRequest* internal_default_instance() {
    return reinterpret_cast<const GetObjectModelRequest*>(
               &_GetObjectModelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetObjectModelRequest& a, GetObjectModelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetObjectModelRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetObjectModelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetObjectModelRequest* New() const final {
    return CreateMaybeMessage<GetObjectModelRequest>(nullptr);
  }

  GetObjectModelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetObjectModelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetObjectModelRequest& from);
  void MergeFrom(const GetObjectModelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetObjectModelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.objects.GetObjectModelRequest";
  }
  protected:
  explicit GetObjectModelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_objects_2fmodels_2eproto);
    return ::descriptor_table_objects_2fmodels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 1,
  };
  // int32 model = 1;
  void clear_model();
  ::PROTOBUF_NAMESPACE_ID::int32 model() const;
  void set_model(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_model() const;
  void _internal_set_model(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.objects.GetObjectModelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 model_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_objects_2fmodels_2eproto;
};
// -------------------------------------------------------------------

class GetObjectModelResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.objects.GetObjectModelResponse) */ {
 public:
  inline GetObjectModelResponse() : GetObjectModelResponse(nullptr) {}
  virtual ~GetObjectModelResponse();

  GetObjectModelResponse(const GetObjectModelResponse& from);
  GetObjectModelResponse(GetObjectModelResponse&& from) noexcept
    : GetObjectModelResponse() {
    *this = ::std::move(from);
  }

  inline GetObjectModelResponse& operator=(const GetObjectModelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetObjectModelResponse& operator=(GetObjectModelResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetObjectModelResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetObjectModelResponse* internal_default_instance() {
    return reinterpret_cast<const GetObjectModelResponse*>(
               &_GetObjectModelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetObjectModelResponse& a, GetObjectModelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetObjectModelResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetObjectModelResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetObjectModelResponse* New() const final {
    return CreateMaybeMessage<GetObjectModelResponse>(nullptr);
  }

  GetObjectModelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetObjectModelResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetObjectModelResponse& from);
  void MergeFrom(const GetObjectModelResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetObjectModelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.objects.GetObjectModelResponse";
  }
  protected:
  explicit GetObjectModelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_objects_2fmodels_2eproto);
    return ::descriptor_table_objects_2fmodels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectTypeFieldNumber = 1,
  };
  // .mruv.objects.ObjectModel object_type = 1;
  bool has_object_type() const;
  private:
  bool _internal_has_object_type() const;
  public:
  void clear_object_type();
  const ::mruv::objects::ObjectModel& object_type() const;
  ::mruv::objects::ObjectModel* release_object_type();
  ::mruv::objects::ObjectModel* mutable_object_type();
  void set_allocated_object_type(::mruv::objects::ObjectModel* object_type);
  private:
  const ::mruv::objects::ObjectModel& _internal_object_type() const;
  ::mruv::objects::ObjectModel* _internal_mutable_object_type();
  public:
  void unsafe_arena_set_allocated_object_type(
      ::mruv::objects::ObjectModel* object_type);
  ::mruv::objects::ObjectModel* unsafe_arena_release_object_type();

  // @@protoc_insertion_point(class_scope:mruv.objects.GetObjectModelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mruv::objects::ObjectModel* object_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_objects_2fmodels_2eproto;
};
// -------------------------------------------------------------------

class UpdateObjectModelRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.objects.UpdateObjectModelRequest) */ {
 public:
  inline UpdateObjectModelRequest() : UpdateObjectModelRequest(nullptr) {}
  virtual ~UpdateObjectModelRequest();

  UpdateObjectModelRequest(const UpdateObjectModelRequest& from);
  UpdateObjectModelRequest(UpdateObjectModelRequest&& from) noexcept
    : UpdateObjectModelRequest() {
    *this = ::std::move(from);
  }

  inline UpdateObjectModelRequest& operator=(const UpdateObjectModelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateObjectModelRequest& operator=(UpdateObjectModelRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateObjectModelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateObjectModelRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateObjectModelRequest*>(
               &_UpdateObjectModelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UpdateObjectModelRequest& a, UpdateObjectModelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateObjectModelRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateObjectModelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateObjectModelRequest* New() const final {
    return CreateMaybeMessage<UpdateObjectModelRequest>(nullptr);
  }

  UpdateObjectModelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateObjectModelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateObjectModelRequest& from);
  void MergeFrom(const UpdateObjectModelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateObjectModelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.objects.UpdateObjectModelRequest";
  }
  protected:
  explicit UpdateObjectModelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_objects_2fmodels_2eproto);
    return ::descriptor_table_objects_2fmodels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectTypeFieldNumber = 1,
  };
  // .mruv.objects.ObjectModel object_type = 1;
  bool has_object_type() const;
  private:
  bool _internal_has_object_type() const;
  public:
  void clear_object_type();
  const ::mruv::objects::ObjectModel& object_type() const;
  ::mruv::objects::ObjectModel* release_object_type();
  ::mruv::objects::ObjectModel* mutable_object_type();
  void set_allocated_object_type(::mruv::objects::ObjectModel* object_type);
  private:
  const ::mruv::objects::ObjectModel& _internal_object_type() const;
  ::mruv::objects::ObjectModel* _internal_mutable_object_type();
  public:
  void unsafe_arena_set_allocated_object_type(
      ::mruv::objects::ObjectModel* object_type);
  ::mruv::objects::ObjectModel* unsafe_arena_release_object_type();

  // @@protoc_insertion_point(class_scope:mruv.objects.UpdateObjectModelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mruv::objects::ObjectModel* object_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_objects_2fmodels_2eproto;
};
// -------------------------------------------------------------------

class UpdateObjectModelResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.objects.UpdateObjectModelResponse) */ {
 public:
  inline UpdateObjectModelResponse() : UpdateObjectModelResponse(nullptr) {}
  virtual ~UpdateObjectModelResponse();

  UpdateObjectModelResponse(const UpdateObjectModelResponse& from);
  UpdateObjectModelResponse(UpdateObjectModelResponse&& from) noexcept
    : UpdateObjectModelResponse() {
    *this = ::std::move(from);
  }

  inline UpdateObjectModelResponse& operator=(const UpdateObjectModelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateObjectModelResponse& operator=(UpdateObjectModelResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateObjectModelResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateObjectModelResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateObjectModelResponse*>(
               &_UpdateObjectModelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UpdateObjectModelResponse& a, UpdateObjectModelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateObjectModelResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateObjectModelResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateObjectModelResponse* New() const final {
    return CreateMaybeMessage<UpdateObjectModelResponse>(nullptr);
  }

  UpdateObjectModelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateObjectModelResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateObjectModelResponse& from);
  void MergeFrom(const UpdateObjectModelResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateObjectModelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.objects.UpdateObjectModelResponse";
  }
  protected:
  explicit UpdateObjectModelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_objects_2fmodels_2eproto);
    return ::descriptor_table_objects_2fmodels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.objects.UpdateObjectModelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_objects_2fmodels_2eproto;
};
// -------------------------------------------------------------------

class DeleteObjectModelRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.objects.DeleteObjectModelRequest) */ {
 public:
  inline DeleteObjectModelRequest() : DeleteObjectModelRequest(nullptr) {}
  virtual ~DeleteObjectModelRequest();

  DeleteObjectModelRequest(const DeleteObjectModelRequest& from);
  DeleteObjectModelRequest(DeleteObjectModelRequest&& from) noexcept
    : DeleteObjectModelRequest() {
    *this = ::std::move(from);
  }

  inline DeleteObjectModelRequest& operator=(const DeleteObjectModelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteObjectModelRequest& operator=(DeleteObjectModelRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteObjectModelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteObjectModelRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteObjectModelRequest*>(
               &_DeleteObjectModelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeleteObjectModelRequest& a, DeleteObjectModelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteObjectModelRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteObjectModelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteObjectModelRequest* New() const final {
    return CreateMaybeMessage<DeleteObjectModelRequest>(nullptr);
  }

  DeleteObjectModelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteObjectModelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteObjectModelRequest& from);
  void MergeFrom(const DeleteObjectModelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteObjectModelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.objects.DeleteObjectModelRequest";
  }
  protected:
  explicit DeleteObjectModelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_objects_2fmodels_2eproto);
    return ::descriptor_table_objects_2fmodels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 1,
  };
  // int32 model = 1;
  void clear_model();
  ::PROTOBUF_NAMESPACE_ID::int32 model() const;
  void set_model(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_model() const;
  void _internal_set_model(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.objects.DeleteObjectModelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 model_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_objects_2fmodels_2eproto;
};
// -------------------------------------------------------------------

class DeleteObjectModelResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.objects.DeleteObjectModelResponse) */ {
 public:
  inline DeleteObjectModelResponse() : DeleteObjectModelResponse(nullptr) {}
  virtual ~DeleteObjectModelResponse();

  DeleteObjectModelResponse(const DeleteObjectModelResponse& from);
  DeleteObjectModelResponse(DeleteObjectModelResponse&& from) noexcept
    : DeleteObjectModelResponse() {
    *this = ::std::move(from);
  }

  inline DeleteObjectModelResponse& operator=(const DeleteObjectModelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteObjectModelResponse& operator=(DeleteObjectModelResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteObjectModelResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteObjectModelResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteObjectModelResponse*>(
               &_DeleteObjectModelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DeleteObjectModelResponse& a, DeleteObjectModelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteObjectModelResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteObjectModelResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteObjectModelResponse* New() const final {
    return CreateMaybeMessage<DeleteObjectModelResponse>(nullptr);
  }

  DeleteObjectModelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteObjectModelResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteObjectModelResponse& from);
  void MergeFrom(const DeleteObjectModelResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteObjectModelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.objects.DeleteObjectModelResponse";
  }
  protected:
  explicit DeleteObjectModelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_objects_2fmodels_2eproto);
    return ::descriptor_table_objects_2fmodels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.objects.DeleteObjectModelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_objects_2fmodels_2eproto;
};
// -------------------------------------------------------------------

class FetchAllModelsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.objects.FetchAllModelsRequest) */ {
 public:
  inline FetchAllModelsRequest() : FetchAllModelsRequest(nullptr) {}
  virtual ~FetchAllModelsRequest();

  FetchAllModelsRequest(const FetchAllModelsRequest& from);
  FetchAllModelsRequest(FetchAllModelsRequest&& from) noexcept
    : FetchAllModelsRequest() {
    *this = ::std::move(from);
  }

  inline FetchAllModelsRequest& operator=(const FetchAllModelsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchAllModelsRequest& operator=(FetchAllModelsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchAllModelsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FetchAllModelsRequest* internal_default_instance() {
    return reinterpret_cast<const FetchAllModelsRequest*>(
               &_FetchAllModelsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(FetchAllModelsRequest& a, FetchAllModelsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchAllModelsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchAllModelsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchAllModelsRequest* New() const final {
    return CreateMaybeMessage<FetchAllModelsRequest>(nullptr);
  }

  FetchAllModelsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchAllModelsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchAllModelsRequest& from);
  void MergeFrom(const FetchAllModelsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchAllModelsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.objects.FetchAllModelsRequest";
  }
  protected:
  explicit FetchAllModelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_objects_2fmodels_2eproto);
    return ::descriptor_table_objects_2fmodels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChunkSizeFieldNumber = 1,
  };
  // uint32 chunk_size = 1;
  void clear_chunk_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 chunk_size() const;
  void set_chunk_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_chunk_size() const;
  void _internal_set_chunk_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.objects.FetchAllModelsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 chunk_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_objects_2fmodels_2eproto;
};
// -------------------------------------------------------------------

class FetchAllModelsResponse_ModelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FetchAllModelsResponse_ModelsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::mruv::objects::ObjectModel,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FetchAllModelsResponse_ModelsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::mruv::objects::ObjectModel,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  FetchAllModelsResponse_ModelsEntry_DoNotUse();
  explicit FetchAllModelsResponse_ModelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const FetchAllModelsResponse_ModelsEntry_DoNotUse& other);
  static const FetchAllModelsResponse_ModelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FetchAllModelsResponse_ModelsEntry_DoNotUse*>(&_FetchAllModelsResponse_ModelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_objects_2fmodels_2eproto);
    return ::descriptor_table_objects_2fmodels_2eproto.file_level_metadata[10];
  }

  public:
};

// -------------------------------------------------------------------

class FetchAllModelsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.objects.FetchAllModelsResponse) */ {
 public:
  inline FetchAllModelsResponse() : FetchAllModelsResponse(nullptr) {}
  virtual ~FetchAllModelsResponse();

  FetchAllModelsResponse(const FetchAllModelsResponse& from);
  FetchAllModelsResponse(FetchAllModelsResponse&& from) noexcept
    : FetchAllModelsResponse() {
    *this = ::std::move(from);
  }

  inline FetchAllModelsResponse& operator=(const FetchAllModelsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchAllModelsResponse& operator=(FetchAllModelsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchAllModelsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FetchAllModelsResponse* internal_default_instance() {
    return reinterpret_cast<const FetchAllModelsResponse*>(
               &_FetchAllModelsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(FetchAllModelsResponse& a, FetchAllModelsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchAllModelsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchAllModelsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchAllModelsResponse* New() const final {
    return CreateMaybeMessage<FetchAllModelsResponse>(nullptr);
  }

  FetchAllModelsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchAllModelsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchAllModelsResponse& from);
  void MergeFrom(const FetchAllModelsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchAllModelsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.objects.FetchAllModelsResponse";
  }
  protected:
  explicit FetchAllModelsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_objects_2fmodels_2eproto);
    return ::descriptor_table_objects_2fmodels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kModelsFieldNumber = 1,
  };
  // map<int32, .mruv.objects.ObjectModel> models = 1;
  int models_size() const;
  private:
  int _internal_models_size() const;
  public:
  void clear_models();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::mruv::objects::ObjectModel >&
      _internal_models() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::mruv::objects::ObjectModel >*
      _internal_mutable_models();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::mruv::objects::ObjectModel >&
      models() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::mruv::objects::ObjectModel >*
      mutable_models();

  // @@protoc_insertion_point(class_scope:mruv.objects.FetchAllModelsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      FetchAllModelsResponse_ModelsEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::mruv::objects::ObjectModel,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > models_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_objects_2fmodels_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ObjectModel

// int32 model = 1;
inline void ObjectModel::clear_model() {
  model_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObjectModel::_internal_model() const {
  return model_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObjectModel::model() const {
  // @@protoc_insertion_point(field_get:mruv.objects.ObjectModel.model)
  return _internal_model();
}
inline void ObjectModel::_internal_set_model(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  model_ = value;
}
inline void ObjectModel::set_model(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_model(value);
  // @@protoc_insertion_point(field_set:mruv.objects.ObjectModel.model)
}

// string model_name = 2;
inline void ObjectModel::clear_model_name() {
  model_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ObjectModel::model_name() const {
  // @@protoc_insertion_point(field_get:mruv.objects.ObjectModel.model_name)
  return _internal_model_name();
}
inline void ObjectModel::set_model_name(const std::string& value) {
  _internal_set_model_name(value);
  // @@protoc_insertion_point(field_set:mruv.objects.ObjectModel.model_name)
}
inline std::string* ObjectModel::mutable_model_name() {
  // @@protoc_insertion_point(field_mutable:mruv.objects.ObjectModel.model_name)
  return _internal_mutable_model_name();
}
inline const std::string& ObjectModel::_internal_model_name() const {
  return model_name_.Get();
}
inline void ObjectModel::_internal_set_model_name(const std::string& value) {
  
  model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ObjectModel::set_model_name(std::string&& value) {
  
  model_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.objects.ObjectModel.model_name)
}
inline void ObjectModel::set_model_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.objects.ObjectModel.model_name)
}
inline void ObjectModel::set_model_name(const char* value,
    size_t size) {
  
  model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.objects.ObjectModel.model_name)
}
inline std::string* ObjectModel::_internal_mutable_model_name() {
  
  return model_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ObjectModel::release_model_name() {
  // @@protoc_insertion_point(field_release:mruv.objects.ObjectModel.model_name)
  return model_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObjectModel::set_allocated_model_name(std::string* model_name) {
  if (model_name != nullptr) {
    
  } else {
    
  }
  model_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.objects.ObjectModel.model_name)
}

// string name = 3;
inline void ObjectModel::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ObjectModel::name() const {
  // @@protoc_insertion_point(field_get:mruv.objects.ObjectModel.name)
  return _internal_name();
}
inline void ObjectModel::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mruv.objects.ObjectModel.name)
}
inline std::string* ObjectModel::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mruv.objects.ObjectModel.name)
  return _internal_mutable_name();
}
inline const std::string& ObjectModel::_internal_name() const {
  return name_.Get();
}
inline void ObjectModel::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ObjectModel::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.objects.ObjectModel.name)
}
inline void ObjectModel::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.objects.ObjectModel.name)
}
inline void ObjectModel::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.objects.ObjectModel.name)
}
inline std::string* ObjectModel::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ObjectModel::release_name() {
  // @@protoc_insertion_point(field_release:mruv.objects.ObjectModel.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObjectModel::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.objects.ObjectModel.name)
}

// string category = 4;
inline void ObjectModel::clear_category() {
  category_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ObjectModel::category() const {
  // @@protoc_insertion_point(field_get:mruv.objects.ObjectModel.category)
  return _internal_category();
}
inline void ObjectModel::set_category(const std::string& value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:mruv.objects.ObjectModel.category)
}
inline std::string* ObjectModel::mutable_category() {
  // @@protoc_insertion_point(field_mutable:mruv.objects.ObjectModel.category)
  return _internal_mutable_category();
}
inline const std::string& ObjectModel::_internal_category() const {
  return category_.Get();
}
inline void ObjectModel::_internal_set_category(const std::string& value) {
  
  category_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ObjectModel::set_category(std::string&& value) {
  
  category_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.objects.ObjectModel.category)
}
inline void ObjectModel::set_category(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  category_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.objects.ObjectModel.category)
}
inline void ObjectModel::set_category(const char* value,
    size_t size) {
  
  category_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.objects.ObjectModel.category)
}
inline std::string* ObjectModel::_internal_mutable_category() {
  
  return category_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ObjectModel::release_category() {
  // @@protoc_insertion_point(field_release:mruv.objects.ObjectModel.category)
  return category_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObjectModel::set_allocated_category(std::string* category) {
  if (category != nullptr) {
    
  } else {
    
  }
  category_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), category,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.objects.ObjectModel.category)
}

// double length = 5;
inline void ObjectModel::clear_length() {
  length_ = 0;
}
inline double ObjectModel::_internal_length() const {
  return length_;
}
inline double ObjectModel::length() const {
  // @@protoc_insertion_point(field_get:mruv.objects.ObjectModel.length)
  return _internal_length();
}
inline void ObjectModel::_internal_set_length(double value) {
  
  length_ = value;
}
inline void ObjectModel::set_length(double value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:mruv.objects.ObjectModel.length)
}

// double width = 6;
inline void ObjectModel::clear_width() {
  width_ = 0;
}
inline double ObjectModel::_internal_width() const {
  return width_;
}
inline double ObjectModel::width() const {
  // @@protoc_insertion_point(field_get:mruv.objects.ObjectModel.width)
  return _internal_width();
}
inline void ObjectModel::_internal_set_width(double value) {
  
  width_ = value;
}
inline void ObjectModel::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:mruv.objects.ObjectModel.width)
}

// double height = 7;
inline void ObjectModel::clear_height() {
  height_ = 0;
}
inline double ObjectModel::_internal_height() const {
  return height_;
}
inline double ObjectModel::height() const {
  // @@protoc_insertion_point(field_get:mruv.objects.ObjectModel.height)
  return _internal_height();
}
inline void ObjectModel::_internal_set_height(double value) {
  
  height_ = value;
}
inline void ObjectModel::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:mruv.objects.ObjectModel.height)
}

// double size = 8;
inline void ObjectModel::clear_size() {
  size_ = 0;
}
inline double ObjectModel::_internal_size() const {
  return size_;
}
inline double ObjectModel::size() const {
  // @@protoc_insertion_point(field_get:mruv.objects.ObjectModel.size)
  return _internal_size();
}
inline void ObjectModel::_internal_set_size(double value) {
  
  size_ = value;
}
inline void ObjectModel::set_size(double value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:mruv.objects.ObjectModel.size)
}

// repeated string tags = 9;
inline int ObjectModel::_internal_tags_size() const {
  return tags_.size();
}
inline int ObjectModel::tags_size() const {
  return _internal_tags_size();
}
inline void ObjectModel::clear_tags() {
  tags_.Clear();
}
inline std::string* ObjectModel::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:mruv.objects.ObjectModel.tags)
  return _internal_add_tags();
}
inline const std::string& ObjectModel::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& ObjectModel::tags(int index) const {
  // @@protoc_insertion_point(field_get:mruv.objects.ObjectModel.tags)
  return _internal_tags(index);
}
inline std::string* ObjectModel::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:mruv.objects.ObjectModel.tags)
  return tags_.Mutable(index);
}
inline void ObjectModel::set_tags(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mruv.objects.ObjectModel.tags)
  tags_.Mutable(index)->assign(value);
}
inline void ObjectModel::set_tags(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mruv.objects.ObjectModel.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
inline void ObjectModel::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mruv.objects.ObjectModel.tags)
}
inline void ObjectModel::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mruv.objects.ObjectModel.tags)
}
inline std::string* ObjectModel::_internal_add_tags() {
  return tags_.Add();
}
inline void ObjectModel::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mruv.objects.ObjectModel.tags)
}
inline void ObjectModel::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mruv.objects.ObjectModel.tags)
}
inline void ObjectModel::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mruv.objects.ObjectModel.tags)
}
inline void ObjectModel::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mruv.objects.ObjectModel.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ObjectModel::tags() const {
  // @@protoc_insertion_point(field_list:mruv.objects.ObjectModel.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ObjectModel::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:mruv.objects.ObjectModel.tags)
  return &tags_;
}

// bool has_collision = 10;
inline void ObjectModel::clear_has_collision() {
  has_collision_ = false;
}
inline bool ObjectModel::_internal_has_collision() const {
  return has_collision_;
}
inline bool ObjectModel::has_collision() const {
  // @@protoc_insertion_point(field_get:mruv.objects.ObjectModel.has_collision)
  return _internal_has_collision();
}
inline void ObjectModel::_internal_set_has_collision(bool value) {
  
  has_collision_ = value;
}
inline void ObjectModel::set_has_collision(bool value) {
  _internal_set_has_collision(value);
  // @@protoc_insertion_point(field_set:mruv.objects.ObjectModel.has_collision)
}

// bool breaks_on_hit = 11;
inline void ObjectModel::clear_breaks_on_hit() {
  breaks_on_hit_ = false;
}
inline bool ObjectModel::_internal_breaks_on_hit() const {
  return breaks_on_hit_;
}
inline bool ObjectModel::breaks_on_hit() const {
  // @@protoc_insertion_point(field_get:mruv.objects.ObjectModel.breaks_on_hit)
  return _internal_breaks_on_hit();
}
inline void ObjectModel::_internal_set_breaks_on_hit(bool value) {
  
  breaks_on_hit_ = value;
}
inline void ObjectModel::set_breaks_on_hit(bool value) {
  _internal_set_breaks_on_hit(value);
  // @@protoc_insertion_point(field_set:mruv.objects.ObjectModel.breaks_on_hit)
}

// bool has_animation = 12;
inline void ObjectModel::clear_has_animation() {
  has_animation_ = false;
}
inline bool ObjectModel::_internal_has_animation() const {
  return has_animation_;
}
inline bool ObjectModel::has_animation() const {
  // @@protoc_insertion_point(field_get:mruv.objects.ObjectModel.has_animation)
  return _internal_has_animation();
}
inline void ObjectModel::_internal_set_has_animation(bool value) {
  
  has_animation_ = value;
}
inline void ObjectModel::set_has_animation(bool value) {
  _internal_set_has_animation(value);
  // @@protoc_insertion_point(field_set:mruv.objects.ObjectModel.has_animation)
}

// bool visible_by_time = 16;
inline void ObjectModel::clear_visible_by_time() {
  visible_by_time_ = false;
}
inline bool ObjectModel::_internal_visible_by_time() const {
  return visible_by_time_;
}
inline bool ObjectModel::visible_by_time() const {
  // @@protoc_insertion_point(field_get:mruv.objects.ObjectModel.visible_by_time)
  return _internal_visible_by_time();
}
inline void ObjectModel::_internal_set_visible_by_time(bool value) {
  
  visible_by_time_ = value;
}
inline void ObjectModel::set_visible_by_time(bool value) {
  _internal_set_visible_by_time(value);
  // @@protoc_insertion_point(field_set:mruv.objects.ObjectModel.visible_by_time)
}

// uint32 visible_from = 17;
inline void ObjectModel::clear_visible_from() {
  visible_from_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjectModel::_internal_visible_from() const {
  return visible_from_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjectModel::visible_from() const {
  // @@protoc_insertion_point(field_get:mruv.objects.ObjectModel.visible_from)
  return _internal_visible_from();
}
inline void ObjectModel::_internal_set_visible_from(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  visible_from_ = value;
}
inline void ObjectModel::set_visible_from(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_visible_from(value);
  // @@protoc_insertion_point(field_set:mruv.objects.ObjectModel.visible_from)
}

// uint32 visible_to = 18;
inline void ObjectModel::clear_visible_to() {
  visible_to_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjectModel::_internal_visible_to() const {
  return visible_to_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjectModel::visible_to() const {
  // @@protoc_insertion_point(field_get:mruv.objects.ObjectModel.visible_to)
  return _internal_visible_to();
}
inline void ObjectModel::_internal_set_visible_to(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  visible_to_ = value;
}
inline void ObjectModel::set_visible_to(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_visible_to(value);
  // @@protoc_insertion_point(field_set:mruv.objects.ObjectModel.visible_to)
}

// -------------------------------------------------------------------

// CreateObjectModelRequest

// .mruv.objects.ObjectModel object_type = 1;
inline bool CreateObjectModelRequest::_internal_has_object_type() const {
  return this != internal_default_instance() && object_type_ != nullptr;
}
inline bool CreateObjectModelRequest::has_object_type() const {
  return _internal_has_object_type();
}
inline void CreateObjectModelRequest::clear_object_type() {
  if (GetArena() == nullptr && object_type_ != nullptr) {
    delete object_type_;
  }
  object_type_ = nullptr;
}
inline const ::mruv::objects::ObjectModel& CreateObjectModelRequest::_internal_object_type() const {
  const ::mruv::objects::ObjectModel* p = object_type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mruv::objects::ObjectModel*>(
      &::mruv::objects::_ObjectModel_default_instance_);
}
inline const ::mruv::objects::ObjectModel& CreateObjectModelRequest::object_type() const {
  // @@protoc_insertion_point(field_get:mruv.objects.CreateObjectModelRequest.object_type)
  return _internal_object_type();
}
inline void CreateObjectModelRequest::unsafe_arena_set_allocated_object_type(
    ::mruv::objects::ObjectModel* object_type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_type_);
  }
  object_type_ = object_type;
  if (object_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mruv.objects.CreateObjectModelRequest.object_type)
}
inline ::mruv::objects::ObjectModel* CreateObjectModelRequest::release_object_type() {
  
  ::mruv::objects::ObjectModel* temp = object_type_;
  object_type_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mruv::objects::ObjectModel* CreateObjectModelRequest::unsafe_arena_release_object_type() {
  // @@protoc_insertion_point(field_release:mruv.objects.CreateObjectModelRequest.object_type)
  
  ::mruv::objects::ObjectModel* temp = object_type_;
  object_type_ = nullptr;
  return temp;
}
inline ::mruv::objects::ObjectModel* CreateObjectModelRequest::_internal_mutable_object_type() {
  
  if (object_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::mruv::objects::ObjectModel>(GetArena());
    object_type_ = p;
  }
  return object_type_;
}
inline ::mruv::objects::ObjectModel* CreateObjectModelRequest::mutable_object_type() {
  // @@protoc_insertion_point(field_mutable:mruv.objects.CreateObjectModelRequest.object_type)
  return _internal_mutable_object_type();
}
inline void CreateObjectModelRequest::set_allocated_object_type(::mruv::objects::ObjectModel* object_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete object_type_;
  }
  if (object_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(object_type);
    if (message_arena != submessage_arena) {
      object_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object_type, submessage_arena);
    }
    
  } else {
    
  }
  object_type_ = object_type;
  // @@protoc_insertion_point(field_set_allocated:mruv.objects.CreateObjectModelRequest.object_type)
}

// -------------------------------------------------------------------

// CreateObjectModelResponse

// uint32 id = 1;
inline void CreateObjectModelResponse::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateObjectModelResponse::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateObjectModelResponse::id() const {
  // @@protoc_insertion_point(field_get:mruv.objects.CreateObjectModelResponse.id)
  return _internal_id();
}
inline void CreateObjectModelResponse::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void CreateObjectModelResponse::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.objects.CreateObjectModelResponse.id)
}

// -------------------------------------------------------------------

// GetObjectModelRequest

// int32 model = 1;
inline void GetObjectModelRequest::clear_model() {
  model_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetObjectModelRequest::_internal_model() const {
  return model_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetObjectModelRequest::model() const {
  // @@protoc_insertion_point(field_get:mruv.objects.GetObjectModelRequest.model)
  return _internal_model();
}
inline void GetObjectModelRequest::_internal_set_model(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  model_ = value;
}
inline void GetObjectModelRequest::set_model(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_model(value);
  // @@protoc_insertion_point(field_set:mruv.objects.GetObjectModelRequest.model)
}

// -------------------------------------------------------------------

// GetObjectModelResponse

// .mruv.objects.ObjectModel object_type = 1;
inline bool GetObjectModelResponse::_internal_has_object_type() const {
  return this != internal_default_instance() && object_type_ != nullptr;
}
inline bool GetObjectModelResponse::has_object_type() const {
  return _internal_has_object_type();
}
inline void GetObjectModelResponse::clear_object_type() {
  if (GetArena() == nullptr && object_type_ != nullptr) {
    delete object_type_;
  }
  object_type_ = nullptr;
}
inline const ::mruv::objects::ObjectModel& GetObjectModelResponse::_internal_object_type() const {
  const ::mruv::objects::ObjectModel* p = object_type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mruv::objects::ObjectModel*>(
      &::mruv::objects::_ObjectModel_default_instance_);
}
inline const ::mruv::objects::ObjectModel& GetObjectModelResponse::object_type() const {
  // @@protoc_insertion_point(field_get:mruv.objects.GetObjectModelResponse.object_type)
  return _internal_object_type();
}
inline void GetObjectModelResponse::unsafe_arena_set_allocated_object_type(
    ::mruv::objects::ObjectModel* object_type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_type_);
  }
  object_type_ = object_type;
  if (object_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mruv.objects.GetObjectModelResponse.object_type)
}
inline ::mruv::objects::ObjectModel* GetObjectModelResponse::release_object_type() {
  
  ::mruv::objects::ObjectModel* temp = object_type_;
  object_type_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mruv::objects::ObjectModel* GetObjectModelResponse::unsafe_arena_release_object_type() {
  // @@protoc_insertion_point(field_release:mruv.objects.GetObjectModelResponse.object_type)
  
  ::mruv::objects::ObjectModel* temp = object_type_;
  object_type_ = nullptr;
  return temp;
}
inline ::mruv::objects::ObjectModel* GetObjectModelResponse::_internal_mutable_object_type() {
  
  if (object_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::mruv::objects::ObjectModel>(GetArena());
    object_type_ = p;
  }
  return object_type_;
}
inline ::mruv::objects::ObjectModel* GetObjectModelResponse::mutable_object_type() {
  // @@protoc_insertion_point(field_mutable:mruv.objects.GetObjectModelResponse.object_type)
  return _internal_mutable_object_type();
}
inline void GetObjectModelResponse::set_allocated_object_type(::mruv::objects::ObjectModel* object_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete object_type_;
  }
  if (object_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(object_type);
    if (message_arena != submessage_arena) {
      object_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object_type, submessage_arena);
    }
    
  } else {
    
  }
  object_type_ = object_type;
  // @@protoc_insertion_point(field_set_allocated:mruv.objects.GetObjectModelResponse.object_type)
}

// -------------------------------------------------------------------

// UpdateObjectModelRequest

// .mruv.objects.ObjectModel object_type = 1;
inline bool UpdateObjectModelRequest::_internal_has_object_type() const {
  return this != internal_default_instance() && object_type_ != nullptr;
}
inline bool UpdateObjectModelRequest::has_object_type() const {
  return _internal_has_object_type();
}
inline void UpdateObjectModelRequest::clear_object_type() {
  if (GetArena() == nullptr && object_type_ != nullptr) {
    delete object_type_;
  }
  object_type_ = nullptr;
}
inline const ::mruv::objects::ObjectModel& UpdateObjectModelRequest::_internal_object_type() const {
  const ::mruv::objects::ObjectModel* p = object_type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mruv::objects::ObjectModel*>(
      &::mruv::objects::_ObjectModel_default_instance_);
}
inline const ::mruv::objects::ObjectModel& UpdateObjectModelRequest::object_type() const {
  // @@protoc_insertion_point(field_get:mruv.objects.UpdateObjectModelRequest.object_type)
  return _internal_object_type();
}
inline void UpdateObjectModelRequest::unsafe_arena_set_allocated_object_type(
    ::mruv::objects::ObjectModel* object_type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_type_);
  }
  object_type_ = object_type;
  if (object_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mruv.objects.UpdateObjectModelRequest.object_type)
}
inline ::mruv::objects::ObjectModel* UpdateObjectModelRequest::release_object_type() {
  
  ::mruv::objects::ObjectModel* temp = object_type_;
  object_type_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mruv::objects::ObjectModel* UpdateObjectModelRequest::unsafe_arena_release_object_type() {
  // @@protoc_insertion_point(field_release:mruv.objects.UpdateObjectModelRequest.object_type)
  
  ::mruv::objects::ObjectModel* temp = object_type_;
  object_type_ = nullptr;
  return temp;
}
inline ::mruv::objects::ObjectModel* UpdateObjectModelRequest::_internal_mutable_object_type() {
  
  if (object_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::mruv::objects::ObjectModel>(GetArena());
    object_type_ = p;
  }
  return object_type_;
}
inline ::mruv::objects::ObjectModel* UpdateObjectModelRequest::mutable_object_type() {
  // @@protoc_insertion_point(field_mutable:mruv.objects.UpdateObjectModelRequest.object_type)
  return _internal_mutable_object_type();
}
inline void UpdateObjectModelRequest::set_allocated_object_type(::mruv::objects::ObjectModel* object_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete object_type_;
  }
  if (object_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(object_type);
    if (message_arena != submessage_arena) {
      object_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object_type, submessage_arena);
    }
    
  } else {
    
  }
  object_type_ = object_type;
  // @@protoc_insertion_point(field_set_allocated:mruv.objects.UpdateObjectModelRequest.object_type)
}

// -------------------------------------------------------------------

// UpdateObjectModelResponse

// -------------------------------------------------------------------

// DeleteObjectModelRequest

// int32 model = 1;
inline void DeleteObjectModelRequest::clear_model() {
  model_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteObjectModelRequest::_internal_model() const {
  return model_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteObjectModelRequest::model() const {
  // @@protoc_insertion_point(field_get:mruv.objects.DeleteObjectModelRequest.model)
  return _internal_model();
}
inline void DeleteObjectModelRequest::_internal_set_model(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  model_ = value;
}
inline void DeleteObjectModelRequest::set_model(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_model(value);
  // @@protoc_insertion_point(field_set:mruv.objects.DeleteObjectModelRequest.model)
}

// -------------------------------------------------------------------

// DeleteObjectModelResponse

// -------------------------------------------------------------------

// FetchAllModelsRequest

// uint32 chunk_size = 1;
inline void FetchAllModelsRequest::clear_chunk_size() {
  chunk_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FetchAllModelsRequest::_internal_chunk_size() const {
  return chunk_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FetchAllModelsRequest::chunk_size() const {
  // @@protoc_insertion_point(field_get:mruv.objects.FetchAllModelsRequest.chunk_size)
  return _internal_chunk_size();
}
inline void FetchAllModelsRequest::_internal_set_chunk_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  chunk_size_ = value;
}
inline void FetchAllModelsRequest::set_chunk_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_chunk_size(value);
  // @@protoc_insertion_point(field_set:mruv.objects.FetchAllModelsRequest.chunk_size)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// FetchAllModelsResponse

// map<int32, .mruv.objects.ObjectModel> models = 1;
inline int FetchAllModelsResponse::_internal_models_size() const {
  return models_.size();
}
inline int FetchAllModelsResponse::models_size() const {
  return _internal_models_size();
}
inline void FetchAllModelsResponse::clear_models() {
  models_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::mruv::objects::ObjectModel >&
FetchAllModelsResponse::_internal_models() const {
  return models_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::mruv::objects::ObjectModel >&
FetchAllModelsResponse::models() const {
  // @@protoc_insertion_point(field_map:mruv.objects.FetchAllModelsResponse.models)
  return _internal_models();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::mruv::objects::ObjectModel >*
FetchAllModelsResponse::_internal_mutable_models() {
  return models_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::mruv::objects::ObjectModel >*
FetchAllModelsResponse::mutable_models() {
  // @@protoc_insertion_point(field_mutable_map:mruv.objects.FetchAllModelsResponse.models)
  return _internal_mutable_models();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace objects
}  // namespace mruv

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_objects_2fmodels_2eproto
