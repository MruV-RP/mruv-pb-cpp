// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: objects/objects.proto

#include "objects/objects.pb.h"
#include "objects/objects.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace mruv {
namespace objects {

static const char* MruVObjectsService_method_names[] = {
  "/mruv.objects.MruVObjectsService/CreateObject",
  "/mruv.objects.MruVObjectsService/GetObject",
  "/mruv.objects.MruVObjectsService/UpdateObject",
  "/mruv.objects.MruVObjectsService/DeleteObject",
  "/mruv.objects.MruVObjectsService/AddObjectMaterial",
  "/mruv.objects.MruVObjectsService/GetObjectMaterials",
  "/mruv.objects.MruVObjectsService/DeleteObjectMaterial",
  "/mruv.objects.MruVObjectsService/AddObjectMaterialText",
  "/mruv.objects.MruVObjectsService/GetObjectMaterialTexts",
  "/mruv.objects.MruVObjectsService/DeleteObjectMaterialText",
  "/mruv.objects.MruVObjectsService/AddRemoveBuilding",
  "/mruv.objects.MruVObjectsService/GetRemovedBuildings",
  "/mruv.objects.MruVObjectsService/DeleteRemoveBuilding",
  "/mruv.objects.MruVObjectsService/FetchAll",
};

std::unique_ptr< MruVObjectsService::Stub> MruVObjectsService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MruVObjectsService::Stub> stub(new MruVObjectsService::Stub(channel));
  return stub;
}

MruVObjectsService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateObject_(MruVObjectsService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetObject_(MruVObjectsService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateObject_(MruVObjectsService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteObject_(MruVObjectsService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddObjectMaterial_(MruVObjectsService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetObjectMaterials_(MruVObjectsService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteObjectMaterial_(MruVObjectsService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddObjectMaterialText_(MruVObjectsService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetObjectMaterialTexts_(MruVObjectsService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteObjectMaterialText_(MruVObjectsService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddRemoveBuilding_(MruVObjectsService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRemovedBuildings_(MruVObjectsService_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteRemoveBuilding_(MruVObjectsService_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FetchAll_(MruVObjectsService_method_names[13], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status MruVObjectsService::Stub::CreateObject(::grpc::ClientContext* context, const ::mruv::objects::CreateObjectRequest& request, ::mruv::objects::CreateObjectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateObject_, context, request, response);
}

void MruVObjectsService::Stub::experimental_async::CreateObject(::grpc::ClientContext* context, const ::mruv::objects::CreateObjectRequest* request, ::mruv::objects::CreateObjectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateObject_, context, request, response, std::move(f));
}

void MruVObjectsService::Stub::experimental_async::CreateObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::CreateObjectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateObject_, context, request, response, std::move(f));
}

void MruVObjectsService::Stub::experimental_async::CreateObject(::grpc::ClientContext* context, const ::mruv::objects::CreateObjectRequest* request, ::mruv::objects::CreateObjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateObject_, context, request, response, reactor);
}

void MruVObjectsService::Stub::experimental_async::CreateObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::CreateObjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateObject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::objects::CreateObjectResponse>* MruVObjectsService::Stub::AsyncCreateObjectRaw(::grpc::ClientContext* context, const ::mruv::objects::CreateObjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::objects::CreateObjectResponse>::Create(channel_.get(), cq, rpcmethod_CreateObject_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::objects::CreateObjectResponse>* MruVObjectsService::Stub::PrepareAsyncCreateObjectRaw(::grpc::ClientContext* context, const ::mruv::objects::CreateObjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::objects::CreateObjectResponse>::Create(channel_.get(), cq, rpcmethod_CreateObject_, context, request, false);
}

::grpc::Status MruVObjectsService::Stub::GetObject(::grpc::ClientContext* context, const ::mruv::objects::GetObjectRequest& request, ::mruv::objects::GetObjectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetObject_, context, request, response);
}

void MruVObjectsService::Stub::experimental_async::GetObject(::grpc::ClientContext* context, const ::mruv::objects::GetObjectRequest* request, ::mruv::objects::GetObjectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetObject_, context, request, response, std::move(f));
}

void MruVObjectsService::Stub::experimental_async::GetObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::GetObjectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetObject_, context, request, response, std::move(f));
}

void MruVObjectsService::Stub::experimental_async::GetObject(::grpc::ClientContext* context, const ::mruv::objects::GetObjectRequest* request, ::mruv::objects::GetObjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetObject_, context, request, response, reactor);
}

void MruVObjectsService::Stub::experimental_async::GetObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::GetObjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetObject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::objects::GetObjectResponse>* MruVObjectsService::Stub::AsyncGetObjectRaw(::grpc::ClientContext* context, const ::mruv::objects::GetObjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::objects::GetObjectResponse>::Create(channel_.get(), cq, rpcmethod_GetObject_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::objects::GetObjectResponse>* MruVObjectsService::Stub::PrepareAsyncGetObjectRaw(::grpc::ClientContext* context, const ::mruv::objects::GetObjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::objects::GetObjectResponse>::Create(channel_.get(), cq, rpcmethod_GetObject_, context, request, false);
}

::grpc::Status MruVObjectsService::Stub::UpdateObject(::grpc::ClientContext* context, const ::mruv::objects::UpdateObjectRequest& request, ::mruv::objects::UpdateObjectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateObject_, context, request, response);
}

void MruVObjectsService::Stub::experimental_async::UpdateObject(::grpc::ClientContext* context, const ::mruv::objects::UpdateObjectRequest* request, ::mruv::objects::UpdateObjectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateObject_, context, request, response, std::move(f));
}

void MruVObjectsService::Stub::experimental_async::UpdateObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::UpdateObjectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateObject_, context, request, response, std::move(f));
}

void MruVObjectsService::Stub::experimental_async::UpdateObject(::grpc::ClientContext* context, const ::mruv::objects::UpdateObjectRequest* request, ::mruv::objects::UpdateObjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateObject_, context, request, response, reactor);
}

void MruVObjectsService::Stub::experimental_async::UpdateObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::UpdateObjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateObject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::objects::UpdateObjectResponse>* MruVObjectsService::Stub::AsyncUpdateObjectRaw(::grpc::ClientContext* context, const ::mruv::objects::UpdateObjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::objects::UpdateObjectResponse>::Create(channel_.get(), cq, rpcmethod_UpdateObject_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::objects::UpdateObjectResponse>* MruVObjectsService::Stub::PrepareAsyncUpdateObjectRaw(::grpc::ClientContext* context, const ::mruv::objects::UpdateObjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::objects::UpdateObjectResponse>::Create(channel_.get(), cq, rpcmethod_UpdateObject_, context, request, false);
}

::grpc::Status MruVObjectsService::Stub::DeleteObject(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectRequest& request, ::mruv::objects::DeleteObjectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteObject_, context, request, response);
}

void MruVObjectsService::Stub::experimental_async::DeleteObject(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectRequest* request, ::mruv::objects::DeleteObjectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteObject_, context, request, response, std::move(f));
}

void MruVObjectsService::Stub::experimental_async::DeleteObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::DeleteObjectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteObject_, context, request, response, std::move(f));
}

void MruVObjectsService::Stub::experimental_async::DeleteObject(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectRequest* request, ::mruv::objects::DeleteObjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteObject_, context, request, response, reactor);
}

void MruVObjectsService::Stub::experimental_async::DeleteObject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::DeleteObjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteObject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::objects::DeleteObjectResponse>* MruVObjectsService::Stub::AsyncDeleteObjectRaw(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::objects::DeleteObjectResponse>::Create(channel_.get(), cq, rpcmethod_DeleteObject_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::objects::DeleteObjectResponse>* MruVObjectsService::Stub::PrepareAsyncDeleteObjectRaw(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::objects::DeleteObjectResponse>::Create(channel_.get(), cq, rpcmethod_DeleteObject_, context, request, false);
}

::grpc::Status MruVObjectsService::Stub::AddObjectMaterial(::grpc::ClientContext* context, const ::mruv::objects::AddObjectMaterialRequest& request, ::mruv::objects::AddObjectMaterialResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddObjectMaterial_, context, request, response);
}

void MruVObjectsService::Stub::experimental_async::AddObjectMaterial(::grpc::ClientContext* context, const ::mruv::objects::AddObjectMaterialRequest* request, ::mruv::objects::AddObjectMaterialResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddObjectMaterial_, context, request, response, std::move(f));
}

void MruVObjectsService::Stub::experimental_async::AddObjectMaterial(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::AddObjectMaterialResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddObjectMaterial_, context, request, response, std::move(f));
}

void MruVObjectsService::Stub::experimental_async::AddObjectMaterial(::grpc::ClientContext* context, const ::mruv::objects::AddObjectMaterialRequest* request, ::mruv::objects::AddObjectMaterialResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddObjectMaterial_, context, request, response, reactor);
}

void MruVObjectsService::Stub::experimental_async::AddObjectMaterial(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::AddObjectMaterialResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddObjectMaterial_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::objects::AddObjectMaterialResponse>* MruVObjectsService::Stub::AsyncAddObjectMaterialRaw(::grpc::ClientContext* context, const ::mruv::objects::AddObjectMaterialRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::objects::AddObjectMaterialResponse>::Create(channel_.get(), cq, rpcmethod_AddObjectMaterial_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::objects::AddObjectMaterialResponse>* MruVObjectsService::Stub::PrepareAsyncAddObjectMaterialRaw(::grpc::ClientContext* context, const ::mruv::objects::AddObjectMaterialRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::objects::AddObjectMaterialResponse>::Create(channel_.get(), cq, rpcmethod_AddObjectMaterial_, context, request, false);
}

::grpc::Status MruVObjectsService::Stub::GetObjectMaterials(::grpc::ClientContext* context, const ::mruv::objects::GetObjectMaterialsRequest& request, ::mruv::objects::GetObjectMaterialsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetObjectMaterials_, context, request, response);
}

void MruVObjectsService::Stub::experimental_async::GetObjectMaterials(::grpc::ClientContext* context, const ::mruv::objects::GetObjectMaterialsRequest* request, ::mruv::objects::GetObjectMaterialsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetObjectMaterials_, context, request, response, std::move(f));
}

void MruVObjectsService::Stub::experimental_async::GetObjectMaterials(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::GetObjectMaterialsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetObjectMaterials_, context, request, response, std::move(f));
}

void MruVObjectsService::Stub::experimental_async::GetObjectMaterials(::grpc::ClientContext* context, const ::mruv::objects::GetObjectMaterialsRequest* request, ::mruv::objects::GetObjectMaterialsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetObjectMaterials_, context, request, response, reactor);
}

void MruVObjectsService::Stub::experimental_async::GetObjectMaterials(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::GetObjectMaterialsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetObjectMaterials_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::objects::GetObjectMaterialsResponse>* MruVObjectsService::Stub::AsyncGetObjectMaterialsRaw(::grpc::ClientContext* context, const ::mruv::objects::GetObjectMaterialsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::objects::GetObjectMaterialsResponse>::Create(channel_.get(), cq, rpcmethod_GetObjectMaterials_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::objects::GetObjectMaterialsResponse>* MruVObjectsService::Stub::PrepareAsyncGetObjectMaterialsRaw(::grpc::ClientContext* context, const ::mruv::objects::GetObjectMaterialsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::objects::GetObjectMaterialsResponse>::Create(channel_.get(), cq, rpcmethod_GetObjectMaterials_, context, request, false);
}

::grpc::Status MruVObjectsService::Stub::DeleteObjectMaterial(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectMaterialRequest& request, ::mruv::objects::DeleteObjectMaterialResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteObjectMaterial_, context, request, response);
}

void MruVObjectsService::Stub::experimental_async::DeleteObjectMaterial(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectMaterialRequest* request, ::mruv::objects::DeleteObjectMaterialResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteObjectMaterial_, context, request, response, std::move(f));
}

void MruVObjectsService::Stub::experimental_async::DeleteObjectMaterial(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::DeleteObjectMaterialResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteObjectMaterial_, context, request, response, std::move(f));
}

void MruVObjectsService::Stub::experimental_async::DeleteObjectMaterial(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectMaterialRequest* request, ::mruv::objects::DeleteObjectMaterialResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteObjectMaterial_, context, request, response, reactor);
}

void MruVObjectsService::Stub::experimental_async::DeleteObjectMaterial(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::DeleteObjectMaterialResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteObjectMaterial_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::objects::DeleteObjectMaterialResponse>* MruVObjectsService::Stub::AsyncDeleteObjectMaterialRaw(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectMaterialRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::objects::DeleteObjectMaterialResponse>::Create(channel_.get(), cq, rpcmethod_DeleteObjectMaterial_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::objects::DeleteObjectMaterialResponse>* MruVObjectsService::Stub::PrepareAsyncDeleteObjectMaterialRaw(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectMaterialRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::objects::DeleteObjectMaterialResponse>::Create(channel_.get(), cq, rpcmethod_DeleteObjectMaterial_, context, request, false);
}

::grpc::Status MruVObjectsService::Stub::AddObjectMaterialText(::grpc::ClientContext* context, const ::mruv::objects::AddObjectMaterialTextRequest& request, ::mruv::objects::AddObjectMaterialTextResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddObjectMaterialText_, context, request, response);
}

void MruVObjectsService::Stub::experimental_async::AddObjectMaterialText(::grpc::ClientContext* context, const ::mruv::objects::AddObjectMaterialTextRequest* request, ::mruv::objects::AddObjectMaterialTextResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddObjectMaterialText_, context, request, response, std::move(f));
}

void MruVObjectsService::Stub::experimental_async::AddObjectMaterialText(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::AddObjectMaterialTextResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddObjectMaterialText_, context, request, response, std::move(f));
}

void MruVObjectsService::Stub::experimental_async::AddObjectMaterialText(::grpc::ClientContext* context, const ::mruv::objects::AddObjectMaterialTextRequest* request, ::mruv::objects::AddObjectMaterialTextResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddObjectMaterialText_, context, request, response, reactor);
}

void MruVObjectsService::Stub::experimental_async::AddObjectMaterialText(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::AddObjectMaterialTextResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddObjectMaterialText_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::objects::AddObjectMaterialTextResponse>* MruVObjectsService::Stub::AsyncAddObjectMaterialTextRaw(::grpc::ClientContext* context, const ::mruv::objects::AddObjectMaterialTextRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::objects::AddObjectMaterialTextResponse>::Create(channel_.get(), cq, rpcmethod_AddObjectMaterialText_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::objects::AddObjectMaterialTextResponse>* MruVObjectsService::Stub::PrepareAsyncAddObjectMaterialTextRaw(::grpc::ClientContext* context, const ::mruv::objects::AddObjectMaterialTextRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::objects::AddObjectMaterialTextResponse>::Create(channel_.get(), cq, rpcmethod_AddObjectMaterialText_, context, request, false);
}

::grpc::Status MruVObjectsService::Stub::GetObjectMaterialTexts(::grpc::ClientContext* context, const ::mruv::objects::GetObjectMaterialTextsRequest& request, ::mruv::objects::GetObjectMaterialTextsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetObjectMaterialTexts_, context, request, response);
}

void MruVObjectsService::Stub::experimental_async::GetObjectMaterialTexts(::grpc::ClientContext* context, const ::mruv::objects::GetObjectMaterialTextsRequest* request, ::mruv::objects::GetObjectMaterialTextsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetObjectMaterialTexts_, context, request, response, std::move(f));
}

void MruVObjectsService::Stub::experimental_async::GetObjectMaterialTexts(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::GetObjectMaterialTextsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetObjectMaterialTexts_, context, request, response, std::move(f));
}

void MruVObjectsService::Stub::experimental_async::GetObjectMaterialTexts(::grpc::ClientContext* context, const ::mruv::objects::GetObjectMaterialTextsRequest* request, ::mruv::objects::GetObjectMaterialTextsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetObjectMaterialTexts_, context, request, response, reactor);
}

void MruVObjectsService::Stub::experimental_async::GetObjectMaterialTexts(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::GetObjectMaterialTextsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetObjectMaterialTexts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::objects::GetObjectMaterialTextsResponse>* MruVObjectsService::Stub::AsyncGetObjectMaterialTextsRaw(::grpc::ClientContext* context, const ::mruv::objects::GetObjectMaterialTextsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::objects::GetObjectMaterialTextsResponse>::Create(channel_.get(), cq, rpcmethod_GetObjectMaterialTexts_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::objects::GetObjectMaterialTextsResponse>* MruVObjectsService::Stub::PrepareAsyncGetObjectMaterialTextsRaw(::grpc::ClientContext* context, const ::mruv::objects::GetObjectMaterialTextsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::objects::GetObjectMaterialTextsResponse>::Create(channel_.get(), cq, rpcmethod_GetObjectMaterialTexts_, context, request, false);
}

::grpc::Status MruVObjectsService::Stub::DeleteObjectMaterialText(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectMaterialTextRequest& request, ::mruv::objects::DeleteObjectMaterialTextResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteObjectMaterialText_, context, request, response);
}

void MruVObjectsService::Stub::experimental_async::DeleteObjectMaterialText(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectMaterialTextRequest* request, ::mruv::objects::DeleteObjectMaterialTextResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteObjectMaterialText_, context, request, response, std::move(f));
}

void MruVObjectsService::Stub::experimental_async::DeleteObjectMaterialText(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::DeleteObjectMaterialTextResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteObjectMaterialText_, context, request, response, std::move(f));
}

void MruVObjectsService::Stub::experimental_async::DeleteObjectMaterialText(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectMaterialTextRequest* request, ::mruv::objects::DeleteObjectMaterialTextResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteObjectMaterialText_, context, request, response, reactor);
}

void MruVObjectsService::Stub::experimental_async::DeleteObjectMaterialText(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::DeleteObjectMaterialTextResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteObjectMaterialText_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::objects::DeleteObjectMaterialTextResponse>* MruVObjectsService::Stub::AsyncDeleteObjectMaterialTextRaw(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectMaterialTextRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::objects::DeleteObjectMaterialTextResponse>::Create(channel_.get(), cq, rpcmethod_DeleteObjectMaterialText_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::objects::DeleteObjectMaterialTextResponse>* MruVObjectsService::Stub::PrepareAsyncDeleteObjectMaterialTextRaw(::grpc::ClientContext* context, const ::mruv::objects::DeleteObjectMaterialTextRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::objects::DeleteObjectMaterialTextResponse>::Create(channel_.get(), cq, rpcmethod_DeleteObjectMaterialText_, context, request, false);
}

::grpc::Status MruVObjectsService::Stub::AddRemoveBuilding(::grpc::ClientContext* context, const ::mruv::objects::AddRemoveBuildingRequest& request, ::mruv::objects::AddRemoveBuildingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddRemoveBuilding_, context, request, response);
}

void MruVObjectsService::Stub::experimental_async::AddRemoveBuilding(::grpc::ClientContext* context, const ::mruv::objects::AddRemoveBuildingRequest* request, ::mruv::objects::AddRemoveBuildingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddRemoveBuilding_, context, request, response, std::move(f));
}

void MruVObjectsService::Stub::experimental_async::AddRemoveBuilding(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::AddRemoveBuildingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddRemoveBuilding_, context, request, response, std::move(f));
}

void MruVObjectsService::Stub::experimental_async::AddRemoveBuilding(::grpc::ClientContext* context, const ::mruv::objects::AddRemoveBuildingRequest* request, ::mruv::objects::AddRemoveBuildingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddRemoveBuilding_, context, request, response, reactor);
}

void MruVObjectsService::Stub::experimental_async::AddRemoveBuilding(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::AddRemoveBuildingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddRemoveBuilding_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::objects::AddRemoveBuildingResponse>* MruVObjectsService::Stub::AsyncAddRemoveBuildingRaw(::grpc::ClientContext* context, const ::mruv::objects::AddRemoveBuildingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::objects::AddRemoveBuildingResponse>::Create(channel_.get(), cq, rpcmethod_AddRemoveBuilding_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::objects::AddRemoveBuildingResponse>* MruVObjectsService::Stub::PrepareAsyncAddRemoveBuildingRaw(::grpc::ClientContext* context, const ::mruv::objects::AddRemoveBuildingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::objects::AddRemoveBuildingResponse>::Create(channel_.get(), cq, rpcmethod_AddRemoveBuilding_, context, request, false);
}

::grpc::Status MruVObjectsService::Stub::GetRemovedBuildings(::grpc::ClientContext* context, const ::mruv::objects::GetRemovedBuildingsRequest& request, ::mruv::objects::GetRemovedBuildingsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetRemovedBuildings_, context, request, response);
}

void MruVObjectsService::Stub::experimental_async::GetRemovedBuildings(::grpc::ClientContext* context, const ::mruv::objects::GetRemovedBuildingsRequest* request, ::mruv::objects::GetRemovedBuildingsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRemovedBuildings_, context, request, response, std::move(f));
}

void MruVObjectsService::Stub::experimental_async::GetRemovedBuildings(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::GetRemovedBuildingsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRemovedBuildings_, context, request, response, std::move(f));
}

void MruVObjectsService::Stub::experimental_async::GetRemovedBuildings(::grpc::ClientContext* context, const ::mruv::objects::GetRemovedBuildingsRequest* request, ::mruv::objects::GetRemovedBuildingsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRemovedBuildings_, context, request, response, reactor);
}

void MruVObjectsService::Stub::experimental_async::GetRemovedBuildings(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::GetRemovedBuildingsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRemovedBuildings_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::objects::GetRemovedBuildingsResponse>* MruVObjectsService::Stub::AsyncGetRemovedBuildingsRaw(::grpc::ClientContext* context, const ::mruv::objects::GetRemovedBuildingsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::objects::GetRemovedBuildingsResponse>::Create(channel_.get(), cq, rpcmethod_GetRemovedBuildings_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::objects::GetRemovedBuildingsResponse>* MruVObjectsService::Stub::PrepareAsyncGetRemovedBuildingsRaw(::grpc::ClientContext* context, const ::mruv::objects::GetRemovedBuildingsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::objects::GetRemovedBuildingsResponse>::Create(channel_.get(), cq, rpcmethod_GetRemovedBuildings_, context, request, false);
}

::grpc::Status MruVObjectsService::Stub::DeleteRemoveBuilding(::grpc::ClientContext* context, const ::mruv::objects::DeleteRemoveBuildingRequest& request, ::mruv::objects::DeleteRemoveBuildingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteRemoveBuilding_, context, request, response);
}

void MruVObjectsService::Stub::experimental_async::DeleteRemoveBuilding(::grpc::ClientContext* context, const ::mruv::objects::DeleteRemoveBuildingRequest* request, ::mruv::objects::DeleteRemoveBuildingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteRemoveBuilding_, context, request, response, std::move(f));
}

void MruVObjectsService::Stub::experimental_async::DeleteRemoveBuilding(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::DeleteRemoveBuildingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteRemoveBuilding_, context, request, response, std::move(f));
}

void MruVObjectsService::Stub::experimental_async::DeleteRemoveBuilding(::grpc::ClientContext* context, const ::mruv::objects::DeleteRemoveBuildingRequest* request, ::mruv::objects::DeleteRemoveBuildingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteRemoveBuilding_, context, request, response, reactor);
}

void MruVObjectsService::Stub::experimental_async::DeleteRemoveBuilding(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::objects::DeleteRemoveBuildingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteRemoveBuilding_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::objects::DeleteRemoveBuildingResponse>* MruVObjectsService::Stub::AsyncDeleteRemoveBuildingRaw(::grpc::ClientContext* context, const ::mruv::objects::DeleteRemoveBuildingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::objects::DeleteRemoveBuildingResponse>::Create(channel_.get(), cq, rpcmethod_DeleteRemoveBuilding_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::objects::DeleteRemoveBuildingResponse>* MruVObjectsService::Stub::PrepareAsyncDeleteRemoveBuildingRaw(::grpc::ClientContext* context, const ::mruv::objects::DeleteRemoveBuildingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::objects::DeleteRemoveBuildingResponse>::Create(channel_.get(), cq, rpcmethod_DeleteRemoveBuilding_, context, request, false);
}

::grpc::ClientReader< ::mruv::objects::FetchAllObjectsResponse>* MruVObjectsService::Stub::FetchAllRaw(::grpc::ClientContext* context, const ::mruv::objects::FetchAllObjectsRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::mruv::objects::FetchAllObjectsResponse>::Create(channel_.get(), rpcmethod_FetchAll_, context, request);
}

void MruVObjectsService::Stub::experimental_async::FetchAll(::grpc::ClientContext* context, ::mruv::objects::FetchAllObjectsRequest* request, ::grpc::experimental::ClientReadReactor< ::mruv::objects::FetchAllObjectsResponse>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::mruv::objects::FetchAllObjectsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_FetchAll_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mruv::objects::FetchAllObjectsResponse>* MruVObjectsService::Stub::AsyncFetchAllRaw(::grpc::ClientContext* context, const ::mruv::objects::FetchAllObjectsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::mruv::objects::FetchAllObjectsResponse>::Create(channel_.get(), cq, rpcmethod_FetchAll_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mruv::objects::FetchAllObjectsResponse>* MruVObjectsService::Stub::PrepareAsyncFetchAllRaw(::grpc::ClientContext* context, const ::mruv::objects::FetchAllObjectsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::mruv::objects::FetchAllObjectsResponse>::Create(channel_.get(), cq, rpcmethod_FetchAll_, context, request, false, nullptr);
}

MruVObjectsService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVObjectsService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVObjectsService::Service, ::mruv::objects::CreateObjectRequest, ::mruv::objects::CreateObjectResponse>(
          [](MruVObjectsService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mruv::objects::CreateObjectRequest* req,
             ::mruv::objects::CreateObjectResponse* resp) {
               return service->CreateObject(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVObjectsService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVObjectsService::Service, ::mruv::objects::GetObjectRequest, ::mruv::objects::GetObjectResponse>(
          [](MruVObjectsService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mruv::objects::GetObjectRequest* req,
             ::mruv::objects::GetObjectResponse* resp) {
               return service->GetObject(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVObjectsService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVObjectsService::Service, ::mruv::objects::UpdateObjectRequest, ::mruv::objects::UpdateObjectResponse>(
          [](MruVObjectsService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mruv::objects::UpdateObjectRequest* req,
             ::mruv::objects::UpdateObjectResponse* resp) {
               return service->UpdateObject(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVObjectsService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVObjectsService::Service, ::mruv::objects::DeleteObjectRequest, ::mruv::objects::DeleteObjectResponse>(
          [](MruVObjectsService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mruv::objects::DeleteObjectRequest* req,
             ::mruv::objects::DeleteObjectResponse* resp) {
               return service->DeleteObject(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVObjectsService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVObjectsService::Service, ::mruv::objects::AddObjectMaterialRequest, ::mruv::objects::AddObjectMaterialResponse>(
          [](MruVObjectsService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mruv::objects::AddObjectMaterialRequest* req,
             ::mruv::objects::AddObjectMaterialResponse* resp) {
               return service->AddObjectMaterial(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVObjectsService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVObjectsService::Service, ::mruv::objects::GetObjectMaterialsRequest, ::mruv::objects::GetObjectMaterialsResponse>(
          [](MruVObjectsService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mruv::objects::GetObjectMaterialsRequest* req,
             ::mruv::objects::GetObjectMaterialsResponse* resp) {
               return service->GetObjectMaterials(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVObjectsService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVObjectsService::Service, ::mruv::objects::DeleteObjectMaterialRequest, ::mruv::objects::DeleteObjectMaterialResponse>(
          [](MruVObjectsService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mruv::objects::DeleteObjectMaterialRequest* req,
             ::mruv::objects::DeleteObjectMaterialResponse* resp) {
               return service->DeleteObjectMaterial(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVObjectsService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVObjectsService::Service, ::mruv::objects::AddObjectMaterialTextRequest, ::mruv::objects::AddObjectMaterialTextResponse>(
          [](MruVObjectsService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mruv::objects::AddObjectMaterialTextRequest* req,
             ::mruv::objects::AddObjectMaterialTextResponse* resp) {
               return service->AddObjectMaterialText(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVObjectsService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVObjectsService::Service, ::mruv::objects::GetObjectMaterialTextsRequest, ::mruv::objects::GetObjectMaterialTextsResponse>(
          [](MruVObjectsService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mruv::objects::GetObjectMaterialTextsRequest* req,
             ::mruv::objects::GetObjectMaterialTextsResponse* resp) {
               return service->GetObjectMaterialTexts(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVObjectsService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVObjectsService::Service, ::mruv::objects::DeleteObjectMaterialTextRequest, ::mruv::objects::DeleteObjectMaterialTextResponse>(
          [](MruVObjectsService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mruv::objects::DeleteObjectMaterialTextRequest* req,
             ::mruv::objects::DeleteObjectMaterialTextResponse* resp) {
               return service->DeleteObjectMaterialText(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVObjectsService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVObjectsService::Service, ::mruv::objects::AddRemoveBuildingRequest, ::mruv::objects::AddRemoveBuildingResponse>(
          [](MruVObjectsService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mruv::objects::AddRemoveBuildingRequest* req,
             ::mruv::objects::AddRemoveBuildingResponse* resp) {
               return service->AddRemoveBuilding(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVObjectsService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVObjectsService::Service, ::mruv::objects::GetRemovedBuildingsRequest, ::mruv::objects::GetRemovedBuildingsResponse>(
          [](MruVObjectsService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mruv::objects::GetRemovedBuildingsRequest* req,
             ::mruv::objects::GetRemovedBuildingsResponse* resp) {
               return service->GetRemovedBuildings(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVObjectsService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVObjectsService::Service, ::mruv::objects::DeleteRemoveBuildingRequest, ::mruv::objects::DeleteRemoveBuildingResponse>(
          [](MruVObjectsService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mruv::objects::DeleteRemoveBuildingRequest* req,
             ::mruv::objects::DeleteRemoveBuildingResponse* resp) {
               return service->DeleteRemoveBuilding(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVObjectsService_method_names[13],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MruVObjectsService::Service, ::mruv::objects::FetchAllObjectsRequest, ::mruv::objects::FetchAllObjectsResponse>(
          [](MruVObjectsService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mruv::objects::FetchAllObjectsRequest* req,
             ::grpc_impl::ServerWriter<::mruv::objects::FetchAllObjectsResponse>* writer) {
               return service->FetchAll(ctx, req, writer);
             }, this)));
}

MruVObjectsService::Service::~Service() {
}

::grpc::Status MruVObjectsService::Service::CreateObject(::grpc::ServerContext* context, const ::mruv::objects::CreateObjectRequest* request, ::mruv::objects::CreateObjectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVObjectsService::Service::GetObject(::grpc::ServerContext* context, const ::mruv::objects::GetObjectRequest* request, ::mruv::objects::GetObjectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVObjectsService::Service::UpdateObject(::grpc::ServerContext* context, const ::mruv::objects::UpdateObjectRequest* request, ::mruv::objects::UpdateObjectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVObjectsService::Service::DeleteObject(::grpc::ServerContext* context, const ::mruv::objects::DeleteObjectRequest* request, ::mruv::objects::DeleteObjectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVObjectsService::Service::AddObjectMaterial(::grpc::ServerContext* context, const ::mruv::objects::AddObjectMaterialRequest* request, ::mruv::objects::AddObjectMaterialResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVObjectsService::Service::GetObjectMaterials(::grpc::ServerContext* context, const ::mruv::objects::GetObjectMaterialsRequest* request, ::mruv::objects::GetObjectMaterialsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVObjectsService::Service::DeleteObjectMaterial(::grpc::ServerContext* context, const ::mruv::objects::DeleteObjectMaterialRequest* request, ::mruv::objects::DeleteObjectMaterialResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVObjectsService::Service::AddObjectMaterialText(::grpc::ServerContext* context, const ::mruv::objects::AddObjectMaterialTextRequest* request, ::mruv::objects::AddObjectMaterialTextResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVObjectsService::Service::GetObjectMaterialTexts(::grpc::ServerContext* context, const ::mruv::objects::GetObjectMaterialTextsRequest* request, ::mruv::objects::GetObjectMaterialTextsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVObjectsService::Service::DeleteObjectMaterialText(::grpc::ServerContext* context, const ::mruv::objects::DeleteObjectMaterialTextRequest* request, ::mruv::objects::DeleteObjectMaterialTextResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVObjectsService::Service::AddRemoveBuilding(::grpc::ServerContext* context, const ::mruv::objects::AddRemoveBuildingRequest* request, ::mruv::objects::AddRemoveBuildingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVObjectsService::Service::GetRemovedBuildings(::grpc::ServerContext* context, const ::mruv::objects::GetRemovedBuildingsRequest* request, ::mruv::objects::GetRemovedBuildingsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVObjectsService::Service::DeleteRemoveBuilding(::grpc::ServerContext* context, const ::mruv::objects::DeleteRemoveBuildingRequest* request, ::mruv::objects::DeleteRemoveBuildingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVObjectsService::Service::FetchAll(::grpc::ServerContext* context, const ::mruv::objects::FetchAllObjectsRequest* request, ::grpc::ServerWriter< ::mruv::objects::FetchAllObjectsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mruv
}  // namespace objects

