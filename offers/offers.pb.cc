// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: offers/offers.proto

#include "offers/offers.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace mruv {
namespace offers {
class CreateOfferRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateOfferRequest> _instance;
} _CreateOfferRequest_default_instance_;
class CreateOfferResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateOfferResponse> _instance;
} _CreateOfferResponse_default_instance_;
class GetOfferRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetOfferRequest> _instance;
} _GetOfferRequest_default_instance_;
class GetOfferResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetOfferResponse> _instance;
} _GetOfferResponse_default_instance_;
class UpdateOfferRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateOfferRequest> _instance;
} _UpdateOfferRequest_default_instance_;
class UpdateOfferResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateOfferResponse> _instance;
} _UpdateOfferResponse_default_instance_;
class DeleteOfferRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteOfferRequest> _instance;
} _DeleteOfferRequest_default_instance_;
class DeleteOfferResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteOfferResponse> _instance;
} _DeleteOfferResponse_default_instance_;
class AcceptOfferRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AcceptOfferRequest> _instance;
} _AcceptOfferRequest_default_instance_;
class AcceptOfferResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AcceptOfferResponse> _instance;
} _AcceptOfferResponse_default_instance_;
}  // namespace offers
}  // namespace mruv
static void InitDefaultsscc_info_AcceptOfferRequest_offers_2foffers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::offers::_AcceptOfferRequest_default_instance_;
    new (ptr) ::mruv::offers::AcceptOfferRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::offers::AcceptOfferRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AcceptOfferRequest_offers_2foffers_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AcceptOfferRequest_offers_2foffers_2eproto}, {}};

static void InitDefaultsscc_info_AcceptOfferResponse_offers_2foffers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::offers::_AcceptOfferResponse_default_instance_;
    new (ptr) ::mruv::offers::AcceptOfferResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::offers::AcceptOfferResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AcceptOfferResponse_offers_2foffers_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AcceptOfferResponse_offers_2foffers_2eproto}, {}};

static void InitDefaultsscc_info_CreateOfferRequest_offers_2foffers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::offers::_CreateOfferRequest_default_instance_;
    new (ptr) ::mruv::offers::CreateOfferRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::offers::CreateOfferRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateOfferRequest_offers_2foffers_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateOfferRequest_offers_2foffers_2eproto}, {}};

static void InitDefaultsscc_info_CreateOfferResponse_offers_2foffers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::offers::_CreateOfferResponse_default_instance_;
    new (ptr) ::mruv::offers::CreateOfferResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::offers::CreateOfferResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateOfferResponse_offers_2foffers_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateOfferResponse_offers_2foffers_2eproto}, {}};

static void InitDefaultsscc_info_DeleteOfferRequest_offers_2foffers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::offers::_DeleteOfferRequest_default_instance_;
    new (ptr) ::mruv::offers::DeleteOfferRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::offers::DeleteOfferRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteOfferRequest_offers_2foffers_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteOfferRequest_offers_2foffers_2eproto}, {}};

static void InitDefaultsscc_info_DeleteOfferResponse_offers_2foffers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::offers::_DeleteOfferResponse_default_instance_;
    new (ptr) ::mruv::offers::DeleteOfferResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::offers::DeleteOfferResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteOfferResponse_offers_2foffers_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteOfferResponse_offers_2foffers_2eproto}, {}};

static void InitDefaultsscc_info_GetOfferRequest_offers_2foffers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::offers::_GetOfferRequest_default_instance_;
    new (ptr) ::mruv::offers::GetOfferRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::offers::GetOfferRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetOfferRequest_offers_2foffers_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetOfferRequest_offers_2foffers_2eproto}, {}};

static void InitDefaultsscc_info_GetOfferResponse_offers_2foffers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::offers::_GetOfferResponse_default_instance_;
    new (ptr) ::mruv::offers::GetOfferResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::offers::GetOfferResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetOfferResponse_offers_2foffers_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetOfferResponse_offers_2foffers_2eproto}, {}};

static void InitDefaultsscc_info_UpdateOfferRequest_offers_2foffers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::offers::_UpdateOfferRequest_default_instance_;
    new (ptr) ::mruv::offers::UpdateOfferRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::offers::UpdateOfferRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateOfferRequest_offers_2foffers_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateOfferRequest_offers_2foffers_2eproto}, {}};

static void InitDefaultsscc_info_UpdateOfferResponse_offers_2foffers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::offers::_UpdateOfferResponse_default_instance_;
    new (ptr) ::mruv::offers::UpdateOfferResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::offers::UpdateOfferResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateOfferResponse_offers_2foffers_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateOfferResponse_offers_2foffers_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_offers_2foffers_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_offers_2foffers_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_offers_2foffers_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_offers_2foffers_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::offers::CreateOfferRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::offers::CreateOfferRequest, name_),
  PROTOBUF_FIELD_OFFSET(::mruv::offers::CreateOfferRequest, description_),
  PROTOBUF_FIELD_OFFSET(::mruv::offers::CreateOfferRequest, offer_),
  PROTOBUF_FIELD_OFFSET(::mruv::offers::CreateOfferRequest, end_date_),
  PROTOBUF_FIELD_OFFSET(::mruv::offers::CreateOfferRequest, price_),
  PROTOBUF_FIELD_OFFSET(::mruv::offers::CreateOfferRequest, offer_type_),
  PROTOBUF_FIELD_OFFSET(::mruv::offers::CreateOfferRequest, offer_entity_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::offers::CreateOfferResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::offers::CreateOfferResponse, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::offers::GetOfferRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::offers::GetOfferRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::offers::GetOfferResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::offers::UpdateOfferRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::offers::UpdateOfferRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::offers::UpdateOfferResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::offers::DeleteOfferRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::offers::DeleteOfferRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::offers::DeleteOfferResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::offers::AcceptOfferRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::offers::AcceptOfferRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::offers::AcceptOfferResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mruv::offers::CreateOfferRequest)},
  { 12, -1, sizeof(::mruv::offers::CreateOfferResponse)},
  { 18, -1, sizeof(::mruv::offers::GetOfferRequest)},
  { 24, -1, sizeof(::mruv::offers::GetOfferResponse)},
  { 29, -1, sizeof(::mruv::offers::UpdateOfferRequest)},
  { 35, -1, sizeof(::mruv::offers::UpdateOfferResponse)},
  { 40, -1, sizeof(::mruv::offers::DeleteOfferRequest)},
  { 46, -1, sizeof(::mruv::offers::DeleteOfferResponse)},
  { 51, -1, sizeof(::mruv::offers::AcceptOfferRequest)},
  { 57, -1, sizeof(::mruv::offers::AcceptOfferResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::offers::_CreateOfferRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::offers::_CreateOfferResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::offers::_GetOfferRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::offers::_GetOfferResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::offers::_UpdateOfferRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::offers::_UpdateOfferResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::offers::_DeleteOfferRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::offers::_DeleteOfferResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::offers::_AcceptOfferRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::offers::_AcceptOfferResponse_default_instance_),
};

const char descriptor_table_protodef_offers_2foffers_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023offers/offers.proto\022\013mruv.offers\032\034goog"
  "le/api/annotations.proto\"\254\001\n\022CreateOffer"
  "Request\022\014\n\004name\030\001 \001(\t\022\023\n\013description\030\002 \001"
  "(\t\022\r\n\005offer\030\003 \001(\t\022\020\n\010end_date\030\004 \001(\003\022\r\n\005p"
  "rice\030\005 \001(\r\022*\n\noffer_type\030\006 \001(\0162\026.mruv.of"
  "fers.OfferType\022\027\n\017offer_entity_id\030\007 \001(\r\""
  "!\n\023CreateOfferResponse\022\n\n\002id\030\001 \001(\r\"\035\n\017Ge"
  "tOfferRequest\022\n\n\002id\030\001 \001(\r\"\022\n\020GetOfferRes"
  "ponse\" \n\022UpdateOfferRequest\022\n\n\002id\030\001 \001(\r\""
  "\025\n\023UpdateOfferResponse\" \n\022DeleteOfferReq"
  "uest\022\n\n\002id\030\001 \001(\r\"\025\n\023DeleteOfferResponse\""
  " \n\022AcceptOfferRequest\022\n\n\002id\030\001 \001(\r\"\025\n\023Acc"
  "eptOfferResponse*\030\n\tOfferType\022\013\n\007UNKNOWN"
  "\020\0002\243\004\n\021MruVOffersService\022d\n\013CreateOffer\022"
  "\037.mruv.offers.CreateOfferRequest\032 .mruv."
  "offers.CreateOfferResponse\"\022\202\323\344\223\002\014\"\n/v1/"
  "offers\022`\n\010GetOffer\022\034.mruv.offers.GetOffe"
  "rRequest\032\035.mruv.offers.GetOfferResponse\""
  "\027\202\323\344\223\002\021\022\017/v1/offers/{id}\022i\n\013UpdateOffer\022"
  "\037.mruv.offers.UpdateOfferRequest\032 .mruv."
  "offers.UpdateOfferResponse\"\027\202\323\344\223\002\0212\017/v1/"
  "offers/{id}\022i\n\013DeleteOffer\022\037.mruv.offers"
  ".DeleteOfferRequest\032 .mruv.offers.Delete"
  "OfferResponse\"\027\202\323\344\223\002\021*\017/v1/offers/{id}\022p"
  "\n\013AcceptOffer\022\037.mruv.offers.AcceptOfferR"
  "equest\032 .mruv.offers.AcceptOfferResponse"
  "\"\036\202\323\344\223\002\030\"\026/v1/offers/{id}/acceptB&Z$gith"
  "ub.com/MruV-RP/mruv-pb-go/offersb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_offers_2foffers_2eproto_deps[1] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_offers_2foffers_2eproto_sccs[10] = {
  &scc_info_AcceptOfferRequest_offers_2foffers_2eproto.base,
  &scc_info_AcceptOfferResponse_offers_2foffers_2eproto.base,
  &scc_info_CreateOfferRequest_offers_2foffers_2eproto.base,
  &scc_info_CreateOfferResponse_offers_2foffers_2eproto.base,
  &scc_info_DeleteOfferRequest_offers_2foffers_2eproto.base,
  &scc_info_DeleteOfferResponse_offers_2foffers_2eproto.base,
  &scc_info_GetOfferRequest_offers_2foffers_2eproto.base,
  &scc_info_GetOfferResponse_offers_2foffers_2eproto.base,
  &scc_info_UpdateOfferRequest_offers_2foffers_2eproto.base,
  &scc_info_UpdateOfferResponse_offers_2foffers_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_offers_2foffers_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_offers_2foffers_2eproto = {
  false, false, descriptor_table_protodef_offers_2foffers_2eproto, "offers/offers.proto", 1120,
  &descriptor_table_offers_2foffers_2eproto_once, descriptor_table_offers_2foffers_2eproto_sccs, descriptor_table_offers_2foffers_2eproto_deps, 10, 1,
  schemas, file_default_instances, TableStruct_offers_2foffers_2eproto::offsets,
  file_level_metadata_offers_2foffers_2eproto, 10, file_level_enum_descriptors_offers_2foffers_2eproto, file_level_service_descriptors_offers_2foffers_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_offers_2foffers_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_offers_2foffers_2eproto)), true);
namespace mruv {
namespace offers {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OfferType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_offers_2foffers_2eproto);
  return file_level_enum_descriptors_offers_2foffers_2eproto[0];
}
bool OfferType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CreateOfferRequest::InitAsDefaultInstance() {
}
class CreateOfferRequest::_Internal {
 public:
};

CreateOfferRequest::CreateOfferRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.offers.CreateOfferRequest)
}
CreateOfferRequest::CreateOfferRequest(const CreateOfferRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  offer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_offer().empty()) {
    offer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_offer(),
      GetArena());
  }
  ::memcpy(&end_date_, &from.end_date_,
    static_cast<size_t>(reinterpret_cast<char*>(&offer_entity_id_) -
    reinterpret_cast<char*>(&end_date_)) + sizeof(offer_entity_id_));
  // @@protoc_insertion_point(copy_constructor:mruv.offers.CreateOfferRequest)
}

void CreateOfferRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateOfferRequest_offers_2foffers_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  offer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&end_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offer_entity_id_) -
      reinterpret_cast<char*>(&end_date_)) + sizeof(offer_entity_id_));
}

CreateOfferRequest::~CreateOfferRequest() {
  // @@protoc_insertion_point(destructor:mruv.offers.CreateOfferRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateOfferRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  offer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateOfferRequest::ArenaDtor(void* object) {
  CreateOfferRequest* _this = reinterpret_cast< CreateOfferRequest* >(object);
  (void)_this;
}
void CreateOfferRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateOfferRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateOfferRequest& CreateOfferRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateOfferRequest_offers_2foffers_2eproto.base);
  return *internal_default_instance();
}


void CreateOfferRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.offers.CreateOfferRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  offer_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&end_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offer_entity_id_) -
      reinterpret_cast<char*>(&end_date_)) + sizeof(offer_entity_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateOfferRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.offers.CreateOfferRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.offers.CreateOfferRequest.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string offer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_offer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.offers.CreateOfferRequest.offer"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 end_date = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          end_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mruv.offers.OfferType offer_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_offer_type(static_cast<::mruv::offers::OfferType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 offer_entity_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          offer_entity_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateOfferRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.offers.CreateOfferRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.offers.CreateOfferRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.offers.CreateOfferRequest.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // string offer = 3;
  if (this->offer().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_offer().data(), static_cast<int>(this->_internal_offer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.offers.CreateOfferRequest.offer");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_offer(), target);
  }

  // int64 end_date = 4;
  if (this->end_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_end_date(), target);
  }

  // uint32 price = 5;
  if (this->price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_price(), target);
  }

  // .mruv.offers.OfferType offer_type = 6;
  if (this->offer_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_offer_type(), target);
  }

  // uint32 offer_entity_id = 7;
  if (this->offer_entity_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_offer_entity_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.offers.CreateOfferRequest)
  return target;
}

size_t CreateOfferRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.offers.CreateOfferRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string offer = 3;
  if (this->offer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_offer());
  }

  // int64 end_date = 4;
  if (this->end_date() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_end_date());
  }

  // uint32 price = 5;
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_price());
  }

  // .mruv.offers.OfferType offer_type = 6;
  if (this->offer_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_offer_type());
  }

  // uint32 offer_entity_id = 7;
  if (this->offer_entity_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_offer_entity_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateOfferRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.offers.CreateOfferRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateOfferRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateOfferRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.offers.CreateOfferRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.offers.CreateOfferRequest)
    MergeFrom(*source);
  }
}

void CreateOfferRequest::MergeFrom(const CreateOfferRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.offers.CreateOfferRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.offer().size() > 0) {
    _internal_set_offer(from._internal_offer());
  }
  if (from.end_date() != 0) {
    _internal_set_end_date(from._internal_end_date());
  }
  if (from.price() != 0) {
    _internal_set_price(from._internal_price());
  }
  if (from.offer_type() != 0) {
    _internal_set_offer_type(from._internal_offer_type());
  }
  if (from.offer_entity_id() != 0) {
    _internal_set_offer_entity_id(from._internal_offer_entity_id());
  }
}

void CreateOfferRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.offers.CreateOfferRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateOfferRequest::CopyFrom(const CreateOfferRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.offers.CreateOfferRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateOfferRequest::IsInitialized() const {
  return true;
}

void CreateOfferRequest::InternalSwap(CreateOfferRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  offer_.Swap(&other->offer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateOfferRequest, offer_entity_id_)
      + sizeof(CreateOfferRequest::offer_entity_id_)
      - PROTOBUF_FIELD_OFFSET(CreateOfferRequest, end_date_)>(
          reinterpret_cast<char*>(&end_date_),
          reinterpret_cast<char*>(&other->end_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateOfferRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateOfferResponse::InitAsDefaultInstance() {
}
class CreateOfferResponse::_Internal {
 public:
};

CreateOfferResponse::CreateOfferResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.offers.CreateOfferResponse)
}
CreateOfferResponse::CreateOfferResponse(const CreateOfferResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.offers.CreateOfferResponse)
}

void CreateOfferResponse::SharedCtor() {
  id_ = 0u;
}

CreateOfferResponse::~CreateOfferResponse() {
  // @@protoc_insertion_point(destructor:mruv.offers.CreateOfferResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateOfferResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CreateOfferResponse::ArenaDtor(void* object) {
  CreateOfferResponse* _this = reinterpret_cast< CreateOfferResponse* >(object);
  (void)_this;
}
void CreateOfferResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateOfferResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateOfferResponse& CreateOfferResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateOfferResponse_offers_2foffers_2eproto.base);
  return *internal_default_instance();
}


void CreateOfferResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.offers.CreateOfferResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateOfferResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateOfferResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.offers.CreateOfferResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.offers.CreateOfferResponse)
  return target;
}

size_t CreateOfferResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.offers.CreateOfferResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateOfferResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.offers.CreateOfferResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateOfferResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateOfferResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.offers.CreateOfferResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.offers.CreateOfferResponse)
    MergeFrom(*source);
  }
}

void CreateOfferResponse::MergeFrom(const CreateOfferResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.offers.CreateOfferResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void CreateOfferResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.offers.CreateOfferResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateOfferResponse::CopyFrom(const CreateOfferResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.offers.CreateOfferResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateOfferResponse::IsInitialized() const {
  return true;
}

void CreateOfferResponse::InternalSwap(CreateOfferResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateOfferResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetOfferRequest::InitAsDefaultInstance() {
}
class GetOfferRequest::_Internal {
 public:
};

GetOfferRequest::GetOfferRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.offers.GetOfferRequest)
}
GetOfferRequest::GetOfferRequest(const GetOfferRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.offers.GetOfferRequest)
}

void GetOfferRequest::SharedCtor() {
  id_ = 0u;
}

GetOfferRequest::~GetOfferRequest() {
  // @@protoc_insertion_point(destructor:mruv.offers.GetOfferRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetOfferRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetOfferRequest::ArenaDtor(void* object) {
  GetOfferRequest* _this = reinterpret_cast< GetOfferRequest* >(object);
  (void)_this;
}
void GetOfferRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetOfferRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetOfferRequest& GetOfferRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetOfferRequest_offers_2foffers_2eproto.base);
  return *internal_default_instance();
}


void GetOfferRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.offers.GetOfferRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOfferRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetOfferRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.offers.GetOfferRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.offers.GetOfferRequest)
  return target;
}

size_t GetOfferRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.offers.GetOfferRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetOfferRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.offers.GetOfferRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetOfferRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetOfferRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.offers.GetOfferRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.offers.GetOfferRequest)
    MergeFrom(*source);
  }
}

void GetOfferRequest::MergeFrom(const GetOfferRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.offers.GetOfferRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetOfferRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.offers.GetOfferRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOfferRequest::CopyFrom(const GetOfferRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.offers.GetOfferRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOfferRequest::IsInitialized() const {
  return true;
}

void GetOfferRequest::InternalSwap(GetOfferRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOfferRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetOfferResponse::InitAsDefaultInstance() {
}
class GetOfferResponse::_Internal {
 public:
};

GetOfferResponse::GetOfferResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.offers.GetOfferResponse)
}
GetOfferResponse::GetOfferResponse(const GetOfferResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.offers.GetOfferResponse)
}

void GetOfferResponse::SharedCtor() {
}

GetOfferResponse::~GetOfferResponse() {
  // @@protoc_insertion_point(destructor:mruv.offers.GetOfferResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetOfferResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetOfferResponse::ArenaDtor(void* object) {
  GetOfferResponse* _this = reinterpret_cast< GetOfferResponse* >(object);
  (void)_this;
}
void GetOfferResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetOfferResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetOfferResponse& GetOfferResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetOfferResponse_offers_2foffers_2eproto.base);
  return *internal_default_instance();
}


void GetOfferResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.offers.GetOfferResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOfferResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetOfferResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.offers.GetOfferResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.offers.GetOfferResponse)
  return target;
}

size_t GetOfferResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.offers.GetOfferResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetOfferResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.offers.GetOfferResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetOfferResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetOfferResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.offers.GetOfferResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.offers.GetOfferResponse)
    MergeFrom(*source);
  }
}

void GetOfferResponse::MergeFrom(const GetOfferResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.offers.GetOfferResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetOfferResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.offers.GetOfferResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOfferResponse::CopyFrom(const GetOfferResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.offers.GetOfferResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOfferResponse::IsInitialized() const {
  return true;
}

void GetOfferResponse::InternalSwap(GetOfferResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOfferResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateOfferRequest::InitAsDefaultInstance() {
}
class UpdateOfferRequest::_Internal {
 public:
};

UpdateOfferRequest::UpdateOfferRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.offers.UpdateOfferRequest)
}
UpdateOfferRequest::UpdateOfferRequest(const UpdateOfferRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.offers.UpdateOfferRequest)
}

void UpdateOfferRequest::SharedCtor() {
  id_ = 0u;
}

UpdateOfferRequest::~UpdateOfferRequest() {
  // @@protoc_insertion_point(destructor:mruv.offers.UpdateOfferRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateOfferRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UpdateOfferRequest::ArenaDtor(void* object) {
  UpdateOfferRequest* _this = reinterpret_cast< UpdateOfferRequest* >(object);
  (void)_this;
}
void UpdateOfferRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateOfferRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateOfferRequest& UpdateOfferRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateOfferRequest_offers_2foffers_2eproto.base);
  return *internal_default_instance();
}


void UpdateOfferRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.offers.UpdateOfferRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateOfferRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateOfferRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.offers.UpdateOfferRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.offers.UpdateOfferRequest)
  return target;
}

size_t UpdateOfferRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.offers.UpdateOfferRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateOfferRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.offers.UpdateOfferRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateOfferRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateOfferRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.offers.UpdateOfferRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.offers.UpdateOfferRequest)
    MergeFrom(*source);
  }
}

void UpdateOfferRequest::MergeFrom(const UpdateOfferRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.offers.UpdateOfferRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void UpdateOfferRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.offers.UpdateOfferRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateOfferRequest::CopyFrom(const UpdateOfferRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.offers.UpdateOfferRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateOfferRequest::IsInitialized() const {
  return true;
}

void UpdateOfferRequest::InternalSwap(UpdateOfferRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateOfferRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateOfferResponse::InitAsDefaultInstance() {
}
class UpdateOfferResponse::_Internal {
 public:
};

UpdateOfferResponse::UpdateOfferResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.offers.UpdateOfferResponse)
}
UpdateOfferResponse::UpdateOfferResponse(const UpdateOfferResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.offers.UpdateOfferResponse)
}

void UpdateOfferResponse::SharedCtor() {
}

UpdateOfferResponse::~UpdateOfferResponse() {
  // @@protoc_insertion_point(destructor:mruv.offers.UpdateOfferResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateOfferResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UpdateOfferResponse::ArenaDtor(void* object) {
  UpdateOfferResponse* _this = reinterpret_cast< UpdateOfferResponse* >(object);
  (void)_this;
}
void UpdateOfferResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateOfferResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateOfferResponse& UpdateOfferResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateOfferResponse_offers_2foffers_2eproto.base);
  return *internal_default_instance();
}


void UpdateOfferResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.offers.UpdateOfferResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateOfferResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateOfferResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.offers.UpdateOfferResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.offers.UpdateOfferResponse)
  return target;
}

size_t UpdateOfferResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.offers.UpdateOfferResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateOfferResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.offers.UpdateOfferResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateOfferResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateOfferResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.offers.UpdateOfferResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.offers.UpdateOfferResponse)
    MergeFrom(*source);
  }
}

void UpdateOfferResponse::MergeFrom(const UpdateOfferResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.offers.UpdateOfferResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UpdateOfferResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.offers.UpdateOfferResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateOfferResponse::CopyFrom(const UpdateOfferResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.offers.UpdateOfferResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateOfferResponse::IsInitialized() const {
  return true;
}

void UpdateOfferResponse::InternalSwap(UpdateOfferResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateOfferResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteOfferRequest::InitAsDefaultInstance() {
}
class DeleteOfferRequest::_Internal {
 public:
};

DeleteOfferRequest::DeleteOfferRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.offers.DeleteOfferRequest)
}
DeleteOfferRequest::DeleteOfferRequest(const DeleteOfferRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.offers.DeleteOfferRequest)
}

void DeleteOfferRequest::SharedCtor() {
  id_ = 0u;
}

DeleteOfferRequest::~DeleteOfferRequest() {
  // @@protoc_insertion_point(destructor:mruv.offers.DeleteOfferRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteOfferRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteOfferRequest::ArenaDtor(void* object) {
  DeleteOfferRequest* _this = reinterpret_cast< DeleteOfferRequest* >(object);
  (void)_this;
}
void DeleteOfferRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteOfferRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteOfferRequest& DeleteOfferRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteOfferRequest_offers_2foffers_2eproto.base);
  return *internal_default_instance();
}


void DeleteOfferRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.offers.DeleteOfferRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteOfferRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteOfferRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.offers.DeleteOfferRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.offers.DeleteOfferRequest)
  return target;
}

size_t DeleteOfferRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.offers.DeleteOfferRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteOfferRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.offers.DeleteOfferRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteOfferRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteOfferRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.offers.DeleteOfferRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.offers.DeleteOfferRequest)
    MergeFrom(*source);
  }
}

void DeleteOfferRequest::MergeFrom(const DeleteOfferRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.offers.DeleteOfferRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void DeleteOfferRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.offers.DeleteOfferRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteOfferRequest::CopyFrom(const DeleteOfferRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.offers.DeleteOfferRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteOfferRequest::IsInitialized() const {
  return true;
}

void DeleteOfferRequest::InternalSwap(DeleteOfferRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteOfferRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteOfferResponse::InitAsDefaultInstance() {
}
class DeleteOfferResponse::_Internal {
 public:
};

DeleteOfferResponse::DeleteOfferResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.offers.DeleteOfferResponse)
}
DeleteOfferResponse::DeleteOfferResponse(const DeleteOfferResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.offers.DeleteOfferResponse)
}

void DeleteOfferResponse::SharedCtor() {
}

DeleteOfferResponse::~DeleteOfferResponse() {
  // @@protoc_insertion_point(destructor:mruv.offers.DeleteOfferResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteOfferResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteOfferResponse::ArenaDtor(void* object) {
  DeleteOfferResponse* _this = reinterpret_cast< DeleteOfferResponse* >(object);
  (void)_this;
}
void DeleteOfferResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteOfferResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteOfferResponse& DeleteOfferResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteOfferResponse_offers_2foffers_2eproto.base);
  return *internal_default_instance();
}


void DeleteOfferResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.offers.DeleteOfferResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteOfferResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteOfferResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.offers.DeleteOfferResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.offers.DeleteOfferResponse)
  return target;
}

size_t DeleteOfferResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.offers.DeleteOfferResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteOfferResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.offers.DeleteOfferResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteOfferResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteOfferResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.offers.DeleteOfferResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.offers.DeleteOfferResponse)
    MergeFrom(*source);
  }
}

void DeleteOfferResponse::MergeFrom(const DeleteOfferResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.offers.DeleteOfferResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteOfferResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.offers.DeleteOfferResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteOfferResponse::CopyFrom(const DeleteOfferResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.offers.DeleteOfferResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteOfferResponse::IsInitialized() const {
  return true;
}

void DeleteOfferResponse::InternalSwap(DeleteOfferResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteOfferResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AcceptOfferRequest::InitAsDefaultInstance() {
}
class AcceptOfferRequest::_Internal {
 public:
};

AcceptOfferRequest::AcceptOfferRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.offers.AcceptOfferRequest)
}
AcceptOfferRequest::AcceptOfferRequest(const AcceptOfferRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.offers.AcceptOfferRequest)
}

void AcceptOfferRequest::SharedCtor() {
  id_ = 0u;
}

AcceptOfferRequest::~AcceptOfferRequest() {
  // @@protoc_insertion_point(destructor:mruv.offers.AcceptOfferRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AcceptOfferRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AcceptOfferRequest::ArenaDtor(void* object) {
  AcceptOfferRequest* _this = reinterpret_cast< AcceptOfferRequest* >(object);
  (void)_this;
}
void AcceptOfferRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AcceptOfferRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AcceptOfferRequest& AcceptOfferRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AcceptOfferRequest_offers_2foffers_2eproto.base);
  return *internal_default_instance();
}


void AcceptOfferRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.offers.AcceptOfferRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AcceptOfferRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AcceptOfferRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.offers.AcceptOfferRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.offers.AcceptOfferRequest)
  return target;
}

size_t AcceptOfferRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.offers.AcceptOfferRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AcceptOfferRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.offers.AcceptOfferRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AcceptOfferRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AcceptOfferRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.offers.AcceptOfferRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.offers.AcceptOfferRequest)
    MergeFrom(*source);
  }
}

void AcceptOfferRequest::MergeFrom(const AcceptOfferRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.offers.AcceptOfferRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void AcceptOfferRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.offers.AcceptOfferRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptOfferRequest::CopyFrom(const AcceptOfferRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.offers.AcceptOfferRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptOfferRequest::IsInitialized() const {
  return true;
}

void AcceptOfferRequest::InternalSwap(AcceptOfferRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AcceptOfferRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AcceptOfferResponse::InitAsDefaultInstance() {
}
class AcceptOfferResponse::_Internal {
 public:
};

AcceptOfferResponse::AcceptOfferResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.offers.AcceptOfferResponse)
}
AcceptOfferResponse::AcceptOfferResponse(const AcceptOfferResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.offers.AcceptOfferResponse)
}

void AcceptOfferResponse::SharedCtor() {
}

AcceptOfferResponse::~AcceptOfferResponse() {
  // @@protoc_insertion_point(destructor:mruv.offers.AcceptOfferResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AcceptOfferResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AcceptOfferResponse::ArenaDtor(void* object) {
  AcceptOfferResponse* _this = reinterpret_cast< AcceptOfferResponse* >(object);
  (void)_this;
}
void AcceptOfferResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AcceptOfferResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AcceptOfferResponse& AcceptOfferResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AcceptOfferResponse_offers_2foffers_2eproto.base);
  return *internal_default_instance();
}


void AcceptOfferResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.offers.AcceptOfferResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AcceptOfferResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AcceptOfferResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.offers.AcceptOfferResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.offers.AcceptOfferResponse)
  return target;
}

size_t AcceptOfferResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.offers.AcceptOfferResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AcceptOfferResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.offers.AcceptOfferResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AcceptOfferResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AcceptOfferResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.offers.AcceptOfferResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.offers.AcceptOfferResponse)
    MergeFrom(*source);
  }
}

void AcceptOfferResponse::MergeFrom(const AcceptOfferResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.offers.AcceptOfferResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AcceptOfferResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.offers.AcceptOfferResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptOfferResponse::CopyFrom(const AcceptOfferResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.offers.AcceptOfferResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptOfferResponse::IsInitialized() const {
  return true;
}

void AcceptOfferResponse::InternalSwap(AcceptOfferResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AcceptOfferResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace offers
}  // namespace mruv
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mruv::offers::CreateOfferRequest* Arena::CreateMaybeMessage< ::mruv::offers::CreateOfferRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::offers::CreateOfferRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::offers::CreateOfferResponse* Arena::CreateMaybeMessage< ::mruv::offers::CreateOfferResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::offers::CreateOfferResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::offers::GetOfferRequest* Arena::CreateMaybeMessage< ::mruv::offers::GetOfferRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::offers::GetOfferRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::offers::GetOfferResponse* Arena::CreateMaybeMessage< ::mruv::offers::GetOfferResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::offers::GetOfferResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::offers::UpdateOfferRequest* Arena::CreateMaybeMessage< ::mruv::offers::UpdateOfferRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::offers::UpdateOfferRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::offers::UpdateOfferResponse* Arena::CreateMaybeMessage< ::mruv::offers::UpdateOfferResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::offers::UpdateOfferResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::offers::DeleteOfferRequest* Arena::CreateMaybeMessage< ::mruv::offers::DeleteOfferRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::offers::DeleteOfferRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::offers::DeleteOfferResponse* Arena::CreateMaybeMessage< ::mruv::offers::DeleteOfferResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::offers::DeleteOfferResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::offers::AcceptOfferRequest* Arena::CreateMaybeMessage< ::mruv::offers::AcceptOfferRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::offers::AcceptOfferRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::offers::AcceptOfferResponse* Arena::CreateMaybeMessage< ::mruv::offers::AcceptOfferResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::offers::AcceptOfferResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
