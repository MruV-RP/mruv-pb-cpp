// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: offers/offers.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_offers_2foffers_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_offers_2foffers_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_offers_2foffers_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_offers_2foffers_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_offers_2foffers_2eproto;
namespace mruv {
namespace offers {
class AcceptOfferRequest;
class AcceptOfferRequestDefaultTypeInternal;
extern AcceptOfferRequestDefaultTypeInternal _AcceptOfferRequest_default_instance_;
class AcceptOfferResponse;
class AcceptOfferResponseDefaultTypeInternal;
extern AcceptOfferResponseDefaultTypeInternal _AcceptOfferResponse_default_instance_;
class CreateOfferRequest;
class CreateOfferRequestDefaultTypeInternal;
extern CreateOfferRequestDefaultTypeInternal _CreateOfferRequest_default_instance_;
class CreateOfferResponse;
class CreateOfferResponseDefaultTypeInternal;
extern CreateOfferResponseDefaultTypeInternal _CreateOfferResponse_default_instance_;
class DeleteOfferRequest;
class DeleteOfferRequestDefaultTypeInternal;
extern DeleteOfferRequestDefaultTypeInternal _DeleteOfferRequest_default_instance_;
class DeleteOfferResponse;
class DeleteOfferResponseDefaultTypeInternal;
extern DeleteOfferResponseDefaultTypeInternal _DeleteOfferResponse_default_instance_;
class GetOfferRequest;
class GetOfferRequestDefaultTypeInternal;
extern GetOfferRequestDefaultTypeInternal _GetOfferRequest_default_instance_;
class GetOfferResponse;
class GetOfferResponseDefaultTypeInternal;
extern GetOfferResponseDefaultTypeInternal _GetOfferResponse_default_instance_;
class UpdateOfferRequest;
class UpdateOfferRequestDefaultTypeInternal;
extern UpdateOfferRequestDefaultTypeInternal _UpdateOfferRequest_default_instance_;
class UpdateOfferResponse;
class UpdateOfferResponseDefaultTypeInternal;
extern UpdateOfferResponseDefaultTypeInternal _UpdateOfferResponse_default_instance_;
}  // namespace offers
}  // namespace mruv
PROTOBUF_NAMESPACE_OPEN
template<> ::mruv::offers::AcceptOfferRequest* Arena::CreateMaybeMessage<::mruv::offers::AcceptOfferRequest>(Arena*);
template<> ::mruv::offers::AcceptOfferResponse* Arena::CreateMaybeMessage<::mruv::offers::AcceptOfferResponse>(Arena*);
template<> ::mruv::offers::CreateOfferRequest* Arena::CreateMaybeMessage<::mruv::offers::CreateOfferRequest>(Arena*);
template<> ::mruv::offers::CreateOfferResponse* Arena::CreateMaybeMessage<::mruv::offers::CreateOfferResponse>(Arena*);
template<> ::mruv::offers::DeleteOfferRequest* Arena::CreateMaybeMessage<::mruv::offers::DeleteOfferRequest>(Arena*);
template<> ::mruv::offers::DeleteOfferResponse* Arena::CreateMaybeMessage<::mruv::offers::DeleteOfferResponse>(Arena*);
template<> ::mruv::offers::GetOfferRequest* Arena::CreateMaybeMessage<::mruv::offers::GetOfferRequest>(Arena*);
template<> ::mruv::offers::GetOfferResponse* Arena::CreateMaybeMessage<::mruv::offers::GetOfferResponse>(Arena*);
template<> ::mruv::offers::UpdateOfferRequest* Arena::CreateMaybeMessage<::mruv::offers::UpdateOfferRequest>(Arena*);
template<> ::mruv::offers::UpdateOfferResponse* Arena::CreateMaybeMessage<::mruv::offers::UpdateOfferResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mruv {
namespace offers {

enum OfferType : int {
  UNKNOWN = 0,
  OfferType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OfferType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OfferType_IsValid(int value);
constexpr OfferType OfferType_MIN = UNKNOWN;
constexpr OfferType OfferType_MAX = UNKNOWN;
constexpr int OfferType_ARRAYSIZE = OfferType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OfferType_descriptor();
template<typename T>
inline const std::string& OfferType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OfferType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OfferType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OfferType_descriptor(), enum_t_value);
}
inline bool OfferType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OfferType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OfferType>(
    OfferType_descriptor(), name, value);
}
// ===================================================================

class CreateOfferRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.offers.CreateOfferRequest) */ {
 public:
  inline CreateOfferRequest() : CreateOfferRequest(nullptr) {}
  virtual ~CreateOfferRequest();

  CreateOfferRequest(const CreateOfferRequest& from);
  CreateOfferRequest(CreateOfferRequest&& from) noexcept
    : CreateOfferRequest() {
    *this = ::std::move(from);
  }

  inline CreateOfferRequest& operator=(const CreateOfferRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateOfferRequest& operator=(CreateOfferRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateOfferRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateOfferRequest* internal_default_instance() {
    return reinterpret_cast<const CreateOfferRequest*>(
               &_CreateOfferRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateOfferRequest& a, CreateOfferRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateOfferRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateOfferRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateOfferRequest* New() const final {
    return CreateMaybeMessage<CreateOfferRequest>(nullptr);
  }

  CreateOfferRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateOfferRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateOfferRequest& from);
  void MergeFrom(const CreateOfferRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateOfferRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.offers.CreateOfferRequest";
  }
  protected:
  explicit CreateOfferRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offers_2foffers_2eproto);
    return ::descriptor_table_offers_2foffers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kOfferFieldNumber = 3,
    kEndDateFieldNumber = 4,
    kPriceFieldNumber = 5,
    kOfferTypeFieldNumber = 6,
    kOfferEntityIdFieldNumber = 7,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string offer = 3;
  void clear_offer();
  const std::string& offer() const;
  void set_offer(const std::string& value);
  void set_offer(std::string&& value);
  void set_offer(const char* value);
  void set_offer(const char* value, size_t size);
  std::string* mutable_offer();
  std::string* release_offer();
  void set_allocated_offer(std::string* offer);
  private:
  const std::string& _internal_offer() const;
  void _internal_set_offer(const std::string& value);
  std::string* _internal_mutable_offer();
  public:

  // int64 end_date = 4;
  void clear_end_date();
  ::PROTOBUF_NAMESPACE_ID::int64 end_date() const;
  void set_end_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_end_date() const;
  void _internal_set_end_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 price = 5;
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::uint32 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .mruv.offers.OfferType offer_type = 6;
  void clear_offer_type();
  ::mruv::offers::OfferType offer_type() const;
  void set_offer_type(::mruv::offers::OfferType value);
  private:
  ::mruv::offers::OfferType _internal_offer_type() const;
  void _internal_set_offer_type(::mruv::offers::OfferType value);
  public:

  // uint32 offer_entity_id = 7;
  void clear_offer_entity_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 offer_entity_id() const;
  void set_offer_entity_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_offer_entity_id() const;
  void _internal_set_offer_entity_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.offers.CreateOfferRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr offer_;
  ::PROTOBUF_NAMESPACE_ID::int64 end_date_;
  ::PROTOBUF_NAMESPACE_ID::uint32 price_;
  int offer_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 offer_entity_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offers_2foffers_2eproto;
};
// -------------------------------------------------------------------

class CreateOfferResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.offers.CreateOfferResponse) */ {
 public:
  inline CreateOfferResponse() : CreateOfferResponse(nullptr) {}
  virtual ~CreateOfferResponse();

  CreateOfferResponse(const CreateOfferResponse& from);
  CreateOfferResponse(CreateOfferResponse&& from) noexcept
    : CreateOfferResponse() {
    *this = ::std::move(from);
  }

  inline CreateOfferResponse& operator=(const CreateOfferResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateOfferResponse& operator=(CreateOfferResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateOfferResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateOfferResponse* internal_default_instance() {
    return reinterpret_cast<const CreateOfferResponse*>(
               &_CreateOfferResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateOfferResponse& a, CreateOfferResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateOfferResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateOfferResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateOfferResponse* New() const final {
    return CreateMaybeMessage<CreateOfferResponse>(nullptr);
  }

  CreateOfferResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateOfferResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateOfferResponse& from);
  void MergeFrom(const CreateOfferResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateOfferResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.offers.CreateOfferResponse";
  }
  protected:
  explicit CreateOfferResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offers_2foffers_2eproto);
    return ::descriptor_table_offers_2foffers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.offers.CreateOfferResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offers_2foffers_2eproto;
};
// -------------------------------------------------------------------

class GetOfferRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.offers.GetOfferRequest) */ {
 public:
  inline GetOfferRequest() : GetOfferRequest(nullptr) {}
  virtual ~GetOfferRequest();

  GetOfferRequest(const GetOfferRequest& from);
  GetOfferRequest(GetOfferRequest&& from) noexcept
    : GetOfferRequest() {
    *this = ::std::move(from);
  }

  inline GetOfferRequest& operator=(const GetOfferRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOfferRequest& operator=(GetOfferRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetOfferRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOfferRequest* internal_default_instance() {
    return reinterpret_cast<const GetOfferRequest*>(
               &_GetOfferRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetOfferRequest& a, GetOfferRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOfferRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOfferRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOfferRequest* New() const final {
    return CreateMaybeMessage<GetOfferRequest>(nullptr);
  }

  GetOfferRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOfferRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetOfferRequest& from);
  void MergeFrom(const GetOfferRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOfferRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.offers.GetOfferRequest";
  }
  protected:
  explicit GetOfferRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offers_2foffers_2eproto);
    return ::descriptor_table_offers_2foffers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.offers.GetOfferRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offers_2foffers_2eproto;
};
// -------------------------------------------------------------------

class GetOfferResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.offers.GetOfferResponse) */ {
 public:
  inline GetOfferResponse() : GetOfferResponse(nullptr) {}
  virtual ~GetOfferResponse();

  GetOfferResponse(const GetOfferResponse& from);
  GetOfferResponse(GetOfferResponse&& from) noexcept
    : GetOfferResponse() {
    *this = ::std::move(from);
  }

  inline GetOfferResponse& operator=(const GetOfferResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOfferResponse& operator=(GetOfferResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetOfferResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOfferResponse* internal_default_instance() {
    return reinterpret_cast<const GetOfferResponse*>(
               &_GetOfferResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetOfferResponse& a, GetOfferResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOfferResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOfferResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOfferResponse* New() const final {
    return CreateMaybeMessage<GetOfferResponse>(nullptr);
  }

  GetOfferResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOfferResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetOfferResponse& from);
  void MergeFrom(const GetOfferResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOfferResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.offers.GetOfferResponse";
  }
  protected:
  explicit GetOfferResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offers_2foffers_2eproto);
    return ::descriptor_table_offers_2foffers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.offers.GetOfferResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offers_2foffers_2eproto;
};
// -------------------------------------------------------------------

class UpdateOfferRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.offers.UpdateOfferRequest) */ {
 public:
  inline UpdateOfferRequest() : UpdateOfferRequest(nullptr) {}
  virtual ~UpdateOfferRequest();

  UpdateOfferRequest(const UpdateOfferRequest& from);
  UpdateOfferRequest(UpdateOfferRequest&& from) noexcept
    : UpdateOfferRequest() {
    *this = ::std::move(from);
  }

  inline UpdateOfferRequest& operator=(const UpdateOfferRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateOfferRequest& operator=(UpdateOfferRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateOfferRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateOfferRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateOfferRequest*>(
               &_UpdateOfferRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UpdateOfferRequest& a, UpdateOfferRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateOfferRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateOfferRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateOfferRequest* New() const final {
    return CreateMaybeMessage<UpdateOfferRequest>(nullptr);
  }

  UpdateOfferRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateOfferRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateOfferRequest& from);
  void MergeFrom(const UpdateOfferRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateOfferRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.offers.UpdateOfferRequest";
  }
  protected:
  explicit UpdateOfferRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offers_2foffers_2eproto);
    return ::descriptor_table_offers_2foffers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.offers.UpdateOfferRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offers_2foffers_2eproto;
};
// -------------------------------------------------------------------

class UpdateOfferResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.offers.UpdateOfferResponse) */ {
 public:
  inline UpdateOfferResponse() : UpdateOfferResponse(nullptr) {}
  virtual ~UpdateOfferResponse();

  UpdateOfferResponse(const UpdateOfferResponse& from);
  UpdateOfferResponse(UpdateOfferResponse&& from) noexcept
    : UpdateOfferResponse() {
    *this = ::std::move(from);
  }

  inline UpdateOfferResponse& operator=(const UpdateOfferResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateOfferResponse& operator=(UpdateOfferResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateOfferResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateOfferResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateOfferResponse*>(
               &_UpdateOfferResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UpdateOfferResponse& a, UpdateOfferResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateOfferResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateOfferResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateOfferResponse* New() const final {
    return CreateMaybeMessage<UpdateOfferResponse>(nullptr);
  }

  UpdateOfferResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateOfferResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateOfferResponse& from);
  void MergeFrom(const UpdateOfferResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateOfferResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.offers.UpdateOfferResponse";
  }
  protected:
  explicit UpdateOfferResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offers_2foffers_2eproto);
    return ::descriptor_table_offers_2foffers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.offers.UpdateOfferResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offers_2foffers_2eproto;
};
// -------------------------------------------------------------------

class DeleteOfferRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.offers.DeleteOfferRequest) */ {
 public:
  inline DeleteOfferRequest() : DeleteOfferRequest(nullptr) {}
  virtual ~DeleteOfferRequest();

  DeleteOfferRequest(const DeleteOfferRequest& from);
  DeleteOfferRequest(DeleteOfferRequest&& from) noexcept
    : DeleteOfferRequest() {
    *this = ::std::move(from);
  }

  inline DeleteOfferRequest& operator=(const DeleteOfferRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteOfferRequest& operator=(DeleteOfferRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteOfferRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteOfferRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteOfferRequest*>(
               &_DeleteOfferRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DeleteOfferRequest& a, DeleteOfferRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteOfferRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteOfferRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteOfferRequest* New() const final {
    return CreateMaybeMessage<DeleteOfferRequest>(nullptr);
  }

  DeleteOfferRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteOfferRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteOfferRequest& from);
  void MergeFrom(const DeleteOfferRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteOfferRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.offers.DeleteOfferRequest";
  }
  protected:
  explicit DeleteOfferRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offers_2foffers_2eproto);
    return ::descriptor_table_offers_2foffers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.offers.DeleteOfferRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offers_2foffers_2eproto;
};
// -------------------------------------------------------------------

class DeleteOfferResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.offers.DeleteOfferResponse) */ {
 public:
  inline DeleteOfferResponse() : DeleteOfferResponse(nullptr) {}
  virtual ~DeleteOfferResponse();

  DeleteOfferResponse(const DeleteOfferResponse& from);
  DeleteOfferResponse(DeleteOfferResponse&& from) noexcept
    : DeleteOfferResponse() {
    *this = ::std::move(from);
  }

  inline DeleteOfferResponse& operator=(const DeleteOfferResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteOfferResponse& operator=(DeleteOfferResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteOfferResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteOfferResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteOfferResponse*>(
               &_DeleteOfferResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeleteOfferResponse& a, DeleteOfferResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteOfferResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteOfferResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteOfferResponse* New() const final {
    return CreateMaybeMessage<DeleteOfferResponse>(nullptr);
  }

  DeleteOfferResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteOfferResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteOfferResponse& from);
  void MergeFrom(const DeleteOfferResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteOfferResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.offers.DeleteOfferResponse";
  }
  protected:
  explicit DeleteOfferResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offers_2foffers_2eproto);
    return ::descriptor_table_offers_2foffers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.offers.DeleteOfferResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offers_2foffers_2eproto;
};
// -------------------------------------------------------------------

class AcceptOfferRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.offers.AcceptOfferRequest) */ {
 public:
  inline AcceptOfferRequest() : AcceptOfferRequest(nullptr) {}
  virtual ~AcceptOfferRequest();

  AcceptOfferRequest(const AcceptOfferRequest& from);
  AcceptOfferRequest(AcceptOfferRequest&& from) noexcept
    : AcceptOfferRequest() {
    *this = ::std::move(from);
  }

  inline AcceptOfferRequest& operator=(const AcceptOfferRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AcceptOfferRequest& operator=(AcceptOfferRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AcceptOfferRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcceptOfferRequest* internal_default_instance() {
    return reinterpret_cast<const AcceptOfferRequest*>(
               &_AcceptOfferRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AcceptOfferRequest& a, AcceptOfferRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AcceptOfferRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AcceptOfferRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AcceptOfferRequest* New() const final {
    return CreateMaybeMessage<AcceptOfferRequest>(nullptr);
  }

  AcceptOfferRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AcceptOfferRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AcceptOfferRequest& from);
  void MergeFrom(const AcceptOfferRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AcceptOfferRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.offers.AcceptOfferRequest";
  }
  protected:
  explicit AcceptOfferRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offers_2foffers_2eproto);
    return ::descriptor_table_offers_2foffers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.offers.AcceptOfferRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offers_2foffers_2eproto;
};
// -------------------------------------------------------------------

class AcceptOfferResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.offers.AcceptOfferResponse) */ {
 public:
  inline AcceptOfferResponse() : AcceptOfferResponse(nullptr) {}
  virtual ~AcceptOfferResponse();

  AcceptOfferResponse(const AcceptOfferResponse& from);
  AcceptOfferResponse(AcceptOfferResponse&& from) noexcept
    : AcceptOfferResponse() {
    *this = ::std::move(from);
  }

  inline AcceptOfferResponse& operator=(const AcceptOfferResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AcceptOfferResponse& operator=(AcceptOfferResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AcceptOfferResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcceptOfferResponse* internal_default_instance() {
    return reinterpret_cast<const AcceptOfferResponse*>(
               &_AcceptOfferResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AcceptOfferResponse& a, AcceptOfferResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AcceptOfferResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AcceptOfferResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AcceptOfferResponse* New() const final {
    return CreateMaybeMessage<AcceptOfferResponse>(nullptr);
  }

  AcceptOfferResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AcceptOfferResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AcceptOfferResponse& from);
  void MergeFrom(const AcceptOfferResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AcceptOfferResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.offers.AcceptOfferResponse";
  }
  protected:
  explicit AcceptOfferResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offers_2foffers_2eproto);
    return ::descriptor_table_offers_2foffers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.offers.AcceptOfferResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offers_2foffers_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateOfferRequest

// string name = 1;
inline void CreateOfferRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateOfferRequest::name() const {
  // @@protoc_insertion_point(field_get:mruv.offers.CreateOfferRequest.name)
  return _internal_name();
}
inline void CreateOfferRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mruv.offers.CreateOfferRequest.name)
}
inline std::string* CreateOfferRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mruv.offers.CreateOfferRequest.name)
  return _internal_mutable_name();
}
inline const std::string& CreateOfferRequest::_internal_name() const {
  return name_.Get();
}
inline void CreateOfferRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateOfferRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.offers.CreateOfferRequest.name)
}
inline void CreateOfferRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.offers.CreateOfferRequest.name)
}
inline void CreateOfferRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.offers.CreateOfferRequest.name)
}
inline std::string* CreateOfferRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateOfferRequest::release_name() {
  // @@protoc_insertion_point(field_release:mruv.offers.CreateOfferRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateOfferRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.offers.CreateOfferRequest.name)
}

// string description = 2;
inline void CreateOfferRequest::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateOfferRequest::description() const {
  // @@protoc_insertion_point(field_get:mruv.offers.CreateOfferRequest.description)
  return _internal_description();
}
inline void CreateOfferRequest::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:mruv.offers.CreateOfferRequest.description)
}
inline std::string* CreateOfferRequest::mutable_description() {
  // @@protoc_insertion_point(field_mutable:mruv.offers.CreateOfferRequest.description)
  return _internal_mutable_description();
}
inline const std::string& CreateOfferRequest::_internal_description() const {
  return description_.Get();
}
inline void CreateOfferRequest::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateOfferRequest::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.offers.CreateOfferRequest.description)
}
inline void CreateOfferRequest::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.offers.CreateOfferRequest.description)
}
inline void CreateOfferRequest::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.offers.CreateOfferRequest.description)
}
inline std::string* CreateOfferRequest::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateOfferRequest::release_description() {
  // @@protoc_insertion_point(field_release:mruv.offers.CreateOfferRequest.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateOfferRequest::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.offers.CreateOfferRequest.description)
}

// string offer = 3;
inline void CreateOfferRequest::clear_offer() {
  offer_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateOfferRequest::offer() const {
  // @@protoc_insertion_point(field_get:mruv.offers.CreateOfferRequest.offer)
  return _internal_offer();
}
inline void CreateOfferRequest::set_offer(const std::string& value) {
  _internal_set_offer(value);
  // @@protoc_insertion_point(field_set:mruv.offers.CreateOfferRequest.offer)
}
inline std::string* CreateOfferRequest::mutable_offer() {
  // @@protoc_insertion_point(field_mutable:mruv.offers.CreateOfferRequest.offer)
  return _internal_mutable_offer();
}
inline const std::string& CreateOfferRequest::_internal_offer() const {
  return offer_.Get();
}
inline void CreateOfferRequest::_internal_set_offer(const std::string& value) {
  
  offer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateOfferRequest::set_offer(std::string&& value) {
  
  offer_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.offers.CreateOfferRequest.offer)
}
inline void CreateOfferRequest::set_offer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  offer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.offers.CreateOfferRequest.offer)
}
inline void CreateOfferRequest::set_offer(const char* value,
    size_t size) {
  
  offer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.offers.CreateOfferRequest.offer)
}
inline std::string* CreateOfferRequest::_internal_mutable_offer() {
  
  return offer_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateOfferRequest::release_offer() {
  // @@protoc_insertion_point(field_release:mruv.offers.CreateOfferRequest.offer)
  return offer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateOfferRequest::set_allocated_offer(std::string* offer) {
  if (offer != nullptr) {
    
  } else {
    
  }
  offer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), offer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.offers.CreateOfferRequest.offer)
}

// int64 end_date = 4;
inline void CreateOfferRequest::clear_end_date() {
  end_date_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateOfferRequest::_internal_end_date() const {
  return end_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateOfferRequest::end_date() const {
  // @@protoc_insertion_point(field_get:mruv.offers.CreateOfferRequest.end_date)
  return _internal_end_date();
}
inline void CreateOfferRequest::_internal_set_end_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  end_date_ = value;
}
inline void CreateOfferRequest::set_end_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_end_date(value);
  // @@protoc_insertion_point(field_set:mruv.offers.CreateOfferRequest.end_date)
}

// uint32 price = 5;
inline void CreateOfferRequest::clear_price() {
  price_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateOfferRequest::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateOfferRequest::price() const {
  // @@protoc_insertion_point(field_get:mruv.offers.CreateOfferRequest.price)
  return _internal_price();
}
inline void CreateOfferRequest::_internal_set_price(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  price_ = value;
}
inline void CreateOfferRequest::set_price(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:mruv.offers.CreateOfferRequest.price)
}

// .mruv.offers.OfferType offer_type = 6;
inline void CreateOfferRequest::clear_offer_type() {
  offer_type_ = 0;
}
inline ::mruv::offers::OfferType CreateOfferRequest::_internal_offer_type() const {
  return static_cast< ::mruv::offers::OfferType >(offer_type_);
}
inline ::mruv::offers::OfferType CreateOfferRequest::offer_type() const {
  // @@protoc_insertion_point(field_get:mruv.offers.CreateOfferRequest.offer_type)
  return _internal_offer_type();
}
inline void CreateOfferRequest::_internal_set_offer_type(::mruv::offers::OfferType value) {
  
  offer_type_ = value;
}
inline void CreateOfferRequest::set_offer_type(::mruv::offers::OfferType value) {
  _internal_set_offer_type(value);
  // @@protoc_insertion_point(field_set:mruv.offers.CreateOfferRequest.offer_type)
}

// uint32 offer_entity_id = 7;
inline void CreateOfferRequest::clear_offer_entity_id() {
  offer_entity_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateOfferRequest::_internal_offer_entity_id() const {
  return offer_entity_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateOfferRequest::offer_entity_id() const {
  // @@protoc_insertion_point(field_get:mruv.offers.CreateOfferRequest.offer_entity_id)
  return _internal_offer_entity_id();
}
inline void CreateOfferRequest::_internal_set_offer_entity_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  offer_entity_id_ = value;
}
inline void CreateOfferRequest::set_offer_entity_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_offer_entity_id(value);
  // @@protoc_insertion_point(field_set:mruv.offers.CreateOfferRequest.offer_entity_id)
}

// -------------------------------------------------------------------

// CreateOfferResponse

// uint32 id = 1;
inline void CreateOfferResponse::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateOfferResponse::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateOfferResponse::id() const {
  // @@protoc_insertion_point(field_get:mruv.offers.CreateOfferResponse.id)
  return _internal_id();
}
inline void CreateOfferResponse::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void CreateOfferResponse::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.offers.CreateOfferResponse.id)
}

// -------------------------------------------------------------------

// GetOfferRequest

// uint32 id = 1;
inline void GetOfferRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOfferRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOfferRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.offers.GetOfferRequest.id)
  return _internal_id();
}
inline void GetOfferRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void GetOfferRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.offers.GetOfferRequest.id)
}

// -------------------------------------------------------------------

// GetOfferResponse

// -------------------------------------------------------------------

// UpdateOfferRequest

// uint32 id = 1;
inline void UpdateOfferRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateOfferRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateOfferRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.offers.UpdateOfferRequest.id)
  return _internal_id();
}
inline void UpdateOfferRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void UpdateOfferRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.offers.UpdateOfferRequest.id)
}

// -------------------------------------------------------------------

// UpdateOfferResponse

// -------------------------------------------------------------------

// DeleteOfferRequest

// uint32 id = 1;
inline void DeleteOfferRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteOfferRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteOfferRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.offers.DeleteOfferRequest.id)
  return _internal_id();
}
inline void DeleteOfferRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void DeleteOfferRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.offers.DeleteOfferRequest.id)
}

// -------------------------------------------------------------------

// DeleteOfferResponse

// -------------------------------------------------------------------

// AcceptOfferRequest

// uint32 id = 1;
inline void AcceptOfferRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AcceptOfferRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AcceptOfferRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.offers.AcceptOfferRequest.id)
  return _internal_id();
}
inline void AcceptOfferRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void AcceptOfferRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.offers.AcceptOfferRequest.id)
}

// -------------------------------------------------------------------

// AcceptOfferResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace offers
}  // namespace mruv

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mruv::offers::OfferType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mruv::offers::OfferType>() {
  return ::mruv::offers::OfferType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_offers_2foffers_2eproto
