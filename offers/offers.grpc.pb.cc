// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: offers/offers.proto

#include "offers/offers.pb.h"
#include "offers/offers.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace mruv {
namespace offers {

static const char* MruVOffersService_method_names[] = {
  "/mruv.offers.MruVOffersService/CreateOffer",
  "/mruv.offers.MruVOffersService/GetOffer",
  "/mruv.offers.MruVOffersService/UpdateOffer",
  "/mruv.offers.MruVOffersService/DeleteOffer",
  "/mruv.offers.MruVOffersService/AcceptOffer",
};

std::unique_ptr< MruVOffersService::Stub> MruVOffersService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MruVOffersService::Stub> stub(new MruVOffersService::Stub(channel));
  return stub;
}

MruVOffersService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateOffer_(MruVOffersService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOffer_(MruVOffersService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateOffer_(MruVOffersService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteOffer_(MruVOffersService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AcceptOffer_(MruVOffersService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MruVOffersService::Stub::CreateOffer(::grpc::ClientContext* context, const ::mruv::offers::CreateOfferRequest& request, ::mruv::offers::CreateOfferResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateOffer_, context, request, response);
}

void MruVOffersService::Stub::experimental_async::CreateOffer(::grpc::ClientContext* context, const ::mruv::offers::CreateOfferRequest* request, ::mruv::offers::CreateOfferResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateOffer_, context, request, response, std::move(f));
}

void MruVOffersService::Stub::experimental_async::CreateOffer(::grpc::ClientContext* context, const ::mruv::offers::CreateOfferRequest* request, ::mruv::offers::CreateOfferResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateOffer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::offers::CreateOfferResponse>* MruVOffersService::Stub::PrepareAsyncCreateOfferRaw(::grpc::ClientContext* context, const ::mruv::offers::CreateOfferRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mruv::offers::CreateOfferResponse>::Create(channel_.get(), cq, rpcmethod_CreateOffer_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::mruv::offers::CreateOfferResponse>* MruVOffersService::Stub::AsyncCreateOfferRaw(::grpc::ClientContext* context, const ::mruv::offers::CreateOfferRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateOfferRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MruVOffersService::Stub::GetOffer(::grpc::ClientContext* context, const ::mruv::offers::GetOfferRequest& request, ::mruv::offers::GetOfferResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetOffer_, context, request, response);
}

void MruVOffersService::Stub::experimental_async::GetOffer(::grpc::ClientContext* context, const ::mruv::offers::GetOfferRequest* request, ::mruv::offers::GetOfferResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetOffer_, context, request, response, std::move(f));
}

void MruVOffersService::Stub::experimental_async::GetOffer(::grpc::ClientContext* context, const ::mruv::offers::GetOfferRequest* request, ::mruv::offers::GetOfferResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetOffer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::offers::GetOfferResponse>* MruVOffersService::Stub::PrepareAsyncGetOfferRaw(::grpc::ClientContext* context, const ::mruv::offers::GetOfferRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mruv::offers::GetOfferResponse>::Create(channel_.get(), cq, rpcmethod_GetOffer_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::mruv::offers::GetOfferResponse>* MruVOffersService::Stub::AsyncGetOfferRaw(::grpc::ClientContext* context, const ::mruv::offers::GetOfferRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetOfferRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MruVOffersService::Stub::UpdateOffer(::grpc::ClientContext* context, const ::mruv::offers::UpdateOfferRequest& request, ::mruv::offers::UpdateOfferResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateOffer_, context, request, response);
}

void MruVOffersService::Stub::experimental_async::UpdateOffer(::grpc::ClientContext* context, const ::mruv::offers::UpdateOfferRequest* request, ::mruv::offers::UpdateOfferResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateOffer_, context, request, response, std::move(f));
}

void MruVOffersService::Stub::experimental_async::UpdateOffer(::grpc::ClientContext* context, const ::mruv::offers::UpdateOfferRequest* request, ::mruv::offers::UpdateOfferResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateOffer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::offers::UpdateOfferResponse>* MruVOffersService::Stub::PrepareAsyncUpdateOfferRaw(::grpc::ClientContext* context, const ::mruv::offers::UpdateOfferRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mruv::offers::UpdateOfferResponse>::Create(channel_.get(), cq, rpcmethod_UpdateOffer_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::mruv::offers::UpdateOfferResponse>* MruVOffersService::Stub::AsyncUpdateOfferRaw(::grpc::ClientContext* context, const ::mruv::offers::UpdateOfferRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateOfferRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MruVOffersService::Stub::DeleteOffer(::grpc::ClientContext* context, const ::mruv::offers::DeleteOfferRequest& request, ::mruv::offers::DeleteOfferResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteOffer_, context, request, response);
}

void MruVOffersService::Stub::experimental_async::DeleteOffer(::grpc::ClientContext* context, const ::mruv::offers::DeleteOfferRequest* request, ::mruv::offers::DeleteOfferResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteOffer_, context, request, response, std::move(f));
}

void MruVOffersService::Stub::experimental_async::DeleteOffer(::grpc::ClientContext* context, const ::mruv::offers::DeleteOfferRequest* request, ::mruv::offers::DeleteOfferResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteOffer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::offers::DeleteOfferResponse>* MruVOffersService::Stub::PrepareAsyncDeleteOfferRaw(::grpc::ClientContext* context, const ::mruv::offers::DeleteOfferRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mruv::offers::DeleteOfferResponse>::Create(channel_.get(), cq, rpcmethod_DeleteOffer_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::mruv::offers::DeleteOfferResponse>* MruVOffersService::Stub::AsyncDeleteOfferRaw(::grpc::ClientContext* context, const ::mruv::offers::DeleteOfferRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteOfferRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MruVOffersService::Stub::AcceptOffer(::grpc::ClientContext* context, const ::mruv::offers::AcceptOfferRequest& request, ::mruv::offers::AcceptOfferResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AcceptOffer_, context, request, response);
}

void MruVOffersService::Stub::experimental_async::AcceptOffer(::grpc::ClientContext* context, const ::mruv::offers::AcceptOfferRequest* request, ::mruv::offers::AcceptOfferResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AcceptOffer_, context, request, response, std::move(f));
}

void MruVOffersService::Stub::experimental_async::AcceptOffer(::grpc::ClientContext* context, const ::mruv::offers::AcceptOfferRequest* request, ::mruv::offers::AcceptOfferResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AcceptOffer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::offers::AcceptOfferResponse>* MruVOffersService::Stub::PrepareAsyncAcceptOfferRaw(::grpc::ClientContext* context, const ::mruv::offers::AcceptOfferRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mruv::offers::AcceptOfferResponse>::Create(channel_.get(), cq, rpcmethod_AcceptOffer_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::mruv::offers::AcceptOfferResponse>* MruVOffersService::Stub::AsyncAcceptOfferRaw(::grpc::ClientContext* context, const ::mruv::offers::AcceptOfferRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAcceptOfferRaw(context, request, cq);
  result->StartCall();
  return result;
}

MruVOffersService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVOffersService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVOffersService::Service, ::mruv::offers::CreateOfferRequest, ::mruv::offers::CreateOfferResponse>(
          [](MruVOffersService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mruv::offers::CreateOfferRequest* req,
             ::mruv::offers::CreateOfferResponse* resp) {
               return service->CreateOffer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVOffersService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVOffersService::Service, ::mruv::offers::GetOfferRequest, ::mruv::offers::GetOfferResponse>(
          [](MruVOffersService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mruv::offers::GetOfferRequest* req,
             ::mruv::offers::GetOfferResponse* resp) {
               return service->GetOffer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVOffersService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVOffersService::Service, ::mruv::offers::UpdateOfferRequest, ::mruv::offers::UpdateOfferResponse>(
          [](MruVOffersService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mruv::offers::UpdateOfferRequest* req,
             ::mruv::offers::UpdateOfferResponse* resp) {
               return service->UpdateOffer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVOffersService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVOffersService::Service, ::mruv::offers::DeleteOfferRequest, ::mruv::offers::DeleteOfferResponse>(
          [](MruVOffersService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mruv::offers::DeleteOfferRequest* req,
             ::mruv::offers::DeleteOfferResponse* resp) {
               return service->DeleteOffer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVOffersService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVOffersService::Service, ::mruv::offers::AcceptOfferRequest, ::mruv::offers::AcceptOfferResponse>(
          [](MruVOffersService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mruv::offers::AcceptOfferRequest* req,
             ::mruv::offers::AcceptOfferResponse* resp) {
               return service->AcceptOffer(ctx, req, resp);
             }, this)));
}

MruVOffersService::Service::~Service() {
}

::grpc::Status MruVOffersService::Service::CreateOffer(::grpc::ServerContext* context, const ::mruv::offers::CreateOfferRequest* request, ::mruv::offers::CreateOfferResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVOffersService::Service::GetOffer(::grpc::ServerContext* context, const ::mruv::offers::GetOfferRequest* request, ::mruv::offers::GetOfferResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVOffersService::Service::UpdateOffer(::grpc::ServerContext* context, const ::mruv::offers::UpdateOfferRequest* request, ::mruv::offers::UpdateOfferResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVOffersService::Service::DeleteOffer(::grpc::ServerContext* context, const ::mruv::offers::DeleteOfferRequest* request, ::mruv::offers::DeleteOfferResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVOffersService::Service::AcceptOffer(::grpc::ServerContext* context, const ::mruv::offers::AcceptOfferRequest* request, ::mruv::offers::AcceptOfferResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mruv
}  // namespace offers

