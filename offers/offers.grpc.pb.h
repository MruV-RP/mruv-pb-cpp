// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: offers/offers.proto
#ifndef GRPC_offers_2foffers_2eproto__INCLUDED
#define GRPC_offers_2foffers_2eproto__INCLUDED

#include "offers/offers.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace mruv {
namespace offers {

// The MruV offers service.
class MruVOffersService final {
 public:
  static constexpr char const* service_full_name() {
    return "mruv.offers.MruVOffersService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Create an offer.
    virtual ::grpc::Status CreateOffer(::grpc::ClientContext* context, const ::mruv::offers::CreateOfferRequest& request, ::mruv::offers::CreateOfferResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::offers::CreateOfferResponse>> AsyncCreateOffer(::grpc::ClientContext* context, const ::mruv::offers::CreateOfferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::offers::CreateOfferResponse>>(AsyncCreateOfferRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::offers::CreateOfferResponse>> PrepareAsyncCreateOffer(::grpc::ClientContext* context, const ::mruv::offers::CreateOfferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::offers::CreateOfferResponse>>(PrepareAsyncCreateOfferRaw(context, request, cq));
    }
    // Get an offer.
    virtual ::grpc::Status GetOffer(::grpc::ClientContext* context, const ::mruv::offers::GetOfferRequest& request, ::mruv::offers::GetOfferResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::offers::GetOfferResponse>> AsyncGetOffer(::grpc::ClientContext* context, const ::mruv::offers::GetOfferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::offers::GetOfferResponse>>(AsyncGetOfferRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::offers::GetOfferResponse>> PrepareAsyncGetOffer(::grpc::ClientContext* context, const ::mruv::offers::GetOfferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::offers::GetOfferResponse>>(PrepareAsyncGetOfferRaw(context, request, cq));
    }
    // Update an offer.
    virtual ::grpc::Status UpdateOffer(::grpc::ClientContext* context, const ::mruv::offers::UpdateOfferRequest& request, ::mruv::offers::UpdateOfferResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::offers::UpdateOfferResponse>> AsyncUpdateOffer(::grpc::ClientContext* context, const ::mruv::offers::UpdateOfferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::offers::UpdateOfferResponse>>(AsyncUpdateOfferRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::offers::UpdateOfferResponse>> PrepareAsyncUpdateOffer(::grpc::ClientContext* context, const ::mruv::offers::UpdateOfferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::offers::UpdateOfferResponse>>(PrepareAsyncUpdateOfferRaw(context, request, cq));
    }
    // Delete an offer.
    virtual ::grpc::Status DeleteOffer(::grpc::ClientContext* context, const ::mruv::offers::DeleteOfferRequest& request, ::mruv::offers::DeleteOfferResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::offers::DeleteOfferResponse>> AsyncDeleteOffer(::grpc::ClientContext* context, const ::mruv::offers::DeleteOfferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::offers::DeleteOfferResponse>>(AsyncDeleteOfferRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::offers::DeleteOfferResponse>> PrepareAsyncDeleteOffer(::grpc::ClientContext* context, const ::mruv::offers::DeleteOfferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::offers::DeleteOfferResponse>>(PrepareAsyncDeleteOfferRaw(context, request, cq));
    }
    // Accept an offer and proceed transaction.
    virtual ::grpc::Status AcceptOffer(::grpc::ClientContext* context, const ::mruv::offers::AcceptOfferRequest& request, ::mruv::offers::AcceptOfferResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::offers::AcceptOfferResponse>> AsyncAcceptOffer(::grpc::ClientContext* context, const ::mruv::offers::AcceptOfferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::offers::AcceptOfferResponse>>(AsyncAcceptOfferRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::offers::AcceptOfferResponse>> PrepareAsyncAcceptOffer(::grpc::ClientContext* context, const ::mruv::offers::AcceptOfferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::offers::AcceptOfferResponse>>(PrepareAsyncAcceptOfferRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Create an offer.
      virtual void CreateOffer(::grpc::ClientContext* context, const ::mruv::offers::CreateOfferRequest* request, ::mruv::offers::CreateOfferResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateOffer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::offers::CreateOfferResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateOffer(::grpc::ClientContext* context, const ::mruv::offers::CreateOfferRequest* request, ::mruv::offers::CreateOfferResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateOffer(::grpc::ClientContext* context, const ::mruv::offers::CreateOfferRequest* request, ::mruv::offers::CreateOfferResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateOffer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::offers::CreateOfferResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateOffer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::offers::CreateOfferResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get an offer.
      virtual void GetOffer(::grpc::ClientContext* context, const ::mruv::offers::GetOfferRequest* request, ::mruv::offers::GetOfferResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetOffer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::offers::GetOfferResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetOffer(::grpc::ClientContext* context, const ::mruv::offers::GetOfferRequest* request, ::mruv::offers::GetOfferResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetOffer(::grpc::ClientContext* context, const ::mruv::offers::GetOfferRequest* request, ::mruv::offers::GetOfferResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetOffer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::offers::GetOfferResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetOffer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::offers::GetOfferResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Update an offer.
      virtual void UpdateOffer(::grpc::ClientContext* context, const ::mruv::offers::UpdateOfferRequest* request, ::mruv::offers::UpdateOfferResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateOffer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::offers::UpdateOfferResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateOffer(::grpc::ClientContext* context, const ::mruv::offers::UpdateOfferRequest* request, ::mruv::offers::UpdateOfferResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateOffer(::grpc::ClientContext* context, const ::mruv::offers::UpdateOfferRequest* request, ::mruv::offers::UpdateOfferResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateOffer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::offers::UpdateOfferResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateOffer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::offers::UpdateOfferResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Delete an offer.
      virtual void DeleteOffer(::grpc::ClientContext* context, const ::mruv::offers::DeleteOfferRequest* request, ::mruv::offers::DeleteOfferResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteOffer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::offers::DeleteOfferResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteOffer(::grpc::ClientContext* context, const ::mruv::offers::DeleteOfferRequest* request, ::mruv::offers::DeleteOfferResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteOffer(::grpc::ClientContext* context, const ::mruv::offers::DeleteOfferRequest* request, ::mruv::offers::DeleteOfferResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteOffer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::offers::DeleteOfferResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteOffer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::offers::DeleteOfferResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Accept an offer and proceed transaction.
      virtual void AcceptOffer(::grpc::ClientContext* context, const ::mruv::offers::AcceptOfferRequest* request, ::mruv::offers::AcceptOfferResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AcceptOffer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::offers::AcceptOfferResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AcceptOffer(::grpc::ClientContext* context, const ::mruv::offers::AcceptOfferRequest* request, ::mruv::offers::AcceptOfferResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AcceptOffer(::grpc::ClientContext* context, const ::mruv::offers::AcceptOfferRequest* request, ::mruv::offers::AcceptOfferResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AcceptOffer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::offers::AcceptOfferResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AcceptOffer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::offers::AcceptOfferResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::offers::CreateOfferResponse>* AsyncCreateOfferRaw(::grpc::ClientContext* context, const ::mruv::offers::CreateOfferRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::offers::CreateOfferResponse>* PrepareAsyncCreateOfferRaw(::grpc::ClientContext* context, const ::mruv::offers::CreateOfferRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::offers::GetOfferResponse>* AsyncGetOfferRaw(::grpc::ClientContext* context, const ::mruv::offers::GetOfferRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::offers::GetOfferResponse>* PrepareAsyncGetOfferRaw(::grpc::ClientContext* context, const ::mruv::offers::GetOfferRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::offers::UpdateOfferResponse>* AsyncUpdateOfferRaw(::grpc::ClientContext* context, const ::mruv::offers::UpdateOfferRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::offers::UpdateOfferResponse>* PrepareAsyncUpdateOfferRaw(::grpc::ClientContext* context, const ::mruv::offers::UpdateOfferRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::offers::DeleteOfferResponse>* AsyncDeleteOfferRaw(::grpc::ClientContext* context, const ::mruv::offers::DeleteOfferRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::offers::DeleteOfferResponse>* PrepareAsyncDeleteOfferRaw(::grpc::ClientContext* context, const ::mruv::offers::DeleteOfferRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::offers::AcceptOfferResponse>* AsyncAcceptOfferRaw(::grpc::ClientContext* context, const ::mruv::offers::AcceptOfferRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::offers::AcceptOfferResponse>* PrepareAsyncAcceptOfferRaw(::grpc::ClientContext* context, const ::mruv::offers::AcceptOfferRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateOffer(::grpc::ClientContext* context, const ::mruv::offers::CreateOfferRequest& request, ::mruv::offers::CreateOfferResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::offers::CreateOfferResponse>> AsyncCreateOffer(::grpc::ClientContext* context, const ::mruv::offers::CreateOfferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::offers::CreateOfferResponse>>(AsyncCreateOfferRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::offers::CreateOfferResponse>> PrepareAsyncCreateOffer(::grpc::ClientContext* context, const ::mruv::offers::CreateOfferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::offers::CreateOfferResponse>>(PrepareAsyncCreateOfferRaw(context, request, cq));
    }
    ::grpc::Status GetOffer(::grpc::ClientContext* context, const ::mruv::offers::GetOfferRequest& request, ::mruv::offers::GetOfferResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::offers::GetOfferResponse>> AsyncGetOffer(::grpc::ClientContext* context, const ::mruv::offers::GetOfferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::offers::GetOfferResponse>>(AsyncGetOfferRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::offers::GetOfferResponse>> PrepareAsyncGetOffer(::grpc::ClientContext* context, const ::mruv::offers::GetOfferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::offers::GetOfferResponse>>(PrepareAsyncGetOfferRaw(context, request, cq));
    }
    ::grpc::Status UpdateOffer(::grpc::ClientContext* context, const ::mruv::offers::UpdateOfferRequest& request, ::mruv::offers::UpdateOfferResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::offers::UpdateOfferResponse>> AsyncUpdateOffer(::grpc::ClientContext* context, const ::mruv::offers::UpdateOfferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::offers::UpdateOfferResponse>>(AsyncUpdateOfferRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::offers::UpdateOfferResponse>> PrepareAsyncUpdateOffer(::grpc::ClientContext* context, const ::mruv::offers::UpdateOfferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::offers::UpdateOfferResponse>>(PrepareAsyncUpdateOfferRaw(context, request, cq));
    }
    ::grpc::Status DeleteOffer(::grpc::ClientContext* context, const ::mruv::offers::DeleteOfferRequest& request, ::mruv::offers::DeleteOfferResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::offers::DeleteOfferResponse>> AsyncDeleteOffer(::grpc::ClientContext* context, const ::mruv::offers::DeleteOfferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::offers::DeleteOfferResponse>>(AsyncDeleteOfferRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::offers::DeleteOfferResponse>> PrepareAsyncDeleteOffer(::grpc::ClientContext* context, const ::mruv::offers::DeleteOfferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::offers::DeleteOfferResponse>>(PrepareAsyncDeleteOfferRaw(context, request, cq));
    }
    ::grpc::Status AcceptOffer(::grpc::ClientContext* context, const ::mruv::offers::AcceptOfferRequest& request, ::mruv::offers::AcceptOfferResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::offers::AcceptOfferResponse>> AsyncAcceptOffer(::grpc::ClientContext* context, const ::mruv::offers::AcceptOfferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::offers::AcceptOfferResponse>>(AsyncAcceptOfferRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::offers::AcceptOfferResponse>> PrepareAsyncAcceptOffer(::grpc::ClientContext* context, const ::mruv::offers::AcceptOfferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::offers::AcceptOfferResponse>>(PrepareAsyncAcceptOfferRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateOffer(::grpc::ClientContext* context, const ::mruv::offers::CreateOfferRequest* request, ::mruv::offers::CreateOfferResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateOffer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::offers::CreateOfferResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateOffer(::grpc::ClientContext* context, const ::mruv::offers::CreateOfferRequest* request, ::mruv::offers::CreateOfferResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateOffer(::grpc::ClientContext* context, const ::mruv::offers::CreateOfferRequest* request, ::mruv::offers::CreateOfferResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateOffer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::offers::CreateOfferResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateOffer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::offers::CreateOfferResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetOffer(::grpc::ClientContext* context, const ::mruv::offers::GetOfferRequest* request, ::mruv::offers::GetOfferResponse* response, std::function<void(::grpc::Status)>) override;
      void GetOffer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::offers::GetOfferResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetOffer(::grpc::ClientContext* context, const ::mruv::offers::GetOfferRequest* request, ::mruv::offers::GetOfferResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetOffer(::grpc::ClientContext* context, const ::mruv::offers::GetOfferRequest* request, ::mruv::offers::GetOfferResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetOffer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::offers::GetOfferResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetOffer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::offers::GetOfferResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateOffer(::grpc::ClientContext* context, const ::mruv::offers::UpdateOfferRequest* request, ::mruv::offers::UpdateOfferResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateOffer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::offers::UpdateOfferResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateOffer(::grpc::ClientContext* context, const ::mruv::offers::UpdateOfferRequest* request, ::mruv::offers::UpdateOfferResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateOffer(::grpc::ClientContext* context, const ::mruv::offers::UpdateOfferRequest* request, ::mruv::offers::UpdateOfferResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateOffer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::offers::UpdateOfferResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateOffer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::offers::UpdateOfferResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteOffer(::grpc::ClientContext* context, const ::mruv::offers::DeleteOfferRequest* request, ::mruv::offers::DeleteOfferResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteOffer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::offers::DeleteOfferResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteOffer(::grpc::ClientContext* context, const ::mruv::offers::DeleteOfferRequest* request, ::mruv::offers::DeleteOfferResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteOffer(::grpc::ClientContext* context, const ::mruv::offers::DeleteOfferRequest* request, ::mruv::offers::DeleteOfferResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteOffer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::offers::DeleteOfferResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteOffer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::offers::DeleteOfferResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void AcceptOffer(::grpc::ClientContext* context, const ::mruv::offers::AcceptOfferRequest* request, ::mruv::offers::AcceptOfferResponse* response, std::function<void(::grpc::Status)>) override;
      void AcceptOffer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::offers::AcceptOfferResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AcceptOffer(::grpc::ClientContext* context, const ::mruv::offers::AcceptOfferRequest* request, ::mruv::offers::AcceptOfferResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AcceptOffer(::grpc::ClientContext* context, const ::mruv::offers::AcceptOfferRequest* request, ::mruv::offers::AcceptOfferResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AcceptOffer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::offers::AcceptOfferResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AcceptOffer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::offers::AcceptOfferResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mruv::offers::CreateOfferResponse>* AsyncCreateOfferRaw(::grpc::ClientContext* context, const ::mruv::offers::CreateOfferRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::offers::CreateOfferResponse>* PrepareAsyncCreateOfferRaw(::grpc::ClientContext* context, const ::mruv::offers::CreateOfferRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::offers::GetOfferResponse>* AsyncGetOfferRaw(::grpc::ClientContext* context, const ::mruv::offers::GetOfferRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::offers::GetOfferResponse>* PrepareAsyncGetOfferRaw(::grpc::ClientContext* context, const ::mruv::offers::GetOfferRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::offers::UpdateOfferResponse>* AsyncUpdateOfferRaw(::grpc::ClientContext* context, const ::mruv::offers::UpdateOfferRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::offers::UpdateOfferResponse>* PrepareAsyncUpdateOfferRaw(::grpc::ClientContext* context, const ::mruv::offers::UpdateOfferRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::offers::DeleteOfferResponse>* AsyncDeleteOfferRaw(::grpc::ClientContext* context, const ::mruv::offers::DeleteOfferRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::offers::DeleteOfferResponse>* PrepareAsyncDeleteOfferRaw(::grpc::ClientContext* context, const ::mruv::offers::DeleteOfferRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::offers::AcceptOfferResponse>* AsyncAcceptOfferRaw(::grpc::ClientContext* context, const ::mruv::offers::AcceptOfferRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::offers::AcceptOfferResponse>* PrepareAsyncAcceptOfferRaw(::grpc::ClientContext* context, const ::mruv::offers::AcceptOfferRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateOffer_;
    const ::grpc::internal::RpcMethod rpcmethod_GetOffer_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateOffer_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteOffer_;
    const ::grpc::internal::RpcMethod rpcmethod_AcceptOffer_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Create an offer.
    virtual ::grpc::Status CreateOffer(::grpc::ServerContext* context, const ::mruv::offers::CreateOfferRequest* request, ::mruv::offers::CreateOfferResponse* response);
    // Get an offer.
    virtual ::grpc::Status GetOffer(::grpc::ServerContext* context, const ::mruv::offers::GetOfferRequest* request, ::mruv::offers::GetOfferResponse* response);
    // Update an offer.
    virtual ::grpc::Status UpdateOffer(::grpc::ServerContext* context, const ::mruv::offers::UpdateOfferRequest* request, ::mruv::offers::UpdateOfferResponse* response);
    // Delete an offer.
    virtual ::grpc::Status DeleteOffer(::grpc::ServerContext* context, const ::mruv::offers::DeleteOfferRequest* request, ::mruv::offers::DeleteOfferResponse* response);
    // Accept an offer and proceed transaction.
    virtual ::grpc::Status AcceptOffer(::grpc::ServerContext* context, const ::mruv::offers::AcceptOfferRequest* request, ::mruv::offers::AcceptOfferResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateOffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateOffer() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateOffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOffer(::grpc::ServerContext* /*context*/, const ::mruv::offers::CreateOfferRequest* /*request*/, ::mruv::offers::CreateOfferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateOffer(::grpc::ServerContext* context, ::mruv::offers::CreateOfferRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::offers::CreateOfferResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetOffer() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetOffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOffer(::grpc::ServerContext* /*context*/, const ::mruv::offers::GetOfferRequest* /*request*/, ::mruv::offers::GetOfferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOffer(::grpc::ServerContext* context, ::mruv::offers::GetOfferRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::offers::GetOfferResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateOffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateOffer() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateOffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOffer(::grpc::ServerContext* /*context*/, const ::mruv::offers::UpdateOfferRequest* /*request*/, ::mruv::offers::UpdateOfferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateOffer(::grpc::ServerContext* context, ::mruv::offers::UpdateOfferRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::offers::UpdateOfferResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteOffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteOffer() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteOffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOffer(::grpc::ServerContext* /*context*/, const ::mruv::offers::DeleteOfferRequest* /*request*/, ::mruv::offers::DeleteOfferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteOffer(::grpc::ServerContext* context, ::mruv::offers::DeleteOfferRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::offers::DeleteOfferResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AcceptOffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AcceptOffer() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_AcceptOffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcceptOffer(::grpc::ServerContext* /*context*/, const ::mruv::offers::AcceptOfferRequest* /*request*/, ::mruv::offers::AcceptOfferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAcceptOffer(::grpc::ServerContext* context, ::mruv::offers::AcceptOfferRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::offers::AcceptOfferResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateOffer<WithAsyncMethod_GetOffer<WithAsyncMethod_UpdateOffer<WithAsyncMethod_DeleteOffer<WithAsyncMethod_AcceptOffer<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateOffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateOffer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::offers::CreateOfferRequest, ::mruv::offers::CreateOfferResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::offers::CreateOfferRequest* request, ::mruv::offers::CreateOfferResponse* response) { return this->CreateOffer(context, request, response); }));}
    void SetMessageAllocatorFor_CreateOffer(
        ::grpc::experimental::MessageAllocator< ::mruv::offers::CreateOfferRequest, ::mruv::offers::CreateOfferResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::offers::CreateOfferRequest, ::mruv::offers::CreateOfferResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateOffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOffer(::grpc::ServerContext* /*context*/, const ::mruv::offers::CreateOfferRequest* /*request*/, ::mruv::offers::CreateOfferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateOffer(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::offers::CreateOfferRequest* /*request*/, ::mruv::offers::CreateOfferResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateOffer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::offers::CreateOfferRequest* /*request*/, ::mruv::offers::CreateOfferResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetOffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetOffer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::offers::GetOfferRequest, ::mruv::offers::GetOfferResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::offers::GetOfferRequest* request, ::mruv::offers::GetOfferResponse* response) { return this->GetOffer(context, request, response); }));}
    void SetMessageAllocatorFor_GetOffer(
        ::grpc::experimental::MessageAllocator< ::mruv::offers::GetOfferRequest, ::mruv::offers::GetOfferResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::offers::GetOfferRequest, ::mruv::offers::GetOfferResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetOffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOffer(::grpc::ServerContext* /*context*/, const ::mruv::offers::GetOfferRequest* /*request*/, ::mruv::offers::GetOfferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetOffer(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::offers::GetOfferRequest* /*request*/, ::mruv::offers::GetOfferResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetOffer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::offers::GetOfferRequest* /*request*/, ::mruv::offers::GetOfferResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateOffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateOffer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::offers::UpdateOfferRequest, ::mruv::offers::UpdateOfferResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::offers::UpdateOfferRequest* request, ::mruv::offers::UpdateOfferResponse* response) { return this->UpdateOffer(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateOffer(
        ::grpc::experimental::MessageAllocator< ::mruv::offers::UpdateOfferRequest, ::mruv::offers::UpdateOfferResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::offers::UpdateOfferRequest, ::mruv::offers::UpdateOfferResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateOffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOffer(::grpc::ServerContext* /*context*/, const ::mruv::offers::UpdateOfferRequest* /*request*/, ::mruv::offers::UpdateOfferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateOffer(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::offers::UpdateOfferRequest* /*request*/, ::mruv::offers::UpdateOfferResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateOffer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::offers::UpdateOfferRequest* /*request*/, ::mruv::offers::UpdateOfferResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteOffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteOffer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::offers::DeleteOfferRequest, ::mruv::offers::DeleteOfferResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::offers::DeleteOfferRequest* request, ::mruv::offers::DeleteOfferResponse* response) { return this->DeleteOffer(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteOffer(
        ::grpc::experimental::MessageAllocator< ::mruv::offers::DeleteOfferRequest, ::mruv::offers::DeleteOfferResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::offers::DeleteOfferRequest, ::mruv::offers::DeleteOfferResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteOffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOffer(::grpc::ServerContext* /*context*/, const ::mruv::offers::DeleteOfferRequest* /*request*/, ::mruv::offers::DeleteOfferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteOffer(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::offers::DeleteOfferRequest* /*request*/, ::mruv::offers::DeleteOfferResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteOffer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::offers::DeleteOfferRequest* /*request*/, ::mruv::offers::DeleteOfferResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AcceptOffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AcceptOffer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::offers::AcceptOfferRequest, ::mruv::offers::AcceptOfferResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::offers::AcceptOfferRequest* request, ::mruv::offers::AcceptOfferResponse* response) { return this->AcceptOffer(context, request, response); }));}
    void SetMessageAllocatorFor_AcceptOffer(
        ::grpc::experimental::MessageAllocator< ::mruv::offers::AcceptOfferRequest, ::mruv::offers::AcceptOfferResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::offers::AcceptOfferRequest, ::mruv::offers::AcceptOfferResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AcceptOffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcceptOffer(::grpc::ServerContext* /*context*/, const ::mruv::offers::AcceptOfferRequest* /*request*/, ::mruv::offers::AcceptOfferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AcceptOffer(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::offers::AcceptOfferRequest* /*request*/, ::mruv::offers::AcceptOfferResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AcceptOffer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::offers::AcceptOfferRequest* /*request*/, ::mruv::offers::AcceptOfferResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_CreateOffer<ExperimentalWithCallbackMethod_GetOffer<ExperimentalWithCallbackMethod_UpdateOffer<ExperimentalWithCallbackMethod_DeleteOffer<ExperimentalWithCallbackMethod_AcceptOffer<Service > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_CreateOffer<ExperimentalWithCallbackMethod_GetOffer<ExperimentalWithCallbackMethod_UpdateOffer<ExperimentalWithCallbackMethod_DeleteOffer<ExperimentalWithCallbackMethod_AcceptOffer<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateOffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateOffer() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateOffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOffer(::grpc::ServerContext* /*context*/, const ::mruv::offers::CreateOfferRequest* /*request*/, ::mruv::offers::CreateOfferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetOffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetOffer() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetOffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOffer(::grpc::ServerContext* /*context*/, const ::mruv::offers::GetOfferRequest* /*request*/, ::mruv::offers::GetOfferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateOffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateOffer() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateOffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOffer(::grpc::ServerContext* /*context*/, const ::mruv::offers::UpdateOfferRequest* /*request*/, ::mruv::offers::UpdateOfferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteOffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteOffer() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteOffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOffer(::grpc::ServerContext* /*context*/, const ::mruv::offers::DeleteOfferRequest* /*request*/, ::mruv::offers::DeleteOfferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AcceptOffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AcceptOffer() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_AcceptOffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcceptOffer(::grpc::ServerContext* /*context*/, const ::mruv::offers::AcceptOfferRequest* /*request*/, ::mruv::offers::AcceptOfferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateOffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateOffer() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateOffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOffer(::grpc::ServerContext* /*context*/, const ::mruv::offers::CreateOfferRequest* /*request*/, ::mruv::offers::CreateOfferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateOffer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetOffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetOffer() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetOffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOffer(::grpc::ServerContext* /*context*/, const ::mruv::offers::GetOfferRequest* /*request*/, ::mruv::offers::GetOfferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOffer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateOffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateOffer() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateOffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOffer(::grpc::ServerContext* /*context*/, const ::mruv::offers::UpdateOfferRequest* /*request*/, ::mruv::offers::UpdateOfferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateOffer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteOffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteOffer() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteOffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOffer(::grpc::ServerContext* /*context*/, const ::mruv::offers::DeleteOfferRequest* /*request*/, ::mruv::offers::DeleteOfferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteOffer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AcceptOffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AcceptOffer() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_AcceptOffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcceptOffer(::grpc::ServerContext* /*context*/, const ::mruv::offers::AcceptOfferRequest* /*request*/, ::mruv::offers::AcceptOfferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAcceptOffer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateOffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateOffer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateOffer(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateOffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOffer(::grpc::ServerContext* /*context*/, const ::mruv::offers::CreateOfferRequest* /*request*/, ::mruv::offers::CreateOfferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateOffer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateOffer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetOffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetOffer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetOffer(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetOffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOffer(::grpc::ServerContext* /*context*/, const ::mruv::offers::GetOfferRequest* /*request*/, ::mruv::offers::GetOfferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetOffer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetOffer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateOffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateOffer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateOffer(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateOffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOffer(::grpc::ServerContext* /*context*/, const ::mruv::offers::UpdateOfferRequest* /*request*/, ::mruv::offers::UpdateOfferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateOffer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateOffer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteOffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteOffer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteOffer(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteOffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOffer(::grpc::ServerContext* /*context*/, const ::mruv::offers::DeleteOfferRequest* /*request*/, ::mruv::offers::DeleteOfferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteOffer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteOffer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AcceptOffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AcceptOffer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AcceptOffer(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AcceptOffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcceptOffer(::grpc::ServerContext* /*context*/, const ::mruv::offers::AcceptOfferRequest* /*request*/, ::mruv::offers::AcceptOfferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AcceptOffer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AcceptOffer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateOffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateOffer() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::mruv::offers::CreateOfferRequest, ::mruv::offers::CreateOfferResponse>(std::bind(&WithStreamedUnaryMethod_CreateOffer<BaseClass>::StreamedCreateOffer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateOffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateOffer(::grpc::ServerContext* /*context*/, const ::mruv::offers::CreateOfferRequest* /*request*/, ::mruv::offers::CreateOfferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateOffer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::offers::CreateOfferRequest,::mruv::offers::CreateOfferResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetOffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetOffer() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::mruv::offers::GetOfferRequest, ::mruv::offers::GetOfferResponse>(std::bind(&WithStreamedUnaryMethod_GetOffer<BaseClass>::StreamedGetOffer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetOffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOffer(::grpc::ServerContext* /*context*/, const ::mruv::offers::GetOfferRequest* /*request*/, ::mruv::offers::GetOfferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetOffer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::offers::GetOfferRequest,::mruv::offers::GetOfferResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateOffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateOffer() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::mruv::offers::UpdateOfferRequest, ::mruv::offers::UpdateOfferResponse>(std::bind(&WithStreamedUnaryMethod_UpdateOffer<BaseClass>::StreamedUpdateOffer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateOffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateOffer(::grpc::ServerContext* /*context*/, const ::mruv::offers::UpdateOfferRequest* /*request*/, ::mruv::offers::UpdateOfferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateOffer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::offers::UpdateOfferRequest,::mruv::offers::UpdateOfferResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteOffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteOffer() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::mruv::offers::DeleteOfferRequest, ::mruv::offers::DeleteOfferResponse>(std::bind(&WithStreamedUnaryMethod_DeleteOffer<BaseClass>::StreamedDeleteOffer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteOffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteOffer(::grpc::ServerContext* /*context*/, const ::mruv::offers::DeleteOfferRequest* /*request*/, ::mruv::offers::DeleteOfferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteOffer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::offers::DeleteOfferRequest,::mruv::offers::DeleteOfferResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AcceptOffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AcceptOffer() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::mruv::offers::AcceptOfferRequest, ::mruv::offers::AcceptOfferResponse>(std::bind(&WithStreamedUnaryMethod_AcceptOffer<BaseClass>::StreamedAcceptOffer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AcceptOffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AcceptOffer(::grpc::ServerContext* /*context*/, const ::mruv::offers::AcceptOfferRequest* /*request*/, ::mruv::offers::AcceptOfferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAcceptOffer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::offers::AcceptOfferRequest,::mruv::offers::AcceptOfferResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateOffer<WithStreamedUnaryMethod_GetOffer<WithStreamedUnaryMethod_UpdateOffer<WithStreamedUnaryMethod_DeleteOffer<WithStreamedUnaryMethod_AcceptOffer<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateOffer<WithStreamedUnaryMethod_GetOffer<WithStreamedUnaryMethod_UpdateOffer<WithStreamedUnaryMethod_DeleteOffer<WithStreamedUnaryMethod_AcceptOffer<Service > > > > > StreamedService;
};

}  // namespace offers
}  // namespace mruv


#endif  // GRPC_offers_2foffers_2eproto__INCLUDED
