// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: jobs/jobs.proto
#ifndef GRPC_jobs_2fjobs_2eproto__INCLUDED
#define GRPC_jobs_2fjobs_2eproto__INCLUDED

#include "jobs/jobs.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace mruv {
namespace jobs {

// The MruV jobs service provides procedures for managing jobs.
class MruVJobsService final {
 public:
  static constexpr char const* service_full_name() {
    return "mruv.jobs.MruVJobsService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Create a job.
    virtual ::grpc::Status CreateJob(::grpc::ClientContext* context, const ::mruv::jobs::CreateJobRequest& request, ::mruv::jobs::CreateJobResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::jobs::CreateJobResponse>> AsyncCreateJob(::grpc::ClientContext* context, const ::mruv::jobs::CreateJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::jobs::CreateJobResponse>>(AsyncCreateJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::jobs::CreateJobResponse>> PrepareAsyncCreateJob(::grpc::ClientContext* context, const ::mruv::jobs::CreateJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::jobs::CreateJobResponse>>(PrepareAsyncCreateJobRaw(context, request, cq));
    }
    // Get a job.
    virtual ::grpc::Status GetJob(::grpc::ClientContext* context, const ::mruv::jobs::GetJobRequest& request, ::mruv::jobs::GetJobResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::jobs::GetJobResponse>> AsyncGetJob(::grpc::ClientContext* context, const ::mruv::jobs::GetJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::jobs::GetJobResponse>>(AsyncGetJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::jobs::GetJobResponse>> PrepareAsyncGetJob(::grpc::ClientContext* context, const ::mruv::jobs::GetJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::jobs::GetJobResponse>>(PrepareAsyncGetJobRaw(context, request, cq));
    }
    // Update a job.
    virtual ::grpc::Status UpdateJob(::grpc::ClientContext* context, const ::mruv::jobs::UpdateJobRequest& request, ::mruv::jobs::UpdateJobResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::jobs::UpdateJobResponse>> AsyncUpdateJob(::grpc::ClientContext* context, const ::mruv::jobs::UpdateJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::jobs::UpdateJobResponse>>(AsyncUpdateJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::jobs::UpdateJobResponse>> PrepareAsyncUpdateJob(::grpc::ClientContext* context, const ::mruv::jobs::UpdateJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::jobs::UpdateJobResponse>>(PrepareAsyncUpdateJobRaw(context, request, cq));
    }
    // Delete a job.
    virtual ::grpc::Status DeleteJob(::grpc::ClientContext* context, const ::mruv::jobs::DeleteJobRequest& request, ::mruv::jobs::DeleteJobResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::jobs::DeleteJobResponse>> AsyncDeleteJob(::grpc::ClientContext* context, const ::mruv::jobs::DeleteJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::jobs::DeleteJobResponse>>(AsyncDeleteJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::jobs::DeleteJobResponse>> PrepareAsyncDeleteJob(::grpc::ClientContext* context, const ::mruv::jobs::DeleteJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::jobs::DeleteJobResponse>>(PrepareAsyncDeleteJobRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Create a job.
      virtual void CreateJob(::grpc::ClientContext* context, const ::mruv::jobs::CreateJobRequest* request, ::mruv::jobs::CreateJobResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateJob(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::jobs::CreateJobResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateJob(::grpc::ClientContext* context, const ::mruv::jobs::CreateJobRequest* request, ::mruv::jobs::CreateJobResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateJob(::grpc::ClientContext* context, const ::mruv::jobs::CreateJobRequest* request, ::mruv::jobs::CreateJobResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateJob(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::jobs::CreateJobResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateJob(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::jobs::CreateJobResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get a job.
      virtual void GetJob(::grpc::ClientContext* context, const ::mruv::jobs::GetJobRequest* request, ::mruv::jobs::GetJobResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetJob(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::jobs::GetJobResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetJob(::grpc::ClientContext* context, const ::mruv::jobs::GetJobRequest* request, ::mruv::jobs::GetJobResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetJob(::grpc::ClientContext* context, const ::mruv::jobs::GetJobRequest* request, ::mruv::jobs::GetJobResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetJob(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::jobs::GetJobResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetJob(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::jobs::GetJobResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Update a job.
      virtual void UpdateJob(::grpc::ClientContext* context, const ::mruv::jobs::UpdateJobRequest* request, ::mruv::jobs::UpdateJobResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateJob(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::jobs::UpdateJobResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateJob(::grpc::ClientContext* context, const ::mruv::jobs::UpdateJobRequest* request, ::mruv::jobs::UpdateJobResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateJob(::grpc::ClientContext* context, const ::mruv::jobs::UpdateJobRequest* request, ::mruv::jobs::UpdateJobResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateJob(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::jobs::UpdateJobResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateJob(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::jobs::UpdateJobResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Delete a job.
      virtual void DeleteJob(::grpc::ClientContext* context, const ::mruv::jobs::DeleteJobRequest* request, ::mruv::jobs::DeleteJobResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteJob(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::jobs::DeleteJobResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteJob(::grpc::ClientContext* context, const ::mruv::jobs::DeleteJobRequest* request, ::mruv::jobs::DeleteJobResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteJob(::grpc::ClientContext* context, const ::mruv::jobs::DeleteJobRequest* request, ::mruv::jobs::DeleteJobResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteJob(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::jobs::DeleteJobResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteJob(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::jobs::DeleteJobResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::jobs::CreateJobResponse>* AsyncCreateJobRaw(::grpc::ClientContext* context, const ::mruv::jobs::CreateJobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::jobs::CreateJobResponse>* PrepareAsyncCreateJobRaw(::grpc::ClientContext* context, const ::mruv::jobs::CreateJobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::jobs::GetJobResponse>* AsyncGetJobRaw(::grpc::ClientContext* context, const ::mruv::jobs::GetJobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::jobs::GetJobResponse>* PrepareAsyncGetJobRaw(::grpc::ClientContext* context, const ::mruv::jobs::GetJobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::jobs::UpdateJobResponse>* AsyncUpdateJobRaw(::grpc::ClientContext* context, const ::mruv::jobs::UpdateJobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::jobs::UpdateJobResponse>* PrepareAsyncUpdateJobRaw(::grpc::ClientContext* context, const ::mruv::jobs::UpdateJobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::jobs::DeleteJobResponse>* AsyncDeleteJobRaw(::grpc::ClientContext* context, const ::mruv::jobs::DeleteJobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::jobs::DeleteJobResponse>* PrepareAsyncDeleteJobRaw(::grpc::ClientContext* context, const ::mruv::jobs::DeleteJobRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateJob(::grpc::ClientContext* context, const ::mruv::jobs::CreateJobRequest& request, ::mruv::jobs::CreateJobResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::jobs::CreateJobResponse>> AsyncCreateJob(::grpc::ClientContext* context, const ::mruv::jobs::CreateJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::jobs::CreateJobResponse>>(AsyncCreateJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::jobs::CreateJobResponse>> PrepareAsyncCreateJob(::grpc::ClientContext* context, const ::mruv::jobs::CreateJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::jobs::CreateJobResponse>>(PrepareAsyncCreateJobRaw(context, request, cq));
    }
    ::grpc::Status GetJob(::grpc::ClientContext* context, const ::mruv::jobs::GetJobRequest& request, ::mruv::jobs::GetJobResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::jobs::GetJobResponse>> AsyncGetJob(::grpc::ClientContext* context, const ::mruv::jobs::GetJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::jobs::GetJobResponse>>(AsyncGetJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::jobs::GetJobResponse>> PrepareAsyncGetJob(::grpc::ClientContext* context, const ::mruv::jobs::GetJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::jobs::GetJobResponse>>(PrepareAsyncGetJobRaw(context, request, cq));
    }
    ::grpc::Status UpdateJob(::grpc::ClientContext* context, const ::mruv::jobs::UpdateJobRequest& request, ::mruv::jobs::UpdateJobResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::jobs::UpdateJobResponse>> AsyncUpdateJob(::grpc::ClientContext* context, const ::mruv::jobs::UpdateJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::jobs::UpdateJobResponse>>(AsyncUpdateJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::jobs::UpdateJobResponse>> PrepareAsyncUpdateJob(::grpc::ClientContext* context, const ::mruv::jobs::UpdateJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::jobs::UpdateJobResponse>>(PrepareAsyncUpdateJobRaw(context, request, cq));
    }
    ::grpc::Status DeleteJob(::grpc::ClientContext* context, const ::mruv::jobs::DeleteJobRequest& request, ::mruv::jobs::DeleteJobResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::jobs::DeleteJobResponse>> AsyncDeleteJob(::grpc::ClientContext* context, const ::mruv::jobs::DeleteJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::jobs::DeleteJobResponse>>(AsyncDeleteJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::jobs::DeleteJobResponse>> PrepareAsyncDeleteJob(::grpc::ClientContext* context, const ::mruv::jobs::DeleteJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::jobs::DeleteJobResponse>>(PrepareAsyncDeleteJobRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateJob(::grpc::ClientContext* context, const ::mruv::jobs::CreateJobRequest* request, ::mruv::jobs::CreateJobResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateJob(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::jobs::CreateJobResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateJob(::grpc::ClientContext* context, const ::mruv::jobs::CreateJobRequest* request, ::mruv::jobs::CreateJobResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateJob(::grpc::ClientContext* context, const ::mruv::jobs::CreateJobRequest* request, ::mruv::jobs::CreateJobResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateJob(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::jobs::CreateJobResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateJob(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::jobs::CreateJobResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetJob(::grpc::ClientContext* context, const ::mruv::jobs::GetJobRequest* request, ::mruv::jobs::GetJobResponse* response, std::function<void(::grpc::Status)>) override;
      void GetJob(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::jobs::GetJobResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetJob(::grpc::ClientContext* context, const ::mruv::jobs::GetJobRequest* request, ::mruv::jobs::GetJobResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetJob(::grpc::ClientContext* context, const ::mruv::jobs::GetJobRequest* request, ::mruv::jobs::GetJobResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetJob(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::jobs::GetJobResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetJob(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::jobs::GetJobResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateJob(::grpc::ClientContext* context, const ::mruv::jobs::UpdateJobRequest* request, ::mruv::jobs::UpdateJobResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateJob(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::jobs::UpdateJobResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateJob(::grpc::ClientContext* context, const ::mruv::jobs::UpdateJobRequest* request, ::mruv::jobs::UpdateJobResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateJob(::grpc::ClientContext* context, const ::mruv::jobs::UpdateJobRequest* request, ::mruv::jobs::UpdateJobResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateJob(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::jobs::UpdateJobResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateJob(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::jobs::UpdateJobResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteJob(::grpc::ClientContext* context, const ::mruv::jobs::DeleteJobRequest* request, ::mruv::jobs::DeleteJobResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteJob(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::jobs::DeleteJobResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteJob(::grpc::ClientContext* context, const ::mruv::jobs::DeleteJobRequest* request, ::mruv::jobs::DeleteJobResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteJob(::grpc::ClientContext* context, const ::mruv::jobs::DeleteJobRequest* request, ::mruv::jobs::DeleteJobResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteJob(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::jobs::DeleteJobResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteJob(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::jobs::DeleteJobResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mruv::jobs::CreateJobResponse>* AsyncCreateJobRaw(::grpc::ClientContext* context, const ::mruv::jobs::CreateJobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::jobs::CreateJobResponse>* PrepareAsyncCreateJobRaw(::grpc::ClientContext* context, const ::mruv::jobs::CreateJobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::jobs::GetJobResponse>* AsyncGetJobRaw(::grpc::ClientContext* context, const ::mruv::jobs::GetJobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::jobs::GetJobResponse>* PrepareAsyncGetJobRaw(::grpc::ClientContext* context, const ::mruv::jobs::GetJobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::jobs::UpdateJobResponse>* AsyncUpdateJobRaw(::grpc::ClientContext* context, const ::mruv::jobs::UpdateJobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::jobs::UpdateJobResponse>* PrepareAsyncUpdateJobRaw(::grpc::ClientContext* context, const ::mruv::jobs::UpdateJobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::jobs::DeleteJobResponse>* AsyncDeleteJobRaw(::grpc::ClientContext* context, const ::mruv::jobs::DeleteJobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::jobs::DeleteJobResponse>* PrepareAsyncDeleteJobRaw(::grpc::ClientContext* context, const ::mruv::jobs::DeleteJobRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateJob_;
    const ::grpc::internal::RpcMethod rpcmethod_GetJob_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateJob_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteJob_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Create a job.
    virtual ::grpc::Status CreateJob(::grpc::ServerContext* context, const ::mruv::jobs::CreateJobRequest* request, ::mruv::jobs::CreateJobResponse* response);
    // Get a job.
    virtual ::grpc::Status GetJob(::grpc::ServerContext* context, const ::mruv::jobs::GetJobRequest* request, ::mruv::jobs::GetJobResponse* response);
    // Update a job.
    virtual ::grpc::Status UpdateJob(::grpc::ServerContext* context, const ::mruv::jobs::UpdateJobRequest* request, ::mruv::jobs::UpdateJobResponse* response);
    // Delete a job.
    virtual ::grpc::Status DeleteJob(::grpc::ServerContext* context, const ::mruv::jobs::DeleteJobRequest* request, ::mruv::jobs::DeleteJobResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateJob() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateJob(::grpc::ServerContext* /*context*/, const ::mruv::jobs::CreateJobRequest* /*request*/, ::mruv::jobs::CreateJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateJob(::grpc::ServerContext* context, ::mruv::jobs::CreateJobRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::jobs::CreateJobResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetJob() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetJob(::grpc::ServerContext* /*context*/, const ::mruv::jobs::GetJobRequest* /*request*/, ::mruv::jobs::GetJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetJob(::grpc::ServerContext* context, ::mruv::jobs::GetJobRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::jobs::GetJobResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateJob() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateJob(::grpc::ServerContext* /*context*/, const ::mruv::jobs::UpdateJobRequest* /*request*/, ::mruv::jobs::UpdateJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateJob(::grpc::ServerContext* context, ::mruv::jobs::UpdateJobRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::jobs::UpdateJobResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteJob() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteJob(::grpc::ServerContext* /*context*/, const ::mruv::jobs::DeleteJobRequest* /*request*/, ::mruv::jobs::DeleteJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteJob(::grpc::ServerContext* context, ::mruv::jobs::DeleteJobRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::jobs::DeleteJobResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateJob<WithAsyncMethod_GetJob<WithAsyncMethod_UpdateJob<WithAsyncMethod_DeleteJob<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateJob() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::jobs::CreateJobRequest, ::mruv::jobs::CreateJobResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::jobs::CreateJobRequest* request, ::mruv::jobs::CreateJobResponse* response) { return this->CreateJob(context, request, response); }));}
    void SetMessageAllocatorFor_CreateJob(
        ::grpc::experimental::MessageAllocator< ::mruv::jobs::CreateJobRequest, ::mruv::jobs::CreateJobResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::jobs::CreateJobRequest, ::mruv::jobs::CreateJobResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateJob(::grpc::ServerContext* /*context*/, const ::mruv::jobs::CreateJobRequest* /*request*/, ::mruv::jobs::CreateJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateJob(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::jobs::CreateJobRequest* /*request*/, ::mruv::jobs::CreateJobResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateJob(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::jobs::CreateJobRequest* /*request*/, ::mruv::jobs::CreateJobResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetJob() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::jobs::GetJobRequest, ::mruv::jobs::GetJobResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::jobs::GetJobRequest* request, ::mruv::jobs::GetJobResponse* response) { return this->GetJob(context, request, response); }));}
    void SetMessageAllocatorFor_GetJob(
        ::grpc::experimental::MessageAllocator< ::mruv::jobs::GetJobRequest, ::mruv::jobs::GetJobResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::jobs::GetJobRequest, ::mruv::jobs::GetJobResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetJob(::grpc::ServerContext* /*context*/, const ::mruv::jobs::GetJobRequest* /*request*/, ::mruv::jobs::GetJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetJob(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::jobs::GetJobRequest* /*request*/, ::mruv::jobs::GetJobResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetJob(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::jobs::GetJobRequest* /*request*/, ::mruv::jobs::GetJobResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateJob() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::jobs::UpdateJobRequest, ::mruv::jobs::UpdateJobResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::jobs::UpdateJobRequest* request, ::mruv::jobs::UpdateJobResponse* response) { return this->UpdateJob(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateJob(
        ::grpc::experimental::MessageAllocator< ::mruv::jobs::UpdateJobRequest, ::mruv::jobs::UpdateJobResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::jobs::UpdateJobRequest, ::mruv::jobs::UpdateJobResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateJob(::grpc::ServerContext* /*context*/, const ::mruv::jobs::UpdateJobRequest* /*request*/, ::mruv::jobs::UpdateJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateJob(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::jobs::UpdateJobRequest* /*request*/, ::mruv::jobs::UpdateJobResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateJob(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::jobs::UpdateJobRequest* /*request*/, ::mruv::jobs::UpdateJobResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteJob() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::jobs::DeleteJobRequest, ::mruv::jobs::DeleteJobResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::jobs::DeleteJobRequest* request, ::mruv::jobs::DeleteJobResponse* response) { return this->DeleteJob(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteJob(
        ::grpc::experimental::MessageAllocator< ::mruv::jobs::DeleteJobRequest, ::mruv::jobs::DeleteJobResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::jobs::DeleteJobRequest, ::mruv::jobs::DeleteJobResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteJob(::grpc::ServerContext* /*context*/, const ::mruv::jobs::DeleteJobRequest* /*request*/, ::mruv::jobs::DeleteJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteJob(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::jobs::DeleteJobRequest* /*request*/, ::mruv::jobs::DeleteJobResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteJob(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::jobs::DeleteJobRequest* /*request*/, ::mruv::jobs::DeleteJobResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_CreateJob<ExperimentalWithCallbackMethod_GetJob<ExperimentalWithCallbackMethod_UpdateJob<ExperimentalWithCallbackMethod_DeleteJob<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_CreateJob<ExperimentalWithCallbackMethod_GetJob<ExperimentalWithCallbackMethod_UpdateJob<ExperimentalWithCallbackMethod_DeleteJob<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateJob() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateJob(::grpc::ServerContext* /*context*/, const ::mruv::jobs::CreateJobRequest* /*request*/, ::mruv::jobs::CreateJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetJob() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetJob(::grpc::ServerContext* /*context*/, const ::mruv::jobs::GetJobRequest* /*request*/, ::mruv::jobs::GetJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateJob() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateJob(::grpc::ServerContext* /*context*/, const ::mruv::jobs::UpdateJobRequest* /*request*/, ::mruv::jobs::UpdateJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteJob() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteJob(::grpc::ServerContext* /*context*/, const ::mruv::jobs::DeleteJobRequest* /*request*/, ::mruv::jobs::DeleteJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateJob() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateJob(::grpc::ServerContext* /*context*/, const ::mruv::jobs::CreateJobRequest* /*request*/, ::mruv::jobs::CreateJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateJob(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetJob() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetJob(::grpc::ServerContext* /*context*/, const ::mruv::jobs::GetJobRequest* /*request*/, ::mruv::jobs::GetJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetJob(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateJob() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateJob(::grpc::ServerContext* /*context*/, const ::mruv::jobs::UpdateJobRequest* /*request*/, ::mruv::jobs::UpdateJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateJob(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteJob() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteJob(::grpc::ServerContext* /*context*/, const ::mruv::jobs::DeleteJobRequest* /*request*/, ::mruv::jobs::DeleteJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteJob(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateJob() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateJob(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateJob(::grpc::ServerContext* /*context*/, const ::mruv::jobs::CreateJobRequest* /*request*/, ::mruv::jobs::CreateJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateJob(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateJob(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetJob() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetJob(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetJob(::grpc::ServerContext* /*context*/, const ::mruv::jobs::GetJobRequest* /*request*/, ::mruv::jobs::GetJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetJob(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetJob(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateJob() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateJob(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateJob(::grpc::ServerContext* /*context*/, const ::mruv::jobs::UpdateJobRequest* /*request*/, ::mruv::jobs::UpdateJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateJob(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateJob(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteJob() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteJob(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteJob(::grpc::ServerContext* /*context*/, const ::mruv::jobs::DeleteJobRequest* /*request*/, ::mruv::jobs::DeleteJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteJob(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteJob(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateJob() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::mruv::jobs::CreateJobRequest, ::mruv::jobs::CreateJobResponse>(std::bind(&WithStreamedUnaryMethod_CreateJob<BaseClass>::StreamedCreateJob, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateJob(::grpc::ServerContext* /*context*/, const ::mruv::jobs::CreateJobRequest* /*request*/, ::mruv::jobs::CreateJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateJob(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::jobs::CreateJobRequest,::mruv::jobs::CreateJobResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetJob() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::mruv::jobs::GetJobRequest, ::mruv::jobs::GetJobResponse>(std::bind(&WithStreamedUnaryMethod_GetJob<BaseClass>::StreamedGetJob, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetJob(::grpc::ServerContext* /*context*/, const ::mruv::jobs::GetJobRequest* /*request*/, ::mruv::jobs::GetJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetJob(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::jobs::GetJobRequest,::mruv::jobs::GetJobResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateJob() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::mruv::jobs::UpdateJobRequest, ::mruv::jobs::UpdateJobResponse>(std::bind(&WithStreamedUnaryMethod_UpdateJob<BaseClass>::StreamedUpdateJob, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateJob(::grpc::ServerContext* /*context*/, const ::mruv::jobs::UpdateJobRequest* /*request*/, ::mruv::jobs::UpdateJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateJob(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::jobs::UpdateJobRequest,::mruv::jobs::UpdateJobResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteJob() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::mruv::jobs::DeleteJobRequest, ::mruv::jobs::DeleteJobResponse>(std::bind(&WithStreamedUnaryMethod_DeleteJob<BaseClass>::StreamedDeleteJob, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteJob(::grpc::ServerContext* /*context*/, const ::mruv::jobs::DeleteJobRequest* /*request*/, ::mruv::jobs::DeleteJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteJob(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::jobs::DeleteJobRequest,::mruv::jobs::DeleteJobResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateJob<WithStreamedUnaryMethod_GetJob<WithStreamedUnaryMethod_UpdateJob<WithStreamedUnaryMethod_DeleteJob<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateJob<WithStreamedUnaryMethod_GetJob<WithStreamedUnaryMethod_UpdateJob<WithStreamedUnaryMethod_DeleteJob<Service > > > > StreamedService;
};

}  // namespace jobs
}  // namespace mruv


#endif  // GRPC_jobs_2fjobs_2eproto__INCLUDED
