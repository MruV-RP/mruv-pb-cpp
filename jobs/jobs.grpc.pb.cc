// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: jobs/jobs.proto

#include "jobs/jobs.pb.h"
#include "jobs/jobs.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace mruv {
namespace jobs {

static const char* MruVJobsService_method_names[] = {
  "/mruv.jobs.MruVJobsService/CreateJob",
  "/mruv.jobs.MruVJobsService/GetJob",
  "/mruv.jobs.MruVJobsService/UpdateJob",
  "/mruv.jobs.MruVJobsService/DeleteJob",
};

std::unique_ptr< MruVJobsService::Stub> MruVJobsService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MruVJobsService::Stub> stub(new MruVJobsService::Stub(channel));
  return stub;
}

MruVJobsService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateJob_(MruVJobsService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetJob_(MruVJobsService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateJob_(MruVJobsService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteJob_(MruVJobsService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MruVJobsService::Stub::CreateJob(::grpc::ClientContext* context, const ::mruv::jobs::CreateJobRequest& request, ::mruv::jobs::CreateJobResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateJob_, context, request, response);
}

void MruVJobsService::Stub::experimental_async::CreateJob(::grpc::ClientContext* context, const ::mruv::jobs::CreateJobRequest* request, ::mruv::jobs::CreateJobResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateJob_, context, request, response, std::move(f));
}

void MruVJobsService::Stub::experimental_async::CreateJob(::grpc::ClientContext* context, const ::mruv::jobs::CreateJobRequest* request, ::mruv::jobs::CreateJobResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateJob_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::jobs::CreateJobResponse>* MruVJobsService::Stub::PrepareAsyncCreateJobRaw(::grpc::ClientContext* context, const ::mruv::jobs::CreateJobRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mruv::jobs::CreateJobResponse>::Create(channel_.get(), cq, rpcmethod_CreateJob_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::mruv::jobs::CreateJobResponse>* MruVJobsService::Stub::AsyncCreateJobRaw(::grpc::ClientContext* context, const ::mruv::jobs::CreateJobRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateJobRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MruVJobsService::Stub::GetJob(::grpc::ClientContext* context, const ::mruv::jobs::GetJobRequest& request, ::mruv::jobs::GetJobResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetJob_, context, request, response);
}

void MruVJobsService::Stub::experimental_async::GetJob(::grpc::ClientContext* context, const ::mruv::jobs::GetJobRequest* request, ::mruv::jobs::GetJobResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetJob_, context, request, response, std::move(f));
}

void MruVJobsService::Stub::experimental_async::GetJob(::grpc::ClientContext* context, const ::mruv::jobs::GetJobRequest* request, ::mruv::jobs::GetJobResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetJob_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::jobs::GetJobResponse>* MruVJobsService::Stub::PrepareAsyncGetJobRaw(::grpc::ClientContext* context, const ::mruv::jobs::GetJobRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mruv::jobs::GetJobResponse>::Create(channel_.get(), cq, rpcmethod_GetJob_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::mruv::jobs::GetJobResponse>* MruVJobsService::Stub::AsyncGetJobRaw(::grpc::ClientContext* context, const ::mruv::jobs::GetJobRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetJobRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MruVJobsService::Stub::UpdateJob(::grpc::ClientContext* context, const ::mruv::jobs::UpdateJobRequest& request, ::mruv::jobs::UpdateJobResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateJob_, context, request, response);
}

void MruVJobsService::Stub::experimental_async::UpdateJob(::grpc::ClientContext* context, const ::mruv::jobs::UpdateJobRequest* request, ::mruv::jobs::UpdateJobResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateJob_, context, request, response, std::move(f));
}

void MruVJobsService::Stub::experimental_async::UpdateJob(::grpc::ClientContext* context, const ::mruv::jobs::UpdateJobRequest* request, ::mruv::jobs::UpdateJobResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateJob_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::jobs::UpdateJobResponse>* MruVJobsService::Stub::PrepareAsyncUpdateJobRaw(::grpc::ClientContext* context, const ::mruv::jobs::UpdateJobRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mruv::jobs::UpdateJobResponse>::Create(channel_.get(), cq, rpcmethod_UpdateJob_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::mruv::jobs::UpdateJobResponse>* MruVJobsService::Stub::AsyncUpdateJobRaw(::grpc::ClientContext* context, const ::mruv::jobs::UpdateJobRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateJobRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MruVJobsService::Stub::DeleteJob(::grpc::ClientContext* context, const ::mruv::jobs::DeleteJobRequest& request, ::mruv::jobs::DeleteJobResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteJob_, context, request, response);
}

void MruVJobsService::Stub::experimental_async::DeleteJob(::grpc::ClientContext* context, const ::mruv::jobs::DeleteJobRequest* request, ::mruv::jobs::DeleteJobResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteJob_, context, request, response, std::move(f));
}

void MruVJobsService::Stub::experimental_async::DeleteJob(::grpc::ClientContext* context, const ::mruv::jobs::DeleteJobRequest* request, ::mruv::jobs::DeleteJobResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteJob_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::jobs::DeleteJobResponse>* MruVJobsService::Stub::PrepareAsyncDeleteJobRaw(::grpc::ClientContext* context, const ::mruv::jobs::DeleteJobRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mruv::jobs::DeleteJobResponse>::Create(channel_.get(), cq, rpcmethod_DeleteJob_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::mruv::jobs::DeleteJobResponse>* MruVJobsService::Stub::AsyncDeleteJobRaw(::grpc::ClientContext* context, const ::mruv::jobs::DeleteJobRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteJobRaw(context, request, cq);
  result->StartCall();
  return result;
}

MruVJobsService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVJobsService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVJobsService::Service, ::mruv::jobs::CreateJobRequest, ::mruv::jobs::CreateJobResponse>(
          [](MruVJobsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mruv::jobs::CreateJobRequest* req,
             ::mruv::jobs::CreateJobResponse* resp) {
               return service->CreateJob(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVJobsService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVJobsService::Service, ::mruv::jobs::GetJobRequest, ::mruv::jobs::GetJobResponse>(
          [](MruVJobsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mruv::jobs::GetJobRequest* req,
             ::mruv::jobs::GetJobResponse* resp) {
               return service->GetJob(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVJobsService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVJobsService::Service, ::mruv::jobs::UpdateJobRequest, ::mruv::jobs::UpdateJobResponse>(
          [](MruVJobsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mruv::jobs::UpdateJobRequest* req,
             ::mruv::jobs::UpdateJobResponse* resp) {
               return service->UpdateJob(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVJobsService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVJobsService::Service, ::mruv::jobs::DeleteJobRequest, ::mruv::jobs::DeleteJobResponse>(
          [](MruVJobsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mruv::jobs::DeleteJobRequest* req,
             ::mruv::jobs::DeleteJobResponse* resp) {
               return service->DeleteJob(ctx, req, resp);
             }, this)));
}

MruVJobsService::Service::~Service() {
}

::grpc::Status MruVJobsService::Service::CreateJob(::grpc::ServerContext* context, const ::mruv::jobs::CreateJobRequest* request, ::mruv::jobs::CreateJobResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVJobsService::Service::GetJob(::grpc::ServerContext* context, const ::mruv::jobs::GetJobRequest* request, ::mruv::jobs::GetJobResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVJobsService::Service::UpdateJob(::grpc::ServerContext* context, const ::mruv::jobs::UpdateJobRequest* request, ::mruv::jobs::UpdateJobResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVJobsService::Service::DeleteJob(::grpc::ServerContext* context, const ::mruv::jobs::DeleteJobRequest* request, ::mruv::jobs::DeleteJobResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mruv
}  // namespace jobs

