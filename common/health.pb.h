// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/health.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2fhealth_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2fhealth_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2fhealth_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2fhealth_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2fhealth_2eproto;
namespace mruv {
namespace common {
class ServiceStatusRequest;
class ServiceStatusRequestDefaultTypeInternal;
extern ServiceStatusRequestDefaultTypeInternal _ServiceStatusRequest_default_instance_;
class ServiceStatusResponse;
class ServiceStatusResponseDefaultTypeInternal;
extern ServiceStatusResponseDefaultTypeInternal _ServiceStatusResponse_default_instance_;
class VersionRequest;
class VersionRequestDefaultTypeInternal;
extern VersionRequestDefaultTypeInternal _VersionRequest_default_instance_;
class VersionResponse;
class VersionResponseDefaultTypeInternal;
extern VersionResponseDefaultTypeInternal _VersionResponse_default_instance_;
}  // namespace common
}  // namespace mruv
PROTOBUF_NAMESPACE_OPEN
template<> ::mruv::common::ServiceStatusRequest* Arena::CreateMaybeMessage<::mruv::common::ServiceStatusRequest>(Arena*);
template<> ::mruv::common::ServiceStatusResponse* Arena::CreateMaybeMessage<::mruv::common::ServiceStatusResponse>(Arena*);
template<> ::mruv::common::VersionRequest* Arena::CreateMaybeMessage<::mruv::common::VersionRequest>(Arena*);
template<> ::mruv::common::VersionResponse* Arena::CreateMaybeMessage<::mruv::common::VersionResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mruv {
namespace common {

// ===================================================================

class ServiceStatusRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.common.ServiceStatusRequest) */ {
 public:
  inline ServiceStatusRequest() : ServiceStatusRequest(nullptr) {}
  virtual ~ServiceStatusRequest();

  ServiceStatusRequest(const ServiceStatusRequest& from);
  ServiceStatusRequest(ServiceStatusRequest&& from) noexcept
    : ServiceStatusRequest() {
    *this = ::std::move(from);
  }

  inline ServiceStatusRequest& operator=(const ServiceStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceStatusRequest& operator=(ServiceStatusRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceStatusRequest* internal_default_instance() {
    return reinterpret_cast<const ServiceStatusRequest*>(
               &_ServiceStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServiceStatusRequest& a, ServiceStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceStatusRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceStatusRequest* New() const final {
    return CreateMaybeMessage<ServiceStatusRequest>(nullptr);
  }

  ServiceStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceStatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceStatusRequest& from);
  void MergeFrom(const ServiceStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.common.ServiceStatusRequest";
  }
  protected:
  explicit ServiceStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2fhealth_2eproto);
    return ::descriptor_table_common_2fhealth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.common.ServiceStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fhealth_2eproto;
};
// -------------------------------------------------------------------

class ServiceStatusResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.common.ServiceStatusResponse) */ {
 public:
  inline ServiceStatusResponse() : ServiceStatusResponse(nullptr) {}
  virtual ~ServiceStatusResponse();

  ServiceStatusResponse(const ServiceStatusResponse& from);
  ServiceStatusResponse(ServiceStatusResponse&& from) noexcept
    : ServiceStatusResponse() {
    *this = ::std::move(from);
  }

  inline ServiceStatusResponse& operator=(const ServiceStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceStatusResponse& operator=(ServiceStatusResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceStatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceStatusResponse* internal_default_instance() {
    return reinterpret_cast<const ServiceStatusResponse*>(
               &_ServiceStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ServiceStatusResponse& a, ServiceStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceStatusResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceStatusResponse* New() const final {
    return CreateMaybeMessage<ServiceStatusResponse>(nullptr);
  }

  ServiceStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceStatusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceStatusResponse& from);
  void MergeFrom(const ServiceStatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceStatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.common.ServiceStatusResponse";
  }
  protected:
  explicit ServiceStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2fhealth_2eproto);
    return ::descriptor_table_common_2fhealth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // string status = 1;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:mruv.common.ServiceStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fhealth_2eproto;
};
// -------------------------------------------------------------------

class VersionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.common.VersionRequest) */ {
 public:
  inline VersionRequest() : VersionRequest(nullptr) {}
  virtual ~VersionRequest();

  VersionRequest(const VersionRequest& from);
  VersionRequest(VersionRequest&& from) noexcept
    : VersionRequest() {
    *this = ::std::move(from);
  }

  inline VersionRequest& operator=(const VersionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersionRequest& operator=(VersionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VersionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VersionRequest* internal_default_instance() {
    return reinterpret_cast<const VersionRequest*>(
               &_VersionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VersionRequest& a, VersionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VersionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VersionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VersionRequest* New() const final {
    return CreateMaybeMessage<VersionRequest>(nullptr);
  }

  VersionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VersionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VersionRequest& from);
  void MergeFrom(const VersionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.common.VersionRequest";
  }
  protected:
  explicit VersionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2fhealth_2eproto);
    return ::descriptor_table_common_2fhealth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.common.VersionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fhealth_2eproto;
};
// -------------------------------------------------------------------

class VersionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.common.VersionResponse) */ {
 public:
  inline VersionResponse() : VersionResponse(nullptr) {}
  virtual ~VersionResponse();

  VersionResponse(const VersionResponse& from);
  VersionResponse(VersionResponse&& from) noexcept
    : VersionResponse() {
    *this = ::std::move(from);
  }

  inline VersionResponse& operator=(const VersionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersionResponse& operator=(VersionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VersionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VersionResponse* internal_default_instance() {
    return reinterpret_cast<const VersionResponse*>(
               &_VersionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(VersionResponse& a, VersionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VersionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VersionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VersionResponse* New() const final {
    return CreateMaybeMessage<VersionResponse>(nullptr);
  }

  VersionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VersionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VersionResponse& from);
  void MergeFrom(const VersionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.common.VersionResponse";
  }
  protected:
  explicit VersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2fhealth_2eproto);
    return ::descriptor_table_common_2fhealth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kBuildDateFieldNumber = 2,
    kCommitFieldNumber = 3,
    kOsArchFieldNumber = 4,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string build_date = 2;
  void clear_build_date();
  const std::string& build_date() const;
  void set_build_date(const std::string& value);
  void set_build_date(std::string&& value);
  void set_build_date(const char* value);
  void set_build_date(const char* value, size_t size);
  std::string* mutable_build_date();
  std::string* release_build_date();
  void set_allocated_build_date(std::string* build_date);
  private:
  const std::string& _internal_build_date() const;
  void _internal_set_build_date(const std::string& value);
  std::string* _internal_mutable_build_date();
  public:

  // string commit = 3;
  void clear_commit();
  const std::string& commit() const;
  void set_commit(const std::string& value);
  void set_commit(std::string&& value);
  void set_commit(const char* value);
  void set_commit(const char* value, size_t size);
  std::string* mutable_commit();
  std::string* release_commit();
  void set_allocated_commit(std::string* commit);
  private:
  const std::string& _internal_commit() const;
  void _internal_set_commit(const std::string& value);
  std::string* _internal_mutable_commit();
  public:

  // string os_arch = 4;
  void clear_os_arch();
  const std::string& os_arch() const;
  void set_os_arch(const std::string& value);
  void set_os_arch(std::string&& value);
  void set_os_arch(const char* value);
  void set_os_arch(const char* value, size_t size);
  std::string* mutable_os_arch();
  std::string* release_os_arch();
  void set_allocated_os_arch(std::string* os_arch);
  private:
  const std::string& _internal_os_arch() const;
  void _internal_set_os_arch(const std::string& value);
  std::string* _internal_mutable_os_arch();
  public:

  // @@protoc_insertion_point(class_scope:mruv.common.VersionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr build_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr commit_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr os_arch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fhealth_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServiceStatusRequest

// -------------------------------------------------------------------

// ServiceStatusResponse

// string status = 1;
inline void ServiceStatusResponse::clear_status() {
  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServiceStatusResponse::status() const {
  // @@protoc_insertion_point(field_get:mruv.common.ServiceStatusResponse.status)
  return _internal_status();
}
inline void ServiceStatusResponse::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:mruv.common.ServiceStatusResponse.status)
}
inline std::string* ServiceStatusResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:mruv.common.ServiceStatusResponse.status)
  return _internal_mutable_status();
}
inline const std::string& ServiceStatusResponse::_internal_status() const {
  return status_.Get();
}
inline void ServiceStatusResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServiceStatusResponse::set_status(std::string&& value) {
  
  status_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.common.ServiceStatusResponse.status)
}
inline void ServiceStatusResponse::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.common.ServiceStatusResponse.status)
}
inline void ServiceStatusResponse::set_status(const char* value,
    size_t size) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.common.ServiceStatusResponse.status)
}
inline std::string* ServiceStatusResponse::_internal_mutable_status() {
  
  return status_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServiceStatusResponse::release_status() {
  // @@protoc_insertion_point(field_release:mruv.common.ServiceStatusResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServiceStatusResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.common.ServiceStatusResponse.status)
}

// -------------------------------------------------------------------

// VersionRequest

// -------------------------------------------------------------------

// VersionResponse

// string version = 1;
inline void VersionResponse::clear_version() {
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VersionResponse::version() const {
  // @@protoc_insertion_point(field_get:mruv.common.VersionResponse.version)
  return _internal_version();
}
inline void VersionResponse::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:mruv.common.VersionResponse.version)
}
inline std::string* VersionResponse::mutable_version() {
  // @@protoc_insertion_point(field_mutable:mruv.common.VersionResponse.version)
  return _internal_mutable_version();
}
inline const std::string& VersionResponse::_internal_version() const {
  return version_.Get();
}
inline void VersionResponse::_internal_set_version(const std::string& value) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VersionResponse::set_version(std::string&& value) {
  
  version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.common.VersionResponse.version)
}
inline void VersionResponse::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.common.VersionResponse.version)
}
inline void VersionResponse::set_version(const char* value,
    size_t size) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.common.VersionResponse.version)
}
inline std::string* VersionResponse::_internal_mutable_version() {
  
  return version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VersionResponse::release_version() {
  // @@protoc_insertion_point(field_release:mruv.common.VersionResponse.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VersionResponse::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.common.VersionResponse.version)
}

// string build_date = 2;
inline void VersionResponse::clear_build_date() {
  build_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VersionResponse::build_date() const {
  // @@protoc_insertion_point(field_get:mruv.common.VersionResponse.build_date)
  return _internal_build_date();
}
inline void VersionResponse::set_build_date(const std::string& value) {
  _internal_set_build_date(value);
  // @@protoc_insertion_point(field_set:mruv.common.VersionResponse.build_date)
}
inline std::string* VersionResponse::mutable_build_date() {
  // @@protoc_insertion_point(field_mutable:mruv.common.VersionResponse.build_date)
  return _internal_mutable_build_date();
}
inline const std::string& VersionResponse::_internal_build_date() const {
  return build_date_.Get();
}
inline void VersionResponse::_internal_set_build_date(const std::string& value) {
  
  build_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VersionResponse::set_build_date(std::string&& value) {
  
  build_date_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.common.VersionResponse.build_date)
}
inline void VersionResponse::set_build_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  build_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.common.VersionResponse.build_date)
}
inline void VersionResponse::set_build_date(const char* value,
    size_t size) {
  
  build_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.common.VersionResponse.build_date)
}
inline std::string* VersionResponse::_internal_mutable_build_date() {
  
  return build_date_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VersionResponse::release_build_date() {
  // @@protoc_insertion_point(field_release:mruv.common.VersionResponse.build_date)
  return build_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VersionResponse::set_allocated_build_date(std::string* build_date) {
  if (build_date != nullptr) {
    
  } else {
    
  }
  build_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), build_date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.common.VersionResponse.build_date)
}

// string commit = 3;
inline void VersionResponse::clear_commit() {
  commit_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VersionResponse::commit() const {
  // @@protoc_insertion_point(field_get:mruv.common.VersionResponse.commit)
  return _internal_commit();
}
inline void VersionResponse::set_commit(const std::string& value) {
  _internal_set_commit(value);
  // @@protoc_insertion_point(field_set:mruv.common.VersionResponse.commit)
}
inline std::string* VersionResponse::mutable_commit() {
  // @@protoc_insertion_point(field_mutable:mruv.common.VersionResponse.commit)
  return _internal_mutable_commit();
}
inline const std::string& VersionResponse::_internal_commit() const {
  return commit_.Get();
}
inline void VersionResponse::_internal_set_commit(const std::string& value) {
  
  commit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VersionResponse::set_commit(std::string&& value) {
  
  commit_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.common.VersionResponse.commit)
}
inline void VersionResponse::set_commit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  commit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.common.VersionResponse.commit)
}
inline void VersionResponse::set_commit(const char* value,
    size_t size) {
  
  commit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.common.VersionResponse.commit)
}
inline std::string* VersionResponse::_internal_mutable_commit() {
  
  return commit_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VersionResponse::release_commit() {
  // @@protoc_insertion_point(field_release:mruv.common.VersionResponse.commit)
  return commit_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VersionResponse::set_allocated_commit(std::string* commit) {
  if (commit != nullptr) {
    
  } else {
    
  }
  commit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), commit,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.common.VersionResponse.commit)
}

// string os_arch = 4;
inline void VersionResponse::clear_os_arch() {
  os_arch_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VersionResponse::os_arch() const {
  // @@protoc_insertion_point(field_get:mruv.common.VersionResponse.os_arch)
  return _internal_os_arch();
}
inline void VersionResponse::set_os_arch(const std::string& value) {
  _internal_set_os_arch(value);
  // @@protoc_insertion_point(field_set:mruv.common.VersionResponse.os_arch)
}
inline std::string* VersionResponse::mutable_os_arch() {
  // @@protoc_insertion_point(field_mutable:mruv.common.VersionResponse.os_arch)
  return _internal_mutable_os_arch();
}
inline const std::string& VersionResponse::_internal_os_arch() const {
  return os_arch_.Get();
}
inline void VersionResponse::_internal_set_os_arch(const std::string& value) {
  
  os_arch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VersionResponse::set_os_arch(std::string&& value) {
  
  os_arch_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.common.VersionResponse.os_arch)
}
inline void VersionResponse::set_os_arch(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  os_arch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.common.VersionResponse.os_arch)
}
inline void VersionResponse::set_os_arch(const char* value,
    size_t size) {
  
  os_arch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.common.VersionResponse.os_arch)
}
inline std::string* VersionResponse::_internal_mutable_os_arch() {
  
  return os_arch_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VersionResponse::release_os_arch() {
  // @@protoc_insertion_point(field_release:mruv.common.VersionResponse.os_arch)
  return os_arch_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VersionResponse::set_allocated_os_arch(std::string* os_arch) {
  if (os_arch != nullptr) {
    
  } else {
    
  }
  os_arch_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), os_arch,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.common.VersionResponse.os_arch)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace mruv

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2fhealth_2eproto
