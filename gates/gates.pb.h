// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gates/gates.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gates_2fgates_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gates_2fgates_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "objects/movable.pb.h"
#include "spots/spots.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gates_2fgates_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gates_2fgates_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[19]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gates_2fgates_2eproto;
namespace mruv {
namespace gates {
class CloseRequest;
class CloseRequestDefaultTypeInternal;
extern CloseRequestDefaultTypeInternal _CloseRequest_default_instance_;
class CloseResponse;
class CloseResponseDefaultTypeInternal;
extern CloseResponseDefaultTypeInternal _CloseResponse_default_instance_;
class CreateGateRequest;
class CreateGateRequestDefaultTypeInternal;
extern CreateGateRequestDefaultTypeInternal _CreateGateRequest_default_instance_;
class CreateGateResponse;
class CreateGateResponseDefaultTypeInternal;
extern CreateGateResponseDefaultTypeInternal _CreateGateResponse_default_instance_;
class DeleteGateRequest;
class DeleteGateRequestDefaultTypeInternal;
extern DeleteGateRequestDefaultTypeInternal _DeleteGateRequest_default_instance_;
class DeleteGateResponse;
class DeleteGateResponseDefaultTypeInternal;
extern DeleteGateResponseDefaultTypeInternal _DeleteGateResponse_default_instance_;
class FindNearestGateRequest;
class FindNearestGateRequestDefaultTypeInternal;
extern FindNearestGateRequestDefaultTypeInternal _FindNearestGateRequest_default_instance_;
class FindNearestGateResponse;
class FindNearestGateResponseDefaultTypeInternal;
extern FindNearestGateResponseDefaultTypeInternal _FindNearestGateResponse_default_instance_;
class Gate;
class GateDefaultTypeInternal;
extern GateDefaultTypeInternal _Gate_default_instance_;
class GetGateRequest;
class GetGateRequestDefaultTypeInternal;
extern GetGateRequestDefaultTypeInternal _GetGateRequest_default_instance_;
class GetGateResponse;
class GetGateResponseDefaultTypeInternal;
extern GetGateResponseDefaultTypeInternal _GetGateResponse_default_instance_;
class LockRequest;
class LockRequestDefaultTypeInternal;
extern LockRequestDefaultTypeInternal _LockRequest_default_instance_;
class LockResponse;
class LockResponseDefaultTypeInternal;
extern LockResponseDefaultTypeInternal _LockResponse_default_instance_;
class OpenRequest;
class OpenRequestDefaultTypeInternal;
extern OpenRequestDefaultTypeInternal _OpenRequest_default_instance_;
class OpenResponse;
class OpenResponseDefaultTypeInternal;
extern OpenResponseDefaultTypeInternal _OpenResponse_default_instance_;
class UnlockRequest;
class UnlockRequestDefaultTypeInternal;
extern UnlockRequestDefaultTypeInternal _UnlockRequest_default_instance_;
class UnlockResponse;
class UnlockResponseDefaultTypeInternal;
extern UnlockResponseDefaultTypeInternal _UnlockResponse_default_instance_;
class UpdateGateRequest;
class UpdateGateRequestDefaultTypeInternal;
extern UpdateGateRequestDefaultTypeInternal _UpdateGateRequest_default_instance_;
class UpdateGateResponse;
class UpdateGateResponseDefaultTypeInternal;
extern UpdateGateResponseDefaultTypeInternal _UpdateGateResponse_default_instance_;
}  // namespace gates
}  // namespace mruv
PROTOBUF_NAMESPACE_OPEN
template<> ::mruv::gates::CloseRequest* Arena::CreateMaybeMessage<::mruv::gates::CloseRequest>(Arena*);
template<> ::mruv::gates::CloseResponse* Arena::CreateMaybeMessage<::mruv::gates::CloseResponse>(Arena*);
template<> ::mruv::gates::CreateGateRequest* Arena::CreateMaybeMessage<::mruv::gates::CreateGateRequest>(Arena*);
template<> ::mruv::gates::CreateGateResponse* Arena::CreateMaybeMessage<::mruv::gates::CreateGateResponse>(Arena*);
template<> ::mruv::gates::DeleteGateRequest* Arena::CreateMaybeMessage<::mruv::gates::DeleteGateRequest>(Arena*);
template<> ::mruv::gates::DeleteGateResponse* Arena::CreateMaybeMessage<::mruv::gates::DeleteGateResponse>(Arena*);
template<> ::mruv::gates::FindNearestGateRequest* Arena::CreateMaybeMessage<::mruv::gates::FindNearestGateRequest>(Arena*);
template<> ::mruv::gates::FindNearestGateResponse* Arena::CreateMaybeMessage<::mruv::gates::FindNearestGateResponse>(Arena*);
template<> ::mruv::gates::Gate* Arena::CreateMaybeMessage<::mruv::gates::Gate>(Arena*);
template<> ::mruv::gates::GetGateRequest* Arena::CreateMaybeMessage<::mruv::gates::GetGateRequest>(Arena*);
template<> ::mruv::gates::GetGateResponse* Arena::CreateMaybeMessage<::mruv::gates::GetGateResponse>(Arena*);
template<> ::mruv::gates::LockRequest* Arena::CreateMaybeMessage<::mruv::gates::LockRequest>(Arena*);
template<> ::mruv::gates::LockResponse* Arena::CreateMaybeMessage<::mruv::gates::LockResponse>(Arena*);
template<> ::mruv::gates::OpenRequest* Arena::CreateMaybeMessage<::mruv::gates::OpenRequest>(Arena*);
template<> ::mruv::gates::OpenResponse* Arena::CreateMaybeMessage<::mruv::gates::OpenResponse>(Arena*);
template<> ::mruv::gates::UnlockRequest* Arena::CreateMaybeMessage<::mruv::gates::UnlockRequest>(Arena*);
template<> ::mruv::gates::UnlockResponse* Arena::CreateMaybeMessage<::mruv::gates::UnlockResponse>(Arena*);
template<> ::mruv::gates::UpdateGateRequest* Arena::CreateMaybeMessage<::mruv::gates::UpdateGateRequest>(Arena*);
template<> ::mruv::gates::UpdateGateResponse* Arena::CreateMaybeMessage<::mruv::gates::UpdateGateResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mruv {
namespace gates {

// ===================================================================

class Gate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.gates.Gate) */ {
 public:
  Gate();
  virtual ~Gate();

  Gate(const Gate& from);
  Gate(Gate&& from) noexcept
    : Gate() {
    *this = ::std::move(from);
  }

  inline Gate& operator=(const Gate& from) {
    CopyFrom(from);
    return *this;
  }
  inline Gate& operator=(Gate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Gate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Gate* internal_default_instance() {
    return reinterpret_cast<const Gate*>(
               &_Gate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Gate& a, Gate& b) {
    a.Swap(&b);
  }
  inline void Swap(Gate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Gate* New() const final {
    return CreateMaybeMessage<Gate>(nullptr);
  }

  Gate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Gate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Gate& from);
  void MergeFrom(const Gate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Gate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.gates.Gate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gates_2fgates_2eproto);
    return ::descriptor_table_gates_2fgates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGateObjectsFieldNumber = 2,
    kNameFieldNumber = 1,
    kSpotFieldNumber = 3,
    kOpenedFieldNumber = 4,
    kLockedFieldNumber = 5,
  };
  // repeated .mruv.objects.MovableObject gate_objects = 2;
  int gate_objects_size() const;
  private:
  int _internal_gate_objects_size() const;
  public:
  void clear_gate_objects();
  ::mruv::objects::MovableObject* mutable_gate_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::objects::MovableObject >*
      mutable_gate_objects();
  private:
  const ::mruv::objects::MovableObject& _internal_gate_objects(int index) const;
  ::mruv::objects::MovableObject* _internal_add_gate_objects();
  public:
  const ::mruv::objects::MovableObject& gate_objects(int index) const;
  ::mruv::objects::MovableObject* add_gate_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::objects::MovableObject >&
      gate_objects() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .mruv.spots.Spot spot = 3;
  bool has_spot() const;
  private:
  bool _internal_has_spot() const;
  public:
  void clear_spot();
  const ::mruv::spots::Spot& spot() const;
  ::mruv::spots::Spot* release_spot();
  ::mruv::spots::Spot* mutable_spot();
  void set_allocated_spot(::mruv::spots::Spot* spot);
  private:
  const ::mruv::spots::Spot& _internal_spot() const;
  ::mruv::spots::Spot* _internal_mutable_spot();
  public:

  // bool opened = 4;
  void clear_opened();
  bool opened() const;
  void set_opened(bool value);
  private:
  bool _internal_opened() const;
  void _internal_set_opened(bool value);
  public:

  // bool locked = 5;
  void clear_locked();
  bool locked() const;
  void set_locked(bool value);
  private:
  bool _internal_locked() const;
  void _internal_set_locked(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.gates.Gate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::objects::MovableObject > gate_objects_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::mruv::spots::Spot* spot_;
  bool opened_;
  bool locked_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gates_2fgates_2eproto;
};
// -------------------------------------------------------------------

class CreateGateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.gates.CreateGateRequest) */ {
 public:
  CreateGateRequest();
  virtual ~CreateGateRequest();

  CreateGateRequest(const CreateGateRequest& from);
  CreateGateRequest(CreateGateRequest&& from) noexcept
    : CreateGateRequest() {
    *this = ::std::move(from);
  }

  inline CreateGateRequest& operator=(const CreateGateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateGateRequest& operator=(CreateGateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateGateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateGateRequest* internal_default_instance() {
    return reinterpret_cast<const CreateGateRequest*>(
               &_CreateGateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateGateRequest& a, CreateGateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateGateRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateGateRequest* New() const final {
    return CreateMaybeMessage<CreateGateRequest>(nullptr);
  }

  CreateGateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateGateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateGateRequest& from);
  void MergeFrom(const CreateGateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateGateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.gates.CreateGateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gates_2fgates_2eproto);
    return ::descriptor_table_gates_2fgates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGateObjectsFieldNumber = 2,
    kNameFieldNumber = 1,
    kSpotFieldNumber = 3,
  };
  // repeated .mruv.objects.MovableObject gate_objects = 2;
  int gate_objects_size() const;
  private:
  int _internal_gate_objects_size() const;
  public:
  void clear_gate_objects();
  ::mruv::objects::MovableObject* mutable_gate_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::objects::MovableObject >*
      mutable_gate_objects();
  private:
  const ::mruv::objects::MovableObject& _internal_gate_objects(int index) const;
  ::mruv::objects::MovableObject* _internal_add_gate_objects();
  public:
  const ::mruv::objects::MovableObject& gate_objects(int index) const;
  ::mruv::objects::MovableObject* add_gate_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::objects::MovableObject >&
      gate_objects() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .mruv.spots.Spot spot = 3;
  bool has_spot() const;
  private:
  bool _internal_has_spot() const;
  public:
  void clear_spot();
  const ::mruv::spots::Spot& spot() const;
  ::mruv::spots::Spot* release_spot();
  ::mruv::spots::Spot* mutable_spot();
  void set_allocated_spot(::mruv::spots::Spot* spot);
  private:
  const ::mruv::spots::Spot& _internal_spot() const;
  ::mruv::spots::Spot* _internal_mutable_spot();
  public:

  // @@protoc_insertion_point(class_scope:mruv.gates.CreateGateRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::objects::MovableObject > gate_objects_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::mruv::spots::Spot* spot_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gates_2fgates_2eproto;
};
// -------------------------------------------------------------------

class CreateGateResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.gates.CreateGateResponse) */ {
 public:
  CreateGateResponse();
  virtual ~CreateGateResponse();

  CreateGateResponse(const CreateGateResponse& from);
  CreateGateResponse(CreateGateResponse&& from) noexcept
    : CreateGateResponse() {
    *this = ::std::move(from);
  }

  inline CreateGateResponse& operator=(const CreateGateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateGateResponse& operator=(CreateGateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateGateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateGateResponse* internal_default_instance() {
    return reinterpret_cast<const CreateGateResponse*>(
               &_CreateGateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateGateResponse& a, CreateGateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateGateResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateGateResponse* New() const final {
    return CreateMaybeMessage<CreateGateResponse>(nullptr);
  }

  CreateGateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateGateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateGateResponse& from);
  void MergeFrom(const CreateGateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateGateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.gates.CreateGateResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gates_2fgates_2eproto);
    return ::descriptor_table_gates_2fgates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.gates.CreateGateResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gates_2fgates_2eproto;
};
// -------------------------------------------------------------------

class GetGateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.gates.GetGateRequest) */ {
 public:
  GetGateRequest();
  virtual ~GetGateRequest();

  GetGateRequest(const GetGateRequest& from);
  GetGateRequest(GetGateRequest&& from) noexcept
    : GetGateRequest() {
    *this = ::std::move(from);
  }

  inline GetGateRequest& operator=(const GetGateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGateRequest& operator=(GetGateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGateRequest* internal_default_instance() {
    return reinterpret_cast<const GetGateRequest*>(
               &_GetGateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetGateRequest& a, GetGateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGateRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGateRequest* New() const final {
    return CreateMaybeMessage<GetGateRequest>(nullptr);
  }

  GetGateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGateRequest& from);
  void MergeFrom(const GetGateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.gates.GetGateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gates_2fgates_2eproto);
    return ::descriptor_table_gates_2fgates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.gates.GetGateRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gates_2fgates_2eproto;
};
// -------------------------------------------------------------------

class GetGateResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.gates.GetGateResponse) */ {
 public:
  GetGateResponse();
  virtual ~GetGateResponse();

  GetGateResponse(const GetGateResponse& from);
  GetGateResponse(GetGateResponse&& from) noexcept
    : GetGateResponse() {
    *this = ::std::move(from);
  }

  inline GetGateResponse& operator=(const GetGateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGateResponse& operator=(GetGateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGateResponse* internal_default_instance() {
    return reinterpret_cast<const GetGateResponse*>(
               &_GetGateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetGateResponse& a, GetGateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGateResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGateResponse* New() const final {
    return CreateMaybeMessage<GetGateResponse>(nullptr);
  }

  GetGateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGateResponse& from);
  void MergeFrom(const GetGateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.gates.GetGateResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gates_2fgates_2eproto);
    return ::descriptor_table_gates_2fgates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGateMovableObjectsFieldNumber = 2,
    kNameFieldNumber = 1,
    kSpotFieldNumber = 3,
    kOpenedFieldNumber = 4,
    kLockedFieldNumber = 5,
  };
  // repeated uint32 gate_movable_objects = 2;
  int gate_movable_objects_size() const;
  private:
  int _internal_gate_movable_objects_size() const;
  public:
  void clear_gate_movable_objects();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gate_movable_objects(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_gate_movable_objects() const;
  void _internal_add_gate_movable_objects(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_gate_movable_objects();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 gate_movable_objects(int index) const;
  void set_gate_movable_objects(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_gate_movable_objects(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      gate_movable_objects() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_gate_movable_objects();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .mruv.spots.Spot spot = 3;
  bool has_spot() const;
  private:
  bool _internal_has_spot() const;
  public:
  void clear_spot();
  const ::mruv::spots::Spot& spot() const;
  ::mruv::spots::Spot* release_spot();
  ::mruv::spots::Spot* mutable_spot();
  void set_allocated_spot(::mruv::spots::Spot* spot);
  private:
  const ::mruv::spots::Spot& _internal_spot() const;
  ::mruv::spots::Spot* _internal_mutable_spot();
  public:

  // bool opened = 4;
  void clear_opened();
  bool opened() const;
  void set_opened(bool value);
  private:
  bool _internal_opened() const;
  void _internal_set_opened(bool value);
  public:

  // bool locked = 5;
  void clear_locked();
  bool locked() const;
  void set_locked(bool value);
  private:
  bool _internal_locked() const;
  void _internal_set_locked(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.gates.GetGateResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > gate_movable_objects_;
  mutable std::atomic<int> _gate_movable_objects_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::mruv::spots::Spot* spot_;
  bool opened_;
  bool locked_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gates_2fgates_2eproto;
};
// -------------------------------------------------------------------

class UpdateGateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.gates.UpdateGateRequest) */ {
 public:
  UpdateGateRequest();
  virtual ~UpdateGateRequest();

  UpdateGateRequest(const UpdateGateRequest& from);
  UpdateGateRequest(UpdateGateRequest&& from) noexcept
    : UpdateGateRequest() {
    *this = ::std::move(from);
  }

  inline UpdateGateRequest& operator=(const UpdateGateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateGateRequest& operator=(UpdateGateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateGateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateGateRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateGateRequest*>(
               &_UpdateGateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UpdateGateRequest& a, UpdateGateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateGateRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateGateRequest* New() const final {
    return CreateMaybeMessage<UpdateGateRequest>(nullptr);
  }

  UpdateGateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateGateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateGateRequest& from);
  void MergeFrom(const UpdateGateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateGateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.gates.UpdateGateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gates_2fgates_2eproto);
    return ::descriptor_table_gates_2fgates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGateMovableObjectsFieldNumber = 4,
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kSpotIdFieldNumber = 3,
  };
  // repeated uint32 gate_movable_objects = 4;
  int gate_movable_objects_size() const;
  private:
  int _internal_gate_movable_objects_size() const;
  public:
  void clear_gate_movable_objects();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gate_movable_objects(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_gate_movable_objects() const;
  void _internal_add_gate_movable_objects(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_gate_movable_objects();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 gate_movable_objects(int index) const;
  void set_gate_movable_objects(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_gate_movable_objects(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      gate_movable_objects() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_gate_movable_objects();

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 spot_id = 3;
  void clear_spot_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 spot_id() const;
  void set_spot_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_spot_id() const;
  void _internal_set_spot_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.gates.UpdateGateRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > gate_movable_objects_;
  mutable std::atomic<int> _gate_movable_objects_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 spot_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gates_2fgates_2eproto;
};
// -------------------------------------------------------------------

class UpdateGateResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.gates.UpdateGateResponse) */ {
 public:
  UpdateGateResponse();
  virtual ~UpdateGateResponse();

  UpdateGateResponse(const UpdateGateResponse& from);
  UpdateGateResponse(UpdateGateResponse&& from) noexcept
    : UpdateGateResponse() {
    *this = ::std::move(from);
  }

  inline UpdateGateResponse& operator=(const UpdateGateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateGateResponse& operator=(UpdateGateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateGateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateGateResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateGateResponse*>(
               &_UpdateGateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UpdateGateResponse& a, UpdateGateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateGateResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateGateResponse* New() const final {
    return CreateMaybeMessage<UpdateGateResponse>(nullptr);
  }

  UpdateGateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateGateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateGateResponse& from);
  void MergeFrom(const UpdateGateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateGateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.gates.UpdateGateResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gates_2fgates_2eproto);
    return ::descriptor_table_gates_2fgates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.gates.UpdateGateResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gates_2fgates_2eproto;
};
// -------------------------------------------------------------------

class DeleteGateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.gates.DeleteGateRequest) */ {
 public:
  DeleteGateRequest();
  virtual ~DeleteGateRequest();

  DeleteGateRequest(const DeleteGateRequest& from);
  DeleteGateRequest(DeleteGateRequest&& from) noexcept
    : DeleteGateRequest() {
    *this = ::std::move(from);
  }

  inline DeleteGateRequest& operator=(const DeleteGateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteGateRequest& operator=(DeleteGateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteGateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteGateRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteGateRequest*>(
               &_DeleteGateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeleteGateRequest& a, DeleteGateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteGateRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteGateRequest* New() const final {
    return CreateMaybeMessage<DeleteGateRequest>(nullptr);
  }

  DeleteGateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteGateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteGateRequest& from);
  void MergeFrom(const DeleteGateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteGateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.gates.DeleteGateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gates_2fgates_2eproto);
    return ::descriptor_table_gates_2fgates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.gates.DeleteGateRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gates_2fgates_2eproto;
};
// -------------------------------------------------------------------

class DeleteGateResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.gates.DeleteGateResponse) */ {
 public:
  DeleteGateResponse();
  virtual ~DeleteGateResponse();

  DeleteGateResponse(const DeleteGateResponse& from);
  DeleteGateResponse(DeleteGateResponse&& from) noexcept
    : DeleteGateResponse() {
    *this = ::std::move(from);
  }

  inline DeleteGateResponse& operator=(const DeleteGateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteGateResponse& operator=(DeleteGateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteGateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteGateResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteGateResponse*>(
               &_DeleteGateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DeleteGateResponse& a, DeleteGateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteGateResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteGateResponse* New() const final {
    return CreateMaybeMessage<DeleteGateResponse>(nullptr);
  }

  DeleteGateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteGateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteGateResponse& from);
  void MergeFrom(const DeleteGateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteGateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.gates.DeleteGateResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gates_2fgates_2eproto);
    return ::descriptor_table_gates_2fgates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.gates.DeleteGateResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gates_2fgates_2eproto;
};
// -------------------------------------------------------------------

class LockRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.gates.LockRequest) */ {
 public:
  LockRequest();
  virtual ~LockRequest();

  LockRequest(const LockRequest& from);
  LockRequest(LockRequest&& from) noexcept
    : LockRequest() {
    *this = ::std::move(from);
  }

  inline LockRequest& operator=(const LockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LockRequest& operator=(LockRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LockRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LockRequest* internal_default_instance() {
    return reinterpret_cast<const LockRequest*>(
               &_LockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(LockRequest& a, LockRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LockRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LockRequest* New() const final {
    return CreateMaybeMessage<LockRequest>(nullptr);
  }

  LockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LockRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LockRequest& from);
  void MergeFrom(const LockRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LockRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.gates.LockRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gates_2fgates_2eproto);
    return ::descriptor_table_gates_2fgates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.gates.LockRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gates_2fgates_2eproto;
};
// -------------------------------------------------------------------

class LockResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.gates.LockResponse) */ {
 public:
  LockResponse();
  virtual ~LockResponse();

  LockResponse(const LockResponse& from);
  LockResponse(LockResponse&& from) noexcept
    : LockResponse() {
    *this = ::std::move(from);
  }

  inline LockResponse& operator=(const LockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LockResponse& operator=(LockResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LockResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LockResponse* internal_default_instance() {
    return reinterpret_cast<const LockResponse*>(
               &_LockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(LockResponse& a, LockResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LockResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LockResponse* New() const final {
    return CreateMaybeMessage<LockResponse>(nullptr);
  }

  LockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LockResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LockResponse& from);
  void MergeFrom(const LockResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LockResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.gates.LockResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gates_2fgates_2eproto);
    return ::descriptor_table_gates_2fgates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.gates.LockResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gates_2fgates_2eproto;
};
// -------------------------------------------------------------------

class UnlockRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.gates.UnlockRequest) */ {
 public:
  UnlockRequest();
  virtual ~UnlockRequest();

  UnlockRequest(const UnlockRequest& from);
  UnlockRequest(UnlockRequest&& from) noexcept
    : UnlockRequest() {
    *this = ::std::move(from);
  }

  inline UnlockRequest& operator=(const UnlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnlockRequest& operator=(UnlockRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnlockRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnlockRequest* internal_default_instance() {
    return reinterpret_cast<const UnlockRequest*>(
               &_UnlockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(UnlockRequest& a, UnlockRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnlockRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnlockRequest* New() const final {
    return CreateMaybeMessage<UnlockRequest>(nullptr);
  }

  UnlockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnlockRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnlockRequest& from);
  void MergeFrom(const UnlockRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnlockRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.gates.UnlockRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gates_2fgates_2eproto);
    return ::descriptor_table_gates_2fgates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.gates.UnlockRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gates_2fgates_2eproto;
};
// -------------------------------------------------------------------

class UnlockResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.gates.UnlockResponse) */ {
 public:
  UnlockResponse();
  virtual ~UnlockResponse();

  UnlockResponse(const UnlockResponse& from);
  UnlockResponse(UnlockResponse&& from) noexcept
    : UnlockResponse() {
    *this = ::std::move(from);
  }

  inline UnlockResponse& operator=(const UnlockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnlockResponse& operator=(UnlockResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnlockResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnlockResponse* internal_default_instance() {
    return reinterpret_cast<const UnlockResponse*>(
               &_UnlockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(UnlockResponse& a, UnlockResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UnlockResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnlockResponse* New() const final {
    return CreateMaybeMessage<UnlockResponse>(nullptr);
  }

  UnlockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnlockResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnlockResponse& from);
  void MergeFrom(const UnlockResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnlockResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.gates.UnlockResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gates_2fgates_2eproto);
    return ::descriptor_table_gates_2fgates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.gates.UnlockResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gates_2fgates_2eproto;
};
// -------------------------------------------------------------------

class OpenRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.gates.OpenRequest) */ {
 public:
  OpenRequest();
  virtual ~OpenRequest();

  OpenRequest(const OpenRequest& from);
  OpenRequest(OpenRequest&& from) noexcept
    : OpenRequest() {
    *this = ::std::move(from);
  }

  inline OpenRequest& operator=(const OpenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenRequest& operator=(OpenRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpenRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpenRequest* internal_default_instance() {
    return reinterpret_cast<const OpenRequest*>(
               &_OpenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(OpenRequest& a, OpenRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OpenRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpenRequest* New() const final {
    return CreateMaybeMessage<OpenRequest>(nullptr);
  }

  OpenRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpenRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpenRequest& from);
  void MergeFrom(const OpenRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.gates.OpenRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gates_2fgates_2eproto);
    return ::descriptor_table_gates_2fgates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.gates.OpenRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gates_2fgates_2eproto;
};
// -------------------------------------------------------------------

class OpenResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.gates.OpenResponse) */ {
 public:
  OpenResponse();
  virtual ~OpenResponse();

  OpenResponse(const OpenResponse& from);
  OpenResponse(OpenResponse&& from) noexcept
    : OpenResponse() {
    *this = ::std::move(from);
  }

  inline OpenResponse& operator=(const OpenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenResponse& operator=(OpenResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpenResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpenResponse* internal_default_instance() {
    return reinterpret_cast<const OpenResponse*>(
               &_OpenResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(OpenResponse& a, OpenResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OpenResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpenResponse* New() const final {
    return CreateMaybeMessage<OpenResponse>(nullptr);
  }

  OpenResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpenResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpenResponse& from);
  void MergeFrom(const OpenResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.gates.OpenResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gates_2fgates_2eproto);
    return ::descriptor_table_gates_2fgates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.gates.OpenResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gates_2fgates_2eproto;
};
// -------------------------------------------------------------------

class CloseRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.gates.CloseRequest) */ {
 public:
  CloseRequest();
  virtual ~CloseRequest();

  CloseRequest(const CloseRequest& from);
  CloseRequest(CloseRequest&& from) noexcept
    : CloseRequest() {
    *this = ::std::move(from);
  }

  inline CloseRequest& operator=(const CloseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseRequest& operator=(CloseRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseRequest* internal_default_instance() {
    return reinterpret_cast<const CloseRequest*>(
               &_CloseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CloseRequest& a, CloseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseRequest* New() const final {
    return CreateMaybeMessage<CloseRequest>(nullptr);
  }

  CloseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloseRequest& from);
  void MergeFrom(const CloseRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.gates.CloseRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gates_2fgates_2eproto);
    return ::descriptor_table_gates_2fgates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.gates.CloseRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gates_2fgates_2eproto;
};
// -------------------------------------------------------------------

class CloseResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.gates.CloseResponse) */ {
 public:
  CloseResponse();
  virtual ~CloseResponse();

  CloseResponse(const CloseResponse& from);
  CloseResponse(CloseResponse&& from) noexcept
    : CloseResponse() {
    *this = ::std::move(from);
  }

  inline CloseResponse& operator=(const CloseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseResponse& operator=(CloseResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloseResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseResponse* internal_default_instance() {
    return reinterpret_cast<const CloseResponse*>(
               &_CloseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CloseResponse& a, CloseResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseResponse* New() const final {
    return CreateMaybeMessage<CloseResponse>(nullptr);
  }

  CloseResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloseResponse& from);
  void MergeFrom(const CloseResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.gates.CloseResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gates_2fgates_2eproto);
    return ::descriptor_table_gates_2fgates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.gates.CloseResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gates_2fgates_2eproto;
};
// -------------------------------------------------------------------

class FindNearestGateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.gates.FindNearestGateRequest) */ {
 public:
  FindNearestGateRequest();
  virtual ~FindNearestGateRequest();

  FindNearestGateRequest(const FindNearestGateRequest& from);
  FindNearestGateRequest(FindNearestGateRequest&& from) noexcept
    : FindNearestGateRequest() {
    *this = ::std::move(from);
  }

  inline FindNearestGateRequest& operator=(const FindNearestGateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindNearestGateRequest& operator=(FindNearestGateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FindNearestGateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FindNearestGateRequest* internal_default_instance() {
    return reinterpret_cast<const FindNearestGateRequest*>(
               &_FindNearestGateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(FindNearestGateRequest& a, FindNearestGateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FindNearestGateRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindNearestGateRequest* New() const final {
    return CreateMaybeMessage<FindNearestGateRequest>(nullptr);
  }

  FindNearestGateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindNearestGateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FindNearestGateRequest& from);
  void MergeFrom(const FindNearestGateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindNearestGateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.gates.FindNearestGateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gates_2fgates_2eproto);
    return ::descriptor_table_gates_2fgates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kMaxDistanceFieldNumber = 4,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float max_distance = 4;
  void clear_max_distance();
  float max_distance() const;
  void set_max_distance(float value);
  private:
  float _internal_max_distance() const;
  void _internal_set_max_distance(float value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.gates.FindNearestGateRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  float max_distance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gates_2fgates_2eproto;
};
// -------------------------------------------------------------------

class FindNearestGateResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.gates.FindNearestGateResponse) */ {
 public:
  FindNearestGateResponse();
  virtual ~FindNearestGateResponse();

  FindNearestGateResponse(const FindNearestGateResponse& from);
  FindNearestGateResponse(FindNearestGateResponse&& from) noexcept
    : FindNearestGateResponse() {
    *this = ::std::move(from);
  }

  inline FindNearestGateResponse& operator=(const FindNearestGateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindNearestGateResponse& operator=(FindNearestGateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FindNearestGateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FindNearestGateResponse* internal_default_instance() {
    return reinterpret_cast<const FindNearestGateResponse*>(
               &_FindNearestGateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(FindNearestGateResponse& a, FindNearestGateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FindNearestGateResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindNearestGateResponse* New() const final {
    return CreateMaybeMessage<FindNearestGateResponse>(nullptr);
  }

  FindNearestGateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindNearestGateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FindNearestGateResponse& from);
  void MergeFrom(const FindNearestGateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindNearestGateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.gates.FindNearestGateResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gates_2fgates_2eproto);
    return ::descriptor_table_gates_2fgates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kDistanceFieldNumber = 2,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float distance = 2;
  void clear_distance();
  float distance() const;
  void set_distance(float value);
  private:
  float _internal_distance() const;
  void _internal_set_distance(float value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.gates.FindNearestGateResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  float distance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gates_2fgates_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Gate

// string name = 1;
inline void Gate::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Gate::name() const {
  // @@protoc_insertion_point(field_get:mruv.gates.Gate.name)
  return _internal_name();
}
inline void Gate::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mruv.gates.Gate.name)
}
inline std::string* Gate::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mruv.gates.Gate.name)
  return _internal_mutable_name();
}
inline const std::string& Gate::_internal_name() const {
  return name_.GetNoArena();
}
inline void Gate::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Gate::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.gates.Gate.name)
}
inline void Gate::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.gates.Gate.name)
}
inline void Gate::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.gates.Gate.name)
}
inline std::string* Gate::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Gate::release_name() {
  // @@protoc_insertion_point(field_release:mruv.gates.Gate.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Gate::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mruv.gates.Gate.name)
}

// repeated .mruv.objects.MovableObject gate_objects = 2;
inline int Gate::_internal_gate_objects_size() const {
  return gate_objects_.size();
}
inline int Gate::gate_objects_size() const {
  return _internal_gate_objects_size();
}
inline ::mruv::objects::MovableObject* Gate::mutable_gate_objects(int index) {
  // @@protoc_insertion_point(field_mutable:mruv.gates.Gate.gate_objects)
  return gate_objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::objects::MovableObject >*
Gate::mutable_gate_objects() {
  // @@protoc_insertion_point(field_mutable_list:mruv.gates.Gate.gate_objects)
  return &gate_objects_;
}
inline const ::mruv::objects::MovableObject& Gate::_internal_gate_objects(int index) const {
  return gate_objects_.Get(index);
}
inline const ::mruv::objects::MovableObject& Gate::gate_objects(int index) const {
  // @@protoc_insertion_point(field_get:mruv.gates.Gate.gate_objects)
  return _internal_gate_objects(index);
}
inline ::mruv::objects::MovableObject* Gate::_internal_add_gate_objects() {
  return gate_objects_.Add();
}
inline ::mruv::objects::MovableObject* Gate::add_gate_objects() {
  // @@protoc_insertion_point(field_add:mruv.gates.Gate.gate_objects)
  return _internal_add_gate_objects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::objects::MovableObject >&
Gate::gate_objects() const {
  // @@protoc_insertion_point(field_list:mruv.gates.Gate.gate_objects)
  return gate_objects_;
}

// .mruv.spots.Spot spot = 3;
inline bool Gate::_internal_has_spot() const {
  return this != internal_default_instance() && spot_ != nullptr;
}
inline bool Gate::has_spot() const {
  return _internal_has_spot();
}
inline const ::mruv::spots::Spot& Gate::_internal_spot() const {
  const ::mruv::spots::Spot* p = spot_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mruv::spots::Spot*>(
      &::mruv::spots::_Spot_default_instance_);
}
inline const ::mruv::spots::Spot& Gate::spot() const {
  // @@protoc_insertion_point(field_get:mruv.gates.Gate.spot)
  return _internal_spot();
}
inline ::mruv::spots::Spot* Gate::release_spot() {
  // @@protoc_insertion_point(field_release:mruv.gates.Gate.spot)
  
  ::mruv::spots::Spot* temp = spot_;
  spot_ = nullptr;
  return temp;
}
inline ::mruv::spots::Spot* Gate::_internal_mutable_spot() {
  
  if (spot_ == nullptr) {
    auto* p = CreateMaybeMessage<::mruv::spots::Spot>(GetArenaNoVirtual());
    spot_ = p;
  }
  return spot_;
}
inline ::mruv::spots::Spot* Gate::mutable_spot() {
  // @@protoc_insertion_point(field_mutable:mruv.gates.Gate.spot)
  return _internal_mutable_spot();
}
inline void Gate::set_allocated_spot(::mruv::spots::Spot* spot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(spot_);
  }
  if (spot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      spot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spot, submessage_arena);
    }
    
  } else {
    
  }
  spot_ = spot;
  // @@protoc_insertion_point(field_set_allocated:mruv.gates.Gate.spot)
}

// bool opened = 4;
inline void Gate::clear_opened() {
  opened_ = false;
}
inline bool Gate::_internal_opened() const {
  return opened_;
}
inline bool Gate::opened() const {
  // @@protoc_insertion_point(field_get:mruv.gates.Gate.opened)
  return _internal_opened();
}
inline void Gate::_internal_set_opened(bool value) {
  
  opened_ = value;
}
inline void Gate::set_opened(bool value) {
  _internal_set_opened(value);
  // @@protoc_insertion_point(field_set:mruv.gates.Gate.opened)
}

// bool locked = 5;
inline void Gate::clear_locked() {
  locked_ = false;
}
inline bool Gate::_internal_locked() const {
  return locked_;
}
inline bool Gate::locked() const {
  // @@protoc_insertion_point(field_get:mruv.gates.Gate.locked)
  return _internal_locked();
}
inline void Gate::_internal_set_locked(bool value) {
  
  locked_ = value;
}
inline void Gate::set_locked(bool value) {
  _internal_set_locked(value);
  // @@protoc_insertion_point(field_set:mruv.gates.Gate.locked)
}

// -------------------------------------------------------------------

// CreateGateRequest

// string name = 1;
inline void CreateGateRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateGateRequest::name() const {
  // @@protoc_insertion_point(field_get:mruv.gates.CreateGateRequest.name)
  return _internal_name();
}
inline void CreateGateRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mruv.gates.CreateGateRequest.name)
}
inline std::string* CreateGateRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mruv.gates.CreateGateRequest.name)
  return _internal_mutable_name();
}
inline const std::string& CreateGateRequest::_internal_name() const {
  return name_.GetNoArena();
}
inline void CreateGateRequest::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateGateRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.gates.CreateGateRequest.name)
}
inline void CreateGateRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.gates.CreateGateRequest.name)
}
inline void CreateGateRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.gates.CreateGateRequest.name)
}
inline std::string* CreateGateRequest::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateGateRequest::release_name() {
  // @@protoc_insertion_point(field_release:mruv.gates.CreateGateRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateGateRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mruv.gates.CreateGateRequest.name)
}

// repeated .mruv.objects.MovableObject gate_objects = 2;
inline int CreateGateRequest::_internal_gate_objects_size() const {
  return gate_objects_.size();
}
inline int CreateGateRequest::gate_objects_size() const {
  return _internal_gate_objects_size();
}
inline ::mruv::objects::MovableObject* CreateGateRequest::mutable_gate_objects(int index) {
  // @@protoc_insertion_point(field_mutable:mruv.gates.CreateGateRequest.gate_objects)
  return gate_objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::objects::MovableObject >*
CreateGateRequest::mutable_gate_objects() {
  // @@protoc_insertion_point(field_mutable_list:mruv.gates.CreateGateRequest.gate_objects)
  return &gate_objects_;
}
inline const ::mruv::objects::MovableObject& CreateGateRequest::_internal_gate_objects(int index) const {
  return gate_objects_.Get(index);
}
inline const ::mruv::objects::MovableObject& CreateGateRequest::gate_objects(int index) const {
  // @@protoc_insertion_point(field_get:mruv.gates.CreateGateRequest.gate_objects)
  return _internal_gate_objects(index);
}
inline ::mruv::objects::MovableObject* CreateGateRequest::_internal_add_gate_objects() {
  return gate_objects_.Add();
}
inline ::mruv::objects::MovableObject* CreateGateRequest::add_gate_objects() {
  // @@protoc_insertion_point(field_add:mruv.gates.CreateGateRequest.gate_objects)
  return _internal_add_gate_objects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::objects::MovableObject >&
CreateGateRequest::gate_objects() const {
  // @@protoc_insertion_point(field_list:mruv.gates.CreateGateRequest.gate_objects)
  return gate_objects_;
}

// .mruv.spots.Spot spot = 3;
inline bool CreateGateRequest::_internal_has_spot() const {
  return this != internal_default_instance() && spot_ != nullptr;
}
inline bool CreateGateRequest::has_spot() const {
  return _internal_has_spot();
}
inline const ::mruv::spots::Spot& CreateGateRequest::_internal_spot() const {
  const ::mruv::spots::Spot* p = spot_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mruv::spots::Spot*>(
      &::mruv::spots::_Spot_default_instance_);
}
inline const ::mruv::spots::Spot& CreateGateRequest::spot() const {
  // @@protoc_insertion_point(field_get:mruv.gates.CreateGateRequest.spot)
  return _internal_spot();
}
inline ::mruv::spots::Spot* CreateGateRequest::release_spot() {
  // @@protoc_insertion_point(field_release:mruv.gates.CreateGateRequest.spot)
  
  ::mruv::spots::Spot* temp = spot_;
  spot_ = nullptr;
  return temp;
}
inline ::mruv::spots::Spot* CreateGateRequest::_internal_mutable_spot() {
  
  if (spot_ == nullptr) {
    auto* p = CreateMaybeMessage<::mruv::spots::Spot>(GetArenaNoVirtual());
    spot_ = p;
  }
  return spot_;
}
inline ::mruv::spots::Spot* CreateGateRequest::mutable_spot() {
  // @@protoc_insertion_point(field_mutable:mruv.gates.CreateGateRequest.spot)
  return _internal_mutable_spot();
}
inline void CreateGateRequest::set_allocated_spot(::mruv::spots::Spot* spot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(spot_);
  }
  if (spot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      spot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spot, submessage_arena);
    }
    
  } else {
    
  }
  spot_ = spot;
  // @@protoc_insertion_point(field_set_allocated:mruv.gates.CreateGateRequest.spot)
}

// -------------------------------------------------------------------

// CreateGateResponse

// uint32 id = 1;
inline void CreateGateResponse::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateGateResponse::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateGateResponse::id() const {
  // @@protoc_insertion_point(field_get:mruv.gates.CreateGateResponse.id)
  return _internal_id();
}
inline void CreateGateResponse::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void CreateGateResponse::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.gates.CreateGateResponse.id)
}

// -------------------------------------------------------------------

// GetGateRequest

// uint32 id = 1;
inline void GetGateRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetGateRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetGateRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.gates.GetGateRequest.id)
  return _internal_id();
}
inline void GetGateRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void GetGateRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.gates.GetGateRequest.id)
}

// -------------------------------------------------------------------

// GetGateResponse

// string name = 1;
inline void GetGateResponse::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetGateResponse::name() const {
  // @@protoc_insertion_point(field_get:mruv.gates.GetGateResponse.name)
  return _internal_name();
}
inline void GetGateResponse::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mruv.gates.GetGateResponse.name)
}
inline std::string* GetGateResponse::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mruv.gates.GetGateResponse.name)
  return _internal_mutable_name();
}
inline const std::string& GetGateResponse::_internal_name() const {
  return name_.GetNoArena();
}
inline void GetGateResponse::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetGateResponse::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.gates.GetGateResponse.name)
}
inline void GetGateResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.gates.GetGateResponse.name)
}
inline void GetGateResponse::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.gates.GetGateResponse.name)
}
inline std::string* GetGateResponse::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetGateResponse::release_name() {
  // @@protoc_insertion_point(field_release:mruv.gates.GetGateResponse.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetGateResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mruv.gates.GetGateResponse.name)
}

// repeated uint32 gate_movable_objects = 2;
inline int GetGateResponse::_internal_gate_movable_objects_size() const {
  return gate_movable_objects_.size();
}
inline int GetGateResponse::gate_movable_objects_size() const {
  return _internal_gate_movable_objects_size();
}
inline void GetGateResponse::clear_gate_movable_objects() {
  gate_movable_objects_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetGateResponse::_internal_gate_movable_objects(int index) const {
  return gate_movable_objects_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetGateResponse::gate_movable_objects(int index) const {
  // @@protoc_insertion_point(field_get:mruv.gates.GetGateResponse.gate_movable_objects)
  return _internal_gate_movable_objects(index);
}
inline void GetGateResponse::set_gate_movable_objects(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  gate_movable_objects_.Set(index, value);
  // @@protoc_insertion_point(field_set:mruv.gates.GetGateResponse.gate_movable_objects)
}
inline void GetGateResponse::_internal_add_gate_movable_objects(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  gate_movable_objects_.Add(value);
}
inline void GetGateResponse::add_gate_movable_objects(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_gate_movable_objects(value);
  // @@protoc_insertion_point(field_add:mruv.gates.GetGateResponse.gate_movable_objects)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
GetGateResponse::_internal_gate_movable_objects() const {
  return gate_movable_objects_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
GetGateResponse::gate_movable_objects() const {
  // @@protoc_insertion_point(field_list:mruv.gates.GetGateResponse.gate_movable_objects)
  return _internal_gate_movable_objects();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
GetGateResponse::_internal_mutable_gate_movable_objects() {
  return &gate_movable_objects_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
GetGateResponse::mutable_gate_movable_objects() {
  // @@protoc_insertion_point(field_mutable_list:mruv.gates.GetGateResponse.gate_movable_objects)
  return _internal_mutable_gate_movable_objects();
}

// .mruv.spots.Spot spot = 3;
inline bool GetGateResponse::_internal_has_spot() const {
  return this != internal_default_instance() && spot_ != nullptr;
}
inline bool GetGateResponse::has_spot() const {
  return _internal_has_spot();
}
inline const ::mruv::spots::Spot& GetGateResponse::_internal_spot() const {
  const ::mruv::spots::Spot* p = spot_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mruv::spots::Spot*>(
      &::mruv::spots::_Spot_default_instance_);
}
inline const ::mruv::spots::Spot& GetGateResponse::spot() const {
  // @@protoc_insertion_point(field_get:mruv.gates.GetGateResponse.spot)
  return _internal_spot();
}
inline ::mruv::spots::Spot* GetGateResponse::release_spot() {
  // @@protoc_insertion_point(field_release:mruv.gates.GetGateResponse.spot)
  
  ::mruv::spots::Spot* temp = spot_;
  spot_ = nullptr;
  return temp;
}
inline ::mruv::spots::Spot* GetGateResponse::_internal_mutable_spot() {
  
  if (spot_ == nullptr) {
    auto* p = CreateMaybeMessage<::mruv::spots::Spot>(GetArenaNoVirtual());
    spot_ = p;
  }
  return spot_;
}
inline ::mruv::spots::Spot* GetGateResponse::mutable_spot() {
  // @@protoc_insertion_point(field_mutable:mruv.gates.GetGateResponse.spot)
  return _internal_mutable_spot();
}
inline void GetGateResponse::set_allocated_spot(::mruv::spots::Spot* spot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(spot_);
  }
  if (spot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      spot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spot, submessage_arena);
    }
    
  } else {
    
  }
  spot_ = spot;
  // @@protoc_insertion_point(field_set_allocated:mruv.gates.GetGateResponse.spot)
}

// bool opened = 4;
inline void GetGateResponse::clear_opened() {
  opened_ = false;
}
inline bool GetGateResponse::_internal_opened() const {
  return opened_;
}
inline bool GetGateResponse::opened() const {
  // @@protoc_insertion_point(field_get:mruv.gates.GetGateResponse.opened)
  return _internal_opened();
}
inline void GetGateResponse::_internal_set_opened(bool value) {
  
  opened_ = value;
}
inline void GetGateResponse::set_opened(bool value) {
  _internal_set_opened(value);
  // @@protoc_insertion_point(field_set:mruv.gates.GetGateResponse.opened)
}

// bool locked = 5;
inline void GetGateResponse::clear_locked() {
  locked_ = false;
}
inline bool GetGateResponse::_internal_locked() const {
  return locked_;
}
inline bool GetGateResponse::locked() const {
  // @@protoc_insertion_point(field_get:mruv.gates.GetGateResponse.locked)
  return _internal_locked();
}
inline void GetGateResponse::_internal_set_locked(bool value) {
  
  locked_ = value;
}
inline void GetGateResponse::set_locked(bool value) {
  _internal_set_locked(value);
  // @@protoc_insertion_point(field_set:mruv.gates.GetGateResponse.locked)
}

// -------------------------------------------------------------------

// UpdateGateRequest

// uint32 id = 1;
inline void UpdateGateRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateGateRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateGateRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.gates.UpdateGateRequest.id)
  return _internal_id();
}
inline void UpdateGateRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void UpdateGateRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.gates.UpdateGateRequest.id)
}

// string name = 2;
inline void UpdateGateRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpdateGateRequest::name() const {
  // @@protoc_insertion_point(field_get:mruv.gates.UpdateGateRequest.name)
  return _internal_name();
}
inline void UpdateGateRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mruv.gates.UpdateGateRequest.name)
}
inline std::string* UpdateGateRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mruv.gates.UpdateGateRequest.name)
  return _internal_mutable_name();
}
inline const std::string& UpdateGateRequest::_internal_name() const {
  return name_.GetNoArena();
}
inline void UpdateGateRequest::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpdateGateRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.gates.UpdateGateRequest.name)
}
inline void UpdateGateRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.gates.UpdateGateRequest.name)
}
inline void UpdateGateRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.gates.UpdateGateRequest.name)
}
inline std::string* UpdateGateRequest::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateGateRequest::release_name() {
  // @@protoc_insertion_point(field_release:mruv.gates.UpdateGateRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateGateRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mruv.gates.UpdateGateRequest.name)
}

// uint32 spot_id = 3;
inline void UpdateGateRequest::clear_spot_id() {
  spot_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateGateRequest::_internal_spot_id() const {
  return spot_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateGateRequest::spot_id() const {
  // @@protoc_insertion_point(field_get:mruv.gates.UpdateGateRequest.spot_id)
  return _internal_spot_id();
}
inline void UpdateGateRequest::_internal_set_spot_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  spot_id_ = value;
}
inline void UpdateGateRequest::set_spot_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_spot_id(value);
  // @@protoc_insertion_point(field_set:mruv.gates.UpdateGateRequest.spot_id)
}

// repeated uint32 gate_movable_objects = 4;
inline int UpdateGateRequest::_internal_gate_movable_objects_size() const {
  return gate_movable_objects_.size();
}
inline int UpdateGateRequest::gate_movable_objects_size() const {
  return _internal_gate_movable_objects_size();
}
inline void UpdateGateRequest::clear_gate_movable_objects() {
  gate_movable_objects_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateGateRequest::_internal_gate_movable_objects(int index) const {
  return gate_movable_objects_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateGateRequest::gate_movable_objects(int index) const {
  // @@protoc_insertion_point(field_get:mruv.gates.UpdateGateRequest.gate_movable_objects)
  return _internal_gate_movable_objects(index);
}
inline void UpdateGateRequest::set_gate_movable_objects(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  gate_movable_objects_.Set(index, value);
  // @@protoc_insertion_point(field_set:mruv.gates.UpdateGateRequest.gate_movable_objects)
}
inline void UpdateGateRequest::_internal_add_gate_movable_objects(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  gate_movable_objects_.Add(value);
}
inline void UpdateGateRequest::add_gate_movable_objects(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_gate_movable_objects(value);
  // @@protoc_insertion_point(field_add:mruv.gates.UpdateGateRequest.gate_movable_objects)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
UpdateGateRequest::_internal_gate_movable_objects() const {
  return gate_movable_objects_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
UpdateGateRequest::gate_movable_objects() const {
  // @@protoc_insertion_point(field_list:mruv.gates.UpdateGateRequest.gate_movable_objects)
  return _internal_gate_movable_objects();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
UpdateGateRequest::_internal_mutable_gate_movable_objects() {
  return &gate_movable_objects_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
UpdateGateRequest::mutable_gate_movable_objects() {
  // @@protoc_insertion_point(field_mutable_list:mruv.gates.UpdateGateRequest.gate_movable_objects)
  return _internal_mutable_gate_movable_objects();
}

// -------------------------------------------------------------------

// UpdateGateResponse

// -------------------------------------------------------------------

// DeleteGateRequest

// uint32 id = 1;
inline void DeleteGateRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteGateRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteGateRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.gates.DeleteGateRequest.id)
  return _internal_id();
}
inline void DeleteGateRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void DeleteGateRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.gates.DeleteGateRequest.id)
}

// -------------------------------------------------------------------

// DeleteGateResponse

// -------------------------------------------------------------------

// LockRequest

// uint32 id = 1;
inline void LockRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LockRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LockRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.gates.LockRequest.id)
  return _internal_id();
}
inline void LockRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void LockRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.gates.LockRequest.id)
}

// -------------------------------------------------------------------

// LockResponse

// -------------------------------------------------------------------

// UnlockRequest

// uint32 id = 1;
inline void UnlockRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnlockRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnlockRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.gates.UnlockRequest.id)
  return _internal_id();
}
inline void UnlockRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void UnlockRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.gates.UnlockRequest.id)
}

// -------------------------------------------------------------------

// UnlockResponse

// -------------------------------------------------------------------

// OpenRequest

// uint32 id = 1;
inline void OpenRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OpenRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OpenRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.gates.OpenRequest.id)
  return _internal_id();
}
inline void OpenRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void OpenRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.gates.OpenRequest.id)
}

// -------------------------------------------------------------------

// OpenResponse

// -------------------------------------------------------------------

// CloseRequest

// uint32 id = 1;
inline void CloseRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CloseRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CloseRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.gates.CloseRequest.id)
  return _internal_id();
}
inline void CloseRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void CloseRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.gates.CloseRequest.id)
}

// -------------------------------------------------------------------

// CloseResponse

// -------------------------------------------------------------------

// FindNearestGateRequest

// float x = 1;
inline void FindNearestGateRequest::clear_x() {
  x_ = 0;
}
inline float FindNearestGateRequest::_internal_x() const {
  return x_;
}
inline float FindNearestGateRequest::x() const {
  // @@protoc_insertion_point(field_get:mruv.gates.FindNearestGateRequest.x)
  return _internal_x();
}
inline void FindNearestGateRequest::_internal_set_x(float value) {
  
  x_ = value;
}
inline void FindNearestGateRequest::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:mruv.gates.FindNearestGateRequest.x)
}

// float y = 2;
inline void FindNearestGateRequest::clear_y() {
  y_ = 0;
}
inline float FindNearestGateRequest::_internal_y() const {
  return y_;
}
inline float FindNearestGateRequest::y() const {
  // @@protoc_insertion_point(field_get:mruv.gates.FindNearestGateRequest.y)
  return _internal_y();
}
inline void FindNearestGateRequest::_internal_set_y(float value) {
  
  y_ = value;
}
inline void FindNearestGateRequest::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:mruv.gates.FindNearestGateRequest.y)
}

// float z = 3;
inline void FindNearestGateRequest::clear_z() {
  z_ = 0;
}
inline float FindNearestGateRequest::_internal_z() const {
  return z_;
}
inline float FindNearestGateRequest::z() const {
  // @@protoc_insertion_point(field_get:mruv.gates.FindNearestGateRequest.z)
  return _internal_z();
}
inline void FindNearestGateRequest::_internal_set_z(float value) {
  
  z_ = value;
}
inline void FindNearestGateRequest::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:mruv.gates.FindNearestGateRequest.z)
}

// float max_distance = 4;
inline void FindNearestGateRequest::clear_max_distance() {
  max_distance_ = 0;
}
inline float FindNearestGateRequest::_internal_max_distance() const {
  return max_distance_;
}
inline float FindNearestGateRequest::max_distance() const {
  // @@protoc_insertion_point(field_get:mruv.gates.FindNearestGateRequest.max_distance)
  return _internal_max_distance();
}
inline void FindNearestGateRequest::_internal_set_max_distance(float value) {
  
  max_distance_ = value;
}
inline void FindNearestGateRequest::set_max_distance(float value) {
  _internal_set_max_distance(value);
  // @@protoc_insertion_point(field_set:mruv.gates.FindNearestGateRequest.max_distance)
}

// -------------------------------------------------------------------

// FindNearestGateResponse

// uint32 id = 1;
inline void FindNearestGateResponse::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FindNearestGateResponse::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FindNearestGateResponse::id() const {
  // @@protoc_insertion_point(field_get:mruv.gates.FindNearestGateResponse.id)
  return _internal_id();
}
inline void FindNearestGateResponse::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void FindNearestGateResponse::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.gates.FindNearestGateResponse.id)
}

// float distance = 2;
inline void FindNearestGateResponse::clear_distance() {
  distance_ = 0;
}
inline float FindNearestGateResponse::_internal_distance() const {
  return distance_;
}
inline float FindNearestGateResponse::distance() const {
  // @@protoc_insertion_point(field_get:mruv.gates.FindNearestGateResponse.distance)
  return _internal_distance();
}
inline void FindNearestGateResponse::_internal_set_distance(float value) {
  
  distance_ = value;
}
inline void FindNearestGateResponse::set_distance(float value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:mruv.gates.FindNearestGateResponse.distance)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gates
}  // namespace mruv

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gates_2fgates_2eproto
