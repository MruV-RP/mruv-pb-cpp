// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: gates/gates.proto
#ifndef GRPC_gates_2fgates_2eproto__INCLUDED
#define GRPC_gates_2fgates_2eproto__INCLUDED

#include "gates/gates.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace mruv {
namespace gates {

// The MruV gates service provides procedures for managing gates and moving objects groups.
class MruVGatesService final {
 public:
  static constexpr char const* service_full_name() {
    return "mruv.gates.MruVGatesService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Create a gate or a moving objects objects group.
    virtual ::grpc::Status CreateGate(::grpc::ClientContext* context, const ::mruv::gates::CreateGateRequest& request, ::mruv::gates::CreateGateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::CreateGateResponse>> AsyncCreateGate(::grpc::ClientContext* context, const ::mruv::gates::CreateGateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::CreateGateResponse>>(AsyncCreateGateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::CreateGateResponse>> PrepareAsyncCreateGate(::grpc::ClientContext* context, const ::mruv::gates::CreateGateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::CreateGateResponse>>(PrepareAsyncCreateGateRaw(context, request, cq));
    }
    // Get a gate or a moving objects objects group.
    virtual ::grpc::Status GetGate(::grpc::ClientContext* context, const ::mruv::gates::GetGateRequest& request, ::mruv::gates::GetGateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::GetGateResponse>> AsyncGetGate(::grpc::ClientContext* context, const ::mruv::gates::GetGateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::GetGateResponse>>(AsyncGetGateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::GetGateResponse>> PrepareAsyncGetGate(::grpc::ClientContext* context, const ::mruv::gates::GetGateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::GetGateResponse>>(PrepareAsyncGetGateRaw(context, request, cq));
    }
    // Update a gate or a moving objects objects group.
    virtual ::grpc::Status UpdateGate(::grpc::ClientContext* context, const ::mruv::gates::UpdateGateRequest& request, ::mruv::gates::UpdateGateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::UpdateGateResponse>> AsyncUpdateGate(::grpc::ClientContext* context, const ::mruv::gates::UpdateGateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::UpdateGateResponse>>(AsyncUpdateGateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::UpdateGateResponse>> PrepareAsyncUpdateGate(::grpc::ClientContext* context, const ::mruv::gates::UpdateGateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::UpdateGateResponse>>(PrepareAsyncUpdateGateRaw(context, request, cq));
    }
    // Delete a gate or a moving objects objects group.
    virtual ::grpc::Status DeleteGate(::grpc::ClientContext* context, const ::mruv::gates::DeleteGateRequest& request, ::mruv::gates::DeleteGateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::DeleteGateResponse>> AsyncDeleteGate(::grpc::ClientContext* context, const ::mruv::gates::DeleteGateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::DeleteGateResponse>>(AsyncDeleteGateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::DeleteGateResponse>> PrepareAsyncDeleteGate(::grpc::ClientContext* context, const ::mruv::gates::DeleteGateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::DeleteGateResponse>>(PrepareAsyncDeleteGateRaw(context, request, cq));
    }
    // Lock a gate. Locked gate cannot be opened.
    virtual ::grpc::Status Lock(::grpc::ClientContext* context, const ::mruv::gates::LockRequest& request, ::mruv::gates::LockResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::LockResponse>> AsyncLock(::grpc::ClientContext* context, const ::mruv::gates::LockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::LockResponse>>(AsyncLockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::LockResponse>> PrepareAsyncLock(::grpc::ClientContext* context, const ::mruv::gates::LockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::LockResponse>>(PrepareAsyncLockRaw(context, request, cq));
    }
    // Unload a gate, so it can be open.
    virtual ::grpc::Status Unlock(::grpc::ClientContext* context, const ::mruv::gates::UnlockRequest& request, ::mruv::gates::UnlockResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::UnlockResponse>> AsyncUnlock(::grpc::ClientContext* context, const ::mruv::gates::UnlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::UnlockResponse>>(AsyncUnlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::UnlockResponse>> PrepareAsyncUnlock(::grpc::ClientContext* context, const ::mruv::gates::UnlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::UnlockResponse>>(PrepareAsyncUnlockRaw(context, request, cq));
    }
    // Opens a gate.
    virtual ::grpc::Status Open(::grpc::ClientContext* context, const ::mruv::gates::OpenRequest& request, ::mruv::gates::OpenResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::OpenResponse>> AsyncOpen(::grpc::ClientContext* context, const ::mruv::gates::OpenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::OpenResponse>>(AsyncOpenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::OpenResponse>> PrepareAsyncOpen(::grpc::ClientContext* context, const ::mruv::gates::OpenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::OpenResponse>>(PrepareAsyncOpenRaw(context, request, cq));
    }
    // Close a gate.
    virtual ::grpc::Status Close(::grpc::ClientContext* context, const ::mruv::gates::CloseRequest& request, ::mruv::gates::CloseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::CloseResponse>> AsyncClose(::grpc::ClientContext* context, const ::mruv::gates::CloseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::CloseResponse>>(AsyncCloseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::CloseResponse>> PrepareAsyncClose(::grpc::ClientContext* context, const ::mruv::gates::CloseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::CloseResponse>>(PrepareAsyncCloseRaw(context, request, cq));
    }
    // Find gate that is closest to a specific position.
    virtual ::grpc::Status FindNearestGate(::grpc::ClientContext* context, const ::mruv::gates::FindNearestGateRequest& request, ::mruv::gates::FindNearestGateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::FindNearestGateResponse>> AsyncFindNearestGate(::grpc::ClientContext* context, const ::mruv::gates::FindNearestGateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::FindNearestGateResponse>>(AsyncFindNearestGateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::FindNearestGateResponse>> PrepareAsyncFindNearestGate(::grpc::ClientContext* context, const ::mruv::gates::FindNearestGateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::FindNearestGateResponse>>(PrepareAsyncFindNearestGateRaw(context, request, cq));
    }
    //
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mruv::gates::FetchAllGatesResponse>> FetchAll(::grpc::ClientContext* context, const ::mruv::gates::FetchAllGatesRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mruv::gates::FetchAllGatesResponse>>(FetchAllRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mruv::gates::FetchAllGatesResponse>> AsyncFetchAll(::grpc::ClientContext* context, const ::mruv::gates::FetchAllGatesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mruv::gates::FetchAllGatesResponse>>(AsyncFetchAllRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mruv::gates::FetchAllGatesResponse>> PrepareAsyncFetchAll(::grpc::ClientContext* context, const ::mruv::gates::FetchAllGatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mruv::gates::FetchAllGatesResponse>>(PrepareAsyncFetchAllRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Create a gate or a moving objects objects group.
      virtual void CreateGate(::grpc::ClientContext* context, const ::mruv::gates::CreateGateRequest* request, ::mruv::gates::CreateGateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateGate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::CreateGateResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateGate(::grpc::ClientContext* context, const ::mruv::gates::CreateGateRequest* request, ::mruv::gates::CreateGateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateGate(::grpc::ClientContext* context, const ::mruv::gates::CreateGateRequest* request, ::mruv::gates::CreateGateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateGate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::CreateGateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateGate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::CreateGateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get a gate or a moving objects objects group.
      virtual void GetGate(::grpc::ClientContext* context, const ::mruv::gates::GetGateRequest* request, ::mruv::gates::GetGateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetGate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::GetGateResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetGate(::grpc::ClientContext* context, const ::mruv::gates::GetGateRequest* request, ::mruv::gates::GetGateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetGate(::grpc::ClientContext* context, const ::mruv::gates::GetGateRequest* request, ::mruv::gates::GetGateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetGate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::GetGateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetGate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::GetGateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Update a gate or a moving objects objects group.
      virtual void UpdateGate(::grpc::ClientContext* context, const ::mruv::gates::UpdateGateRequest* request, ::mruv::gates::UpdateGateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateGate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::UpdateGateResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateGate(::grpc::ClientContext* context, const ::mruv::gates::UpdateGateRequest* request, ::mruv::gates::UpdateGateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateGate(::grpc::ClientContext* context, const ::mruv::gates::UpdateGateRequest* request, ::mruv::gates::UpdateGateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateGate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::UpdateGateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateGate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::UpdateGateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Delete a gate or a moving objects objects group.
      virtual void DeleteGate(::grpc::ClientContext* context, const ::mruv::gates::DeleteGateRequest* request, ::mruv::gates::DeleteGateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteGate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::DeleteGateResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteGate(::grpc::ClientContext* context, const ::mruv::gates::DeleteGateRequest* request, ::mruv::gates::DeleteGateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteGate(::grpc::ClientContext* context, const ::mruv::gates::DeleteGateRequest* request, ::mruv::gates::DeleteGateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteGate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::DeleteGateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteGate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::DeleteGateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Lock a gate. Locked gate cannot be opened.
      virtual void Lock(::grpc::ClientContext* context, const ::mruv::gates::LockRequest* request, ::mruv::gates::LockResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Lock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::LockResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Lock(::grpc::ClientContext* context, const ::mruv::gates::LockRequest* request, ::mruv::gates::LockResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Lock(::grpc::ClientContext* context, const ::mruv::gates::LockRequest* request, ::mruv::gates::LockResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Lock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::LockResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Lock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::LockResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Unload a gate, so it can be open.
      virtual void Unlock(::grpc::ClientContext* context, const ::mruv::gates::UnlockRequest* request, ::mruv::gates::UnlockResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Unlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::UnlockResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Unlock(::grpc::ClientContext* context, const ::mruv::gates::UnlockRequest* request, ::mruv::gates::UnlockResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Unlock(::grpc::ClientContext* context, const ::mruv::gates::UnlockRequest* request, ::mruv::gates::UnlockResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Unlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::UnlockResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Unlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::UnlockResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Opens a gate.
      virtual void Open(::grpc::ClientContext* context, const ::mruv::gates::OpenRequest* request, ::mruv::gates::OpenResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Open(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::OpenResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Open(::grpc::ClientContext* context, const ::mruv::gates::OpenRequest* request, ::mruv::gates::OpenResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Open(::grpc::ClientContext* context, const ::mruv::gates::OpenRequest* request, ::mruv::gates::OpenResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Open(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::OpenResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Open(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::OpenResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Close a gate.
      virtual void Close(::grpc::ClientContext* context, const ::mruv::gates::CloseRequest* request, ::mruv::gates::CloseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Close(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::CloseResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Close(::grpc::ClientContext* context, const ::mruv::gates::CloseRequest* request, ::mruv::gates::CloseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Close(::grpc::ClientContext* context, const ::mruv::gates::CloseRequest* request, ::mruv::gates::CloseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Close(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::CloseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Close(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::CloseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Find gate that is closest to a specific position.
      virtual void FindNearestGate(::grpc::ClientContext* context, const ::mruv::gates::FindNearestGateRequest* request, ::mruv::gates::FindNearestGateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FindNearestGate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::FindNearestGateResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void FindNearestGate(::grpc::ClientContext* context, const ::mruv::gates::FindNearestGateRequest* request, ::mruv::gates::FindNearestGateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void FindNearestGate(::grpc::ClientContext* context, const ::mruv::gates::FindNearestGateRequest* request, ::mruv::gates::FindNearestGateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void FindNearestGate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::FindNearestGateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void FindNearestGate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::FindNearestGateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      //
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void FetchAll(::grpc::ClientContext* context, ::mruv::gates::FetchAllGatesRequest* request, ::grpc::ClientReadReactor< ::mruv::gates::FetchAllGatesResponse>* reactor) = 0;
      #else
      virtual void FetchAll(::grpc::ClientContext* context, ::mruv::gates::FetchAllGatesRequest* request, ::grpc::experimental::ClientReadReactor< ::mruv::gates::FetchAllGatesResponse>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::CreateGateResponse>* AsyncCreateGateRaw(::grpc::ClientContext* context, const ::mruv::gates::CreateGateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::CreateGateResponse>* PrepareAsyncCreateGateRaw(::grpc::ClientContext* context, const ::mruv::gates::CreateGateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::GetGateResponse>* AsyncGetGateRaw(::grpc::ClientContext* context, const ::mruv::gates::GetGateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::GetGateResponse>* PrepareAsyncGetGateRaw(::grpc::ClientContext* context, const ::mruv::gates::GetGateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::UpdateGateResponse>* AsyncUpdateGateRaw(::grpc::ClientContext* context, const ::mruv::gates::UpdateGateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::UpdateGateResponse>* PrepareAsyncUpdateGateRaw(::grpc::ClientContext* context, const ::mruv::gates::UpdateGateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::DeleteGateResponse>* AsyncDeleteGateRaw(::grpc::ClientContext* context, const ::mruv::gates::DeleteGateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::DeleteGateResponse>* PrepareAsyncDeleteGateRaw(::grpc::ClientContext* context, const ::mruv::gates::DeleteGateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::LockResponse>* AsyncLockRaw(::grpc::ClientContext* context, const ::mruv::gates::LockRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::LockResponse>* PrepareAsyncLockRaw(::grpc::ClientContext* context, const ::mruv::gates::LockRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::UnlockResponse>* AsyncUnlockRaw(::grpc::ClientContext* context, const ::mruv::gates::UnlockRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::UnlockResponse>* PrepareAsyncUnlockRaw(::grpc::ClientContext* context, const ::mruv::gates::UnlockRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::OpenResponse>* AsyncOpenRaw(::grpc::ClientContext* context, const ::mruv::gates::OpenRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::OpenResponse>* PrepareAsyncOpenRaw(::grpc::ClientContext* context, const ::mruv::gates::OpenRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::CloseResponse>* AsyncCloseRaw(::grpc::ClientContext* context, const ::mruv::gates::CloseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::CloseResponse>* PrepareAsyncCloseRaw(::grpc::ClientContext* context, const ::mruv::gates::CloseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::FindNearestGateResponse>* AsyncFindNearestGateRaw(::grpc::ClientContext* context, const ::mruv::gates::FindNearestGateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::gates::FindNearestGateResponse>* PrepareAsyncFindNearestGateRaw(::grpc::ClientContext* context, const ::mruv::gates::FindNearestGateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::mruv::gates::FetchAllGatesResponse>* FetchAllRaw(::grpc::ClientContext* context, const ::mruv::gates::FetchAllGatesRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mruv::gates::FetchAllGatesResponse>* AsyncFetchAllRaw(::grpc::ClientContext* context, const ::mruv::gates::FetchAllGatesRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mruv::gates::FetchAllGatesResponse>* PrepareAsyncFetchAllRaw(::grpc::ClientContext* context, const ::mruv::gates::FetchAllGatesRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateGate(::grpc::ClientContext* context, const ::mruv::gates::CreateGateRequest& request, ::mruv::gates::CreateGateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::gates::CreateGateResponse>> AsyncCreateGate(::grpc::ClientContext* context, const ::mruv::gates::CreateGateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::gates::CreateGateResponse>>(AsyncCreateGateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::gates::CreateGateResponse>> PrepareAsyncCreateGate(::grpc::ClientContext* context, const ::mruv::gates::CreateGateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::gates::CreateGateResponse>>(PrepareAsyncCreateGateRaw(context, request, cq));
    }
    ::grpc::Status GetGate(::grpc::ClientContext* context, const ::mruv::gates::GetGateRequest& request, ::mruv::gates::GetGateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::gates::GetGateResponse>> AsyncGetGate(::grpc::ClientContext* context, const ::mruv::gates::GetGateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::gates::GetGateResponse>>(AsyncGetGateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::gates::GetGateResponse>> PrepareAsyncGetGate(::grpc::ClientContext* context, const ::mruv::gates::GetGateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::gates::GetGateResponse>>(PrepareAsyncGetGateRaw(context, request, cq));
    }
    ::grpc::Status UpdateGate(::grpc::ClientContext* context, const ::mruv::gates::UpdateGateRequest& request, ::mruv::gates::UpdateGateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::gates::UpdateGateResponse>> AsyncUpdateGate(::grpc::ClientContext* context, const ::mruv::gates::UpdateGateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::gates::UpdateGateResponse>>(AsyncUpdateGateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::gates::UpdateGateResponse>> PrepareAsyncUpdateGate(::grpc::ClientContext* context, const ::mruv::gates::UpdateGateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::gates::UpdateGateResponse>>(PrepareAsyncUpdateGateRaw(context, request, cq));
    }
    ::grpc::Status DeleteGate(::grpc::ClientContext* context, const ::mruv::gates::DeleteGateRequest& request, ::mruv::gates::DeleteGateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::gates::DeleteGateResponse>> AsyncDeleteGate(::grpc::ClientContext* context, const ::mruv::gates::DeleteGateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::gates::DeleteGateResponse>>(AsyncDeleteGateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::gates::DeleteGateResponse>> PrepareAsyncDeleteGate(::grpc::ClientContext* context, const ::mruv::gates::DeleteGateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::gates::DeleteGateResponse>>(PrepareAsyncDeleteGateRaw(context, request, cq));
    }
    ::grpc::Status Lock(::grpc::ClientContext* context, const ::mruv::gates::LockRequest& request, ::mruv::gates::LockResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::gates::LockResponse>> AsyncLock(::grpc::ClientContext* context, const ::mruv::gates::LockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::gates::LockResponse>>(AsyncLockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::gates::LockResponse>> PrepareAsyncLock(::grpc::ClientContext* context, const ::mruv::gates::LockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::gates::LockResponse>>(PrepareAsyncLockRaw(context, request, cq));
    }
    ::grpc::Status Unlock(::grpc::ClientContext* context, const ::mruv::gates::UnlockRequest& request, ::mruv::gates::UnlockResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::gates::UnlockResponse>> AsyncUnlock(::grpc::ClientContext* context, const ::mruv::gates::UnlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::gates::UnlockResponse>>(AsyncUnlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::gates::UnlockResponse>> PrepareAsyncUnlock(::grpc::ClientContext* context, const ::mruv::gates::UnlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::gates::UnlockResponse>>(PrepareAsyncUnlockRaw(context, request, cq));
    }
    ::grpc::Status Open(::grpc::ClientContext* context, const ::mruv::gates::OpenRequest& request, ::mruv::gates::OpenResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::gates::OpenResponse>> AsyncOpen(::grpc::ClientContext* context, const ::mruv::gates::OpenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::gates::OpenResponse>>(AsyncOpenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::gates::OpenResponse>> PrepareAsyncOpen(::grpc::ClientContext* context, const ::mruv::gates::OpenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::gates::OpenResponse>>(PrepareAsyncOpenRaw(context, request, cq));
    }
    ::grpc::Status Close(::grpc::ClientContext* context, const ::mruv::gates::CloseRequest& request, ::mruv::gates::CloseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::gates::CloseResponse>> AsyncClose(::grpc::ClientContext* context, const ::mruv::gates::CloseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::gates::CloseResponse>>(AsyncCloseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::gates::CloseResponse>> PrepareAsyncClose(::grpc::ClientContext* context, const ::mruv::gates::CloseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::gates::CloseResponse>>(PrepareAsyncCloseRaw(context, request, cq));
    }
    ::grpc::Status FindNearestGate(::grpc::ClientContext* context, const ::mruv::gates::FindNearestGateRequest& request, ::mruv::gates::FindNearestGateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::gates::FindNearestGateResponse>> AsyncFindNearestGate(::grpc::ClientContext* context, const ::mruv::gates::FindNearestGateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::gates::FindNearestGateResponse>>(AsyncFindNearestGateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::gates::FindNearestGateResponse>> PrepareAsyncFindNearestGate(::grpc::ClientContext* context, const ::mruv::gates::FindNearestGateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::gates::FindNearestGateResponse>>(PrepareAsyncFindNearestGateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::mruv::gates::FetchAllGatesResponse>> FetchAll(::grpc::ClientContext* context, const ::mruv::gates::FetchAllGatesRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mruv::gates::FetchAllGatesResponse>>(FetchAllRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mruv::gates::FetchAllGatesResponse>> AsyncFetchAll(::grpc::ClientContext* context, const ::mruv::gates::FetchAllGatesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mruv::gates::FetchAllGatesResponse>>(AsyncFetchAllRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mruv::gates::FetchAllGatesResponse>> PrepareAsyncFetchAll(::grpc::ClientContext* context, const ::mruv::gates::FetchAllGatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mruv::gates::FetchAllGatesResponse>>(PrepareAsyncFetchAllRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateGate(::grpc::ClientContext* context, const ::mruv::gates::CreateGateRequest* request, ::mruv::gates::CreateGateResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateGate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::CreateGateResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateGate(::grpc::ClientContext* context, const ::mruv::gates::CreateGateRequest* request, ::mruv::gates::CreateGateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateGate(::grpc::ClientContext* context, const ::mruv::gates::CreateGateRequest* request, ::mruv::gates::CreateGateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateGate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::CreateGateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateGate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::CreateGateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetGate(::grpc::ClientContext* context, const ::mruv::gates::GetGateRequest* request, ::mruv::gates::GetGateResponse* response, std::function<void(::grpc::Status)>) override;
      void GetGate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::GetGateResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetGate(::grpc::ClientContext* context, const ::mruv::gates::GetGateRequest* request, ::mruv::gates::GetGateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetGate(::grpc::ClientContext* context, const ::mruv::gates::GetGateRequest* request, ::mruv::gates::GetGateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetGate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::GetGateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetGate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::GetGateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateGate(::grpc::ClientContext* context, const ::mruv::gates::UpdateGateRequest* request, ::mruv::gates::UpdateGateResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateGate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::UpdateGateResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateGate(::grpc::ClientContext* context, const ::mruv::gates::UpdateGateRequest* request, ::mruv::gates::UpdateGateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateGate(::grpc::ClientContext* context, const ::mruv::gates::UpdateGateRequest* request, ::mruv::gates::UpdateGateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateGate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::UpdateGateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateGate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::UpdateGateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteGate(::grpc::ClientContext* context, const ::mruv::gates::DeleteGateRequest* request, ::mruv::gates::DeleteGateResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteGate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::DeleteGateResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteGate(::grpc::ClientContext* context, const ::mruv::gates::DeleteGateRequest* request, ::mruv::gates::DeleteGateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteGate(::grpc::ClientContext* context, const ::mruv::gates::DeleteGateRequest* request, ::mruv::gates::DeleteGateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteGate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::DeleteGateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteGate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::DeleteGateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Lock(::grpc::ClientContext* context, const ::mruv::gates::LockRequest* request, ::mruv::gates::LockResponse* response, std::function<void(::grpc::Status)>) override;
      void Lock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::LockResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Lock(::grpc::ClientContext* context, const ::mruv::gates::LockRequest* request, ::mruv::gates::LockResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Lock(::grpc::ClientContext* context, const ::mruv::gates::LockRequest* request, ::mruv::gates::LockResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Lock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::LockResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Lock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::LockResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Unlock(::grpc::ClientContext* context, const ::mruv::gates::UnlockRequest* request, ::mruv::gates::UnlockResponse* response, std::function<void(::grpc::Status)>) override;
      void Unlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::UnlockResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Unlock(::grpc::ClientContext* context, const ::mruv::gates::UnlockRequest* request, ::mruv::gates::UnlockResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Unlock(::grpc::ClientContext* context, const ::mruv::gates::UnlockRequest* request, ::mruv::gates::UnlockResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Unlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::UnlockResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Unlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::UnlockResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Open(::grpc::ClientContext* context, const ::mruv::gates::OpenRequest* request, ::mruv::gates::OpenResponse* response, std::function<void(::grpc::Status)>) override;
      void Open(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::OpenResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Open(::grpc::ClientContext* context, const ::mruv::gates::OpenRequest* request, ::mruv::gates::OpenResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Open(::grpc::ClientContext* context, const ::mruv::gates::OpenRequest* request, ::mruv::gates::OpenResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Open(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::OpenResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Open(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::OpenResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Close(::grpc::ClientContext* context, const ::mruv::gates::CloseRequest* request, ::mruv::gates::CloseResponse* response, std::function<void(::grpc::Status)>) override;
      void Close(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::CloseResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Close(::grpc::ClientContext* context, const ::mruv::gates::CloseRequest* request, ::mruv::gates::CloseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Close(::grpc::ClientContext* context, const ::mruv::gates::CloseRequest* request, ::mruv::gates::CloseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Close(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::CloseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Close(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::CloseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void FindNearestGate(::grpc::ClientContext* context, const ::mruv::gates::FindNearestGateRequest* request, ::mruv::gates::FindNearestGateResponse* response, std::function<void(::grpc::Status)>) override;
      void FindNearestGate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::FindNearestGateResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void FindNearestGate(::grpc::ClientContext* context, const ::mruv::gates::FindNearestGateRequest* request, ::mruv::gates::FindNearestGateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void FindNearestGate(::grpc::ClientContext* context, const ::mruv::gates::FindNearestGateRequest* request, ::mruv::gates::FindNearestGateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void FindNearestGate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::FindNearestGateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void FindNearestGate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::gates::FindNearestGateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void FetchAll(::grpc::ClientContext* context, ::mruv::gates::FetchAllGatesRequest* request, ::grpc::ClientReadReactor< ::mruv::gates::FetchAllGatesResponse>* reactor) override;
      #else
      void FetchAll(::grpc::ClientContext* context, ::mruv::gates::FetchAllGatesRequest* request, ::grpc::experimental::ClientReadReactor< ::mruv::gates::FetchAllGatesResponse>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mruv::gates::CreateGateResponse>* AsyncCreateGateRaw(::grpc::ClientContext* context, const ::mruv::gates::CreateGateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::gates::CreateGateResponse>* PrepareAsyncCreateGateRaw(::grpc::ClientContext* context, const ::mruv::gates::CreateGateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::gates::GetGateResponse>* AsyncGetGateRaw(::grpc::ClientContext* context, const ::mruv::gates::GetGateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::gates::GetGateResponse>* PrepareAsyncGetGateRaw(::grpc::ClientContext* context, const ::mruv::gates::GetGateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::gates::UpdateGateResponse>* AsyncUpdateGateRaw(::grpc::ClientContext* context, const ::mruv::gates::UpdateGateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::gates::UpdateGateResponse>* PrepareAsyncUpdateGateRaw(::grpc::ClientContext* context, const ::mruv::gates::UpdateGateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::gates::DeleteGateResponse>* AsyncDeleteGateRaw(::grpc::ClientContext* context, const ::mruv::gates::DeleteGateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::gates::DeleteGateResponse>* PrepareAsyncDeleteGateRaw(::grpc::ClientContext* context, const ::mruv::gates::DeleteGateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::gates::LockResponse>* AsyncLockRaw(::grpc::ClientContext* context, const ::mruv::gates::LockRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::gates::LockResponse>* PrepareAsyncLockRaw(::grpc::ClientContext* context, const ::mruv::gates::LockRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::gates::UnlockResponse>* AsyncUnlockRaw(::grpc::ClientContext* context, const ::mruv::gates::UnlockRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::gates::UnlockResponse>* PrepareAsyncUnlockRaw(::grpc::ClientContext* context, const ::mruv::gates::UnlockRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::gates::OpenResponse>* AsyncOpenRaw(::grpc::ClientContext* context, const ::mruv::gates::OpenRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::gates::OpenResponse>* PrepareAsyncOpenRaw(::grpc::ClientContext* context, const ::mruv::gates::OpenRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::gates::CloseResponse>* AsyncCloseRaw(::grpc::ClientContext* context, const ::mruv::gates::CloseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::gates::CloseResponse>* PrepareAsyncCloseRaw(::grpc::ClientContext* context, const ::mruv::gates::CloseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::gates::FindNearestGateResponse>* AsyncFindNearestGateRaw(::grpc::ClientContext* context, const ::mruv::gates::FindNearestGateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::gates::FindNearestGateResponse>* PrepareAsyncFindNearestGateRaw(::grpc::ClientContext* context, const ::mruv::gates::FindNearestGateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::mruv::gates::FetchAllGatesResponse>* FetchAllRaw(::grpc::ClientContext* context, const ::mruv::gates::FetchAllGatesRequest& request) override;
    ::grpc::ClientAsyncReader< ::mruv::gates::FetchAllGatesResponse>* AsyncFetchAllRaw(::grpc::ClientContext* context, const ::mruv::gates::FetchAllGatesRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mruv::gates::FetchAllGatesResponse>* PrepareAsyncFetchAllRaw(::grpc::ClientContext* context, const ::mruv::gates::FetchAllGatesRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateGate_;
    const ::grpc::internal::RpcMethod rpcmethod_GetGate_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateGate_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteGate_;
    const ::grpc::internal::RpcMethod rpcmethod_Lock_;
    const ::grpc::internal::RpcMethod rpcmethod_Unlock_;
    const ::grpc::internal::RpcMethod rpcmethod_Open_;
    const ::grpc::internal::RpcMethod rpcmethod_Close_;
    const ::grpc::internal::RpcMethod rpcmethod_FindNearestGate_;
    const ::grpc::internal::RpcMethod rpcmethod_FetchAll_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Create a gate or a moving objects objects group.
    virtual ::grpc::Status CreateGate(::grpc::ServerContext* context, const ::mruv::gates::CreateGateRequest* request, ::mruv::gates::CreateGateResponse* response);
    // Get a gate or a moving objects objects group.
    virtual ::grpc::Status GetGate(::grpc::ServerContext* context, const ::mruv::gates::GetGateRequest* request, ::mruv::gates::GetGateResponse* response);
    // Update a gate or a moving objects objects group.
    virtual ::grpc::Status UpdateGate(::grpc::ServerContext* context, const ::mruv::gates::UpdateGateRequest* request, ::mruv::gates::UpdateGateResponse* response);
    // Delete a gate or a moving objects objects group.
    virtual ::grpc::Status DeleteGate(::grpc::ServerContext* context, const ::mruv::gates::DeleteGateRequest* request, ::mruv::gates::DeleteGateResponse* response);
    // Lock a gate. Locked gate cannot be opened.
    virtual ::grpc::Status Lock(::grpc::ServerContext* context, const ::mruv::gates::LockRequest* request, ::mruv::gates::LockResponse* response);
    // Unload a gate, so it can be open.
    virtual ::grpc::Status Unlock(::grpc::ServerContext* context, const ::mruv::gates::UnlockRequest* request, ::mruv::gates::UnlockResponse* response);
    // Opens a gate.
    virtual ::grpc::Status Open(::grpc::ServerContext* context, const ::mruv::gates::OpenRequest* request, ::mruv::gates::OpenResponse* response);
    // Close a gate.
    virtual ::grpc::Status Close(::grpc::ServerContext* context, const ::mruv::gates::CloseRequest* request, ::mruv::gates::CloseResponse* response);
    // Find gate that is closest to a specific position.
    virtual ::grpc::Status FindNearestGate(::grpc::ServerContext* context, const ::mruv::gates::FindNearestGateRequest* request, ::mruv::gates::FindNearestGateResponse* response);
    //
    virtual ::grpc::Status FetchAll(::grpc::ServerContext* context, const ::mruv::gates::FetchAllGatesRequest* request, ::grpc::ServerWriter< ::mruv::gates::FetchAllGatesResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateGate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateGate() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateGate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateGate(::grpc::ServerContext* /*context*/, const ::mruv::gates::CreateGateRequest* /*request*/, ::mruv::gates::CreateGateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateGate(::grpc::ServerContext* context, ::mruv::gates::CreateGateRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::gates::CreateGateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetGate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetGate() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetGate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGate(::grpc::ServerContext* /*context*/, const ::mruv::gates::GetGateRequest* /*request*/, ::mruv::gates::GetGateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGate(::grpc::ServerContext* context, ::mruv::gates::GetGateRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::gates::GetGateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateGate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateGate() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateGate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGate(::grpc::ServerContext* /*context*/, const ::mruv::gates::UpdateGateRequest* /*request*/, ::mruv::gates::UpdateGateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateGate(::grpc::ServerContext* context, ::mruv::gates::UpdateGateRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::gates::UpdateGateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteGate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteGate() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteGate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteGate(::grpc::ServerContext* /*context*/, const ::mruv::gates::DeleteGateRequest* /*request*/, ::mruv::gates::DeleteGateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteGate(::grpc::ServerContext* context, ::mruv::gates::DeleteGateRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::gates::DeleteGateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Lock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Lock() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Lock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Lock(::grpc::ServerContext* /*context*/, const ::mruv::gates::LockRequest* /*request*/, ::mruv::gates::LockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLock(::grpc::ServerContext* context, ::mruv::gates::LockRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::gates::LockResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Unlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Unlock() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Unlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unlock(::grpc::ServerContext* /*context*/, const ::mruv::gates::UnlockRequest* /*request*/, ::mruv::gates::UnlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnlock(::grpc::ServerContext* context, ::mruv::gates::UnlockRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::gates::UnlockResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Open() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_Open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Open(::grpc::ServerContext* /*context*/, const ::mruv::gates::OpenRequest* /*request*/, ::mruv::gates::OpenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpen(::grpc::ServerContext* context, ::mruv::gates::OpenRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::gates::OpenResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Close() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_Close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Close(::grpc::ServerContext* /*context*/, const ::mruv::gates::CloseRequest* /*request*/, ::mruv::gates::CloseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClose(::grpc::ServerContext* context, ::mruv::gates::CloseRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::gates::CloseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FindNearestGate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FindNearestGate() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_FindNearestGate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindNearestGate(::grpc::ServerContext* /*context*/, const ::mruv::gates::FindNearestGateRequest* /*request*/, ::mruv::gates::FindNearestGateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindNearestGate(::grpc::ServerContext* context, ::mruv::gates::FindNearestGateRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::gates::FindNearestGateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FetchAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FetchAll() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_FetchAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchAll(::grpc::ServerContext* /*context*/, const ::mruv::gates::FetchAllGatesRequest* /*request*/, ::grpc::ServerWriter< ::mruv::gates::FetchAllGatesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchAll(::grpc::ServerContext* context, ::mruv::gates::FetchAllGatesRequest* request, ::grpc::ServerAsyncWriter< ::mruv::gates::FetchAllGatesResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(9, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateGate<WithAsyncMethod_GetGate<WithAsyncMethod_UpdateGate<WithAsyncMethod_DeleteGate<WithAsyncMethod_Lock<WithAsyncMethod_Unlock<WithAsyncMethod_Open<WithAsyncMethod_Close<WithAsyncMethod_FindNearestGate<WithAsyncMethod_FetchAll<Service > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateGate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateGate() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::gates::CreateGateRequest, ::mruv::gates::CreateGateResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::gates::CreateGateRequest* request, ::mruv::gates::CreateGateResponse* response) { return this->CreateGate(context, request, response); }));}
    void SetMessageAllocatorFor_CreateGate(
        ::grpc::experimental::MessageAllocator< ::mruv::gates::CreateGateRequest, ::mruv::gates::CreateGateResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::gates::CreateGateRequest, ::mruv::gates::CreateGateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateGate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateGate(::grpc::ServerContext* /*context*/, const ::mruv::gates::CreateGateRequest* /*request*/, ::mruv::gates::CreateGateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateGate(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::gates::CreateGateRequest* /*request*/, ::mruv::gates::CreateGateResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateGate(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::gates::CreateGateRequest* /*request*/, ::mruv::gates::CreateGateResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetGate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetGate() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::gates::GetGateRequest, ::mruv::gates::GetGateResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::gates::GetGateRequest* request, ::mruv::gates::GetGateResponse* response) { return this->GetGate(context, request, response); }));}
    void SetMessageAllocatorFor_GetGate(
        ::grpc::experimental::MessageAllocator< ::mruv::gates::GetGateRequest, ::mruv::gates::GetGateResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::gates::GetGateRequest, ::mruv::gates::GetGateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetGate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGate(::grpc::ServerContext* /*context*/, const ::mruv::gates::GetGateRequest* /*request*/, ::mruv::gates::GetGateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetGate(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::gates::GetGateRequest* /*request*/, ::mruv::gates::GetGateResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetGate(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::gates::GetGateRequest* /*request*/, ::mruv::gates::GetGateResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateGate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateGate() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::gates::UpdateGateRequest, ::mruv::gates::UpdateGateResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::gates::UpdateGateRequest* request, ::mruv::gates::UpdateGateResponse* response) { return this->UpdateGate(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateGate(
        ::grpc::experimental::MessageAllocator< ::mruv::gates::UpdateGateRequest, ::mruv::gates::UpdateGateResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::gates::UpdateGateRequest, ::mruv::gates::UpdateGateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateGate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGate(::grpc::ServerContext* /*context*/, const ::mruv::gates::UpdateGateRequest* /*request*/, ::mruv::gates::UpdateGateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateGate(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::gates::UpdateGateRequest* /*request*/, ::mruv::gates::UpdateGateResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateGate(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::gates::UpdateGateRequest* /*request*/, ::mruv::gates::UpdateGateResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteGate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteGate() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::gates::DeleteGateRequest, ::mruv::gates::DeleteGateResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::gates::DeleteGateRequest* request, ::mruv::gates::DeleteGateResponse* response) { return this->DeleteGate(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteGate(
        ::grpc::experimental::MessageAllocator< ::mruv::gates::DeleteGateRequest, ::mruv::gates::DeleteGateResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::gates::DeleteGateRequest, ::mruv::gates::DeleteGateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteGate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteGate(::grpc::ServerContext* /*context*/, const ::mruv::gates::DeleteGateRequest* /*request*/, ::mruv::gates::DeleteGateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteGate(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::gates::DeleteGateRequest* /*request*/, ::mruv::gates::DeleteGateResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteGate(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::gates::DeleteGateRequest* /*request*/, ::mruv::gates::DeleteGateResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Lock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Lock() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::gates::LockRequest, ::mruv::gates::LockResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::gates::LockRequest* request, ::mruv::gates::LockResponse* response) { return this->Lock(context, request, response); }));}
    void SetMessageAllocatorFor_Lock(
        ::grpc::experimental::MessageAllocator< ::mruv::gates::LockRequest, ::mruv::gates::LockResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::gates::LockRequest, ::mruv::gates::LockResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Lock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Lock(::grpc::ServerContext* /*context*/, const ::mruv::gates::LockRequest* /*request*/, ::mruv::gates::LockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Lock(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::gates::LockRequest* /*request*/, ::mruv::gates::LockResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Lock(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::gates::LockRequest* /*request*/, ::mruv::gates::LockResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Unlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Unlock() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::gates::UnlockRequest, ::mruv::gates::UnlockResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::gates::UnlockRequest* request, ::mruv::gates::UnlockResponse* response) { return this->Unlock(context, request, response); }));}
    void SetMessageAllocatorFor_Unlock(
        ::grpc::experimental::MessageAllocator< ::mruv::gates::UnlockRequest, ::mruv::gates::UnlockResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::gates::UnlockRequest, ::mruv::gates::UnlockResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Unlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unlock(::grpc::ServerContext* /*context*/, const ::mruv::gates::UnlockRequest* /*request*/, ::mruv::gates::UnlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Unlock(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::gates::UnlockRequest* /*request*/, ::mruv::gates::UnlockResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Unlock(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::gates::UnlockRequest* /*request*/, ::mruv::gates::UnlockResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Open() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::gates::OpenRequest, ::mruv::gates::OpenResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::gates::OpenRequest* request, ::mruv::gates::OpenResponse* response) { return this->Open(context, request, response); }));}
    void SetMessageAllocatorFor_Open(
        ::grpc::experimental::MessageAllocator< ::mruv::gates::OpenRequest, ::mruv::gates::OpenResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::gates::OpenRequest, ::mruv::gates::OpenResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Open(::grpc::ServerContext* /*context*/, const ::mruv::gates::OpenRequest* /*request*/, ::mruv::gates::OpenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Open(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::gates::OpenRequest* /*request*/, ::mruv::gates::OpenResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Open(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::gates::OpenRequest* /*request*/, ::mruv::gates::OpenResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Close() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::gates::CloseRequest, ::mruv::gates::CloseResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::gates::CloseRequest* request, ::mruv::gates::CloseResponse* response) { return this->Close(context, request, response); }));}
    void SetMessageAllocatorFor_Close(
        ::grpc::experimental::MessageAllocator< ::mruv::gates::CloseRequest, ::mruv::gates::CloseResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::gates::CloseRequest, ::mruv::gates::CloseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Close(::grpc::ServerContext* /*context*/, const ::mruv::gates::CloseRequest* /*request*/, ::mruv::gates::CloseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Close(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::gates::CloseRequest* /*request*/, ::mruv::gates::CloseResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Close(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::gates::CloseRequest* /*request*/, ::mruv::gates::CloseResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_FindNearestGate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_FindNearestGate() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::gates::FindNearestGateRequest, ::mruv::gates::FindNearestGateResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::gates::FindNearestGateRequest* request, ::mruv::gates::FindNearestGateResponse* response) { return this->FindNearestGate(context, request, response); }));}
    void SetMessageAllocatorFor_FindNearestGate(
        ::grpc::experimental::MessageAllocator< ::mruv::gates::FindNearestGateRequest, ::mruv::gates::FindNearestGateResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(8);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::gates::FindNearestGateRequest, ::mruv::gates::FindNearestGateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_FindNearestGate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindNearestGate(::grpc::ServerContext* /*context*/, const ::mruv::gates::FindNearestGateRequest* /*request*/, ::mruv::gates::FindNearestGateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* FindNearestGate(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::gates::FindNearestGateRequest* /*request*/, ::mruv::gates::FindNearestGateResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* FindNearestGate(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::gates::FindNearestGateRequest* /*request*/, ::mruv::gates::FindNearestGateResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_FetchAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_FetchAll() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(9,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::mruv::gates::FetchAllGatesRequest, ::mruv::gates::FetchAllGatesResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::gates::FetchAllGatesRequest* request) { return this->FetchAll(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_FetchAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchAll(::grpc::ServerContext* /*context*/, const ::mruv::gates::FetchAllGatesRequest* /*request*/, ::grpc::ServerWriter< ::mruv::gates::FetchAllGatesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::mruv::gates::FetchAllGatesResponse>* FetchAll(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::gates::FetchAllGatesRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::mruv::gates::FetchAllGatesResponse>* FetchAll(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::gates::FetchAllGatesRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_CreateGate<ExperimentalWithCallbackMethod_GetGate<ExperimentalWithCallbackMethod_UpdateGate<ExperimentalWithCallbackMethod_DeleteGate<ExperimentalWithCallbackMethod_Lock<ExperimentalWithCallbackMethod_Unlock<ExperimentalWithCallbackMethod_Open<ExperimentalWithCallbackMethod_Close<ExperimentalWithCallbackMethod_FindNearestGate<ExperimentalWithCallbackMethod_FetchAll<Service > > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_CreateGate<ExperimentalWithCallbackMethod_GetGate<ExperimentalWithCallbackMethod_UpdateGate<ExperimentalWithCallbackMethod_DeleteGate<ExperimentalWithCallbackMethod_Lock<ExperimentalWithCallbackMethod_Unlock<ExperimentalWithCallbackMethod_Open<ExperimentalWithCallbackMethod_Close<ExperimentalWithCallbackMethod_FindNearestGate<ExperimentalWithCallbackMethod_FetchAll<Service > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateGate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateGate() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateGate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateGate(::grpc::ServerContext* /*context*/, const ::mruv::gates::CreateGateRequest* /*request*/, ::mruv::gates::CreateGateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetGate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetGate() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetGate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGate(::grpc::ServerContext* /*context*/, const ::mruv::gates::GetGateRequest* /*request*/, ::mruv::gates::GetGateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateGate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateGate() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateGate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGate(::grpc::ServerContext* /*context*/, const ::mruv::gates::UpdateGateRequest* /*request*/, ::mruv::gates::UpdateGateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteGate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteGate() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteGate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteGate(::grpc::ServerContext* /*context*/, const ::mruv::gates::DeleteGateRequest* /*request*/, ::mruv::gates::DeleteGateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Lock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Lock() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Lock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Lock(::grpc::ServerContext* /*context*/, const ::mruv::gates::LockRequest* /*request*/, ::mruv::gates::LockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Unlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Unlock() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Unlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unlock(::grpc::ServerContext* /*context*/, const ::mruv::gates::UnlockRequest* /*request*/, ::mruv::gates::UnlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Open() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_Open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Open(::grpc::ServerContext* /*context*/, const ::mruv::gates::OpenRequest* /*request*/, ::mruv::gates::OpenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Close() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_Close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Close(::grpc::ServerContext* /*context*/, const ::mruv::gates::CloseRequest* /*request*/, ::mruv::gates::CloseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FindNearestGate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FindNearestGate() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_FindNearestGate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindNearestGate(::grpc::ServerContext* /*context*/, const ::mruv::gates::FindNearestGateRequest* /*request*/, ::mruv::gates::FindNearestGateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FetchAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FetchAll() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_FetchAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchAll(::grpc::ServerContext* /*context*/, const ::mruv::gates::FetchAllGatesRequest* /*request*/, ::grpc::ServerWriter< ::mruv::gates::FetchAllGatesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateGate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateGate() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateGate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateGate(::grpc::ServerContext* /*context*/, const ::mruv::gates::CreateGateRequest* /*request*/, ::mruv::gates::CreateGateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateGate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetGate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetGate() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetGate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGate(::grpc::ServerContext* /*context*/, const ::mruv::gates::GetGateRequest* /*request*/, ::mruv::gates::GetGateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateGate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateGate() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateGate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGate(::grpc::ServerContext* /*context*/, const ::mruv::gates::UpdateGateRequest* /*request*/, ::mruv::gates::UpdateGateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateGate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteGate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteGate() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteGate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteGate(::grpc::ServerContext* /*context*/, const ::mruv::gates::DeleteGateRequest* /*request*/, ::mruv::gates::DeleteGateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteGate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Lock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Lock() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Lock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Lock(::grpc::ServerContext* /*context*/, const ::mruv::gates::LockRequest* /*request*/, ::mruv::gates::LockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Unlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Unlock() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_Unlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unlock(::grpc::ServerContext* /*context*/, const ::mruv::gates::UnlockRequest* /*request*/, ::mruv::gates::UnlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnlock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Open() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_Open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Open(::grpc::ServerContext* /*context*/, const ::mruv::gates::OpenRequest* /*request*/, ::mruv::gates::OpenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpen(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Close() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_Close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Close(::grpc::ServerContext* /*context*/, const ::mruv::gates::CloseRequest* /*request*/, ::mruv::gates::CloseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClose(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FindNearestGate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FindNearestGate() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_FindNearestGate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindNearestGate(::grpc::ServerContext* /*context*/, const ::mruv::gates::FindNearestGateRequest* /*request*/, ::mruv::gates::FindNearestGateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindNearestGate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FetchAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FetchAll() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_FetchAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchAll(::grpc::ServerContext* /*context*/, const ::mruv::gates::FetchAllGatesRequest* /*request*/, ::grpc::ServerWriter< ::mruv::gates::FetchAllGatesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchAll(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(9, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateGate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateGate() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateGate(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateGate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateGate(::grpc::ServerContext* /*context*/, const ::mruv::gates::CreateGateRequest* /*request*/, ::mruv::gates::CreateGateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateGate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateGate(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetGate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetGate() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetGate(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetGate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGate(::grpc::ServerContext* /*context*/, const ::mruv::gates::GetGateRequest* /*request*/, ::mruv::gates::GetGateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetGate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetGate(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateGate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateGate() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateGate(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateGate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGate(::grpc::ServerContext* /*context*/, const ::mruv::gates::UpdateGateRequest* /*request*/, ::mruv::gates::UpdateGateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateGate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateGate(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteGate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteGate() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteGate(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteGate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteGate(::grpc::ServerContext* /*context*/, const ::mruv::gates::DeleteGateRequest* /*request*/, ::mruv::gates::DeleteGateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteGate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteGate(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Lock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Lock() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Lock(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Lock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Lock(::grpc::ServerContext* /*context*/, const ::mruv::gates::LockRequest* /*request*/, ::mruv::gates::LockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Lock(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Lock(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Unlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Unlock() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Unlock(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Unlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unlock(::grpc::ServerContext* /*context*/, const ::mruv::gates::UnlockRequest* /*request*/, ::mruv::gates::UnlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Unlock(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Unlock(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Open() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Open(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Open(::grpc::ServerContext* /*context*/, const ::mruv::gates::OpenRequest* /*request*/, ::mruv::gates::OpenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Open(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Open(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Close() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Close(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Close(::grpc::ServerContext* /*context*/, const ::mruv::gates::CloseRequest* /*request*/, ::mruv::gates::CloseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Close(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Close(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_FindNearestGate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_FindNearestGate() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FindNearestGate(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_FindNearestGate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindNearestGate(::grpc::ServerContext* /*context*/, const ::mruv::gates::FindNearestGateRequest* /*request*/, ::mruv::gates::FindNearestGateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* FindNearestGate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* FindNearestGate(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_FetchAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_FetchAll() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(9,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->FetchAll(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_FetchAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchAll(::grpc::ServerContext* /*context*/, const ::mruv::gates::FetchAllGatesRequest* /*request*/, ::grpc::ServerWriter< ::mruv::gates::FetchAllGatesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* FetchAll(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* FetchAll(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateGate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateGate() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::gates::CreateGateRequest, ::mruv::gates::CreateGateResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::gates::CreateGateRequest, ::mruv::gates::CreateGateResponse>* streamer) {
                       return this->StreamedCreateGate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateGate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateGate(::grpc::ServerContext* /*context*/, const ::mruv::gates::CreateGateRequest* /*request*/, ::mruv::gates::CreateGateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateGate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::gates::CreateGateRequest,::mruv::gates::CreateGateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetGate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetGate() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::gates::GetGateRequest, ::mruv::gates::GetGateResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::gates::GetGateRequest, ::mruv::gates::GetGateResponse>* streamer) {
                       return this->StreamedGetGate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetGate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetGate(::grpc::ServerContext* /*context*/, const ::mruv::gates::GetGateRequest* /*request*/, ::mruv::gates::GetGateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetGate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::gates::GetGateRequest,::mruv::gates::GetGateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateGate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateGate() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::gates::UpdateGateRequest, ::mruv::gates::UpdateGateResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::gates::UpdateGateRequest, ::mruv::gates::UpdateGateResponse>* streamer) {
                       return this->StreamedUpdateGate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateGate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateGate(::grpc::ServerContext* /*context*/, const ::mruv::gates::UpdateGateRequest* /*request*/, ::mruv::gates::UpdateGateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateGate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::gates::UpdateGateRequest,::mruv::gates::UpdateGateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteGate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteGate() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::gates::DeleteGateRequest, ::mruv::gates::DeleteGateResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::gates::DeleteGateRequest, ::mruv::gates::DeleteGateResponse>* streamer) {
                       return this->StreamedDeleteGate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteGate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteGate(::grpc::ServerContext* /*context*/, const ::mruv::gates::DeleteGateRequest* /*request*/, ::mruv::gates::DeleteGateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteGate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::gates::DeleteGateRequest,::mruv::gates::DeleteGateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Lock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Lock() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::gates::LockRequest, ::mruv::gates::LockResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::gates::LockRequest, ::mruv::gates::LockResponse>* streamer) {
                       return this->StreamedLock(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Lock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Lock(::grpc::ServerContext* /*context*/, const ::mruv::gates::LockRequest* /*request*/, ::mruv::gates::LockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::gates::LockRequest,::mruv::gates::LockResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Unlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Unlock() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::gates::UnlockRequest, ::mruv::gates::UnlockResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::gates::UnlockRequest, ::mruv::gates::UnlockResponse>* streamer) {
                       return this->StreamedUnlock(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Unlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Unlock(::grpc::ServerContext* /*context*/, const ::mruv::gates::UnlockRequest* /*request*/, ::mruv::gates::UnlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnlock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::gates::UnlockRequest,::mruv::gates::UnlockResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Open() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::gates::OpenRequest, ::mruv::gates::OpenResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::gates::OpenRequest, ::mruv::gates::OpenResponse>* streamer) {
                       return this->StreamedOpen(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Open(::grpc::ServerContext* /*context*/, const ::mruv::gates::OpenRequest* /*request*/, ::mruv::gates::OpenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOpen(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::gates::OpenRequest,::mruv::gates::OpenResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Close() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::gates::CloseRequest, ::mruv::gates::CloseResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::gates::CloseRequest, ::mruv::gates::CloseResponse>* streamer) {
                       return this->StreamedClose(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Close(::grpc::ServerContext* /*context*/, const ::mruv::gates::CloseRequest* /*request*/, ::mruv::gates::CloseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedClose(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::gates::CloseRequest,::mruv::gates::CloseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FindNearestGate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FindNearestGate() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::gates::FindNearestGateRequest, ::mruv::gates::FindNearestGateResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::gates::FindNearestGateRequest, ::mruv::gates::FindNearestGateResponse>* streamer) {
                       return this->StreamedFindNearestGate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FindNearestGate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FindNearestGate(::grpc::ServerContext* /*context*/, const ::mruv::gates::FindNearestGateRequest* /*request*/, ::mruv::gates::FindNearestGateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFindNearestGate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::gates::FindNearestGateRequest,::mruv::gates::FindNearestGateResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateGate<WithStreamedUnaryMethod_GetGate<WithStreamedUnaryMethod_UpdateGate<WithStreamedUnaryMethod_DeleteGate<WithStreamedUnaryMethod_Lock<WithStreamedUnaryMethod_Unlock<WithStreamedUnaryMethod_Open<WithStreamedUnaryMethod_Close<WithStreamedUnaryMethod_FindNearestGate<Service > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_FetchAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_FetchAll() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::mruv::gates::FetchAllGatesRequest, ::mruv::gates::FetchAllGatesResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerSplitStreamer<
                     ::mruv::gates::FetchAllGatesRequest, ::mruv::gates::FetchAllGatesResponse>* streamer) {
                       return this->StreamedFetchAll(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_FetchAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FetchAll(::grpc::ServerContext* /*context*/, const ::mruv::gates::FetchAllGatesRequest* /*request*/, ::grpc::ServerWriter< ::mruv::gates::FetchAllGatesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedFetchAll(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::mruv::gates::FetchAllGatesRequest,::mruv::gates::FetchAllGatesResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_FetchAll<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateGate<WithStreamedUnaryMethod_GetGate<WithStreamedUnaryMethod_UpdateGate<WithStreamedUnaryMethod_DeleteGate<WithStreamedUnaryMethod_Lock<WithStreamedUnaryMethod_Unlock<WithStreamedUnaryMethod_Open<WithStreamedUnaryMethod_Close<WithStreamedUnaryMethod_FindNearestGate<WithSplitStreamingMethod_FetchAll<Service > > > > > > > > > > StreamedService;
};

}  // namespace gates
}  // namespace mruv


#endif  // GRPC_gates_2fgates_2eproto__INCLUDED
