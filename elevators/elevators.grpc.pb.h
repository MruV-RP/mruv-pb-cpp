// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: elevators/elevators.proto
#ifndef GRPC_elevators_2felevators_2eproto__INCLUDED
#define GRPC_elevators_2felevators_2eproto__INCLUDED

#include "elevators/elevators.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace mruv {
namespace elevators {

// The MruV entrances service provides procedures for managing an elevators.
// Elevators allow all players in the elevator area to move between building floors.
// Floor change is processed in following steps:
// 1. Someone chooses a floor
// 1. Doors closing event is fired
// 2. Doors closed event is fired.
// 3. Everyone in a elevator are registered as players, that will be teleported to chosen floor.
// 4. X seconds delay (elevator is moving)
// 5. Teleport players to other floor elevator
// 6. Doors opening
// 7. Doors opened - end
// You can define a one-man pseudo-elevator where only point 5 is executed.
class MruVElevatorsService final {
 public:
  static constexpr char const* service_full_name() {
    return "mruv.elevators.MruVElevatorsService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Create an elevator.
    virtual ::grpc::Status CreateElevator(::grpc::ClientContext* context, const ::mruv::elevators::CreateElevatorRequest& request, ::mruv::elevators::CreateElevatorResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::elevators::CreateElevatorResponse>> AsyncCreateElevator(::grpc::ClientContext* context, const ::mruv::elevators::CreateElevatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::elevators::CreateElevatorResponse>>(AsyncCreateElevatorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::elevators::CreateElevatorResponse>> PrepareAsyncCreateElevator(::grpc::ClientContext* context, const ::mruv::elevators::CreateElevatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::elevators::CreateElevatorResponse>>(PrepareAsyncCreateElevatorRaw(context, request, cq));
    }
    // Get an elevator.
    virtual ::grpc::Status GetElevator(::grpc::ClientContext* context, const ::mruv::elevators::GetElevatorRequest& request, ::mruv::elevators::GetElevatorResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::elevators::GetElevatorResponse>> AsyncGetElevator(::grpc::ClientContext* context, const ::mruv::elevators::GetElevatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::elevators::GetElevatorResponse>>(AsyncGetElevatorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::elevators::GetElevatorResponse>> PrepareAsyncGetElevator(::grpc::ClientContext* context, const ::mruv::elevators::GetElevatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::elevators::GetElevatorResponse>>(PrepareAsyncGetElevatorRaw(context, request, cq));
    }
    // Update an elevator.
    virtual ::grpc::Status UpdateElevator(::grpc::ClientContext* context, const ::mruv::elevators::UpdateElevatorRequest& request, ::mruv::elevators::UpdateElevatorResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::elevators::UpdateElevatorResponse>> AsyncUpdateElevator(::grpc::ClientContext* context, const ::mruv::elevators::UpdateElevatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::elevators::UpdateElevatorResponse>>(AsyncUpdateElevatorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::elevators::UpdateElevatorResponse>> PrepareAsyncUpdateElevator(::grpc::ClientContext* context, const ::mruv::elevators::UpdateElevatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::elevators::UpdateElevatorResponse>>(PrepareAsyncUpdateElevatorRaw(context, request, cq));
    }
    // Delete an elevator.
    virtual ::grpc::Status DeleteElevator(::grpc::ClientContext* context, const ::mruv::elevators::DeleteElevatorRequest& request, ::mruv::elevators::DeleteElevatorResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::elevators::DeleteElevatorResponse>> AsyncDeleteElevator(::grpc::ClientContext* context, const ::mruv::elevators::DeleteElevatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::elevators::DeleteElevatorResponse>>(AsyncDeleteElevatorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::elevators::DeleteElevatorResponse>> PrepareAsyncDeleteElevator(::grpc::ClientContext* context, const ::mruv::elevators::DeleteElevatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::elevators::DeleteElevatorResponse>>(PrepareAsyncDeleteElevatorRaw(context, request, cq));
    }
    // Get available elevator floors.
    virtual ::grpc::Status GetElevatorFloors(::grpc::ClientContext* context, const ::mruv::elevators::GetElevatorFloorsRequest& request, ::mruv::elevators::GetElevatorFloorsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::elevators::GetElevatorFloorsResponse>> AsyncGetElevatorFloors(::grpc::ClientContext* context, const ::mruv::elevators::GetElevatorFloorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::elevators::GetElevatorFloorsResponse>>(AsyncGetElevatorFloorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::elevators::GetElevatorFloorsResponse>> PrepareAsyncGetElevatorFloors(::grpc::ClientContext* context, const ::mruv::elevators::GetElevatorFloorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::elevators::GetElevatorFloorsResponse>>(PrepareAsyncGetElevatorFloorsRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Create an elevator.
      virtual void CreateElevator(::grpc::ClientContext* context, const ::mruv::elevators::CreateElevatorRequest* request, ::mruv::elevators::CreateElevatorResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateElevator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::elevators::CreateElevatorResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateElevator(::grpc::ClientContext* context, const ::mruv::elevators::CreateElevatorRequest* request, ::mruv::elevators::CreateElevatorResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateElevator(::grpc::ClientContext* context, const ::mruv::elevators::CreateElevatorRequest* request, ::mruv::elevators::CreateElevatorResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateElevator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::elevators::CreateElevatorResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateElevator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::elevators::CreateElevatorResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get an elevator.
      virtual void GetElevator(::grpc::ClientContext* context, const ::mruv::elevators::GetElevatorRequest* request, ::mruv::elevators::GetElevatorResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetElevator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::elevators::GetElevatorResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetElevator(::grpc::ClientContext* context, const ::mruv::elevators::GetElevatorRequest* request, ::mruv::elevators::GetElevatorResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetElevator(::grpc::ClientContext* context, const ::mruv::elevators::GetElevatorRequest* request, ::mruv::elevators::GetElevatorResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetElevator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::elevators::GetElevatorResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetElevator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::elevators::GetElevatorResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Update an elevator.
      virtual void UpdateElevator(::grpc::ClientContext* context, const ::mruv::elevators::UpdateElevatorRequest* request, ::mruv::elevators::UpdateElevatorResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateElevator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::elevators::UpdateElevatorResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateElevator(::grpc::ClientContext* context, const ::mruv::elevators::UpdateElevatorRequest* request, ::mruv::elevators::UpdateElevatorResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateElevator(::grpc::ClientContext* context, const ::mruv::elevators::UpdateElevatorRequest* request, ::mruv::elevators::UpdateElevatorResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateElevator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::elevators::UpdateElevatorResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateElevator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::elevators::UpdateElevatorResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Delete an elevator.
      virtual void DeleteElevator(::grpc::ClientContext* context, const ::mruv::elevators::DeleteElevatorRequest* request, ::mruv::elevators::DeleteElevatorResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteElevator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::elevators::DeleteElevatorResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteElevator(::grpc::ClientContext* context, const ::mruv::elevators::DeleteElevatorRequest* request, ::mruv::elevators::DeleteElevatorResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteElevator(::grpc::ClientContext* context, const ::mruv::elevators::DeleteElevatorRequest* request, ::mruv::elevators::DeleteElevatorResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteElevator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::elevators::DeleteElevatorResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteElevator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::elevators::DeleteElevatorResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get available elevator floors.
      virtual void GetElevatorFloors(::grpc::ClientContext* context, const ::mruv::elevators::GetElevatorFloorsRequest* request, ::mruv::elevators::GetElevatorFloorsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetElevatorFloors(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::elevators::GetElevatorFloorsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetElevatorFloors(::grpc::ClientContext* context, const ::mruv::elevators::GetElevatorFloorsRequest* request, ::mruv::elevators::GetElevatorFloorsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetElevatorFloors(::grpc::ClientContext* context, const ::mruv::elevators::GetElevatorFloorsRequest* request, ::mruv::elevators::GetElevatorFloorsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetElevatorFloors(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::elevators::GetElevatorFloorsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetElevatorFloors(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::elevators::GetElevatorFloorsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::elevators::CreateElevatorResponse>* AsyncCreateElevatorRaw(::grpc::ClientContext* context, const ::mruv::elevators::CreateElevatorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::elevators::CreateElevatorResponse>* PrepareAsyncCreateElevatorRaw(::grpc::ClientContext* context, const ::mruv::elevators::CreateElevatorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::elevators::GetElevatorResponse>* AsyncGetElevatorRaw(::grpc::ClientContext* context, const ::mruv::elevators::GetElevatorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::elevators::GetElevatorResponse>* PrepareAsyncGetElevatorRaw(::grpc::ClientContext* context, const ::mruv::elevators::GetElevatorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::elevators::UpdateElevatorResponse>* AsyncUpdateElevatorRaw(::grpc::ClientContext* context, const ::mruv::elevators::UpdateElevatorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::elevators::UpdateElevatorResponse>* PrepareAsyncUpdateElevatorRaw(::grpc::ClientContext* context, const ::mruv::elevators::UpdateElevatorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::elevators::DeleteElevatorResponse>* AsyncDeleteElevatorRaw(::grpc::ClientContext* context, const ::mruv::elevators::DeleteElevatorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::elevators::DeleteElevatorResponse>* PrepareAsyncDeleteElevatorRaw(::grpc::ClientContext* context, const ::mruv::elevators::DeleteElevatorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::elevators::GetElevatorFloorsResponse>* AsyncGetElevatorFloorsRaw(::grpc::ClientContext* context, const ::mruv::elevators::GetElevatorFloorsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::elevators::GetElevatorFloorsResponse>* PrepareAsyncGetElevatorFloorsRaw(::grpc::ClientContext* context, const ::mruv::elevators::GetElevatorFloorsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateElevator(::grpc::ClientContext* context, const ::mruv::elevators::CreateElevatorRequest& request, ::mruv::elevators::CreateElevatorResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::elevators::CreateElevatorResponse>> AsyncCreateElevator(::grpc::ClientContext* context, const ::mruv::elevators::CreateElevatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::elevators::CreateElevatorResponse>>(AsyncCreateElevatorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::elevators::CreateElevatorResponse>> PrepareAsyncCreateElevator(::grpc::ClientContext* context, const ::mruv::elevators::CreateElevatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::elevators::CreateElevatorResponse>>(PrepareAsyncCreateElevatorRaw(context, request, cq));
    }
    ::grpc::Status GetElevator(::grpc::ClientContext* context, const ::mruv::elevators::GetElevatorRequest& request, ::mruv::elevators::GetElevatorResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::elevators::GetElevatorResponse>> AsyncGetElevator(::grpc::ClientContext* context, const ::mruv::elevators::GetElevatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::elevators::GetElevatorResponse>>(AsyncGetElevatorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::elevators::GetElevatorResponse>> PrepareAsyncGetElevator(::grpc::ClientContext* context, const ::mruv::elevators::GetElevatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::elevators::GetElevatorResponse>>(PrepareAsyncGetElevatorRaw(context, request, cq));
    }
    ::grpc::Status UpdateElevator(::grpc::ClientContext* context, const ::mruv::elevators::UpdateElevatorRequest& request, ::mruv::elevators::UpdateElevatorResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::elevators::UpdateElevatorResponse>> AsyncUpdateElevator(::grpc::ClientContext* context, const ::mruv::elevators::UpdateElevatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::elevators::UpdateElevatorResponse>>(AsyncUpdateElevatorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::elevators::UpdateElevatorResponse>> PrepareAsyncUpdateElevator(::grpc::ClientContext* context, const ::mruv::elevators::UpdateElevatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::elevators::UpdateElevatorResponse>>(PrepareAsyncUpdateElevatorRaw(context, request, cq));
    }
    ::grpc::Status DeleteElevator(::grpc::ClientContext* context, const ::mruv::elevators::DeleteElevatorRequest& request, ::mruv::elevators::DeleteElevatorResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::elevators::DeleteElevatorResponse>> AsyncDeleteElevator(::grpc::ClientContext* context, const ::mruv::elevators::DeleteElevatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::elevators::DeleteElevatorResponse>>(AsyncDeleteElevatorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::elevators::DeleteElevatorResponse>> PrepareAsyncDeleteElevator(::grpc::ClientContext* context, const ::mruv::elevators::DeleteElevatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::elevators::DeleteElevatorResponse>>(PrepareAsyncDeleteElevatorRaw(context, request, cq));
    }
    ::grpc::Status GetElevatorFloors(::grpc::ClientContext* context, const ::mruv::elevators::GetElevatorFloorsRequest& request, ::mruv::elevators::GetElevatorFloorsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::elevators::GetElevatorFloorsResponse>> AsyncGetElevatorFloors(::grpc::ClientContext* context, const ::mruv::elevators::GetElevatorFloorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::elevators::GetElevatorFloorsResponse>>(AsyncGetElevatorFloorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::elevators::GetElevatorFloorsResponse>> PrepareAsyncGetElevatorFloors(::grpc::ClientContext* context, const ::mruv::elevators::GetElevatorFloorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::elevators::GetElevatorFloorsResponse>>(PrepareAsyncGetElevatorFloorsRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateElevator(::grpc::ClientContext* context, const ::mruv::elevators::CreateElevatorRequest* request, ::mruv::elevators::CreateElevatorResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateElevator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::elevators::CreateElevatorResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateElevator(::grpc::ClientContext* context, const ::mruv::elevators::CreateElevatorRequest* request, ::mruv::elevators::CreateElevatorResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateElevator(::grpc::ClientContext* context, const ::mruv::elevators::CreateElevatorRequest* request, ::mruv::elevators::CreateElevatorResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateElevator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::elevators::CreateElevatorResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateElevator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::elevators::CreateElevatorResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetElevator(::grpc::ClientContext* context, const ::mruv::elevators::GetElevatorRequest* request, ::mruv::elevators::GetElevatorResponse* response, std::function<void(::grpc::Status)>) override;
      void GetElevator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::elevators::GetElevatorResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetElevator(::grpc::ClientContext* context, const ::mruv::elevators::GetElevatorRequest* request, ::mruv::elevators::GetElevatorResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetElevator(::grpc::ClientContext* context, const ::mruv::elevators::GetElevatorRequest* request, ::mruv::elevators::GetElevatorResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetElevator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::elevators::GetElevatorResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetElevator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::elevators::GetElevatorResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateElevator(::grpc::ClientContext* context, const ::mruv::elevators::UpdateElevatorRequest* request, ::mruv::elevators::UpdateElevatorResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateElevator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::elevators::UpdateElevatorResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateElevator(::grpc::ClientContext* context, const ::mruv::elevators::UpdateElevatorRequest* request, ::mruv::elevators::UpdateElevatorResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateElevator(::grpc::ClientContext* context, const ::mruv::elevators::UpdateElevatorRequest* request, ::mruv::elevators::UpdateElevatorResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateElevator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::elevators::UpdateElevatorResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateElevator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::elevators::UpdateElevatorResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteElevator(::grpc::ClientContext* context, const ::mruv::elevators::DeleteElevatorRequest* request, ::mruv::elevators::DeleteElevatorResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteElevator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::elevators::DeleteElevatorResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteElevator(::grpc::ClientContext* context, const ::mruv::elevators::DeleteElevatorRequest* request, ::mruv::elevators::DeleteElevatorResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteElevator(::grpc::ClientContext* context, const ::mruv::elevators::DeleteElevatorRequest* request, ::mruv::elevators::DeleteElevatorResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteElevator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::elevators::DeleteElevatorResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteElevator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::elevators::DeleteElevatorResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetElevatorFloors(::grpc::ClientContext* context, const ::mruv::elevators::GetElevatorFloorsRequest* request, ::mruv::elevators::GetElevatorFloorsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetElevatorFloors(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::elevators::GetElevatorFloorsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetElevatorFloors(::grpc::ClientContext* context, const ::mruv::elevators::GetElevatorFloorsRequest* request, ::mruv::elevators::GetElevatorFloorsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetElevatorFloors(::grpc::ClientContext* context, const ::mruv::elevators::GetElevatorFloorsRequest* request, ::mruv::elevators::GetElevatorFloorsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetElevatorFloors(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::elevators::GetElevatorFloorsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetElevatorFloors(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::elevators::GetElevatorFloorsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mruv::elevators::CreateElevatorResponse>* AsyncCreateElevatorRaw(::grpc::ClientContext* context, const ::mruv::elevators::CreateElevatorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::elevators::CreateElevatorResponse>* PrepareAsyncCreateElevatorRaw(::grpc::ClientContext* context, const ::mruv::elevators::CreateElevatorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::elevators::GetElevatorResponse>* AsyncGetElevatorRaw(::grpc::ClientContext* context, const ::mruv::elevators::GetElevatorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::elevators::GetElevatorResponse>* PrepareAsyncGetElevatorRaw(::grpc::ClientContext* context, const ::mruv::elevators::GetElevatorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::elevators::UpdateElevatorResponse>* AsyncUpdateElevatorRaw(::grpc::ClientContext* context, const ::mruv::elevators::UpdateElevatorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::elevators::UpdateElevatorResponse>* PrepareAsyncUpdateElevatorRaw(::grpc::ClientContext* context, const ::mruv::elevators::UpdateElevatorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::elevators::DeleteElevatorResponse>* AsyncDeleteElevatorRaw(::grpc::ClientContext* context, const ::mruv::elevators::DeleteElevatorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::elevators::DeleteElevatorResponse>* PrepareAsyncDeleteElevatorRaw(::grpc::ClientContext* context, const ::mruv::elevators::DeleteElevatorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::elevators::GetElevatorFloorsResponse>* AsyncGetElevatorFloorsRaw(::grpc::ClientContext* context, const ::mruv::elevators::GetElevatorFloorsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::elevators::GetElevatorFloorsResponse>* PrepareAsyncGetElevatorFloorsRaw(::grpc::ClientContext* context, const ::mruv::elevators::GetElevatorFloorsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateElevator_;
    const ::grpc::internal::RpcMethod rpcmethod_GetElevator_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateElevator_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteElevator_;
    const ::grpc::internal::RpcMethod rpcmethod_GetElevatorFloors_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Create an elevator.
    virtual ::grpc::Status CreateElevator(::grpc::ServerContext* context, const ::mruv::elevators::CreateElevatorRequest* request, ::mruv::elevators::CreateElevatorResponse* response);
    // Get an elevator.
    virtual ::grpc::Status GetElevator(::grpc::ServerContext* context, const ::mruv::elevators::GetElevatorRequest* request, ::mruv::elevators::GetElevatorResponse* response);
    // Update an elevator.
    virtual ::grpc::Status UpdateElevator(::grpc::ServerContext* context, const ::mruv::elevators::UpdateElevatorRequest* request, ::mruv::elevators::UpdateElevatorResponse* response);
    // Delete an elevator.
    virtual ::grpc::Status DeleteElevator(::grpc::ServerContext* context, const ::mruv::elevators::DeleteElevatorRequest* request, ::mruv::elevators::DeleteElevatorResponse* response);
    // Get available elevator floors.
    virtual ::grpc::Status GetElevatorFloors(::grpc::ServerContext* context, const ::mruv::elevators::GetElevatorFloorsRequest* request, ::mruv::elevators::GetElevatorFloorsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateElevator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateElevator() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateElevator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateElevator(::grpc::ServerContext* /*context*/, const ::mruv::elevators::CreateElevatorRequest* /*request*/, ::mruv::elevators::CreateElevatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateElevator(::grpc::ServerContext* context, ::mruv::elevators::CreateElevatorRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::elevators::CreateElevatorResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetElevator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetElevator() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetElevator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetElevator(::grpc::ServerContext* /*context*/, const ::mruv::elevators::GetElevatorRequest* /*request*/, ::mruv::elevators::GetElevatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetElevator(::grpc::ServerContext* context, ::mruv::elevators::GetElevatorRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::elevators::GetElevatorResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateElevator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateElevator() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateElevator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateElevator(::grpc::ServerContext* /*context*/, const ::mruv::elevators::UpdateElevatorRequest* /*request*/, ::mruv::elevators::UpdateElevatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateElevator(::grpc::ServerContext* context, ::mruv::elevators::UpdateElevatorRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::elevators::UpdateElevatorResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteElevator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteElevator() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteElevator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteElevator(::grpc::ServerContext* /*context*/, const ::mruv::elevators::DeleteElevatorRequest* /*request*/, ::mruv::elevators::DeleteElevatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteElevator(::grpc::ServerContext* context, ::mruv::elevators::DeleteElevatorRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::elevators::DeleteElevatorResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetElevatorFloors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetElevatorFloors() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetElevatorFloors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetElevatorFloors(::grpc::ServerContext* /*context*/, const ::mruv::elevators::GetElevatorFloorsRequest* /*request*/, ::mruv::elevators::GetElevatorFloorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetElevatorFloors(::grpc::ServerContext* context, ::mruv::elevators::GetElevatorFloorsRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::elevators::GetElevatorFloorsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateElevator<WithAsyncMethod_GetElevator<WithAsyncMethod_UpdateElevator<WithAsyncMethod_DeleteElevator<WithAsyncMethod_GetElevatorFloors<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateElevator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateElevator() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::elevators::CreateElevatorRequest, ::mruv::elevators::CreateElevatorResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::elevators::CreateElevatorRequest* request, ::mruv::elevators::CreateElevatorResponse* response) { return this->CreateElevator(context, request, response); }));}
    void SetMessageAllocatorFor_CreateElevator(
        ::grpc::experimental::MessageAllocator< ::mruv::elevators::CreateElevatorRequest, ::mruv::elevators::CreateElevatorResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::elevators::CreateElevatorRequest, ::mruv::elevators::CreateElevatorResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateElevator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateElevator(::grpc::ServerContext* /*context*/, const ::mruv::elevators::CreateElevatorRequest* /*request*/, ::mruv::elevators::CreateElevatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateElevator(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::elevators::CreateElevatorRequest* /*request*/, ::mruv::elevators::CreateElevatorResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateElevator(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::elevators::CreateElevatorRequest* /*request*/, ::mruv::elevators::CreateElevatorResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetElevator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetElevator() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::elevators::GetElevatorRequest, ::mruv::elevators::GetElevatorResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::elevators::GetElevatorRequest* request, ::mruv::elevators::GetElevatorResponse* response) { return this->GetElevator(context, request, response); }));}
    void SetMessageAllocatorFor_GetElevator(
        ::grpc::experimental::MessageAllocator< ::mruv::elevators::GetElevatorRequest, ::mruv::elevators::GetElevatorResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::elevators::GetElevatorRequest, ::mruv::elevators::GetElevatorResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetElevator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetElevator(::grpc::ServerContext* /*context*/, const ::mruv::elevators::GetElevatorRequest* /*request*/, ::mruv::elevators::GetElevatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetElevator(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::elevators::GetElevatorRequest* /*request*/, ::mruv::elevators::GetElevatorResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetElevator(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::elevators::GetElevatorRequest* /*request*/, ::mruv::elevators::GetElevatorResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateElevator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateElevator() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::elevators::UpdateElevatorRequest, ::mruv::elevators::UpdateElevatorResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::elevators::UpdateElevatorRequest* request, ::mruv::elevators::UpdateElevatorResponse* response) { return this->UpdateElevator(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateElevator(
        ::grpc::experimental::MessageAllocator< ::mruv::elevators::UpdateElevatorRequest, ::mruv::elevators::UpdateElevatorResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::elevators::UpdateElevatorRequest, ::mruv::elevators::UpdateElevatorResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateElevator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateElevator(::grpc::ServerContext* /*context*/, const ::mruv::elevators::UpdateElevatorRequest* /*request*/, ::mruv::elevators::UpdateElevatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateElevator(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::elevators::UpdateElevatorRequest* /*request*/, ::mruv::elevators::UpdateElevatorResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateElevator(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::elevators::UpdateElevatorRequest* /*request*/, ::mruv::elevators::UpdateElevatorResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteElevator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteElevator() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::elevators::DeleteElevatorRequest, ::mruv::elevators::DeleteElevatorResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::elevators::DeleteElevatorRequest* request, ::mruv::elevators::DeleteElevatorResponse* response) { return this->DeleteElevator(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteElevator(
        ::grpc::experimental::MessageAllocator< ::mruv::elevators::DeleteElevatorRequest, ::mruv::elevators::DeleteElevatorResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::elevators::DeleteElevatorRequest, ::mruv::elevators::DeleteElevatorResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteElevator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteElevator(::grpc::ServerContext* /*context*/, const ::mruv::elevators::DeleteElevatorRequest* /*request*/, ::mruv::elevators::DeleteElevatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteElevator(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::elevators::DeleteElevatorRequest* /*request*/, ::mruv::elevators::DeleteElevatorResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteElevator(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::elevators::DeleteElevatorRequest* /*request*/, ::mruv::elevators::DeleteElevatorResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetElevatorFloors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetElevatorFloors() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::elevators::GetElevatorFloorsRequest, ::mruv::elevators::GetElevatorFloorsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::elevators::GetElevatorFloorsRequest* request, ::mruv::elevators::GetElevatorFloorsResponse* response) { return this->GetElevatorFloors(context, request, response); }));}
    void SetMessageAllocatorFor_GetElevatorFloors(
        ::grpc::experimental::MessageAllocator< ::mruv::elevators::GetElevatorFloorsRequest, ::mruv::elevators::GetElevatorFloorsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::elevators::GetElevatorFloorsRequest, ::mruv::elevators::GetElevatorFloorsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetElevatorFloors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetElevatorFloors(::grpc::ServerContext* /*context*/, const ::mruv::elevators::GetElevatorFloorsRequest* /*request*/, ::mruv::elevators::GetElevatorFloorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetElevatorFloors(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::elevators::GetElevatorFloorsRequest* /*request*/, ::mruv::elevators::GetElevatorFloorsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetElevatorFloors(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::elevators::GetElevatorFloorsRequest* /*request*/, ::mruv::elevators::GetElevatorFloorsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_CreateElevator<ExperimentalWithCallbackMethod_GetElevator<ExperimentalWithCallbackMethod_UpdateElevator<ExperimentalWithCallbackMethod_DeleteElevator<ExperimentalWithCallbackMethod_GetElevatorFloors<Service > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_CreateElevator<ExperimentalWithCallbackMethod_GetElevator<ExperimentalWithCallbackMethod_UpdateElevator<ExperimentalWithCallbackMethod_DeleteElevator<ExperimentalWithCallbackMethod_GetElevatorFloors<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateElevator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateElevator() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateElevator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateElevator(::grpc::ServerContext* /*context*/, const ::mruv::elevators::CreateElevatorRequest* /*request*/, ::mruv::elevators::CreateElevatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetElevator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetElevator() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetElevator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetElevator(::grpc::ServerContext* /*context*/, const ::mruv::elevators::GetElevatorRequest* /*request*/, ::mruv::elevators::GetElevatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateElevator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateElevator() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateElevator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateElevator(::grpc::ServerContext* /*context*/, const ::mruv::elevators::UpdateElevatorRequest* /*request*/, ::mruv::elevators::UpdateElevatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteElevator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteElevator() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteElevator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteElevator(::grpc::ServerContext* /*context*/, const ::mruv::elevators::DeleteElevatorRequest* /*request*/, ::mruv::elevators::DeleteElevatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetElevatorFloors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetElevatorFloors() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetElevatorFloors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetElevatorFloors(::grpc::ServerContext* /*context*/, const ::mruv::elevators::GetElevatorFloorsRequest* /*request*/, ::mruv::elevators::GetElevatorFloorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateElevator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateElevator() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateElevator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateElevator(::grpc::ServerContext* /*context*/, const ::mruv::elevators::CreateElevatorRequest* /*request*/, ::mruv::elevators::CreateElevatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateElevator(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetElevator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetElevator() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetElevator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetElevator(::grpc::ServerContext* /*context*/, const ::mruv::elevators::GetElevatorRequest* /*request*/, ::mruv::elevators::GetElevatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetElevator(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateElevator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateElevator() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateElevator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateElevator(::grpc::ServerContext* /*context*/, const ::mruv::elevators::UpdateElevatorRequest* /*request*/, ::mruv::elevators::UpdateElevatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateElevator(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteElevator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteElevator() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteElevator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteElevator(::grpc::ServerContext* /*context*/, const ::mruv::elevators::DeleteElevatorRequest* /*request*/, ::mruv::elevators::DeleteElevatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteElevator(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetElevatorFloors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetElevatorFloors() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetElevatorFloors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetElevatorFloors(::grpc::ServerContext* /*context*/, const ::mruv::elevators::GetElevatorFloorsRequest* /*request*/, ::mruv::elevators::GetElevatorFloorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetElevatorFloors(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateElevator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateElevator() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateElevator(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateElevator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateElevator(::grpc::ServerContext* /*context*/, const ::mruv::elevators::CreateElevatorRequest* /*request*/, ::mruv::elevators::CreateElevatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateElevator(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateElevator(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetElevator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetElevator() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetElevator(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetElevator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetElevator(::grpc::ServerContext* /*context*/, const ::mruv::elevators::GetElevatorRequest* /*request*/, ::mruv::elevators::GetElevatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetElevator(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetElevator(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateElevator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateElevator() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateElevator(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateElevator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateElevator(::grpc::ServerContext* /*context*/, const ::mruv::elevators::UpdateElevatorRequest* /*request*/, ::mruv::elevators::UpdateElevatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateElevator(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateElevator(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteElevator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteElevator() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteElevator(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteElevator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteElevator(::grpc::ServerContext* /*context*/, const ::mruv::elevators::DeleteElevatorRequest* /*request*/, ::mruv::elevators::DeleteElevatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteElevator(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteElevator(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetElevatorFloors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetElevatorFloors() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetElevatorFloors(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetElevatorFloors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetElevatorFloors(::grpc::ServerContext* /*context*/, const ::mruv::elevators::GetElevatorFloorsRequest* /*request*/, ::mruv::elevators::GetElevatorFloorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetElevatorFloors(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetElevatorFloors(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateElevator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateElevator() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::mruv::elevators::CreateElevatorRequest, ::mruv::elevators::CreateElevatorResponse>(std::bind(&WithStreamedUnaryMethod_CreateElevator<BaseClass>::StreamedCreateElevator, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateElevator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateElevator(::grpc::ServerContext* /*context*/, const ::mruv::elevators::CreateElevatorRequest* /*request*/, ::mruv::elevators::CreateElevatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateElevator(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::elevators::CreateElevatorRequest,::mruv::elevators::CreateElevatorResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetElevator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetElevator() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::mruv::elevators::GetElevatorRequest, ::mruv::elevators::GetElevatorResponse>(std::bind(&WithStreamedUnaryMethod_GetElevator<BaseClass>::StreamedGetElevator, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetElevator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetElevator(::grpc::ServerContext* /*context*/, const ::mruv::elevators::GetElevatorRequest* /*request*/, ::mruv::elevators::GetElevatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetElevator(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::elevators::GetElevatorRequest,::mruv::elevators::GetElevatorResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateElevator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateElevator() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::mruv::elevators::UpdateElevatorRequest, ::mruv::elevators::UpdateElevatorResponse>(std::bind(&WithStreamedUnaryMethod_UpdateElevator<BaseClass>::StreamedUpdateElevator, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateElevator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateElevator(::grpc::ServerContext* /*context*/, const ::mruv::elevators::UpdateElevatorRequest* /*request*/, ::mruv::elevators::UpdateElevatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateElevator(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::elevators::UpdateElevatorRequest,::mruv::elevators::UpdateElevatorResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteElevator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteElevator() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::mruv::elevators::DeleteElevatorRequest, ::mruv::elevators::DeleteElevatorResponse>(std::bind(&WithStreamedUnaryMethod_DeleteElevator<BaseClass>::StreamedDeleteElevator, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteElevator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteElevator(::grpc::ServerContext* /*context*/, const ::mruv::elevators::DeleteElevatorRequest* /*request*/, ::mruv::elevators::DeleteElevatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteElevator(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::elevators::DeleteElevatorRequest,::mruv::elevators::DeleteElevatorResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetElevatorFloors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetElevatorFloors() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::mruv::elevators::GetElevatorFloorsRequest, ::mruv::elevators::GetElevatorFloorsResponse>(std::bind(&WithStreamedUnaryMethod_GetElevatorFloors<BaseClass>::StreamedGetElevatorFloors, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetElevatorFloors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetElevatorFloors(::grpc::ServerContext* /*context*/, const ::mruv::elevators::GetElevatorFloorsRequest* /*request*/, ::mruv::elevators::GetElevatorFloorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetElevatorFloors(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::elevators::GetElevatorFloorsRequest,::mruv::elevators::GetElevatorFloorsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateElevator<WithStreamedUnaryMethod_GetElevator<WithStreamedUnaryMethod_UpdateElevator<WithStreamedUnaryMethod_DeleteElevator<WithStreamedUnaryMethod_GetElevatorFloors<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateElevator<WithStreamedUnaryMethod_GetElevator<WithStreamedUnaryMethod_UpdateElevator<WithStreamedUnaryMethod_DeleteElevator<WithStreamedUnaryMethod_GetElevatorFloors<Service > > > > > StreamedService;
};

}  // namespace elevators
}  // namespace mruv


#endif  // GRPC_elevators_2felevators_2eproto__INCLUDED
