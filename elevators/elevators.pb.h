// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: elevators/elevators.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_elevators_2felevators_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_elevators_2felevators_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_elevators_2felevators_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_elevators_2felevators_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_elevators_2felevators_2eproto;
namespace mruv {
namespace elevators {
class CreateElevatorRequest;
class CreateElevatorRequestDefaultTypeInternal;
extern CreateElevatorRequestDefaultTypeInternal _CreateElevatorRequest_default_instance_;
class CreateElevatorResponse;
class CreateElevatorResponseDefaultTypeInternal;
extern CreateElevatorResponseDefaultTypeInternal _CreateElevatorResponse_default_instance_;
class DeleteElevatorRequest;
class DeleteElevatorRequestDefaultTypeInternal;
extern DeleteElevatorRequestDefaultTypeInternal _DeleteElevatorRequest_default_instance_;
class DeleteElevatorResponse;
class DeleteElevatorResponseDefaultTypeInternal;
extern DeleteElevatorResponseDefaultTypeInternal _DeleteElevatorResponse_default_instance_;
class GetElevatorFloorsRequest;
class GetElevatorFloorsRequestDefaultTypeInternal;
extern GetElevatorFloorsRequestDefaultTypeInternal _GetElevatorFloorsRequest_default_instance_;
class GetElevatorFloorsResponse;
class GetElevatorFloorsResponseDefaultTypeInternal;
extern GetElevatorFloorsResponseDefaultTypeInternal _GetElevatorFloorsResponse_default_instance_;
class GetElevatorRequest;
class GetElevatorRequestDefaultTypeInternal;
extern GetElevatorRequestDefaultTypeInternal _GetElevatorRequest_default_instance_;
class GetElevatorResponse;
class GetElevatorResponseDefaultTypeInternal;
extern GetElevatorResponseDefaultTypeInternal _GetElevatorResponse_default_instance_;
class UpdateElevatorRequest;
class UpdateElevatorRequestDefaultTypeInternal;
extern UpdateElevatorRequestDefaultTypeInternal _UpdateElevatorRequest_default_instance_;
class UpdateElevatorResponse;
class UpdateElevatorResponseDefaultTypeInternal;
extern UpdateElevatorResponseDefaultTypeInternal _UpdateElevatorResponse_default_instance_;
}  // namespace elevators
}  // namespace mruv
PROTOBUF_NAMESPACE_OPEN
template<> ::mruv::elevators::CreateElevatorRequest* Arena::CreateMaybeMessage<::mruv::elevators::CreateElevatorRequest>(Arena*);
template<> ::mruv::elevators::CreateElevatorResponse* Arena::CreateMaybeMessage<::mruv::elevators::CreateElevatorResponse>(Arena*);
template<> ::mruv::elevators::DeleteElevatorRequest* Arena::CreateMaybeMessage<::mruv::elevators::DeleteElevatorRequest>(Arena*);
template<> ::mruv::elevators::DeleteElevatorResponse* Arena::CreateMaybeMessage<::mruv::elevators::DeleteElevatorResponse>(Arena*);
template<> ::mruv::elevators::GetElevatorFloorsRequest* Arena::CreateMaybeMessage<::mruv::elevators::GetElevatorFloorsRequest>(Arena*);
template<> ::mruv::elevators::GetElevatorFloorsResponse* Arena::CreateMaybeMessage<::mruv::elevators::GetElevatorFloorsResponse>(Arena*);
template<> ::mruv::elevators::GetElevatorRequest* Arena::CreateMaybeMessage<::mruv::elevators::GetElevatorRequest>(Arena*);
template<> ::mruv::elevators::GetElevatorResponse* Arena::CreateMaybeMessage<::mruv::elevators::GetElevatorResponse>(Arena*);
template<> ::mruv::elevators::UpdateElevatorRequest* Arena::CreateMaybeMessage<::mruv::elevators::UpdateElevatorRequest>(Arena*);
template<> ::mruv::elevators::UpdateElevatorResponse* Arena::CreateMaybeMessage<::mruv::elevators::UpdateElevatorResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mruv {
namespace elevators {

// ===================================================================

class CreateElevatorRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.elevators.CreateElevatorRequest) */ {
 public:
  CreateElevatorRequest();
  virtual ~CreateElevatorRequest();

  CreateElevatorRequest(const CreateElevatorRequest& from);
  CreateElevatorRequest(CreateElevatorRequest&& from) noexcept
    : CreateElevatorRequest() {
    *this = ::std::move(from);
  }

  inline CreateElevatorRequest& operator=(const CreateElevatorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateElevatorRequest& operator=(CreateElevatorRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateElevatorRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateElevatorRequest* internal_default_instance() {
    return reinterpret_cast<const CreateElevatorRequest*>(
               &_CreateElevatorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateElevatorRequest& a, CreateElevatorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateElevatorRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateElevatorRequest* New() const final {
    return CreateMaybeMessage<CreateElevatorRequest>(nullptr);
  }

  CreateElevatorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateElevatorRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateElevatorRequest& from);
  void MergeFrom(const CreateElevatorRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateElevatorRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.elevators.CreateElevatorRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_elevators_2felevators_2eproto);
    return ::descriptor_table_elevators_2felevators_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.elevators.CreateElevatorRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_elevators_2felevators_2eproto;
};
// -------------------------------------------------------------------

class CreateElevatorResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.elevators.CreateElevatorResponse) */ {
 public:
  CreateElevatorResponse();
  virtual ~CreateElevatorResponse();

  CreateElevatorResponse(const CreateElevatorResponse& from);
  CreateElevatorResponse(CreateElevatorResponse&& from) noexcept
    : CreateElevatorResponse() {
    *this = ::std::move(from);
  }

  inline CreateElevatorResponse& operator=(const CreateElevatorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateElevatorResponse& operator=(CreateElevatorResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateElevatorResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateElevatorResponse* internal_default_instance() {
    return reinterpret_cast<const CreateElevatorResponse*>(
               &_CreateElevatorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateElevatorResponse& a, CreateElevatorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateElevatorResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateElevatorResponse* New() const final {
    return CreateMaybeMessage<CreateElevatorResponse>(nullptr);
  }

  CreateElevatorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateElevatorResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateElevatorResponse& from);
  void MergeFrom(const CreateElevatorResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateElevatorResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.elevators.CreateElevatorResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_elevators_2felevators_2eproto);
    return ::descriptor_table_elevators_2felevators_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.elevators.CreateElevatorResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_elevators_2felevators_2eproto;
};
// -------------------------------------------------------------------

class GetElevatorRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.elevators.GetElevatorRequest) */ {
 public:
  GetElevatorRequest();
  virtual ~GetElevatorRequest();

  GetElevatorRequest(const GetElevatorRequest& from);
  GetElevatorRequest(GetElevatorRequest&& from) noexcept
    : GetElevatorRequest() {
    *this = ::std::move(from);
  }

  inline GetElevatorRequest& operator=(const GetElevatorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetElevatorRequest& operator=(GetElevatorRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetElevatorRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetElevatorRequest* internal_default_instance() {
    return reinterpret_cast<const GetElevatorRequest*>(
               &_GetElevatorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetElevatorRequest& a, GetElevatorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetElevatorRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetElevatorRequest* New() const final {
    return CreateMaybeMessage<GetElevatorRequest>(nullptr);
  }

  GetElevatorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetElevatorRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetElevatorRequest& from);
  void MergeFrom(const GetElevatorRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetElevatorRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.elevators.GetElevatorRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_elevators_2felevators_2eproto);
    return ::descriptor_table_elevators_2felevators_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.elevators.GetElevatorRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_elevators_2felevators_2eproto;
};
// -------------------------------------------------------------------

class GetElevatorResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.elevators.GetElevatorResponse) */ {
 public:
  GetElevatorResponse();
  virtual ~GetElevatorResponse();

  GetElevatorResponse(const GetElevatorResponse& from);
  GetElevatorResponse(GetElevatorResponse&& from) noexcept
    : GetElevatorResponse() {
    *this = ::std::move(from);
  }

  inline GetElevatorResponse& operator=(const GetElevatorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetElevatorResponse& operator=(GetElevatorResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetElevatorResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetElevatorResponse* internal_default_instance() {
    return reinterpret_cast<const GetElevatorResponse*>(
               &_GetElevatorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetElevatorResponse& a, GetElevatorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetElevatorResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetElevatorResponse* New() const final {
    return CreateMaybeMessage<GetElevatorResponse>(nullptr);
  }

  GetElevatorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetElevatorResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetElevatorResponse& from);
  void MergeFrom(const GetElevatorResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetElevatorResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.elevators.GetElevatorResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_elevators_2felevators_2eproto);
    return ::descriptor_table_elevators_2felevators_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.elevators.GetElevatorResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_elevators_2felevators_2eproto;
};
// -------------------------------------------------------------------

class UpdateElevatorRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.elevators.UpdateElevatorRequest) */ {
 public:
  UpdateElevatorRequest();
  virtual ~UpdateElevatorRequest();

  UpdateElevatorRequest(const UpdateElevatorRequest& from);
  UpdateElevatorRequest(UpdateElevatorRequest&& from) noexcept
    : UpdateElevatorRequest() {
    *this = ::std::move(from);
  }

  inline UpdateElevatorRequest& operator=(const UpdateElevatorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateElevatorRequest& operator=(UpdateElevatorRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateElevatorRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateElevatorRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateElevatorRequest*>(
               &_UpdateElevatorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UpdateElevatorRequest& a, UpdateElevatorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateElevatorRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateElevatorRequest* New() const final {
    return CreateMaybeMessage<UpdateElevatorRequest>(nullptr);
  }

  UpdateElevatorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateElevatorRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateElevatorRequest& from);
  void MergeFrom(const UpdateElevatorRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateElevatorRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.elevators.UpdateElevatorRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_elevators_2felevators_2eproto);
    return ::descriptor_table_elevators_2felevators_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.elevators.UpdateElevatorRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_elevators_2felevators_2eproto;
};
// -------------------------------------------------------------------

class UpdateElevatorResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.elevators.UpdateElevatorResponse) */ {
 public:
  UpdateElevatorResponse();
  virtual ~UpdateElevatorResponse();

  UpdateElevatorResponse(const UpdateElevatorResponse& from);
  UpdateElevatorResponse(UpdateElevatorResponse&& from) noexcept
    : UpdateElevatorResponse() {
    *this = ::std::move(from);
  }

  inline UpdateElevatorResponse& operator=(const UpdateElevatorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateElevatorResponse& operator=(UpdateElevatorResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateElevatorResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateElevatorResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateElevatorResponse*>(
               &_UpdateElevatorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UpdateElevatorResponse& a, UpdateElevatorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateElevatorResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateElevatorResponse* New() const final {
    return CreateMaybeMessage<UpdateElevatorResponse>(nullptr);
  }

  UpdateElevatorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateElevatorResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateElevatorResponse& from);
  void MergeFrom(const UpdateElevatorResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateElevatorResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.elevators.UpdateElevatorResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_elevators_2felevators_2eproto);
    return ::descriptor_table_elevators_2felevators_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.elevators.UpdateElevatorResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_elevators_2felevators_2eproto;
};
// -------------------------------------------------------------------

class DeleteElevatorRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.elevators.DeleteElevatorRequest) */ {
 public:
  DeleteElevatorRequest();
  virtual ~DeleteElevatorRequest();

  DeleteElevatorRequest(const DeleteElevatorRequest& from);
  DeleteElevatorRequest(DeleteElevatorRequest&& from) noexcept
    : DeleteElevatorRequest() {
    *this = ::std::move(from);
  }

  inline DeleteElevatorRequest& operator=(const DeleteElevatorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteElevatorRequest& operator=(DeleteElevatorRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteElevatorRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteElevatorRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteElevatorRequest*>(
               &_DeleteElevatorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DeleteElevatorRequest& a, DeleteElevatorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteElevatorRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteElevatorRequest* New() const final {
    return CreateMaybeMessage<DeleteElevatorRequest>(nullptr);
  }

  DeleteElevatorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteElevatorRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteElevatorRequest& from);
  void MergeFrom(const DeleteElevatorRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteElevatorRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.elevators.DeleteElevatorRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_elevators_2felevators_2eproto);
    return ::descriptor_table_elevators_2felevators_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.elevators.DeleteElevatorRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_elevators_2felevators_2eproto;
};
// -------------------------------------------------------------------

class DeleteElevatorResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.elevators.DeleteElevatorResponse) */ {
 public:
  DeleteElevatorResponse();
  virtual ~DeleteElevatorResponse();

  DeleteElevatorResponse(const DeleteElevatorResponse& from);
  DeleteElevatorResponse(DeleteElevatorResponse&& from) noexcept
    : DeleteElevatorResponse() {
    *this = ::std::move(from);
  }

  inline DeleteElevatorResponse& operator=(const DeleteElevatorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteElevatorResponse& operator=(DeleteElevatorResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteElevatorResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteElevatorResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteElevatorResponse*>(
               &_DeleteElevatorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeleteElevatorResponse& a, DeleteElevatorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteElevatorResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteElevatorResponse* New() const final {
    return CreateMaybeMessage<DeleteElevatorResponse>(nullptr);
  }

  DeleteElevatorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteElevatorResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteElevatorResponse& from);
  void MergeFrom(const DeleteElevatorResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteElevatorResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.elevators.DeleteElevatorResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_elevators_2felevators_2eproto);
    return ::descriptor_table_elevators_2felevators_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.elevators.DeleteElevatorResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_elevators_2felevators_2eproto;
};
// -------------------------------------------------------------------

class GetElevatorFloorsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.elevators.GetElevatorFloorsRequest) */ {
 public:
  GetElevatorFloorsRequest();
  virtual ~GetElevatorFloorsRequest();

  GetElevatorFloorsRequest(const GetElevatorFloorsRequest& from);
  GetElevatorFloorsRequest(GetElevatorFloorsRequest&& from) noexcept
    : GetElevatorFloorsRequest() {
    *this = ::std::move(from);
  }

  inline GetElevatorFloorsRequest& operator=(const GetElevatorFloorsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetElevatorFloorsRequest& operator=(GetElevatorFloorsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetElevatorFloorsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetElevatorFloorsRequest* internal_default_instance() {
    return reinterpret_cast<const GetElevatorFloorsRequest*>(
               &_GetElevatorFloorsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetElevatorFloorsRequest& a, GetElevatorFloorsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetElevatorFloorsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetElevatorFloorsRequest* New() const final {
    return CreateMaybeMessage<GetElevatorFloorsRequest>(nullptr);
  }

  GetElevatorFloorsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetElevatorFloorsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetElevatorFloorsRequest& from);
  void MergeFrom(const GetElevatorFloorsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetElevatorFloorsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.elevators.GetElevatorFloorsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_elevators_2felevators_2eproto);
    return ::descriptor_table_elevators_2felevators_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.elevators.GetElevatorFloorsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_elevators_2felevators_2eproto;
};
// -------------------------------------------------------------------

class GetElevatorFloorsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.elevators.GetElevatorFloorsResponse) */ {
 public:
  GetElevatorFloorsResponse();
  virtual ~GetElevatorFloorsResponse();

  GetElevatorFloorsResponse(const GetElevatorFloorsResponse& from);
  GetElevatorFloorsResponse(GetElevatorFloorsResponse&& from) noexcept
    : GetElevatorFloorsResponse() {
    *this = ::std::move(from);
  }

  inline GetElevatorFloorsResponse& operator=(const GetElevatorFloorsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetElevatorFloorsResponse& operator=(GetElevatorFloorsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetElevatorFloorsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetElevatorFloorsResponse* internal_default_instance() {
    return reinterpret_cast<const GetElevatorFloorsResponse*>(
               &_GetElevatorFloorsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetElevatorFloorsResponse& a, GetElevatorFloorsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetElevatorFloorsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetElevatorFloorsResponse* New() const final {
    return CreateMaybeMessage<GetElevatorFloorsResponse>(nullptr);
  }

  GetElevatorFloorsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetElevatorFloorsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetElevatorFloorsResponse& from);
  void MergeFrom(const GetElevatorFloorsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetElevatorFloorsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.elevators.GetElevatorFloorsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_elevators_2felevators_2eproto);
    return ::descriptor_table_elevators_2felevators_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.elevators.GetElevatorFloorsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_elevators_2felevators_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateElevatorRequest

// -------------------------------------------------------------------

// CreateElevatorResponse

// uint32 id = 1;
inline void CreateElevatorResponse::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateElevatorResponse::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateElevatorResponse::id() const {
  // @@protoc_insertion_point(field_get:mruv.elevators.CreateElevatorResponse.id)
  return _internal_id();
}
inline void CreateElevatorResponse::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void CreateElevatorResponse::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.elevators.CreateElevatorResponse.id)
}

// -------------------------------------------------------------------

// GetElevatorRequest

// uint32 id = 1;
inline void GetElevatorRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetElevatorRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetElevatorRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.elevators.GetElevatorRequest.id)
  return _internal_id();
}
inline void GetElevatorRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void GetElevatorRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.elevators.GetElevatorRequest.id)
}

// -------------------------------------------------------------------

// GetElevatorResponse

// -------------------------------------------------------------------

// UpdateElevatorRequest

// uint32 id = 1;
inline void UpdateElevatorRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateElevatorRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateElevatorRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.elevators.UpdateElevatorRequest.id)
  return _internal_id();
}
inline void UpdateElevatorRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void UpdateElevatorRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.elevators.UpdateElevatorRequest.id)
}

// -------------------------------------------------------------------

// UpdateElevatorResponse

// -------------------------------------------------------------------

// DeleteElevatorRequest

// uint32 id = 1;
inline void DeleteElevatorRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteElevatorRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteElevatorRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.elevators.DeleteElevatorRequest.id)
  return _internal_id();
}
inline void DeleteElevatorRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void DeleteElevatorRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.elevators.DeleteElevatorRequest.id)
}

// -------------------------------------------------------------------

// DeleteElevatorResponse

// -------------------------------------------------------------------

// GetElevatorFloorsRequest

// uint32 id = 1;
inline void GetElevatorFloorsRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetElevatorFloorsRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetElevatorFloorsRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.elevators.GetElevatorFloorsRequest.id)
  return _internal_id();
}
inline void GetElevatorFloorsRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void GetElevatorFloorsRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.elevators.GetElevatorFloorsRequest.id)
}

// -------------------------------------------------------------------

// GetElevatorFloorsResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace elevators
}  // namespace mruv

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_elevators_2felevators_2eproto
