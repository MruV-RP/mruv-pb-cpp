// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: vehicles/vehicles.proto
#ifndef GRPC_vehicles_2fvehicles_2eproto__INCLUDED
#define GRPC_vehicles_2fvehicles_2eproto__INCLUDED

#include "vehicles/vehicles.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace mruv {
namespace vehicles {

// The MruV vehicles service provides procedures for managing vehicles.
class MruVVehiclesService final {
 public:
  static constexpr char const* service_full_name() {
    return "mruv.vehicles.MruVVehiclesService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Create a vehicle.
    virtual ::grpc::Status CreateVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::CreateVehicleRequest& request, ::mruv::vehicles::CreateVehicleResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::vehicles::CreateVehicleResponse>> AsyncCreateVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::CreateVehicleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::vehicles::CreateVehicleResponse>>(AsyncCreateVehicleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::vehicles::CreateVehicleResponse>> PrepareAsyncCreateVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::CreateVehicleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::vehicles::CreateVehicleResponse>>(PrepareAsyncCreateVehicleRaw(context, request, cq));
    }
    // Get a vehicle.
    virtual ::grpc::Status GetVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::GetVehicleRequest& request, ::mruv::vehicles::GetVehicleResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::vehicles::GetVehicleResponse>> AsyncGetVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::GetVehicleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::vehicles::GetVehicleResponse>>(AsyncGetVehicleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::vehicles::GetVehicleResponse>> PrepareAsyncGetVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::GetVehicleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::vehicles::GetVehicleResponse>>(PrepareAsyncGetVehicleRaw(context, request, cq));
    }
    // Update a vehicle.
    virtual ::grpc::Status UpdateVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::UpdateVehicleRequest& request, ::mruv::vehicles::UpdateVehicleResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::vehicles::UpdateVehicleResponse>> AsyncUpdateVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::UpdateVehicleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::vehicles::UpdateVehicleResponse>>(AsyncUpdateVehicleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::vehicles::UpdateVehicleResponse>> PrepareAsyncUpdateVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::UpdateVehicleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::vehicles::UpdateVehicleResponse>>(PrepareAsyncUpdateVehicleRaw(context, request, cq));
    }
    // Delete a vehicle.
    virtual ::grpc::Status DeleteVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::DeleteVehicleRequest& request, ::mruv::vehicles::DeleteVehicleResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::vehicles::DeleteVehicleResponse>> AsyncDeleteVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::DeleteVehicleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::vehicles::DeleteVehicleResponse>>(AsyncDeleteVehicleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::vehicles::DeleteVehicleResponse>> PrepareAsyncDeleteVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::DeleteVehicleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::vehicles::DeleteVehicleResponse>>(PrepareAsyncDeleteVehicleRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Create a vehicle.
      virtual void CreateVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::CreateVehicleRequest* request, ::mruv::vehicles::CreateVehicleResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateVehicle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::vehicles::CreateVehicleResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::CreateVehicleRequest* request, ::mruv::vehicles::CreateVehicleResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::CreateVehicleRequest* request, ::mruv::vehicles::CreateVehicleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateVehicle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::vehicles::CreateVehicleResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateVehicle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::vehicles::CreateVehicleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get a vehicle.
      virtual void GetVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::GetVehicleRequest* request, ::mruv::vehicles::GetVehicleResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetVehicle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::vehicles::GetVehicleResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::GetVehicleRequest* request, ::mruv::vehicles::GetVehicleResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::GetVehicleRequest* request, ::mruv::vehicles::GetVehicleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetVehicle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::vehicles::GetVehicleResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetVehicle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::vehicles::GetVehicleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Update a vehicle.
      virtual void UpdateVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::UpdateVehicleRequest* request, ::mruv::vehicles::UpdateVehicleResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateVehicle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::vehicles::UpdateVehicleResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::UpdateVehicleRequest* request, ::mruv::vehicles::UpdateVehicleResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::UpdateVehicleRequest* request, ::mruv::vehicles::UpdateVehicleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateVehicle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::vehicles::UpdateVehicleResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateVehicle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::vehicles::UpdateVehicleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Delete a vehicle.
      virtual void DeleteVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::DeleteVehicleRequest* request, ::mruv::vehicles::DeleteVehicleResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteVehicle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::vehicles::DeleteVehicleResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::DeleteVehicleRequest* request, ::mruv::vehicles::DeleteVehicleResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::DeleteVehicleRequest* request, ::mruv::vehicles::DeleteVehicleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteVehicle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::vehicles::DeleteVehicleResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteVehicle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::vehicles::DeleteVehicleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::vehicles::CreateVehicleResponse>* AsyncCreateVehicleRaw(::grpc::ClientContext* context, const ::mruv::vehicles::CreateVehicleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::vehicles::CreateVehicleResponse>* PrepareAsyncCreateVehicleRaw(::grpc::ClientContext* context, const ::mruv::vehicles::CreateVehicleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::vehicles::GetVehicleResponse>* AsyncGetVehicleRaw(::grpc::ClientContext* context, const ::mruv::vehicles::GetVehicleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::vehicles::GetVehicleResponse>* PrepareAsyncGetVehicleRaw(::grpc::ClientContext* context, const ::mruv::vehicles::GetVehicleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::vehicles::UpdateVehicleResponse>* AsyncUpdateVehicleRaw(::grpc::ClientContext* context, const ::mruv::vehicles::UpdateVehicleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::vehicles::UpdateVehicleResponse>* PrepareAsyncUpdateVehicleRaw(::grpc::ClientContext* context, const ::mruv::vehicles::UpdateVehicleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::vehicles::DeleteVehicleResponse>* AsyncDeleteVehicleRaw(::grpc::ClientContext* context, const ::mruv::vehicles::DeleteVehicleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::vehicles::DeleteVehicleResponse>* PrepareAsyncDeleteVehicleRaw(::grpc::ClientContext* context, const ::mruv::vehicles::DeleteVehicleRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::CreateVehicleRequest& request, ::mruv::vehicles::CreateVehicleResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::vehicles::CreateVehicleResponse>> AsyncCreateVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::CreateVehicleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::vehicles::CreateVehicleResponse>>(AsyncCreateVehicleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::vehicles::CreateVehicleResponse>> PrepareAsyncCreateVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::CreateVehicleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::vehicles::CreateVehicleResponse>>(PrepareAsyncCreateVehicleRaw(context, request, cq));
    }
    ::grpc::Status GetVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::GetVehicleRequest& request, ::mruv::vehicles::GetVehicleResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::vehicles::GetVehicleResponse>> AsyncGetVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::GetVehicleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::vehicles::GetVehicleResponse>>(AsyncGetVehicleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::vehicles::GetVehicleResponse>> PrepareAsyncGetVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::GetVehicleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::vehicles::GetVehicleResponse>>(PrepareAsyncGetVehicleRaw(context, request, cq));
    }
    ::grpc::Status UpdateVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::UpdateVehicleRequest& request, ::mruv::vehicles::UpdateVehicleResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::vehicles::UpdateVehicleResponse>> AsyncUpdateVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::UpdateVehicleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::vehicles::UpdateVehicleResponse>>(AsyncUpdateVehicleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::vehicles::UpdateVehicleResponse>> PrepareAsyncUpdateVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::UpdateVehicleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::vehicles::UpdateVehicleResponse>>(PrepareAsyncUpdateVehicleRaw(context, request, cq));
    }
    ::grpc::Status DeleteVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::DeleteVehicleRequest& request, ::mruv::vehicles::DeleteVehicleResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::vehicles::DeleteVehicleResponse>> AsyncDeleteVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::DeleteVehicleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::vehicles::DeleteVehicleResponse>>(AsyncDeleteVehicleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::vehicles::DeleteVehicleResponse>> PrepareAsyncDeleteVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::DeleteVehicleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::vehicles::DeleteVehicleResponse>>(PrepareAsyncDeleteVehicleRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::CreateVehicleRequest* request, ::mruv::vehicles::CreateVehicleResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateVehicle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::vehicles::CreateVehicleResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::CreateVehicleRequest* request, ::mruv::vehicles::CreateVehicleResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::CreateVehicleRequest* request, ::mruv::vehicles::CreateVehicleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateVehicle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::vehicles::CreateVehicleResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateVehicle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::vehicles::CreateVehicleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::GetVehicleRequest* request, ::mruv::vehicles::GetVehicleResponse* response, std::function<void(::grpc::Status)>) override;
      void GetVehicle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::vehicles::GetVehicleResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::GetVehicleRequest* request, ::mruv::vehicles::GetVehicleResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::GetVehicleRequest* request, ::mruv::vehicles::GetVehicleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetVehicle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::vehicles::GetVehicleResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetVehicle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::vehicles::GetVehicleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::UpdateVehicleRequest* request, ::mruv::vehicles::UpdateVehicleResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateVehicle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::vehicles::UpdateVehicleResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::UpdateVehicleRequest* request, ::mruv::vehicles::UpdateVehicleResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::UpdateVehicleRequest* request, ::mruv::vehicles::UpdateVehicleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateVehicle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::vehicles::UpdateVehicleResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateVehicle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::vehicles::UpdateVehicleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::DeleteVehicleRequest* request, ::mruv::vehicles::DeleteVehicleResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteVehicle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::vehicles::DeleteVehicleResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::DeleteVehicleRequest* request, ::mruv::vehicles::DeleteVehicleResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::DeleteVehicleRequest* request, ::mruv::vehicles::DeleteVehicleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteVehicle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::vehicles::DeleteVehicleResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteVehicle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::vehicles::DeleteVehicleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mruv::vehicles::CreateVehicleResponse>* AsyncCreateVehicleRaw(::grpc::ClientContext* context, const ::mruv::vehicles::CreateVehicleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::vehicles::CreateVehicleResponse>* PrepareAsyncCreateVehicleRaw(::grpc::ClientContext* context, const ::mruv::vehicles::CreateVehicleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::vehicles::GetVehicleResponse>* AsyncGetVehicleRaw(::grpc::ClientContext* context, const ::mruv::vehicles::GetVehicleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::vehicles::GetVehicleResponse>* PrepareAsyncGetVehicleRaw(::grpc::ClientContext* context, const ::mruv::vehicles::GetVehicleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::vehicles::UpdateVehicleResponse>* AsyncUpdateVehicleRaw(::grpc::ClientContext* context, const ::mruv::vehicles::UpdateVehicleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::vehicles::UpdateVehicleResponse>* PrepareAsyncUpdateVehicleRaw(::grpc::ClientContext* context, const ::mruv::vehicles::UpdateVehicleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::vehicles::DeleteVehicleResponse>* AsyncDeleteVehicleRaw(::grpc::ClientContext* context, const ::mruv::vehicles::DeleteVehicleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::vehicles::DeleteVehicleResponse>* PrepareAsyncDeleteVehicleRaw(::grpc::ClientContext* context, const ::mruv::vehicles::DeleteVehicleRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateVehicle_;
    const ::grpc::internal::RpcMethod rpcmethod_GetVehicle_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateVehicle_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteVehicle_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Create a vehicle.
    virtual ::grpc::Status CreateVehicle(::grpc::ServerContext* context, const ::mruv::vehicles::CreateVehicleRequest* request, ::mruv::vehicles::CreateVehicleResponse* response);
    // Get a vehicle.
    virtual ::grpc::Status GetVehicle(::grpc::ServerContext* context, const ::mruv::vehicles::GetVehicleRequest* request, ::mruv::vehicles::GetVehicleResponse* response);
    // Update a vehicle.
    virtual ::grpc::Status UpdateVehicle(::grpc::ServerContext* context, const ::mruv::vehicles::UpdateVehicleRequest* request, ::mruv::vehicles::UpdateVehicleResponse* response);
    // Delete a vehicle.
    virtual ::grpc::Status DeleteVehicle(::grpc::ServerContext* context, const ::mruv::vehicles::DeleteVehicleRequest* request, ::mruv::vehicles::DeleteVehicleResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateVehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateVehicle() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateVehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateVehicle(::grpc::ServerContext* /*context*/, const ::mruv::vehicles::CreateVehicleRequest* /*request*/, ::mruv::vehicles::CreateVehicleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateVehicle(::grpc::ServerContext* context, ::mruv::vehicles::CreateVehicleRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::vehicles::CreateVehicleResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetVehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetVehicle() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetVehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVehicle(::grpc::ServerContext* /*context*/, const ::mruv::vehicles::GetVehicleRequest* /*request*/, ::mruv::vehicles::GetVehicleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVehicle(::grpc::ServerContext* context, ::mruv::vehicles::GetVehicleRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::vehicles::GetVehicleResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateVehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateVehicle() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateVehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateVehicle(::grpc::ServerContext* /*context*/, const ::mruv::vehicles::UpdateVehicleRequest* /*request*/, ::mruv::vehicles::UpdateVehicleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateVehicle(::grpc::ServerContext* context, ::mruv::vehicles::UpdateVehicleRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::vehicles::UpdateVehicleResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteVehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteVehicle() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteVehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteVehicle(::grpc::ServerContext* /*context*/, const ::mruv::vehicles::DeleteVehicleRequest* /*request*/, ::mruv::vehicles::DeleteVehicleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteVehicle(::grpc::ServerContext* context, ::mruv::vehicles::DeleteVehicleRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::vehicles::DeleteVehicleResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateVehicle<WithAsyncMethod_GetVehicle<WithAsyncMethod_UpdateVehicle<WithAsyncMethod_DeleteVehicle<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateVehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateVehicle() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::vehicles::CreateVehicleRequest, ::mruv::vehicles::CreateVehicleResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::vehicles::CreateVehicleRequest* request, ::mruv::vehicles::CreateVehicleResponse* response) { return this->CreateVehicle(context, request, response); }));}
    void SetMessageAllocatorFor_CreateVehicle(
        ::grpc::experimental::MessageAllocator< ::mruv::vehicles::CreateVehicleRequest, ::mruv::vehicles::CreateVehicleResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::vehicles::CreateVehicleRequest, ::mruv::vehicles::CreateVehicleResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateVehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateVehicle(::grpc::ServerContext* /*context*/, const ::mruv::vehicles::CreateVehicleRequest* /*request*/, ::mruv::vehicles::CreateVehicleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateVehicle(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::vehicles::CreateVehicleRequest* /*request*/, ::mruv::vehicles::CreateVehicleResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateVehicle(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::vehicles::CreateVehicleRequest* /*request*/, ::mruv::vehicles::CreateVehicleResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetVehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetVehicle() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::vehicles::GetVehicleRequest, ::mruv::vehicles::GetVehicleResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::vehicles::GetVehicleRequest* request, ::mruv::vehicles::GetVehicleResponse* response) { return this->GetVehicle(context, request, response); }));}
    void SetMessageAllocatorFor_GetVehicle(
        ::grpc::experimental::MessageAllocator< ::mruv::vehicles::GetVehicleRequest, ::mruv::vehicles::GetVehicleResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::vehicles::GetVehicleRequest, ::mruv::vehicles::GetVehicleResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetVehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVehicle(::grpc::ServerContext* /*context*/, const ::mruv::vehicles::GetVehicleRequest* /*request*/, ::mruv::vehicles::GetVehicleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetVehicle(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::vehicles::GetVehicleRequest* /*request*/, ::mruv::vehicles::GetVehicleResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetVehicle(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::vehicles::GetVehicleRequest* /*request*/, ::mruv::vehicles::GetVehicleResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateVehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateVehicle() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::vehicles::UpdateVehicleRequest, ::mruv::vehicles::UpdateVehicleResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::vehicles::UpdateVehicleRequest* request, ::mruv::vehicles::UpdateVehicleResponse* response) { return this->UpdateVehicle(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateVehicle(
        ::grpc::experimental::MessageAllocator< ::mruv::vehicles::UpdateVehicleRequest, ::mruv::vehicles::UpdateVehicleResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::vehicles::UpdateVehicleRequest, ::mruv::vehicles::UpdateVehicleResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateVehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateVehicle(::grpc::ServerContext* /*context*/, const ::mruv::vehicles::UpdateVehicleRequest* /*request*/, ::mruv::vehicles::UpdateVehicleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateVehicle(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::vehicles::UpdateVehicleRequest* /*request*/, ::mruv::vehicles::UpdateVehicleResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateVehicle(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::vehicles::UpdateVehicleRequest* /*request*/, ::mruv::vehicles::UpdateVehicleResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteVehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteVehicle() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::vehicles::DeleteVehicleRequest, ::mruv::vehicles::DeleteVehicleResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::vehicles::DeleteVehicleRequest* request, ::mruv::vehicles::DeleteVehicleResponse* response) { return this->DeleteVehicle(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteVehicle(
        ::grpc::experimental::MessageAllocator< ::mruv::vehicles::DeleteVehicleRequest, ::mruv::vehicles::DeleteVehicleResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::vehicles::DeleteVehicleRequest, ::mruv::vehicles::DeleteVehicleResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteVehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteVehicle(::grpc::ServerContext* /*context*/, const ::mruv::vehicles::DeleteVehicleRequest* /*request*/, ::mruv::vehicles::DeleteVehicleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteVehicle(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::vehicles::DeleteVehicleRequest* /*request*/, ::mruv::vehicles::DeleteVehicleResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteVehicle(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::vehicles::DeleteVehicleRequest* /*request*/, ::mruv::vehicles::DeleteVehicleResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_CreateVehicle<ExperimentalWithCallbackMethod_GetVehicle<ExperimentalWithCallbackMethod_UpdateVehicle<ExperimentalWithCallbackMethod_DeleteVehicle<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_CreateVehicle<ExperimentalWithCallbackMethod_GetVehicle<ExperimentalWithCallbackMethod_UpdateVehicle<ExperimentalWithCallbackMethod_DeleteVehicle<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateVehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateVehicle() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateVehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateVehicle(::grpc::ServerContext* /*context*/, const ::mruv::vehicles::CreateVehicleRequest* /*request*/, ::mruv::vehicles::CreateVehicleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetVehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetVehicle() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetVehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVehicle(::grpc::ServerContext* /*context*/, const ::mruv::vehicles::GetVehicleRequest* /*request*/, ::mruv::vehicles::GetVehicleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateVehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateVehicle() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateVehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateVehicle(::grpc::ServerContext* /*context*/, const ::mruv::vehicles::UpdateVehicleRequest* /*request*/, ::mruv::vehicles::UpdateVehicleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteVehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteVehicle() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteVehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteVehicle(::grpc::ServerContext* /*context*/, const ::mruv::vehicles::DeleteVehicleRequest* /*request*/, ::mruv::vehicles::DeleteVehicleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateVehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateVehicle() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateVehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateVehicle(::grpc::ServerContext* /*context*/, const ::mruv::vehicles::CreateVehicleRequest* /*request*/, ::mruv::vehicles::CreateVehicleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateVehicle(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetVehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetVehicle() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetVehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVehicle(::grpc::ServerContext* /*context*/, const ::mruv::vehicles::GetVehicleRequest* /*request*/, ::mruv::vehicles::GetVehicleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVehicle(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateVehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateVehicle() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateVehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateVehicle(::grpc::ServerContext* /*context*/, const ::mruv::vehicles::UpdateVehicleRequest* /*request*/, ::mruv::vehicles::UpdateVehicleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateVehicle(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteVehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteVehicle() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteVehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteVehicle(::grpc::ServerContext* /*context*/, const ::mruv::vehicles::DeleteVehicleRequest* /*request*/, ::mruv::vehicles::DeleteVehicleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteVehicle(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateVehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateVehicle() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateVehicle(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateVehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateVehicle(::grpc::ServerContext* /*context*/, const ::mruv::vehicles::CreateVehicleRequest* /*request*/, ::mruv::vehicles::CreateVehicleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateVehicle(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateVehicle(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetVehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetVehicle() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetVehicle(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetVehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVehicle(::grpc::ServerContext* /*context*/, const ::mruv::vehicles::GetVehicleRequest* /*request*/, ::mruv::vehicles::GetVehicleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetVehicle(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetVehicle(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateVehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateVehicle() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateVehicle(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateVehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateVehicle(::grpc::ServerContext* /*context*/, const ::mruv::vehicles::UpdateVehicleRequest* /*request*/, ::mruv::vehicles::UpdateVehicleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateVehicle(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateVehicle(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteVehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteVehicle() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteVehicle(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteVehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteVehicle(::grpc::ServerContext* /*context*/, const ::mruv::vehicles::DeleteVehicleRequest* /*request*/, ::mruv::vehicles::DeleteVehicleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteVehicle(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteVehicle(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateVehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateVehicle() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::vehicles::CreateVehicleRequest, ::mruv::vehicles::CreateVehicleResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::vehicles::CreateVehicleRequest, ::mruv::vehicles::CreateVehicleResponse>* streamer) {
                       return this->StreamedCreateVehicle(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateVehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateVehicle(::grpc::ServerContext* /*context*/, const ::mruv::vehicles::CreateVehicleRequest* /*request*/, ::mruv::vehicles::CreateVehicleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateVehicle(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::vehicles::CreateVehicleRequest,::mruv::vehicles::CreateVehicleResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetVehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetVehicle() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::vehicles::GetVehicleRequest, ::mruv::vehicles::GetVehicleResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::vehicles::GetVehicleRequest, ::mruv::vehicles::GetVehicleResponse>* streamer) {
                       return this->StreamedGetVehicle(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetVehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetVehicle(::grpc::ServerContext* /*context*/, const ::mruv::vehicles::GetVehicleRequest* /*request*/, ::mruv::vehicles::GetVehicleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetVehicle(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::vehicles::GetVehicleRequest,::mruv::vehicles::GetVehicleResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateVehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateVehicle() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::vehicles::UpdateVehicleRequest, ::mruv::vehicles::UpdateVehicleResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::vehicles::UpdateVehicleRequest, ::mruv::vehicles::UpdateVehicleResponse>* streamer) {
                       return this->StreamedUpdateVehicle(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateVehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateVehicle(::grpc::ServerContext* /*context*/, const ::mruv::vehicles::UpdateVehicleRequest* /*request*/, ::mruv::vehicles::UpdateVehicleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateVehicle(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::vehicles::UpdateVehicleRequest,::mruv::vehicles::UpdateVehicleResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteVehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteVehicle() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mruv::vehicles::DeleteVehicleRequest, ::mruv::vehicles::DeleteVehicleResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mruv::vehicles::DeleteVehicleRequest, ::mruv::vehicles::DeleteVehicleResponse>* streamer) {
                       return this->StreamedDeleteVehicle(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteVehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteVehicle(::grpc::ServerContext* /*context*/, const ::mruv::vehicles::DeleteVehicleRequest* /*request*/, ::mruv::vehicles::DeleteVehicleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteVehicle(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::vehicles::DeleteVehicleRequest,::mruv::vehicles::DeleteVehicleResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateVehicle<WithStreamedUnaryMethod_GetVehicle<WithStreamedUnaryMethod_UpdateVehicle<WithStreamedUnaryMethod_DeleteVehicle<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateVehicle<WithStreamedUnaryMethod_GetVehicle<WithStreamedUnaryMethod_UpdateVehicle<WithStreamedUnaryMethod_DeleteVehicle<Service > > > > StreamedService;
};

}  // namespace vehicles
}  // namespace mruv


#endif  // GRPC_vehicles_2fvehicles_2eproto__INCLUDED
