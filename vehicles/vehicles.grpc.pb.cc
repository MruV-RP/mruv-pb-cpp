// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: vehicles/vehicles.proto

#include "vehicles/vehicles.pb.h"
#include "vehicles/vehicles.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace mruv {
namespace vehicles {

static const char* MruVVehiclesService_method_names[] = {
  "/mruv.vehicles.MruVVehiclesService/CreateVehicle",
  "/mruv.vehicles.MruVVehiclesService/GetVehicle",
  "/mruv.vehicles.MruVVehiclesService/UpdateVehicle",
  "/mruv.vehicles.MruVVehiclesService/DeleteVehicle",
};

std::unique_ptr< MruVVehiclesService::Stub> MruVVehiclesService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MruVVehiclesService::Stub> stub(new MruVVehiclesService::Stub(channel));
  return stub;
}

MruVVehiclesService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateVehicle_(MruVVehiclesService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetVehicle_(MruVVehiclesService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateVehicle_(MruVVehiclesService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteVehicle_(MruVVehiclesService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MruVVehiclesService::Stub::CreateVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::CreateVehicleRequest& request, ::mruv::vehicles::CreateVehicleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateVehicle_, context, request, response);
}

void MruVVehiclesService::Stub::experimental_async::CreateVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::CreateVehicleRequest* request, ::mruv::vehicles::CreateVehicleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateVehicle_, context, request, response, std::move(f));
}

void MruVVehiclesService::Stub::experimental_async::CreateVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::CreateVehicleRequest* request, ::mruv::vehicles::CreateVehicleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateVehicle_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::vehicles::CreateVehicleResponse>* MruVVehiclesService::Stub::PrepareAsyncCreateVehicleRaw(::grpc::ClientContext* context, const ::mruv::vehicles::CreateVehicleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mruv::vehicles::CreateVehicleResponse>::Create(channel_.get(), cq, rpcmethod_CreateVehicle_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::mruv::vehicles::CreateVehicleResponse>* MruVVehiclesService::Stub::AsyncCreateVehicleRaw(::grpc::ClientContext* context, const ::mruv::vehicles::CreateVehicleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateVehicleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MruVVehiclesService::Stub::GetVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::GetVehicleRequest& request, ::mruv::vehicles::GetVehicleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetVehicle_, context, request, response);
}

void MruVVehiclesService::Stub::experimental_async::GetVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::GetVehicleRequest* request, ::mruv::vehicles::GetVehicleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetVehicle_, context, request, response, std::move(f));
}

void MruVVehiclesService::Stub::experimental_async::GetVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::GetVehicleRequest* request, ::mruv::vehicles::GetVehicleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetVehicle_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::vehicles::GetVehicleResponse>* MruVVehiclesService::Stub::PrepareAsyncGetVehicleRaw(::grpc::ClientContext* context, const ::mruv::vehicles::GetVehicleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mruv::vehicles::GetVehicleResponse>::Create(channel_.get(), cq, rpcmethod_GetVehicle_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::mruv::vehicles::GetVehicleResponse>* MruVVehiclesService::Stub::AsyncGetVehicleRaw(::grpc::ClientContext* context, const ::mruv::vehicles::GetVehicleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetVehicleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MruVVehiclesService::Stub::UpdateVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::UpdateVehicleRequest& request, ::mruv::vehicles::UpdateVehicleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateVehicle_, context, request, response);
}

void MruVVehiclesService::Stub::experimental_async::UpdateVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::UpdateVehicleRequest* request, ::mruv::vehicles::UpdateVehicleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateVehicle_, context, request, response, std::move(f));
}

void MruVVehiclesService::Stub::experimental_async::UpdateVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::UpdateVehicleRequest* request, ::mruv::vehicles::UpdateVehicleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateVehicle_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::vehicles::UpdateVehicleResponse>* MruVVehiclesService::Stub::PrepareAsyncUpdateVehicleRaw(::grpc::ClientContext* context, const ::mruv::vehicles::UpdateVehicleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mruv::vehicles::UpdateVehicleResponse>::Create(channel_.get(), cq, rpcmethod_UpdateVehicle_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::mruv::vehicles::UpdateVehicleResponse>* MruVVehiclesService::Stub::AsyncUpdateVehicleRaw(::grpc::ClientContext* context, const ::mruv::vehicles::UpdateVehicleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateVehicleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MruVVehiclesService::Stub::DeleteVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::DeleteVehicleRequest& request, ::mruv::vehicles::DeleteVehicleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteVehicle_, context, request, response);
}

void MruVVehiclesService::Stub::experimental_async::DeleteVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::DeleteVehicleRequest* request, ::mruv::vehicles::DeleteVehicleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteVehicle_, context, request, response, std::move(f));
}

void MruVVehiclesService::Stub::experimental_async::DeleteVehicle(::grpc::ClientContext* context, const ::mruv::vehicles::DeleteVehicleRequest* request, ::mruv::vehicles::DeleteVehicleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteVehicle_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::vehicles::DeleteVehicleResponse>* MruVVehiclesService::Stub::PrepareAsyncDeleteVehicleRaw(::grpc::ClientContext* context, const ::mruv::vehicles::DeleteVehicleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mruv::vehicles::DeleteVehicleResponse>::Create(channel_.get(), cq, rpcmethod_DeleteVehicle_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::mruv::vehicles::DeleteVehicleResponse>* MruVVehiclesService::Stub::AsyncDeleteVehicleRaw(::grpc::ClientContext* context, const ::mruv::vehicles::DeleteVehicleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteVehicleRaw(context, request, cq);
  result->StartCall();
  return result;
}

MruVVehiclesService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVVehiclesService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVVehiclesService::Service, ::mruv::vehicles::CreateVehicleRequest, ::mruv::vehicles::CreateVehicleResponse>(
          [](MruVVehiclesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mruv::vehicles::CreateVehicleRequest* req,
             ::mruv::vehicles::CreateVehicleResponse* resp) {
               return service->CreateVehicle(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVVehiclesService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVVehiclesService::Service, ::mruv::vehicles::GetVehicleRequest, ::mruv::vehicles::GetVehicleResponse>(
          [](MruVVehiclesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mruv::vehicles::GetVehicleRequest* req,
             ::mruv::vehicles::GetVehicleResponse* resp) {
               return service->GetVehicle(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVVehiclesService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVVehiclesService::Service, ::mruv::vehicles::UpdateVehicleRequest, ::mruv::vehicles::UpdateVehicleResponse>(
          [](MruVVehiclesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mruv::vehicles::UpdateVehicleRequest* req,
             ::mruv::vehicles::UpdateVehicleResponse* resp) {
               return service->UpdateVehicle(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVVehiclesService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVVehiclesService::Service, ::mruv::vehicles::DeleteVehicleRequest, ::mruv::vehicles::DeleteVehicleResponse>(
          [](MruVVehiclesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mruv::vehicles::DeleteVehicleRequest* req,
             ::mruv::vehicles::DeleteVehicleResponse* resp) {
               return service->DeleteVehicle(ctx, req, resp);
             }, this)));
}

MruVVehiclesService::Service::~Service() {
}

::grpc::Status MruVVehiclesService::Service::CreateVehicle(::grpc::ServerContext* context, const ::mruv::vehicles::CreateVehicleRequest* request, ::mruv::vehicles::CreateVehicleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVVehiclesService::Service::GetVehicle(::grpc::ServerContext* context, const ::mruv::vehicles::GetVehicleRequest* request, ::mruv::vehicles::GetVehicleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVVehiclesService::Service::UpdateVehicle(::grpc::ServerContext* context, const ::mruv::vehicles::UpdateVehicleRequest* request, ::mruv::vehicles::UpdateVehicleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVVehiclesService::Service::DeleteVehicle(::grpc::ServerContext* context, const ::mruv::vehicles::DeleteVehicleRequest* request, ::mruv::vehicles::DeleteVehicleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mruv
}  // namespace vehicles

