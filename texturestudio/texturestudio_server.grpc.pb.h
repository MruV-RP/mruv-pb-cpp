// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: texturestudio/texturestudio_server.proto
#ifndef GRPC_texturestudio_2ftexturestudio_5fserver_2eproto__INCLUDED
#define GRPC_texturestudio_2ftexturestudio_5fserver_2eproto__INCLUDED

#include "texturestudio/texturestudio_server.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace texture_studio {

// Service to manage texture studio server.
class TextureStudioServerService final {
 public:
  static constexpr char const* service_full_name() {
    return "texture_studio.TextureStudioServerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Start a texture studio server.
    virtual ::grpc::Status StartServer(::grpc::ClientContext* context, const ::texture_studio::StartServerRequest& request, ::texture_studio::StartServerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::StartServerResponse>> AsyncStartServer(::grpc::ClientContext* context, const ::texture_studio::StartServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::StartServerResponse>>(AsyncStartServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::StartServerResponse>> PrepareAsyncStartServer(::grpc::ClientContext* context, const ::texture_studio::StartServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::StartServerResponse>>(PrepareAsyncStartServerRaw(context, request, cq));
    }
    // Stop a texture studio server.
    virtual ::grpc::Status StopServer(::grpc::ClientContext* context, const ::texture_studio::StopServerRequest& request, ::texture_studio::StopServerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::StopServerResponse>> AsyncStopServer(::grpc::ClientContext* context, const ::texture_studio::StopServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::StopServerResponse>>(AsyncStopServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::StopServerResponse>> PrepareAsyncStopServer(::grpc::ClientContext* context, const ::texture_studio::StopServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::StopServerResponse>>(PrepareAsyncStopServerRaw(context, request, cq));
    }
    // Restart a texture studio server.
    virtual ::grpc::Status RestartServer(::grpc::ClientContext* context, const ::texture_studio::RestartServerRequest& request, ::texture_studio::RestartServerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::RestartServerResponse>> AsyncRestartServer(::grpc::ClientContext* context, const ::texture_studio::RestartServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::RestartServerResponse>>(AsyncRestartServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::RestartServerResponse>> PrepareAsyncRestartServer(::grpc::ClientContext* context, const ::texture_studio::RestartServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::RestartServerResponse>>(PrepareAsyncRestartServerRaw(context, request, cq));
    }
    // Get texture studio server status.
    virtual ::grpc::Status ServerStatus(::grpc::ClientContext* context, const ::texture_studio::ServerStatusRequest& request, ::texture_studio::ServerStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::ServerStatusResponse>> AsyncServerStatus(::grpc::ClientContext* context, const ::texture_studio::ServerStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::ServerStatusResponse>>(AsyncServerStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::ServerStatusResponse>> PrepareAsyncServerStatus(::grpc::ClientContext* context, const ::texture_studio::ServerStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::ServerStatusResponse>>(PrepareAsyncServerStatusRaw(context, request, cq));
    }
    // Upload project to texture studio.
    virtual ::grpc::Status UploadProject(::grpc::ClientContext* context, const ::texture_studio::UploadProjectRequest& request, ::texture_studio::UploadProjectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::UploadProjectResponse>> AsyncUploadProject(::grpc::ClientContext* context, const ::texture_studio::UploadProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::UploadProjectResponse>>(AsyncUploadProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::UploadProjectResponse>> PrepareAsyncUploadProject(::grpc::ClientContext* context, const ::texture_studio::UploadProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::UploadProjectResponse>>(PrepareAsyncUploadProjectRaw(context, request, cq));
    }
    // Get texture-studio objects project.
    virtual ::grpc::Status GetProject(::grpc::ClientContext* context, const ::texture_studio::GetProjectRequest& request, ::texture_studio::GetProjectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::GetProjectResponse>> AsyncGetProject(::grpc::ClientContext* context, const ::texture_studio::GetProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::GetProjectResponse>>(AsyncGetProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::GetProjectResponse>> PrepareAsyncGetProject(::grpc::ClientContext* context, const ::texture_studio::GetProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::GetProjectResponse>>(PrepareAsyncGetProjectRaw(context, request, cq));
    }
    // Get all projects.
    virtual ::grpc::Status GetProjects(::grpc::ClientContext* context, const ::texture_studio::GetProjectsRequest& request, ::texture_studio::GetProjectsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::GetProjectsResponse>> AsyncGetProjects(::grpc::ClientContext* context, const ::texture_studio::GetProjectsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::GetProjectsResponse>>(AsyncGetProjectsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::GetProjectsResponse>> PrepareAsyncGetProjects(::grpc::ClientContext* context, const ::texture_studio::GetProjectsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::GetProjectsResponse>>(PrepareAsyncGetProjectsRaw(context, request, cq));
    }
    // Listen for project changes - if texture studio project has been created or modified, this will trigger an event.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::texture_studio::SubscribeToProjectsChangesResponse>> SubscribeToProjectsChanges(::grpc::ClientContext* context, const ::texture_studio::SubscribeToProjectsChangesRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::texture_studio::SubscribeToProjectsChangesResponse>>(SubscribeToProjectsChangesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::texture_studio::SubscribeToProjectsChangesResponse>> AsyncSubscribeToProjectsChanges(::grpc::ClientContext* context, const ::texture_studio::SubscribeToProjectsChangesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::texture_studio::SubscribeToProjectsChangesResponse>>(AsyncSubscribeToProjectsChangesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::texture_studio::SubscribeToProjectsChangesResponse>> PrepareAsyncSubscribeToProjectsChanges(::grpc::ClientContext* context, const ::texture_studio::SubscribeToProjectsChangesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::texture_studio::SubscribeToProjectsChangesResponse>>(PrepareAsyncSubscribeToProjectsChangesRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Start a texture studio server.
      virtual void StartServer(::grpc::ClientContext* context, const ::texture_studio::StartServerRequest* request, ::texture_studio::StartServerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StartServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::StartServerResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StartServer(::grpc::ClientContext* context, const ::texture_studio::StartServerRequest* request, ::texture_studio::StartServerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StartServer(::grpc::ClientContext* context, const ::texture_studio::StartServerRequest* request, ::texture_studio::StartServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StartServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::StartServerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StartServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::StartServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Stop a texture studio server.
      virtual void StopServer(::grpc::ClientContext* context, const ::texture_studio::StopServerRequest* request, ::texture_studio::StopServerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StopServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::StopServerResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StopServer(::grpc::ClientContext* context, const ::texture_studio::StopServerRequest* request, ::texture_studio::StopServerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StopServer(::grpc::ClientContext* context, const ::texture_studio::StopServerRequest* request, ::texture_studio::StopServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StopServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::StopServerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StopServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::StopServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Restart a texture studio server.
      virtual void RestartServer(::grpc::ClientContext* context, const ::texture_studio::RestartServerRequest* request, ::texture_studio::RestartServerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RestartServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::RestartServerResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RestartServer(::grpc::ClientContext* context, const ::texture_studio::RestartServerRequest* request, ::texture_studio::RestartServerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RestartServer(::grpc::ClientContext* context, const ::texture_studio::RestartServerRequest* request, ::texture_studio::RestartServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RestartServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::RestartServerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RestartServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::RestartServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get texture studio server status.
      virtual void ServerStatus(::grpc::ClientContext* context, const ::texture_studio::ServerStatusRequest* request, ::texture_studio::ServerStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ServerStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::ServerStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ServerStatus(::grpc::ClientContext* context, const ::texture_studio::ServerStatusRequest* request, ::texture_studio::ServerStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ServerStatus(::grpc::ClientContext* context, const ::texture_studio::ServerStatusRequest* request, ::texture_studio::ServerStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ServerStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::ServerStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ServerStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::ServerStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Upload project to texture studio.
      virtual void UploadProject(::grpc::ClientContext* context, const ::texture_studio::UploadProjectRequest* request, ::texture_studio::UploadProjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UploadProject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::UploadProjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UploadProject(::grpc::ClientContext* context, const ::texture_studio::UploadProjectRequest* request, ::texture_studio::UploadProjectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UploadProject(::grpc::ClientContext* context, const ::texture_studio::UploadProjectRequest* request, ::texture_studio::UploadProjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UploadProject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::UploadProjectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UploadProject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::UploadProjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get texture-studio objects project.
      virtual void GetProject(::grpc::ClientContext* context, const ::texture_studio::GetProjectRequest* request, ::texture_studio::GetProjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetProject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::GetProjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetProject(::grpc::ClientContext* context, const ::texture_studio::GetProjectRequest* request, ::texture_studio::GetProjectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetProject(::grpc::ClientContext* context, const ::texture_studio::GetProjectRequest* request, ::texture_studio::GetProjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetProject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::GetProjectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetProject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::GetProjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get all projects.
      virtual void GetProjects(::grpc::ClientContext* context, const ::texture_studio::GetProjectsRequest* request, ::texture_studio::GetProjectsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetProjects(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::GetProjectsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetProjects(::grpc::ClientContext* context, const ::texture_studio::GetProjectsRequest* request, ::texture_studio::GetProjectsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetProjects(::grpc::ClientContext* context, const ::texture_studio::GetProjectsRequest* request, ::texture_studio::GetProjectsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetProjects(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::GetProjectsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetProjects(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::GetProjectsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Listen for project changes - if texture studio project has been created or modified, this will trigger an event.
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SubscribeToProjectsChanges(::grpc::ClientContext* context, ::texture_studio::SubscribeToProjectsChangesRequest* request, ::grpc::ClientReadReactor< ::texture_studio::SubscribeToProjectsChangesResponse>* reactor) = 0;
      #else
      virtual void SubscribeToProjectsChanges(::grpc::ClientContext* context, ::texture_studio::SubscribeToProjectsChangesRequest* request, ::grpc::experimental::ClientReadReactor< ::texture_studio::SubscribeToProjectsChangesResponse>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::StartServerResponse>* AsyncStartServerRaw(::grpc::ClientContext* context, const ::texture_studio::StartServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::StartServerResponse>* PrepareAsyncStartServerRaw(::grpc::ClientContext* context, const ::texture_studio::StartServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::StopServerResponse>* AsyncStopServerRaw(::grpc::ClientContext* context, const ::texture_studio::StopServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::StopServerResponse>* PrepareAsyncStopServerRaw(::grpc::ClientContext* context, const ::texture_studio::StopServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::RestartServerResponse>* AsyncRestartServerRaw(::grpc::ClientContext* context, const ::texture_studio::RestartServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::RestartServerResponse>* PrepareAsyncRestartServerRaw(::grpc::ClientContext* context, const ::texture_studio::RestartServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::ServerStatusResponse>* AsyncServerStatusRaw(::grpc::ClientContext* context, const ::texture_studio::ServerStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::ServerStatusResponse>* PrepareAsyncServerStatusRaw(::grpc::ClientContext* context, const ::texture_studio::ServerStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::UploadProjectResponse>* AsyncUploadProjectRaw(::grpc::ClientContext* context, const ::texture_studio::UploadProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::UploadProjectResponse>* PrepareAsyncUploadProjectRaw(::grpc::ClientContext* context, const ::texture_studio::UploadProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::GetProjectResponse>* AsyncGetProjectRaw(::grpc::ClientContext* context, const ::texture_studio::GetProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::GetProjectResponse>* PrepareAsyncGetProjectRaw(::grpc::ClientContext* context, const ::texture_studio::GetProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::GetProjectsResponse>* AsyncGetProjectsRaw(::grpc::ClientContext* context, const ::texture_studio::GetProjectsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::GetProjectsResponse>* PrepareAsyncGetProjectsRaw(::grpc::ClientContext* context, const ::texture_studio::GetProjectsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::texture_studio::SubscribeToProjectsChangesResponse>* SubscribeToProjectsChangesRaw(::grpc::ClientContext* context, const ::texture_studio::SubscribeToProjectsChangesRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::texture_studio::SubscribeToProjectsChangesResponse>* AsyncSubscribeToProjectsChangesRaw(::grpc::ClientContext* context, const ::texture_studio::SubscribeToProjectsChangesRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::texture_studio::SubscribeToProjectsChangesResponse>* PrepareAsyncSubscribeToProjectsChangesRaw(::grpc::ClientContext* context, const ::texture_studio::SubscribeToProjectsChangesRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status StartServer(::grpc::ClientContext* context, const ::texture_studio::StartServerRequest& request, ::texture_studio::StartServerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::StartServerResponse>> AsyncStartServer(::grpc::ClientContext* context, const ::texture_studio::StartServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::StartServerResponse>>(AsyncStartServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::StartServerResponse>> PrepareAsyncStartServer(::grpc::ClientContext* context, const ::texture_studio::StartServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::StartServerResponse>>(PrepareAsyncStartServerRaw(context, request, cq));
    }
    ::grpc::Status StopServer(::grpc::ClientContext* context, const ::texture_studio::StopServerRequest& request, ::texture_studio::StopServerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::StopServerResponse>> AsyncStopServer(::grpc::ClientContext* context, const ::texture_studio::StopServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::StopServerResponse>>(AsyncStopServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::StopServerResponse>> PrepareAsyncStopServer(::grpc::ClientContext* context, const ::texture_studio::StopServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::StopServerResponse>>(PrepareAsyncStopServerRaw(context, request, cq));
    }
    ::grpc::Status RestartServer(::grpc::ClientContext* context, const ::texture_studio::RestartServerRequest& request, ::texture_studio::RestartServerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::RestartServerResponse>> AsyncRestartServer(::grpc::ClientContext* context, const ::texture_studio::RestartServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::RestartServerResponse>>(AsyncRestartServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::RestartServerResponse>> PrepareAsyncRestartServer(::grpc::ClientContext* context, const ::texture_studio::RestartServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::RestartServerResponse>>(PrepareAsyncRestartServerRaw(context, request, cq));
    }
    ::grpc::Status ServerStatus(::grpc::ClientContext* context, const ::texture_studio::ServerStatusRequest& request, ::texture_studio::ServerStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::ServerStatusResponse>> AsyncServerStatus(::grpc::ClientContext* context, const ::texture_studio::ServerStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::ServerStatusResponse>>(AsyncServerStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::ServerStatusResponse>> PrepareAsyncServerStatus(::grpc::ClientContext* context, const ::texture_studio::ServerStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::ServerStatusResponse>>(PrepareAsyncServerStatusRaw(context, request, cq));
    }
    ::grpc::Status UploadProject(::grpc::ClientContext* context, const ::texture_studio::UploadProjectRequest& request, ::texture_studio::UploadProjectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::UploadProjectResponse>> AsyncUploadProject(::grpc::ClientContext* context, const ::texture_studio::UploadProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::UploadProjectResponse>>(AsyncUploadProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::UploadProjectResponse>> PrepareAsyncUploadProject(::grpc::ClientContext* context, const ::texture_studio::UploadProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::UploadProjectResponse>>(PrepareAsyncUploadProjectRaw(context, request, cq));
    }
    ::grpc::Status GetProject(::grpc::ClientContext* context, const ::texture_studio::GetProjectRequest& request, ::texture_studio::GetProjectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::GetProjectResponse>> AsyncGetProject(::grpc::ClientContext* context, const ::texture_studio::GetProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::GetProjectResponse>>(AsyncGetProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::GetProjectResponse>> PrepareAsyncGetProject(::grpc::ClientContext* context, const ::texture_studio::GetProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::GetProjectResponse>>(PrepareAsyncGetProjectRaw(context, request, cq));
    }
    ::grpc::Status GetProjects(::grpc::ClientContext* context, const ::texture_studio::GetProjectsRequest& request, ::texture_studio::GetProjectsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::GetProjectsResponse>> AsyncGetProjects(::grpc::ClientContext* context, const ::texture_studio::GetProjectsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::GetProjectsResponse>>(AsyncGetProjectsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::GetProjectsResponse>> PrepareAsyncGetProjects(::grpc::ClientContext* context, const ::texture_studio::GetProjectsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::GetProjectsResponse>>(PrepareAsyncGetProjectsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::texture_studio::SubscribeToProjectsChangesResponse>> SubscribeToProjectsChanges(::grpc::ClientContext* context, const ::texture_studio::SubscribeToProjectsChangesRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::texture_studio::SubscribeToProjectsChangesResponse>>(SubscribeToProjectsChangesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::texture_studio::SubscribeToProjectsChangesResponse>> AsyncSubscribeToProjectsChanges(::grpc::ClientContext* context, const ::texture_studio::SubscribeToProjectsChangesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::texture_studio::SubscribeToProjectsChangesResponse>>(AsyncSubscribeToProjectsChangesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::texture_studio::SubscribeToProjectsChangesResponse>> PrepareAsyncSubscribeToProjectsChanges(::grpc::ClientContext* context, const ::texture_studio::SubscribeToProjectsChangesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::texture_studio::SubscribeToProjectsChangesResponse>>(PrepareAsyncSubscribeToProjectsChangesRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void StartServer(::grpc::ClientContext* context, const ::texture_studio::StartServerRequest* request, ::texture_studio::StartServerResponse* response, std::function<void(::grpc::Status)>) override;
      void StartServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::StartServerResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StartServer(::grpc::ClientContext* context, const ::texture_studio::StartServerRequest* request, ::texture_studio::StartServerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StartServer(::grpc::ClientContext* context, const ::texture_studio::StartServerRequest* request, ::texture_studio::StartServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StartServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::StartServerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StartServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::StartServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void StopServer(::grpc::ClientContext* context, const ::texture_studio::StopServerRequest* request, ::texture_studio::StopServerResponse* response, std::function<void(::grpc::Status)>) override;
      void StopServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::StopServerResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StopServer(::grpc::ClientContext* context, const ::texture_studio::StopServerRequest* request, ::texture_studio::StopServerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StopServer(::grpc::ClientContext* context, const ::texture_studio::StopServerRequest* request, ::texture_studio::StopServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StopServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::StopServerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StopServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::StopServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RestartServer(::grpc::ClientContext* context, const ::texture_studio::RestartServerRequest* request, ::texture_studio::RestartServerResponse* response, std::function<void(::grpc::Status)>) override;
      void RestartServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::RestartServerResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RestartServer(::grpc::ClientContext* context, const ::texture_studio::RestartServerRequest* request, ::texture_studio::RestartServerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RestartServer(::grpc::ClientContext* context, const ::texture_studio::RestartServerRequest* request, ::texture_studio::RestartServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RestartServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::RestartServerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RestartServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::RestartServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ServerStatus(::grpc::ClientContext* context, const ::texture_studio::ServerStatusRequest* request, ::texture_studio::ServerStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void ServerStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::ServerStatusResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ServerStatus(::grpc::ClientContext* context, const ::texture_studio::ServerStatusRequest* request, ::texture_studio::ServerStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ServerStatus(::grpc::ClientContext* context, const ::texture_studio::ServerStatusRequest* request, ::texture_studio::ServerStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ServerStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::ServerStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ServerStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::ServerStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UploadProject(::grpc::ClientContext* context, const ::texture_studio::UploadProjectRequest* request, ::texture_studio::UploadProjectResponse* response, std::function<void(::grpc::Status)>) override;
      void UploadProject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::UploadProjectResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UploadProject(::grpc::ClientContext* context, const ::texture_studio::UploadProjectRequest* request, ::texture_studio::UploadProjectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UploadProject(::grpc::ClientContext* context, const ::texture_studio::UploadProjectRequest* request, ::texture_studio::UploadProjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UploadProject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::UploadProjectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UploadProject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::UploadProjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetProject(::grpc::ClientContext* context, const ::texture_studio::GetProjectRequest* request, ::texture_studio::GetProjectResponse* response, std::function<void(::grpc::Status)>) override;
      void GetProject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::GetProjectResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetProject(::grpc::ClientContext* context, const ::texture_studio::GetProjectRequest* request, ::texture_studio::GetProjectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetProject(::grpc::ClientContext* context, const ::texture_studio::GetProjectRequest* request, ::texture_studio::GetProjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetProject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::GetProjectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetProject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::GetProjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetProjects(::grpc::ClientContext* context, const ::texture_studio::GetProjectsRequest* request, ::texture_studio::GetProjectsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetProjects(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::GetProjectsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetProjects(::grpc::ClientContext* context, const ::texture_studio::GetProjectsRequest* request, ::texture_studio::GetProjectsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetProjects(::grpc::ClientContext* context, const ::texture_studio::GetProjectsRequest* request, ::texture_studio::GetProjectsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetProjects(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::GetProjectsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetProjects(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::GetProjectsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SubscribeToProjectsChanges(::grpc::ClientContext* context, ::texture_studio::SubscribeToProjectsChangesRequest* request, ::grpc::ClientReadReactor< ::texture_studio::SubscribeToProjectsChangesResponse>* reactor) override;
      #else
      void SubscribeToProjectsChanges(::grpc::ClientContext* context, ::texture_studio::SubscribeToProjectsChangesRequest* request, ::grpc::experimental::ClientReadReactor< ::texture_studio::SubscribeToProjectsChangesResponse>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::texture_studio::StartServerResponse>* AsyncStartServerRaw(::grpc::ClientContext* context, const ::texture_studio::StartServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::texture_studio::StartServerResponse>* PrepareAsyncStartServerRaw(::grpc::ClientContext* context, const ::texture_studio::StartServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::texture_studio::StopServerResponse>* AsyncStopServerRaw(::grpc::ClientContext* context, const ::texture_studio::StopServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::texture_studio::StopServerResponse>* PrepareAsyncStopServerRaw(::grpc::ClientContext* context, const ::texture_studio::StopServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::texture_studio::RestartServerResponse>* AsyncRestartServerRaw(::grpc::ClientContext* context, const ::texture_studio::RestartServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::texture_studio::RestartServerResponse>* PrepareAsyncRestartServerRaw(::grpc::ClientContext* context, const ::texture_studio::RestartServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::texture_studio::ServerStatusResponse>* AsyncServerStatusRaw(::grpc::ClientContext* context, const ::texture_studio::ServerStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::texture_studio::ServerStatusResponse>* PrepareAsyncServerStatusRaw(::grpc::ClientContext* context, const ::texture_studio::ServerStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::texture_studio::UploadProjectResponse>* AsyncUploadProjectRaw(::grpc::ClientContext* context, const ::texture_studio::UploadProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::texture_studio::UploadProjectResponse>* PrepareAsyncUploadProjectRaw(::grpc::ClientContext* context, const ::texture_studio::UploadProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::texture_studio::GetProjectResponse>* AsyncGetProjectRaw(::grpc::ClientContext* context, const ::texture_studio::GetProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::texture_studio::GetProjectResponse>* PrepareAsyncGetProjectRaw(::grpc::ClientContext* context, const ::texture_studio::GetProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::texture_studio::GetProjectsResponse>* AsyncGetProjectsRaw(::grpc::ClientContext* context, const ::texture_studio::GetProjectsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::texture_studio::GetProjectsResponse>* PrepareAsyncGetProjectsRaw(::grpc::ClientContext* context, const ::texture_studio::GetProjectsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::texture_studio::SubscribeToProjectsChangesResponse>* SubscribeToProjectsChangesRaw(::grpc::ClientContext* context, const ::texture_studio::SubscribeToProjectsChangesRequest& request) override;
    ::grpc::ClientAsyncReader< ::texture_studio::SubscribeToProjectsChangesResponse>* AsyncSubscribeToProjectsChangesRaw(::grpc::ClientContext* context, const ::texture_studio::SubscribeToProjectsChangesRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::texture_studio::SubscribeToProjectsChangesResponse>* PrepareAsyncSubscribeToProjectsChangesRaw(::grpc::ClientContext* context, const ::texture_studio::SubscribeToProjectsChangesRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_StartServer_;
    const ::grpc::internal::RpcMethod rpcmethod_StopServer_;
    const ::grpc::internal::RpcMethod rpcmethod_RestartServer_;
    const ::grpc::internal::RpcMethod rpcmethod_ServerStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_UploadProject_;
    const ::grpc::internal::RpcMethod rpcmethod_GetProject_;
    const ::grpc::internal::RpcMethod rpcmethod_GetProjects_;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeToProjectsChanges_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Start a texture studio server.
    virtual ::grpc::Status StartServer(::grpc::ServerContext* context, const ::texture_studio::StartServerRequest* request, ::texture_studio::StartServerResponse* response);
    // Stop a texture studio server.
    virtual ::grpc::Status StopServer(::grpc::ServerContext* context, const ::texture_studio::StopServerRequest* request, ::texture_studio::StopServerResponse* response);
    // Restart a texture studio server.
    virtual ::grpc::Status RestartServer(::grpc::ServerContext* context, const ::texture_studio::RestartServerRequest* request, ::texture_studio::RestartServerResponse* response);
    // Get texture studio server status.
    virtual ::grpc::Status ServerStatus(::grpc::ServerContext* context, const ::texture_studio::ServerStatusRequest* request, ::texture_studio::ServerStatusResponse* response);
    // Upload project to texture studio.
    virtual ::grpc::Status UploadProject(::grpc::ServerContext* context, const ::texture_studio::UploadProjectRequest* request, ::texture_studio::UploadProjectResponse* response);
    // Get texture-studio objects project.
    virtual ::grpc::Status GetProject(::grpc::ServerContext* context, const ::texture_studio::GetProjectRequest* request, ::texture_studio::GetProjectResponse* response);
    // Get all projects.
    virtual ::grpc::Status GetProjects(::grpc::ServerContext* context, const ::texture_studio::GetProjectsRequest* request, ::texture_studio::GetProjectsResponse* response);
    // Listen for project changes - if texture studio project has been created or modified, this will trigger an event.
    virtual ::grpc::Status SubscribeToProjectsChanges(::grpc::ServerContext* context, const ::texture_studio::SubscribeToProjectsChangesRequest* request, ::grpc::ServerWriter< ::texture_studio::SubscribeToProjectsChangesResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_StartServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StartServer() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_StartServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartServer(::grpc::ServerContext* /*context*/, const ::texture_studio::StartServerRequest* /*request*/, ::texture_studio::StartServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartServer(::grpc::ServerContext* context, ::texture_studio::StartServerRequest* request, ::grpc::ServerAsyncResponseWriter< ::texture_studio::StartServerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StopServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StopServer() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_StopServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopServer(::grpc::ServerContext* /*context*/, const ::texture_studio::StopServerRequest* /*request*/, ::texture_studio::StopServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopServer(::grpc::ServerContext* context, ::texture_studio::StopServerRequest* request, ::grpc::ServerAsyncResponseWriter< ::texture_studio::StopServerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RestartServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RestartServer() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RestartServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestartServer(::grpc::ServerContext* /*context*/, const ::texture_studio::RestartServerRequest* /*request*/, ::texture_studio::RestartServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRestartServer(::grpc::ServerContext* context, ::texture_studio::RestartServerRequest* request, ::grpc::ServerAsyncResponseWriter< ::texture_studio::RestartServerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ServerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ServerStatus() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ServerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStatus(::grpc::ServerContext* /*context*/, const ::texture_studio::ServerStatusRequest* /*request*/, ::texture_studio::ServerStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerStatus(::grpc::ServerContext* context, ::texture_studio::ServerStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::texture_studio::ServerStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UploadProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UploadProject() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_UploadProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadProject(::grpc::ServerContext* /*context*/, const ::texture_studio::UploadProjectRequest* /*request*/, ::texture_studio::UploadProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUploadProject(::grpc::ServerContext* context, ::texture_studio::UploadProjectRequest* request, ::grpc::ServerAsyncResponseWriter< ::texture_studio::UploadProjectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetProject() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProject(::grpc::ServerContext* /*context*/, const ::texture_studio::GetProjectRequest* /*request*/, ::texture_studio::GetProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProject(::grpc::ServerContext* context, ::texture_studio::GetProjectRequest* request, ::grpc::ServerAsyncResponseWriter< ::texture_studio::GetProjectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetProjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetProjects() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetProjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProjects(::grpc::ServerContext* /*context*/, const ::texture_studio::GetProjectsRequest* /*request*/, ::texture_studio::GetProjectsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProjects(::grpc::ServerContext* context, ::texture_studio::GetProjectsRequest* request, ::grpc::ServerAsyncResponseWriter< ::texture_studio::GetProjectsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeToProjectsChanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubscribeToProjectsChanges() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_SubscribeToProjectsChanges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeToProjectsChanges(::grpc::ServerContext* /*context*/, const ::texture_studio::SubscribeToProjectsChangesRequest* /*request*/, ::grpc::ServerWriter< ::texture_studio::SubscribeToProjectsChangesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeToProjectsChanges(::grpc::ServerContext* context, ::texture_studio::SubscribeToProjectsChangesRequest* request, ::grpc::ServerAsyncWriter< ::texture_studio::SubscribeToProjectsChangesResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(7, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_StartServer<WithAsyncMethod_StopServer<WithAsyncMethod_RestartServer<WithAsyncMethod_ServerStatus<WithAsyncMethod_UploadProject<WithAsyncMethod_GetProject<WithAsyncMethod_GetProjects<WithAsyncMethod_SubscribeToProjectsChanges<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StartServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_StartServer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::texture_studio::StartServerRequest, ::texture_studio::StartServerResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::texture_studio::StartServerRequest* request, ::texture_studio::StartServerResponse* response) { return this->StartServer(context, request, response); }));}
    void SetMessageAllocatorFor_StartServer(
        ::grpc::experimental::MessageAllocator< ::texture_studio::StartServerRequest, ::texture_studio::StartServerResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::texture_studio::StartServerRequest, ::texture_studio::StartServerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_StartServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartServer(::grpc::ServerContext* /*context*/, const ::texture_studio::StartServerRequest* /*request*/, ::texture_studio::StartServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StartServer(
      ::grpc::CallbackServerContext* /*context*/, const ::texture_studio::StartServerRequest* /*request*/, ::texture_studio::StartServerResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StartServer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::texture_studio::StartServerRequest* /*request*/, ::texture_studio::StartServerResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StopServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_StopServer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::texture_studio::StopServerRequest, ::texture_studio::StopServerResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::texture_studio::StopServerRequest* request, ::texture_studio::StopServerResponse* response) { return this->StopServer(context, request, response); }));}
    void SetMessageAllocatorFor_StopServer(
        ::grpc::experimental::MessageAllocator< ::texture_studio::StopServerRequest, ::texture_studio::StopServerResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::texture_studio::StopServerRequest, ::texture_studio::StopServerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_StopServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopServer(::grpc::ServerContext* /*context*/, const ::texture_studio::StopServerRequest* /*request*/, ::texture_studio::StopServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StopServer(
      ::grpc::CallbackServerContext* /*context*/, const ::texture_studio::StopServerRequest* /*request*/, ::texture_studio::StopServerResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StopServer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::texture_studio::StopServerRequest* /*request*/, ::texture_studio::StopServerResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RestartServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RestartServer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::texture_studio::RestartServerRequest, ::texture_studio::RestartServerResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::texture_studio::RestartServerRequest* request, ::texture_studio::RestartServerResponse* response) { return this->RestartServer(context, request, response); }));}
    void SetMessageAllocatorFor_RestartServer(
        ::grpc::experimental::MessageAllocator< ::texture_studio::RestartServerRequest, ::texture_studio::RestartServerResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::texture_studio::RestartServerRequest, ::texture_studio::RestartServerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RestartServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestartServer(::grpc::ServerContext* /*context*/, const ::texture_studio::RestartServerRequest* /*request*/, ::texture_studio::RestartServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RestartServer(
      ::grpc::CallbackServerContext* /*context*/, const ::texture_studio::RestartServerRequest* /*request*/, ::texture_studio::RestartServerResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RestartServer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::texture_studio::RestartServerRequest* /*request*/, ::texture_studio::RestartServerResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ServerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ServerStatus() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::texture_studio::ServerStatusRequest, ::texture_studio::ServerStatusResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::texture_studio::ServerStatusRequest* request, ::texture_studio::ServerStatusResponse* response) { return this->ServerStatus(context, request, response); }));}
    void SetMessageAllocatorFor_ServerStatus(
        ::grpc::experimental::MessageAllocator< ::texture_studio::ServerStatusRequest, ::texture_studio::ServerStatusResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::texture_studio::ServerStatusRequest, ::texture_studio::ServerStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ServerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStatus(::grpc::ServerContext* /*context*/, const ::texture_studio::ServerStatusRequest* /*request*/, ::texture_studio::ServerStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ServerStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::texture_studio::ServerStatusRequest* /*request*/, ::texture_studio::ServerStatusResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ServerStatus(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::texture_studio::ServerStatusRequest* /*request*/, ::texture_studio::ServerStatusResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UploadProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UploadProject() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::texture_studio::UploadProjectRequest, ::texture_studio::UploadProjectResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::texture_studio::UploadProjectRequest* request, ::texture_studio::UploadProjectResponse* response) { return this->UploadProject(context, request, response); }));}
    void SetMessageAllocatorFor_UploadProject(
        ::grpc::experimental::MessageAllocator< ::texture_studio::UploadProjectRequest, ::texture_studio::UploadProjectResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::texture_studio::UploadProjectRequest, ::texture_studio::UploadProjectResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UploadProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadProject(::grpc::ServerContext* /*context*/, const ::texture_studio::UploadProjectRequest* /*request*/, ::texture_studio::UploadProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UploadProject(
      ::grpc::CallbackServerContext* /*context*/, const ::texture_studio::UploadProjectRequest* /*request*/, ::texture_studio::UploadProjectResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UploadProject(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::texture_studio::UploadProjectRequest* /*request*/, ::texture_studio::UploadProjectResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetProject() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::texture_studio::GetProjectRequest, ::texture_studio::GetProjectResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::texture_studio::GetProjectRequest* request, ::texture_studio::GetProjectResponse* response) { return this->GetProject(context, request, response); }));}
    void SetMessageAllocatorFor_GetProject(
        ::grpc::experimental::MessageAllocator< ::texture_studio::GetProjectRequest, ::texture_studio::GetProjectResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::texture_studio::GetProjectRequest, ::texture_studio::GetProjectResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProject(::grpc::ServerContext* /*context*/, const ::texture_studio::GetProjectRequest* /*request*/, ::texture_studio::GetProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetProject(
      ::grpc::CallbackServerContext* /*context*/, const ::texture_studio::GetProjectRequest* /*request*/, ::texture_studio::GetProjectResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetProject(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::texture_studio::GetProjectRequest* /*request*/, ::texture_studio::GetProjectResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetProjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetProjects() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::texture_studio::GetProjectsRequest, ::texture_studio::GetProjectsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::texture_studio::GetProjectsRequest* request, ::texture_studio::GetProjectsResponse* response) { return this->GetProjects(context, request, response); }));}
    void SetMessageAllocatorFor_GetProjects(
        ::grpc::experimental::MessageAllocator< ::texture_studio::GetProjectsRequest, ::texture_studio::GetProjectsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::texture_studio::GetProjectsRequest, ::texture_studio::GetProjectsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetProjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProjects(::grpc::ServerContext* /*context*/, const ::texture_studio::GetProjectsRequest* /*request*/, ::texture_studio::GetProjectsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetProjects(
      ::grpc::CallbackServerContext* /*context*/, const ::texture_studio::GetProjectsRequest* /*request*/, ::texture_studio::GetProjectsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetProjects(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::texture_studio::GetProjectsRequest* /*request*/, ::texture_studio::GetProjectsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubscribeToProjectsChanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SubscribeToProjectsChanges() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::texture_studio::SubscribeToProjectsChangesRequest, ::texture_studio::SubscribeToProjectsChangesResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::texture_studio::SubscribeToProjectsChangesRequest* request) { return this->SubscribeToProjectsChanges(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_SubscribeToProjectsChanges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeToProjectsChanges(::grpc::ServerContext* /*context*/, const ::texture_studio::SubscribeToProjectsChangesRequest* /*request*/, ::grpc::ServerWriter< ::texture_studio::SubscribeToProjectsChangesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::texture_studio::SubscribeToProjectsChangesResponse>* SubscribeToProjectsChanges(
      ::grpc::CallbackServerContext* /*context*/, const ::texture_studio::SubscribeToProjectsChangesRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::texture_studio::SubscribeToProjectsChangesResponse>* SubscribeToProjectsChanges(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::texture_studio::SubscribeToProjectsChangesRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_StartServer<ExperimentalWithCallbackMethod_StopServer<ExperimentalWithCallbackMethod_RestartServer<ExperimentalWithCallbackMethod_ServerStatus<ExperimentalWithCallbackMethod_UploadProject<ExperimentalWithCallbackMethod_GetProject<ExperimentalWithCallbackMethod_GetProjects<ExperimentalWithCallbackMethod_SubscribeToProjectsChanges<Service > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_StartServer<ExperimentalWithCallbackMethod_StopServer<ExperimentalWithCallbackMethod_RestartServer<ExperimentalWithCallbackMethod_ServerStatus<ExperimentalWithCallbackMethod_UploadProject<ExperimentalWithCallbackMethod_GetProject<ExperimentalWithCallbackMethod_GetProjects<ExperimentalWithCallbackMethod_SubscribeToProjectsChanges<Service > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_StartServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StartServer() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_StartServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartServer(::grpc::ServerContext* /*context*/, const ::texture_studio::StartServerRequest* /*request*/, ::texture_studio::StartServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StopServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StopServer() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_StopServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopServer(::grpc::ServerContext* /*context*/, const ::texture_studio::StopServerRequest* /*request*/, ::texture_studio::StopServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RestartServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RestartServer() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RestartServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestartServer(::grpc::ServerContext* /*context*/, const ::texture_studio::RestartServerRequest* /*request*/, ::texture_studio::RestartServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ServerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ServerStatus() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ServerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStatus(::grpc::ServerContext* /*context*/, const ::texture_studio::ServerStatusRequest* /*request*/, ::texture_studio::ServerStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UploadProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UploadProject() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_UploadProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadProject(::grpc::ServerContext* /*context*/, const ::texture_studio::UploadProjectRequest* /*request*/, ::texture_studio::UploadProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetProject() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProject(::grpc::ServerContext* /*context*/, const ::texture_studio::GetProjectRequest* /*request*/, ::texture_studio::GetProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetProjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetProjects() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetProjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProjects(::grpc::ServerContext* /*context*/, const ::texture_studio::GetProjectsRequest* /*request*/, ::texture_studio::GetProjectsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubscribeToProjectsChanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubscribeToProjectsChanges() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_SubscribeToProjectsChanges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeToProjectsChanges(::grpc::ServerContext* /*context*/, const ::texture_studio::SubscribeToProjectsChangesRequest* /*request*/, ::grpc::ServerWriter< ::texture_studio::SubscribeToProjectsChangesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_StartServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StartServer() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_StartServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartServer(::grpc::ServerContext* /*context*/, const ::texture_studio::StartServerRequest* /*request*/, ::texture_studio::StartServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartServer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StopServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StopServer() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_StopServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopServer(::grpc::ServerContext* /*context*/, const ::texture_studio::StopServerRequest* /*request*/, ::texture_studio::StopServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopServer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RestartServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RestartServer() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_RestartServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestartServer(::grpc::ServerContext* /*context*/, const ::texture_studio::RestartServerRequest* /*request*/, ::texture_studio::RestartServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRestartServer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ServerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ServerStatus() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ServerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStatus(::grpc::ServerContext* /*context*/, const ::texture_studio::ServerStatusRequest* /*request*/, ::texture_studio::ServerStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UploadProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UploadProject() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_UploadProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadProject(::grpc::ServerContext* /*context*/, const ::texture_studio::UploadProjectRequest* /*request*/, ::texture_studio::UploadProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUploadProject(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetProject() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProject(::grpc::ServerContext* /*context*/, const ::texture_studio::GetProjectRequest* /*request*/, ::texture_studio::GetProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProject(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetProjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetProjects() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetProjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProjects(::grpc::ServerContext* /*context*/, const ::texture_studio::GetProjectsRequest* /*request*/, ::texture_studio::GetProjectsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProjects(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeToProjectsChanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubscribeToProjectsChanges() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_SubscribeToProjectsChanges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeToProjectsChanges(::grpc::ServerContext* /*context*/, const ::texture_studio::SubscribeToProjectsChangesRequest* /*request*/, ::grpc::ServerWriter< ::texture_studio::SubscribeToProjectsChangesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeToProjectsChanges(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(7, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StartServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_StartServer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StartServer(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_StartServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartServer(::grpc::ServerContext* /*context*/, const ::texture_studio::StartServerRequest* /*request*/, ::texture_studio::StartServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StartServer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StartServer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StopServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_StopServer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StopServer(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_StopServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopServer(::grpc::ServerContext* /*context*/, const ::texture_studio::StopServerRequest* /*request*/, ::texture_studio::StopServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StopServer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StopServer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RestartServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RestartServer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RestartServer(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RestartServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestartServer(::grpc::ServerContext* /*context*/, const ::texture_studio::RestartServerRequest* /*request*/, ::texture_studio::RestartServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RestartServer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RestartServer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ServerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ServerStatus() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ServerStatus(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ServerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStatus(::grpc::ServerContext* /*context*/, const ::texture_studio::ServerStatusRequest* /*request*/, ::texture_studio::ServerStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ServerStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ServerStatus(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UploadProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UploadProject() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UploadProject(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UploadProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadProject(::grpc::ServerContext* /*context*/, const ::texture_studio::UploadProjectRequest* /*request*/, ::texture_studio::UploadProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UploadProject(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UploadProject(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetProject() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetProject(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProject(::grpc::ServerContext* /*context*/, const ::texture_studio::GetProjectRequest* /*request*/, ::texture_studio::GetProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetProject(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetProject(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetProjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetProjects() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetProjects(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetProjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProjects(::grpc::ServerContext* /*context*/, const ::texture_studio::GetProjectsRequest* /*request*/, ::texture_studio::GetProjectsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetProjects(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetProjects(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubscribeToProjectsChanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SubscribeToProjectsChanges() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->SubscribeToProjectsChanges(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubscribeToProjectsChanges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeToProjectsChanges(::grpc::ServerContext* /*context*/, const ::texture_studio::SubscribeToProjectsChangesRequest* /*request*/, ::grpc::ServerWriter< ::texture_studio::SubscribeToProjectsChangesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeToProjectsChanges(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeToProjectsChanges(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StartServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StartServer() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::texture_studio::StartServerRequest, ::texture_studio::StartServerResponse>(std::bind(&WithStreamedUnaryMethod_StartServer<BaseClass>::StreamedStartServer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_StartServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartServer(::grpc::ServerContext* /*context*/, const ::texture_studio::StartServerRequest* /*request*/, ::texture_studio::StartServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStartServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::texture_studio::StartServerRequest,::texture_studio::StartServerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StopServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StopServer() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::texture_studio::StopServerRequest, ::texture_studio::StopServerResponse>(std::bind(&WithStreamedUnaryMethod_StopServer<BaseClass>::StreamedStopServer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_StopServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StopServer(::grpc::ServerContext* /*context*/, const ::texture_studio::StopServerRequest* /*request*/, ::texture_studio::StopServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStopServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::texture_studio::StopServerRequest,::texture_studio::StopServerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RestartServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RestartServer() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::texture_studio::RestartServerRequest, ::texture_studio::RestartServerResponse>(std::bind(&WithStreamedUnaryMethod_RestartServer<BaseClass>::StreamedRestartServer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RestartServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RestartServer(::grpc::ServerContext* /*context*/, const ::texture_studio::RestartServerRequest* /*request*/, ::texture_studio::RestartServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRestartServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::texture_studio::RestartServerRequest,::texture_studio::RestartServerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ServerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ServerStatus() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::texture_studio::ServerStatusRequest, ::texture_studio::ServerStatusResponse>(std::bind(&WithStreamedUnaryMethod_ServerStatus<BaseClass>::StreamedServerStatus, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ServerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ServerStatus(::grpc::ServerContext* /*context*/, const ::texture_studio::ServerStatusRequest* /*request*/, ::texture_studio::ServerStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedServerStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::texture_studio::ServerStatusRequest,::texture_studio::ServerStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UploadProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UploadProject() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::texture_studio::UploadProjectRequest, ::texture_studio::UploadProjectResponse>(std::bind(&WithStreamedUnaryMethod_UploadProject<BaseClass>::StreamedUploadProject, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UploadProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UploadProject(::grpc::ServerContext* /*context*/, const ::texture_studio::UploadProjectRequest* /*request*/, ::texture_studio::UploadProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUploadProject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::texture_studio::UploadProjectRequest,::texture_studio::UploadProjectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetProject() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::texture_studio::GetProjectRequest, ::texture_studio::GetProjectResponse>(std::bind(&WithStreamedUnaryMethod_GetProject<BaseClass>::StreamedGetProject, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetProject(::grpc::ServerContext* /*context*/, const ::texture_studio::GetProjectRequest* /*request*/, ::texture_studio::GetProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetProject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::texture_studio::GetProjectRequest,::texture_studio::GetProjectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetProjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetProjects() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::texture_studio::GetProjectsRequest, ::texture_studio::GetProjectsResponse>(std::bind(&WithStreamedUnaryMethod_GetProjects<BaseClass>::StreamedGetProjects, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetProjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetProjects(::grpc::ServerContext* /*context*/, const ::texture_studio::GetProjectsRequest* /*request*/, ::texture_studio::GetProjectsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetProjects(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::texture_studio::GetProjectsRequest,::texture_studio::GetProjectsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_StartServer<WithStreamedUnaryMethod_StopServer<WithStreamedUnaryMethod_RestartServer<WithStreamedUnaryMethod_ServerStatus<WithStreamedUnaryMethod_UploadProject<WithStreamedUnaryMethod_GetProject<WithStreamedUnaryMethod_GetProjects<Service > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeToProjectsChanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SubscribeToProjectsChanges() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::SplitServerStreamingHandler< ::texture_studio::SubscribeToProjectsChangesRequest, ::texture_studio::SubscribeToProjectsChangesResponse>(std::bind(&WithSplitStreamingMethod_SubscribeToProjectsChanges<BaseClass>::StreamedSubscribeToProjectsChanges, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_SubscribeToProjectsChanges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeToProjectsChanges(::grpc::ServerContext* /*context*/, const ::texture_studio::SubscribeToProjectsChangesRequest* /*request*/, ::grpc::ServerWriter< ::texture_studio::SubscribeToProjectsChangesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeToProjectsChanges(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::texture_studio::SubscribeToProjectsChangesRequest,::texture_studio::SubscribeToProjectsChangesResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_SubscribeToProjectsChanges<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_StartServer<WithStreamedUnaryMethod_StopServer<WithStreamedUnaryMethod_RestartServer<WithStreamedUnaryMethod_ServerStatus<WithStreamedUnaryMethod_UploadProject<WithStreamedUnaryMethod_GetProject<WithStreamedUnaryMethod_GetProjects<WithSplitStreamingMethod_SubscribeToProjectsChanges<Service > > > > > > > > StreamedService;
};

}  // namespace texture_studio


#endif  // GRPC_texturestudio_2ftexturestudio_5fserver_2eproto__INCLUDED
