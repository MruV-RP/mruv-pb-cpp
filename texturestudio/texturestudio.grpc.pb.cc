// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: texturestudio/texturestudio.proto

#include "texturestudio/texturestudio.pb.h"
#include "texturestudio/texturestudio.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace texture_studio {

static const char* TextureStudioService_method_names[] = {
  "/texture_studio.TextureStudioService/CreateServer",
  "/texture_studio.TextureStudioService/MyServer",
  "/texture_studio.TextureStudioService/DeleteServer",
  "/texture_studio.TextureStudioService/StartServer",
  "/texture_studio.TextureStudioService/StopServer",
  "/texture_studio.TextureStudioService/RestartServer",
  "/texture_studio.TextureStudioService/ServerStatus",
  "/texture_studio.TextureStudioService/UploadProject",
  "/texture_studio.TextureStudioService/GetProject",
  "/texture_studio.TextureStudioService/GetProjects",
  "/texture_studio.TextureStudioService/SubscribeToProjectsChanges",
};

std::unique_ptr< TextureStudioService::Stub> TextureStudioService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TextureStudioService::Stub> stub(new TextureStudioService::Stub(channel));
  return stub;
}

TextureStudioService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateServer_(TextureStudioService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MyServer_(TextureStudioService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteServer_(TextureStudioService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StartServer_(TextureStudioService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopServer_(TextureStudioService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RestartServer_(TextureStudioService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ServerStatus_(TextureStudioService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UploadProject_(TextureStudioService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetProject_(TextureStudioService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetProjects_(TextureStudioService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubscribeToProjectsChanges_(TextureStudioService_method_names[10], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status TextureStudioService::Stub::CreateServer(::grpc::ClientContext* context, const ::texture_studio::CreateServerRequest& request, ::texture_studio::CreateServerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateServer_, context, request, response);
}

void TextureStudioService::Stub::experimental_async::CreateServer(::grpc::ClientContext* context, const ::texture_studio::CreateServerRequest* request, ::texture_studio::CreateServerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateServer_, context, request, response, std::move(f));
}

void TextureStudioService::Stub::experimental_async::CreateServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::CreateServerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateServer_, context, request, response, std::move(f));
}

void TextureStudioService::Stub::experimental_async::CreateServer(::grpc::ClientContext* context, const ::texture_studio::CreateServerRequest* request, ::texture_studio::CreateServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateServer_, context, request, response, reactor);
}

void TextureStudioService::Stub::experimental_async::CreateServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::CreateServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateServer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::texture_studio::CreateServerResponse>* TextureStudioService::Stub::AsyncCreateServerRaw(::grpc::ClientContext* context, const ::texture_studio::CreateServerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::texture_studio::CreateServerResponse>::Create(channel_.get(), cq, rpcmethod_CreateServer_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::texture_studio::CreateServerResponse>* TextureStudioService::Stub::PrepareAsyncCreateServerRaw(::grpc::ClientContext* context, const ::texture_studio::CreateServerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::texture_studio::CreateServerResponse>::Create(channel_.get(), cq, rpcmethod_CreateServer_, context, request, false);
}

::grpc::Status TextureStudioService::Stub::MyServer(::grpc::ClientContext* context, const ::texture_studio::MyServerRequest& request, ::texture_studio::MyServerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MyServer_, context, request, response);
}

void TextureStudioService::Stub::experimental_async::MyServer(::grpc::ClientContext* context, const ::texture_studio::MyServerRequest* request, ::texture_studio::MyServerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MyServer_, context, request, response, std::move(f));
}

void TextureStudioService::Stub::experimental_async::MyServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::MyServerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MyServer_, context, request, response, std::move(f));
}

void TextureStudioService::Stub::experimental_async::MyServer(::grpc::ClientContext* context, const ::texture_studio::MyServerRequest* request, ::texture_studio::MyServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MyServer_, context, request, response, reactor);
}

void TextureStudioService::Stub::experimental_async::MyServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::MyServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MyServer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::texture_studio::MyServerResponse>* TextureStudioService::Stub::AsyncMyServerRaw(::grpc::ClientContext* context, const ::texture_studio::MyServerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::texture_studio::MyServerResponse>::Create(channel_.get(), cq, rpcmethod_MyServer_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::texture_studio::MyServerResponse>* TextureStudioService::Stub::PrepareAsyncMyServerRaw(::grpc::ClientContext* context, const ::texture_studio::MyServerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::texture_studio::MyServerResponse>::Create(channel_.get(), cq, rpcmethod_MyServer_, context, request, false);
}

::grpc::Status TextureStudioService::Stub::DeleteServer(::grpc::ClientContext* context, const ::texture_studio::DeleteServerRequest& request, ::texture_studio::DeleteServerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteServer_, context, request, response);
}

void TextureStudioService::Stub::experimental_async::DeleteServer(::grpc::ClientContext* context, const ::texture_studio::DeleteServerRequest* request, ::texture_studio::DeleteServerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteServer_, context, request, response, std::move(f));
}

void TextureStudioService::Stub::experimental_async::DeleteServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::DeleteServerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteServer_, context, request, response, std::move(f));
}

void TextureStudioService::Stub::experimental_async::DeleteServer(::grpc::ClientContext* context, const ::texture_studio::DeleteServerRequest* request, ::texture_studio::DeleteServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteServer_, context, request, response, reactor);
}

void TextureStudioService::Stub::experimental_async::DeleteServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::DeleteServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteServer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::texture_studio::DeleteServerResponse>* TextureStudioService::Stub::AsyncDeleteServerRaw(::grpc::ClientContext* context, const ::texture_studio::DeleteServerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::texture_studio::DeleteServerResponse>::Create(channel_.get(), cq, rpcmethod_DeleteServer_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::texture_studio::DeleteServerResponse>* TextureStudioService::Stub::PrepareAsyncDeleteServerRaw(::grpc::ClientContext* context, const ::texture_studio::DeleteServerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::texture_studio::DeleteServerResponse>::Create(channel_.get(), cq, rpcmethod_DeleteServer_, context, request, false);
}

::grpc::Status TextureStudioService::Stub::StartServer(::grpc::ClientContext* context, const ::texture_studio::StartServerRequest& request, ::texture_studio::StartServerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StartServer_, context, request, response);
}

void TextureStudioService::Stub::experimental_async::StartServer(::grpc::ClientContext* context, const ::texture_studio::StartServerRequest* request, ::texture_studio::StartServerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StartServer_, context, request, response, std::move(f));
}

void TextureStudioService::Stub::experimental_async::StartServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::StartServerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StartServer_, context, request, response, std::move(f));
}

void TextureStudioService::Stub::experimental_async::StartServer(::grpc::ClientContext* context, const ::texture_studio::StartServerRequest* request, ::texture_studio::StartServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StartServer_, context, request, response, reactor);
}

void TextureStudioService::Stub::experimental_async::StartServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::StartServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StartServer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::texture_studio::StartServerResponse>* TextureStudioService::Stub::AsyncStartServerRaw(::grpc::ClientContext* context, const ::texture_studio::StartServerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::texture_studio::StartServerResponse>::Create(channel_.get(), cq, rpcmethod_StartServer_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::texture_studio::StartServerResponse>* TextureStudioService::Stub::PrepareAsyncStartServerRaw(::grpc::ClientContext* context, const ::texture_studio::StartServerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::texture_studio::StartServerResponse>::Create(channel_.get(), cq, rpcmethod_StartServer_, context, request, false);
}

::grpc::Status TextureStudioService::Stub::StopServer(::grpc::ClientContext* context, const ::texture_studio::StopServerRequest& request, ::texture_studio::StopServerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StopServer_, context, request, response);
}

void TextureStudioService::Stub::experimental_async::StopServer(::grpc::ClientContext* context, const ::texture_studio::StopServerRequest* request, ::texture_studio::StopServerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopServer_, context, request, response, std::move(f));
}

void TextureStudioService::Stub::experimental_async::StopServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::StopServerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopServer_, context, request, response, std::move(f));
}

void TextureStudioService::Stub::experimental_async::StopServer(::grpc::ClientContext* context, const ::texture_studio::StopServerRequest* request, ::texture_studio::StopServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopServer_, context, request, response, reactor);
}

void TextureStudioService::Stub::experimental_async::StopServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::StopServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopServer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::texture_studio::StopServerResponse>* TextureStudioService::Stub::AsyncStopServerRaw(::grpc::ClientContext* context, const ::texture_studio::StopServerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::texture_studio::StopServerResponse>::Create(channel_.get(), cq, rpcmethod_StopServer_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::texture_studio::StopServerResponse>* TextureStudioService::Stub::PrepareAsyncStopServerRaw(::grpc::ClientContext* context, const ::texture_studio::StopServerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::texture_studio::StopServerResponse>::Create(channel_.get(), cq, rpcmethod_StopServer_, context, request, false);
}

::grpc::Status TextureStudioService::Stub::RestartServer(::grpc::ClientContext* context, const ::texture_studio::RestartServerRequest& request, ::texture_studio::RestartServerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RestartServer_, context, request, response);
}

void TextureStudioService::Stub::experimental_async::RestartServer(::grpc::ClientContext* context, const ::texture_studio::RestartServerRequest* request, ::texture_studio::RestartServerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RestartServer_, context, request, response, std::move(f));
}

void TextureStudioService::Stub::experimental_async::RestartServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::RestartServerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RestartServer_, context, request, response, std::move(f));
}

void TextureStudioService::Stub::experimental_async::RestartServer(::grpc::ClientContext* context, const ::texture_studio::RestartServerRequest* request, ::texture_studio::RestartServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RestartServer_, context, request, response, reactor);
}

void TextureStudioService::Stub::experimental_async::RestartServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::RestartServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RestartServer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::texture_studio::RestartServerResponse>* TextureStudioService::Stub::AsyncRestartServerRaw(::grpc::ClientContext* context, const ::texture_studio::RestartServerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::texture_studio::RestartServerResponse>::Create(channel_.get(), cq, rpcmethod_RestartServer_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::texture_studio::RestartServerResponse>* TextureStudioService::Stub::PrepareAsyncRestartServerRaw(::grpc::ClientContext* context, const ::texture_studio::RestartServerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::texture_studio::RestartServerResponse>::Create(channel_.get(), cq, rpcmethod_RestartServer_, context, request, false);
}

::grpc::Status TextureStudioService::Stub::ServerStatus(::grpc::ClientContext* context, const ::texture_studio::ServerStatusRequest& request, ::texture_studio::ServerStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ServerStatus_, context, request, response);
}

void TextureStudioService::Stub::experimental_async::ServerStatus(::grpc::ClientContext* context, const ::texture_studio::ServerStatusRequest* request, ::texture_studio::ServerStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ServerStatus_, context, request, response, std::move(f));
}

void TextureStudioService::Stub::experimental_async::ServerStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::ServerStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ServerStatus_, context, request, response, std::move(f));
}

void TextureStudioService::Stub::experimental_async::ServerStatus(::grpc::ClientContext* context, const ::texture_studio::ServerStatusRequest* request, ::texture_studio::ServerStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ServerStatus_, context, request, response, reactor);
}

void TextureStudioService::Stub::experimental_async::ServerStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::ServerStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ServerStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::texture_studio::ServerStatusResponse>* TextureStudioService::Stub::AsyncServerStatusRaw(::grpc::ClientContext* context, const ::texture_studio::ServerStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::texture_studio::ServerStatusResponse>::Create(channel_.get(), cq, rpcmethod_ServerStatus_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::texture_studio::ServerStatusResponse>* TextureStudioService::Stub::PrepareAsyncServerStatusRaw(::grpc::ClientContext* context, const ::texture_studio::ServerStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::texture_studio::ServerStatusResponse>::Create(channel_.get(), cq, rpcmethod_ServerStatus_, context, request, false);
}

::grpc::Status TextureStudioService::Stub::UploadProject(::grpc::ClientContext* context, const ::texture_studio::UploadProjectRequest& request, ::texture_studio::UploadProjectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UploadProject_, context, request, response);
}

void TextureStudioService::Stub::experimental_async::UploadProject(::grpc::ClientContext* context, const ::texture_studio::UploadProjectRequest* request, ::texture_studio::UploadProjectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UploadProject_, context, request, response, std::move(f));
}

void TextureStudioService::Stub::experimental_async::UploadProject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::UploadProjectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UploadProject_, context, request, response, std::move(f));
}

void TextureStudioService::Stub::experimental_async::UploadProject(::grpc::ClientContext* context, const ::texture_studio::UploadProjectRequest* request, ::texture_studio::UploadProjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UploadProject_, context, request, response, reactor);
}

void TextureStudioService::Stub::experimental_async::UploadProject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::UploadProjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UploadProject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::texture_studio::UploadProjectResponse>* TextureStudioService::Stub::AsyncUploadProjectRaw(::grpc::ClientContext* context, const ::texture_studio::UploadProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::texture_studio::UploadProjectResponse>::Create(channel_.get(), cq, rpcmethod_UploadProject_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::texture_studio::UploadProjectResponse>* TextureStudioService::Stub::PrepareAsyncUploadProjectRaw(::grpc::ClientContext* context, const ::texture_studio::UploadProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::texture_studio::UploadProjectResponse>::Create(channel_.get(), cq, rpcmethod_UploadProject_, context, request, false);
}

::grpc::Status TextureStudioService::Stub::GetProject(::grpc::ClientContext* context, const ::texture_studio::GetProjectRequest& request, ::texture_studio::GetProjectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetProject_, context, request, response);
}

void TextureStudioService::Stub::experimental_async::GetProject(::grpc::ClientContext* context, const ::texture_studio::GetProjectRequest* request, ::texture_studio::GetProjectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetProject_, context, request, response, std::move(f));
}

void TextureStudioService::Stub::experimental_async::GetProject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::GetProjectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetProject_, context, request, response, std::move(f));
}

void TextureStudioService::Stub::experimental_async::GetProject(::grpc::ClientContext* context, const ::texture_studio::GetProjectRequest* request, ::texture_studio::GetProjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetProject_, context, request, response, reactor);
}

void TextureStudioService::Stub::experimental_async::GetProject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::GetProjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetProject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::texture_studio::GetProjectResponse>* TextureStudioService::Stub::AsyncGetProjectRaw(::grpc::ClientContext* context, const ::texture_studio::GetProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::texture_studio::GetProjectResponse>::Create(channel_.get(), cq, rpcmethod_GetProject_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::texture_studio::GetProjectResponse>* TextureStudioService::Stub::PrepareAsyncGetProjectRaw(::grpc::ClientContext* context, const ::texture_studio::GetProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::texture_studio::GetProjectResponse>::Create(channel_.get(), cq, rpcmethod_GetProject_, context, request, false);
}

::grpc::Status TextureStudioService::Stub::GetProjects(::grpc::ClientContext* context, const ::texture_studio::GetProjectsRequest& request, ::texture_studio::GetProjectsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetProjects_, context, request, response);
}

void TextureStudioService::Stub::experimental_async::GetProjects(::grpc::ClientContext* context, const ::texture_studio::GetProjectsRequest* request, ::texture_studio::GetProjectsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetProjects_, context, request, response, std::move(f));
}

void TextureStudioService::Stub::experimental_async::GetProjects(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::GetProjectsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetProjects_, context, request, response, std::move(f));
}

void TextureStudioService::Stub::experimental_async::GetProjects(::grpc::ClientContext* context, const ::texture_studio::GetProjectsRequest* request, ::texture_studio::GetProjectsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetProjects_, context, request, response, reactor);
}

void TextureStudioService::Stub::experimental_async::GetProjects(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::GetProjectsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetProjects_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::texture_studio::GetProjectsResponse>* TextureStudioService::Stub::AsyncGetProjectsRaw(::grpc::ClientContext* context, const ::texture_studio::GetProjectsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::texture_studio::GetProjectsResponse>::Create(channel_.get(), cq, rpcmethod_GetProjects_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::texture_studio::GetProjectsResponse>* TextureStudioService::Stub::PrepareAsyncGetProjectsRaw(::grpc::ClientContext* context, const ::texture_studio::GetProjectsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::texture_studio::GetProjectsResponse>::Create(channel_.get(), cq, rpcmethod_GetProjects_, context, request, false);
}

::grpc::ClientReader< ::texture_studio::SubscribeToProjectsChangesResponse>* TextureStudioService::Stub::SubscribeToProjectsChangesRaw(::grpc::ClientContext* context, const ::texture_studio::SubscribeToProjectsChangesRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::texture_studio::SubscribeToProjectsChangesResponse>::Create(channel_.get(), rpcmethod_SubscribeToProjectsChanges_, context, request);
}

void TextureStudioService::Stub::experimental_async::SubscribeToProjectsChanges(::grpc::ClientContext* context, ::texture_studio::SubscribeToProjectsChangesRequest* request, ::grpc::experimental::ClientReadReactor< ::texture_studio::SubscribeToProjectsChangesResponse>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::texture_studio::SubscribeToProjectsChangesResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeToProjectsChanges_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::texture_studio::SubscribeToProjectsChangesResponse>* TextureStudioService::Stub::AsyncSubscribeToProjectsChangesRaw(::grpc::ClientContext* context, const ::texture_studio::SubscribeToProjectsChangesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::texture_studio::SubscribeToProjectsChangesResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeToProjectsChanges_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::texture_studio::SubscribeToProjectsChangesResponse>* TextureStudioService::Stub::PrepareAsyncSubscribeToProjectsChangesRaw(::grpc::ClientContext* context, const ::texture_studio::SubscribeToProjectsChangesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::texture_studio::SubscribeToProjectsChangesResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeToProjectsChanges_, context, request, false, nullptr);
}

TextureStudioService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TextureStudioService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TextureStudioService::Service, ::texture_studio::CreateServerRequest, ::texture_studio::CreateServerResponse>(
          std::mem_fn(&TextureStudioService::Service::CreateServer), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TextureStudioService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TextureStudioService::Service, ::texture_studio::MyServerRequest, ::texture_studio::MyServerResponse>(
          std::mem_fn(&TextureStudioService::Service::MyServer), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TextureStudioService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TextureStudioService::Service, ::texture_studio::DeleteServerRequest, ::texture_studio::DeleteServerResponse>(
          std::mem_fn(&TextureStudioService::Service::DeleteServer), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TextureStudioService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TextureStudioService::Service, ::texture_studio::StartServerRequest, ::texture_studio::StartServerResponse>(
          std::mem_fn(&TextureStudioService::Service::StartServer), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TextureStudioService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TextureStudioService::Service, ::texture_studio::StopServerRequest, ::texture_studio::StopServerResponse>(
          std::mem_fn(&TextureStudioService::Service::StopServer), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TextureStudioService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TextureStudioService::Service, ::texture_studio::RestartServerRequest, ::texture_studio::RestartServerResponse>(
          std::mem_fn(&TextureStudioService::Service::RestartServer), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TextureStudioService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TextureStudioService::Service, ::texture_studio::ServerStatusRequest, ::texture_studio::ServerStatusResponse>(
          std::mem_fn(&TextureStudioService::Service::ServerStatus), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TextureStudioService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TextureStudioService::Service, ::texture_studio::UploadProjectRequest, ::texture_studio::UploadProjectResponse>(
          std::mem_fn(&TextureStudioService::Service::UploadProject), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TextureStudioService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TextureStudioService::Service, ::texture_studio::GetProjectRequest, ::texture_studio::GetProjectResponse>(
          std::mem_fn(&TextureStudioService::Service::GetProject), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TextureStudioService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TextureStudioService::Service, ::texture_studio::GetProjectsRequest, ::texture_studio::GetProjectsResponse>(
          std::mem_fn(&TextureStudioService::Service::GetProjects), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TextureStudioService_method_names[10],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TextureStudioService::Service, ::texture_studio::SubscribeToProjectsChangesRequest, ::texture_studio::SubscribeToProjectsChangesResponse>(
          std::mem_fn(&TextureStudioService::Service::SubscribeToProjectsChanges), this)));
}

TextureStudioService::Service::~Service() {
}

::grpc::Status TextureStudioService::Service::CreateServer(::grpc::ServerContext* context, const ::texture_studio::CreateServerRequest* request, ::texture_studio::CreateServerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TextureStudioService::Service::MyServer(::grpc::ServerContext* context, const ::texture_studio::MyServerRequest* request, ::texture_studio::MyServerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TextureStudioService::Service::DeleteServer(::grpc::ServerContext* context, const ::texture_studio::DeleteServerRequest* request, ::texture_studio::DeleteServerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TextureStudioService::Service::StartServer(::grpc::ServerContext* context, const ::texture_studio::StartServerRequest* request, ::texture_studio::StartServerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TextureStudioService::Service::StopServer(::grpc::ServerContext* context, const ::texture_studio::StopServerRequest* request, ::texture_studio::StopServerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TextureStudioService::Service::RestartServer(::grpc::ServerContext* context, const ::texture_studio::RestartServerRequest* request, ::texture_studio::RestartServerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TextureStudioService::Service::ServerStatus(::grpc::ServerContext* context, const ::texture_studio::ServerStatusRequest* request, ::texture_studio::ServerStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TextureStudioService::Service::UploadProject(::grpc::ServerContext* context, const ::texture_studio::UploadProjectRequest* request, ::texture_studio::UploadProjectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TextureStudioService::Service::GetProject(::grpc::ServerContext* context, const ::texture_studio::GetProjectRequest* request, ::texture_studio::GetProjectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TextureStudioService::Service::GetProjects(::grpc::ServerContext* context, const ::texture_studio::GetProjectsRequest* request, ::texture_studio::GetProjectsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TextureStudioService::Service::SubscribeToProjectsChanges(::grpc::ServerContext* context, const ::texture_studio::SubscribeToProjectsChangesRequest* request, ::grpc::ServerWriter< ::texture_studio::SubscribeToProjectsChangesResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace texture_studio

