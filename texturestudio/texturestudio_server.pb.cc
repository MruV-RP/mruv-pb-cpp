// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: texturestudio/texturestudio_server.proto

#include "texturestudio/texturestudio_server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace mruv {
namespace texture_studio {
class StartServerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartServerRequest> _instance;
} _StartServerRequest_default_instance_;
class StartServerResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartServerResponse> _instance;
} _StartServerResponse_default_instance_;
class StopServerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopServerRequest> _instance;
} _StopServerRequest_default_instance_;
class StopServerResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopServerResponse> _instance;
} _StopServerResponse_default_instance_;
class RestartServerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RestartServerRequest> _instance;
} _RestartServerRequest_default_instance_;
class RestartServerResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RestartServerResponse> _instance;
} _RestartServerResponse_default_instance_;
class ServerStatusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerStatusRequest> _instance;
} _ServerStatusRequest_default_instance_;
class ServerStatusResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerStatusResponse> _instance;
} _ServerStatusResponse_default_instance_;
class UploadProjectRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UploadProjectRequest> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_;
} _UploadProjectRequest_default_instance_;
class UploadProjectResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UploadProjectResponse> _instance;
} _UploadProjectResponse_default_instance_;
class GetProjectRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetProjectRequest> _instance;
} _GetProjectRequest_default_instance_;
class GetProjectResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetProjectResponse> _instance;
} _GetProjectResponse_default_instance_;
class GetProjectsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetProjectsRequest> _instance;
} _GetProjectsRequest_default_instance_;
class GetProjectsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetProjectsResponse> _instance;
} _GetProjectsResponse_default_instance_;
class SubscribeToProjectsChangesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeToProjectsChangesRequest> _instance;
} _SubscribeToProjectsChangesRequest_default_instance_;
class SubscribeToProjectsChangesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeToProjectsChangesResponse> _instance;
} _SubscribeToProjectsChangesResponse_default_instance_;
}  // namespace texture_studio
}  // namespace mruv
static void InitDefaultsscc_info_GetProjectRequest_texturestudio_2ftexturestudio_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::texture_studio::_GetProjectRequest_default_instance_;
    new (ptr) ::mruv::texture_studio::GetProjectRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::texture_studio::GetProjectRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetProjectRequest_texturestudio_2ftexturestudio_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetProjectRequest_texturestudio_2ftexturestudio_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_GetProjectResponse_texturestudio_2ftexturestudio_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::texture_studio::_GetProjectResponse_default_instance_;
    new (ptr) ::mruv::texture_studio::GetProjectResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::texture_studio::GetProjectResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetProjectResponse_texturestudio_2ftexturestudio_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetProjectResponse_texturestudio_2ftexturestudio_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_GetProjectsRequest_texturestudio_2ftexturestudio_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::texture_studio::_GetProjectsRequest_default_instance_;
    new (ptr) ::mruv::texture_studio::GetProjectsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::texture_studio::GetProjectsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetProjectsRequest_texturestudio_2ftexturestudio_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetProjectsRequest_texturestudio_2ftexturestudio_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_GetProjectsResponse_texturestudio_2ftexturestudio_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::texture_studio::_GetProjectsResponse_default_instance_;
    new (ptr) ::mruv::texture_studio::GetProjectsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::texture_studio::GetProjectsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetProjectsResponse_texturestudio_2ftexturestudio_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetProjectsResponse_texturestudio_2ftexturestudio_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_RestartServerRequest_texturestudio_2ftexturestudio_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::texture_studio::_RestartServerRequest_default_instance_;
    new (ptr) ::mruv::texture_studio::RestartServerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::texture_studio::RestartServerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RestartServerRequest_texturestudio_2ftexturestudio_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RestartServerRequest_texturestudio_2ftexturestudio_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_RestartServerResponse_texturestudio_2ftexturestudio_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::texture_studio::_RestartServerResponse_default_instance_;
    new (ptr) ::mruv::texture_studio::RestartServerResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::texture_studio::RestartServerResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RestartServerResponse_texturestudio_2ftexturestudio_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RestartServerResponse_texturestudio_2ftexturestudio_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_ServerStatusRequest_texturestudio_2ftexturestudio_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::texture_studio::_ServerStatusRequest_default_instance_;
    new (ptr) ::mruv::texture_studio::ServerStatusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::texture_studio::ServerStatusRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerStatusRequest_texturestudio_2ftexturestudio_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServerStatusRequest_texturestudio_2ftexturestudio_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_ServerStatusResponse_texturestudio_2ftexturestudio_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::texture_studio::_ServerStatusResponse_default_instance_;
    new (ptr) ::mruv::texture_studio::ServerStatusResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::texture_studio::ServerStatusResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerStatusResponse_texturestudio_2ftexturestudio_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServerStatusResponse_texturestudio_2ftexturestudio_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_StartServerRequest_texturestudio_2ftexturestudio_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::texture_studio::_StartServerRequest_default_instance_;
    new (ptr) ::mruv::texture_studio::StartServerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::texture_studio::StartServerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartServerRequest_texturestudio_2ftexturestudio_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StartServerRequest_texturestudio_2ftexturestudio_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_StartServerResponse_texturestudio_2ftexturestudio_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::texture_studio::_StartServerResponse_default_instance_;
    new (ptr) ::mruv::texture_studio::StartServerResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::texture_studio::StartServerResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartServerResponse_texturestudio_2ftexturestudio_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StartServerResponse_texturestudio_2ftexturestudio_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_StopServerRequest_texturestudio_2ftexturestudio_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::texture_studio::_StopServerRequest_default_instance_;
    new (ptr) ::mruv::texture_studio::StopServerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::texture_studio::StopServerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopServerRequest_texturestudio_2ftexturestudio_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StopServerRequest_texturestudio_2ftexturestudio_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_StopServerResponse_texturestudio_2ftexturestudio_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::texture_studio::_StopServerResponse_default_instance_;
    new (ptr) ::mruv::texture_studio::StopServerResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::texture_studio::StopServerResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopServerResponse_texturestudio_2ftexturestudio_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StopServerResponse_texturestudio_2ftexturestudio_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeToProjectsChangesRequest_texturestudio_2ftexturestudio_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::texture_studio::_SubscribeToProjectsChangesRequest_default_instance_;
    new (ptr) ::mruv::texture_studio::SubscribeToProjectsChangesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::texture_studio::SubscribeToProjectsChangesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeToProjectsChangesRequest_texturestudio_2ftexturestudio_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeToProjectsChangesRequest_texturestudio_2ftexturestudio_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeToProjectsChangesResponse_texturestudio_2ftexturestudio_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::texture_studio::_SubscribeToProjectsChangesResponse_default_instance_;
    new (ptr) ::mruv::texture_studio::SubscribeToProjectsChangesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::texture_studio::SubscribeToProjectsChangesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeToProjectsChangesResponse_texturestudio_2ftexturestudio_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeToProjectsChangesResponse_texturestudio_2ftexturestudio_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_UploadProjectRequest_texturestudio_2ftexturestudio_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::texture_studio::_UploadProjectRequest_default_instance_;
    new (ptr) ::mruv::texture_studio::UploadProjectRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::texture_studio::UploadProjectRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UploadProjectRequest_texturestudio_2ftexturestudio_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UploadProjectRequest_texturestudio_2ftexturestudio_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_UploadProjectResponse_texturestudio_2ftexturestudio_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::texture_studio::_UploadProjectResponse_default_instance_;
    new (ptr) ::mruv::texture_studio::UploadProjectResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::texture_studio::UploadProjectResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UploadProjectResponse_texturestudio_2ftexturestudio_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UploadProjectResponse_texturestudio_2ftexturestudio_5fserver_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_texturestudio_2ftexturestudio_5fserver_2eproto[16];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_texturestudio_2ftexturestudio_5fserver_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_texturestudio_2ftexturestudio_5fserver_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_texturestudio_2ftexturestudio_5fserver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::StartServerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::StartServerRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::StartServerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::StopServerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::StopServerRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::StopServerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::RestartServerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::RestartServerRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::RestartServerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::ServerStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::ServerStatusRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::ServerStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::ServerStatusResponse, port_),
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::ServerStatusResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::UploadProjectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::UploadProjectRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::UploadProjectRequest, server_id_),
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::UploadProjectRequest, project_name_),
  offsetof(::mruv::texture_studio::UploadProjectRequestDefaultTypeInternal, code_),
  offsetof(::mruv::texture_studio::UploadProjectRequestDefaultTypeInternal, file_),
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::UploadProjectRequest, project_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::UploadProjectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::GetProjectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::GetProjectRequest, server_id_),
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::GetProjectRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::GetProjectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::GetProjectResponse, code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::GetProjectsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::GetProjectsRequest, server_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::GetProjectsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::GetProjectsResponse, names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::SubscribeToProjectsChangesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::SubscribeToProjectsChangesRequest, server_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::SubscribeToProjectsChangesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::SubscribeToProjectsChangesResponse, name_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mruv::texture_studio::StartServerRequest)},
  { 6, -1, sizeof(::mruv::texture_studio::StartServerResponse)},
  { 11, -1, sizeof(::mruv::texture_studio::StopServerRequest)},
  { 17, -1, sizeof(::mruv::texture_studio::StopServerResponse)},
  { 22, -1, sizeof(::mruv::texture_studio::RestartServerRequest)},
  { 28, -1, sizeof(::mruv::texture_studio::RestartServerResponse)},
  { 33, -1, sizeof(::mruv::texture_studio::ServerStatusRequest)},
  { 39, -1, sizeof(::mruv::texture_studio::ServerStatusResponse)},
  { 46, -1, sizeof(::mruv::texture_studio::UploadProjectRequest)},
  { 56, -1, sizeof(::mruv::texture_studio::UploadProjectResponse)},
  { 61, -1, sizeof(::mruv::texture_studio::GetProjectRequest)},
  { 68, -1, sizeof(::mruv::texture_studio::GetProjectResponse)},
  { 74, -1, sizeof(::mruv::texture_studio::GetProjectsRequest)},
  { 80, -1, sizeof(::mruv::texture_studio::GetProjectsResponse)},
  { 86, -1, sizeof(::mruv::texture_studio::SubscribeToProjectsChangesRequest)},
  { 92, -1, sizeof(::mruv::texture_studio::SubscribeToProjectsChangesResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::texture_studio::_StartServerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::texture_studio::_StartServerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::texture_studio::_StopServerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::texture_studio::_StopServerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::texture_studio::_RestartServerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::texture_studio::_RestartServerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::texture_studio::_ServerStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::texture_studio::_ServerStatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::texture_studio::_UploadProjectRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::texture_studio::_UploadProjectResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::texture_studio::_GetProjectRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::texture_studio::_GetProjectResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::texture_studio::_GetProjectsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::texture_studio::_GetProjectsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::texture_studio::_SubscribeToProjectsChangesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::texture_studio::_SubscribeToProjectsChangesResponse_default_instance_),
};

const char descriptor_table_protodef_texturestudio_2ftexturestudio_5fserver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(texturestudio/texturestudio_server.pro"
  "to\022\023mruv.texture_studio\032\034google/api/anno"
  "tations.proto\" \n\022StartServerRequest\022\n\n\002i"
  "d\030\001 \001(\r\"\025\n\023StartServerResponse\"\037\n\021StopSe"
  "rverRequest\022\n\n\002id\030\001 \001(\r\"\024\n\022StopServerRes"
  "ponse\"\"\n\024RestartServerRequest\022\n\n\002id\030\001 \001("
  "\r\"\027\n\025RestartServerResponse\"!\n\023ServerStat"
  "usRequest\022\n\n\002id\030\001 \001(\r\"W\n\024ServerStatusRes"
  "ponse\022\014\n\004port\030\001 \001(\r\0221\n\006status\030\002 \001(\0162!.mr"
  "uv.texture_studio.ServerStatus\"j\n\024Upload"
  "ProjectRequest\022\021\n\tserver_id\030\001 \001(\r\022\024\n\014pro"
  "ject_name\030\002 \001(\t\022\016\n\004code\030\004 \001(\tH\000\022\016\n\004file\030"
  "\005 \001(\014H\000B\t\n\007project\"\027\n\025UploadProjectRespo"
  "nse\"4\n\021GetProjectRequest\022\021\n\tserver_id\030\001 "
  "\001(\r\022\014\n\004name\030\002 \001(\t\"\"\n\022GetProjectResponse\022"
  "\014\n\004code\030\001 \001(\t\"\'\n\022GetProjectsRequest\022\021\n\ts"
  "erver_id\030\001 \001(\r\"$\n\023GetProjectsResponse\022\r\n"
  "\005names\030\001 \003(\t\"6\n!SubscribeToProjectsChang"
  "esRequest\022\021\n\tserver_id\030\001 \001(\r\"2\n\"Subscrib"
  "eToProjectsChangesResponse\022\014\n\004name\030\001 \001(\t"
  "*3\n\014ServerStatus\022\022\n\016UNKNOWN_STATUS\020\000\022\006\n\002"
  "ON\020\001\022\007\n\003OFF\020\0022\323\t\n\032TextureStudioServerSer"
  "vice\022\215\001\n\013StartServer\022\'.mruv.texture_stud"
  "io.StartServerRequest\032(.mruv.texture_stu"
  "dio.StartServerResponse\"+\202\323\344\223\002%\"#/v1/tex"
  "turestudio/server/{id}/start\022\211\001\n\nStopSer"
  "ver\022&.mruv.texture_studio.StopServerRequ"
  "est\032\'.mruv.texture_studio.StopServerResp"
  "onse\"*\202\323\344\223\002$\"\"/v1/texturestudio/server/{"
  "id}/stop\022\225\001\n\rRestartServer\022).mruv.textur"
  "e_studio.RestartServerRequest\032*.mruv.tex"
  "ture_studio.RestartServerResponse\"-\202\323\344\223\002"
  "\'\"%/v1/texturestudio/server/{id}/restart"
  "\022\221\001\n\014ServerStatus\022(.mruv.texture_studio."
  "ServerStatusRequest\032).mruv.texture_studi"
  "o.ServerStatusResponse\",\202\323\344\223\002&\022$/v1/text"
  "urestudio/server/{id}/status\022\240\001\n\rUploadP"
  "roject\022).mruv.texture_studio.UploadProje"
  "ctRequest\032*.mruv.texture_studio.UploadPr"
  "ojectResponse\"8\202\323\344\223\0022\"-/v1/texturestudio"
  "/server/{server_id}/projects:\001*\022\233\001\n\nGetP"
  "roject\022&.mruv.texture_studio.GetProjectR"
  "equest\032\'.mruv.texture_studio.GetProjectR"
  "esponse\"<\202\323\344\223\0026\0224/v1/texturestudio/serve"
  "r/{server_id}/projects/{name}\022\227\001\n\013GetPro"
  "jects\022\'.mruv.texture_studio.GetProjectsR"
  "equest\032(.mruv.texture_studio.GetProjects"
  "Response\"5\202\323\344\223\002/\022-/v1/texturestudio/serv"
  "er/{server_id}/projects\022\221\001\n\032SubscribeToP"
  "rojectsChanges\0226.mruv.texture_studio.Sub"
  "scribeToProjectsChangesRequest\0327.mruv.te"
  "xture_studio.SubscribeToProjectsChangesR"
  "esponse\"\0000\001B-Z+github.com/MruV-RP/mruv-p"
  "b-go/texturestudiob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_texturestudio_2ftexturestudio_5fserver_2eproto_deps[1] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_texturestudio_2ftexturestudio_5fserver_2eproto_sccs[16] = {
  &scc_info_GetProjectRequest_texturestudio_2ftexturestudio_5fserver_2eproto.base,
  &scc_info_GetProjectResponse_texturestudio_2ftexturestudio_5fserver_2eproto.base,
  &scc_info_GetProjectsRequest_texturestudio_2ftexturestudio_5fserver_2eproto.base,
  &scc_info_GetProjectsResponse_texturestudio_2ftexturestudio_5fserver_2eproto.base,
  &scc_info_RestartServerRequest_texturestudio_2ftexturestudio_5fserver_2eproto.base,
  &scc_info_RestartServerResponse_texturestudio_2ftexturestudio_5fserver_2eproto.base,
  &scc_info_ServerStatusRequest_texturestudio_2ftexturestudio_5fserver_2eproto.base,
  &scc_info_ServerStatusResponse_texturestudio_2ftexturestudio_5fserver_2eproto.base,
  &scc_info_StartServerRequest_texturestudio_2ftexturestudio_5fserver_2eproto.base,
  &scc_info_StartServerResponse_texturestudio_2ftexturestudio_5fserver_2eproto.base,
  &scc_info_StopServerRequest_texturestudio_2ftexturestudio_5fserver_2eproto.base,
  &scc_info_StopServerResponse_texturestudio_2ftexturestudio_5fserver_2eproto.base,
  &scc_info_SubscribeToProjectsChangesRequest_texturestudio_2ftexturestudio_5fserver_2eproto.base,
  &scc_info_SubscribeToProjectsChangesResponse_texturestudio_2ftexturestudio_5fserver_2eproto.base,
  &scc_info_UploadProjectRequest_texturestudio_2ftexturestudio_5fserver_2eproto.base,
  &scc_info_UploadProjectResponse_texturestudio_2ftexturestudio_5fserver_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_texturestudio_2ftexturestudio_5fserver_2eproto_once;
static bool descriptor_table_texturestudio_2ftexturestudio_5fserver_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_texturestudio_2ftexturestudio_5fserver_2eproto = {
  &descriptor_table_texturestudio_2ftexturestudio_5fserver_2eproto_initialized, descriptor_table_protodef_texturestudio_2ftexturestudio_5fserver_2eproto, "texturestudio/texturestudio_server.proto", 2146,
  &descriptor_table_texturestudio_2ftexturestudio_5fserver_2eproto_once, descriptor_table_texturestudio_2ftexturestudio_5fserver_2eproto_sccs, descriptor_table_texturestudio_2ftexturestudio_5fserver_2eproto_deps, 16, 1,
  schemas, file_default_instances, TableStruct_texturestudio_2ftexturestudio_5fserver_2eproto::offsets,
  file_level_metadata_texturestudio_2ftexturestudio_5fserver_2eproto, 16, file_level_enum_descriptors_texturestudio_2ftexturestudio_5fserver_2eproto, file_level_service_descriptors_texturestudio_2ftexturestudio_5fserver_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_texturestudio_2ftexturestudio_5fserver_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_texturestudio_2ftexturestudio_5fserver_2eproto), true);
namespace mruv {
namespace texture_studio {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_texturestudio_2ftexturestudio_5fserver_2eproto);
  return file_level_enum_descriptors_texturestudio_2ftexturestudio_5fserver_2eproto[0];
}
bool ServerStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void StartServerRequest::InitAsDefaultInstance() {
}
class StartServerRequest::_Internal {
 public:
};

StartServerRequest::StartServerRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.texture_studio.StartServerRequest)
}
StartServerRequest::StartServerRequest(const StartServerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.texture_studio.StartServerRequest)
}

void StartServerRequest::SharedCtor() {
  id_ = 0u;
}

StartServerRequest::~StartServerRequest() {
  // @@protoc_insertion_point(destructor:mruv.texture_studio.StartServerRequest)
  SharedDtor();
}

void StartServerRequest::SharedDtor() {
}

void StartServerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartServerRequest& StartServerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartServerRequest_texturestudio_2ftexturestudio_5fserver_2eproto.base);
  return *internal_default_instance();
}


void StartServerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.texture_studio.StartServerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear();
}

const char* StartServerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartServerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.texture_studio.StartServerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.texture_studio.StartServerRequest)
  return target;
}

size_t StartServerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.texture_studio.StartServerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartServerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.texture_studio.StartServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StartServerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartServerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.texture_studio.StartServerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.texture_studio.StartServerRequest)
    MergeFrom(*source);
  }
}

void StartServerRequest::MergeFrom(const StartServerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.texture_studio.StartServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void StartServerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.texture_studio.StartServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartServerRequest::CopyFrom(const StartServerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.texture_studio.StartServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartServerRequest::IsInitialized() const {
  return true;
}

void StartServerRequest::InternalSwap(StartServerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartServerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StartServerResponse::InitAsDefaultInstance() {
}
class StartServerResponse::_Internal {
 public:
};

StartServerResponse::StartServerResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.texture_studio.StartServerResponse)
}
StartServerResponse::StartServerResponse(const StartServerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.texture_studio.StartServerResponse)
}

void StartServerResponse::SharedCtor() {
}

StartServerResponse::~StartServerResponse() {
  // @@protoc_insertion_point(destructor:mruv.texture_studio.StartServerResponse)
  SharedDtor();
}

void StartServerResponse::SharedDtor() {
}

void StartServerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartServerResponse& StartServerResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartServerResponse_texturestudio_2ftexturestudio_5fserver_2eproto.base);
  return *internal_default_instance();
}


void StartServerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.texture_studio.StartServerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* StartServerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartServerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.texture_studio.StartServerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.texture_studio.StartServerResponse)
  return target;
}

size_t StartServerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.texture_studio.StartServerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartServerResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.texture_studio.StartServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StartServerResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartServerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.texture_studio.StartServerResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.texture_studio.StartServerResponse)
    MergeFrom(*source);
  }
}

void StartServerResponse::MergeFrom(const StartServerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.texture_studio.StartServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StartServerResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.texture_studio.StartServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartServerResponse::CopyFrom(const StartServerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.texture_studio.StartServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartServerResponse::IsInitialized() const {
  return true;
}

void StartServerResponse::InternalSwap(StartServerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartServerResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopServerRequest::InitAsDefaultInstance() {
}
class StopServerRequest::_Internal {
 public:
};

StopServerRequest::StopServerRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.texture_studio.StopServerRequest)
}
StopServerRequest::StopServerRequest(const StopServerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.texture_studio.StopServerRequest)
}

void StopServerRequest::SharedCtor() {
  id_ = 0u;
}

StopServerRequest::~StopServerRequest() {
  // @@protoc_insertion_point(destructor:mruv.texture_studio.StopServerRequest)
  SharedDtor();
}

void StopServerRequest::SharedDtor() {
}

void StopServerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopServerRequest& StopServerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopServerRequest_texturestudio_2ftexturestudio_5fserver_2eproto.base);
  return *internal_default_instance();
}


void StopServerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.texture_studio.StopServerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear();
}

const char* StopServerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopServerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.texture_studio.StopServerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.texture_studio.StopServerRequest)
  return target;
}

size_t StopServerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.texture_studio.StopServerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopServerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.texture_studio.StopServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StopServerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopServerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.texture_studio.StopServerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.texture_studio.StopServerRequest)
    MergeFrom(*source);
  }
}

void StopServerRequest::MergeFrom(const StopServerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.texture_studio.StopServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void StopServerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.texture_studio.StopServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopServerRequest::CopyFrom(const StopServerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.texture_studio.StopServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopServerRequest::IsInitialized() const {
  return true;
}

void StopServerRequest::InternalSwap(StopServerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopServerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopServerResponse::InitAsDefaultInstance() {
}
class StopServerResponse::_Internal {
 public:
};

StopServerResponse::StopServerResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.texture_studio.StopServerResponse)
}
StopServerResponse::StopServerResponse(const StopServerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.texture_studio.StopServerResponse)
}

void StopServerResponse::SharedCtor() {
}

StopServerResponse::~StopServerResponse() {
  // @@protoc_insertion_point(destructor:mruv.texture_studio.StopServerResponse)
  SharedDtor();
}

void StopServerResponse::SharedDtor() {
}

void StopServerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopServerResponse& StopServerResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopServerResponse_texturestudio_2ftexturestudio_5fserver_2eproto.base);
  return *internal_default_instance();
}


void StopServerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.texture_studio.StopServerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* StopServerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopServerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.texture_studio.StopServerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.texture_studio.StopServerResponse)
  return target;
}

size_t StopServerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.texture_studio.StopServerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopServerResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.texture_studio.StopServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StopServerResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopServerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.texture_studio.StopServerResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.texture_studio.StopServerResponse)
    MergeFrom(*source);
  }
}

void StopServerResponse::MergeFrom(const StopServerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.texture_studio.StopServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StopServerResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.texture_studio.StopServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopServerResponse::CopyFrom(const StopServerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.texture_studio.StopServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopServerResponse::IsInitialized() const {
  return true;
}

void StopServerResponse::InternalSwap(StopServerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopServerResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RestartServerRequest::InitAsDefaultInstance() {
}
class RestartServerRequest::_Internal {
 public:
};

RestartServerRequest::RestartServerRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.texture_studio.RestartServerRequest)
}
RestartServerRequest::RestartServerRequest(const RestartServerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.texture_studio.RestartServerRequest)
}

void RestartServerRequest::SharedCtor() {
  id_ = 0u;
}

RestartServerRequest::~RestartServerRequest() {
  // @@protoc_insertion_point(destructor:mruv.texture_studio.RestartServerRequest)
  SharedDtor();
}

void RestartServerRequest::SharedDtor() {
}

void RestartServerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RestartServerRequest& RestartServerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RestartServerRequest_texturestudio_2ftexturestudio_5fserver_2eproto.base);
  return *internal_default_instance();
}


void RestartServerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.texture_studio.RestartServerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear();
}

const char* RestartServerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RestartServerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.texture_studio.RestartServerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.texture_studio.RestartServerRequest)
  return target;
}

size_t RestartServerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.texture_studio.RestartServerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RestartServerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.texture_studio.RestartServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RestartServerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RestartServerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.texture_studio.RestartServerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.texture_studio.RestartServerRequest)
    MergeFrom(*source);
  }
}

void RestartServerRequest::MergeFrom(const RestartServerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.texture_studio.RestartServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void RestartServerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.texture_studio.RestartServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestartServerRequest::CopyFrom(const RestartServerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.texture_studio.RestartServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestartServerRequest::IsInitialized() const {
  return true;
}

void RestartServerRequest::InternalSwap(RestartServerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RestartServerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RestartServerResponse::InitAsDefaultInstance() {
}
class RestartServerResponse::_Internal {
 public:
};

RestartServerResponse::RestartServerResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.texture_studio.RestartServerResponse)
}
RestartServerResponse::RestartServerResponse(const RestartServerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.texture_studio.RestartServerResponse)
}

void RestartServerResponse::SharedCtor() {
}

RestartServerResponse::~RestartServerResponse() {
  // @@protoc_insertion_point(destructor:mruv.texture_studio.RestartServerResponse)
  SharedDtor();
}

void RestartServerResponse::SharedDtor() {
}

void RestartServerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RestartServerResponse& RestartServerResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RestartServerResponse_texturestudio_2ftexturestudio_5fserver_2eproto.base);
  return *internal_default_instance();
}


void RestartServerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.texture_studio.RestartServerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* RestartServerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RestartServerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.texture_studio.RestartServerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.texture_studio.RestartServerResponse)
  return target;
}

size_t RestartServerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.texture_studio.RestartServerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RestartServerResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.texture_studio.RestartServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RestartServerResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RestartServerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.texture_studio.RestartServerResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.texture_studio.RestartServerResponse)
    MergeFrom(*source);
  }
}

void RestartServerResponse::MergeFrom(const RestartServerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.texture_studio.RestartServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RestartServerResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.texture_studio.RestartServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestartServerResponse::CopyFrom(const RestartServerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.texture_studio.RestartServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestartServerResponse::IsInitialized() const {
  return true;
}

void RestartServerResponse::InternalSwap(RestartServerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RestartServerResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerStatusRequest::InitAsDefaultInstance() {
}
class ServerStatusRequest::_Internal {
 public:
};

ServerStatusRequest::ServerStatusRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.texture_studio.ServerStatusRequest)
}
ServerStatusRequest::ServerStatusRequest(const ServerStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.texture_studio.ServerStatusRequest)
}

void ServerStatusRequest::SharedCtor() {
  id_ = 0u;
}

ServerStatusRequest::~ServerStatusRequest() {
  // @@protoc_insertion_point(destructor:mruv.texture_studio.ServerStatusRequest)
  SharedDtor();
}

void ServerStatusRequest::SharedDtor() {
}

void ServerStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerStatusRequest& ServerStatusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerStatusRequest_texturestudio_2ftexturestudio_5fserver_2eproto.base);
  return *internal_default_instance();
}


void ServerStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.texture_studio.ServerStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear();
}

const char* ServerStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerStatusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.texture_studio.ServerStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.texture_studio.ServerStatusRequest)
  return target;
}

size_t ServerStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.texture_studio.ServerStatusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerStatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.texture_studio.ServerStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerStatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.texture_studio.ServerStatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.texture_studio.ServerStatusRequest)
    MergeFrom(*source);
  }
}

void ServerStatusRequest::MergeFrom(const ServerStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.texture_studio.ServerStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void ServerStatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.texture_studio.ServerStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerStatusRequest::CopyFrom(const ServerStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.texture_studio.ServerStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerStatusRequest::IsInitialized() const {
  return true;
}

void ServerStatusRequest::InternalSwap(ServerStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerStatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerStatusResponse::InitAsDefaultInstance() {
}
class ServerStatusResponse::_Internal {
 public:
};

ServerStatusResponse::ServerStatusResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.texture_studio.ServerStatusResponse)
}
ServerStatusResponse::ServerStatusResponse(const ServerStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&port_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:mruv.texture_studio.ServerStatusResponse)
}

void ServerStatusResponse::SharedCtor() {
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&port_)) + sizeof(status_));
}

ServerStatusResponse::~ServerStatusResponse() {
  // @@protoc_insertion_point(destructor:mruv.texture_studio.ServerStatusResponse)
  SharedDtor();
}

void ServerStatusResponse::SharedDtor() {
}

void ServerStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerStatusResponse& ServerStatusResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerStatusResponse_texturestudio_2ftexturestudio_5fserver_2eproto.base);
  return *internal_default_instance();
}


void ServerStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.texture_studio.ServerStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&port_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

const char* ServerStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 port = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mruv.texture_studio.ServerStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::mruv::texture_studio::ServerStatus>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerStatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.texture_studio.ServerStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 port = 1;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_port(), target);
  }

  // .mruv.texture_studio.ServerStatus status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.texture_studio.ServerStatusResponse)
  return target;
}

size_t ServerStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.texture_studio.ServerStatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 port = 1;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  // .mruv.texture_studio.ServerStatus status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerStatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.texture_studio.ServerStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerStatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.texture_studio.ServerStatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.texture_studio.ServerStatusResponse)
    MergeFrom(*source);
  }
}

void ServerStatusResponse::MergeFrom(const ServerStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.texture_studio.ServerStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void ServerStatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.texture_studio.ServerStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerStatusResponse::CopyFrom(const ServerStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.texture_studio.ServerStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerStatusResponse::IsInitialized() const {
  return true;
}

void ServerStatusResponse::InternalSwap(ServerStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(port_, other->port_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerStatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UploadProjectRequest::InitAsDefaultInstance() {
  ::mruv::texture_studio::_UploadProjectRequest_default_instance_.code_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::mruv::texture_studio::_UploadProjectRequest_default_instance_.file_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class UploadProjectRequest::_Internal {
 public:
};

UploadProjectRequest::UploadProjectRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.texture_studio.UploadProjectRequest)
}
UploadProjectRequest::UploadProjectRequest(const UploadProjectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_project_name().empty()) {
    project_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.project_name_);
  }
  server_id_ = from.server_id_;
  clear_has_project();
  switch (from.project_case()) {
    case kCode: {
      _internal_set_code(from._internal_code());
      break;
    }
    case kFile: {
      _internal_set_file(from._internal_file());
      break;
    }
    case PROJECT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:mruv.texture_studio.UploadProjectRequest)
}

void UploadProjectRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UploadProjectRequest_texturestudio_2ftexturestudio_5fserver_2eproto.base);
  project_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_id_ = 0u;
  clear_has_project();
}

UploadProjectRequest::~UploadProjectRequest() {
  // @@protoc_insertion_point(destructor:mruv.texture_studio.UploadProjectRequest)
  SharedDtor();
}

void UploadProjectRequest::SharedDtor() {
  project_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_project()) {
    clear_project();
  }
}

void UploadProjectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UploadProjectRequest& UploadProjectRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UploadProjectRequest_texturestudio_2ftexturestudio_5fserver_2eproto.base);
  return *internal_default_instance();
}


void UploadProjectRequest::clear_project() {
// @@protoc_insertion_point(one_of_clear_start:mruv.texture_studio.UploadProjectRequest)
  switch (project_case()) {
    case kCode: {
      project_.code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kFile: {
      project_.file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case PROJECT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PROJECT_NOT_SET;
}


void UploadProjectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.texture_studio.UploadProjectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_id_ = 0u;
  clear_project();
  _internal_metadata_.Clear();
}

const char* UploadProjectRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string project_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_project_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.texture_studio.UploadProjectRequest.project_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.texture_studio.UploadProjectRequest.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes file = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UploadProjectRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.texture_studio.UploadProjectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 server_id = 1;
  if (this->server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_id(), target);
  }

  // string project_name = 2;
  if (this->project_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_project_name().data(), static_cast<int>(this->_internal_project_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.texture_studio.UploadProjectRequest.project_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_project_name(), target);
  }

  // string code = 4;
  if (_internal_has_code()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.texture_studio.UploadProjectRequest.code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_code(), target);
  }

  // bytes file = 5;
  if (_internal_has_file()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_file(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.texture_studio.UploadProjectRequest)
  return target;
}

size_t UploadProjectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.texture_studio.UploadProjectRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string project_name = 2;
  if (this->project_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_project_name());
  }

  // uint32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_server_id());
  }

  switch (project_case()) {
    // string code = 4;
    case kCode: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_code());
      break;
    }
    // bytes file = 5;
    case kFile: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_file());
      break;
    }
    case PROJECT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UploadProjectRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.texture_studio.UploadProjectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UploadProjectRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UploadProjectRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.texture_studio.UploadProjectRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.texture_studio.UploadProjectRequest)
    MergeFrom(*source);
  }
}

void UploadProjectRequest::MergeFrom(const UploadProjectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.texture_studio.UploadProjectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_name().size() > 0) {

    project_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.project_name_);
  }
  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
  switch (from.project_case()) {
    case kCode: {
      _internal_set_code(from._internal_code());
      break;
    }
    case kFile: {
      _internal_set_file(from._internal_file());
      break;
    }
    case PROJECT_NOT_SET: {
      break;
    }
  }
}

void UploadProjectRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.texture_studio.UploadProjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadProjectRequest::CopyFrom(const UploadProjectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.texture_studio.UploadProjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadProjectRequest::IsInitialized() const {
  return true;
}

void UploadProjectRequest::InternalSwap(UploadProjectRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  project_name_.Swap(&other->project_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(server_id_, other->server_id_);
  swap(project_, other->project_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadProjectRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UploadProjectResponse::InitAsDefaultInstance() {
}
class UploadProjectResponse::_Internal {
 public:
};

UploadProjectResponse::UploadProjectResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.texture_studio.UploadProjectResponse)
}
UploadProjectResponse::UploadProjectResponse(const UploadProjectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.texture_studio.UploadProjectResponse)
}

void UploadProjectResponse::SharedCtor() {
}

UploadProjectResponse::~UploadProjectResponse() {
  // @@protoc_insertion_point(destructor:mruv.texture_studio.UploadProjectResponse)
  SharedDtor();
}

void UploadProjectResponse::SharedDtor() {
}

void UploadProjectResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UploadProjectResponse& UploadProjectResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UploadProjectResponse_texturestudio_2ftexturestudio_5fserver_2eproto.base);
  return *internal_default_instance();
}


void UploadProjectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.texture_studio.UploadProjectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* UploadProjectResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UploadProjectResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.texture_studio.UploadProjectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.texture_studio.UploadProjectResponse)
  return target;
}

size_t UploadProjectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.texture_studio.UploadProjectResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UploadProjectResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.texture_studio.UploadProjectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UploadProjectResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UploadProjectResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.texture_studio.UploadProjectResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.texture_studio.UploadProjectResponse)
    MergeFrom(*source);
  }
}

void UploadProjectResponse::MergeFrom(const UploadProjectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.texture_studio.UploadProjectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UploadProjectResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.texture_studio.UploadProjectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadProjectResponse::CopyFrom(const UploadProjectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.texture_studio.UploadProjectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadProjectResponse::IsInitialized() const {
  return true;
}

void UploadProjectResponse::InternalSwap(UploadProjectResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadProjectResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetProjectRequest::InitAsDefaultInstance() {
}
class GetProjectRequest::_Internal {
 public:
};

GetProjectRequest::GetProjectRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.texture_studio.GetProjectRequest)
}
GetProjectRequest::GetProjectRequest(const GetProjectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  server_id_ = from.server_id_;
  // @@protoc_insertion_point(copy_constructor:mruv.texture_studio.GetProjectRequest)
}

void GetProjectRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetProjectRequest_texturestudio_2ftexturestudio_5fserver_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_id_ = 0u;
}

GetProjectRequest::~GetProjectRequest() {
  // @@protoc_insertion_point(destructor:mruv.texture_studio.GetProjectRequest)
  SharedDtor();
}

void GetProjectRequest::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetProjectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetProjectRequest& GetProjectRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetProjectRequest_texturestudio_2ftexturestudio_5fserver_2eproto.base);
  return *internal_default_instance();
}


void GetProjectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.texture_studio.GetProjectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_id_ = 0u;
  _internal_metadata_.Clear();
}

const char* GetProjectRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.texture_studio.GetProjectRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetProjectRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.texture_studio.GetProjectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 server_id = 1;
  if (this->server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.texture_studio.GetProjectRequest.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.texture_studio.GetProjectRequest)
  return target;
}

size_t GetProjectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.texture_studio.GetProjectRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_server_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetProjectRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.texture_studio.GetProjectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetProjectRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetProjectRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.texture_studio.GetProjectRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.texture_studio.GetProjectRequest)
    MergeFrom(*source);
  }
}

void GetProjectRequest::MergeFrom(const GetProjectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.texture_studio.GetProjectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
}

void GetProjectRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.texture_studio.GetProjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProjectRequest::CopyFrom(const GetProjectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.texture_studio.GetProjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProjectRequest::IsInitialized() const {
  return true;
}

void GetProjectRequest::InternalSwap(GetProjectRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(server_id_, other->server_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProjectRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetProjectResponse::InitAsDefaultInstance() {
}
class GetProjectResponse::_Internal {
 public:
};

GetProjectResponse::GetProjectResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.texture_studio.GetProjectResponse)
}
GetProjectResponse::GetProjectResponse(const GetProjectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  // @@protoc_insertion_point(copy_constructor:mruv.texture_studio.GetProjectResponse)
}

void GetProjectResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetProjectResponse_texturestudio_2ftexturestudio_5fserver_2eproto.base);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetProjectResponse::~GetProjectResponse() {
  // @@protoc_insertion_point(destructor:mruv.texture_studio.GetProjectResponse)
  SharedDtor();
}

void GetProjectResponse::SharedDtor() {
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetProjectResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetProjectResponse& GetProjectResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetProjectResponse_texturestudio_2ftexturestudio_5fserver_2eproto.base);
  return *internal_default_instance();
}


void GetProjectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.texture_studio.GetProjectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetProjectResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.texture_studio.GetProjectResponse.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetProjectResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.texture_studio.GetProjectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.texture_studio.GetProjectResponse.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.texture_studio.GetProjectResponse)
  return target;
}

size_t GetProjectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.texture_studio.GetProjectResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetProjectResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.texture_studio.GetProjectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetProjectResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetProjectResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.texture_studio.GetProjectResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.texture_studio.GetProjectResponse)
    MergeFrom(*source);
  }
}

void GetProjectResponse::MergeFrom(const GetProjectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.texture_studio.GetProjectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
}

void GetProjectResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.texture_studio.GetProjectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProjectResponse::CopyFrom(const GetProjectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.texture_studio.GetProjectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProjectResponse::IsInitialized() const {
  return true;
}

void GetProjectResponse::InternalSwap(GetProjectResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProjectResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetProjectsRequest::InitAsDefaultInstance() {
}
class GetProjectsRequest::_Internal {
 public:
};

GetProjectsRequest::GetProjectsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.texture_studio.GetProjectsRequest)
}
GetProjectsRequest::GetProjectsRequest(const GetProjectsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_id_ = from.server_id_;
  // @@protoc_insertion_point(copy_constructor:mruv.texture_studio.GetProjectsRequest)
}

void GetProjectsRequest::SharedCtor() {
  server_id_ = 0u;
}

GetProjectsRequest::~GetProjectsRequest() {
  // @@protoc_insertion_point(destructor:mruv.texture_studio.GetProjectsRequest)
  SharedDtor();
}

void GetProjectsRequest::SharedDtor() {
}

void GetProjectsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetProjectsRequest& GetProjectsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetProjectsRequest_texturestudio_2ftexturestudio_5fserver_2eproto.base);
  return *internal_default_instance();
}


void GetProjectsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.texture_studio.GetProjectsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_id_ = 0u;
  _internal_metadata_.Clear();
}

const char* GetProjectsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetProjectsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.texture_studio.GetProjectsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 server_id = 1;
  if (this->server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.texture_studio.GetProjectsRequest)
  return target;
}

size_t GetProjectsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.texture_studio.GetProjectsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_server_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetProjectsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.texture_studio.GetProjectsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetProjectsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetProjectsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.texture_studio.GetProjectsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.texture_studio.GetProjectsRequest)
    MergeFrom(*source);
  }
}

void GetProjectsRequest::MergeFrom(const GetProjectsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.texture_studio.GetProjectsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
}

void GetProjectsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.texture_studio.GetProjectsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProjectsRequest::CopyFrom(const GetProjectsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.texture_studio.GetProjectsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProjectsRequest::IsInitialized() const {
  return true;
}

void GetProjectsRequest::InternalSwap(GetProjectsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(server_id_, other->server_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProjectsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetProjectsResponse::InitAsDefaultInstance() {
}
class GetProjectsResponse::_Internal {
 public:
};

GetProjectsResponse::GetProjectsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.texture_studio.GetProjectsResponse)
}
GetProjectsResponse::GetProjectsResponse(const GetProjectsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      names_(from.names_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.texture_studio.GetProjectsResponse)
}

void GetProjectsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetProjectsResponse_texturestudio_2ftexturestudio_5fserver_2eproto.base);
}

GetProjectsResponse::~GetProjectsResponse() {
  // @@protoc_insertion_point(destructor:mruv.texture_studio.GetProjectsResponse)
  SharedDtor();
}

void GetProjectsResponse::SharedDtor() {
}

void GetProjectsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetProjectsResponse& GetProjectsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetProjectsResponse_texturestudio_2ftexturestudio_5fserver_2eproto.base);
  return *internal_default_instance();
}


void GetProjectsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.texture_studio.GetProjectsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  names_.Clear();
  _internal_metadata_.Clear();
}

const char* GetProjectsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string names = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.texture_studio.GetProjectsResponse.names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetProjectsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.texture_studio.GetProjectsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string names = 1;
  for (int i = 0, n = this->_internal_names_size(); i < n; i++) {
    const auto& s = this->_internal_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.texture_studio.GetProjectsResponse.names");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.texture_studio.GetProjectsResponse)
  return target;
}

size_t GetProjectsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.texture_studio.GetProjectsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string names = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(names_.size());
  for (int i = 0, n = names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      names_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetProjectsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.texture_studio.GetProjectsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetProjectsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetProjectsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.texture_studio.GetProjectsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.texture_studio.GetProjectsResponse)
    MergeFrom(*source);
  }
}

void GetProjectsResponse::MergeFrom(const GetProjectsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.texture_studio.GetProjectsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  names_.MergeFrom(from.names_);
}

void GetProjectsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.texture_studio.GetProjectsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProjectsResponse::CopyFrom(const GetProjectsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.texture_studio.GetProjectsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProjectsResponse::IsInitialized() const {
  return true;
}

void GetProjectsResponse::InternalSwap(GetProjectsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  names_.InternalSwap(&other->names_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProjectsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeToProjectsChangesRequest::InitAsDefaultInstance() {
}
class SubscribeToProjectsChangesRequest::_Internal {
 public:
};

SubscribeToProjectsChangesRequest::SubscribeToProjectsChangesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.texture_studio.SubscribeToProjectsChangesRequest)
}
SubscribeToProjectsChangesRequest::SubscribeToProjectsChangesRequest(const SubscribeToProjectsChangesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_id_ = from.server_id_;
  // @@protoc_insertion_point(copy_constructor:mruv.texture_studio.SubscribeToProjectsChangesRequest)
}

void SubscribeToProjectsChangesRequest::SharedCtor() {
  server_id_ = 0u;
}

SubscribeToProjectsChangesRequest::~SubscribeToProjectsChangesRequest() {
  // @@protoc_insertion_point(destructor:mruv.texture_studio.SubscribeToProjectsChangesRequest)
  SharedDtor();
}

void SubscribeToProjectsChangesRequest::SharedDtor() {
}

void SubscribeToProjectsChangesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeToProjectsChangesRequest& SubscribeToProjectsChangesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeToProjectsChangesRequest_texturestudio_2ftexturestudio_5fserver_2eproto.base);
  return *internal_default_instance();
}


void SubscribeToProjectsChangesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.texture_studio.SubscribeToProjectsChangesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_id_ = 0u;
  _internal_metadata_.Clear();
}

const char* SubscribeToProjectsChangesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeToProjectsChangesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.texture_studio.SubscribeToProjectsChangesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 server_id = 1;
  if (this->server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.texture_studio.SubscribeToProjectsChangesRequest)
  return target;
}

size_t SubscribeToProjectsChangesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.texture_studio.SubscribeToProjectsChangesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_server_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeToProjectsChangesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.texture_studio.SubscribeToProjectsChangesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeToProjectsChangesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeToProjectsChangesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.texture_studio.SubscribeToProjectsChangesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.texture_studio.SubscribeToProjectsChangesRequest)
    MergeFrom(*source);
  }
}

void SubscribeToProjectsChangesRequest::MergeFrom(const SubscribeToProjectsChangesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.texture_studio.SubscribeToProjectsChangesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
}

void SubscribeToProjectsChangesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.texture_studio.SubscribeToProjectsChangesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeToProjectsChangesRequest::CopyFrom(const SubscribeToProjectsChangesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.texture_studio.SubscribeToProjectsChangesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeToProjectsChangesRequest::IsInitialized() const {
  return true;
}

void SubscribeToProjectsChangesRequest::InternalSwap(SubscribeToProjectsChangesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(server_id_, other->server_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeToProjectsChangesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeToProjectsChangesResponse::InitAsDefaultInstance() {
}
class SubscribeToProjectsChangesResponse::_Internal {
 public:
};

SubscribeToProjectsChangesResponse::SubscribeToProjectsChangesResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.texture_studio.SubscribeToProjectsChangesResponse)
}
SubscribeToProjectsChangesResponse::SubscribeToProjectsChangesResponse(const SubscribeToProjectsChangesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:mruv.texture_studio.SubscribeToProjectsChangesResponse)
}

void SubscribeToProjectsChangesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscribeToProjectsChangesResponse_texturestudio_2ftexturestudio_5fserver_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SubscribeToProjectsChangesResponse::~SubscribeToProjectsChangesResponse() {
  // @@protoc_insertion_point(destructor:mruv.texture_studio.SubscribeToProjectsChangesResponse)
  SharedDtor();
}

void SubscribeToProjectsChangesResponse::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SubscribeToProjectsChangesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeToProjectsChangesResponse& SubscribeToProjectsChangesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeToProjectsChangesResponse_texturestudio_2ftexturestudio_5fserver_2eproto.base);
  return *internal_default_instance();
}


void SubscribeToProjectsChangesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.texture_studio.SubscribeToProjectsChangesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* SubscribeToProjectsChangesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.texture_studio.SubscribeToProjectsChangesResponse.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeToProjectsChangesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.texture_studio.SubscribeToProjectsChangesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.texture_studio.SubscribeToProjectsChangesResponse.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.texture_studio.SubscribeToProjectsChangesResponse)
  return target;
}

size_t SubscribeToProjectsChangesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.texture_studio.SubscribeToProjectsChangesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeToProjectsChangesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.texture_studio.SubscribeToProjectsChangesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeToProjectsChangesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeToProjectsChangesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.texture_studio.SubscribeToProjectsChangesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.texture_studio.SubscribeToProjectsChangesResponse)
    MergeFrom(*source);
  }
}

void SubscribeToProjectsChangesResponse::MergeFrom(const SubscribeToProjectsChangesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.texture_studio.SubscribeToProjectsChangesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void SubscribeToProjectsChangesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.texture_studio.SubscribeToProjectsChangesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeToProjectsChangesResponse::CopyFrom(const SubscribeToProjectsChangesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.texture_studio.SubscribeToProjectsChangesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeToProjectsChangesResponse::IsInitialized() const {
  return true;
}

void SubscribeToProjectsChangesResponse::InternalSwap(SubscribeToProjectsChangesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeToProjectsChangesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace texture_studio
}  // namespace mruv
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mruv::texture_studio::StartServerRequest* Arena::CreateMaybeMessage< ::mruv::texture_studio::StartServerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::texture_studio::StartServerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::texture_studio::StartServerResponse* Arena::CreateMaybeMessage< ::mruv::texture_studio::StartServerResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::texture_studio::StartServerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::texture_studio::StopServerRequest* Arena::CreateMaybeMessage< ::mruv::texture_studio::StopServerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::texture_studio::StopServerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::texture_studio::StopServerResponse* Arena::CreateMaybeMessage< ::mruv::texture_studio::StopServerResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::texture_studio::StopServerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::texture_studio::RestartServerRequest* Arena::CreateMaybeMessage< ::mruv::texture_studio::RestartServerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::texture_studio::RestartServerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::texture_studio::RestartServerResponse* Arena::CreateMaybeMessage< ::mruv::texture_studio::RestartServerResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::texture_studio::RestartServerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::texture_studio::ServerStatusRequest* Arena::CreateMaybeMessage< ::mruv::texture_studio::ServerStatusRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::texture_studio::ServerStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::texture_studio::ServerStatusResponse* Arena::CreateMaybeMessage< ::mruv::texture_studio::ServerStatusResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::texture_studio::ServerStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::texture_studio::UploadProjectRequest* Arena::CreateMaybeMessage< ::mruv::texture_studio::UploadProjectRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::texture_studio::UploadProjectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::texture_studio::UploadProjectResponse* Arena::CreateMaybeMessage< ::mruv::texture_studio::UploadProjectResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::texture_studio::UploadProjectResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::texture_studio::GetProjectRequest* Arena::CreateMaybeMessage< ::mruv::texture_studio::GetProjectRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::texture_studio::GetProjectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::texture_studio::GetProjectResponse* Arena::CreateMaybeMessage< ::mruv::texture_studio::GetProjectResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::texture_studio::GetProjectResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::texture_studio::GetProjectsRequest* Arena::CreateMaybeMessage< ::mruv::texture_studio::GetProjectsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::texture_studio::GetProjectsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::texture_studio::GetProjectsResponse* Arena::CreateMaybeMessage< ::mruv::texture_studio::GetProjectsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::texture_studio::GetProjectsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::texture_studio::SubscribeToProjectsChangesRequest* Arena::CreateMaybeMessage< ::mruv::texture_studio::SubscribeToProjectsChangesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::texture_studio::SubscribeToProjectsChangesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::texture_studio::SubscribeToProjectsChangesResponse* Arena::CreateMaybeMessage< ::mruv::texture_studio::SubscribeToProjectsChangesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::texture_studio::SubscribeToProjectsChangesResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
