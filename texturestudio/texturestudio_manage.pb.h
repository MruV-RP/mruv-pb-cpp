// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: texturestudio/texturestudio_manage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_texturestudio_2ftexturestudio_5fmanage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_texturestudio_2ftexturestudio_5fmanage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_texturestudio_2ftexturestudio_5fmanage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_texturestudio_2ftexturestudio_5fmanage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_texturestudio_2ftexturestudio_5fmanage_2eproto;
namespace texture_studio {
class CreateServerRequest;
class CreateServerRequestDefaultTypeInternal;
extern CreateServerRequestDefaultTypeInternal _CreateServerRequest_default_instance_;
class CreateServerResponse;
class CreateServerResponseDefaultTypeInternal;
extern CreateServerResponseDefaultTypeInternal _CreateServerResponse_default_instance_;
class DeleteServerRequest;
class DeleteServerRequestDefaultTypeInternal;
extern DeleteServerRequestDefaultTypeInternal _DeleteServerRequest_default_instance_;
class DeleteServerResponse;
class DeleteServerResponseDefaultTypeInternal;
extern DeleteServerResponseDefaultTypeInternal _DeleteServerResponse_default_instance_;
class GetServersRequest;
class GetServersRequestDefaultTypeInternal;
extern GetServersRequestDefaultTypeInternal _GetServersRequest_default_instance_;
class GetServersResponse;
class GetServersResponseDefaultTypeInternal;
extern GetServersResponseDefaultTypeInternal _GetServersResponse_default_instance_;
class MyServerRequest;
class MyServerRequestDefaultTypeInternal;
extern MyServerRequestDefaultTypeInternal _MyServerRequest_default_instance_;
class MyServerResponse;
class MyServerResponseDefaultTypeInternal;
extern MyServerResponseDefaultTypeInternal _MyServerResponse_default_instance_;
class TransferOwnershipRequest;
class TransferOwnershipRequestDefaultTypeInternal;
extern TransferOwnershipRequestDefaultTypeInternal _TransferOwnershipRequest_default_instance_;
class TransferOwnershipResponse;
class TransferOwnershipResponseDefaultTypeInternal;
extern TransferOwnershipResponseDefaultTypeInternal _TransferOwnershipResponse_default_instance_;
}  // namespace texture_studio
PROTOBUF_NAMESPACE_OPEN
template<> ::texture_studio::CreateServerRequest* Arena::CreateMaybeMessage<::texture_studio::CreateServerRequest>(Arena*);
template<> ::texture_studio::CreateServerResponse* Arena::CreateMaybeMessage<::texture_studio::CreateServerResponse>(Arena*);
template<> ::texture_studio::DeleteServerRequest* Arena::CreateMaybeMessage<::texture_studio::DeleteServerRequest>(Arena*);
template<> ::texture_studio::DeleteServerResponse* Arena::CreateMaybeMessage<::texture_studio::DeleteServerResponse>(Arena*);
template<> ::texture_studio::GetServersRequest* Arena::CreateMaybeMessage<::texture_studio::GetServersRequest>(Arena*);
template<> ::texture_studio::GetServersResponse* Arena::CreateMaybeMessage<::texture_studio::GetServersResponse>(Arena*);
template<> ::texture_studio::MyServerRequest* Arena::CreateMaybeMessage<::texture_studio::MyServerRequest>(Arena*);
template<> ::texture_studio::MyServerResponse* Arena::CreateMaybeMessage<::texture_studio::MyServerResponse>(Arena*);
template<> ::texture_studio::TransferOwnershipRequest* Arena::CreateMaybeMessage<::texture_studio::TransferOwnershipRequest>(Arena*);
template<> ::texture_studio::TransferOwnershipResponse* Arena::CreateMaybeMessage<::texture_studio::TransferOwnershipResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace texture_studio {

// ===================================================================

class CreateServerRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:texture_studio.CreateServerRequest) */ {
 public:
  CreateServerRequest();
  virtual ~CreateServerRequest();

  CreateServerRequest(const CreateServerRequest& from);
  CreateServerRequest(CreateServerRequest&& from) noexcept
    : CreateServerRequest() {
    *this = ::std::move(from);
  }

  inline CreateServerRequest& operator=(const CreateServerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateServerRequest& operator=(CreateServerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateServerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateServerRequest* internal_default_instance() {
    return reinterpret_cast<const CreateServerRequest*>(
               &_CreateServerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateServerRequest& a, CreateServerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateServerRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateServerRequest* New() const final {
    return CreateMaybeMessage<CreateServerRequest>(nullptr);
  }

  CreateServerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateServerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateServerRequest& from);
  void MergeFrom(const CreateServerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateServerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "texture_studio.CreateServerRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_texturestudio_2ftexturestudio_5fmanage_2eproto);
    return ::descriptor_table_texturestudio_2ftexturestudio_5fmanage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerIdFieldNumber = 1,
  };
  // uint32 owner_id = 1;
  void clear_owner_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_id() const;
  void set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_owner_id() const;
  void _internal_set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:texture_studio.CreateServerRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_texturestudio_2ftexturestudio_5fmanage_2eproto;
};
// -------------------------------------------------------------------

class CreateServerResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:texture_studio.CreateServerResponse) */ {
 public:
  CreateServerResponse();
  virtual ~CreateServerResponse();

  CreateServerResponse(const CreateServerResponse& from);
  CreateServerResponse(CreateServerResponse&& from) noexcept
    : CreateServerResponse() {
    *this = ::std::move(from);
  }

  inline CreateServerResponse& operator=(const CreateServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateServerResponse& operator=(CreateServerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateServerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateServerResponse* internal_default_instance() {
    return reinterpret_cast<const CreateServerResponse*>(
               &_CreateServerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateServerResponse& a, CreateServerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateServerResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateServerResponse* New() const final {
    return CreateMaybeMessage<CreateServerResponse>(nullptr);
  }

  CreateServerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateServerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateServerResponse& from);
  void MergeFrom(const CreateServerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateServerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "texture_studio.CreateServerResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_texturestudio_2ftexturestudio_5fmanage_2eproto);
    return ::descriptor_table_texturestudio_2ftexturestudio_5fmanage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:texture_studio.CreateServerResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_texturestudio_2ftexturestudio_5fmanage_2eproto;
};
// -------------------------------------------------------------------

class GetServersRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:texture_studio.GetServersRequest) */ {
 public:
  GetServersRequest();
  virtual ~GetServersRequest();

  GetServersRequest(const GetServersRequest& from);
  GetServersRequest(GetServersRequest&& from) noexcept
    : GetServersRequest() {
    *this = ::std::move(from);
  }

  inline GetServersRequest& operator=(const GetServersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServersRequest& operator=(GetServersRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetServersRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetServersRequest* internal_default_instance() {
    return reinterpret_cast<const GetServersRequest*>(
               &_GetServersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetServersRequest& a, GetServersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServersRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServersRequest* New() const final {
    return CreateMaybeMessage<GetServersRequest>(nullptr);
  }

  GetServersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServersRequest& from);
  void MergeFrom(const GetServersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "texture_studio.GetServersRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_texturestudio_2ftexturestudio_5fmanage_2eproto);
    return ::descriptor_table_texturestudio_2ftexturestudio_5fmanage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:texture_studio.GetServersRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_texturestudio_2ftexturestudio_5fmanage_2eproto;
};
// -------------------------------------------------------------------

class GetServersResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:texture_studio.GetServersResponse) */ {
 public:
  GetServersResponse();
  virtual ~GetServersResponse();

  GetServersResponse(const GetServersResponse& from);
  GetServersResponse(GetServersResponse&& from) noexcept
    : GetServersResponse() {
    *this = ::std::move(from);
  }

  inline GetServersResponse& operator=(const GetServersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServersResponse& operator=(GetServersResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetServersResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetServersResponse* internal_default_instance() {
    return reinterpret_cast<const GetServersResponse*>(
               &_GetServersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetServersResponse& a, GetServersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServersResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServersResponse* New() const final {
    return CreateMaybeMessage<GetServersResponse>(nullptr);
  }

  GetServersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServersResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServersResponse& from);
  void MergeFrom(const GetServersResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "texture_studio.GetServersResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_texturestudio_2ftexturestudio_5fmanage_2eproto);
    return ::descriptor_table_texturestudio_2ftexturestudio_5fmanage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // repeated uint32 id = 1;
  int id_size() const;
  private:
  int _internal_id_size() const;
  public:
  void clear_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_id() const;
  void _internal_add_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 id(int index) const;
  void set_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_id();

  // @@protoc_insertion_point(class_scope:texture_studio.GetServersResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > id_;
  mutable std::atomic<int> _id_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_texturestudio_2ftexturestudio_5fmanage_2eproto;
};
// -------------------------------------------------------------------

class MyServerRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:texture_studio.MyServerRequest) */ {
 public:
  MyServerRequest();
  virtual ~MyServerRequest();

  MyServerRequest(const MyServerRequest& from);
  MyServerRequest(MyServerRequest&& from) noexcept
    : MyServerRequest() {
    *this = ::std::move(from);
  }

  inline MyServerRequest& operator=(const MyServerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MyServerRequest& operator=(MyServerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MyServerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MyServerRequest* internal_default_instance() {
    return reinterpret_cast<const MyServerRequest*>(
               &_MyServerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MyServerRequest& a, MyServerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MyServerRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MyServerRequest* New() const final {
    return CreateMaybeMessage<MyServerRequest>(nullptr);
  }

  MyServerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MyServerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MyServerRequest& from);
  void MergeFrom(const MyServerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MyServerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "texture_studio.MyServerRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_texturestudio_2ftexturestudio_5fmanage_2eproto);
    return ::descriptor_table_texturestudio_2ftexturestudio_5fmanage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:texture_studio.MyServerRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_texturestudio_2ftexturestudio_5fmanage_2eproto;
};
// -------------------------------------------------------------------

class MyServerResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:texture_studio.MyServerResponse) */ {
 public:
  MyServerResponse();
  virtual ~MyServerResponse();

  MyServerResponse(const MyServerResponse& from);
  MyServerResponse(MyServerResponse&& from) noexcept
    : MyServerResponse() {
    *this = ::std::move(from);
  }

  inline MyServerResponse& operator=(const MyServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MyServerResponse& operator=(MyServerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MyServerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MyServerResponse* internal_default_instance() {
    return reinterpret_cast<const MyServerResponse*>(
               &_MyServerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MyServerResponse& a, MyServerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MyServerResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MyServerResponse* New() const final {
    return CreateMaybeMessage<MyServerResponse>(nullptr);
  }

  MyServerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MyServerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MyServerResponse& from);
  void MergeFrom(const MyServerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MyServerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "texture_studio.MyServerResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_texturestudio_2ftexturestudio_5fmanage_2eproto);
    return ::descriptor_table_texturestudio_2ftexturestudio_5fmanage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:texture_studio.MyServerResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_texturestudio_2ftexturestudio_5fmanage_2eproto;
};
// -------------------------------------------------------------------

class TransferOwnershipRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:texture_studio.TransferOwnershipRequest) */ {
 public:
  TransferOwnershipRequest();
  virtual ~TransferOwnershipRequest();

  TransferOwnershipRequest(const TransferOwnershipRequest& from);
  TransferOwnershipRequest(TransferOwnershipRequest&& from) noexcept
    : TransferOwnershipRequest() {
    *this = ::std::move(from);
  }

  inline TransferOwnershipRequest& operator=(const TransferOwnershipRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferOwnershipRequest& operator=(TransferOwnershipRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransferOwnershipRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransferOwnershipRequest* internal_default_instance() {
    return reinterpret_cast<const TransferOwnershipRequest*>(
               &_TransferOwnershipRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TransferOwnershipRequest& a, TransferOwnershipRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferOwnershipRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransferOwnershipRequest* New() const final {
    return CreateMaybeMessage<TransferOwnershipRequest>(nullptr);
  }

  TransferOwnershipRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransferOwnershipRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransferOwnershipRequest& from);
  void MergeFrom(const TransferOwnershipRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferOwnershipRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "texture_studio.TransferOwnershipRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_texturestudio_2ftexturestudio_5fmanage_2eproto);
    return ::descriptor_table_texturestudio_2ftexturestudio_5fmanage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 1,
    kOwnerIdFieldNumber = 2,
  };
  // uint32 server_id = 1;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 owner_id = 2;
  void clear_owner_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_id() const;
  void set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_owner_id() const;
  void _internal_set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:texture_studio.TransferOwnershipRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_texturestudio_2ftexturestudio_5fmanage_2eproto;
};
// -------------------------------------------------------------------

class TransferOwnershipResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:texture_studio.TransferOwnershipResponse) */ {
 public:
  TransferOwnershipResponse();
  virtual ~TransferOwnershipResponse();

  TransferOwnershipResponse(const TransferOwnershipResponse& from);
  TransferOwnershipResponse(TransferOwnershipResponse&& from) noexcept
    : TransferOwnershipResponse() {
    *this = ::std::move(from);
  }

  inline TransferOwnershipResponse& operator=(const TransferOwnershipResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferOwnershipResponse& operator=(TransferOwnershipResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransferOwnershipResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransferOwnershipResponse* internal_default_instance() {
    return reinterpret_cast<const TransferOwnershipResponse*>(
               &_TransferOwnershipResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TransferOwnershipResponse& a, TransferOwnershipResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferOwnershipResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransferOwnershipResponse* New() const final {
    return CreateMaybeMessage<TransferOwnershipResponse>(nullptr);
  }

  TransferOwnershipResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransferOwnershipResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransferOwnershipResponse& from);
  void MergeFrom(const TransferOwnershipResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferOwnershipResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "texture_studio.TransferOwnershipResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_texturestudio_2ftexturestudio_5fmanage_2eproto);
    return ::descriptor_table_texturestudio_2ftexturestudio_5fmanage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:texture_studio.TransferOwnershipResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_texturestudio_2ftexturestudio_5fmanage_2eproto;
};
// -------------------------------------------------------------------

class DeleteServerRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:texture_studio.DeleteServerRequest) */ {
 public:
  DeleteServerRequest();
  virtual ~DeleteServerRequest();

  DeleteServerRequest(const DeleteServerRequest& from);
  DeleteServerRequest(DeleteServerRequest&& from) noexcept
    : DeleteServerRequest() {
    *this = ::std::move(from);
  }

  inline DeleteServerRequest& operator=(const DeleteServerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteServerRequest& operator=(DeleteServerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteServerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteServerRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteServerRequest*>(
               &_DeleteServerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DeleteServerRequest& a, DeleteServerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteServerRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteServerRequest* New() const final {
    return CreateMaybeMessage<DeleteServerRequest>(nullptr);
  }

  DeleteServerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteServerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteServerRequest& from);
  void MergeFrom(const DeleteServerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteServerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "texture_studio.DeleteServerRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_texturestudio_2ftexturestudio_5fmanage_2eproto);
    return ::descriptor_table_texturestudio_2ftexturestudio_5fmanage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:texture_studio.DeleteServerRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_texturestudio_2ftexturestudio_5fmanage_2eproto;
};
// -------------------------------------------------------------------

class DeleteServerResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:texture_studio.DeleteServerResponse) */ {
 public:
  DeleteServerResponse();
  virtual ~DeleteServerResponse();

  DeleteServerResponse(const DeleteServerResponse& from);
  DeleteServerResponse(DeleteServerResponse&& from) noexcept
    : DeleteServerResponse() {
    *this = ::std::move(from);
  }

  inline DeleteServerResponse& operator=(const DeleteServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteServerResponse& operator=(DeleteServerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteServerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteServerResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteServerResponse*>(
               &_DeleteServerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DeleteServerResponse& a, DeleteServerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteServerResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteServerResponse* New() const final {
    return CreateMaybeMessage<DeleteServerResponse>(nullptr);
  }

  DeleteServerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteServerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteServerResponse& from);
  void MergeFrom(const DeleteServerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteServerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "texture_studio.DeleteServerResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_texturestudio_2ftexturestudio_5fmanage_2eproto);
    return ::descriptor_table_texturestudio_2ftexturestudio_5fmanage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:texture_studio.DeleteServerResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_texturestudio_2ftexturestudio_5fmanage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateServerRequest

// uint32 owner_id = 1;
inline void CreateServerRequest::clear_owner_id() {
  owner_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateServerRequest::_internal_owner_id() const {
  return owner_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateServerRequest::owner_id() const {
  // @@protoc_insertion_point(field_get:texture_studio.CreateServerRequest.owner_id)
  return _internal_owner_id();
}
inline void CreateServerRequest::_internal_set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  owner_id_ = value;
}
inline void CreateServerRequest::set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_owner_id(value);
  // @@protoc_insertion_point(field_set:texture_studio.CreateServerRequest.owner_id)
}

// -------------------------------------------------------------------

// CreateServerResponse

// uint32 id = 1;
inline void CreateServerResponse::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateServerResponse::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateServerResponse::id() const {
  // @@protoc_insertion_point(field_get:texture_studio.CreateServerResponse.id)
  return _internal_id();
}
inline void CreateServerResponse::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void CreateServerResponse::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:texture_studio.CreateServerResponse.id)
}

// uint32 port = 2;
inline void CreateServerResponse::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateServerResponse::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateServerResponse::port() const {
  // @@protoc_insertion_point(field_get:texture_studio.CreateServerResponse.port)
  return _internal_port();
}
inline void CreateServerResponse::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void CreateServerResponse::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:texture_studio.CreateServerResponse.port)
}

// -------------------------------------------------------------------

// GetServersRequest

// -------------------------------------------------------------------

// GetServersResponse

// repeated uint32 id = 1;
inline int GetServersResponse::_internal_id_size() const {
  return id_.size();
}
inline int GetServersResponse::id_size() const {
  return _internal_id_size();
}
inline void GetServersResponse::clear_id() {
  id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetServersResponse::_internal_id(int index) const {
  return id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetServersResponse::id(int index) const {
  // @@protoc_insertion_point(field_get:texture_studio.GetServersResponse.id)
  return _internal_id(index);
}
inline void GetServersResponse::set_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  id_.Set(index, value);
  // @@protoc_insertion_point(field_set:texture_studio.GetServersResponse.id)
}
inline void GetServersResponse::_internal_add_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  id_.Add(value);
}
inline void GetServersResponse::add_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_id(value);
  // @@protoc_insertion_point(field_add:texture_studio.GetServersResponse.id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
GetServersResponse::_internal_id() const {
  return id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
GetServersResponse::id() const {
  // @@protoc_insertion_point(field_list:texture_studio.GetServersResponse.id)
  return _internal_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
GetServersResponse::_internal_mutable_id() {
  return &id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
GetServersResponse::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:texture_studio.GetServersResponse.id)
  return _internal_mutable_id();
}

// -------------------------------------------------------------------

// MyServerRequest

// -------------------------------------------------------------------

// MyServerResponse

// uint32 id = 1;
inline void MyServerResponse::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MyServerResponse::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MyServerResponse::id() const {
  // @@protoc_insertion_point(field_get:texture_studio.MyServerResponse.id)
  return _internal_id();
}
inline void MyServerResponse::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void MyServerResponse::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:texture_studio.MyServerResponse.id)
}

// -------------------------------------------------------------------

// TransferOwnershipRequest

// uint32 server_id = 1;
inline void TransferOwnershipRequest::clear_server_id() {
  server_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransferOwnershipRequest::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransferOwnershipRequest::server_id() const {
  // @@protoc_insertion_point(field_get:texture_studio.TransferOwnershipRequest.server_id)
  return _internal_server_id();
}
inline void TransferOwnershipRequest::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  server_id_ = value;
}
inline void TransferOwnershipRequest::set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:texture_studio.TransferOwnershipRequest.server_id)
}

// uint32 owner_id = 2;
inline void TransferOwnershipRequest::clear_owner_id() {
  owner_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransferOwnershipRequest::_internal_owner_id() const {
  return owner_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransferOwnershipRequest::owner_id() const {
  // @@protoc_insertion_point(field_get:texture_studio.TransferOwnershipRequest.owner_id)
  return _internal_owner_id();
}
inline void TransferOwnershipRequest::_internal_set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  owner_id_ = value;
}
inline void TransferOwnershipRequest::set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_owner_id(value);
  // @@protoc_insertion_point(field_set:texture_studio.TransferOwnershipRequest.owner_id)
}

// -------------------------------------------------------------------

// TransferOwnershipResponse

// -------------------------------------------------------------------

// DeleteServerRequest

// uint32 id = 1;
inline void DeleteServerRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteServerRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteServerRequest::id() const {
  // @@protoc_insertion_point(field_get:texture_studio.DeleteServerRequest.id)
  return _internal_id();
}
inline void DeleteServerRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void DeleteServerRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:texture_studio.DeleteServerRequest.id)
}

// -------------------------------------------------------------------

// DeleteServerResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace texture_studio

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_texturestudio_2ftexturestudio_5fmanage_2eproto
