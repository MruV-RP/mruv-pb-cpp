// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: texturestudio/texturestudio_server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_texturestudio_2ftexturestudio_5fserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_texturestudio_2ftexturestudio_5fserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_texturestudio_2ftexturestudio_5fserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_texturestudio_2ftexturestudio_5fserver_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_texturestudio_2ftexturestudio_5fserver_2eproto;
namespace texture_studio {
class GetProjectRequest;
class GetProjectRequestDefaultTypeInternal;
extern GetProjectRequestDefaultTypeInternal _GetProjectRequest_default_instance_;
class GetProjectResponse;
class GetProjectResponseDefaultTypeInternal;
extern GetProjectResponseDefaultTypeInternal _GetProjectResponse_default_instance_;
class GetProjectsRequest;
class GetProjectsRequestDefaultTypeInternal;
extern GetProjectsRequestDefaultTypeInternal _GetProjectsRequest_default_instance_;
class GetProjectsResponse;
class GetProjectsResponseDefaultTypeInternal;
extern GetProjectsResponseDefaultTypeInternal _GetProjectsResponse_default_instance_;
class RestartServerRequest;
class RestartServerRequestDefaultTypeInternal;
extern RestartServerRequestDefaultTypeInternal _RestartServerRequest_default_instance_;
class RestartServerResponse;
class RestartServerResponseDefaultTypeInternal;
extern RestartServerResponseDefaultTypeInternal _RestartServerResponse_default_instance_;
class ServerStatusRequest;
class ServerStatusRequestDefaultTypeInternal;
extern ServerStatusRequestDefaultTypeInternal _ServerStatusRequest_default_instance_;
class ServerStatusResponse;
class ServerStatusResponseDefaultTypeInternal;
extern ServerStatusResponseDefaultTypeInternal _ServerStatusResponse_default_instance_;
class StartServerRequest;
class StartServerRequestDefaultTypeInternal;
extern StartServerRequestDefaultTypeInternal _StartServerRequest_default_instance_;
class StartServerResponse;
class StartServerResponseDefaultTypeInternal;
extern StartServerResponseDefaultTypeInternal _StartServerResponse_default_instance_;
class StopServerRequest;
class StopServerRequestDefaultTypeInternal;
extern StopServerRequestDefaultTypeInternal _StopServerRequest_default_instance_;
class StopServerResponse;
class StopServerResponseDefaultTypeInternal;
extern StopServerResponseDefaultTypeInternal _StopServerResponse_default_instance_;
class SubscribeToProjectsChangesRequest;
class SubscribeToProjectsChangesRequestDefaultTypeInternal;
extern SubscribeToProjectsChangesRequestDefaultTypeInternal _SubscribeToProjectsChangesRequest_default_instance_;
class SubscribeToProjectsChangesResponse;
class SubscribeToProjectsChangesResponseDefaultTypeInternal;
extern SubscribeToProjectsChangesResponseDefaultTypeInternal _SubscribeToProjectsChangesResponse_default_instance_;
class UploadProjectRequest;
class UploadProjectRequestDefaultTypeInternal;
extern UploadProjectRequestDefaultTypeInternal _UploadProjectRequest_default_instance_;
class UploadProjectResponse;
class UploadProjectResponseDefaultTypeInternal;
extern UploadProjectResponseDefaultTypeInternal _UploadProjectResponse_default_instance_;
}  // namespace texture_studio
PROTOBUF_NAMESPACE_OPEN
template<> ::texture_studio::GetProjectRequest* Arena::CreateMaybeMessage<::texture_studio::GetProjectRequest>(Arena*);
template<> ::texture_studio::GetProjectResponse* Arena::CreateMaybeMessage<::texture_studio::GetProjectResponse>(Arena*);
template<> ::texture_studio::GetProjectsRequest* Arena::CreateMaybeMessage<::texture_studio::GetProjectsRequest>(Arena*);
template<> ::texture_studio::GetProjectsResponse* Arena::CreateMaybeMessage<::texture_studio::GetProjectsResponse>(Arena*);
template<> ::texture_studio::RestartServerRequest* Arena::CreateMaybeMessage<::texture_studio::RestartServerRequest>(Arena*);
template<> ::texture_studio::RestartServerResponse* Arena::CreateMaybeMessage<::texture_studio::RestartServerResponse>(Arena*);
template<> ::texture_studio::ServerStatusRequest* Arena::CreateMaybeMessage<::texture_studio::ServerStatusRequest>(Arena*);
template<> ::texture_studio::ServerStatusResponse* Arena::CreateMaybeMessage<::texture_studio::ServerStatusResponse>(Arena*);
template<> ::texture_studio::StartServerRequest* Arena::CreateMaybeMessage<::texture_studio::StartServerRequest>(Arena*);
template<> ::texture_studio::StartServerResponse* Arena::CreateMaybeMessage<::texture_studio::StartServerResponse>(Arena*);
template<> ::texture_studio::StopServerRequest* Arena::CreateMaybeMessage<::texture_studio::StopServerRequest>(Arena*);
template<> ::texture_studio::StopServerResponse* Arena::CreateMaybeMessage<::texture_studio::StopServerResponse>(Arena*);
template<> ::texture_studio::SubscribeToProjectsChangesRequest* Arena::CreateMaybeMessage<::texture_studio::SubscribeToProjectsChangesRequest>(Arena*);
template<> ::texture_studio::SubscribeToProjectsChangesResponse* Arena::CreateMaybeMessage<::texture_studio::SubscribeToProjectsChangesResponse>(Arena*);
template<> ::texture_studio::UploadProjectRequest* Arena::CreateMaybeMessage<::texture_studio::UploadProjectRequest>(Arena*);
template<> ::texture_studio::UploadProjectResponse* Arena::CreateMaybeMessage<::texture_studio::UploadProjectResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace texture_studio {

enum ServerStatus : int {
  UNKNOWN_STATUS = 0,
  ON = 1,
  OFF = 2,
  ServerStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ServerStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ServerStatus_IsValid(int value);
constexpr ServerStatus ServerStatus_MIN = UNKNOWN_STATUS;
constexpr ServerStatus ServerStatus_MAX = OFF;
constexpr int ServerStatus_ARRAYSIZE = ServerStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerStatus_descriptor();
template<typename T>
inline const std::string& ServerStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServerStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServerStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServerStatus_descriptor(), enum_t_value);
}
inline bool ServerStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServerStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServerStatus>(
    ServerStatus_descriptor(), name, value);
}
// ===================================================================

class StartServerRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:texture_studio.StartServerRequest) */ {
 public:
  inline StartServerRequest() : StartServerRequest(nullptr) {}
  virtual ~StartServerRequest();

  StartServerRequest(const StartServerRequest& from);
  StartServerRequest(StartServerRequest&& from) noexcept
    : StartServerRequest() {
    *this = ::std::move(from);
  }

  inline StartServerRequest& operator=(const StartServerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartServerRequest& operator=(StartServerRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartServerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartServerRequest* internal_default_instance() {
    return reinterpret_cast<const StartServerRequest*>(
               &_StartServerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StartServerRequest& a, StartServerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartServerRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartServerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartServerRequest* New() const final {
    return CreateMaybeMessage<StartServerRequest>(nullptr);
  }

  StartServerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartServerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartServerRequest& from);
  void MergeFrom(const StartServerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartServerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "texture_studio.StartServerRequest";
  }
  protected:
  explicit StartServerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_texturestudio_2ftexturestudio_5fserver_2eproto);
    return ::descriptor_table_texturestudio_2ftexturestudio_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:texture_studio.StartServerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_texturestudio_2ftexturestudio_5fserver_2eproto;
};
// -------------------------------------------------------------------

class StartServerResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:texture_studio.StartServerResponse) */ {
 public:
  inline StartServerResponse() : StartServerResponse(nullptr) {}
  virtual ~StartServerResponse();

  StartServerResponse(const StartServerResponse& from);
  StartServerResponse(StartServerResponse&& from) noexcept
    : StartServerResponse() {
    *this = ::std::move(from);
  }

  inline StartServerResponse& operator=(const StartServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartServerResponse& operator=(StartServerResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartServerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartServerResponse* internal_default_instance() {
    return reinterpret_cast<const StartServerResponse*>(
               &_StartServerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StartServerResponse& a, StartServerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartServerResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartServerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartServerResponse* New() const final {
    return CreateMaybeMessage<StartServerResponse>(nullptr);
  }

  StartServerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartServerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartServerResponse& from);
  void MergeFrom(const StartServerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartServerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "texture_studio.StartServerResponse";
  }
  protected:
  explicit StartServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_texturestudio_2ftexturestudio_5fserver_2eproto);
    return ::descriptor_table_texturestudio_2ftexturestudio_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:texture_studio.StartServerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_texturestudio_2ftexturestudio_5fserver_2eproto;
};
// -------------------------------------------------------------------

class StopServerRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:texture_studio.StopServerRequest) */ {
 public:
  inline StopServerRequest() : StopServerRequest(nullptr) {}
  virtual ~StopServerRequest();

  StopServerRequest(const StopServerRequest& from);
  StopServerRequest(StopServerRequest&& from) noexcept
    : StopServerRequest() {
    *this = ::std::move(from);
  }

  inline StopServerRequest& operator=(const StopServerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopServerRequest& operator=(StopServerRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopServerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopServerRequest* internal_default_instance() {
    return reinterpret_cast<const StopServerRequest*>(
               &_StopServerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StopServerRequest& a, StopServerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopServerRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopServerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopServerRequest* New() const final {
    return CreateMaybeMessage<StopServerRequest>(nullptr);
  }

  StopServerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopServerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopServerRequest& from);
  void MergeFrom(const StopServerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopServerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "texture_studio.StopServerRequest";
  }
  protected:
  explicit StopServerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_texturestudio_2ftexturestudio_5fserver_2eproto);
    return ::descriptor_table_texturestudio_2ftexturestudio_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:texture_studio.StopServerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_texturestudio_2ftexturestudio_5fserver_2eproto;
};
// -------------------------------------------------------------------

class StopServerResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:texture_studio.StopServerResponse) */ {
 public:
  inline StopServerResponse() : StopServerResponse(nullptr) {}
  virtual ~StopServerResponse();

  StopServerResponse(const StopServerResponse& from);
  StopServerResponse(StopServerResponse&& from) noexcept
    : StopServerResponse() {
    *this = ::std::move(from);
  }

  inline StopServerResponse& operator=(const StopServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopServerResponse& operator=(StopServerResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopServerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopServerResponse* internal_default_instance() {
    return reinterpret_cast<const StopServerResponse*>(
               &_StopServerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StopServerResponse& a, StopServerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StopServerResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopServerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopServerResponse* New() const final {
    return CreateMaybeMessage<StopServerResponse>(nullptr);
  }

  StopServerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopServerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopServerResponse& from);
  void MergeFrom(const StopServerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopServerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "texture_studio.StopServerResponse";
  }
  protected:
  explicit StopServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_texturestudio_2ftexturestudio_5fserver_2eproto);
    return ::descriptor_table_texturestudio_2ftexturestudio_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:texture_studio.StopServerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_texturestudio_2ftexturestudio_5fserver_2eproto;
};
// -------------------------------------------------------------------

class RestartServerRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:texture_studio.RestartServerRequest) */ {
 public:
  inline RestartServerRequest() : RestartServerRequest(nullptr) {}
  virtual ~RestartServerRequest();

  RestartServerRequest(const RestartServerRequest& from);
  RestartServerRequest(RestartServerRequest&& from) noexcept
    : RestartServerRequest() {
    *this = ::std::move(from);
  }

  inline RestartServerRequest& operator=(const RestartServerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RestartServerRequest& operator=(RestartServerRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RestartServerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RestartServerRequest* internal_default_instance() {
    return reinterpret_cast<const RestartServerRequest*>(
               &_RestartServerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RestartServerRequest& a, RestartServerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RestartServerRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RestartServerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RestartServerRequest* New() const final {
    return CreateMaybeMessage<RestartServerRequest>(nullptr);
  }

  RestartServerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RestartServerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RestartServerRequest& from);
  void MergeFrom(const RestartServerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RestartServerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "texture_studio.RestartServerRequest";
  }
  protected:
  explicit RestartServerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_texturestudio_2ftexturestudio_5fserver_2eproto);
    return ::descriptor_table_texturestudio_2ftexturestudio_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:texture_studio.RestartServerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_texturestudio_2ftexturestudio_5fserver_2eproto;
};
// -------------------------------------------------------------------

class RestartServerResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:texture_studio.RestartServerResponse) */ {
 public:
  inline RestartServerResponse() : RestartServerResponse(nullptr) {}
  virtual ~RestartServerResponse();

  RestartServerResponse(const RestartServerResponse& from);
  RestartServerResponse(RestartServerResponse&& from) noexcept
    : RestartServerResponse() {
    *this = ::std::move(from);
  }

  inline RestartServerResponse& operator=(const RestartServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RestartServerResponse& operator=(RestartServerResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RestartServerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RestartServerResponse* internal_default_instance() {
    return reinterpret_cast<const RestartServerResponse*>(
               &_RestartServerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RestartServerResponse& a, RestartServerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RestartServerResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RestartServerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RestartServerResponse* New() const final {
    return CreateMaybeMessage<RestartServerResponse>(nullptr);
  }

  RestartServerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RestartServerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RestartServerResponse& from);
  void MergeFrom(const RestartServerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RestartServerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "texture_studio.RestartServerResponse";
  }
  protected:
  explicit RestartServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_texturestudio_2ftexturestudio_5fserver_2eproto);
    return ::descriptor_table_texturestudio_2ftexturestudio_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:texture_studio.RestartServerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_texturestudio_2ftexturestudio_5fserver_2eproto;
};
// -------------------------------------------------------------------

class ServerStatusRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:texture_studio.ServerStatusRequest) */ {
 public:
  inline ServerStatusRequest() : ServerStatusRequest(nullptr) {}
  virtual ~ServerStatusRequest();

  ServerStatusRequest(const ServerStatusRequest& from);
  ServerStatusRequest(ServerStatusRequest&& from) noexcept
    : ServerStatusRequest() {
    *this = ::std::move(from);
  }

  inline ServerStatusRequest& operator=(const ServerStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerStatusRequest& operator=(ServerStatusRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerStatusRequest* internal_default_instance() {
    return reinterpret_cast<const ServerStatusRequest*>(
               &_ServerStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ServerStatusRequest& a, ServerStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerStatusRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerStatusRequest* New() const final {
    return CreateMaybeMessage<ServerStatusRequest>(nullptr);
  }

  ServerStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerStatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerStatusRequest& from);
  void MergeFrom(const ServerStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "texture_studio.ServerStatusRequest";
  }
  protected:
  explicit ServerStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_texturestudio_2ftexturestudio_5fserver_2eproto);
    return ::descriptor_table_texturestudio_2ftexturestudio_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:texture_studio.ServerStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_texturestudio_2ftexturestudio_5fserver_2eproto;
};
// -------------------------------------------------------------------

class ServerStatusResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:texture_studio.ServerStatusResponse) */ {
 public:
  inline ServerStatusResponse() : ServerStatusResponse(nullptr) {}
  virtual ~ServerStatusResponse();

  ServerStatusResponse(const ServerStatusResponse& from);
  ServerStatusResponse(ServerStatusResponse&& from) noexcept
    : ServerStatusResponse() {
    *this = ::std::move(from);
  }

  inline ServerStatusResponse& operator=(const ServerStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerStatusResponse& operator=(ServerStatusResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerStatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerStatusResponse* internal_default_instance() {
    return reinterpret_cast<const ServerStatusResponse*>(
               &_ServerStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ServerStatusResponse& a, ServerStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerStatusResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerStatusResponse* New() const final {
    return CreateMaybeMessage<ServerStatusResponse>(nullptr);
  }

  ServerStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerStatusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerStatusResponse& from);
  void MergeFrom(const ServerStatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerStatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "texture_studio.ServerStatusResponse";
  }
  protected:
  explicit ServerStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_texturestudio_2ftexturestudio_5fserver_2eproto);
    return ::descriptor_table_texturestudio_2ftexturestudio_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // uint32 port = 1;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .texture_studio.ServerStatus status = 2;
  void clear_status();
  ::texture_studio::ServerStatus status() const;
  void set_status(::texture_studio::ServerStatus value);
  private:
  ::texture_studio::ServerStatus _internal_status() const;
  void _internal_set_status(::texture_studio::ServerStatus value);
  public:

  // @@protoc_insertion_point(class_scope:texture_studio.ServerStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_texturestudio_2ftexturestudio_5fserver_2eproto;
};
// -------------------------------------------------------------------

class UploadProjectRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:texture_studio.UploadProjectRequest) */ {
 public:
  inline UploadProjectRequest() : UploadProjectRequest(nullptr) {}
  virtual ~UploadProjectRequest();

  UploadProjectRequest(const UploadProjectRequest& from);
  UploadProjectRequest(UploadProjectRequest&& from) noexcept
    : UploadProjectRequest() {
    *this = ::std::move(from);
  }

  inline UploadProjectRequest& operator=(const UploadProjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadProjectRequest& operator=(UploadProjectRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UploadProjectRequest& default_instance();

  enum ProjectCase {
    kCode = 4,
    kFile = 5,
    PROJECT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UploadProjectRequest* internal_default_instance() {
    return reinterpret_cast<const UploadProjectRequest*>(
               &_UploadProjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UploadProjectRequest& a, UploadProjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadProjectRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadProjectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadProjectRequest* New() const final {
    return CreateMaybeMessage<UploadProjectRequest>(nullptr);
  }

  UploadProjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadProjectRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UploadProjectRequest& from);
  void MergeFrom(const UploadProjectRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadProjectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "texture_studio.UploadProjectRequest";
  }
  protected:
  explicit UploadProjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_texturestudio_2ftexturestudio_5fserver_2eproto);
    return ::descriptor_table_texturestudio_2ftexturestudio_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectNameFieldNumber = 2,
    kServerIdFieldNumber = 1,
    kCodeFieldNumber = 4,
    kFileFieldNumber = 5,
  };
  // string project_name = 2;
  void clear_project_name();
  const std::string& project_name() const;
  void set_project_name(const std::string& value);
  void set_project_name(std::string&& value);
  void set_project_name(const char* value);
  void set_project_name(const char* value, size_t size);
  std::string* mutable_project_name();
  std::string* release_project_name();
  void set_allocated_project_name(std::string* project_name);
  private:
  const std::string& _internal_project_name() const;
  void _internal_set_project_name(const std::string& value);
  std::string* _internal_mutable_project_name();
  public:

  // uint32 server_id = 1;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // string code = 4;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // bytes file = 5;
  private:
  bool _internal_has_file() const;
  public:
  void clear_file();
  const std::string& file() const;
  void set_file(const std::string& value);
  void set_file(std::string&& value);
  void set_file(const char* value);
  void set_file(const void* value, size_t size);
  std::string* mutable_file();
  std::string* release_file();
  void set_allocated_file(std::string* file);
  private:
  const std::string& _internal_file() const;
  void _internal_set_file(const std::string& value);
  std::string* _internal_mutable_file();
  public:

  void clear_project();
  ProjectCase project_case() const;
  // @@protoc_insertion_point(class_scope:texture_studio.UploadProjectRequest)
 private:
  class _Internal;
  void set_has_code();
  void set_has_file();

  inline bool has_project() const;
  inline void clear_has_project();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_id_;
  union ProjectUnion {
    ProjectUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_;
  } project_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_texturestudio_2ftexturestudio_5fserver_2eproto;
};
// -------------------------------------------------------------------

class UploadProjectResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:texture_studio.UploadProjectResponse) */ {
 public:
  inline UploadProjectResponse() : UploadProjectResponse(nullptr) {}
  virtual ~UploadProjectResponse();

  UploadProjectResponse(const UploadProjectResponse& from);
  UploadProjectResponse(UploadProjectResponse&& from) noexcept
    : UploadProjectResponse() {
    *this = ::std::move(from);
  }

  inline UploadProjectResponse& operator=(const UploadProjectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadProjectResponse& operator=(UploadProjectResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UploadProjectResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UploadProjectResponse* internal_default_instance() {
    return reinterpret_cast<const UploadProjectResponse*>(
               &_UploadProjectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(UploadProjectResponse& a, UploadProjectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadProjectResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadProjectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadProjectResponse* New() const final {
    return CreateMaybeMessage<UploadProjectResponse>(nullptr);
  }

  UploadProjectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadProjectResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UploadProjectResponse& from);
  void MergeFrom(const UploadProjectResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadProjectResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "texture_studio.UploadProjectResponse";
  }
  protected:
  explicit UploadProjectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_texturestudio_2ftexturestudio_5fserver_2eproto);
    return ::descriptor_table_texturestudio_2ftexturestudio_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:texture_studio.UploadProjectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_texturestudio_2ftexturestudio_5fserver_2eproto;
};
// -------------------------------------------------------------------

class GetProjectRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:texture_studio.GetProjectRequest) */ {
 public:
  inline GetProjectRequest() : GetProjectRequest(nullptr) {}
  virtual ~GetProjectRequest();

  GetProjectRequest(const GetProjectRequest& from);
  GetProjectRequest(GetProjectRequest&& from) noexcept
    : GetProjectRequest() {
    *this = ::std::move(from);
  }

  inline GetProjectRequest& operator=(const GetProjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProjectRequest& operator=(GetProjectRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetProjectRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetProjectRequest* internal_default_instance() {
    return reinterpret_cast<const GetProjectRequest*>(
               &_GetProjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetProjectRequest& a, GetProjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetProjectRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProjectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetProjectRequest* New() const final {
    return CreateMaybeMessage<GetProjectRequest>(nullptr);
  }

  GetProjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetProjectRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetProjectRequest& from);
  void MergeFrom(const GetProjectRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetProjectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "texture_studio.GetProjectRequest";
  }
  protected:
  explicit GetProjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_texturestudio_2ftexturestudio_5fserver_2eproto);
    return ::descriptor_table_texturestudio_2ftexturestudio_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kServerIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 server_id = 1;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:texture_studio.GetProjectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_texturestudio_2ftexturestudio_5fserver_2eproto;
};
// -------------------------------------------------------------------

class GetProjectResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:texture_studio.GetProjectResponse) */ {
 public:
  inline GetProjectResponse() : GetProjectResponse(nullptr) {}
  virtual ~GetProjectResponse();

  GetProjectResponse(const GetProjectResponse& from);
  GetProjectResponse(GetProjectResponse&& from) noexcept
    : GetProjectResponse() {
    *this = ::std::move(from);
  }

  inline GetProjectResponse& operator=(const GetProjectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProjectResponse& operator=(GetProjectResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetProjectResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetProjectResponse* internal_default_instance() {
    return reinterpret_cast<const GetProjectResponse*>(
               &_GetProjectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetProjectResponse& a, GetProjectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetProjectResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProjectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetProjectResponse* New() const final {
    return CreateMaybeMessage<GetProjectResponse>(nullptr);
  }

  GetProjectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetProjectResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetProjectResponse& from);
  void MergeFrom(const GetProjectResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetProjectResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "texture_studio.GetProjectResponse";
  }
  protected:
  explicit GetProjectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_texturestudio_2ftexturestudio_5fserver_2eproto);
    return ::descriptor_table_texturestudio_2ftexturestudio_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
  };
  // string code = 1;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // @@protoc_insertion_point(class_scope:texture_studio.GetProjectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_texturestudio_2ftexturestudio_5fserver_2eproto;
};
// -------------------------------------------------------------------

class GetProjectsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:texture_studio.GetProjectsRequest) */ {
 public:
  inline GetProjectsRequest() : GetProjectsRequest(nullptr) {}
  virtual ~GetProjectsRequest();

  GetProjectsRequest(const GetProjectsRequest& from);
  GetProjectsRequest(GetProjectsRequest&& from) noexcept
    : GetProjectsRequest() {
    *this = ::std::move(from);
  }

  inline GetProjectsRequest& operator=(const GetProjectsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProjectsRequest& operator=(GetProjectsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetProjectsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetProjectsRequest* internal_default_instance() {
    return reinterpret_cast<const GetProjectsRequest*>(
               &_GetProjectsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetProjectsRequest& a, GetProjectsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetProjectsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProjectsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetProjectsRequest* New() const final {
    return CreateMaybeMessage<GetProjectsRequest>(nullptr);
  }

  GetProjectsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetProjectsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetProjectsRequest& from);
  void MergeFrom(const GetProjectsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetProjectsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "texture_studio.GetProjectsRequest";
  }
  protected:
  explicit GetProjectsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_texturestudio_2ftexturestudio_5fserver_2eproto);
    return ::descriptor_table_texturestudio_2ftexturestudio_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 1,
  };
  // uint32 server_id = 1;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:texture_studio.GetProjectsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_texturestudio_2ftexturestudio_5fserver_2eproto;
};
// -------------------------------------------------------------------

class GetProjectsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:texture_studio.GetProjectsResponse) */ {
 public:
  inline GetProjectsResponse() : GetProjectsResponse(nullptr) {}
  virtual ~GetProjectsResponse();

  GetProjectsResponse(const GetProjectsResponse& from);
  GetProjectsResponse(GetProjectsResponse&& from) noexcept
    : GetProjectsResponse() {
    *this = ::std::move(from);
  }

  inline GetProjectsResponse& operator=(const GetProjectsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProjectsResponse& operator=(GetProjectsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetProjectsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetProjectsResponse* internal_default_instance() {
    return reinterpret_cast<const GetProjectsResponse*>(
               &_GetProjectsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetProjectsResponse& a, GetProjectsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetProjectsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProjectsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetProjectsResponse* New() const final {
    return CreateMaybeMessage<GetProjectsResponse>(nullptr);
  }

  GetProjectsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetProjectsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetProjectsResponse& from);
  void MergeFrom(const GetProjectsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetProjectsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "texture_studio.GetProjectsResponse";
  }
  protected:
  explicit GetProjectsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_texturestudio_2ftexturestudio_5fserver_2eproto);
    return ::descriptor_table_texturestudio_2ftexturestudio_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamesFieldNumber = 1,
  };
  // repeated string names = 1;
  int names_size() const;
  private:
  int _internal_names_size() const;
  public:
  void clear_names();
  const std::string& names(int index) const;
  std::string* mutable_names(int index);
  void set_names(int index, const std::string& value);
  void set_names(int index, std::string&& value);
  void set_names(int index, const char* value);
  void set_names(int index, const char* value, size_t size);
  std::string* add_names();
  void add_names(const std::string& value);
  void add_names(std::string&& value);
  void add_names(const char* value);
  void add_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_names();
  private:
  const std::string& _internal_names(int index) const;
  std::string* _internal_add_names();
  public:

  // @@protoc_insertion_point(class_scope:texture_studio.GetProjectsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> names_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_texturestudio_2ftexturestudio_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SubscribeToProjectsChangesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:texture_studio.SubscribeToProjectsChangesRequest) */ {
 public:
  inline SubscribeToProjectsChangesRequest() : SubscribeToProjectsChangesRequest(nullptr) {}
  virtual ~SubscribeToProjectsChangesRequest();

  SubscribeToProjectsChangesRequest(const SubscribeToProjectsChangesRequest& from);
  SubscribeToProjectsChangesRequest(SubscribeToProjectsChangesRequest&& from) noexcept
    : SubscribeToProjectsChangesRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeToProjectsChangesRequest& operator=(const SubscribeToProjectsChangesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeToProjectsChangesRequest& operator=(SubscribeToProjectsChangesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeToProjectsChangesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeToProjectsChangesRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeToProjectsChangesRequest*>(
               &_SubscribeToProjectsChangesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SubscribeToProjectsChangesRequest& a, SubscribeToProjectsChangesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeToProjectsChangesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeToProjectsChangesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeToProjectsChangesRequest* New() const final {
    return CreateMaybeMessage<SubscribeToProjectsChangesRequest>(nullptr);
  }

  SubscribeToProjectsChangesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeToProjectsChangesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeToProjectsChangesRequest& from);
  void MergeFrom(const SubscribeToProjectsChangesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeToProjectsChangesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "texture_studio.SubscribeToProjectsChangesRequest";
  }
  protected:
  explicit SubscribeToProjectsChangesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_texturestudio_2ftexturestudio_5fserver_2eproto);
    return ::descriptor_table_texturestudio_2ftexturestudio_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 1,
  };
  // uint32 server_id = 1;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:texture_studio.SubscribeToProjectsChangesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_texturestudio_2ftexturestudio_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SubscribeToProjectsChangesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:texture_studio.SubscribeToProjectsChangesResponse) */ {
 public:
  inline SubscribeToProjectsChangesResponse() : SubscribeToProjectsChangesResponse(nullptr) {}
  virtual ~SubscribeToProjectsChangesResponse();

  SubscribeToProjectsChangesResponse(const SubscribeToProjectsChangesResponse& from);
  SubscribeToProjectsChangesResponse(SubscribeToProjectsChangesResponse&& from) noexcept
    : SubscribeToProjectsChangesResponse() {
    *this = ::std::move(from);
  }

  inline SubscribeToProjectsChangesResponse& operator=(const SubscribeToProjectsChangesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeToProjectsChangesResponse& operator=(SubscribeToProjectsChangesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeToProjectsChangesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeToProjectsChangesResponse* internal_default_instance() {
    return reinterpret_cast<const SubscribeToProjectsChangesResponse*>(
               &_SubscribeToProjectsChangesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SubscribeToProjectsChangesResponse& a, SubscribeToProjectsChangesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeToProjectsChangesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeToProjectsChangesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeToProjectsChangesResponse* New() const final {
    return CreateMaybeMessage<SubscribeToProjectsChangesResponse>(nullptr);
  }

  SubscribeToProjectsChangesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeToProjectsChangesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeToProjectsChangesResponse& from);
  void MergeFrom(const SubscribeToProjectsChangesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeToProjectsChangesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "texture_studio.SubscribeToProjectsChangesResponse";
  }
  protected:
  explicit SubscribeToProjectsChangesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_texturestudio_2ftexturestudio_5fserver_2eproto);
    return ::descriptor_table_texturestudio_2ftexturestudio_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:texture_studio.SubscribeToProjectsChangesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_texturestudio_2ftexturestudio_5fserver_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StartServerRequest

// uint32 id = 1;
inline void StartServerRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StartServerRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StartServerRequest::id() const {
  // @@protoc_insertion_point(field_get:texture_studio.StartServerRequest.id)
  return _internal_id();
}
inline void StartServerRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void StartServerRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:texture_studio.StartServerRequest.id)
}

// -------------------------------------------------------------------

// StartServerResponse

// -------------------------------------------------------------------

// StopServerRequest

// uint32 id = 1;
inline void StopServerRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StopServerRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StopServerRequest::id() const {
  // @@protoc_insertion_point(field_get:texture_studio.StopServerRequest.id)
  return _internal_id();
}
inline void StopServerRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void StopServerRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:texture_studio.StopServerRequest.id)
}

// -------------------------------------------------------------------

// StopServerResponse

// -------------------------------------------------------------------

// RestartServerRequest

// uint32 id = 1;
inline void RestartServerRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RestartServerRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RestartServerRequest::id() const {
  // @@protoc_insertion_point(field_get:texture_studio.RestartServerRequest.id)
  return _internal_id();
}
inline void RestartServerRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void RestartServerRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:texture_studio.RestartServerRequest.id)
}

// -------------------------------------------------------------------

// RestartServerResponse

// -------------------------------------------------------------------

// ServerStatusRequest

// uint32 id = 1;
inline void ServerStatusRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerStatusRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerStatusRequest::id() const {
  // @@protoc_insertion_point(field_get:texture_studio.ServerStatusRequest.id)
  return _internal_id();
}
inline void ServerStatusRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void ServerStatusRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:texture_studio.ServerStatusRequest.id)
}

// -------------------------------------------------------------------

// ServerStatusResponse

// uint32 port = 1;
inline void ServerStatusResponse::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerStatusResponse::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerStatusResponse::port() const {
  // @@protoc_insertion_point(field_get:texture_studio.ServerStatusResponse.port)
  return _internal_port();
}
inline void ServerStatusResponse::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void ServerStatusResponse::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:texture_studio.ServerStatusResponse.port)
}

// .texture_studio.ServerStatus status = 2;
inline void ServerStatusResponse::clear_status() {
  status_ = 0;
}
inline ::texture_studio::ServerStatus ServerStatusResponse::_internal_status() const {
  return static_cast< ::texture_studio::ServerStatus >(status_);
}
inline ::texture_studio::ServerStatus ServerStatusResponse::status() const {
  // @@protoc_insertion_point(field_get:texture_studio.ServerStatusResponse.status)
  return _internal_status();
}
inline void ServerStatusResponse::_internal_set_status(::texture_studio::ServerStatus value) {
  
  status_ = value;
}
inline void ServerStatusResponse::set_status(::texture_studio::ServerStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:texture_studio.ServerStatusResponse.status)
}

// -------------------------------------------------------------------

// UploadProjectRequest

// uint32 server_id = 1;
inline void UploadProjectRequest::clear_server_id() {
  server_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UploadProjectRequest::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UploadProjectRequest::server_id() const {
  // @@protoc_insertion_point(field_get:texture_studio.UploadProjectRequest.server_id)
  return _internal_server_id();
}
inline void UploadProjectRequest::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  server_id_ = value;
}
inline void UploadProjectRequest::set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:texture_studio.UploadProjectRequest.server_id)
}

// string project_name = 2;
inline void UploadProjectRequest::clear_project_name() {
  project_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UploadProjectRequest::project_name() const {
  // @@protoc_insertion_point(field_get:texture_studio.UploadProjectRequest.project_name)
  return _internal_project_name();
}
inline void UploadProjectRequest::set_project_name(const std::string& value) {
  _internal_set_project_name(value);
  // @@protoc_insertion_point(field_set:texture_studio.UploadProjectRequest.project_name)
}
inline std::string* UploadProjectRequest::mutable_project_name() {
  // @@protoc_insertion_point(field_mutable:texture_studio.UploadProjectRequest.project_name)
  return _internal_mutable_project_name();
}
inline const std::string& UploadProjectRequest::_internal_project_name() const {
  return project_name_.Get();
}
inline void UploadProjectRequest::_internal_set_project_name(const std::string& value) {
  
  project_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UploadProjectRequest::set_project_name(std::string&& value) {
  
  project_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:texture_studio.UploadProjectRequest.project_name)
}
inline void UploadProjectRequest::set_project_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:texture_studio.UploadProjectRequest.project_name)
}
inline void UploadProjectRequest::set_project_name(const char* value,
    size_t size) {
  
  project_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:texture_studio.UploadProjectRequest.project_name)
}
inline std::string* UploadProjectRequest::_internal_mutable_project_name() {
  
  return project_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UploadProjectRequest::release_project_name() {
  // @@protoc_insertion_point(field_release:texture_studio.UploadProjectRequest.project_name)
  return project_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UploadProjectRequest::set_allocated_project_name(std::string* project_name) {
  if (project_name != nullptr) {
    
  } else {
    
  }
  project_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), project_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:texture_studio.UploadProjectRequest.project_name)
}

// string code = 4;
inline bool UploadProjectRequest::_internal_has_code() const {
  return project_case() == kCode;
}
inline void UploadProjectRequest::set_has_code() {
  _oneof_case_[0] = kCode;
}
inline void UploadProjectRequest::clear_code() {
  if (_internal_has_code()) {
    project_.code_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_project();
  }
}
inline const std::string& UploadProjectRequest::code() const {
  // @@protoc_insertion_point(field_get:texture_studio.UploadProjectRequest.code)
  return _internal_code();
}
inline void UploadProjectRequest::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:texture_studio.UploadProjectRequest.code)
}
inline std::string* UploadProjectRequest::mutable_code() {
  // @@protoc_insertion_point(field_mutable:texture_studio.UploadProjectRequest.code)
  return _internal_mutable_code();
}
inline const std::string& UploadProjectRequest::_internal_code() const {
  if (_internal_has_code()) {
    return project_.code_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void UploadProjectRequest::_internal_set_code(const std::string& value) {
  if (!_internal_has_code()) {
    clear_project();
    set_has_code();
    project_.code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  project_.code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UploadProjectRequest::set_code(std::string&& value) {
  // @@protoc_insertion_point(field_set:texture_studio.UploadProjectRequest.code)
  if (!_internal_has_code()) {
    clear_project();
    set_has_code();
    project_.code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  project_.code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:texture_studio.UploadProjectRequest.code)
}
inline void UploadProjectRequest::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_code()) {
    clear_project();
    set_has_code();
    project_.code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  project_.code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:texture_studio.UploadProjectRequest.code)
}
inline void UploadProjectRequest::set_code(const char* value,
                             size_t size) {
  if (!_internal_has_code()) {
    clear_project();
    set_has_code();
    project_.code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  project_.code_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:texture_studio.UploadProjectRequest.code)
}
inline std::string* UploadProjectRequest::_internal_mutable_code() {
  if (!_internal_has_code()) {
    clear_project();
    set_has_code();
    project_.code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return project_.code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UploadProjectRequest::release_code() {
  // @@protoc_insertion_point(field_release:texture_studio.UploadProjectRequest.code)
  if (_internal_has_code()) {
    clear_has_project();
    return project_.code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void UploadProjectRequest::set_allocated_code(std::string* code) {
  if (has_project()) {
    clear_project();
  }
  if (code != nullptr) {
    set_has_code();
    project_.code_.UnsafeSetDefault(code);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(code);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:texture_studio.UploadProjectRequest.code)
}

// bytes file = 5;
inline bool UploadProjectRequest::_internal_has_file() const {
  return project_case() == kFile;
}
inline void UploadProjectRequest::set_has_file() {
  _oneof_case_[0] = kFile;
}
inline void UploadProjectRequest::clear_file() {
  if (_internal_has_file()) {
    project_.file_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_project();
  }
}
inline const std::string& UploadProjectRequest::file() const {
  // @@protoc_insertion_point(field_get:texture_studio.UploadProjectRequest.file)
  return _internal_file();
}
inline void UploadProjectRequest::set_file(const std::string& value) {
  _internal_set_file(value);
  // @@protoc_insertion_point(field_set:texture_studio.UploadProjectRequest.file)
}
inline std::string* UploadProjectRequest::mutable_file() {
  // @@protoc_insertion_point(field_mutable:texture_studio.UploadProjectRequest.file)
  return _internal_mutable_file();
}
inline const std::string& UploadProjectRequest::_internal_file() const {
  if (_internal_has_file()) {
    return project_.file_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void UploadProjectRequest::_internal_set_file(const std::string& value) {
  if (!_internal_has_file()) {
    clear_project();
    set_has_file();
    project_.file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  project_.file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UploadProjectRequest::set_file(std::string&& value) {
  // @@protoc_insertion_point(field_set:texture_studio.UploadProjectRequest.file)
  if (!_internal_has_file()) {
    clear_project();
    set_has_file();
    project_.file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  project_.file_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:texture_studio.UploadProjectRequest.file)
}
inline void UploadProjectRequest::set_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_file()) {
    clear_project();
    set_has_file();
    project_.file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  project_.file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:texture_studio.UploadProjectRequest.file)
}
inline void UploadProjectRequest::set_file(const void* value,
                             size_t size) {
  if (!_internal_has_file()) {
    clear_project();
    set_has_file();
    project_.file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  project_.file_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:texture_studio.UploadProjectRequest.file)
}
inline std::string* UploadProjectRequest::_internal_mutable_file() {
  if (!_internal_has_file()) {
    clear_project();
    set_has_file();
    project_.file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return project_.file_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UploadProjectRequest::release_file() {
  // @@protoc_insertion_point(field_release:texture_studio.UploadProjectRequest.file)
  if (_internal_has_file()) {
    clear_has_project();
    return project_.file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void UploadProjectRequest::set_allocated_file(std::string* file) {
  if (has_project()) {
    clear_project();
  }
  if (file != nullptr) {
    set_has_file();
    project_.file_.UnsafeSetDefault(file);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(file);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:texture_studio.UploadProjectRequest.file)
}

inline bool UploadProjectRequest::has_project() const {
  return project_case() != PROJECT_NOT_SET;
}
inline void UploadProjectRequest::clear_has_project() {
  _oneof_case_[0] = PROJECT_NOT_SET;
}
inline UploadProjectRequest::ProjectCase UploadProjectRequest::project_case() const {
  return UploadProjectRequest::ProjectCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// UploadProjectResponse

// -------------------------------------------------------------------

// GetProjectRequest

// uint32 server_id = 1;
inline void GetProjectRequest::clear_server_id() {
  server_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetProjectRequest::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetProjectRequest::server_id() const {
  // @@protoc_insertion_point(field_get:texture_studio.GetProjectRequest.server_id)
  return _internal_server_id();
}
inline void GetProjectRequest::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  server_id_ = value;
}
inline void GetProjectRequest::set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:texture_studio.GetProjectRequest.server_id)
}

// string name = 2;
inline void GetProjectRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetProjectRequest::name() const {
  // @@protoc_insertion_point(field_get:texture_studio.GetProjectRequest.name)
  return _internal_name();
}
inline void GetProjectRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:texture_studio.GetProjectRequest.name)
}
inline std::string* GetProjectRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:texture_studio.GetProjectRequest.name)
  return _internal_mutable_name();
}
inline const std::string& GetProjectRequest::_internal_name() const {
  return name_.Get();
}
inline void GetProjectRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetProjectRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:texture_studio.GetProjectRequest.name)
}
inline void GetProjectRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:texture_studio.GetProjectRequest.name)
}
inline void GetProjectRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:texture_studio.GetProjectRequest.name)
}
inline std::string* GetProjectRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetProjectRequest::release_name() {
  // @@protoc_insertion_point(field_release:texture_studio.GetProjectRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetProjectRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:texture_studio.GetProjectRequest.name)
}

// -------------------------------------------------------------------

// GetProjectResponse

// string code = 1;
inline void GetProjectResponse::clear_code() {
  code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetProjectResponse::code() const {
  // @@protoc_insertion_point(field_get:texture_studio.GetProjectResponse.code)
  return _internal_code();
}
inline void GetProjectResponse::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:texture_studio.GetProjectResponse.code)
}
inline std::string* GetProjectResponse::mutable_code() {
  // @@protoc_insertion_point(field_mutable:texture_studio.GetProjectResponse.code)
  return _internal_mutable_code();
}
inline const std::string& GetProjectResponse::_internal_code() const {
  return code_.Get();
}
inline void GetProjectResponse::_internal_set_code(const std::string& value) {
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetProjectResponse::set_code(std::string&& value) {
  
  code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:texture_studio.GetProjectResponse.code)
}
inline void GetProjectResponse::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:texture_studio.GetProjectResponse.code)
}
inline void GetProjectResponse::set_code(const char* value,
    size_t size) {
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:texture_studio.GetProjectResponse.code)
}
inline std::string* GetProjectResponse::_internal_mutable_code() {
  
  return code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetProjectResponse::release_code() {
  // @@protoc_insertion_point(field_release:texture_studio.GetProjectResponse.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetProjectResponse::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:texture_studio.GetProjectResponse.code)
}

// -------------------------------------------------------------------

// GetProjectsRequest

// uint32 server_id = 1;
inline void GetProjectsRequest::clear_server_id() {
  server_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetProjectsRequest::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetProjectsRequest::server_id() const {
  // @@protoc_insertion_point(field_get:texture_studio.GetProjectsRequest.server_id)
  return _internal_server_id();
}
inline void GetProjectsRequest::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  server_id_ = value;
}
inline void GetProjectsRequest::set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:texture_studio.GetProjectsRequest.server_id)
}

// -------------------------------------------------------------------

// GetProjectsResponse

// repeated string names = 1;
inline int GetProjectsResponse::_internal_names_size() const {
  return names_.size();
}
inline int GetProjectsResponse::names_size() const {
  return _internal_names_size();
}
inline void GetProjectsResponse::clear_names() {
  names_.Clear();
}
inline std::string* GetProjectsResponse::add_names() {
  // @@protoc_insertion_point(field_add_mutable:texture_studio.GetProjectsResponse.names)
  return _internal_add_names();
}
inline const std::string& GetProjectsResponse::_internal_names(int index) const {
  return names_.Get(index);
}
inline const std::string& GetProjectsResponse::names(int index) const {
  // @@protoc_insertion_point(field_get:texture_studio.GetProjectsResponse.names)
  return _internal_names(index);
}
inline std::string* GetProjectsResponse::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:texture_studio.GetProjectsResponse.names)
  return names_.Mutable(index);
}
inline void GetProjectsResponse::set_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:texture_studio.GetProjectsResponse.names)
  names_.Mutable(index)->assign(value);
}
inline void GetProjectsResponse::set_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:texture_studio.GetProjectsResponse.names)
  names_.Mutable(index)->assign(std::move(value));
}
inline void GetProjectsResponse::set_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:texture_studio.GetProjectsResponse.names)
}
inline void GetProjectsResponse::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:texture_studio.GetProjectsResponse.names)
}
inline std::string* GetProjectsResponse::_internal_add_names() {
  return names_.Add();
}
inline void GetProjectsResponse::add_names(const std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:texture_studio.GetProjectsResponse.names)
}
inline void GetProjectsResponse::add_names(std::string&& value) {
  names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:texture_studio.GetProjectsResponse.names)
}
inline void GetProjectsResponse::add_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:texture_studio.GetProjectsResponse.names)
}
inline void GetProjectsResponse::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:texture_studio.GetProjectsResponse.names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetProjectsResponse::names() const {
  // @@protoc_insertion_point(field_list:texture_studio.GetProjectsResponse.names)
  return names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetProjectsResponse::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:texture_studio.GetProjectsResponse.names)
  return &names_;
}

// -------------------------------------------------------------------

// SubscribeToProjectsChangesRequest

// uint32 server_id = 1;
inline void SubscribeToProjectsChangesRequest::clear_server_id() {
  server_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubscribeToProjectsChangesRequest::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubscribeToProjectsChangesRequest::server_id() const {
  // @@protoc_insertion_point(field_get:texture_studio.SubscribeToProjectsChangesRequest.server_id)
  return _internal_server_id();
}
inline void SubscribeToProjectsChangesRequest::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  server_id_ = value;
}
inline void SubscribeToProjectsChangesRequest::set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:texture_studio.SubscribeToProjectsChangesRequest.server_id)
}

// -------------------------------------------------------------------

// SubscribeToProjectsChangesResponse

// string name = 1;
inline void SubscribeToProjectsChangesResponse::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubscribeToProjectsChangesResponse::name() const {
  // @@protoc_insertion_point(field_get:texture_studio.SubscribeToProjectsChangesResponse.name)
  return _internal_name();
}
inline void SubscribeToProjectsChangesResponse::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:texture_studio.SubscribeToProjectsChangesResponse.name)
}
inline std::string* SubscribeToProjectsChangesResponse::mutable_name() {
  // @@protoc_insertion_point(field_mutable:texture_studio.SubscribeToProjectsChangesResponse.name)
  return _internal_mutable_name();
}
inline const std::string& SubscribeToProjectsChangesResponse::_internal_name() const {
  return name_.Get();
}
inline void SubscribeToProjectsChangesResponse::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubscribeToProjectsChangesResponse::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:texture_studio.SubscribeToProjectsChangesResponse.name)
}
inline void SubscribeToProjectsChangesResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:texture_studio.SubscribeToProjectsChangesResponse.name)
}
inline void SubscribeToProjectsChangesResponse::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:texture_studio.SubscribeToProjectsChangesResponse.name)
}
inline std::string* SubscribeToProjectsChangesResponse::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubscribeToProjectsChangesResponse::release_name() {
  // @@protoc_insertion_point(field_release:texture_studio.SubscribeToProjectsChangesResponse.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubscribeToProjectsChangesResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:texture_studio.SubscribeToProjectsChangesResponse.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace texture_studio

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::texture_studio::ServerStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::texture_studio::ServerStatus>() {
  return ::texture_studio::ServerStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_texturestudio_2ftexturestudio_5fserver_2eproto
