// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: texturestudio/manage.proto

#include "texturestudio/manage.pb.h"
#include "texturestudio/manage.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace texture_studio {

static const char* TextureStudioManagerService_method_names[] = {
  "/texture_studio.TextureStudioManagerService/CreateServer",
  "/texture_studio.TextureStudioManagerService/GetServers",
  "/texture_studio.TextureStudioManagerService/MyServer",
  "/texture_studio.TextureStudioManagerService/TransferOwnership",
  "/texture_studio.TextureStudioManagerService/DeleteServer",
};

std::unique_ptr< TextureStudioManagerService::Stub> TextureStudioManagerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TextureStudioManagerService::Stub> stub(new TextureStudioManagerService::Stub(channel));
  return stub;
}

TextureStudioManagerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateServer_(TextureStudioManagerService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetServers_(TextureStudioManagerService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MyServer_(TextureStudioManagerService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TransferOwnership_(TextureStudioManagerService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteServer_(TextureStudioManagerService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status TextureStudioManagerService::Stub::CreateServer(::grpc::ClientContext* context, const ::texture_studio::CreateServerRequest& request, ::texture_studio::CreateServerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateServer_, context, request, response);
}

void TextureStudioManagerService::Stub::experimental_async::CreateServer(::grpc::ClientContext* context, const ::texture_studio::CreateServerRequest* request, ::texture_studio::CreateServerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateServer_, context, request, response, std::move(f));
}

void TextureStudioManagerService::Stub::experimental_async::CreateServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::CreateServerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateServer_, context, request, response, std::move(f));
}

void TextureStudioManagerService::Stub::experimental_async::CreateServer(::grpc::ClientContext* context, const ::texture_studio::CreateServerRequest* request, ::texture_studio::CreateServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateServer_, context, request, response, reactor);
}

void TextureStudioManagerService::Stub::experimental_async::CreateServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::CreateServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateServer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::texture_studio::CreateServerResponse>* TextureStudioManagerService::Stub::AsyncCreateServerRaw(::grpc::ClientContext* context, const ::texture_studio::CreateServerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::texture_studio::CreateServerResponse>::Create(channel_.get(), cq, rpcmethod_CreateServer_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::texture_studio::CreateServerResponse>* TextureStudioManagerService::Stub::PrepareAsyncCreateServerRaw(::grpc::ClientContext* context, const ::texture_studio::CreateServerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::texture_studio::CreateServerResponse>::Create(channel_.get(), cq, rpcmethod_CreateServer_, context, request, false);
}

::grpc::Status TextureStudioManagerService::Stub::GetServers(::grpc::ClientContext* context, const ::texture_studio::GetServersRequest& request, ::texture_studio::GetServersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetServers_, context, request, response);
}

void TextureStudioManagerService::Stub::experimental_async::GetServers(::grpc::ClientContext* context, const ::texture_studio::GetServersRequest* request, ::texture_studio::GetServersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetServers_, context, request, response, std::move(f));
}

void TextureStudioManagerService::Stub::experimental_async::GetServers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::GetServersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetServers_, context, request, response, std::move(f));
}

void TextureStudioManagerService::Stub::experimental_async::GetServers(::grpc::ClientContext* context, const ::texture_studio::GetServersRequest* request, ::texture_studio::GetServersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetServers_, context, request, response, reactor);
}

void TextureStudioManagerService::Stub::experimental_async::GetServers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::GetServersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetServers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::texture_studio::GetServersResponse>* TextureStudioManagerService::Stub::AsyncGetServersRaw(::grpc::ClientContext* context, const ::texture_studio::GetServersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::texture_studio::GetServersResponse>::Create(channel_.get(), cq, rpcmethod_GetServers_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::texture_studio::GetServersResponse>* TextureStudioManagerService::Stub::PrepareAsyncGetServersRaw(::grpc::ClientContext* context, const ::texture_studio::GetServersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::texture_studio::GetServersResponse>::Create(channel_.get(), cq, rpcmethod_GetServers_, context, request, false);
}

::grpc::Status TextureStudioManagerService::Stub::MyServer(::grpc::ClientContext* context, const ::texture_studio::MyServerRequest& request, ::texture_studio::MyServerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MyServer_, context, request, response);
}

void TextureStudioManagerService::Stub::experimental_async::MyServer(::grpc::ClientContext* context, const ::texture_studio::MyServerRequest* request, ::texture_studio::MyServerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MyServer_, context, request, response, std::move(f));
}

void TextureStudioManagerService::Stub::experimental_async::MyServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::MyServerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MyServer_, context, request, response, std::move(f));
}

void TextureStudioManagerService::Stub::experimental_async::MyServer(::grpc::ClientContext* context, const ::texture_studio::MyServerRequest* request, ::texture_studio::MyServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MyServer_, context, request, response, reactor);
}

void TextureStudioManagerService::Stub::experimental_async::MyServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::MyServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MyServer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::texture_studio::MyServerResponse>* TextureStudioManagerService::Stub::AsyncMyServerRaw(::grpc::ClientContext* context, const ::texture_studio::MyServerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::texture_studio::MyServerResponse>::Create(channel_.get(), cq, rpcmethod_MyServer_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::texture_studio::MyServerResponse>* TextureStudioManagerService::Stub::PrepareAsyncMyServerRaw(::grpc::ClientContext* context, const ::texture_studio::MyServerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::texture_studio::MyServerResponse>::Create(channel_.get(), cq, rpcmethod_MyServer_, context, request, false);
}

::grpc::Status TextureStudioManagerService::Stub::TransferOwnership(::grpc::ClientContext* context, const ::texture_studio::TransferOwnershipRequest& request, ::texture_studio::TransferOwnershipResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_TransferOwnership_, context, request, response);
}

void TextureStudioManagerService::Stub::experimental_async::TransferOwnership(::grpc::ClientContext* context, const ::texture_studio::TransferOwnershipRequest* request, ::texture_studio::TransferOwnershipResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_TransferOwnership_, context, request, response, std::move(f));
}

void TextureStudioManagerService::Stub::experimental_async::TransferOwnership(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::TransferOwnershipResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_TransferOwnership_, context, request, response, std::move(f));
}

void TextureStudioManagerService::Stub::experimental_async::TransferOwnership(::grpc::ClientContext* context, const ::texture_studio::TransferOwnershipRequest* request, ::texture_studio::TransferOwnershipResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_TransferOwnership_, context, request, response, reactor);
}

void TextureStudioManagerService::Stub::experimental_async::TransferOwnership(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::TransferOwnershipResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_TransferOwnership_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::texture_studio::TransferOwnershipResponse>* TextureStudioManagerService::Stub::AsyncTransferOwnershipRaw(::grpc::ClientContext* context, const ::texture_studio::TransferOwnershipRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::texture_studio::TransferOwnershipResponse>::Create(channel_.get(), cq, rpcmethod_TransferOwnership_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::texture_studio::TransferOwnershipResponse>* TextureStudioManagerService::Stub::PrepareAsyncTransferOwnershipRaw(::grpc::ClientContext* context, const ::texture_studio::TransferOwnershipRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::texture_studio::TransferOwnershipResponse>::Create(channel_.get(), cq, rpcmethod_TransferOwnership_, context, request, false);
}

::grpc::Status TextureStudioManagerService::Stub::DeleteServer(::grpc::ClientContext* context, const ::texture_studio::DeleteServerRequest& request, ::texture_studio::DeleteServerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteServer_, context, request, response);
}

void TextureStudioManagerService::Stub::experimental_async::DeleteServer(::grpc::ClientContext* context, const ::texture_studio::DeleteServerRequest* request, ::texture_studio::DeleteServerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteServer_, context, request, response, std::move(f));
}

void TextureStudioManagerService::Stub::experimental_async::DeleteServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::DeleteServerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteServer_, context, request, response, std::move(f));
}

void TextureStudioManagerService::Stub::experimental_async::DeleteServer(::grpc::ClientContext* context, const ::texture_studio::DeleteServerRequest* request, ::texture_studio::DeleteServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteServer_, context, request, response, reactor);
}

void TextureStudioManagerService::Stub::experimental_async::DeleteServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::DeleteServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteServer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::texture_studio::DeleteServerResponse>* TextureStudioManagerService::Stub::AsyncDeleteServerRaw(::grpc::ClientContext* context, const ::texture_studio::DeleteServerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::texture_studio::DeleteServerResponse>::Create(channel_.get(), cq, rpcmethod_DeleteServer_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::texture_studio::DeleteServerResponse>* TextureStudioManagerService::Stub::PrepareAsyncDeleteServerRaw(::grpc::ClientContext* context, const ::texture_studio::DeleteServerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::texture_studio::DeleteServerResponse>::Create(channel_.get(), cq, rpcmethod_DeleteServer_, context, request, false);
}

TextureStudioManagerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TextureStudioManagerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TextureStudioManagerService::Service, ::texture_studio::CreateServerRequest, ::texture_studio::CreateServerResponse>(
          std::mem_fn(&TextureStudioManagerService::Service::CreateServer), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TextureStudioManagerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TextureStudioManagerService::Service, ::texture_studio::GetServersRequest, ::texture_studio::GetServersResponse>(
          std::mem_fn(&TextureStudioManagerService::Service::GetServers), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TextureStudioManagerService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TextureStudioManagerService::Service, ::texture_studio::MyServerRequest, ::texture_studio::MyServerResponse>(
          std::mem_fn(&TextureStudioManagerService::Service::MyServer), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TextureStudioManagerService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TextureStudioManagerService::Service, ::texture_studio::TransferOwnershipRequest, ::texture_studio::TransferOwnershipResponse>(
          std::mem_fn(&TextureStudioManagerService::Service::TransferOwnership), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TextureStudioManagerService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TextureStudioManagerService::Service, ::texture_studio::DeleteServerRequest, ::texture_studio::DeleteServerResponse>(
          std::mem_fn(&TextureStudioManagerService::Service::DeleteServer), this)));
}

TextureStudioManagerService::Service::~Service() {
}

::grpc::Status TextureStudioManagerService::Service::CreateServer(::grpc::ServerContext* context, const ::texture_studio::CreateServerRequest* request, ::texture_studio::CreateServerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TextureStudioManagerService::Service::GetServers(::grpc::ServerContext* context, const ::texture_studio::GetServersRequest* request, ::texture_studio::GetServersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TextureStudioManagerService::Service::MyServer(::grpc::ServerContext* context, const ::texture_studio::MyServerRequest* request, ::texture_studio::MyServerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TextureStudioManagerService::Service::TransferOwnership(::grpc::ServerContext* context, const ::texture_studio::TransferOwnershipRequest* request, ::texture_studio::TransferOwnershipResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TextureStudioManagerService::Service::DeleteServer(::grpc::ServerContext* context, const ::texture_studio::DeleteServerRequest* request, ::texture_studio::DeleteServerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace texture_studio

