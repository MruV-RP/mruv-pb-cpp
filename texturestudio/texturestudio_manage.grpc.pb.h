// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: texturestudio/texturestudio_manage.proto
#ifndef GRPC_texturestudio_2ftexturestudio_5fmanage_2eproto__INCLUDED
#define GRPC_texturestudio_2ftexturestudio_5fmanage_2eproto__INCLUDED

#include "texturestudio/texturestudio_manage.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace texture_studio {

// Service to manage texture studio servers cluster.
class TextureStudioManagerService final {
 public:
  static constexpr char const* service_full_name() {
    return "texture_studio.TextureStudioManagerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Create a new texture studio server.
    virtual ::grpc::Status CreateServer(::grpc::ClientContext* context, const ::texture_studio::CreateServerRequest& request, ::texture_studio::CreateServerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::CreateServerResponse>> AsyncCreateServer(::grpc::ClientContext* context, const ::texture_studio::CreateServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::CreateServerResponse>>(AsyncCreateServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::CreateServerResponse>> PrepareAsyncCreateServer(::grpc::ClientContext* context, const ::texture_studio::CreateServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::CreateServerResponse>>(PrepareAsyncCreateServerRaw(context, request, cq));
    }
    // Get all existing servers
    virtual ::grpc::Status GetServers(::grpc::ClientContext* context, const ::texture_studio::GetServersRequest& request, ::texture_studio::GetServersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::GetServersResponse>> AsyncGetServers(::grpc::ClientContext* context, const ::texture_studio::GetServersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::GetServersResponse>>(AsyncGetServersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::GetServersResponse>> PrepareAsyncGetServers(::grpc::ClientContext* context, const ::texture_studio::GetServersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::GetServersResponse>>(PrepareAsyncGetServersRaw(context, request, cq));
    }
    // Get texture studio server id for current user.
    virtual ::grpc::Status MyServer(::grpc::ClientContext* context, const ::texture_studio::MyServerRequest& request, ::texture_studio::MyServerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::MyServerResponse>> AsyncMyServer(::grpc::ClientContext* context, const ::texture_studio::MyServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::MyServerResponse>>(AsyncMyServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::MyServerResponse>> PrepareAsyncMyServer(::grpc::ClientContext* context, const ::texture_studio::MyServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::MyServerResponse>>(PrepareAsyncMyServerRaw(context, request, cq));
    }
    // Change owner of texture studio server.
    virtual ::grpc::Status TransferOwnership(::grpc::ClientContext* context, const ::texture_studio::TransferOwnershipRequest& request, ::texture_studio::TransferOwnershipResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::TransferOwnershipResponse>> AsyncTransferOwnership(::grpc::ClientContext* context, const ::texture_studio::TransferOwnershipRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::TransferOwnershipResponse>>(AsyncTransferOwnershipRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::TransferOwnershipResponse>> PrepareAsyncTransferOwnership(::grpc::ClientContext* context, const ::texture_studio::TransferOwnershipRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::TransferOwnershipResponse>>(PrepareAsyncTransferOwnershipRaw(context, request, cq));
    }
    // Delete a texture studio server.
    virtual ::grpc::Status DeleteServer(::grpc::ClientContext* context, const ::texture_studio::DeleteServerRequest& request, ::texture_studio::DeleteServerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::DeleteServerResponse>> AsyncDeleteServer(::grpc::ClientContext* context, const ::texture_studio::DeleteServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::DeleteServerResponse>>(AsyncDeleteServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::DeleteServerResponse>> PrepareAsyncDeleteServer(::grpc::ClientContext* context, const ::texture_studio::DeleteServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::DeleteServerResponse>>(PrepareAsyncDeleteServerRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Create a new texture studio server.
      virtual void CreateServer(::grpc::ClientContext* context, const ::texture_studio::CreateServerRequest* request, ::texture_studio::CreateServerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::CreateServerResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateServer(::grpc::ClientContext* context, const ::texture_studio::CreateServerRequest* request, ::texture_studio::CreateServerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateServer(::grpc::ClientContext* context, const ::texture_studio::CreateServerRequest* request, ::texture_studio::CreateServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::CreateServerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::CreateServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get all existing servers
      virtual void GetServers(::grpc::ClientContext* context, const ::texture_studio::GetServersRequest* request, ::texture_studio::GetServersResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetServers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::GetServersResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetServers(::grpc::ClientContext* context, const ::texture_studio::GetServersRequest* request, ::texture_studio::GetServersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetServers(::grpc::ClientContext* context, const ::texture_studio::GetServersRequest* request, ::texture_studio::GetServersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetServers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::GetServersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetServers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::GetServersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get texture studio server id for current user.
      virtual void MyServer(::grpc::ClientContext* context, const ::texture_studio::MyServerRequest* request, ::texture_studio::MyServerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MyServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::MyServerResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void MyServer(::grpc::ClientContext* context, const ::texture_studio::MyServerRequest* request, ::texture_studio::MyServerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void MyServer(::grpc::ClientContext* context, const ::texture_studio::MyServerRequest* request, ::texture_studio::MyServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void MyServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::MyServerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void MyServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::MyServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Change owner of texture studio server.
      virtual void TransferOwnership(::grpc::ClientContext* context, const ::texture_studio::TransferOwnershipRequest* request, ::texture_studio::TransferOwnershipResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TransferOwnership(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::TransferOwnershipResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void TransferOwnership(::grpc::ClientContext* context, const ::texture_studio::TransferOwnershipRequest* request, ::texture_studio::TransferOwnershipResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void TransferOwnership(::grpc::ClientContext* context, const ::texture_studio::TransferOwnershipRequest* request, ::texture_studio::TransferOwnershipResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void TransferOwnership(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::TransferOwnershipResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void TransferOwnership(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::TransferOwnershipResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Delete a texture studio server.
      virtual void DeleteServer(::grpc::ClientContext* context, const ::texture_studio::DeleteServerRequest* request, ::texture_studio::DeleteServerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::DeleteServerResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteServer(::grpc::ClientContext* context, const ::texture_studio::DeleteServerRequest* request, ::texture_studio::DeleteServerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteServer(::grpc::ClientContext* context, const ::texture_studio::DeleteServerRequest* request, ::texture_studio::DeleteServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::DeleteServerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::DeleteServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::CreateServerResponse>* AsyncCreateServerRaw(::grpc::ClientContext* context, const ::texture_studio::CreateServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::CreateServerResponse>* PrepareAsyncCreateServerRaw(::grpc::ClientContext* context, const ::texture_studio::CreateServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::GetServersResponse>* AsyncGetServersRaw(::grpc::ClientContext* context, const ::texture_studio::GetServersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::GetServersResponse>* PrepareAsyncGetServersRaw(::grpc::ClientContext* context, const ::texture_studio::GetServersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::MyServerResponse>* AsyncMyServerRaw(::grpc::ClientContext* context, const ::texture_studio::MyServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::MyServerResponse>* PrepareAsyncMyServerRaw(::grpc::ClientContext* context, const ::texture_studio::MyServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::TransferOwnershipResponse>* AsyncTransferOwnershipRaw(::grpc::ClientContext* context, const ::texture_studio::TransferOwnershipRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::TransferOwnershipResponse>* PrepareAsyncTransferOwnershipRaw(::grpc::ClientContext* context, const ::texture_studio::TransferOwnershipRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::DeleteServerResponse>* AsyncDeleteServerRaw(::grpc::ClientContext* context, const ::texture_studio::DeleteServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::texture_studio::DeleteServerResponse>* PrepareAsyncDeleteServerRaw(::grpc::ClientContext* context, const ::texture_studio::DeleteServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateServer(::grpc::ClientContext* context, const ::texture_studio::CreateServerRequest& request, ::texture_studio::CreateServerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::CreateServerResponse>> AsyncCreateServer(::grpc::ClientContext* context, const ::texture_studio::CreateServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::CreateServerResponse>>(AsyncCreateServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::CreateServerResponse>> PrepareAsyncCreateServer(::grpc::ClientContext* context, const ::texture_studio::CreateServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::CreateServerResponse>>(PrepareAsyncCreateServerRaw(context, request, cq));
    }
    ::grpc::Status GetServers(::grpc::ClientContext* context, const ::texture_studio::GetServersRequest& request, ::texture_studio::GetServersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::GetServersResponse>> AsyncGetServers(::grpc::ClientContext* context, const ::texture_studio::GetServersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::GetServersResponse>>(AsyncGetServersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::GetServersResponse>> PrepareAsyncGetServers(::grpc::ClientContext* context, const ::texture_studio::GetServersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::GetServersResponse>>(PrepareAsyncGetServersRaw(context, request, cq));
    }
    ::grpc::Status MyServer(::grpc::ClientContext* context, const ::texture_studio::MyServerRequest& request, ::texture_studio::MyServerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::MyServerResponse>> AsyncMyServer(::grpc::ClientContext* context, const ::texture_studio::MyServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::MyServerResponse>>(AsyncMyServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::MyServerResponse>> PrepareAsyncMyServer(::grpc::ClientContext* context, const ::texture_studio::MyServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::MyServerResponse>>(PrepareAsyncMyServerRaw(context, request, cq));
    }
    ::grpc::Status TransferOwnership(::grpc::ClientContext* context, const ::texture_studio::TransferOwnershipRequest& request, ::texture_studio::TransferOwnershipResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::TransferOwnershipResponse>> AsyncTransferOwnership(::grpc::ClientContext* context, const ::texture_studio::TransferOwnershipRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::TransferOwnershipResponse>>(AsyncTransferOwnershipRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::TransferOwnershipResponse>> PrepareAsyncTransferOwnership(::grpc::ClientContext* context, const ::texture_studio::TransferOwnershipRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::TransferOwnershipResponse>>(PrepareAsyncTransferOwnershipRaw(context, request, cq));
    }
    ::grpc::Status DeleteServer(::grpc::ClientContext* context, const ::texture_studio::DeleteServerRequest& request, ::texture_studio::DeleteServerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::DeleteServerResponse>> AsyncDeleteServer(::grpc::ClientContext* context, const ::texture_studio::DeleteServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::DeleteServerResponse>>(AsyncDeleteServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::DeleteServerResponse>> PrepareAsyncDeleteServer(::grpc::ClientContext* context, const ::texture_studio::DeleteServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::texture_studio::DeleteServerResponse>>(PrepareAsyncDeleteServerRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateServer(::grpc::ClientContext* context, const ::texture_studio::CreateServerRequest* request, ::texture_studio::CreateServerResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::CreateServerResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateServer(::grpc::ClientContext* context, const ::texture_studio::CreateServerRequest* request, ::texture_studio::CreateServerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateServer(::grpc::ClientContext* context, const ::texture_studio::CreateServerRequest* request, ::texture_studio::CreateServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::CreateServerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::CreateServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetServers(::grpc::ClientContext* context, const ::texture_studio::GetServersRequest* request, ::texture_studio::GetServersResponse* response, std::function<void(::grpc::Status)>) override;
      void GetServers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::GetServersResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetServers(::grpc::ClientContext* context, const ::texture_studio::GetServersRequest* request, ::texture_studio::GetServersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetServers(::grpc::ClientContext* context, const ::texture_studio::GetServersRequest* request, ::texture_studio::GetServersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetServers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::GetServersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetServers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::GetServersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void MyServer(::grpc::ClientContext* context, const ::texture_studio::MyServerRequest* request, ::texture_studio::MyServerResponse* response, std::function<void(::grpc::Status)>) override;
      void MyServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::MyServerResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void MyServer(::grpc::ClientContext* context, const ::texture_studio::MyServerRequest* request, ::texture_studio::MyServerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void MyServer(::grpc::ClientContext* context, const ::texture_studio::MyServerRequest* request, ::texture_studio::MyServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void MyServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::MyServerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void MyServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::MyServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void TransferOwnership(::grpc::ClientContext* context, const ::texture_studio::TransferOwnershipRequest* request, ::texture_studio::TransferOwnershipResponse* response, std::function<void(::grpc::Status)>) override;
      void TransferOwnership(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::TransferOwnershipResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void TransferOwnership(::grpc::ClientContext* context, const ::texture_studio::TransferOwnershipRequest* request, ::texture_studio::TransferOwnershipResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void TransferOwnership(::grpc::ClientContext* context, const ::texture_studio::TransferOwnershipRequest* request, ::texture_studio::TransferOwnershipResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void TransferOwnership(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::TransferOwnershipResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void TransferOwnership(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::TransferOwnershipResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteServer(::grpc::ClientContext* context, const ::texture_studio::DeleteServerRequest* request, ::texture_studio::DeleteServerResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::DeleteServerResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteServer(::grpc::ClientContext* context, const ::texture_studio::DeleteServerRequest* request, ::texture_studio::DeleteServerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteServer(::grpc::ClientContext* context, const ::texture_studio::DeleteServerRequest* request, ::texture_studio::DeleteServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::DeleteServerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::texture_studio::DeleteServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::texture_studio::CreateServerResponse>* AsyncCreateServerRaw(::grpc::ClientContext* context, const ::texture_studio::CreateServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::texture_studio::CreateServerResponse>* PrepareAsyncCreateServerRaw(::grpc::ClientContext* context, const ::texture_studio::CreateServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::texture_studio::GetServersResponse>* AsyncGetServersRaw(::grpc::ClientContext* context, const ::texture_studio::GetServersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::texture_studio::GetServersResponse>* PrepareAsyncGetServersRaw(::grpc::ClientContext* context, const ::texture_studio::GetServersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::texture_studio::MyServerResponse>* AsyncMyServerRaw(::grpc::ClientContext* context, const ::texture_studio::MyServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::texture_studio::MyServerResponse>* PrepareAsyncMyServerRaw(::grpc::ClientContext* context, const ::texture_studio::MyServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::texture_studio::TransferOwnershipResponse>* AsyncTransferOwnershipRaw(::grpc::ClientContext* context, const ::texture_studio::TransferOwnershipRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::texture_studio::TransferOwnershipResponse>* PrepareAsyncTransferOwnershipRaw(::grpc::ClientContext* context, const ::texture_studio::TransferOwnershipRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::texture_studio::DeleteServerResponse>* AsyncDeleteServerRaw(::grpc::ClientContext* context, const ::texture_studio::DeleteServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::texture_studio::DeleteServerResponse>* PrepareAsyncDeleteServerRaw(::grpc::ClientContext* context, const ::texture_studio::DeleteServerRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateServer_;
    const ::grpc::internal::RpcMethod rpcmethod_GetServers_;
    const ::grpc::internal::RpcMethod rpcmethod_MyServer_;
    const ::grpc::internal::RpcMethod rpcmethod_TransferOwnership_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteServer_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Create a new texture studio server.
    virtual ::grpc::Status CreateServer(::grpc::ServerContext* context, const ::texture_studio::CreateServerRequest* request, ::texture_studio::CreateServerResponse* response);
    // Get all existing servers
    virtual ::grpc::Status GetServers(::grpc::ServerContext* context, const ::texture_studio::GetServersRequest* request, ::texture_studio::GetServersResponse* response);
    // Get texture studio server id for current user.
    virtual ::grpc::Status MyServer(::grpc::ServerContext* context, const ::texture_studio::MyServerRequest* request, ::texture_studio::MyServerResponse* response);
    // Change owner of texture studio server.
    virtual ::grpc::Status TransferOwnership(::grpc::ServerContext* context, const ::texture_studio::TransferOwnershipRequest* request, ::texture_studio::TransferOwnershipResponse* response);
    // Delete a texture studio server.
    virtual ::grpc::Status DeleteServer(::grpc::ServerContext* context, const ::texture_studio::DeleteServerRequest* request, ::texture_studio::DeleteServerResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateServer() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateServer(::grpc::ServerContext* /*context*/, const ::texture_studio::CreateServerRequest* /*request*/, ::texture_studio::CreateServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateServer(::grpc::ServerContext* context, ::texture_studio::CreateServerRequest* request, ::grpc::ServerAsyncResponseWriter< ::texture_studio::CreateServerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetServers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetServers() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetServers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServers(::grpc::ServerContext* /*context*/, const ::texture_studio::GetServersRequest* /*request*/, ::texture_studio::GetServersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServers(::grpc::ServerContext* context, ::texture_studio::GetServersRequest* request, ::grpc::ServerAsyncResponseWriter< ::texture_studio::GetServersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MyServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MyServer() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_MyServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MyServer(::grpc::ServerContext* /*context*/, const ::texture_studio::MyServerRequest* /*request*/, ::texture_studio::MyServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMyServer(::grpc::ServerContext* context, ::texture_studio::MyServerRequest* request, ::grpc::ServerAsyncResponseWriter< ::texture_studio::MyServerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TransferOwnership : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TransferOwnership() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_TransferOwnership() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferOwnership(::grpc::ServerContext* /*context*/, const ::texture_studio::TransferOwnershipRequest* /*request*/, ::texture_studio::TransferOwnershipResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTransferOwnership(::grpc::ServerContext* context, ::texture_studio::TransferOwnershipRequest* request, ::grpc::ServerAsyncResponseWriter< ::texture_studio::TransferOwnershipResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteServer() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeleteServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteServer(::grpc::ServerContext* /*context*/, const ::texture_studio::DeleteServerRequest* /*request*/, ::texture_studio::DeleteServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteServer(::grpc::ServerContext* context, ::texture_studio::DeleteServerRequest* request, ::grpc::ServerAsyncResponseWriter< ::texture_studio::DeleteServerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateServer<WithAsyncMethod_GetServers<WithAsyncMethod_MyServer<WithAsyncMethod_TransferOwnership<WithAsyncMethod_DeleteServer<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateServer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::texture_studio::CreateServerRequest, ::texture_studio::CreateServerResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::texture_studio::CreateServerRequest* request, ::texture_studio::CreateServerResponse* response) { return this->CreateServer(context, request, response); }));}
    void SetMessageAllocatorFor_CreateServer(
        ::grpc::experimental::MessageAllocator< ::texture_studio::CreateServerRequest, ::texture_studio::CreateServerResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::texture_studio::CreateServerRequest, ::texture_studio::CreateServerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateServer(::grpc::ServerContext* /*context*/, const ::texture_studio::CreateServerRequest* /*request*/, ::texture_studio::CreateServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateServer(
      ::grpc::CallbackServerContext* /*context*/, const ::texture_studio::CreateServerRequest* /*request*/, ::texture_studio::CreateServerResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateServer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::texture_studio::CreateServerRequest* /*request*/, ::texture_studio::CreateServerResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetServers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetServers() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::texture_studio::GetServersRequest, ::texture_studio::GetServersResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::texture_studio::GetServersRequest* request, ::texture_studio::GetServersResponse* response) { return this->GetServers(context, request, response); }));}
    void SetMessageAllocatorFor_GetServers(
        ::grpc::experimental::MessageAllocator< ::texture_studio::GetServersRequest, ::texture_studio::GetServersResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::texture_studio::GetServersRequest, ::texture_studio::GetServersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetServers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServers(::grpc::ServerContext* /*context*/, const ::texture_studio::GetServersRequest* /*request*/, ::texture_studio::GetServersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetServers(
      ::grpc::CallbackServerContext* /*context*/, const ::texture_studio::GetServersRequest* /*request*/, ::texture_studio::GetServersResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetServers(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::texture_studio::GetServersRequest* /*request*/, ::texture_studio::GetServersResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_MyServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_MyServer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::texture_studio::MyServerRequest, ::texture_studio::MyServerResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::texture_studio::MyServerRequest* request, ::texture_studio::MyServerResponse* response) { return this->MyServer(context, request, response); }));}
    void SetMessageAllocatorFor_MyServer(
        ::grpc::experimental::MessageAllocator< ::texture_studio::MyServerRequest, ::texture_studio::MyServerResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::texture_studio::MyServerRequest, ::texture_studio::MyServerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_MyServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MyServer(::grpc::ServerContext* /*context*/, const ::texture_studio::MyServerRequest* /*request*/, ::texture_studio::MyServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* MyServer(
      ::grpc::CallbackServerContext* /*context*/, const ::texture_studio::MyServerRequest* /*request*/, ::texture_studio::MyServerResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* MyServer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::texture_studio::MyServerRequest* /*request*/, ::texture_studio::MyServerResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_TransferOwnership : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_TransferOwnership() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::texture_studio::TransferOwnershipRequest, ::texture_studio::TransferOwnershipResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::texture_studio::TransferOwnershipRequest* request, ::texture_studio::TransferOwnershipResponse* response) { return this->TransferOwnership(context, request, response); }));}
    void SetMessageAllocatorFor_TransferOwnership(
        ::grpc::experimental::MessageAllocator< ::texture_studio::TransferOwnershipRequest, ::texture_studio::TransferOwnershipResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::texture_studio::TransferOwnershipRequest, ::texture_studio::TransferOwnershipResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_TransferOwnership() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferOwnership(::grpc::ServerContext* /*context*/, const ::texture_studio::TransferOwnershipRequest* /*request*/, ::texture_studio::TransferOwnershipResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* TransferOwnership(
      ::grpc::CallbackServerContext* /*context*/, const ::texture_studio::TransferOwnershipRequest* /*request*/, ::texture_studio::TransferOwnershipResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* TransferOwnership(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::texture_studio::TransferOwnershipRequest* /*request*/, ::texture_studio::TransferOwnershipResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteServer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::texture_studio::DeleteServerRequest, ::texture_studio::DeleteServerResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::texture_studio::DeleteServerRequest* request, ::texture_studio::DeleteServerResponse* response) { return this->DeleteServer(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteServer(
        ::grpc::experimental::MessageAllocator< ::texture_studio::DeleteServerRequest, ::texture_studio::DeleteServerResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::texture_studio::DeleteServerRequest, ::texture_studio::DeleteServerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteServer(::grpc::ServerContext* /*context*/, const ::texture_studio::DeleteServerRequest* /*request*/, ::texture_studio::DeleteServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteServer(
      ::grpc::CallbackServerContext* /*context*/, const ::texture_studio::DeleteServerRequest* /*request*/, ::texture_studio::DeleteServerResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteServer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::texture_studio::DeleteServerRequest* /*request*/, ::texture_studio::DeleteServerResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_CreateServer<ExperimentalWithCallbackMethod_GetServers<ExperimentalWithCallbackMethod_MyServer<ExperimentalWithCallbackMethod_TransferOwnership<ExperimentalWithCallbackMethod_DeleteServer<Service > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_CreateServer<ExperimentalWithCallbackMethod_GetServers<ExperimentalWithCallbackMethod_MyServer<ExperimentalWithCallbackMethod_TransferOwnership<ExperimentalWithCallbackMethod_DeleteServer<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateServer() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateServer(::grpc::ServerContext* /*context*/, const ::texture_studio::CreateServerRequest* /*request*/, ::texture_studio::CreateServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetServers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetServers() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetServers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServers(::grpc::ServerContext* /*context*/, const ::texture_studio::GetServersRequest* /*request*/, ::texture_studio::GetServersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MyServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MyServer() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_MyServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MyServer(::grpc::ServerContext* /*context*/, const ::texture_studio::MyServerRequest* /*request*/, ::texture_studio::MyServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TransferOwnership : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TransferOwnership() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_TransferOwnership() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferOwnership(::grpc::ServerContext* /*context*/, const ::texture_studio::TransferOwnershipRequest* /*request*/, ::texture_studio::TransferOwnershipResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteServer() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeleteServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteServer(::grpc::ServerContext* /*context*/, const ::texture_studio::DeleteServerRequest* /*request*/, ::texture_studio::DeleteServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateServer() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateServer(::grpc::ServerContext* /*context*/, const ::texture_studio::CreateServerRequest* /*request*/, ::texture_studio::CreateServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateServer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetServers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetServers() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetServers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServers(::grpc::ServerContext* /*context*/, const ::texture_studio::GetServersRequest* /*request*/, ::texture_studio::GetServersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MyServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MyServer() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_MyServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MyServer(::grpc::ServerContext* /*context*/, const ::texture_studio::MyServerRequest* /*request*/, ::texture_studio::MyServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMyServer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TransferOwnership : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TransferOwnership() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_TransferOwnership() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferOwnership(::grpc::ServerContext* /*context*/, const ::texture_studio::TransferOwnershipRequest* /*request*/, ::texture_studio::TransferOwnershipResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTransferOwnership(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteServer() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DeleteServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteServer(::grpc::ServerContext* /*context*/, const ::texture_studio::DeleteServerRequest* /*request*/, ::texture_studio::DeleteServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteServer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateServer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateServer(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateServer(::grpc::ServerContext* /*context*/, const ::texture_studio::CreateServerRequest* /*request*/, ::texture_studio::CreateServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateServer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateServer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetServers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetServers() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetServers(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetServers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServers(::grpc::ServerContext* /*context*/, const ::texture_studio::GetServersRequest* /*request*/, ::texture_studio::GetServersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetServers(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetServers(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_MyServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_MyServer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MyServer(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_MyServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MyServer(::grpc::ServerContext* /*context*/, const ::texture_studio::MyServerRequest* /*request*/, ::texture_studio::MyServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* MyServer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* MyServer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_TransferOwnership : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_TransferOwnership() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TransferOwnership(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_TransferOwnership() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferOwnership(::grpc::ServerContext* /*context*/, const ::texture_studio::TransferOwnershipRequest* /*request*/, ::texture_studio::TransferOwnershipResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* TransferOwnership(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* TransferOwnership(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteServer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteServer(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteServer(::grpc::ServerContext* /*context*/, const ::texture_studio::DeleteServerRequest* /*request*/, ::texture_studio::DeleteServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteServer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteServer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateServer() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::texture_studio::CreateServerRequest, ::texture_studio::CreateServerResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::texture_studio::CreateServerRequest, ::texture_studio::CreateServerResponse>* streamer) {
                       return this->StreamedCreateServer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateServer(::grpc::ServerContext* /*context*/, const ::texture_studio::CreateServerRequest* /*request*/, ::texture_studio::CreateServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::texture_studio::CreateServerRequest,::texture_studio::CreateServerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetServers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetServers() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::texture_studio::GetServersRequest, ::texture_studio::GetServersResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::texture_studio::GetServersRequest, ::texture_studio::GetServersResponse>* streamer) {
                       return this->StreamedGetServers(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetServers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetServers(::grpc::ServerContext* /*context*/, const ::texture_studio::GetServersRequest* /*request*/, ::texture_studio::GetServersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetServers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::texture_studio::GetServersRequest,::texture_studio::GetServersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MyServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MyServer() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::texture_studio::MyServerRequest, ::texture_studio::MyServerResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::texture_studio::MyServerRequest, ::texture_studio::MyServerResponse>* streamer) {
                       return this->StreamedMyServer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MyServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MyServer(::grpc::ServerContext* /*context*/, const ::texture_studio::MyServerRequest* /*request*/, ::texture_studio::MyServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMyServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::texture_studio::MyServerRequest,::texture_studio::MyServerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TransferOwnership : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TransferOwnership() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::texture_studio::TransferOwnershipRequest, ::texture_studio::TransferOwnershipResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::texture_studio::TransferOwnershipRequest, ::texture_studio::TransferOwnershipResponse>* streamer) {
                       return this->StreamedTransferOwnership(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TransferOwnership() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TransferOwnership(::grpc::ServerContext* /*context*/, const ::texture_studio::TransferOwnershipRequest* /*request*/, ::texture_studio::TransferOwnershipResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTransferOwnership(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::texture_studio::TransferOwnershipRequest,::texture_studio::TransferOwnershipResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteServer() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::texture_studio::DeleteServerRequest, ::texture_studio::DeleteServerResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::texture_studio::DeleteServerRequest, ::texture_studio::DeleteServerResponse>* streamer) {
                       return this->StreamedDeleteServer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteServer(::grpc::ServerContext* /*context*/, const ::texture_studio::DeleteServerRequest* /*request*/, ::texture_studio::DeleteServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::texture_studio::DeleteServerRequest,::texture_studio::DeleteServerResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateServer<WithStreamedUnaryMethod_GetServers<WithStreamedUnaryMethod_MyServer<WithStreamedUnaryMethod_TransferOwnership<WithStreamedUnaryMethod_DeleteServer<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateServer<WithStreamedUnaryMethod_GetServers<WithStreamedUnaryMethod_MyServer<WithStreamedUnaryMethod_TransferOwnership<WithStreamedUnaryMethod_DeleteServer<Service > > > > > StreamedService;
};

}  // namespace texture_studio


#endif  // GRPC_texturestudio_2ftexturestudio_5fmanage_2eproto__INCLUDED
