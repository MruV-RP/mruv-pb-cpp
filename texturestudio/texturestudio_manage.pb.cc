// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: texturestudio/texturestudio_manage.proto

#include "texturestudio/texturestudio_manage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace mruv {
namespace texture_studio {
class CreateServerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateServerRequest> _instance;
} _CreateServerRequest_default_instance_;
class CreateServerResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateServerResponse> _instance;
} _CreateServerResponse_default_instance_;
class GetServersRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetServersRequest> _instance;
} _GetServersRequest_default_instance_;
class GetServersResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetServersResponse> _instance;
} _GetServersResponse_default_instance_;
class MyServerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MyServerRequest> _instance;
} _MyServerRequest_default_instance_;
class MyServerResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MyServerResponse> _instance;
} _MyServerResponse_default_instance_;
class TransferOwnershipRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransferOwnershipRequest> _instance;
} _TransferOwnershipRequest_default_instance_;
class TransferOwnershipResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransferOwnershipResponse> _instance;
} _TransferOwnershipResponse_default_instance_;
class DeleteServerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteServerRequest> _instance;
} _DeleteServerRequest_default_instance_;
class DeleteServerResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteServerResponse> _instance;
} _DeleteServerResponse_default_instance_;
}  // namespace texture_studio
}  // namespace mruv
static void InitDefaultsscc_info_CreateServerRequest_texturestudio_2ftexturestudio_5fmanage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::texture_studio::_CreateServerRequest_default_instance_;
    new (ptr) ::mruv::texture_studio::CreateServerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::texture_studio::CreateServerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateServerRequest_texturestudio_2ftexturestudio_5fmanage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateServerRequest_texturestudio_2ftexturestudio_5fmanage_2eproto}, {}};

static void InitDefaultsscc_info_CreateServerResponse_texturestudio_2ftexturestudio_5fmanage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::texture_studio::_CreateServerResponse_default_instance_;
    new (ptr) ::mruv::texture_studio::CreateServerResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::texture_studio::CreateServerResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateServerResponse_texturestudio_2ftexturestudio_5fmanage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateServerResponse_texturestudio_2ftexturestudio_5fmanage_2eproto}, {}};

static void InitDefaultsscc_info_DeleteServerRequest_texturestudio_2ftexturestudio_5fmanage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::texture_studio::_DeleteServerRequest_default_instance_;
    new (ptr) ::mruv::texture_studio::DeleteServerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::texture_studio::DeleteServerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteServerRequest_texturestudio_2ftexturestudio_5fmanage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteServerRequest_texturestudio_2ftexturestudio_5fmanage_2eproto}, {}};

static void InitDefaultsscc_info_DeleteServerResponse_texturestudio_2ftexturestudio_5fmanage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::texture_studio::_DeleteServerResponse_default_instance_;
    new (ptr) ::mruv::texture_studio::DeleteServerResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::texture_studio::DeleteServerResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteServerResponse_texturestudio_2ftexturestudio_5fmanage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteServerResponse_texturestudio_2ftexturestudio_5fmanage_2eproto}, {}};

static void InitDefaultsscc_info_GetServersRequest_texturestudio_2ftexturestudio_5fmanage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::texture_studio::_GetServersRequest_default_instance_;
    new (ptr) ::mruv::texture_studio::GetServersRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::texture_studio::GetServersRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetServersRequest_texturestudio_2ftexturestudio_5fmanage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetServersRequest_texturestudio_2ftexturestudio_5fmanage_2eproto}, {}};

static void InitDefaultsscc_info_GetServersResponse_texturestudio_2ftexturestudio_5fmanage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::texture_studio::_GetServersResponse_default_instance_;
    new (ptr) ::mruv::texture_studio::GetServersResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::texture_studio::GetServersResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetServersResponse_texturestudio_2ftexturestudio_5fmanage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetServersResponse_texturestudio_2ftexturestudio_5fmanage_2eproto}, {}};

static void InitDefaultsscc_info_MyServerRequest_texturestudio_2ftexturestudio_5fmanage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::texture_studio::_MyServerRequest_default_instance_;
    new (ptr) ::mruv::texture_studio::MyServerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::texture_studio::MyServerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MyServerRequest_texturestudio_2ftexturestudio_5fmanage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MyServerRequest_texturestudio_2ftexturestudio_5fmanage_2eproto}, {}};

static void InitDefaultsscc_info_MyServerResponse_texturestudio_2ftexturestudio_5fmanage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::texture_studio::_MyServerResponse_default_instance_;
    new (ptr) ::mruv::texture_studio::MyServerResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::texture_studio::MyServerResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MyServerResponse_texturestudio_2ftexturestudio_5fmanage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MyServerResponse_texturestudio_2ftexturestudio_5fmanage_2eproto}, {}};

static void InitDefaultsscc_info_TransferOwnershipRequest_texturestudio_2ftexturestudio_5fmanage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::texture_studio::_TransferOwnershipRequest_default_instance_;
    new (ptr) ::mruv::texture_studio::TransferOwnershipRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::texture_studio::TransferOwnershipRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransferOwnershipRequest_texturestudio_2ftexturestudio_5fmanage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TransferOwnershipRequest_texturestudio_2ftexturestudio_5fmanage_2eproto}, {}};

static void InitDefaultsscc_info_TransferOwnershipResponse_texturestudio_2ftexturestudio_5fmanage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::texture_studio::_TransferOwnershipResponse_default_instance_;
    new (ptr) ::mruv::texture_studio::TransferOwnershipResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::texture_studio::TransferOwnershipResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransferOwnershipResponse_texturestudio_2ftexturestudio_5fmanage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TransferOwnershipResponse_texturestudio_2ftexturestudio_5fmanage_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_texturestudio_2ftexturestudio_5fmanage_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_texturestudio_2ftexturestudio_5fmanage_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_texturestudio_2ftexturestudio_5fmanage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_texturestudio_2ftexturestudio_5fmanage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::CreateServerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::CreateServerRequest, owner_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::CreateServerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::CreateServerResponse, id_),
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::CreateServerResponse, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::GetServersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::GetServersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::GetServersResponse, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::MyServerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::MyServerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::MyServerResponse, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::TransferOwnershipRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::TransferOwnershipRequest, server_id_),
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::TransferOwnershipRequest, owner_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::TransferOwnershipResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::DeleteServerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::DeleteServerRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::texture_studio::DeleteServerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mruv::texture_studio::CreateServerRequest)},
  { 6, -1, sizeof(::mruv::texture_studio::CreateServerResponse)},
  { 13, -1, sizeof(::mruv::texture_studio::GetServersRequest)},
  { 18, -1, sizeof(::mruv::texture_studio::GetServersResponse)},
  { 24, -1, sizeof(::mruv::texture_studio::MyServerRequest)},
  { 29, -1, sizeof(::mruv::texture_studio::MyServerResponse)},
  { 35, -1, sizeof(::mruv::texture_studio::TransferOwnershipRequest)},
  { 42, -1, sizeof(::mruv::texture_studio::TransferOwnershipResponse)},
  { 47, -1, sizeof(::mruv::texture_studio::DeleteServerRequest)},
  { 53, -1, sizeof(::mruv::texture_studio::DeleteServerResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::texture_studio::_CreateServerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::texture_studio::_CreateServerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::texture_studio::_GetServersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::texture_studio::_GetServersResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::texture_studio::_MyServerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::texture_studio::_MyServerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::texture_studio::_TransferOwnershipRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::texture_studio::_TransferOwnershipResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::texture_studio::_DeleteServerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::texture_studio::_DeleteServerResponse_default_instance_),
};

const char descriptor_table_protodef_texturestudio_2ftexturestudio_5fmanage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(texturestudio/texturestudio_manage.pro"
  "to\022\023mruv.texture_studio\032\034google/api/anno"
  "tations.proto\"\'\n\023CreateServerRequest\022\020\n\010"
  "owner_id\030\001 \001(\r\"0\n\024CreateServerResponse\022\n"
  "\n\002id\030\001 \001(\r\022\014\n\004port\030\002 \001(\r\"\023\n\021GetServersRe"
  "quest\" \n\022GetServersResponse\022\n\n\002id\030\001 \003(\r\""
  "\021\n\017MyServerRequest\"\036\n\020MyServerResponse\022\n"
  "\n\002id\030\001 \001(\r\"\?\n\030TransferOwnershipRequest\022\021"
  "\n\tserver_id\030\001 \001(\r\022\020\n\010owner_id\030\002 \001(\r\"\033\n\031T"
  "ransferOwnershipResponse\"!\n\023DeleteServer"
  "Request\022\n\n\002id\030\001 \001(\r\"\026\n\024DeleteServerRespo"
  "nse2\332\005\n\033TextureStudioManagerService\022\206\001\n\014"
  "CreateServer\022(.mruv.texture_studio.Creat"
  "eServerRequest\032).mruv.texture_studio.Cre"
  "ateServerResponse\"!\202\323\344\223\002\033\"\031/v1/texturest"
  "udio/servers\022\200\001\n\nGetServers\022&.mruv.textu"
  "re_studio.GetServersRequest\032\'.mruv.textu"
  "re_studio.GetServersResponse\"!\202\323\344\223\002\033\022\031/v"
  "1/texturestudio/servers\022}\n\010MyServer\022$.mr"
  "uv.texture_studio.MyServerRequest\032%.mruv"
  ".texture_studio.MyServerResponse\"$\202\323\344\223\002\036"
  "\022\034/v1/texturestudio/servers/my\022\241\001\n\021Trans"
  "ferOwnership\022-.mruv.texture_studio.Trans"
  "ferOwnershipRequest\032..mruv.texture_studi"
  "o.TransferOwnershipResponse\"-\202\323\344\223\002\'2%/v1"
  "/texturestudio/servers/{server_id}\022\213\001\n\014D"
  "eleteServer\022(.mruv.texture_studio.Delete"
  "ServerRequest\032).mruv.texture_studio.Dele"
  "teServerResponse\"&\202\323\344\223\002 *\036/v1/texturestu"
  "dio/servers/{id}B-Z+github.com/MruV-RP/m"
  "ruv-pb-go/texturestudiob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_texturestudio_2ftexturestudio_5fmanage_2eproto_deps[1] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_texturestudio_2ftexturestudio_5fmanage_2eproto_sccs[10] = {
  &scc_info_CreateServerRequest_texturestudio_2ftexturestudio_5fmanage_2eproto.base,
  &scc_info_CreateServerResponse_texturestudio_2ftexturestudio_5fmanage_2eproto.base,
  &scc_info_DeleteServerRequest_texturestudio_2ftexturestudio_5fmanage_2eproto.base,
  &scc_info_DeleteServerResponse_texturestudio_2ftexturestudio_5fmanage_2eproto.base,
  &scc_info_GetServersRequest_texturestudio_2ftexturestudio_5fmanage_2eproto.base,
  &scc_info_GetServersResponse_texturestudio_2ftexturestudio_5fmanage_2eproto.base,
  &scc_info_MyServerRequest_texturestudio_2ftexturestudio_5fmanage_2eproto.base,
  &scc_info_MyServerResponse_texturestudio_2ftexturestudio_5fmanage_2eproto.base,
  &scc_info_TransferOwnershipRequest_texturestudio_2ftexturestudio_5fmanage_2eproto.base,
  &scc_info_TransferOwnershipResponse_texturestudio_2ftexturestudio_5fmanage_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_texturestudio_2ftexturestudio_5fmanage_2eproto_once;
static bool descriptor_table_texturestudio_2ftexturestudio_5fmanage_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_texturestudio_2ftexturestudio_5fmanage_2eproto = {
  &descriptor_table_texturestudio_2ftexturestudio_5fmanage_2eproto_initialized, descriptor_table_protodef_texturestudio_2ftexturestudio_5fmanage_2eproto, "texturestudio/texturestudio_manage.proto", 1231,
  &descriptor_table_texturestudio_2ftexturestudio_5fmanage_2eproto_once, descriptor_table_texturestudio_2ftexturestudio_5fmanage_2eproto_sccs, descriptor_table_texturestudio_2ftexturestudio_5fmanage_2eproto_deps, 10, 1,
  schemas, file_default_instances, TableStruct_texturestudio_2ftexturestudio_5fmanage_2eproto::offsets,
  file_level_metadata_texturestudio_2ftexturestudio_5fmanage_2eproto, 10, file_level_enum_descriptors_texturestudio_2ftexturestudio_5fmanage_2eproto, file_level_service_descriptors_texturestudio_2ftexturestudio_5fmanage_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_texturestudio_2ftexturestudio_5fmanage_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_texturestudio_2ftexturestudio_5fmanage_2eproto), true);
namespace mruv {
namespace texture_studio {

// ===================================================================

void CreateServerRequest::InitAsDefaultInstance() {
}
class CreateServerRequest::_Internal {
 public:
};

CreateServerRequest::CreateServerRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.texture_studio.CreateServerRequest)
}
CreateServerRequest::CreateServerRequest(const CreateServerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  owner_id_ = from.owner_id_;
  // @@protoc_insertion_point(copy_constructor:mruv.texture_studio.CreateServerRequest)
}

void CreateServerRequest::SharedCtor() {
  owner_id_ = 0u;
}

CreateServerRequest::~CreateServerRequest() {
  // @@protoc_insertion_point(destructor:mruv.texture_studio.CreateServerRequest)
  SharedDtor();
}

void CreateServerRequest::SharedDtor() {
}

void CreateServerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateServerRequest& CreateServerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateServerRequest_texturestudio_2ftexturestudio_5fmanage_2eproto.base);
  return *internal_default_instance();
}


void CreateServerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.texture_studio.CreateServerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_id_ = 0u;
  _internal_metadata_.Clear();
}

const char* CreateServerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 owner_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateServerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.texture_studio.CreateServerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 owner_id = 1;
  if (this->owner_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_owner_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.texture_studio.CreateServerRequest)
  return target;
}

size_t CreateServerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.texture_studio.CreateServerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 owner_id = 1;
  if (this->owner_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_owner_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateServerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.texture_studio.CreateServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateServerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateServerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.texture_studio.CreateServerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.texture_studio.CreateServerRequest)
    MergeFrom(*source);
  }
}

void CreateServerRequest::MergeFrom(const CreateServerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.texture_studio.CreateServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.owner_id() != 0) {
    _internal_set_owner_id(from._internal_owner_id());
  }
}

void CreateServerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.texture_studio.CreateServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateServerRequest::CopyFrom(const CreateServerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.texture_studio.CreateServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateServerRequest::IsInitialized() const {
  return true;
}

void CreateServerRequest::InternalSwap(CreateServerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(owner_id_, other->owner_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateServerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateServerResponse::InitAsDefaultInstance() {
}
class CreateServerResponse::_Internal {
 public:
};

CreateServerResponse::CreateServerResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.texture_studio.CreateServerResponse)
}
CreateServerResponse::CreateServerResponse(const CreateServerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&id_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:mruv.texture_studio.CreateServerResponse)
}

void CreateServerResponse::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&id_)) + sizeof(port_));
}

CreateServerResponse::~CreateServerResponse() {
  // @@protoc_insertion_point(destructor:mruv.texture_studio.CreateServerResponse)
  SharedDtor();
}

void CreateServerResponse::SharedDtor() {
}

void CreateServerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateServerResponse& CreateServerResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateServerResponse_texturestudio_2ftexturestudio_5fmanage_2eproto.base);
  return *internal_default_instance();
}


void CreateServerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.texture_studio.CreateServerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&id_)) + sizeof(port_));
  _internal_metadata_.Clear();
}

const char* CreateServerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateServerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.texture_studio.CreateServerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.texture_studio.CreateServerResponse)
  return target;
}

size_t CreateServerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.texture_studio.CreateServerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateServerResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.texture_studio.CreateServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateServerResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateServerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.texture_studio.CreateServerResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.texture_studio.CreateServerResponse)
    MergeFrom(*source);
  }
}

void CreateServerResponse::MergeFrom(const CreateServerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.texture_studio.CreateServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void CreateServerResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.texture_studio.CreateServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateServerResponse::CopyFrom(const CreateServerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.texture_studio.CreateServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateServerResponse::IsInitialized() const {
  return true;
}

void CreateServerResponse::InternalSwap(CreateServerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateServerResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetServersRequest::InitAsDefaultInstance() {
}
class GetServersRequest::_Internal {
 public:
};

GetServersRequest::GetServersRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.texture_studio.GetServersRequest)
}
GetServersRequest::GetServersRequest(const GetServersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.texture_studio.GetServersRequest)
}

void GetServersRequest::SharedCtor() {
}

GetServersRequest::~GetServersRequest() {
  // @@protoc_insertion_point(destructor:mruv.texture_studio.GetServersRequest)
  SharedDtor();
}

void GetServersRequest::SharedDtor() {
}

void GetServersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetServersRequest& GetServersRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetServersRequest_texturestudio_2ftexturestudio_5fmanage_2eproto.base);
  return *internal_default_instance();
}


void GetServersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.texture_studio.GetServersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* GetServersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServersRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.texture_studio.GetServersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.texture_studio.GetServersRequest)
  return target;
}

size_t GetServersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.texture_studio.GetServersRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServersRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.texture_studio.GetServersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServersRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetServersRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.texture_studio.GetServersRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.texture_studio.GetServersRequest)
    MergeFrom(*source);
  }
}

void GetServersRequest::MergeFrom(const GetServersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.texture_studio.GetServersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetServersRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.texture_studio.GetServersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServersRequest::CopyFrom(const GetServersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.texture_studio.GetServersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServersRequest::IsInitialized() const {
  return true;
}

void GetServersRequest::InternalSwap(GetServersRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServersRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetServersResponse::InitAsDefaultInstance() {
}
class GetServersResponse::_Internal {
 public:
};

GetServersResponse::GetServersResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.texture_studio.GetServersResponse)
}
GetServersResponse::GetServersResponse(const GetServersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      id_(from.id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.texture_studio.GetServersResponse)
}

void GetServersResponse::SharedCtor() {
}

GetServersResponse::~GetServersResponse() {
  // @@protoc_insertion_point(destructor:mruv.texture_studio.GetServersResponse)
  SharedDtor();
}

void GetServersResponse::SharedDtor() {
}

void GetServersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetServersResponse& GetServersResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetServersResponse_texturestudio_2ftexturestudio_5fmanage_2eproto.base);
  return *internal_default_instance();
}


void GetServersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.texture_studio.GetServersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.Clear();
  _internal_metadata_.Clear();
}

const char* GetServersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServersResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.texture_studio.GetServersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 id = 1;
  {
    int byte_size = _id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.texture_studio.GetServersResponse)
  return target;
}

size_t GetServersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.texture_studio.GetServersResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 id = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServersResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.texture_studio.GetServersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServersResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetServersResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.texture_studio.GetServersResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.texture_studio.GetServersResponse)
    MergeFrom(*source);
  }
}

void GetServersResponse::MergeFrom(const GetServersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.texture_studio.GetServersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  id_.MergeFrom(from.id_);
}

void GetServersResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.texture_studio.GetServersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServersResponse::CopyFrom(const GetServersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.texture_studio.GetServersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServersResponse::IsInitialized() const {
  return true;
}

void GetServersResponse::InternalSwap(GetServersResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.InternalSwap(&other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServersResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MyServerRequest::InitAsDefaultInstance() {
}
class MyServerRequest::_Internal {
 public:
};

MyServerRequest::MyServerRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.texture_studio.MyServerRequest)
}
MyServerRequest::MyServerRequest(const MyServerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.texture_studio.MyServerRequest)
}

void MyServerRequest::SharedCtor() {
}

MyServerRequest::~MyServerRequest() {
  // @@protoc_insertion_point(destructor:mruv.texture_studio.MyServerRequest)
  SharedDtor();
}

void MyServerRequest::SharedDtor() {
}

void MyServerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MyServerRequest& MyServerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MyServerRequest_texturestudio_2ftexturestudio_5fmanage_2eproto.base);
  return *internal_default_instance();
}


void MyServerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.texture_studio.MyServerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* MyServerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MyServerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.texture_studio.MyServerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.texture_studio.MyServerRequest)
  return target;
}

size_t MyServerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.texture_studio.MyServerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MyServerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.texture_studio.MyServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MyServerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MyServerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.texture_studio.MyServerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.texture_studio.MyServerRequest)
    MergeFrom(*source);
  }
}

void MyServerRequest::MergeFrom(const MyServerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.texture_studio.MyServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MyServerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.texture_studio.MyServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyServerRequest::CopyFrom(const MyServerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.texture_studio.MyServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyServerRequest::IsInitialized() const {
  return true;
}

void MyServerRequest::InternalSwap(MyServerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MyServerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MyServerResponse::InitAsDefaultInstance() {
}
class MyServerResponse::_Internal {
 public:
};

MyServerResponse::MyServerResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.texture_studio.MyServerResponse)
}
MyServerResponse::MyServerResponse(const MyServerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.texture_studio.MyServerResponse)
}

void MyServerResponse::SharedCtor() {
  id_ = 0u;
}

MyServerResponse::~MyServerResponse() {
  // @@protoc_insertion_point(destructor:mruv.texture_studio.MyServerResponse)
  SharedDtor();
}

void MyServerResponse::SharedDtor() {
}

void MyServerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MyServerResponse& MyServerResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MyServerResponse_texturestudio_2ftexturestudio_5fmanage_2eproto.base);
  return *internal_default_instance();
}


void MyServerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.texture_studio.MyServerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear();
}

const char* MyServerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MyServerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.texture_studio.MyServerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.texture_studio.MyServerResponse)
  return target;
}

size_t MyServerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.texture_studio.MyServerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MyServerResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.texture_studio.MyServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MyServerResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MyServerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.texture_studio.MyServerResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.texture_studio.MyServerResponse)
    MergeFrom(*source);
  }
}

void MyServerResponse::MergeFrom(const MyServerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.texture_studio.MyServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void MyServerResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.texture_studio.MyServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyServerResponse::CopyFrom(const MyServerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.texture_studio.MyServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyServerResponse::IsInitialized() const {
  return true;
}

void MyServerResponse::InternalSwap(MyServerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MyServerResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransferOwnershipRequest::InitAsDefaultInstance() {
}
class TransferOwnershipRequest::_Internal {
 public:
};

TransferOwnershipRequest::TransferOwnershipRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.texture_studio.TransferOwnershipRequest)
}
TransferOwnershipRequest::TransferOwnershipRequest(const TransferOwnershipRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&server_id_, &from.server_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&owner_id_) -
    reinterpret_cast<char*>(&server_id_)) + sizeof(owner_id_));
  // @@protoc_insertion_point(copy_constructor:mruv.texture_studio.TransferOwnershipRequest)
}

void TransferOwnershipRequest::SharedCtor() {
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&owner_id_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(owner_id_));
}

TransferOwnershipRequest::~TransferOwnershipRequest() {
  // @@protoc_insertion_point(destructor:mruv.texture_studio.TransferOwnershipRequest)
  SharedDtor();
}

void TransferOwnershipRequest::SharedDtor() {
}

void TransferOwnershipRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransferOwnershipRequest& TransferOwnershipRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransferOwnershipRequest_texturestudio_2ftexturestudio_5fmanage_2eproto.base);
  return *internal_default_instance();
}


void TransferOwnershipRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.texture_studio.TransferOwnershipRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&owner_id_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(owner_id_));
  _internal_metadata_.Clear();
}

const char* TransferOwnershipRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 owner_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransferOwnershipRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.texture_studio.TransferOwnershipRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 server_id = 1;
  if (this->server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_id(), target);
  }

  // uint32 owner_id = 2;
  if (this->owner_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_owner_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.texture_studio.TransferOwnershipRequest)
  return target;
}

size_t TransferOwnershipRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.texture_studio.TransferOwnershipRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_server_id());
  }

  // uint32 owner_id = 2;
  if (this->owner_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_owner_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferOwnershipRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.texture_studio.TransferOwnershipRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferOwnershipRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransferOwnershipRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.texture_studio.TransferOwnershipRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.texture_studio.TransferOwnershipRequest)
    MergeFrom(*source);
  }
}

void TransferOwnershipRequest::MergeFrom(const TransferOwnershipRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.texture_studio.TransferOwnershipRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
  if (from.owner_id() != 0) {
    _internal_set_owner_id(from._internal_owner_id());
  }
}

void TransferOwnershipRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.texture_studio.TransferOwnershipRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferOwnershipRequest::CopyFrom(const TransferOwnershipRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.texture_studio.TransferOwnershipRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferOwnershipRequest::IsInitialized() const {
  return true;
}

void TransferOwnershipRequest::InternalSwap(TransferOwnershipRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(server_id_, other->server_id_);
  swap(owner_id_, other->owner_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferOwnershipRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransferOwnershipResponse::InitAsDefaultInstance() {
}
class TransferOwnershipResponse::_Internal {
 public:
};

TransferOwnershipResponse::TransferOwnershipResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.texture_studio.TransferOwnershipResponse)
}
TransferOwnershipResponse::TransferOwnershipResponse(const TransferOwnershipResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.texture_studio.TransferOwnershipResponse)
}

void TransferOwnershipResponse::SharedCtor() {
}

TransferOwnershipResponse::~TransferOwnershipResponse() {
  // @@protoc_insertion_point(destructor:mruv.texture_studio.TransferOwnershipResponse)
  SharedDtor();
}

void TransferOwnershipResponse::SharedDtor() {
}

void TransferOwnershipResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransferOwnershipResponse& TransferOwnershipResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransferOwnershipResponse_texturestudio_2ftexturestudio_5fmanage_2eproto.base);
  return *internal_default_instance();
}


void TransferOwnershipResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.texture_studio.TransferOwnershipResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* TransferOwnershipResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransferOwnershipResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.texture_studio.TransferOwnershipResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.texture_studio.TransferOwnershipResponse)
  return target;
}

size_t TransferOwnershipResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.texture_studio.TransferOwnershipResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferOwnershipResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.texture_studio.TransferOwnershipResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferOwnershipResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransferOwnershipResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.texture_studio.TransferOwnershipResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.texture_studio.TransferOwnershipResponse)
    MergeFrom(*source);
  }
}

void TransferOwnershipResponse::MergeFrom(const TransferOwnershipResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.texture_studio.TransferOwnershipResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TransferOwnershipResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.texture_studio.TransferOwnershipResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferOwnershipResponse::CopyFrom(const TransferOwnershipResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.texture_studio.TransferOwnershipResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferOwnershipResponse::IsInitialized() const {
  return true;
}

void TransferOwnershipResponse::InternalSwap(TransferOwnershipResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferOwnershipResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteServerRequest::InitAsDefaultInstance() {
}
class DeleteServerRequest::_Internal {
 public:
};

DeleteServerRequest::DeleteServerRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.texture_studio.DeleteServerRequest)
}
DeleteServerRequest::DeleteServerRequest(const DeleteServerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.texture_studio.DeleteServerRequest)
}

void DeleteServerRequest::SharedCtor() {
  id_ = 0u;
}

DeleteServerRequest::~DeleteServerRequest() {
  // @@protoc_insertion_point(destructor:mruv.texture_studio.DeleteServerRequest)
  SharedDtor();
}

void DeleteServerRequest::SharedDtor() {
}

void DeleteServerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteServerRequest& DeleteServerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteServerRequest_texturestudio_2ftexturestudio_5fmanage_2eproto.base);
  return *internal_default_instance();
}


void DeleteServerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.texture_studio.DeleteServerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear();
}

const char* DeleteServerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteServerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.texture_studio.DeleteServerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.texture_studio.DeleteServerRequest)
  return target;
}

size_t DeleteServerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.texture_studio.DeleteServerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteServerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.texture_studio.DeleteServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteServerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteServerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.texture_studio.DeleteServerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.texture_studio.DeleteServerRequest)
    MergeFrom(*source);
  }
}

void DeleteServerRequest::MergeFrom(const DeleteServerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.texture_studio.DeleteServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void DeleteServerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.texture_studio.DeleteServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteServerRequest::CopyFrom(const DeleteServerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.texture_studio.DeleteServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteServerRequest::IsInitialized() const {
  return true;
}

void DeleteServerRequest::InternalSwap(DeleteServerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteServerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteServerResponse::InitAsDefaultInstance() {
}
class DeleteServerResponse::_Internal {
 public:
};

DeleteServerResponse::DeleteServerResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.texture_studio.DeleteServerResponse)
}
DeleteServerResponse::DeleteServerResponse(const DeleteServerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.texture_studio.DeleteServerResponse)
}

void DeleteServerResponse::SharedCtor() {
}

DeleteServerResponse::~DeleteServerResponse() {
  // @@protoc_insertion_point(destructor:mruv.texture_studio.DeleteServerResponse)
  SharedDtor();
}

void DeleteServerResponse::SharedDtor() {
}

void DeleteServerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteServerResponse& DeleteServerResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteServerResponse_texturestudio_2ftexturestudio_5fmanage_2eproto.base);
  return *internal_default_instance();
}


void DeleteServerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.texture_studio.DeleteServerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* DeleteServerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteServerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.texture_studio.DeleteServerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.texture_studio.DeleteServerResponse)
  return target;
}

size_t DeleteServerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.texture_studio.DeleteServerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteServerResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.texture_studio.DeleteServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteServerResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteServerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.texture_studio.DeleteServerResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.texture_studio.DeleteServerResponse)
    MergeFrom(*source);
  }
}

void DeleteServerResponse::MergeFrom(const DeleteServerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.texture_studio.DeleteServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteServerResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.texture_studio.DeleteServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteServerResponse::CopyFrom(const DeleteServerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.texture_studio.DeleteServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteServerResponse::IsInitialized() const {
  return true;
}

void DeleteServerResponse::InternalSwap(DeleteServerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteServerResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace texture_studio
}  // namespace mruv
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mruv::texture_studio::CreateServerRequest* Arena::CreateMaybeMessage< ::mruv::texture_studio::CreateServerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::texture_studio::CreateServerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::texture_studio::CreateServerResponse* Arena::CreateMaybeMessage< ::mruv::texture_studio::CreateServerResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::texture_studio::CreateServerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::texture_studio::GetServersRequest* Arena::CreateMaybeMessage< ::mruv::texture_studio::GetServersRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::texture_studio::GetServersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::texture_studio::GetServersResponse* Arena::CreateMaybeMessage< ::mruv::texture_studio::GetServersResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::texture_studio::GetServersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::texture_studio::MyServerRequest* Arena::CreateMaybeMessage< ::mruv::texture_studio::MyServerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::texture_studio::MyServerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::texture_studio::MyServerResponse* Arena::CreateMaybeMessage< ::mruv::texture_studio::MyServerResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::texture_studio::MyServerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::texture_studio::TransferOwnershipRequest* Arena::CreateMaybeMessage< ::mruv::texture_studio::TransferOwnershipRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::texture_studio::TransferOwnershipRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::texture_studio::TransferOwnershipResponse* Arena::CreateMaybeMessage< ::mruv::texture_studio::TransferOwnershipResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::texture_studio::TransferOwnershipResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::texture_studio::DeleteServerRequest* Arena::CreateMaybeMessage< ::mruv::texture_studio::DeleteServerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::texture_studio::DeleteServerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::texture_studio::DeleteServerResponse* Arena::CreateMaybeMessage< ::mruv::texture_studio::DeleteServerResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::texture_studio::DeleteServerResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
