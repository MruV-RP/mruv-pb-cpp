// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: punishments/punishments.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_punishments_2fpunishments_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_punishments_2fpunishments_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_punishments_2fpunishments_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_punishments_2fpunishments_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[57]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_punishments_2fpunishments_2eproto;
namespace mruv {
namespace punishments {
class AdminJailMessage;
class AdminJailMessageDefaultTypeInternal;
extern AdminJailMessageDefaultTypeInternal _AdminJailMessage_default_instance_;
class AdminJailRequest;
class AdminJailRequestDefaultTypeInternal;
extern AdminJailRequestDefaultTypeInternal _AdminJailRequest_default_instance_;
class AdminJailResponse;
class AdminJailResponseDefaultTypeInternal;
extern AdminJailResponseDefaultTypeInternal _AdminJailResponse_default_instance_;
class BanMessage;
class BanMessageDefaultTypeInternal;
extern BanMessageDefaultTypeInternal _BanMessage_default_instance_;
class BanRequest;
class BanRequestDefaultTypeInternal;
extern BanRequestDefaultTypeInternal _BanRequest_default_instance_;
class BanResponse;
class BanResponseDefaultTypeInternal;
extern BanResponseDefaultTypeInternal _BanResponse_default_instance_;
class BlockMessage;
class BlockMessageDefaultTypeInternal;
extern BlockMessageDefaultTypeInternal _BlockMessage_default_instance_;
class BlockRequest;
class BlockRequestDefaultTypeInternal;
extern BlockRequestDefaultTypeInternal _BlockRequest_default_instance_;
class BlockResponse;
class BlockResponseDefaultTypeInternal;
extern BlockResponseDefaultTypeInternal _BlockResponse_default_instance_;
class GetBanRequest;
class GetBanRequestDefaultTypeInternal;
extern GetBanRequestDefaultTypeInternal _GetBanRequest_default_instance_;
class GetBlockRequest;
class GetBlockRequestDefaultTypeInternal;
extern GetBlockRequestDefaultTypeInternal _GetBlockRequest_default_instance_;
class GetPlayerAdminJailRequest;
class GetPlayerAdminJailRequestDefaultTypeInternal;
extern GetPlayerAdminJailRequestDefaultTypeInternal _GetPlayerAdminJailRequest_default_instance_;
class GetPlayerAdminJailResponse;
class GetPlayerAdminJailResponseDefaultTypeInternal;
extern GetPlayerAdminJailResponseDefaultTypeInternal _GetPlayerAdminJailResponse_default_instance_;
class GetPlayerBansRequest;
class GetPlayerBansRequestDefaultTypeInternal;
extern GetPlayerBansRequestDefaultTypeInternal _GetPlayerBansRequest_default_instance_;
class GetPlayerBansResponse;
class GetPlayerBansResponseDefaultTypeInternal;
extern GetPlayerBansResponseDefaultTypeInternal _GetPlayerBansResponse_default_instance_;
class GetPlayerWarnsRequest;
class GetPlayerWarnsRequestDefaultTypeInternal;
extern GetPlayerWarnsRequestDefaultTypeInternal _GetPlayerWarnsRequest_default_instance_;
class GetPlayerWarnsResponse;
class GetPlayerWarnsResponseDefaultTypeInternal;
extern GetPlayerWarnsResponseDefaultTypeInternal _GetPlayerWarnsResponse_default_instance_;
class GetWarnRequest;
class GetWarnRequestDefaultTypeInternal;
extern GetWarnRequestDefaultTypeInternal _GetWarnRequest_default_instance_;
class IsCharacterBlockedRequest;
class IsCharacterBlockedRequestDefaultTypeInternal;
extern IsCharacterBlockedRequestDefaultTypeInternal _IsCharacterBlockedRequest_default_instance_;
class IsCharacterBlockedResponse;
class IsCharacterBlockedResponseDefaultTypeInternal;
extern IsCharacterBlockedResponseDefaultTypeInternal _IsCharacterBlockedResponse_default_instance_;
class IsCharacterJailedRequest;
class IsCharacterJailedRequestDefaultTypeInternal;
extern IsCharacterJailedRequestDefaultTypeInternal _IsCharacterJailedRequest_default_instance_;
class IsCharacterJailedResponse;
class IsCharacterJailedResponseDefaultTypeInternal;
extern IsCharacterJailedResponseDefaultTypeInternal _IsCharacterJailedResponse_default_instance_;
class IsPlayerBannedRequest;
class IsPlayerBannedRequestDefaultTypeInternal;
extern IsPlayerBannedRequestDefaultTypeInternal _IsPlayerBannedRequest_default_instance_;
class IsPlayerBannedResponse;
class IsPlayerBannedResponseDefaultTypeInternal;
extern IsPlayerBannedResponseDefaultTypeInternal _IsPlayerBannedResponse_default_instance_;
class MuteGlobalChatsRequest;
class MuteGlobalChatsRequestDefaultTypeInternal;
extern MuteGlobalChatsRequestDefaultTypeInternal _MuteGlobalChatsRequest_default_instance_;
class MuteGlobalChatsResponse;
class MuteGlobalChatsResponseDefaultTypeInternal;
extern MuteGlobalChatsResponseDefaultTypeInternal _MuteGlobalChatsResponse_default_instance_;
class UnAdminJailMessage;
class UnAdminJailMessageDefaultTypeInternal;
extern UnAdminJailMessageDefaultTypeInternal _UnAdminJailMessage_default_instance_;
class UnAdminJailRequest;
class UnAdminJailRequestDefaultTypeInternal;
extern UnAdminJailRequestDefaultTypeInternal _UnAdminJailRequest_default_instance_;
class UnAdminJailResponse;
class UnAdminJailResponseDefaultTypeInternal;
extern UnAdminJailResponseDefaultTypeInternal _UnAdminJailResponse_default_instance_;
class UnBanMessage;
class UnBanMessageDefaultTypeInternal;
extern UnBanMessageDefaultTypeInternal _UnBanMessage_default_instance_;
class UnBanRequest;
class UnBanRequestDefaultTypeInternal;
extern UnBanRequestDefaultTypeInternal _UnBanRequest_default_instance_;
class UnBanResponse;
class UnBanResponseDefaultTypeInternal;
extern UnBanResponseDefaultTypeInternal _UnBanResponse_default_instance_;
class UnBlockMessage;
class UnBlockMessageDefaultTypeInternal;
extern UnBlockMessageDefaultTypeInternal _UnBlockMessage_default_instance_;
class UnBlockRequest;
class UnBlockRequestDefaultTypeInternal;
extern UnBlockRequestDefaultTypeInternal _UnBlockRequest_default_instance_;
class UnBlockResponse;
class UnBlockResponseDefaultTypeInternal;
extern UnBlockResponseDefaultTypeInternal _UnBlockResponse_default_instance_;
class UnMuteGlobalChatsRequest;
class UnMuteGlobalChatsRequestDefaultTypeInternal;
extern UnMuteGlobalChatsRequestDefaultTypeInternal _UnMuteGlobalChatsRequest_default_instance_;
class UnMuteGlobalChatsResponse;
class UnMuteGlobalChatsResponseDefaultTypeInternal;
extern UnMuteGlobalChatsResponseDefaultTypeInternal _UnMuteGlobalChatsResponse_default_instance_;
class UnWarnMessage;
class UnWarnMessageDefaultTypeInternal;
extern UnWarnMessageDefaultTypeInternal _UnWarnMessage_default_instance_;
class UnWarnRequest;
class UnWarnRequestDefaultTypeInternal;
extern UnWarnRequestDefaultTypeInternal _UnWarnRequest_default_instance_;
class UnWarnResponse;
class UnWarnResponseDefaultTypeInternal;
extern UnWarnResponseDefaultTypeInternal _UnWarnResponse_default_instance_;
class WarnMessage;
class WarnMessageDefaultTypeInternal;
extern WarnMessageDefaultTypeInternal _WarnMessage_default_instance_;
class WarnRequest;
class WarnRequestDefaultTypeInternal;
extern WarnRequestDefaultTypeInternal _WarnRequest_default_instance_;
class WarnResponse;
class WarnResponseDefaultTypeInternal;
extern WarnResponseDefaultTypeInternal _WarnResponse_default_instance_;
class WatchAdminJailsRequest;
class WatchAdminJailsRequestDefaultTypeInternal;
extern WatchAdminJailsRequestDefaultTypeInternal _WatchAdminJailsRequest_default_instance_;
class WatchBansRequest;
class WatchBansRequestDefaultTypeInternal;
extern WatchBansRequestDefaultTypeInternal _WatchBansRequest_default_instance_;
class WatchBlocksRequest;
class WatchBlocksRequestDefaultTypeInternal;
extern WatchBlocksRequestDefaultTypeInternal _WatchBlocksRequest_default_instance_;
class WatchPlayerAcquittalsRequest;
class WatchPlayerAcquittalsRequestDefaultTypeInternal;
extern WatchPlayerAcquittalsRequestDefaultTypeInternal _WatchPlayerAcquittalsRequest_default_instance_;
class WatchPlayerAcquittalsResponse;
class WatchPlayerAcquittalsResponseDefaultTypeInternal;
extern WatchPlayerAcquittalsResponseDefaultTypeInternal _WatchPlayerAcquittalsResponse_default_instance_;
class WatchPlayerPunishmentsRequest;
class WatchPlayerPunishmentsRequestDefaultTypeInternal;
extern WatchPlayerPunishmentsRequestDefaultTypeInternal _WatchPlayerPunishmentsRequest_default_instance_;
class WatchPlayerPunishmentsResponse;
class WatchPlayerPunishmentsResponseDefaultTypeInternal;
extern WatchPlayerPunishmentsResponseDefaultTypeInternal _WatchPlayerPunishmentsResponse_default_instance_;
class WatchPunishmentsRequest;
class WatchPunishmentsRequestDefaultTypeInternal;
extern WatchPunishmentsRequestDefaultTypeInternal _WatchPunishmentsRequest_default_instance_;
class WatchPunishmentsResponse;
class WatchPunishmentsResponseDefaultTypeInternal;
extern WatchPunishmentsResponseDefaultTypeInternal _WatchPunishmentsResponse_default_instance_;
class WatchUnAdminJailsRequest;
class WatchUnAdminJailsRequestDefaultTypeInternal;
extern WatchUnAdminJailsRequestDefaultTypeInternal _WatchUnAdminJailsRequest_default_instance_;
class WatchUnBansRequest;
class WatchUnBansRequestDefaultTypeInternal;
extern WatchUnBansRequestDefaultTypeInternal _WatchUnBansRequest_default_instance_;
class WatchUnBlocksRequest;
class WatchUnBlocksRequestDefaultTypeInternal;
extern WatchUnBlocksRequestDefaultTypeInternal _WatchUnBlocksRequest_default_instance_;
class WatchUnWarnsRequest;
class WatchUnWarnsRequestDefaultTypeInternal;
extern WatchUnWarnsRequestDefaultTypeInternal _WatchUnWarnsRequest_default_instance_;
class WatchWarnsRequest;
class WatchWarnsRequestDefaultTypeInternal;
extern WatchWarnsRequestDefaultTypeInternal _WatchWarnsRequest_default_instance_;
}  // namespace punishments
}  // namespace mruv
PROTOBUF_NAMESPACE_OPEN
template<> ::mruv::punishments::AdminJailMessage* Arena::CreateMaybeMessage<::mruv::punishments::AdminJailMessage>(Arena*);
template<> ::mruv::punishments::AdminJailRequest* Arena::CreateMaybeMessage<::mruv::punishments::AdminJailRequest>(Arena*);
template<> ::mruv::punishments::AdminJailResponse* Arena::CreateMaybeMessage<::mruv::punishments::AdminJailResponse>(Arena*);
template<> ::mruv::punishments::BanMessage* Arena::CreateMaybeMessage<::mruv::punishments::BanMessage>(Arena*);
template<> ::mruv::punishments::BanRequest* Arena::CreateMaybeMessage<::mruv::punishments::BanRequest>(Arena*);
template<> ::mruv::punishments::BanResponse* Arena::CreateMaybeMessage<::mruv::punishments::BanResponse>(Arena*);
template<> ::mruv::punishments::BlockMessage* Arena::CreateMaybeMessage<::mruv::punishments::BlockMessage>(Arena*);
template<> ::mruv::punishments::BlockRequest* Arena::CreateMaybeMessage<::mruv::punishments::BlockRequest>(Arena*);
template<> ::mruv::punishments::BlockResponse* Arena::CreateMaybeMessage<::mruv::punishments::BlockResponse>(Arena*);
template<> ::mruv::punishments::GetBanRequest* Arena::CreateMaybeMessage<::mruv::punishments::GetBanRequest>(Arena*);
template<> ::mruv::punishments::GetBlockRequest* Arena::CreateMaybeMessage<::mruv::punishments::GetBlockRequest>(Arena*);
template<> ::mruv::punishments::GetPlayerAdminJailRequest* Arena::CreateMaybeMessage<::mruv::punishments::GetPlayerAdminJailRequest>(Arena*);
template<> ::mruv::punishments::GetPlayerAdminJailResponse* Arena::CreateMaybeMessage<::mruv::punishments::GetPlayerAdminJailResponse>(Arena*);
template<> ::mruv::punishments::GetPlayerBansRequest* Arena::CreateMaybeMessage<::mruv::punishments::GetPlayerBansRequest>(Arena*);
template<> ::mruv::punishments::GetPlayerBansResponse* Arena::CreateMaybeMessage<::mruv::punishments::GetPlayerBansResponse>(Arena*);
template<> ::mruv::punishments::GetPlayerWarnsRequest* Arena::CreateMaybeMessage<::mruv::punishments::GetPlayerWarnsRequest>(Arena*);
template<> ::mruv::punishments::GetPlayerWarnsResponse* Arena::CreateMaybeMessage<::mruv::punishments::GetPlayerWarnsResponse>(Arena*);
template<> ::mruv::punishments::GetWarnRequest* Arena::CreateMaybeMessage<::mruv::punishments::GetWarnRequest>(Arena*);
template<> ::mruv::punishments::IsCharacterBlockedRequest* Arena::CreateMaybeMessage<::mruv::punishments::IsCharacterBlockedRequest>(Arena*);
template<> ::mruv::punishments::IsCharacterBlockedResponse* Arena::CreateMaybeMessage<::mruv::punishments::IsCharacterBlockedResponse>(Arena*);
template<> ::mruv::punishments::IsCharacterJailedRequest* Arena::CreateMaybeMessage<::mruv::punishments::IsCharacterJailedRequest>(Arena*);
template<> ::mruv::punishments::IsCharacterJailedResponse* Arena::CreateMaybeMessage<::mruv::punishments::IsCharacterJailedResponse>(Arena*);
template<> ::mruv::punishments::IsPlayerBannedRequest* Arena::CreateMaybeMessage<::mruv::punishments::IsPlayerBannedRequest>(Arena*);
template<> ::mruv::punishments::IsPlayerBannedResponse* Arena::CreateMaybeMessage<::mruv::punishments::IsPlayerBannedResponse>(Arena*);
template<> ::mruv::punishments::MuteGlobalChatsRequest* Arena::CreateMaybeMessage<::mruv::punishments::MuteGlobalChatsRequest>(Arena*);
template<> ::mruv::punishments::MuteGlobalChatsResponse* Arena::CreateMaybeMessage<::mruv::punishments::MuteGlobalChatsResponse>(Arena*);
template<> ::mruv::punishments::UnAdminJailMessage* Arena::CreateMaybeMessage<::mruv::punishments::UnAdminJailMessage>(Arena*);
template<> ::mruv::punishments::UnAdminJailRequest* Arena::CreateMaybeMessage<::mruv::punishments::UnAdminJailRequest>(Arena*);
template<> ::mruv::punishments::UnAdminJailResponse* Arena::CreateMaybeMessage<::mruv::punishments::UnAdminJailResponse>(Arena*);
template<> ::mruv::punishments::UnBanMessage* Arena::CreateMaybeMessage<::mruv::punishments::UnBanMessage>(Arena*);
template<> ::mruv::punishments::UnBanRequest* Arena::CreateMaybeMessage<::mruv::punishments::UnBanRequest>(Arena*);
template<> ::mruv::punishments::UnBanResponse* Arena::CreateMaybeMessage<::mruv::punishments::UnBanResponse>(Arena*);
template<> ::mruv::punishments::UnBlockMessage* Arena::CreateMaybeMessage<::mruv::punishments::UnBlockMessage>(Arena*);
template<> ::mruv::punishments::UnBlockRequest* Arena::CreateMaybeMessage<::mruv::punishments::UnBlockRequest>(Arena*);
template<> ::mruv::punishments::UnBlockResponse* Arena::CreateMaybeMessage<::mruv::punishments::UnBlockResponse>(Arena*);
template<> ::mruv::punishments::UnMuteGlobalChatsRequest* Arena::CreateMaybeMessage<::mruv::punishments::UnMuteGlobalChatsRequest>(Arena*);
template<> ::mruv::punishments::UnMuteGlobalChatsResponse* Arena::CreateMaybeMessage<::mruv::punishments::UnMuteGlobalChatsResponse>(Arena*);
template<> ::mruv::punishments::UnWarnMessage* Arena::CreateMaybeMessage<::mruv::punishments::UnWarnMessage>(Arena*);
template<> ::mruv::punishments::UnWarnRequest* Arena::CreateMaybeMessage<::mruv::punishments::UnWarnRequest>(Arena*);
template<> ::mruv::punishments::UnWarnResponse* Arena::CreateMaybeMessage<::mruv::punishments::UnWarnResponse>(Arena*);
template<> ::mruv::punishments::WarnMessage* Arena::CreateMaybeMessage<::mruv::punishments::WarnMessage>(Arena*);
template<> ::mruv::punishments::WarnRequest* Arena::CreateMaybeMessage<::mruv::punishments::WarnRequest>(Arena*);
template<> ::mruv::punishments::WarnResponse* Arena::CreateMaybeMessage<::mruv::punishments::WarnResponse>(Arena*);
template<> ::mruv::punishments::WatchAdminJailsRequest* Arena::CreateMaybeMessage<::mruv::punishments::WatchAdminJailsRequest>(Arena*);
template<> ::mruv::punishments::WatchBansRequest* Arena::CreateMaybeMessage<::mruv::punishments::WatchBansRequest>(Arena*);
template<> ::mruv::punishments::WatchBlocksRequest* Arena::CreateMaybeMessage<::mruv::punishments::WatchBlocksRequest>(Arena*);
template<> ::mruv::punishments::WatchPlayerAcquittalsRequest* Arena::CreateMaybeMessage<::mruv::punishments::WatchPlayerAcquittalsRequest>(Arena*);
template<> ::mruv::punishments::WatchPlayerAcquittalsResponse* Arena::CreateMaybeMessage<::mruv::punishments::WatchPlayerAcquittalsResponse>(Arena*);
template<> ::mruv::punishments::WatchPlayerPunishmentsRequest* Arena::CreateMaybeMessage<::mruv::punishments::WatchPlayerPunishmentsRequest>(Arena*);
template<> ::mruv::punishments::WatchPlayerPunishmentsResponse* Arena::CreateMaybeMessage<::mruv::punishments::WatchPlayerPunishmentsResponse>(Arena*);
template<> ::mruv::punishments::WatchPunishmentsRequest* Arena::CreateMaybeMessage<::mruv::punishments::WatchPunishmentsRequest>(Arena*);
template<> ::mruv::punishments::WatchPunishmentsResponse* Arena::CreateMaybeMessage<::mruv::punishments::WatchPunishmentsResponse>(Arena*);
template<> ::mruv::punishments::WatchUnAdminJailsRequest* Arena::CreateMaybeMessage<::mruv::punishments::WatchUnAdminJailsRequest>(Arena*);
template<> ::mruv::punishments::WatchUnBansRequest* Arena::CreateMaybeMessage<::mruv::punishments::WatchUnBansRequest>(Arena*);
template<> ::mruv::punishments::WatchUnBlocksRequest* Arena::CreateMaybeMessage<::mruv::punishments::WatchUnBlocksRequest>(Arena*);
template<> ::mruv::punishments::WatchUnWarnsRequest* Arena::CreateMaybeMessage<::mruv::punishments::WatchUnWarnsRequest>(Arena*);
template<> ::mruv::punishments::WatchWarnsRequest* Arena::CreateMaybeMessage<::mruv::punishments::WatchWarnsRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mruv {
namespace punishments {

enum PunishmentType : int {
  UNKNOWN_PUNISHMENT = 0,
  BAN = 1,
  BLOCK = 2,
  WARN = 3,
  ADMIN_JAIL = 4,
  PunishmentType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PunishmentType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PunishmentType_IsValid(int value);
constexpr PunishmentType PunishmentType_MIN = UNKNOWN_PUNISHMENT;
constexpr PunishmentType PunishmentType_MAX = ADMIN_JAIL;
constexpr int PunishmentType_ARRAYSIZE = PunishmentType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PunishmentType_descriptor();
template<typename T>
inline const std::string& PunishmentType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PunishmentType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PunishmentType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PunishmentType_descriptor(), enum_t_value);
}
inline bool PunishmentType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PunishmentType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PunishmentType>(
    PunishmentType_descriptor(), name, value);
}
enum AcquittalsType : int {
  UNKNOWN_ACQUITAL = 0,
  UNBAN = 1,
  UNBLOCK = 2,
  UNWARN = 3,
  UN_ADMIN_JAIL = 4,
  AcquittalsType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AcquittalsType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AcquittalsType_IsValid(int value);
constexpr AcquittalsType AcquittalsType_MIN = UNKNOWN_ACQUITAL;
constexpr AcquittalsType AcquittalsType_MAX = UN_ADMIN_JAIL;
constexpr int AcquittalsType_ARRAYSIZE = AcquittalsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AcquittalsType_descriptor();
template<typename T>
inline const std::string& AcquittalsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AcquittalsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AcquittalsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AcquittalsType_descriptor(), enum_t_value);
}
inline bool AcquittalsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AcquittalsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AcquittalsType>(
    AcquittalsType_descriptor(), name, value);
}
// ===================================================================

class BanMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.BanMessage) */ {
 public:
  inline BanMessage() : BanMessage(nullptr) {}
  virtual ~BanMessage();

  BanMessage(const BanMessage& from);
  BanMessage(BanMessage&& from) noexcept
    : BanMessage() {
    *this = ::std::move(from);
  }

  inline BanMessage& operator=(const BanMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline BanMessage& operator=(BanMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BanMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BanMessage* internal_default_instance() {
    return reinterpret_cast<const BanMessage*>(
               &_BanMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BanMessage& a, BanMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(BanMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BanMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BanMessage* New() const final {
    return CreateMaybeMessage<BanMessage>(nullptr);
  }

  BanMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BanMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BanMessage& from);
  void MergeFrom(const BanMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BanMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.BanMessage";
  }
  protected:
  explicit BanMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 3,
    kReasonFieldNumber = 5,
    kPlayerFieldNumber = 1,
    kCharacterFieldNumber = 2,
    kExpirationDateFieldNumber = 4,
    kBanDateFieldNumber = 7,
    kAdminFieldNumber = 6,
    kActiveFieldNumber = 8,
    kUnbanDateFieldNumber = 9,
    kUnbanAdminFieldNumber = 10,
  };
  // string ip = 3;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string reason = 5;
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // uint32 player = 1;
  void clear_player();
  ::PROTOBUF_NAMESPACE_ID::uint32 player() const;
  void set_player(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_player() const;
  void _internal_set_player(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 character = 2;
  void clear_character();
  ::PROTOBUF_NAMESPACE_ID::uint32 character() const;
  void set_character(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_character() const;
  void _internal_set_character(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int64 expiration_date = 4;
  void clear_expiration_date();
  ::PROTOBUF_NAMESPACE_ID::int64 expiration_date() const;
  void set_expiration_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_expiration_date() const;
  void _internal_set_expiration_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 ban_date = 7;
  void clear_ban_date();
  ::PROTOBUF_NAMESPACE_ID::int64 ban_date() const;
  void set_ban_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ban_date() const;
  void _internal_set_ban_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 admin = 6;
  void clear_admin();
  ::PROTOBUF_NAMESPACE_ID::uint32 admin() const;
  void set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_admin() const;
  void _internal_set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool active = 8;
  void clear_active();
  bool active() const;
  void set_active(bool value);
  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);
  public:

  // int64 unban_date = 9;
  void clear_unban_date();
  ::PROTOBUF_NAMESPACE_ID::int64 unban_date() const;
  void set_unban_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_unban_date() const;
  void _internal_set_unban_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 unban_admin = 10;
  void clear_unban_admin();
  ::PROTOBUF_NAMESPACE_ID::uint32 unban_admin() const;
  void set_unban_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_unban_admin() const;
  void _internal_set_unban_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.punishments.BanMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  ::PROTOBUF_NAMESPACE_ID::uint32 player_;
  ::PROTOBUF_NAMESPACE_ID::uint32 character_;
  ::PROTOBUF_NAMESPACE_ID::int64 expiration_date_;
  ::PROTOBUF_NAMESPACE_ID::int64 ban_date_;
  ::PROTOBUF_NAMESPACE_ID::uint32 admin_;
  bool active_;
  ::PROTOBUF_NAMESPACE_ID::int64 unban_date_;
  ::PROTOBUF_NAMESPACE_ID::uint32 unban_admin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class WarnMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.WarnMessage) */ {
 public:
  inline WarnMessage() : WarnMessage(nullptr) {}
  virtual ~WarnMessage();

  WarnMessage(const WarnMessage& from);
  WarnMessage(WarnMessage&& from) noexcept
    : WarnMessage() {
    *this = ::std::move(from);
  }

  inline WarnMessage& operator=(const WarnMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline WarnMessage& operator=(WarnMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WarnMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WarnMessage* internal_default_instance() {
    return reinterpret_cast<const WarnMessage*>(
               &_WarnMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WarnMessage& a, WarnMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(WarnMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WarnMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WarnMessage* New() const final {
    return CreateMaybeMessage<WarnMessage>(nullptr);
  }

  WarnMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WarnMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WarnMessage& from);
  void MergeFrom(const WarnMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WarnMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.WarnMessage";
  }
  protected:
  explicit WarnMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 4,
    kPlayerFieldNumber = 1,
    kCharacterFieldNumber = 2,
    kExpirationDateFieldNumber = 3,
    kWarnDateFieldNumber = 6,
    kAdminFieldNumber = 5,
    kActiveFieldNumber = 7,
    kUnwarnDateFieldNumber = 8,
    kUnwarnAdminFieldNumber = 9,
  };
  // string reason = 4;
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // uint32 player = 1;
  void clear_player();
  ::PROTOBUF_NAMESPACE_ID::uint32 player() const;
  void set_player(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_player() const;
  void _internal_set_player(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 character = 2;
  void clear_character();
  ::PROTOBUF_NAMESPACE_ID::uint32 character() const;
  void set_character(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_character() const;
  void _internal_set_character(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int64 expiration_date = 3;
  void clear_expiration_date();
  ::PROTOBUF_NAMESPACE_ID::int64 expiration_date() const;
  void set_expiration_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_expiration_date() const;
  void _internal_set_expiration_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 warn_date = 6;
  void clear_warn_date();
  ::PROTOBUF_NAMESPACE_ID::int64 warn_date() const;
  void set_warn_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_warn_date() const;
  void _internal_set_warn_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 admin = 5;
  void clear_admin();
  ::PROTOBUF_NAMESPACE_ID::uint32 admin() const;
  void set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_admin() const;
  void _internal_set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool active = 7;
  void clear_active();
  bool active() const;
  void set_active(bool value);
  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);
  public:

  // int64 unwarn_date = 8;
  void clear_unwarn_date();
  ::PROTOBUF_NAMESPACE_ID::int64 unwarn_date() const;
  void set_unwarn_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_unwarn_date() const;
  void _internal_set_unwarn_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 unwarn_admin = 9;
  void clear_unwarn_admin();
  ::PROTOBUF_NAMESPACE_ID::uint32 unwarn_admin() const;
  void set_unwarn_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_unwarn_admin() const;
  void _internal_set_unwarn_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.punishments.WarnMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  ::PROTOBUF_NAMESPACE_ID::uint32 player_;
  ::PROTOBUF_NAMESPACE_ID::uint32 character_;
  ::PROTOBUF_NAMESPACE_ID::int64 expiration_date_;
  ::PROTOBUF_NAMESPACE_ID::int64 warn_date_;
  ::PROTOBUF_NAMESPACE_ID::uint32 admin_;
  bool active_;
  ::PROTOBUF_NAMESPACE_ID::int64 unwarn_date_;
  ::PROTOBUF_NAMESPACE_ID::uint32 unwarn_admin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class BlockMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.BlockMessage) */ {
 public:
  inline BlockMessage() : BlockMessage(nullptr) {}
  virtual ~BlockMessage();

  BlockMessage(const BlockMessage& from);
  BlockMessage(BlockMessage&& from) noexcept
    : BlockMessage() {
    *this = ::std::move(from);
  }

  inline BlockMessage& operator=(const BlockMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockMessage& operator=(BlockMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockMessage* internal_default_instance() {
    return reinterpret_cast<const BlockMessage*>(
               &_BlockMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BlockMessage& a, BlockMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockMessage* New() const final {
    return CreateMaybeMessage<BlockMessage>(nullptr);
  }

  BlockMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockMessage& from);
  void MergeFrom(const BlockMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.BlockMessage";
  }
  protected:
  explicit BlockMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 3,
    kPlayerFieldNumber = 1,
    kCharacterFieldNumber = 2,
    kBlockDateFieldNumber = 5,
    kAdminFieldNumber = 4,
    kActiveFieldNumber = 6,
    kUnblockDateFieldNumber = 7,
    kUnblockAdminFieldNumber = 8,
  };
  // string reason = 3;
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // uint32 player = 1;
  void clear_player();
  ::PROTOBUF_NAMESPACE_ID::uint32 player() const;
  void set_player(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_player() const;
  void _internal_set_player(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 character = 2;
  void clear_character();
  ::PROTOBUF_NAMESPACE_ID::uint32 character() const;
  void set_character(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_character() const;
  void _internal_set_character(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int64 block_date = 5;
  void clear_block_date();
  ::PROTOBUF_NAMESPACE_ID::int64 block_date() const;
  void set_block_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_block_date() const;
  void _internal_set_block_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 admin = 4;
  void clear_admin();
  ::PROTOBUF_NAMESPACE_ID::uint32 admin() const;
  void set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_admin() const;
  void _internal_set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool active = 6;
  void clear_active();
  bool active() const;
  void set_active(bool value);
  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);
  public:

  // int64 unblock_date = 7;
  void clear_unblock_date();
  ::PROTOBUF_NAMESPACE_ID::int64 unblock_date() const;
  void set_unblock_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_unblock_date() const;
  void _internal_set_unblock_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 unblock_admin = 8;
  void clear_unblock_admin();
  ::PROTOBUF_NAMESPACE_ID::uint32 unblock_admin() const;
  void set_unblock_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_unblock_admin() const;
  void _internal_set_unblock_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.punishments.BlockMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  ::PROTOBUF_NAMESPACE_ID::uint32 player_;
  ::PROTOBUF_NAMESPACE_ID::uint32 character_;
  ::PROTOBUF_NAMESPACE_ID::int64 block_date_;
  ::PROTOBUF_NAMESPACE_ID::uint32 admin_;
  bool active_;
  ::PROTOBUF_NAMESPACE_ID::int64 unblock_date_;
  ::PROTOBUF_NAMESPACE_ID::uint32 unblock_admin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class AdminJailMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.AdminJailMessage) */ {
 public:
  inline AdminJailMessage() : AdminJailMessage(nullptr) {}
  virtual ~AdminJailMessage();

  AdminJailMessage(const AdminJailMessage& from);
  AdminJailMessage(AdminJailMessage&& from) noexcept
    : AdminJailMessage() {
    *this = ::std::move(from);
  }

  inline AdminJailMessage& operator=(const AdminJailMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdminJailMessage& operator=(AdminJailMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AdminJailMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdminJailMessage* internal_default_instance() {
    return reinterpret_cast<const AdminJailMessage*>(
               &_AdminJailMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AdminJailMessage& a, AdminJailMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(AdminJailMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdminJailMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AdminJailMessage* New() const final {
    return CreateMaybeMessage<AdminJailMessage>(nullptr);
  }

  AdminJailMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AdminJailMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AdminJailMessage& from);
  void MergeFrom(const AdminJailMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdminJailMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.AdminJailMessage";
  }
  protected:
  explicit AdminJailMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 3,
    kPlayerFieldNumber = 1,
    kCharacterFieldNumber = 2,
    kAjDateFieldNumber = 5,
    kAdminFieldNumber = 4,
    kJailTimeFieldNumber = 6,
  };
  // string reason = 3;
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // uint32 player = 1;
  void clear_player();
  ::PROTOBUF_NAMESPACE_ID::uint32 player() const;
  void set_player(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_player() const;
  void _internal_set_player(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 character = 2;
  void clear_character();
  ::PROTOBUF_NAMESPACE_ID::uint32 character() const;
  void set_character(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_character() const;
  void _internal_set_character(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int64 aj_date = 5;
  void clear_aj_date();
  ::PROTOBUF_NAMESPACE_ID::int64 aj_date() const;
  void set_aj_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_aj_date() const;
  void _internal_set_aj_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 admin = 4;
  void clear_admin();
  ::PROTOBUF_NAMESPACE_ID::uint32 admin() const;
  void set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_admin() const;
  void _internal_set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 jail_time = 6;
  void clear_jail_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 jail_time() const;
  void set_jail_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_jail_time() const;
  void _internal_set_jail_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.punishments.AdminJailMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  ::PROTOBUF_NAMESPACE_ID::uint32 player_;
  ::PROTOBUF_NAMESPACE_ID::uint32 character_;
  ::PROTOBUF_NAMESPACE_ID::int64 aj_date_;
  ::PROTOBUF_NAMESPACE_ID::uint32 admin_;
  ::PROTOBUF_NAMESPACE_ID::uint32 jail_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class UnBanMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.UnBanMessage) */ {
 public:
  inline UnBanMessage() : UnBanMessage(nullptr) {}
  virtual ~UnBanMessage();

  UnBanMessage(const UnBanMessage& from);
  UnBanMessage(UnBanMessage&& from) noexcept
    : UnBanMessage() {
    *this = ::std::move(from);
  }

  inline UnBanMessage& operator=(const UnBanMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnBanMessage& operator=(UnBanMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnBanMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnBanMessage* internal_default_instance() {
    return reinterpret_cast<const UnBanMessage*>(
               &_UnBanMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UnBanMessage& a, UnBanMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(UnBanMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnBanMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnBanMessage* New() const final {
    return CreateMaybeMessage<UnBanMessage>(nullptr);
  }

  UnBanMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnBanMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnBanMessage& from);
  void MergeFrom(const UnBanMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnBanMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.UnBanMessage";
  }
  protected:
  explicit UnBanMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
    kBanIdFieldNumber = 2,
  };
  // uint32 player = 1;
  void clear_player();
  ::PROTOBUF_NAMESPACE_ID::uint32 player() const;
  void set_player(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_player() const;
  void _internal_set_player(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ban_id = 2;
  void clear_ban_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 ban_id() const;
  void set_ban_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ban_id() const;
  void _internal_set_ban_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.punishments.UnBanMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 player_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ban_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class UnBlockMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.UnBlockMessage) */ {
 public:
  inline UnBlockMessage() : UnBlockMessage(nullptr) {}
  virtual ~UnBlockMessage();

  UnBlockMessage(const UnBlockMessage& from);
  UnBlockMessage(UnBlockMessage&& from) noexcept
    : UnBlockMessage() {
    *this = ::std::move(from);
  }

  inline UnBlockMessage& operator=(const UnBlockMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnBlockMessage& operator=(UnBlockMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnBlockMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnBlockMessage* internal_default_instance() {
    return reinterpret_cast<const UnBlockMessage*>(
               &_UnBlockMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UnBlockMessage& a, UnBlockMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(UnBlockMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnBlockMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnBlockMessage* New() const final {
    return CreateMaybeMessage<UnBlockMessage>(nullptr);
  }

  UnBlockMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnBlockMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnBlockMessage& from);
  void MergeFrom(const UnBlockMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnBlockMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.UnBlockMessage";
  }
  protected:
  explicit UnBlockMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
    kBlockIdFieldNumber = 2,
  };
  // uint32 player = 1;
  void clear_player();
  ::PROTOBUF_NAMESPACE_ID::uint32 player() const;
  void set_player(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_player() const;
  void _internal_set_player(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 block_id = 2;
  void clear_block_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 block_id() const;
  void set_block_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_block_id() const;
  void _internal_set_block_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.punishments.UnBlockMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 player_;
  ::PROTOBUF_NAMESPACE_ID::uint32 block_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class UnWarnMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.UnWarnMessage) */ {
 public:
  inline UnWarnMessage() : UnWarnMessage(nullptr) {}
  virtual ~UnWarnMessage();

  UnWarnMessage(const UnWarnMessage& from);
  UnWarnMessage(UnWarnMessage&& from) noexcept
    : UnWarnMessage() {
    *this = ::std::move(from);
  }

  inline UnWarnMessage& operator=(const UnWarnMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnWarnMessage& operator=(UnWarnMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnWarnMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnWarnMessage* internal_default_instance() {
    return reinterpret_cast<const UnWarnMessage*>(
               &_UnWarnMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UnWarnMessage& a, UnWarnMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(UnWarnMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnWarnMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnWarnMessage* New() const final {
    return CreateMaybeMessage<UnWarnMessage>(nullptr);
  }

  UnWarnMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnWarnMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnWarnMessage& from);
  void MergeFrom(const UnWarnMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnWarnMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.UnWarnMessage";
  }
  protected:
  explicit UnWarnMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
    kWarnIdFieldNumber = 2,
  };
  // uint32 player = 1;
  void clear_player();
  ::PROTOBUF_NAMESPACE_ID::uint32 player() const;
  void set_player(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_player() const;
  void _internal_set_player(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 warn_id = 2;
  void clear_warn_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 warn_id() const;
  void set_warn_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_warn_id() const;
  void _internal_set_warn_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.punishments.UnWarnMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 player_;
  ::PROTOBUF_NAMESPACE_ID::uint32 warn_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class UnAdminJailMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.UnAdminJailMessage) */ {
 public:
  inline UnAdminJailMessage() : UnAdminJailMessage(nullptr) {}
  virtual ~UnAdminJailMessage();

  UnAdminJailMessage(const UnAdminJailMessage& from);
  UnAdminJailMessage(UnAdminJailMessage&& from) noexcept
    : UnAdminJailMessage() {
    *this = ::std::move(from);
  }

  inline UnAdminJailMessage& operator=(const UnAdminJailMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnAdminJailMessage& operator=(UnAdminJailMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnAdminJailMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnAdminJailMessage* internal_default_instance() {
    return reinterpret_cast<const UnAdminJailMessage*>(
               &_UnAdminJailMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UnAdminJailMessage& a, UnAdminJailMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(UnAdminJailMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnAdminJailMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnAdminJailMessage* New() const final {
    return CreateMaybeMessage<UnAdminJailMessage>(nullptr);
  }

  UnAdminJailMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnAdminJailMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnAdminJailMessage& from);
  void MergeFrom(const UnAdminJailMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnAdminJailMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.UnAdminJailMessage";
  }
  protected:
  explicit UnAdminJailMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
    kCharacterFieldNumber = 2,
  };
  // uint32 player = 1;
  void clear_player();
  ::PROTOBUF_NAMESPACE_ID::uint32 player() const;
  void set_player(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_player() const;
  void _internal_set_player(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 character = 2;
  void clear_character();
  ::PROTOBUF_NAMESPACE_ID::uint32 character() const;
  void set_character(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_character() const;
  void _internal_set_character(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.punishments.UnAdminJailMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 player_;
  ::PROTOBUF_NAMESPACE_ID::uint32 character_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class BanRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.BanRequest) */ {
 public:
  inline BanRequest() : BanRequest(nullptr) {}
  virtual ~BanRequest();

  BanRequest(const BanRequest& from);
  BanRequest(BanRequest&& from) noexcept
    : BanRequest() {
    *this = ::std::move(from);
  }

  inline BanRequest& operator=(const BanRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BanRequest& operator=(BanRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BanRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BanRequest* internal_default_instance() {
    return reinterpret_cast<const BanRequest*>(
               &_BanRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(BanRequest& a, BanRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BanRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BanRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BanRequest* New() const final {
    return CreateMaybeMessage<BanRequest>(nullptr);
  }

  BanRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BanRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BanRequest& from);
  void MergeFrom(const BanRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BanRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.BanRequest";
  }
  protected:
  explicit BanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 3,
    kReasonFieldNumber = 5,
    kPlayerFieldNumber = 1,
    kCharacterFieldNumber = 2,
    kTimeFieldNumber = 4,
    kAdminFieldNumber = 6,
  };
  // string ip = 3;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string reason = 5;
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // uint32 player = 1;
  void clear_player();
  ::PROTOBUF_NAMESPACE_ID::uint32 player() const;
  void set_player(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_player() const;
  void _internal_set_player(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 character = 2;
  void clear_character();
  ::PROTOBUF_NAMESPACE_ID::uint32 character() const;
  void set_character(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_character() const;
  void _internal_set_character(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 time = 4;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 admin = 6;
  void clear_admin();
  ::PROTOBUF_NAMESPACE_ID::uint32 admin() const;
  void set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_admin() const;
  void _internal_set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.punishments.BanRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  ::PROTOBUF_NAMESPACE_ID::uint32 player_;
  ::PROTOBUF_NAMESPACE_ID::uint32 character_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 admin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class BanResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.BanResponse) */ {
 public:
  inline BanResponse() : BanResponse(nullptr) {}
  virtual ~BanResponse();

  BanResponse(const BanResponse& from);
  BanResponse(BanResponse&& from) noexcept
    : BanResponse() {
    *this = ::std::move(from);
  }

  inline BanResponse& operator=(const BanResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BanResponse& operator=(BanResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BanResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BanResponse* internal_default_instance() {
    return reinterpret_cast<const BanResponse*>(
               &_BanResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BanResponse& a, BanResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BanResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BanResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BanResponse* New() const final {
    return CreateMaybeMessage<BanResponse>(nullptr);
  }

  BanResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BanResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BanResponse& from);
  void MergeFrom(const BanResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BanResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.BanResponse";
  }
  protected:
  explicit BanResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBanIdFieldNumber = 1,
  };
  // uint32 ban_id = 1;
  void clear_ban_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 ban_id() const;
  void set_ban_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ban_id() const;
  void _internal_set_ban_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.punishments.BanResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ban_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class BlockRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.BlockRequest) */ {
 public:
  inline BlockRequest() : BlockRequest(nullptr) {}
  virtual ~BlockRequest();

  BlockRequest(const BlockRequest& from);
  BlockRequest(BlockRequest&& from) noexcept
    : BlockRequest() {
    *this = ::std::move(from);
  }

  inline BlockRequest& operator=(const BlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockRequest& operator=(BlockRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockRequest* internal_default_instance() {
    return reinterpret_cast<const BlockRequest*>(
               &_BlockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(BlockRequest& a, BlockRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockRequest* New() const final {
    return CreateMaybeMessage<BlockRequest>(nullptr);
  }

  BlockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockRequest& from);
  void MergeFrom(const BlockRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.BlockRequest";
  }
  protected:
  explicit BlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kCharacterFieldNumber = 1,
    kAdminFieldNumber = 3,
  };
  // string reason = 2;
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // uint32 character = 1;
  void clear_character();
  ::PROTOBUF_NAMESPACE_ID::uint32 character() const;
  void set_character(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_character() const;
  void _internal_set_character(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 admin = 3;
  void clear_admin();
  ::PROTOBUF_NAMESPACE_ID::uint32 admin() const;
  void set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_admin() const;
  void _internal_set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.punishments.BlockRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  ::PROTOBUF_NAMESPACE_ID::uint32 character_;
  ::PROTOBUF_NAMESPACE_ID::uint32 admin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class BlockResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.BlockResponse) */ {
 public:
  inline BlockResponse() : BlockResponse(nullptr) {}
  virtual ~BlockResponse();

  BlockResponse(const BlockResponse& from);
  BlockResponse(BlockResponse&& from) noexcept
    : BlockResponse() {
    *this = ::std::move(from);
  }

  inline BlockResponse& operator=(const BlockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockResponse& operator=(BlockResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockResponse* internal_default_instance() {
    return reinterpret_cast<const BlockResponse*>(
               &_BlockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(BlockResponse& a, BlockResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockResponse* New() const final {
    return CreateMaybeMessage<BlockResponse>(nullptr);
  }

  BlockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockResponse& from);
  void MergeFrom(const BlockResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.BlockResponse";
  }
  protected:
  explicit BlockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockIdFieldNumber = 1,
  };
  // uint32 block_id = 1;
  void clear_block_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 block_id() const;
  void set_block_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_block_id() const;
  void _internal_set_block_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.punishments.BlockResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 block_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class WarnRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.WarnRequest) */ {
 public:
  inline WarnRequest() : WarnRequest(nullptr) {}
  virtual ~WarnRequest();

  WarnRequest(const WarnRequest& from);
  WarnRequest(WarnRequest&& from) noexcept
    : WarnRequest() {
    *this = ::std::move(from);
  }

  inline WarnRequest& operator=(const WarnRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WarnRequest& operator=(WarnRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WarnRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WarnRequest* internal_default_instance() {
    return reinterpret_cast<const WarnRequest*>(
               &_WarnRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(WarnRequest& a, WarnRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WarnRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WarnRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WarnRequest* New() const final {
    return CreateMaybeMessage<WarnRequest>(nullptr);
  }

  WarnRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WarnRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WarnRequest& from);
  void MergeFrom(const WarnRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WarnRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.WarnRequest";
  }
  protected:
  explicit WarnRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 4,
    kPlayerFieldNumber = 1,
    kCharacterFieldNumber = 2,
    kTimeFieldNumber = 3,
    kAdminFieldNumber = 5,
  };
  // string reason = 4;
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // uint32 player = 1;
  void clear_player();
  ::PROTOBUF_NAMESPACE_ID::uint32 player() const;
  void set_player(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_player() const;
  void _internal_set_player(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 character = 2;
  void clear_character();
  ::PROTOBUF_NAMESPACE_ID::uint32 character() const;
  void set_character(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_character() const;
  void _internal_set_character(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 time = 3;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 admin = 5;
  void clear_admin();
  ::PROTOBUF_NAMESPACE_ID::uint32 admin() const;
  void set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_admin() const;
  void _internal_set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.punishments.WarnRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  ::PROTOBUF_NAMESPACE_ID::uint32 player_;
  ::PROTOBUF_NAMESPACE_ID::uint32 character_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 admin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class WarnResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.WarnResponse) */ {
 public:
  inline WarnResponse() : WarnResponse(nullptr) {}
  virtual ~WarnResponse();

  WarnResponse(const WarnResponse& from);
  WarnResponse(WarnResponse&& from) noexcept
    : WarnResponse() {
    *this = ::std::move(from);
  }

  inline WarnResponse& operator=(const WarnResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WarnResponse& operator=(WarnResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WarnResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WarnResponse* internal_default_instance() {
    return reinterpret_cast<const WarnResponse*>(
               &_WarnResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(WarnResponse& a, WarnResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WarnResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WarnResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WarnResponse* New() const final {
    return CreateMaybeMessage<WarnResponse>(nullptr);
  }

  WarnResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WarnResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WarnResponse& from);
  void MergeFrom(const WarnResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WarnResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.WarnResponse";
  }
  protected:
  explicit WarnResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWarnIdFieldNumber = 1,
  };
  // uint32 warn_id = 1;
  void clear_warn_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 warn_id() const;
  void set_warn_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_warn_id() const;
  void _internal_set_warn_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.punishments.WarnResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 warn_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class AdminJailRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.AdminJailRequest) */ {
 public:
  inline AdminJailRequest() : AdminJailRequest(nullptr) {}
  virtual ~AdminJailRequest();

  AdminJailRequest(const AdminJailRequest& from);
  AdminJailRequest(AdminJailRequest&& from) noexcept
    : AdminJailRequest() {
    *this = ::std::move(from);
  }

  inline AdminJailRequest& operator=(const AdminJailRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdminJailRequest& operator=(AdminJailRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AdminJailRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdminJailRequest* internal_default_instance() {
    return reinterpret_cast<const AdminJailRequest*>(
               &_AdminJailRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(AdminJailRequest& a, AdminJailRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AdminJailRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdminJailRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AdminJailRequest* New() const final {
    return CreateMaybeMessage<AdminJailRequest>(nullptr);
  }

  AdminJailRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AdminJailRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AdminJailRequest& from);
  void MergeFrom(const AdminJailRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdminJailRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.AdminJailRequest";
  }
  protected:
  explicit AdminJailRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 3,
    kCharacterFieldNumber = 1,
    kTimeFieldNumber = 2,
    kAdminFieldNumber = 4,
  };
  // string reason = 3;
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // uint32 character = 1;
  void clear_character();
  ::PROTOBUF_NAMESPACE_ID::uint32 character() const;
  void set_character(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_character() const;
  void _internal_set_character(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 time = 2;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 admin = 4;
  void clear_admin();
  ::PROTOBUF_NAMESPACE_ID::uint32 admin() const;
  void set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_admin() const;
  void _internal_set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.punishments.AdminJailRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  ::PROTOBUF_NAMESPACE_ID::uint32 character_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 admin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class AdminJailResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.AdminJailResponse) */ {
 public:
  inline AdminJailResponse() : AdminJailResponse(nullptr) {}
  virtual ~AdminJailResponse();

  AdminJailResponse(const AdminJailResponse& from);
  AdminJailResponse(AdminJailResponse&& from) noexcept
    : AdminJailResponse() {
    *this = ::std::move(from);
  }

  inline AdminJailResponse& operator=(const AdminJailResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdminJailResponse& operator=(AdminJailResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AdminJailResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdminJailResponse* internal_default_instance() {
    return reinterpret_cast<const AdminJailResponse*>(
               &_AdminJailResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(AdminJailResponse& a, AdminJailResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AdminJailResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdminJailResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AdminJailResponse* New() const final {
    return CreateMaybeMessage<AdminJailResponse>(nullptr);
  }

  AdminJailResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AdminJailResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AdminJailResponse& from);
  void MergeFrom(const AdminJailResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdminJailResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.AdminJailResponse";
  }
  protected:
  explicit AdminJailResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.punishments.AdminJailResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class MuteGlobalChatsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.MuteGlobalChatsRequest) */ {
 public:
  inline MuteGlobalChatsRequest() : MuteGlobalChatsRequest(nullptr) {}
  virtual ~MuteGlobalChatsRequest();

  MuteGlobalChatsRequest(const MuteGlobalChatsRequest& from);
  MuteGlobalChatsRequest(MuteGlobalChatsRequest&& from) noexcept
    : MuteGlobalChatsRequest() {
    *this = ::std::move(from);
  }

  inline MuteGlobalChatsRequest& operator=(const MuteGlobalChatsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MuteGlobalChatsRequest& operator=(MuteGlobalChatsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MuteGlobalChatsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MuteGlobalChatsRequest* internal_default_instance() {
    return reinterpret_cast<const MuteGlobalChatsRequest*>(
               &_MuteGlobalChatsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(MuteGlobalChatsRequest& a, MuteGlobalChatsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MuteGlobalChatsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MuteGlobalChatsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MuteGlobalChatsRequest* New() const final {
    return CreateMaybeMessage<MuteGlobalChatsRequest>(nullptr);
  }

  MuteGlobalChatsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MuteGlobalChatsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MuteGlobalChatsRequest& from);
  void MergeFrom(const MuteGlobalChatsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MuteGlobalChatsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.MuteGlobalChatsRequest";
  }
  protected:
  explicit MuteGlobalChatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
  };
  // uint32 account = 1;
  void clear_account();
  ::PROTOBUF_NAMESPACE_ID::uint32 account() const;
  void set_account(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account() const;
  void _internal_set_account(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.punishments.MuteGlobalChatsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class MuteGlobalChatsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.MuteGlobalChatsResponse) */ {
 public:
  inline MuteGlobalChatsResponse() : MuteGlobalChatsResponse(nullptr) {}
  virtual ~MuteGlobalChatsResponse();

  MuteGlobalChatsResponse(const MuteGlobalChatsResponse& from);
  MuteGlobalChatsResponse(MuteGlobalChatsResponse&& from) noexcept
    : MuteGlobalChatsResponse() {
    *this = ::std::move(from);
  }

  inline MuteGlobalChatsResponse& operator=(const MuteGlobalChatsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MuteGlobalChatsResponse& operator=(MuteGlobalChatsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MuteGlobalChatsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MuteGlobalChatsResponse* internal_default_instance() {
    return reinterpret_cast<const MuteGlobalChatsResponse*>(
               &_MuteGlobalChatsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(MuteGlobalChatsResponse& a, MuteGlobalChatsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MuteGlobalChatsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MuteGlobalChatsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MuteGlobalChatsResponse* New() const final {
    return CreateMaybeMessage<MuteGlobalChatsResponse>(nullptr);
  }

  MuteGlobalChatsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MuteGlobalChatsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MuteGlobalChatsResponse& from);
  void MergeFrom(const MuteGlobalChatsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MuteGlobalChatsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.MuteGlobalChatsResponse";
  }
  protected:
  explicit MuteGlobalChatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.punishments.MuteGlobalChatsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class UnBanRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.UnBanRequest) */ {
 public:
  inline UnBanRequest() : UnBanRequest(nullptr) {}
  virtual ~UnBanRequest();

  UnBanRequest(const UnBanRequest& from);
  UnBanRequest(UnBanRequest&& from) noexcept
    : UnBanRequest() {
    *this = ::std::move(from);
  }

  inline UnBanRequest& operator=(const UnBanRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnBanRequest& operator=(UnBanRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnBanRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnBanRequest* internal_default_instance() {
    return reinterpret_cast<const UnBanRequest*>(
               &_UnBanRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(UnBanRequest& a, UnBanRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnBanRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnBanRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnBanRequest* New() const final {
    return CreateMaybeMessage<UnBanRequest>(nullptr);
  }

  UnBanRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnBanRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnBanRequest& from);
  void MergeFrom(const UnBanRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnBanRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.UnBanRequest";
  }
  protected:
  explicit UnBanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kBanIdFieldNumber = 1,
  };
  // string reason = 2;
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // uint32 ban_id = 1;
  void clear_ban_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 ban_id() const;
  void set_ban_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ban_id() const;
  void _internal_set_ban_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.punishments.UnBanRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ban_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class UnBanResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.UnBanResponse) */ {
 public:
  inline UnBanResponse() : UnBanResponse(nullptr) {}
  virtual ~UnBanResponse();

  UnBanResponse(const UnBanResponse& from);
  UnBanResponse(UnBanResponse&& from) noexcept
    : UnBanResponse() {
    *this = ::std::move(from);
  }

  inline UnBanResponse& operator=(const UnBanResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnBanResponse& operator=(UnBanResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnBanResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnBanResponse* internal_default_instance() {
    return reinterpret_cast<const UnBanResponse*>(
               &_UnBanResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(UnBanResponse& a, UnBanResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UnBanResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnBanResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnBanResponse* New() const final {
    return CreateMaybeMessage<UnBanResponse>(nullptr);
  }

  UnBanResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnBanResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnBanResponse& from);
  void MergeFrom(const UnBanResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnBanResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.UnBanResponse";
  }
  protected:
  explicit UnBanResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.punishments.UnBanResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class UnBlockRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.UnBlockRequest) */ {
 public:
  inline UnBlockRequest() : UnBlockRequest(nullptr) {}
  virtual ~UnBlockRequest();

  UnBlockRequest(const UnBlockRequest& from);
  UnBlockRequest(UnBlockRequest&& from) noexcept
    : UnBlockRequest() {
    *this = ::std::move(from);
  }

  inline UnBlockRequest& operator=(const UnBlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnBlockRequest& operator=(UnBlockRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnBlockRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnBlockRequest* internal_default_instance() {
    return reinterpret_cast<const UnBlockRequest*>(
               &_UnBlockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(UnBlockRequest& a, UnBlockRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnBlockRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnBlockRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnBlockRequest* New() const final {
    return CreateMaybeMessage<UnBlockRequest>(nullptr);
  }

  UnBlockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnBlockRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnBlockRequest& from);
  void MergeFrom(const UnBlockRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnBlockRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.UnBlockRequest";
  }
  protected:
  explicit UnBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kBlockIdFieldNumber = 1,
  };
  // string reason = 2;
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // uint32 block_id = 1;
  void clear_block_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 block_id() const;
  void set_block_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_block_id() const;
  void _internal_set_block_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.punishments.UnBlockRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  ::PROTOBUF_NAMESPACE_ID::uint32 block_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class UnBlockResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.UnBlockResponse) */ {
 public:
  inline UnBlockResponse() : UnBlockResponse(nullptr) {}
  virtual ~UnBlockResponse();

  UnBlockResponse(const UnBlockResponse& from);
  UnBlockResponse(UnBlockResponse&& from) noexcept
    : UnBlockResponse() {
    *this = ::std::move(from);
  }

  inline UnBlockResponse& operator=(const UnBlockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnBlockResponse& operator=(UnBlockResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnBlockResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnBlockResponse* internal_default_instance() {
    return reinterpret_cast<const UnBlockResponse*>(
               &_UnBlockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(UnBlockResponse& a, UnBlockResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UnBlockResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnBlockResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnBlockResponse* New() const final {
    return CreateMaybeMessage<UnBlockResponse>(nullptr);
  }

  UnBlockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnBlockResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnBlockResponse& from);
  void MergeFrom(const UnBlockResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnBlockResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.UnBlockResponse";
  }
  protected:
  explicit UnBlockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.punishments.UnBlockResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class UnWarnRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.UnWarnRequest) */ {
 public:
  inline UnWarnRequest() : UnWarnRequest(nullptr) {}
  virtual ~UnWarnRequest();

  UnWarnRequest(const UnWarnRequest& from);
  UnWarnRequest(UnWarnRequest&& from) noexcept
    : UnWarnRequest() {
    *this = ::std::move(from);
  }

  inline UnWarnRequest& operator=(const UnWarnRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnWarnRequest& operator=(UnWarnRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnWarnRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnWarnRequest* internal_default_instance() {
    return reinterpret_cast<const UnWarnRequest*>(
               &_UnWarnRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(UnWarnRequest& a, UnWarnRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnWarnRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnWarnRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnWarnRequest* New() const final {
    return CreateMaybeMessage<UnWarnRequest>(nullptr);
  }

  UnWarnRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnWarnRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnWarnRequest& from);
  void MergeFrom(const UnWarnRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnWarnRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.UnWarnRequest";
  }
  protected:
  explicit UnWarnRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kWarnIdFieldNumber = 1,
  };
  // string reason = 2;
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // uint32 warn_id = 1;
  void clear_warn_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 warn_id() const;
  void set_warn_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_warn_id() const;
  void _internal_set_warn_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.punishments.UnWarnRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  ::PROTOBUF_NAMESPACE_ID::uint32 warn_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class UnWarnResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.UnWarnResponse) */ {
 public:
  inline UnWarnResponse() : UnWarnResponse(nullptr) {}
  virtual ~UnWarnResponse();

  UnWarnResponse(const UnWarnResponse& from);
  UnWarnResponse(UnWarnResponse&& from) noexcept
    : UnWarnResponse() {
    *this = ::std::move(from);
  }

  inline UnWarnResponse& operator=(const UnWarnResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnWarnResponse& operator=(UnWarnResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnWarnResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnWarnResponse* internal_default_instance() {
    return reinterpret_cast<const UnWarnResponse*>(
               &_UnWarnResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(UnWarnResponse& a, UnWarnResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UnWarnResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnWarnResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnWarnResponse* New() const final {
    return CreateMaybeMessage<UnWarnResponse>(nullptr);
  }

  UnWarnResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnWarnResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnWarnResponse& from);
  void MergeFrom(const UnWarnResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnWarnResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.UnWarnResponse";
  }
  protected:
  explicit UnWarnResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.punishments.UnWarnResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class UnAdminJailRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.UnAdminJailRequest) */ {
 public:
  inline UnAdminJailRequest() : UnAdminJailRequest(nullptr) {}
  virtual ~UnAdminJailRequest();

  UnAdminJailRequest(const UnAdminJailRequest& from);
  UnAdminJailRequest(UnAdminJailRequest&& from) noexcept
    : UnAdminJailRequest() {
    *this = ::std::move(from);
  }

  inline UnAdminJailRequest& operator=(const UnAdminJailRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnAdminJailRequest& operator=(UnAdminJailRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnAdminJailRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnAdminJailRequest* internal_default_instance() {
    return reinterpret_cast<const UnAdminJailRequest*>(
               &_UnAdminJailRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(UnAdminJailRequest& a, UnAdminJailRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnAdminJailRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnAdminJailRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnAdminJailRequest* New() const final {
    return CreateMaybeMessage<UnAdminJailRequest>(nullptr);
  }

  UnAdminJailRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnAdminJailRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnAdminJailRequest& from);
  void MergeFrom(const UnAdminJailRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnAdminJailRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.UnAdminJailRequest";
  }
  protected:
  explicit UnAdminJailRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterFieldNumber = 1,
  };
  // uint32 character = 1;
  void clear_character();
  ::PROTOBUF_NAMESPACE_ID::uint32 character() const;
  void set_character(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_character() const;
  void _internal_set_character(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.punishments.UnAdminJailRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 character_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class UnAdminJailResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.UnAdminJailResponse) */ {
 public:
  inline UnAdminJailResponse() : UnAdminJailResponse(nullptr) {}
  virtual ~UnAdminJailResponse();

  UnAdminJailResponse(const UnAdminJailResponse& from);
  UnAdminJailResponse(UnAdminJailResponse&& from) noexcept
    : UnAdminJailResponse() {
    *this = ::std::move(from);
  }

  inline UnAdminJailResponse& operator=(const UnAdminJailResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnAdminJailResponse& operator=(UnAdminJailResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnAdminJailResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnAdminJailResponse* internal_default_instance() {
    return reinterpret_cast<const UnAdminJailResponse*>(
               &_UnAdminJailResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(UnAdminJailResponse& a, UnAdminJailResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UnAdminJailResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnAdminJailResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnAdminJailResponse* New() const final {
    return CreateMaybeMessage<UnAdminJailResponse>(nullptr);
  }

  UnAdminJailResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnAdminJailResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnAdminJailResponse& from);
  void MergeFrom(const UnAdminJailResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnAdminJailResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.UnAdminJailResponse";
  }
  protected:
  explicit UnAdminJailResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.punishments.UnAdminJailResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class UnMuteGlobalChatsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.UnMuteGlobalChatsRequest) */ {
 public:
  inline UnMuteGlobalChatsRequest() : UnMuteGlobalChatsRequest(nullptr) {}
  virtual ~UnMuteGlobalChatsRequest();

  UnMuteGlobalChatsRequest(const UnMuteGlobalChatsRequest& from);
  UnMuteGlobalChatsRequest(UnMuteGlobalChatsRequest&& from) noexcept
    : UnMuteGlobalChatsRequest() {
    *this = ::std::move(from);
  }

  inline UnMuteGlobalChatsRequest& operator=(const UnMuteGlobalChatsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnMuteGlobalChatsRequest& operator=(UnMuteGlobalChatsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnMuteGlobalChatsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnMuteGlobalChatsRequest* internal_default_instance() {
    return reinterpret_cast<const UnMuteGlobalChatsRequest*>(
               &_UnMuteGlobalChatsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(UnMuteGlobalChatsRequest& a, UnMuteGlobalChatsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnMuteGlobalChatsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnMuteGlobalChatsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnMuteGlobalChatsRequest* New() const final {
    return CreateMaybeMessage<UnMuteGlobalChatsRequest>(nullptr);
  }

  UnMuteGlobalChatsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnMuteGlobalChatsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnMuteGlobalChatsRequest& from);
  void MergeFrom(const UnMuteGlobalChatsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnMuteGlobalChatsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.UnMuteGlobalChatsRequest";
  }
  protected:
  explicit UnMuteGlobalChatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
  };
  // uint32 account = 1;
  void clear_account();
  ::PROTOBUF_NAMESPACE_ID::uint32 account() const;
  void set_account(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account() const;
  void _internal_set_account(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.punishments.UnMuteGlobalChatsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class UnMuteGlobalChatsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.UnMuteGlobalChatsResponse) */ {
 public:
  inline UnMuteGlobalChatsResponse() : UnMuteGlobalChatsResponse(nullptr) {}
  virtual ~UnMuteGlobalChatsResponse();

  UnMuteGlobalChatsResponse(const UnMuteGlobalChatsResponse& from);
  UnMuteGlobalChatsResponse(UnMuteGlobalChatsResponse&& from) noexcept
    : UnMuteGlobalChatsResponse() {
    *this = ::std::move(from);
  }

  inline UnMuteGlobalChatsResponse& operator=(const UnMuteGlobalChatsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnMuteGlobalChatsResponse& operator=(UnMuteGlobalChatsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnMuteGlobalChatsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnMuteGlobalChatsResponse* internal_default_instance() {
    return reinterpret_cast<const UnMuteGlobalChatsResponse*>(
               &_UnMuteGlobalChatsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(UnMuteGlobalChatsResponse& a, UnMuteGlobalChatsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UnMuteGlobalChatsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnMuteGlobalChatsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnMuteGlobalChatsResponse* New() const final {
    return CreateMaybeMessage<UnMuteGlobalChatsResponse>(nullptr);
  }

  UnMuteGlobalChatsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnMuteGlobalChatsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnMuteGlobalChatsResponse& from);
  void MergeFrom(const UnMuteGlobalChatsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnMuteGlobalChatsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.UnMuteGlobalChatsResponse";
  }
  protected:
  explicit UnMuteGlobalChatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.punishments.UnMuteGlobalChatsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class GetPlayerBansRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.GetPlayerBansRequest) */ {
 public:
  inline GetPlayerBansRequest() : GetPlayerBansRequest(nullptr) {}
  virtual ~GetPlayerBansRequest();

  GetPlayerBansRequest(const GetPlayerBansRequest& from);
  GetPlayerBansRequest(GetPlayerBansRequest&& from) noexcept
    : GetPlayerBansRequest() {
    *this = ::std::move(from);
  }

  inline GetPlayerBansRequest& operator=(const GetPlayerBansRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPlayerBansRequest& operator=(GetPlayerBansRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPlayerBansRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPlayerBansRequest* internal_default_instance() {
    return reinterpret_cast<const GetPlayerBansRequest*>(
               &_GetPlayerBansRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(GetPlayerBansRequest& a, GetPlayerBansRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPlayerBansRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPlayerBansRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPlayerBansRequest* New() const final {
    return CreateMaybeMessage<GetPlayerBansRequest>(nullptr);
  }

  GetPlayerBansRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPlayerBansRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPlayerBansRequest& from);
  void MergeFrom(const GetPlayerBansRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPlayerBansRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.GetPlayerBansRequest";
  }
  protected:
  explicit GetPlayerBansRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 2,
    kPlayerFieldNumber = 1,
  };
  // string ip = 2;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // uint32 player = 1;
  void clear_player();
  ::PROTOBUF_NAMESPACE_ID::uint32 player() const;
  void set_player(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_player() const;
  void _internal_set_player(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.punishments.GetPlayerBansRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 player_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class GetPlayerBansResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.GetPlayerBansResponse) */ {
 public:
  inline GetPlayerBansResponse() : GetPlayerBansResponse(nullptr) {}
  virtual ~GetPlayerBansResponse();

  GetPlayerBansResponse(const GetPlayerBansResponse& from);
  GetPlayerBansResponse(GetPlayerBansResponse&& from) noexcept
    : GetPlayerBansResponse() {
    *this = ::std::move(from);
  }

  inline GetPlayerBansResponse& operator=(const GetPlayerBansResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPlayerBansResponse& operator=(GetPlayerBansResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPlayerBansResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPlayerBansResponse* internal_default_instance() {
    return reinterpret_cast<const GetPlayerBansResponse*>(
               &_GetPlayerBansResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(GetPlayerBansResponse& a, GetPlayerBansResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPlayerBansResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPlayerBansResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPlayerBansResponse* New() const final {
    return CreateMaybeMessage<GetPlayerBansResponse>(nullptr);
  }

  GetPlayerBansResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPlayerBansResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPlayerBansResponse& from);
  void MergeFrom(const GetPlayerBansResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPlayerBansResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.GetPlayerBansResponse";
  }
  protected:
  explicit GetPlayerBansResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBansFieldNumber = 1,
  };
  // repeated .mruv.punishments.BanMessage bans = 1;
  int bans_size() const;
  private:
  int _internal_bans_size() const;
  public:
  void clear_bans();
  ::mruv::punishments::BanMessage* mutable_bans(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::punishments::BanMessage >*
      mutable_bans();
  private:
  const ::mruv::punishments::BanMessage& _internal_bans(int index) const;
  ::mruv::punishments::BanMessage* _internal_add_bans();
  public:
  const ::mruv::punishments::BanMessage& bans(int index) const;
  ::mruv::punishments::BanMessage* add_bans();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::punishments::BanMessage >&
      bans() const;

  // @@protoc_insertion_point(class_scope:mruv.punishments.GetPlayerBansResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::punishments::BanMessage > bans_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class GetPlayerWarnsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.GetPlayerWarnsRequest) */ {
 public:
  inline GetPlayerWarnsRequest() : GetPlayerWarnsRequest(nullptr) {}
  virtual ~GetPlayerWarnsRequest();

  GetPlayerWarnsRequest(const GetPlayerWarnsRequest& from);
  GetPlayerWarnsRequest(GetPlayerWarnsRequest&& from) noexcept
    : GetPlayerWarnsRequest() {
    *this = ::std::move(from);
  }

  inline GetPlayerWarnsRequest& operator=(const GetPlayerWarnsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPlayerWarnsRequest& operator=(GetPlayerWarnsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPlayerWarnsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPlayerWarnsRequest* internal_default_instance() {
    return reinterpret_cast<const GetPlayerWarnsRequest*>(
               &_GetPlayerWarnsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(GetPlayerWarnsRequest& a, GetPlayerWarnsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPlayerWarnsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPlayerWarnsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPlayerWarnsRequest* New() const final {
    return CreateMaybeMessage<GetPlayerWarnsRequest>(nullptr);
  }

  GetPlayerWarnsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPlayerWarnsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPlayerWarnsRequest& from);
  void MergeFrom(const GetPlayerWarnsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPlayerWarnsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.GetPlayerWarnsRequest";
  }
  protected:
  explicit GetPlayerWarnsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
  };
  // uint32 player = 1;
  void clear_player();
  ::PROTOBUF_NAMESPACE_ID::uint32 player() const;
  void set_player(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_player() const;
  void _internal_set_player(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.punishments.GetPlayerWarnsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 player_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class GetPlayerWarnsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.GetPlayerWarnsResponse) */ {
 public:
  inline GetPlayerWarnsResponse() : GetPlayerWarnsResponse(nullptr) {}
  virtual ~GetPlayerWarnsResponse();

  GetPlayerWarnsResponse(const GetPlayerWarnsResponse& from);
  GetPlayerWarnsResponse(GetPlayerWarnsResponse&& from) noexcept
    : GetPlayerWarnsResponse() {
    *this = ::std::move(from);
  }

  inline GetPlayerWarnsResponse& operator=(const GetPlayerWarnsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPlayerWarnsResponse& operator=(GetPlayerWarnsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPlayerWarnsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPlayerWarnsResponse* internal_default_instance() {
    return reinterpret_cast<const GetPlayerWarnsResponse*>(
               &_GetPlayerWarnsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(GetPlayerWarnsResponse& a, GetPlayerWarnsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPlayerWarnsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPlayerWarnsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPlayerWarnsResponse* New() const final {
    return CreateMaybeMessage<GetPlayerWarnsResponse>(nullptr);
  }

  GetPlayerWarnsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPlayerWarnsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPlayerWarnsResponse& from);
  void MergeFrom(const GetPlayerWarnsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPlayerWarnsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.GetPlayerWarnsResponse";
  }
  protected:
  explicit GetPlayerWarnsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWarnsFieldNumber = 1,
  };
  // repeated .mruv.punishments.WarnMessage warns = 1;
  int warns_size() const;
  private:
  int _internal_warns_size() const;
  public:
  void clear_warns();
  ::mruv::punishments::WarnMessage* mutable_warns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::punishments::WarnMessage >*
      mutable_warns();
  private:
  const ::mruv::punishments::WarnMessage& _internal_warns(int index) const;
  ::mruv::punishments::WarnMessage* _internal_add_warns();
  public:
  const ::mruv::punishments::WarnMessage& warns(int index) const;
  ::mruv::punishments::WarnMessage* add_warns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::punishments::WarnMessage >&
      warns() const;

  // @@protoc_insertion_point(class_scope:mruv.punishments.GetPlayerWarnsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::punishments::WarnMessage > warns_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class GetPlayerAdminJailRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.GetPlayerAdminJailRequest) */ {
 public:
  inline GetPlayerAdminJailRequest() : GetPlayerAdminJailRequest(nullptr) {}
  virtual ~GetPlayerAdminJailRequest();

  GetPlayerAdminJailRequest(const GetPlayerAdminJailRequest& from);
  GetPlayerAdminJailRequest(GetPlayerAdminJailRequest&& from) noexcept
    : GetPlayerAdminJailRequest() {
    *this = ::std::move(from);
  }

  inline GetPlayerAdminJailRequest& operator=(const GetPlayerAdminJailRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPlayerAdminJailRequest& operator=(GetPlayerAdminJailRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPlayerAdminJailRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPlayerAdminJailRequest* internal_default_instance() {
    return reinterpret_cast<const GetPlayerAdminJailRequest*>(
               &_GetPlayerAdminJailRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(GetPlayerAdminJailRequest& a, GetPlayerAdminJailRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPlayerAdminJailRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPlayerAdminJailRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPlayerAdminJailRequest* New() const final {
    return CreateMaybeMessage<GetPlayerAdminJailRequest>(nullptr);
  }

  GetPlayerAdminJailRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPlayerAdminJailRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPlayerAdminJailRequest& from);
  void MergeFrom(const GetPlayerAdminJailRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPlayerAdminJailRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.GetPlayerAdminJailRequest";
  }
  protected:
  explicit GetPlayerAdminJailRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterFieldNumber = 1,
  };
  // uint32 character = 1;
  void clear_character();
  ::PROTOBUF_NAMESPACE_ID::uint32 character() const;
  void set_character(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_character() const;
  void _internal_set_character(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.punishments.GetPlayerAdminJailRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 character_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class GetPlayerAdminJailResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.GetPlayerAdminJailResponse) */ {
 public:
  inline GetPlayerAdminJailResponse() : GetPlayerAdminJailResponse(nullptr) {}
  virtual ~GetPlayerAdminJailResponse();

  GetPlayerAdminJailResponse(const GetPlayerAdminJailResponse& from);
  GetPlayerAdminJailResponse(GetPlayerAdminJailResponse&& from) noexcept
    : GetPlayerAdminJailResponse() {
    *this = ::std::move(from);
  }

  inline GetPlayerAdminJailResponse& operator=(const GetPlayerAdminJailResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPlayerAdminJailResponse& operator=(GetPlayerAdminJailResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPlayerAdminJailResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPlayerAdminJailResponse* internal_default_instance() {
    return reinterpret_cast<const GetPlayerAdminJailResponse*>(
               &_GetPlayerAdminJailResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(GetPlayerAdminJailResponse& a, GetPlayerAdminJailResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPlayerAdminJailResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPlayerAdminJailResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPlayerAdminJailResponse* New() const final {
    return CreateMaybeMessage<GetPlayerAdminJailResponse>(nullptr);
  }

  GetPlayerAdminJailResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPlayerAdminJailResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPlayerAdminJailResponse& from);
  void MergeFrom(const GetPlayerAdminJailResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPlayerAdminJailResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.GetPlayerAdminJailResponse";
  }
  protected:
  explicit GetPlayerAdminJailResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kJailTimeFieldNumber = 1,
    kAdminFieldNumber = 3,
    kDateFieldNumber = 4,
  };
  // string reason = 2;
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // uint32 jail_time = 1;
  void clear_jail_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 jail_time() const;
  void set_jail_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_jail_time() const;
  void _internal_set_jail_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 admin = 3;
  void clear_admin();
  ::PROTOBUF_NAMESPACE_ID::uint32 admin() const;
  void set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_admin() const;
  void _internal_set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int64 date = 4;
  void clear_date();
  ::PROTOBUF_NAMESPACE_ID::int64 date() const;
  void set_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_date() const;
  void _internal_set_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.punishments.GetPlayerAdminJailResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  ::PROTOBUF_NAMESPACE_ID::uint32 jail_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 admin_;
  ::PROTOBUF_NAMESPACE_ID::int64 date_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class GetBanRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.GetBanRequest) */ {
 public:
  inline GetBanRequest() : GetBanRequest(nullptr) {}
  virtual ~GetBanRequest();

  GetBanRequest(const GetBanRequest& from);
  GetBanRequest(GetBanRequest&& from) noexcept
    : GetBanRequest() {
    *this = ::std::move(from);
  }

  inline GetBanRequest& operator=(const GetBanRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBanRequest& operator=(GetBanRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBanRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBanRequest* internal_default_instance() {
    return reinterpret_cast<const GetBanRequest*>(
               &_GetBanRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(GetBanRequest& a, GetBanRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBanRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBanRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBanRequest* New() const final {
    return CreateMaybeMessage<GetBanRequest>(nullptr);
  }

  GetBanRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBanRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBanRequest& from);
  void MergeFrom(const GetBanRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBanRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.GetBanRequest";
  }
  protected:
  explicit GetBanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.punishments.GetBanRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class GetWarnRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.GetWarnRequest) */ {
 public:
  inline GetWarnRequest() : GetWarnRequest(nullptr) {}
  virtual ~GetWarnRequest();

  GetWarnRequest(const GetWarnRequest& from);
  GetWarnRequest(GetWarnRequest&& from) noexcept
    : GetWarnRequest() {
    *this = ::std::move(from);
  }

  inline GetWarnRequest& operator=(const GetWarnRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetWarnRequest& operator=(GetWarnRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetWarnRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetWarnRequest* internal_default_instance() {
    return reinterpret_cast<const GetWarnRequest*>(
               &_GetWarnRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(GetWarnRequest& a, GetWarnRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetWarnRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetWarnRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetWarnRequest* New() const final {
    return CreateMaybeMessage<GetWarnRequest>(nullptr);
  }

  GetWarnRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetWarnRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetWarnRequest& from);
  void MergeFrom(const GetWarnRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetWarnRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.GetWarnRequest";
  }
  protected:
  explicit GetWarnRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.punishments.GetWarnRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class GetBlockRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.GetBlockRequest) */ {
 public:
  inline GetBlockRequest() : GetBlockRequest(nullptr) {}
  virtual ~GetBlockRequest();

  GetBlockRequest(const GetBlockRequest& from);
  GetBlockRequest(GetBlockRequest&& from) noexcept
    : GetBlockRequest() {
    *this = ::std::move(from);
  }

  inline GetBlockRequest& operator=(const GetBlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockRequest& operator=(GetBlockRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBlockRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBlockRequest* internal_default_instance() {
    return reinterpret_cast<const GetBlockRequest*>(
               &_GetBlockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(GetBlockRequest& a, GetBlockRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlockRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBlockRequest* New() const final {
    return CreateMaybeMessage<GetBlockRequest>(nullptr);
  }

  GetBlockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBlockRequest& from);
  void MergeFrom(const GetBlockRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.GetBlockRequest";
  }
  protected:
  explicit GetBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.punishments.GetBlockRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class IsPlayerBannedRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.IsPlayerBannedRequest) */ {
 public:
  inline IsPlayerBannedRequest() : IsPlayerBannedRequest(nullptr) {}
  virtual ~IsPlayerBannedRequest();

  IsPlayerBannedRequest(const IsPlayerBannedRequest& from);
  IsPlayerBannedRequest(IsPlayerBannedRequest&& from) noexcept
    : IsPlayerBannedRequest() {
    *this = ::std::move(from);
  }

  inline IsPlayerBannedRequest& operator=(const IsPlayerBannedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsPlayerBannedRequest& operator=(IsPlayerBannedRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IsPlayerBannedRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IsPlayerBannedRequest* internal_default_instance() {
    return reinterpret_cast<const IsPlayerBannedRequest*>(
               &_IsPlayerBannedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(IsPlayerBannedRequest& a, IsPlayerBannedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IsPlayerBannedRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IsPlayerBannedRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IsPlayerBannedRequest* New() const final {
    return CreateMaybeMessage<IsPlayerBannedRequest>(nullptr);
  }

  IsPlayerBannedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IsPlayerBannedRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IsPlayerBannedRequest& from);
  void MergeFrom(const IsPlayerBannedRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IsPlayerBannedRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.IsPlayerBannedRequest";
  }
  protected:
  explicit IsPlayerBannedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 2,
    kPlayerFieldNumber = 1,
  };
  // string ip = 2;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // uint32 player = 1;
  void clear_player();
  ::PROTOBUF_NAMESPACE_ID::uint32 player() const;
  void set_player(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_player() const;
  void _internal_set_player(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.punishments.IsPlayerBannedRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 player_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class IsPlayerBannedResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.IsPlayerBannedResponse) */ {
 public:
  inline IsPlayerBannedResponse() : IsPlayerBannedResponse(nullptr) {}
  virtual ~IsPlayerBannedResponse();

  IsPlayerBannedResponse(const IsPlayerBannedResponse& from);
  IsPlayerBannedResponse(IsPlayerBannedResponse&& from) noexcept
    : IsPlayerBannedResponse() {
    *this = ::std::move(from);
  }

  inline IsPlayerBannedResponse& operator=(const IsPlayerBannedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsPlayerBannedResponse& operator=(IsPlayerBannedResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IsPlayerBannedResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IsPlayerBannedResponse* internal_default_instance() {
    return reinterpret_cast<const IsPlayerBannedResponse*>(
               &_IsPlayerBannedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(IsPlayerBannedResponse& a, IsPlayerBannedResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IsPlayerBannedResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IsPlayerBannedResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IsPlayerBannedResponse* New() const final {
    return CreateMaybeMessage<IsPlayerBannedResponse>(nullptr);
  }

  IsPlayerBannedResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IsPlayerBannedResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IsPlayerBannedResponse& from);
  void MergeFrom(const IsPlayerBannedResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IsPlayerBannedResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.IsPlayerBannedResponse";
  }
  protected:
  explicit IsPlayerBannedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBannedFieldNumber = 1,
    kBanIdFieldNumber = 2,
  };
  // bool banned = 1;
  void clear_banned();
  bool banned() const;
  void set_banned(bool value);
  private:
  bool _internal_banned() const;
  void _internal_set_banned(bool value);
  public:

  // uint32 ban_id = 2;
  void clear_ban_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 ban_id() const;
  void set_ban_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ban_id() const;
  void _internal_set_ban_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.punishments.IsPlayerBannedResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool banned_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ban_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class IsCharacterBlockedRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.IsCharacterBlockedRequest) */ {
 public:
  inline IsCharacterBlockedRequest() : IsCharacterBlockedRequest(nullptr) {}
  virtual ~IsCharacterBlockedRequest();

  IsCharacterBlockedRequest(const IsCharacterBlockedRequest& from);
  IsCharacterBlockedRequest(IsCharacterBlockedRequest&& from) noexcept
    : IsCharacterBlockedRequest() {
    *this = ::std::move(from);
  }

  inline IsCharacterBlockedRequest& operator=(const IsCharacterBlockedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsCharacterBlockedRequest& operator=(IsCharacterBlockedRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IsCharacterBlockedRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IsCharacterBlockedRequest* internal_default_instance() {
    return reinterpret_cast<const IsCharacterBlockedRequest*>(
               &_IsCharacterBlockedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(IsCharacterBlockedRequest& a, IsCharacterBlockedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IsCharacterBlockedRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IsCharacterBlockedRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IsCharacterBlockedRequest* New() const final {
    return CreateMaybeMessage<IsCharacterBlockedRequest>(nullptr);
  }

  IsCharacterBlockedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IsCharacterBlockedRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IsCharacterBlockedRequest& from);
  void MergeFrom(const IsCharacterBlockedRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IsCharacterBlockedRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.IsCharacterBlockedRequest";
  }
  protected:
  explicit IsCharacterBlockedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterFieldNumber = 1,
  };
  // uint32 character = 1;
  void clear_character();
  ::PROTOBUF_NAMESPACE_ID::uint32 character() const;
  void set_character(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_character() const;
  void _internal_set_character(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.punishments.IsCharacterBlockedRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 character_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class IsCharacterBlockedResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.IsCharacterBlockedResponse) */ {
 public:
  inline IsCharacterBlockedResponse() : IsCharacterBlockedResponse(nullptr) {}
  virtual ~IsCharacterBlockedResponse();

  IsCharacterBlockedResponse(const IsCharacterBlockedResponse& from);
  IsCharacterBlockedResponse(IsCharacterBlockedResponse&& from) noexcept
    : IsCharacterBlockedResponse() {
    *this = ::std::move(from);
  }

  inline IsCharacterBlockedResponse& operator=(const IsCharacterBlockedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsCharacterBlockedResponse& operator=(IsCharacterBlockedResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IsCharacterBlockedResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IsCharacterBlockedResponse* internal_default_instance() {
    return reinterpret_cast<const IsCharacterBlockedResponse*>(
               &_IsCharacterBlockedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(IsCharacterBlockedResponse& a, IsCharacterBlockedResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IsCharacterBlockedResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IsCharacterBlockedResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IsCharacterBlockedResponse* New() const final {
    return CreateMaybeMessage<IsCharacterBlockedResponse>(nullptr);
  }

  IsCharacterBlockedResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IsCharacterBlockedResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IsCharacterBlockedResponse& from);
  void MergeFrom(const IsCharacterBlockedResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IsCharacterBlockedResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.IsCharacterBlockedResponse";
  }
  protected:
  explicit IsCharacterBlockedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockedFieldNumber = 1,
    kBlockIdFieldNumber = 2,
  };
  // bool blocked = 1;
  void clear_blocked();
  bool blocked() const;
  void set_blocked(bool value);
  private:
  bool _internal_blocked() const;
  void _internal_set_blocked(bool value);
  public:

  // uint32 block_id = 2;
  void clear_block_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 block_id() const;
  void set_block_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_block_id() const;
  void _internal_set_block_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.punishments.IsCharacterBlockedResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool blocked_;
  ::PROTOBUF_NAMESPACE_ID::uint32 block_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class IsCharacterJailedRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.IsCharacterJailedRequest) */ {
 public:
  inline IsCharacterJailedRequest() : IsCharacterJailedRequest(nullptr) {}
  virtual ~IsCharacterJailedRequest();

  IsCharacterJailedRequest(const IsCharacterJailedRequest& from);
  IsCharacterJailedRequest(IsCharacterJailedRequest&& from) noexcept
    : IsCharacterJailedRequest() {
    *this = ::std::move(from);
  }

  inline IsCharacterJailedRequest& operator=(const IsCharacterJailedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsCharacterJailedRequest& operator=(IsCharacterJailedRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IsCharacterJailedRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IsCharacterJailedRequest* internal_default_instance() {
    return reinterpret_cast<const IsCharacterJailedRequest*>(
               &_IsCharacterJailedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(IsCharacterJailedRequest& a, IsCharacterJailedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IsCharacterJailedRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IsCharacterJailedRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IsCharacterJailedRequest* New() const final {
    return CreateMaybeMessage<IsCharacterJailedRequest>(nullptr);
  }

  IsCharacterJailedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IsCharacterJailedRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IsCharacterJailedRequest& from);
  void MergeFrom(const IsCharacterJailedRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IsCharacterJailedRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.IsCharacterJailedRequest";
  }
  protected:
  explicit IsCharacterJailedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterFieldNumber = 1,
  };
  // uint32 character = 1;
  void clear_character();
  ::PROTOBUF_NAMESPACE_ID::uint32 character() const;
  void set_character(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_character() const;
  void _internal_set_character(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.punishments.IsCharacterJailedRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 character_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class IsCharacterJailedResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.IsCharacterJailedResponse) */ {
 public:
  inline IsCharacterJailedResponse() : IsCharacterJailedResponse(nullptr) {}
  virtual ~IsCharacterJailedResponse();

  IsCharacterJailedResponse(const IsCharacterJailedResponse& from);
  IsCharacterJailedResponse(IsCharacterJailedResponse&& from) noexcept
    : IsCharacterJailedResponse() {
    *this = ::std::move(from);
  }

  inline IsCharacterJailedResponse& operator=(const IsCharacterJailedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsCharacterJailedResponse& operator=(IsCharacterJailedResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IsCharacterJailedResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IsCharacterJailedResponse* internal_default_instance() {
    return reinterpret_cast<const IsCharacterJailedResponse*>(
               &_IsCharacterJailedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(IsCharacterJailedResponse& a, IsCharacterJailedResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IsCharacterJailedResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IsCharacterJailedResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IsCharacterJailedResponse* New() const final {
    return CreateMaybeMessage<IsCharacterJailedResponse>(nullptr);
  }

  IsCharacterJailedResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IsCharacterJailedResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IsCharacterJailedResponse& from);
  void MergeFrom(const IsCharacterJailedResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IsCharacterJailedResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.IsCharacterJailedResponse";
  }
  protected:
  explicit IsCharacterJailedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJailedFieldNumber = 1,
    kJailTimeFieldNumber = 2,
  };
  // bool jailed = 1;
  void clear_jailed();
  bool jailed() const;
  void set_jailed(bool value);
  private:
  bool _internal_jailed() const;
  void _internal_set_jailed(bool value);
  public:

  // uint32 jail_time = 2;
  void clear_jail_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 jail_time() const;
  void set_jail_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_jail_time() const;
  void _internal_set_jail_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.punishments.IsCharacterJailedResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool jailed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 jail_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class WatchBansRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.WatchBansRequest) */ {
 public:
  inline WatchBansRequest() : WatchBansRequest(nullptr) {}
  virtual ~WatchBansRequest();

  WatchBansRequest(const WatchBansRequest& from);
  WatchBansRequest(WatchBansRequest&& from) noexcept
    : WatchBansRequest() {
    *this = ::std::move(from);
  }

  inline WatchBansRequest& operator=(const WatchBansRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchBansRequest& operator=(WatchBansRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WatchBansRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WatchBansRequest* internal_default_instance() {
    return reinterpret_cast<const WatchBansRequest*>(
               &_WatchBansRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(WatchBansRequest& a, WatchBansRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchBansRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchBansRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WatchBansRequest* New() const final {
    return CreateMaybeMessage<WatchBansRequest>(nullptr);
  }

  WatchBansRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WatchBansRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WatchBansRequest& from);
  void MergeFrom(const WatchBansRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchBansRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.WatchBansRequest";
  }
  protected:
  explicit WatchBansRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.punishments.WatchBansRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class WatchBlocksRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.WatchBlocksRequest) */ {
 public:
  inline WatchBlocksRequest() : WatchBlocksRequest(nullptr) {}
  virtual ~WatchBlocksRequest();

  WatchBlocksRequest(const WatchBlocksRequest& from);
  WatchBlocksRequest(WatchBlocksRequest&& from) noexcept
    : WatchBlocksRequest() {
    *this = ::std::move(from);
  }

  inline WatchBlocksRequest& operator=(const WatchBlocksRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchBlocksRequest& operator=(WatchBlocksRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WatchBlocksRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WatchBlocksRequest* internal_default_instance() {
    return reinterpret_cast<const WatchBlocksRequest*>(
               &_WatchBlocksRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(WatchBlocksRequest& a, WatchBlocksRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchBlocksRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchBlocksRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WatchBlocksRequest* New() const final {
    return CreateMaybeMessage<WatchBlocksRequest>(nullptr);
  }

  WatchBlocksRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WatchBlocksRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WatchBlocksRequest& from);
  void MergeFrom(const WatchBlocksRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchBlocksRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.WatchBlocksRequest";
  }
  protected:
  explicit WatchBlocksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.punishments.WatchBlocksRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class WatchWarnsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.WatchWarnsRequest) */ {
 public:
  inline WatchWarnsRequest() : WatchWarnsRequest(nullptr) {}
  virtual ~WatchWarnsRequest();

  WatchWarnsRequest(const WatchWarnsRequest& from);
  WatchWarnsRequest(WatchWarnsRequest&& from) noexcept
    : WatchWarnsRequest() {
    *this = ::std::move(from);
  }

  inline WatchWarnsRequest& operator=(const WatchWarnsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchWarnsRequest& operator=(WatchWarnsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WatchWarnsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WatchWarnsRequest* internal_default_instance() {
    return reinterpret_cast<const WatchWarnsRequest*>(
               &_WatchWarnsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(WatchWarnsRequest& a, WatchWarnsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchWarnsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchWarnsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WatchWarnsRequest* New() const final {
    return CreateMaybeMessage<WatchWarnsRequest>(nullptr);
  }

  WatchWarnsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WatchWarnsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WatchWarnsRequest& from);
  void MergeFrom(const WatchWarnsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchWarnsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.WatchWarnsRequest";
  }
  protected:
  explicit WatchWarnsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.punishments.WatchWarnsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class WatchAdminJailsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.WatchAdminJailsRequest) */ {
 public:
  inline WatchAdminJailsRequest() : WatchAdminJailsRequest(nullptr) {}
  virtual ~WatchAdminJailsRequest();

  WatchAdminJailsRequest(const WatchAdminJailsRequest& from);
  WatchAdminJailsRequest(WatchAdminJailsRequest&& from) noexcept
    : WatchAdminJailsRequest() {
    *this = ::std::move(from);
  }

  inline WatchAdminJailsRequest& operator=(const WatchAdminJailsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchAdminJailsRequest& operator=(WatchAdminJailsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WatchAdminJailsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WatchAdminJailsRequest* internal_default_instance() {
    return reinterpret_cast<const WatchAdminJailsRequest*>(
               &_WatchAdminJailsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(WatchAdminJailsRequest& a, WatchAdminJailsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchAdminJailsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchAdminJailsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WatchAdminJailsRequest* New() const final {
    return CreateMaybeMessage<WatchAdminJailsRequest>(nullptr);
  }

  WatchAdminJailsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WatchAdminJailsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WatchAdminJailsRequest& from);
  void MergeFrom(const WatchAdminJailsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchAdminJailsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.WatchAdminJailsRequest";
  }
  protected:
  explicit WatchAdminJailsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.punishments.WatchAdminJailsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class WatchUnBansRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.WatchUnBansRequest) */ {
 public:
  inline WatchUnBansRequest() : WatchUnBansRequest(nullptr) {}
  virtual ~WatchUnBansRequest();

  WatchUnBansRequest(const WatchUnBansRequest& from);
  WatchUnBansRequest(WatchUnBansRequest&& from) noexcept
    : WatchUnBansRequest() {
    *this = ::std::move(from);
  }

  inline WatchUnBansRequest& operator=(const WatchUnBansRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchUnBansRequest& operator=(WatchUnBansRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WatchUnBansRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WatchUnBansRequest* internal_default_instance() {
    return reinterpret_cast<const WatchUnBansRequest*>(
               &_WatchUnBansRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(WatchUnBansRequest& a, WatchUnBansRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchUnBansRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchUnBansRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WatchUnBansRequest* New() const final {
    return CreateMaybeMessage<WatchUnBansRequest>(nullptr);
  }

  WatchUnBansRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WatchUnBansRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WatchUnBansRequest& from);
  void MergeFrom(const WatchUnBansRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchUnBansRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.WatchUnBansRequest";
  }
  protected:
  explicit WatchUnBansRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.punishments.WatchUnBansRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class WatchUnBlocksRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.WatchUnBlocksRequest) */ {
 public:
  inline WatchUnBlocksRequest() : WatchUnBlocksRequest(nullptr) {}
  virtual ~WatchUnBlocksRequest();

  WatchUnBlocksRequest(const WatchUnBlocksRequest& from);
  WatchUnBlocksRequest(WatchUnBlocksRequest&& from) noexcept
    : WatchUnBlocksRequest() {
    *this = ::std::move(from);
  }

  inline WatchUnBlocksRequest& operator=(const WatchUnBlocksRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchUnBlocksRequest& operator=(WatchUnBlocksRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WatchUnBlocksRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WatchUnBlocksRequest* internal_default_instance() {
    return reinterpret_cast<const WatchUnBlocksRequest*>(
               &_WatchUnBlocksRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(WatchUnBlocksRequest& a, WatchUnBlocksRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchUnBlocksRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchUnBlocksRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WatchUnBlocksRequest* New() const final {
    return CreateMaybeMessage<WatchUnBlocksRequest>(nullptr);
  }

  WatchUnBlocksRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WatchUnBlocksRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WatchUnBlocksRequest& from);
  void MergeFrom(const WatchUnBlocksRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchUnBlocksRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.WatchUnBlocksRequest";
  }
  protected:
  explicit WatchUnBlocksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.punishments.WatchUnBlocksRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class WatchUnWarnsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.WatchUnWarnsRequest) */ {
 public:
  inline WatchUnWarnsRequest() : WatchUnWarnsRequest(nullptr) {}
  virtual ~WatchUnWarnsRequest();

  WatchUnWarnsRequest(const WatchUnWarnsRequest& from);
  WatchUnWarnsRequest(WatchUnWarnsRequest&& from) noexcept
    : WatchUnWarnsRequest() {
    *this = ::std::move(from);
  }

  inline WatchUnWarnsRequest& operator=(const WatchUnWarnsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchUnWarnsRequest& operator=(WatchUnWarnsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WatchUnWarnsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WatchUnWarnsRequest* internal_default_instance() {
    return reinterpret_cast<const WatchUnWarnsRequest*>(
               &_WatchUnWarnsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(WatchUnWarnsRequest& a, WatchUnWarnsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchUnWarnsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchUnWarnsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WatchUnWarnsRequest* New() const final {
    return CreateMaybeMessage<WatchUnWarnsRequest>(nullptr);
  }

  WatchUnWarnsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WatchUnWarnsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WatchUnWarnsRequest& from);
  void MergeFrom(const WatchUnWarnsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchUnWarnsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.WatchUnWarnsRequest";
  }
  protected:
  explicit WatchUnWarnsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.punishments.WatchUnWarnsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class WatchUnAdminJailsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.WatchUnAdminJailsRequest) */ {
 public:
  inline WatchUnAdminJailsRequest() : WatchUnAdminJailsRequest(nullptr) {}
  virtual ~WatchUnAdminJailsRequest();

  WatchUnAdminJailsRequest(const WatchUnAdminJailsRequest& from);
  WatchUnAdminJailsRequest(WatchUnAdminJailsRequest&& from) noexcept
    : WatchUnAdminJailsRequest() {
    *this = ::std::move(from);
  }

  inline WatchUnAdminJailsRequest& operator=(const WatchUnAdminJailsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchUnAdminJailsRequest& operator=(WatchUnAdminJailsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WatchUnAdminJailsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WatchUnAdminJailsRequest* internal_default_instance() {
    return reinterpret_cast<const WatchUnAdminJailsRequest*>(
               &_WatchUnAdminJailsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(WatchUnAdminJailsRequest& a, WatchUnAdminJailsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchUnAdminJailsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchUnAdminJailsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WatchUnAdminJailsRequest* New() const final {
    return CreateMaybeMessage<WatchUnAdminJailsRequest>(nullptr);
  }

  WatchUnAdminJailsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WatchUnAdminJailsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WatchUnAdminJailsRequest& from);
  void MergeFrom(const WatchUnAdminJailsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchUnAdminJailsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.WatchUnAdminJailsRequest";
  }
  protected:
  explicit WatchUnAdminJailsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.punishments.WatchUnAdminJailsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class WatchPlayerAcquittalsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.WatchPlayerAcquittalsRequest) */ {
 public:
  inline WatchPlayerAcquittalsRequest() : WatchPlayerAcquittalsRequest(nullptr) {}
  virtual ~WatchPlayerAcquittalsRequest();

  WatchPlayerAcquittalsRequest(const WatchPlayerAcquittalsRequest& from);
  WatchPlayerAcquittalsRequest(WatchPlayerAcquittalsRequest&& from) noexcept
    : WatchPlayerAcquittalsRequest() {
    *this = ::std::move(from);
  }

  inline WatchPlayerAcquittalsRequest& operator=(const WatchPlayerAcquittalsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchPlayerAcquittalsRequest& operator=(WatchPlayerAcquittalsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WatchPlayerAcquittalsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WatchPlayerAcquittalsRequest* internal_default_instance() {
    return reinterpret_cast<const WatchPlayerAcquittalsRequest*>(
               &_WatchPlayerAcquittalsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(WatchPlayerAcquittalsRequest& a, WatchPlayerAcquittalsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchPlayerAcquittalsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchPlayerAcquittalsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WatchPlayerAcquittalsRequest* New() const final {
    return CreateMaybeMessage<WatchPlayerAcquittalsRequest>(nullptr);
  }

  WatchPlayerAcquittalsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WatchPlayerAcquittalsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WatchPlayerAcquittalsRequest& from);
  void MergeFrom(const WatchPlayerAcquittalsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchPlayerAcquittalsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.WatchPlayerAcquittalsRequest";
  }
  protected:
  explicit WatchPlayerAcquittalsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.punishments.WatchPlayerAcquittalsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class WatchPlayerAcquittalsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.WatchPlayerAcquittalsResponse) */ {
 public:
  inline WatchPlayerAcquittalsResponse() : WatchPlayerAcquittalsResponse(nullptr) {}
  virtual ~WatchPlayerAcquittalsResponse();

  WatchPlayerAcquittalsResponse(const WatchPlayerAcquittalsResponse& from);
  WatchPlayerAcquittalsResponse(WatchPlayerAcquittalsResponse&& from) noexcept
    : WatchPlayerAcquittalsResponse() {
    *this = ::std::move(from);
  }

  inline WatchPlayerAcquittalsResponse& operator=(const WatchPlayerAcquittalsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchPlayerAcquittalsResponse& operator=(WatchPlayerAcquittalsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WatchPlayerAcquittalsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WatchPlayerAcquittalsResponse* internal_default_instance() {
    return reinterpret_cast<const WatchPlayerAcquittalsResponse*>(
               &_WatchPlayerAcquittalsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(WatchPlayerAcquittalsResponse& a, WatchPlayerAcquittalsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchPlayerAcquittalsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchPlayerAcquittalsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WatchPlayerAcquittalsResponse* New() const final {
    return CreateMaybeMessage<WatchPlayerAcquittalsResponse>(nullptr);
  }

  WatchPlayerAcquittalsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WatchPlayerAcquittalsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WatchPlayerAcquittalsResponse& from);
  void MergeFrom(const WatchPlayerAcquittalsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchPlayerAcquittalsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.WatchPlayerAcquittalsResponse";
  }
  protected:
  explicit WatchPlayerAcquittalsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.punishments.WatchPlayerAcquittalsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class WatchPlayerPunishmentsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.WatchPlayerPunishmentsRequest) */ {
 public:
  inline WatchPlayerPunishmentsRequest() : WatchPlayerPunishmentsRequest(nullptr) {}
  virtual ~WatchPlayerPunishmentsRequest();

  WatchPlayerPunishmentsRequest(const WatchPlayerPunishmentsRequest& from);
  WatchPlayerPunishmentsRequest(WatchPlayerPunishmentsRequest&& from) noexcept
    : WatchPlayerPunishmentsRequest() {
    *this = ::std::move(from);
  }

  inline WatchPlayerPunishmentsRequest& operator=(const WatchPlayerPunishmentsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchPlayerPunishmentsRequest& operator=(WatchPlayerPunishmentsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WatchPlayerPunishmentsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WatchPlayerPunishmentsRequest* internal_default_instance() {
    return reinterpret_cast<const WatchPlayerPunishmentsRequest*>(
               &_WatchPlayerPunishmentsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(WatchPlayerPunishmentsRequest& a, WatchPlayerPunishmentsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchPlayerPunishmentsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchPlayerPunishmentsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WatchPlayerPunishmentsRequest* New() const final {
    return CreateMaybeMessage<WatchPlayerPunishmentsRequest>(nullptr);
  }

  WatchPlayerPunishmentsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WatchPlayerPunishmentsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WatchPlayerPunishmentsRequest& from);
  void MergeFrom(const WatchPlayerPunishmentsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchPlayerPunishmentsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.WatchPlayerPunishmentsRequest";
  }
  protected:
  explicit WatchPlayerPunishmentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.punishments.WatchPlayerPunishmentsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class WatchPlayerPunishmentsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.WatchPlayerPunishmentsResponse) */ {
 public:
  inline WatchPlayerPunishmentsResponse() : WatchPlayerPunishmentsResponse(nullptr) {}
  virtual ~WatchPlayerPunishmentsResponse();

  WatchPlayerPunishmentsResponse(const WatchPlayerPunishmentsResponse& from);
  WatchPlayerPunishmentsResponse(WatchPlayerPunishmentsResponse&& from) noexcept
    : WatchPlayerPunishmentsResponse() {
    *this = ::std::move(from);
  }

  inline WatchPlayerPunishmentsResponse& operator=(const WatchPlayerPunishmentsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchPlayerPunishmentsResponse& operator=(WatchPlayerPunishmentsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WatchPlayerPunishmentsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WatchPlayerPunishmentsResponse* internal_default_instance() {
    return reinterpret_cast<const WatchPlayerPunishmentsResponse*>(
               &_WatchPlayerPunishmentsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(WatchPlayerPunishmentsResponse& a, WatchPlayerPunishmentsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchPlayerPunishmentsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchPlayerPunishmentsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WatchPlayerPunishmentsResponse* New() const final {
    return CreateMaybeMessage<WatchPlayerPunishmentsResponse>(nullptr);
  }

  WatchPlayerPunishmentsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WatchPlayerPunishmentsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WatchPlayerPunishmentsResponse& from);
  void MergeFrom(const WatchPlayerPunishmentsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchPlayerPunishmentsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.WatchPlayerPunishmentsResponse";
  }
  protected:
  explicit WatchPlayerPunishmentsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kPunishmentIdFieldNumber = 2,
  };
  // .mruv.punishments.PunishmentType type = 1;
  void clear_type();
  ::mruv::punishments::PunishmentType type() const;
  void set_type(::mruv::punishments::PunishmentType value);
  private:
  ::mruv::punishments::PunishmentType _internal_type() const;
  void _internal_set_type(::mruv::punishments::PunishmentType value);
  public:

  // uint32 punishment_id = 2;
  void clear_punishment_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 punishment_id() const;
  void set_punishment_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_punishment_id() const;
  void _internal_set_punishment_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.punishments.WatchPlayerPunishmentsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 punishment_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class WatchPunishmentsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.WatchPunishmentsRequest) */ {
 public:
  inline WatchPunishmentsRequest() : WatchPunishmentsRequest(nullptr) {}
  virtual ~WatchPunishmentsRequest();

  WatchPunishmentsRequest(const WatchPunishmentsRequest& from);
  WatchPunishmentsRequest(WatchPunishmentsRequest&& from) noexcept
    : WatchPunishmentsRequest() {
    *this = ::std::move(from);
  }

  inline WatchPunishmentsRequest& operator=(const WatchPunishmentsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchPunishmentsRequest& operator=(WatchPunishmentsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WatchPunishmentsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WatchPunishmentsRequest* internal_default_instance() {
    return reinterpret_cast<const WatchPunishmentsRequest*>(
               &_WatchPunishmentsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(WatchPunishmentsRequest& a, WatchPunishmentsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchPunishmentsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchPunishmentsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WatchPunishmentsRequest* New() const final {
    return CreateMaybeMessage<WatchPunishmentsRequest>(nullptr);
  }

  WatchPunishmentsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WatchPunishmentsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WatchPunishmentsRequest& from);
  void MergeFrom(const WatchPunishmentsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchPunishmentsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.WatchPunishmentsRequest";
  }
  protected:
  explicit WatchPunishmentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.punishments.WatchPunishmentsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// -------------------------------------------------------------------

class WatchPunishmentsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.punishments.WatchPunishmentsResponse) */ {
 public:
  inline WatchPunishmentsResponse() : WatchPunishmentsResponse(nullptr) {}
  virtual ~WatchPunishmentsResponse();

  WatchPunishmentsResponse(const WatchPunishmentsResponse& from);
  WatchPunishmentsResponse(WatchPunishmentsResponse&& from) noexcept
    : WatchPunishmentsResponse() {
    *this = ::std::move(from);
  }

  inline WatchPunishmentsResponse& operator=(const WatchPunishmentsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchPunishmentsResponse& operator=(WatchPunishmentsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WatchPunishmentsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WatchPunishmentsResponse* internal_default_instance() {
    return reinterpret_cast<const WatchPunishmentsResponse*>(
               &_WatchPunishmentsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(WatchPunishmentsResponse& a, WatchPunishmentsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchPunishmentsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchPunishmentsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WatchPunishmentsResponse* New() const final {
    return CreateMaybeMessage<WatchPunishmentsResponse>(nullptr);
  }

  WatchPunishmentsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WatchPunishmentsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WatchPunishmentsResponse& from);
  void MergeFrom(const WatchPunishmentsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchPunishmentsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.punishments.WatchPunishmentsResponse";
  }
  protected:
  explicit WatchPunishmentsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_punishments_2fpunishments_2eproto);
    return ::descriptor_table_punishments_2fpunishments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kPunishmentIdFieldNumber = 2,
    kPlayerFieldNumber = 3,
    kCharacterFieldNumber = 4,
  };
  // .mruv.punishments.PunishmentType type = 1;
  void clear_type();
  ::mruv::punishments::PunishmentType type() const;
  void set_type(::mruv::punishments::PunishmentType value);
  private:
  ::mruv::punishments::PunishmentType _internal_type() const;
  void _internal_set_type(::mruv::punishments::PunishmentType value);
  public:

  // uint32 punishment_id = 2;
  void clear_punishment_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 punishment_id() const;
  void set_punishment_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_punishment_id() const;
  void _internal_set_punishment_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 player = 3;
  void clear_player();
  ::PROTOBUF_NAMESPACE_ID::uint32 player() const;
  void set_player(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_player() const;
  void _internal_set_player(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 character = 4;
  void clear_character();
  ::PROTOBUF_NAMESPACE_ID::uint32 character() const;
  void set_character(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_character() const;
  void _internal_set_character(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.punishments.WatchPunishmentsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 punishment_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 player_;
  ::PROTOBUF_NAMESPACE_ID::uint32 character_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_punishments_2fpunishments_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BanMessage

// uint32 player = 1;
inline void BanMessage::clear_player() {
  player_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BanMessage::_internal_player() const {
  return player_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BanMessage::player() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.BanMessage.player)
  return _internal_player();
}
inline void BanMessage::_internal_set_player(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  player_ = value;
}
inline void BanMessage::set_player(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_player(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.BanMessage.player)
}

// uint32 character = 2;
inline void BanMessage::clear_character() {
  character_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BanMessage::_internal_character() const {
  return character_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BanMessage::character() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.BanMessage.character)
  return _internal_character();
}
inline void BanMessage::_internal_set_character(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  character_ = value;
}
inline void BanMessage::set_character(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_character(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.BanMessage.character)
}

// string ip = 3;
inline void BanMessage::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BanMessage::ip() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.BanMessage.ip)
  return _internal_ip();
}
inline void BanMessage::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.BanMessage.ip)
}
inline std::string* BanMessage::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:mruv.punishments.BanMessage.ip)
  return _internal_mutable_ip();
}
inline const std::string& BanMessage::_internal_ip() const {
  return ip_.Get();
}
inline void BanMessage::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BanMessage::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.punishments.BanMessage.ip)
}
inline void BanMessage::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.punishments.BanMessage.ip)
}
inline void BanMessage::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.punishments.BanMessage.ip)
}
inline std::string* BanMessage::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BanMessage::release_ip() {
  // @@protoc_insertion_point(field_release:mruv.punishments.BanMessage.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BanMessage::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.punishments.BanMessage.ip)
}

// int64 expiration_date = 4;
inline void BanMessage::clear_expiration_date() {
  expiration_date_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BanMessage::_internal_expiration_date() const {
  return expiration_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BanMessage::expiration_date() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.BanMessage.expiration_date)
  return _internal_expiration_date();
}
inline void BanMessage::_internal_set_expiration_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  expiration_date_ = value;
}
inline void BanMessage::set_expiration_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_expiration_date(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.BanMessage.expiration_date)
}

// string reason = 5;
inline void BanMessage::clear_reason() {
  reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BanMessage::reason() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.BanMessage.reason)
  return _internal_reason();
}
inline void BanMessage::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.BanMessage.reason)
}
inline std::string* BanMessage::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:mruv.punishments.BanMessage.reason)
  return _internal_mutable_reason();
}
inline const std::string& BanMessage::_internal_reason() const {
  return reason_.Get();
}
inline void BanMessage::_internal_set_reason(const std::string& value) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BanMessage::set_reason(std::string&& value) {
  
  reason_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.punishments.BanMessage.reason)
}
inline void BanMessage::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.punishments.BanMessage.reason)
}
inline void BanMessage::set_reason(const char* value,
    size_t size) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.punishments.BanMessage.reason)
}
inline std::string* BanMessage::_internal_mutable_reason() {
  
  return reason_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BanMessage::release_reason() {
  // @@protoc_insertion_point(field_release:mruv.punishments.BanMessage.reason)
  return reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BanMessage::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.punishments.BanMessage.reason)
}

// uint32 admin = 6;
inline void BanMessage::clear_admin() {
  admin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BanMessage::_internal_admin() const {
  return admin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BanMessage::admin() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.BanMessage.admin)
  return _internal_admin();
}
inline void BanMessage::_internal_set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  admin_ = value;
}
inline void BanMessage::set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_admin(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.BanMessage.admin)
}

// int64 ban_date = 7;
inline void BanMessage::clear_ban_date() {
  ban_date_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BanMessage::_internal_ban_date() const {
  return ban_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BanMessage::ban_date() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.BanMessage.ban_date)
  return _internal_ban_date();
}
inline void BanMessage::_internal_set_ban_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  ban_date_ = value;
}
inline void BanMessage::set_ban_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_ban_date(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.BanMessage.ban_date)
}

// bool active = 8;
inline void BanMessage::clear_active() {
  active_ = false;
}
inline bool BanMessage::_internal_active() const {
  return active_;
}
inline bool BanMessage::active() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.BanMessage.active)
  return _internal_active();
}
inline void BanMessage::_internal_set_active(bool value) {
  
  active_ = value;
}
inline void BanMessage::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.BanMessage.active)
}

// int64 unban_date = 9;
inline void BanMessage::clear_unban_date() {
  unban_date_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BanMessage::_internal_unban_date() const {
  return unban_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BanMessage::unban_date() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.BanMessage.unban_date)
  return _internal_unban_date();
}
inline void BanMessage::_internal_set_unban_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  unban_date_ = value;
}
inline void BanMessage::set_unban_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_unban_date(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.BanMessage.unban_date)
}

// uint32 unban_admin = 10;
inline void BanMessage::clear_unban_admin() {
  unban_admin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BanMessage::_internal_unban_admin() const {
  return unban_admin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BanMessage::unban_admin() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.BanMessage.unban_admin)
  return _internal_unban_admin();
}
inline void BanMessage::_internal_set_unban_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  unban_admin_ = value;
}
inline void BanMessage::set_unban_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_unban_admin(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.BanMessage.unban_admin)
}

// -------------------------------------------------------------------

// WarnMessage

// uint32 player = 1;
inline void WarnMessage::clear_player() {
  player_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WarnMessage::_internal_player() const {
  return player_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WarnMessage::player() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.WarnMessage.player)
  return _internal_player();
}
inline void WarnMessage::_internal_set_player(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  player_ = value;
}
inline void WarnMessage::set_player(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_player(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.WarnMessage.player)
}

// uint32 character = 2;
inline void WarnMessage::clear_character() {
  character_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WarnMessage::_internal_character() const {
  return character_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WarnMessage::character() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.WarnMessage.character)
  return _internal_character();
}
inline void WarnMessage::_internal_set_character(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  character_ = value;
}
inline void WarnMessage::set_character(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_character(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.WarnMessage.character)
}

// int64 expiration_date = 3;
inline void WarnMessage::clear_expiration_date() {
  expiration_date_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WarnMessage::_internal_expiration_date() const {
  return expiration_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WarnMessage::expiration_date() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.WarnMessage.expiration_date)
  return _internal_expiration_date();
}
inline void WarnMessage::_internal_set_expiration_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  expiration_date_ = value;
}
inline void WarnMessage::set_expiration_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_expiration_date(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.WarnMessage.expiration_date)
}

// string reason = 4;
inline void WarnMessage::clear_reason() {
  reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WarnMessage::reason() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.WarnMessage.reason)
  return _internal_reason();
}
inline void WarnMessage::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.WarnMessage.reason)
}
inline std::string* WarnMessage::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:mruv.punishments.WarnMessage.reason)
  return _internal_mutable_reason();
}
inline const std::string& WarnMessage::_internal_reason() const {
  return reason_.Get();
}
inline void WarnMessage::_internal_set_reason(const std::string& value) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WarnMessage::set_reason(std::string&& value) {
  
  reason_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.punishments.WarnMessage.reason)
}
inline void WarnMessage::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.punishments.WarnMessage.reason)
}
inline void WarnMessage::set_reason(const char* value,
    size_t size) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.punishments.WarnMessage.reason)
}
inline std::string* WarnMessage::_internal_mutable_reason() {
  
  return reason_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WarnMessage::release_reason() {
  // @@protoc_insertion_point(field_release:mruv.punishments.WarnMessage.reason)
  return reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WarnMessage::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.punishments.WarnMessage.reason)
}

// uint32 admin = 5;
inline void WarnMessage::clear_admin() {
  admin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WarnMessage::_internal_admin() const {
  return admin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WarnMessage::admin() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.WarnMessage.admin)
  return _internal_admin();
}
inline void WarnMessage::_internal_set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  admin_ = value;
}
inline void WarnMessage::set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_admin(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.WarnMessage.admin)
}

// int64 warn_date = 6;
inline void WarnMessage::clear_warn_date() {
  warn_date_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WarnMessage::_internal_warn_date() const {
  return warn_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WarnMessage::warn_date() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.WarnMessage.warn_date)
  return _internal_warn_date();
}
inline void WarnMessage::_internal_set_warn_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  warn_date_ = value;
}
inline void WarnMessage::set_warn_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_warn_date(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.WarnMessage.warn_date)
}

// bool active = 7;
inline void WarnMessage::clear_active() {
  active_ = false;
}
inline bool WarnMessage::_internal_active() const {
  return active_;
}
inline bool WarnMessage::active() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.WarnMessage.active)
  return _internal_active();
}
inline void WarnMessage::_internal_set_active(bool value) {
  
  active_ = value;
}
inline void WarnMessage::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.WarnMessage.active)
}

// int64 unwarn_date = 8;
inline void WarnMessage::clear_unwarn_date() {
  unwarn_date_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WarnMessage::_internal_unwarn_date() const {
  return unwarn_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WarnMessage::unwarn_date() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.WarnMessage.unwarn_date)
  return _internal_unwarn_date();
}
inline void WarnMessage::_internal_set_unwarn_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  unwarn_date_ = value;
}
inline void WarnMessage::set_unwarn_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_unwarn_date(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.WarnMessage.unwarn_date)
}

// uint32 unwarn_admin = 9;
inline void WarnMessage::clear_unwarn_admin() {
  unwarn_admin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WarnMessage::_internal_unwarn_admin() const {
  return unwarn_admin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WarnMessage::unwarn_admin() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.WarnMessage.unwarn_admin)
  return _internal_unwarn_admin();
}
inline void WarnMessage::_internal_set_unwarn_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  unwarn_admin_ = value;
}
inline void WarnMessage::set_unwarn_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_unwarn_admin(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.WarnMessage.unwarn_admin)
}

// -------------------------------------------------------------------

// BlockMessage

// uint32 player = 1;
inline void BlockMessage::clear_player() {
  player_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockMessage::_internal_player() const {
  return player_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockMessage::player() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.BlockMessage.player)
  return _internal_player();
}
inline void BlockMessage::_internal_set_player(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  player_ = value;
}
inline void BlockMessage::set_player(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_player(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.BlockMessage.player)
}

// uint32 character = 2;
inline void BlockMessage::clear_character() {
  character_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockMessage::_internal_character() const {
  return character_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockMessage::character() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.BlockMessage.character)
  return _internal_character();
}
inline void BlockMessage::_internal_set_character(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  character_ = value;
}
inline void BlockMessage::set_character(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_character(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.BlockMessage.character)
}

// string reason = 3;
inline void BlockMessage::clear_reason() {
  reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BlockMessage::reason() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.BlockMessage.reason)
  return _internal_reason();
}
inline void BlockMessage::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.BlockMessage.reason)
}
inline std::string* BlockMessage::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:mruv.punishments.BlockMessage.reason)
  return _internal_mutable_reason();
}
inline const std::string& BlockMessage::_internal_reason() const {
  return reason_.Get();
}
inline void BlockMessage::_internal_set_reason(const std::string& value) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BlockMessage::set_reason(std::string&& value) {
  
  reason_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.punishments.BlockMessage.reason)
}
inline void BlockMessage::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.punishments.BlockMessage.reason)
}
inline void BlockMessage::set_reason(const char* value,
    size_t size) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.punishments.BlockMessage.reason)
}
inline std::string* BlockMessage::_internal_mutable_reason() {
  
  return reason_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BlockMessage::release_reason() {
  // @@protoc_insertion_point(field_release:mruv.punishments.BlockMessage.reason)
  return reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlockMessage::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.punishments.BlockMessage.reason)
}

// uint32 admin = 4;
inline void BlockMessage::clear_admin() {
  admin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockMessage::_internal_admin() const {
  return admin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockMessage::admin() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.BlockMessage.admin)
  return _internal_admin();
}
inline void BlockMessage::_internal_set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  admin_ = value;
}
inline void BlockMessage::set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_admin(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.BlockMessage.admin)
}

// int64 block_date = 5;
inline void BlockMessage::clear_block_date() {
  block_date_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BlockMessage::_internal_block_date() const {
  return block_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BlockMessage::block_date() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.BlockMessage.block_date)
  return _internal_block_date();
}
inline void BlockMessage::_internal_set_block_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  block_date_ = value;
}
inline void BlockMessage::set_block_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_block_date(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.BlockMessage.block_date)
}

// bool active = 6;
inline void BlockMessage::clear_active() {
  active_ = false;
}
inline bool BlockMessage::_internal_active() const {
  return active_;
}
inline bool BlockMessage::active() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.BlockMessage.active)
  return _internal_active();
}
inline void BlockMessage::_internal_set_active(bool value) {
  
  active_ = value;
}
inline void BlockMessage::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.BlockMessage.active)
}

// int64 unblock_date = 7;
inline void BlockMessage::clear_unblock_date() {
  unblock_date_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BlockMessage::_internal_unblock_date() const {
  return unblock_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BlockMessage::unblock_date() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.BlockMessage.unblock_date)
  return _internal_unblock_date();
}
inline void BlockMessage::_internal_set_unblock_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  unblock_date_ = value;
}
inline void BlockMessage::set_unblock_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_unblock_date(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.BlockMessage.unblock_date)
}

// uint32 unblock_admin = 8;
inline void BlockMessage::clear_unblock_admin() {
  unblock_admin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockMessage::_internal_unblock_admin() const {
  return unblock_admin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockMessage::unblock_admin() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.BlockMessage.unblock_admin)
  return _internal_unblock_admin();
}
inline void BlockMessage::_internal_set_unblock_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  unblock_admin_ = value;
}
inline void BlockMessage::set_unblock_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_unblock_admin(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.BlockMessage.unblock_admin)
}

// -------------------------------------------------------------------

// AdminJailMessage

// uint32 player = 1;
inline void AdminJailMessage::clear_player() {
  player_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AdminJailMessage::_internal_player() const {
  return player_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AdminJailMessage::player() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.AdminJailMessage.player)
  return _internal_player();
}
inline void AdminJailMessage::_internal_set_player(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  player_ = value;
}
inline void AdminJailMessage::set_player(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_player(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.AdminJailMessage.player)
}

// uint32 character = 2;
inline void AdminJailMessage::clear_character() {
  character_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AdminJailMessage::_internal_character() const {
  return character_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AdminJailMessage::character() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.AdminJailMessage.character)
  return _internal_character();
}
inline void AdminJailMessage::_internal_set_character(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  character_ = value;
}
inline void AdminJailMessage::set_character(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_character(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.AdminJailMessage.character)
}

// string reason = 3;
inline void AdminJailMessage::clear_reason() {
  reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AdminJailMessage::reason() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.AdminJailMessage.reason)
  return _internal_reason();
}
inline void AdminJailMessage::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.AdminJailMessage.reason)
}
inline std::string* AdminJailMessage::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:mruv.punishments.AdminJailMessage.reason)
  return _internal_mutable_reason();
}
inline const std::string& AdminJailMessage::_internal_reason() const {
  return reason_.Get();
}
inline void AdminJailMessage::_internal_set_reason(const std::string& value) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AdminJailMessage::set_reason(std::string&& value) {
  
  reason_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.punishments.AdminJailMessage.reason)
}
inline void AdminJailMessage::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.punishments.AdminJailMessage.reason)
}
inline void AdminJailMessage::set_reason(const char* value,
    size_t size) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.punishments.AdminJailMessage.reason)
}
inline std::string* AdminJailMessage::_internal_mutable_reason() {
  
  return reason_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AdminJailMessage::release_reason() {
  // @@protoc_insertion_point(field_release:mruv.punishments.AdminJailMessage.reason)
  return reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AdminJailMessage::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.punishments.AdminJailMessage.reason)
}

// uint32 admin = 4;
inline void AdminJailMessage::clear_admin() {
  admin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AdminJailMessage::_internal_admin() const {
  return admin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AdminJailMessage::admin() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.AdminJailMessage.admin)
  return _internal_admin();
}
inline void AdminJailMessage::_internal_set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  admin_ = value;
}
inline void AdminJailMessage::set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_admin(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.AdminJailMessage.admin)
}

// int64 aj_date = 5;
inline void AdminJailMessage::clear_aj_date() {
  aj_date_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AdminJailMessage::_internal_aj_date() const {
  return aj_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AdminJailMessage::aj_date() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.AdminJailMessage.aj_date)
  return _internal_aj_date();
}
inline void AdminJailMessage::_internal_set_aj_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  aj_date_ = value;
}
inline void AdminJailMessage::set_aj_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_aj_date(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.AdminJailMessage.aj_date)
}

// uint32 jail_time = 6;
inline void AdminJailMessage::clear_jail_time() {
  jail_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AdminJailMessage::_internal_jail_time() const {
  return jail_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AdminJailMessage::jail_time() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.AdminJailMessage.jail_time)
  return _internal_jail_time();
}
inline void AdminJailMessage::_internal_set_jail_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  jail_time_ = value;
}
inline void AdminJailMessage::set_jail_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_jail_time(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.AdminJailMessage.jail_time)
}

// -------------------------------------------------------------------

// UnBanMessage

// uint32 player = 1;
inline void UnBanMessage::clear_player() {
  player_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnBanMessage::_internal_player() const {
  return player_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnBanMessage::player() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.UnBanMessage.player)
  return _internal_player();
}
inline void UnBanMessage::_internal_set_player(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  player_ = value;
}
inline void UnBanMessage::set_player(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_player(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.UnBanMessage.player)
}

// uint32 ban_id = 2;
inline void UnBanMessage::clear_ban_id() {
  ban_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnBanMessage::_internal_ban_id() const {
  return ban_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnBanMessage::ban_id() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.UnBanMessage.ban_id)
  return _internal_ban_id();
}
inline void UnBanMessage::_internal_set_ban_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ban_id_ = value;
}
inline void UnBanMessage::set_ban_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ban_id(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.UnBanMessage.ban_id)
}

// -------------------------------------------------------------------

// UnBlockMessage

// uint32 player = 1;
inline void UnBlockMessage::clear_player() {
  player_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnBlockMessage::_internal_player() const {
  return player_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnBlockMessage::player() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.UnBlockMessage.player)
  return _internal_player();
}
inline void UnBlockMessage::_internal_set_player(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  player_ = value;
}
inline void UnBlockMessage::set_player(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_player(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.UnBlockMessage.player)
}

// uint32 block_id = 2;
inline void UnBlockMessage::clear_block_id() {
  block_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnBlockMessage::_internal_block_id() const {
  return block_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnBlockMessage::block_id() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.UnBlockMessage.block_id)
  return _internal_block_id();
}
inline void UnBlockMessage::_internal_set_block_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  block_id_ = value;
}
inline void UnBlockMessage::set_block_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_block_id(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.UnBlockMessage.block_id)
}

// -------------------------------------------------------------------

// UnWarnMessage

// uint32 player = 1;
inline void UnWarnMessage::clear_player() {
  player_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnWarnMessage::_internal_player() const {
  return player_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnWarnMessage::player() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.UnWarnMessage.player)
  return _internal_player();
}
inline void UnWarnMessage::_internal_set_player(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  player_ = value;
}
inline void UnWarnMessage::set_player(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_player(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.UnWarnMessage.player)
}

// uint32 warn_id = 2;
inline void UnWarnMessage::clear_warn_id() {
  warn_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnWarnMessage::_internal_warn_id() const {
  return warn_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnWarnMessage::warn_id() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.UnWarnMessage.warn_id)
  return _internal_warn_id();
}
inline void UnWarnMessage::_internal_set_warn_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  warn_id_ = value;
}
inline void UnWarnMessage::set_warn_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_warn_id(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.UnWarnMessage.warn_id)
}

// -------------------------------------------------------------------

// UnAdminJailMessage

// uint32 player = 1;
inline void UnAdminJailMessage::clear_player() {
  player_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnAdminJailMessage::_internal_player() const {
  return player_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnAdminJailMessage::player() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.UnAdminJailMessage.player)
  return _internal_player();
}
inline void UnAdminJailMessage::_internal_set_player(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  player_ = value;
}
inline void UnAdminJailMessage::set_player(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_player(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.UnAdminJailMessage.player)
}

// uint32 character = 2;
inline void UnAdminJailMessage::clear_character() {
  character_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnAdminJailMessage::_internal_character() const {
  return character_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnAdminJailMessage::character() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.UnAdminJailMessage.character)
  return _internal_character();
}
inline void UnAdminJailMessage::_internal_set_character(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  character_ = value;
}
inline void UnAdminJailMessage::set_character(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_character(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.UnAdminJailMessage.character)
}

// -------------------------------------------------------------------

// BanRequest

// uint32 player = 1;
inline void BanRequest::clear_player() {
  player_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BanRequest::_internal_player() const {
  return player_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BanRequest::player() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.BanRequest.player)
  return _internal_player();
}
inline void BanRequest::_internal_set_player(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  player_ = value;
}
inline void BanRequest::set_player(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_player(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.BanRequest.player)
}

// uint32 character = 2;
inline void BanRequest::clear_character() {
  character_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BanRequest::_internal_character() const {
  return character_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BanRequest::character() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.BanRequest.character)
  return _internal_character();
}
inline void BanRequest::_internal_set_character(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  character_ = value;
}
inline void BanRequest::set_character(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_character(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.BanRequest.character)
}

// string ip = 3;
inline void BanRequest::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BanRequest::ip() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.BanRequest.ip)
  return _internal_ip();
}
inline void BanRequest::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.BanRequest.ip)
}
inline std::string* BanRequest::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:mruv.punishments.BanRequest.ip)
  return _internal_mutable_ip();
}
inline const std::string& BanRequest::_internal_ip() const {
  return ip_.Get();
}
inline void BanRequest::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BanRequest::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.punishments.BanRequest.ip)
}
inline void BanRequest::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.punishments.BanRequest.ip)
}
inline void BanRequest::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.punishments.BanRequest.ip)
}
inline std::string* BanRequest::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BanRequest::release_ip() {
  // @@protoc_insertion_point(field_release:mruv.punishments.BanRequest.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BanRequest::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.punishments.BanRequest.ip)
}

// uint32 time = 4;
inline void BanRequest::clear_time() {
  time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BanRequest::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BanRequest::time() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.BanRequest.time)
  return _internal_time();
}
inline void BanRequest::_internal_set_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  time_ = value;
}
inline void BanRequest::set_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.BanRequest.time)
}

// string reason = 5;
inline void BanRequest::clear_reason() {
  reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BanRequest::reason() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.BanRequest.reason)
  return _internal_reason();
}
inline void BanRequest::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.BanRequest.reason)
}
inline std::string* BanRequest::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:mruv.punishments.BanRequest.reason)
  return _internal_mutable_reason();
}
inline const std::string& BanRequest::_internal_reason() const {
  return reason_.Get();
}
inline void BanRequest::_internal_set_reason(const std::string& value) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BanRequest::set_reason(std::string&& value) {
  
  reason_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.punishments.BanRequest.reason)
}
inline void BanRequest::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.punishments.BanRequest.reason)
}
inline void BanRequest::set_reason(const char* value,
    size_t size) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.punishments.BanRequest.reason)
}
inline std::string* BanRequest::_internal_mutable_reason() {
  
  return reason_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BanRequest::release_reason() {
  // @@protoc_insertion_point(field_release:mruv.punishments.BanRequest.reason)
  return reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BanRequest::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.punishments.BanRequest.reason)
}

// uint32 admin = 6;
inline void BanRequest::clear_admin() {
  admin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BanRequest::_internal_admin() const {
  return admin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BanRequest::admin() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.BanRequest.admin)
  return _internal_admin();
}
inline void BanRequest::_internal_set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  admin_ = value;
}
inline void BanRequest::set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_admin(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.BanRequest.admin)
}

// -------------------------------------------------------------------

// BanResponse

// uint32 ban_id = 1;
inline void BanResponse::clear_ban_id() {
  ban_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BanResponse::_internal_ban_id() const {
  return ban_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BanResponse::ban_id() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.BanResponse.ban_id)
  return _internal_ban_id();
}
inline void BanResponse::_internal_set_ban_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ban_id_ = value;
}
inline void BanResponse::set_ban_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ban_id(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.BanResponse.ban_id)
}

// -------------------------------------------------------------------

// BlockRequest

// uint32 character = 1;
inline void BlockRequest::clear_character() {
  character_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockRequest::_internal_character() const {
  return character_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockRequest::character() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.BlockRequest.character)
  return _internal_character();
}
inline void BlockRequest::_internal_set_character(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  character_ = value;
}
inline void BlockRequest::set_character(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_character(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.BlockRequest.character)
}

// string reason = 2;
inline void BlockRequest::clear_reason() {
  reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BlockRequest::reason() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.BlockRequest.reason)
  return _internal_reason();
}
inline void BlockRequest::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.BlockRequest.reason)
}
inline std::string* BlockRequest::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:mruv.punishments.BlockRequest.reason)
  return _internal_mutable_reason();
}
inline const std::string& BlockRequest::_internal_reason() const {
  return reason_.Get();
}
inline void BlockRequest::_internal_set_reason(const std::string& value) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BlockRequest::set_reason(std::string&& value) {
  
  reason_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.punishments.BlockRequest.reason)
}
inline void BlockRequest::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.punishments.BlockRequest.reason)
}
inline void BlockRequest::set_reason(const char* value,
    size_t size) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.punishments.BlockRequest.reason)
}
inline std::string* BlockRequest::_internal_mutable_reason() {
  
  return reason_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BlockRequest::release_reason() {
  // @@protoc_insertion_point(field_release:mruv.punishments.BlockRequest.reason)
  return reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlockRequest::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.punishments.BlockRequest.reason)
}

// uint32 admin = 3;
inline void BlockRequest::clear_admin() {
  admin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockRequest::_internal_admin() const {
  return admin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockRequest::admin() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.BlockRequest.admin)
  return _internal_admin();
}
inline void BlockRequest::_internal_set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  admin_ = value;
}
inline void BlockRequest::set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_admin(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.BlockRequest.admin)
}

// -------------------------------------------------------------------

// BlockResponse

// uint32 block_id = 1;
inline void BlockResponse::clear_block_id() {
  block_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockResponse::_internal_block_id() const {
  return block_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockResponse::block_id() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.BlockResponse.block_id)
  return _internal_block_id();
}
inline void BlockResponse::_internal_set_block_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  block_id_ = value;
}
inline void BlockResponse::set_block_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_block_id(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.BlockResponse.block_id)
}

// -------------------------------------------------------------------

// WarnRequest

// uint32 player = 1;
inline void WarnRequest::clear_player() {
  player_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WarnRequest::_internal_player() const {
  return player_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WarnRequest::player() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.WarnRequest.player)
  return _internal_player();
}
inline void WarnRequest::_internal_set_player(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  player_ = value;
}
inline void WarnRequest::set_player(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_player(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.WarnRequest.player)
}

// uint32 character = 2;
inline void WarnRequest::clear_character() {
  character_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WarnRequest::_internal_character() const {
  return character_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WarnRequest::character() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.WarnRequest.character)
  return _internal_character();
}
inline void WarnRequest::_internal_set_character(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  character_ = value;
}
inline void WarnRequest::set_character(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_character(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.WarnRequest.character)
}

// uint32 time = 3;
inline void WarnRequest::clear_time() {
  time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WarnRequest::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WarnRequest::time() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.WarnRequest.time)
  return _internal_time();
}
inline void WarnRequest::_internal_set_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  time_ = value;
}
inline void WarnRequest::set_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.WarnRequest.time)
}

// string reason = 4;
inline void WarnRequest::clear_reason() {
  reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WarnRequest::reason() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.WarnRequest.reason)
  return _internal_reason();
}
inline void WarnRequest::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.WarnRequest.reason)
}
inline std::string* WarnRequest::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:mruv.punishments.WarnRequest.reason)
  return _internal_mutable_reason();
}
inline const std::string& WarnRequest::_internal_reason() const {
  return reason_.Get();
}
inline void WarnRequest::_internal_set_reason(const std::string& value) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WarnRequest::set_reason(std::string&& value) {
  
  reason_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.punishments.WarnRequest.reason)
}
inline void WarnRequest::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.punishments.WarnRequest.reason)
}
inline void WarnRequest::set_reason(const char* value,
    size_t size) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.punishments.WarnRequest.reason)
}
inline std::string* WarnRequest::_internal_mutable_reason() {
  
  return reason_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WarnRequest::release_reason() {
  // @@protoc_insertion_point(field_release:mruv.punishments.WarnRequest.reason)
  return reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WarnRequest::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.punishments.WarnRequest.reason)
}

// uint32 admin = 5;
inline void WarnRequest::clear_admin() {
  admin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WarnRequest::_internal_admin() const {
  return admin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WarnRequest::admin() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.WarnRequest.admin)
  return _internal_admin();
}
inline void WarnRequest::_internal_set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  admin_ = value;
}
inline void WarnRequest::set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_admin(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.WarnRequest.admin)
}

// -------------------------------------------------------------------

// WarnResponse

// uint32 warn_id = 1;
inline void WarnResponse::clear_warn_id() {
  warn_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WarnResponse::_internal_warn_id() const {
  return warn_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WarnResponse::warn_id() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.WarnResponse.warn_id)
  return _internal_warn_id();
}
inline void WarnResponse::_internal_set_warn_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  warn_id_ = value;
}
inline void WarnResponse::set_warn_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_warn_id(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.WarnResponse.warn_id)
}

// -------------------------------------------------------------------

// AdminJailRequest

// uint32 character = 1;
inline void AdminJailRequest::clear_character() {
  character_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AdminJailRequest::_internal_character() const {
  return character_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AdminJailRequest::character() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.AdminJailRequest.character)
  return _internal_character();
}
inline void AdminJailRequest::_internal_set_character(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  character_ = value;
}
inline void AdminJailRequest::set_character(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_character(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.AdminJailRequest.character)
}

// uint32 time = 2;
inline void AdminJailRequest::clear_time() {
  time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AdminJailRequest::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AdminJailRequest::time() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.AdminJailRequest.time)
  return _internal_time();
}
inline void AdminJailRequest::_internal_set_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  time_ = value;
}
inline void AdminJailRequest::set_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.AdminJailRequest.time)
}

// string reason = 3;
inline void AdminJailRequest::clear_reason() {
  reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AdminJailRequest::reason() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.AdminJailRequest.reason)
  return _internal_reason();
}
inline void AdminJailRequest::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.AdminJailRequest.reason)
}
inline std::string* AdminJailRequest::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:mruv.punishments.AdminJailRequest.reason)
  return _internal_mutable_reason();
}
inline const std::string& AdminJailRequest::_internal_reason() const {
  return reason_.Get();
}
inline void AdminJailRequest::_internal_set_reason(const std::string& value) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AdminJailRequest::set_reason(std::string&& value) {
  
  reason_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.punishments.AdminJailRequest.reason)
}
inline void AdminJailRequest::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.punishments.AdminJailRequest.reason)
}
inline void AdminJailRequest::set_reason(const char* value,
    size_t size) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.punishments.AdminJailRequest.reason)
}
inline std::string* AdminJailRequest::_internal_mutable_reason() {
  
  return reason_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AdminJailRequest::release_reason() {
  // @@protoc_insertion_point(field_release:mruv.punishments.AdminJailRequest.reason)
  return reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AdminJailRequest::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.punishments.AdminJailRequest.reason)
}

// uint32 admin = 4;
inline void AdminJailRequest::clear_admin() {
  admin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AdminJailRequest::_internal_admin() const {
  return admin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AdminJailRequest::admin() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.AdminJailRequest.admin)
  return _internal_admin();
}
inline void AdminJailRequest::_internal_set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  admin_ = value;
}
inline void AdminJailRequest::set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_admin(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.AdminJailRequest.admin)
}

// -------------------------------------------------------------------

// AdminJailResponse

// -------------------------------------------------------------------

// MuteGlobalChatsRequest

// uint32 account = 1;
inline void MuteGlobalChatsRequest::clear_account() {
  account_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MuteGlobalChatsRequest::_internal_account() const {
  return account_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MuteGlobalChatsRequest::account() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.MuteGlobalChatsRequest.account)
  return _internal_account();
}
inline void MuteGlobalChatsRequest::_internal_set_account(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  account_ = value;
}
inline void MuteGlobalChatsRequest::set_account(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.MuteGlobalChatsRequest.account)
}

// -------------------------------------------------------------------

// MuteGlobalChatsResponse

// -------------------------------------------------------------------

// UnBanRequest

// uint32 ban_id = 1;
inline void UnBanRequest::clear_ban_id() {
  ban_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnBanRequest::_internal_ban_id() const {
  return ban_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnBanRequest::ban_id() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.UnBanRequest.ban_id)
  return _internal_ban_id();
}
inline void UnBanRequest::_internal_set_ban_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ban_id_ = value;
}
inline void UnBanRequest::set_ban_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ban_id(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.UnBanRequest.ban_id)
}

// string reason = 2;
inline void UnBanRequest::clear_reason() {
  reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UnBanRequest::reason() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.UnBanRequest.reason)
  return _internal_reason();
}
inline void UnBanRequest::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.UnBanRequest.reason)
}
inline std::string* UnBanRequest::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:mruv.punishments.UnBanRequest.reason)
  return _internal_mutable_reason();
}
inline const std::string& UnBanRequest::_internal_reason() const {
  return reason_.Get();
}
inline void UnBanRequest::_internal_set_reason(const std::string& value) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UnBanRequest::set_reason(std::string&& value) {
  
  reason_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.punishments.UnBanRequest.reason)
}
inline void UnBanRequest::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.punishments.UnBanRequest.reason)
}
inline void UnBanRequest::set_reason(const char* value,
    size_t size) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.punishments.UnBanRequest.reason)
}
inline std::string* UnBanRequest::_internal_mutable_reason() {
  
  return reason_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UnBanRequest::release_reason() {
  // @@protoc_insertion_point(field_release:mruv.punishments.UnBanRequest.reason)
  return reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnBanRequest::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.punishments.UnBanRequest.reason)
}

// -------------------------------------------------------------------

// UnBanResponse

// -------------------------------------------------------------------

// UnBlockRequest

// uint32 block_id = 1;
inline void UnBlockRequest::clear_block_id() {
  block_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnBlockRequest::_internal_block_id() const {
  return block_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnBlockRequest::block_id() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.UnBlockRequest.block_id)
  return _internal_block_id();
}
inline void UnBlockRequest::_internal_set_block_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  block_id_ = value;
}
inline void UnBlockRequest::set_block_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_block_id(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.UnBlockRequest.block_id)
}

// string reason = 2;
inline void UnBlockRequest::clear_reason() {
  reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UnBlockRequest::reason() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.UnBlockRequest.reason)
  return _internal_reason();
}
inline void UnBlockRequest::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.UnBlockRequest.reason)
}
inline std::string* UnBlockRequest::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:mruv.punishments.UnBlockRequest.reason)
  return _internal_mutable_reason();
}
inline const std::string& UnBlockRequest::_internal_reason() const {
  return reason_.Get();
}
inline void UnBlockRequest::_internal_set_reason(const std::string& value) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UnBlockRequest::set_reason(std::string&& value) {
  
  reason_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.punishments.UnBlockRequest.reason)
}
inline void UnBlockRequest::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.punishments.UnBlockRequest.reason)
}
inline void UnBlockRequest::set_reason(const char* value,
    size_t size) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.punishments.UnBlockRequest.reason)
}
inline std::string* UnBlockRequest::_internal_mutable_reason() {
  
  return reason_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UnBlockRequest::release_reason() {
  // @@protoc_insertion_point(field_release:mruv.punishments.UnBlockRequest.reason)
  return reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnBlockRequest::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.punishments.UnBlockRequest.reason)
}

// -------------------------------------------------------------------

// UnBlockResponse

// -------------------------------------------------------------------

// UnWarnRequest

// uint32 warn_id = 1;
inline void UnWarnRequest::clear_warn_id() {
  warn_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnWarnRequest::_internal_warn_id() const {
  return warn_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnWarnRequest::warn_id() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.UnWarnRequest.warn_id)
  return _internal_warn_id();
}
inline void UnWarnRequest::_internal_set_warn_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  warn_id_ = value;
}
inline void UnWarnRequest::set_warn_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_warn_id(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.UnWarnRequest.warn_id)
}

// string reason = 2;
inline void UnWarnRequest::clear_reason() {
  reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UnWarnRequest::reason() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.UnWarnRequest.reason)
  return _internal_reason();
}
inline void UnWarnRequest::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.UnWarnRequest.reason)
}
inline std::string* UnWarnRequest::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:mruv.punishments.UnWarnRequest.reason)
  return _internal_mutable_reason();
}
inline const std::string& UnWarnRequest::_internal_reason() const {
  return reason_.Get();
}
inline void UnWarnRequest::_internal_set_reason(const std::string& value) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UnWarnRequest::set_reason(std::string&& value) {
  
  reason_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.punishments.UnWarnRequest.reason)
}
inline void UnWarnRequest::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.punishments.UnWarnRequest.reason)
}
inline void UnWarnRequest::set_reason(const char* value,
    size_t size) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.punishments.UnWarnRequest.reason)
}
inline std::string* UnWarnRequest::_internal_mutable_reason() {
  
  return reason_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UnWarnRequest::release_reason() {
  // @@protoc_insertion_point(field_release:mruv.punishments.UnWarnRequest.reason)
  return reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnWarnRequest::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.punishments.UnWarnRequest.reason)
}

// -------------------------------------------------------------------

// UnWarnResponse

// -------------------------------------------------------------------

// UnAdminJailRequest

// uint32 character = 1;
inline void UnAdminJailRequest::clear_character() {
  character_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnAdminJailRequest::_internal_character() const {
  return character_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnAdminJailRequest::character() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.UnAdminJailRequest.character)
  return _internal_character();
}
inline void UnAdminJailRequest::_internal_set_character(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  character_ = value;
}
inline void UnAdminJailRequest::set_character(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_character(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.UnAdminJailRequest.character)
}

// -------------------------------------------------------------------

// UnAdminJailResponse

// -------------------------------------------------------------------

// UnMuteGlobalChatsRequest

// uint32 account = 1;
inline void UnMuteGlobalChatsRequest::clear_account() {
  account_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnMuteGlobalChatsRequest::_internal_account() const {
  return account_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnMuteGlobalChatsRequest::account() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.UnMuteGlobalChatsRequest.account)
  return _internal_account();
}
inline void UnMuteGlobalChatsRequest::_internal_set_account(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  account_ = value;
}
inline void UnMuteGlobalChatsRequest::set_account(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.UnMuteGlobalChatsRequest.account)
}

// -------------------------------------------------------------------

// UnMuteGlobalChatsResponse

// -------------------------------------------------------------------

// GetPlayerBansRequest

// uint32 player = 1;
inline void GetPlayerBansRequest::clear_player() {
  player_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetPlayerBansRequest::_internal_player() const {
  return player_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetPlayerBansRequest::player() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.GetPlayerBansRequest.player)
  return _internal_player();
}
inline void GetPlayerBansRequest::_internal_set_player(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  player_ = value;
}
inline void GetPlayerBansRequest::set_player(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_player(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.GetPlayerBansRequest.player)
}

// string ip = 2;
inline void GetPlayerBansRequest::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetPlayerBansRequest::ip() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.GetPlayerBansRequest.ip)
  return _internal_ip();
}
inline void GetPlayerBansRequest::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.GetPlayerBansRequest.ip)
}
inline std::string* GetPlayerBansRequest::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:mruv.punishments.GetPlayerBansRequest.ip)
  return _internal_mutable_ip();
}
inline const std::string& GetPlayerBansRequest::_internal_ip() const {
  return ip_.Get();
}
inline void GetPlayerBansRequest::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetPlayerBansRequest::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.punishments.GetPlayerBansRequest.ip)
}
inline void GetPlayerBansRequest::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.punishments.GetPlayerBansRequest.ip)
}
inline void GetPlayerBansRequest::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.punishments.GetPlayerBansRequest.ip)
}
inline std::string* GetPlayerBansRequest::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetPlayerBansRequest::release_ip() {
  // @@protoc_insertion_point(field_release:mruv.punishments.GetPlayerBansRequest.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetPlayerBansRequest::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.punishments.GetPlayerBansRequest.ip)
}

// -------------------------------------------------------------------

// GetPlayerBansResponse

// repeated .mruv.punishments.BanMessage bans = 1;
inline int GetPlayerBansResponse::_internal_bans_size() const {
  return bans_.size();
}
inline int GetPlayerBansResponse::bans_size() const {
  return _internal_bans_size();
}
inline void GetPlayerBansResponse::clear_bans() {
  bans_.Clear();
}
inline ::mruv::punishments::BanMessage* GetPlayerBansResponse::mutable_bans(int index) {
  // @@protoc_insertion_point(field_mutable:mruv.punishments.GetPlayerBansResponse.bans)
  return bans_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::punishments::BanMessage >*
GetPlayerBansResponse::mutable_bans() {
  // @@protoc_insertion_point(field_mutable_list:mruv.punishments.GetPlayerBansResponse.bans)
  return &bans_;
}
inline const ::mruv::punishments::BanMessage& GetPlayerBansResponse::_internal_bans(int index) const {
  return bans_.Get(index);
}
inline const ::mruv::punishments::BanMessage& GetPlayerBansResponse::bans(int index) const {
  // @@protoc_insertion_point(field_get:mruv.punishments.GetPlayerBansResponse.bans)
  return _internal_bans(index);
}
inline ::mruv::punishments::BanMessage* GetPlayerBansResponse::_internal_add_bans() {
  return bans_.Add();
}
inline ::mruv::punishments::BanMessage* GetPlayerBansResponse::add_bans() {
  // @@protoc_insertion_point(field_add:mruv.punishments.GetPlayerBansResponse.bans)
  return _internal_add_bans();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::punishments::BanMessage >&
GetPlayerBansResponse::bans() const {
  // @@protoc_insertion_point(field_list:mruv.punishments.GetPlayerBansResponse.bans)
  return bans_;
}

// -------------------------------------------------------------------

// GetPlayerWarnsRequest

// uint32 player = 1;
inline void GetPlayerWarnsRequest::clear_player() {
  player_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetPlayerWarnsRequest::_internal_player() const {
  return player_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetPlayerWarnsRequest::player() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.GetPlayerWarnsRequest.player)
  return _internal_player();
}
inline void GetPlayerWarnsRequest::_internal_set_player(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  player_ = value;
}
inline void GetPlayerWarnsRequest::set_player(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_player(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.GetPlayerWarnsRequest.player)
}

// -------------------------------------------------------------------

// GetPlayerWarnsResponse

// repeated .mruv.punishments.WarnMessage warns = 1;
inline int GetPlayerWarnsResponse::_internal_warns_size() const {
  return warns_.size();
}
inline int GetPlayerWarnsResponse::warns_size() const {
  return _internal_warns_size();
}
inline void GetPlayerWarnsResponse::clear_warns() {
  warns_.Clear();
}
inline ::mruv::punishments::WarnMessage* GetPlayerWarnsResponse::mutable_warns(int index) {
  // @@protoc_insertion_point(field_mutable:mruv.punishments.GetPlayerWarnsResponse.warns)
  return warns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::punishments::WarnMessage >*
GetPlayerWarnsResponse::mutable_warns() {
  // @@protoc_insertion_point(field_mutable_list:mruv.punishments.GetPlayerWarnsResponse.warns)
  return &warns_;
}
inline const ::mruv::punishments::WarnMessage& GetPlayerWarnsResponse::_internal_warns(int index) const {
  return warns_.Get(index);
}
inline const ::mruv::punishments::WarnMessage& GetPlayerWarnsResponse::warns(int index) const {
  // @@protoc_insertion_point(field_get:mruv.punishments.GetPlayerWarnsResponse.warns)
  return _internal_warns(index);
}
inline ::mruv::punishments::WarnMessage* GetPlayerWarnsResponse::_internal_add_warns() {
  return warns_.Add();
}
inline ::mruv::punishments::WarnMessage* GetPlayerWarnsResponse::add_warns() {
  // @@protoc_insertion_point(field_add:mruv.punishments.GetPlayerWarnsResponse.warns)
  return _internal_add_warns();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::punishments::WarnMessage >&
GetPlayerWarnsResponse::warns() const {
  // @@protoc_insertion_point(field_list:mruv.punishments.GetPlayerWarnsResponse.warns)
  return warns_;
}

// -------------------------------------------------------------------

// GetPlayerAdminJailRequest

// uint32 character = 1;
inline void GetPlayerAdminJailRequest::clear_character() {
  character_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetPlayerAdminJailRequest::_internal_character() const {
  return character_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetPlayerAdminJailRequest::character() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.GetPlayerAdminJailRequest.character)
  return _internal_character();
}
inline void GetPlayerAdminJailRequest::_internal_set_character(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  character_ = value;
}
inline void GetPlayerAdminJailRequest::set_character(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_character(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.GetPlayerAdminJailRequest.character)
}

// -------------------------------------------------------------------

// GetPlayerAdminJailResponse

// uint32 jail_time = 1;
inline void GetPlayerAdminJailResponse::clear_jail_time() {
  jail_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetPlayerAdminJailResponse::_internal_jail_time() const {
  return jail_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetPlayerAdminJailResponse::jail_time() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.GetPlayerAdminJailResponse.jail_time)
  return _internal_jail_time();
}
inline void GetPlayerAdminJailResponse::_internal_set_jail_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  jail_time_ = value;
}
inline void GetPlayerAdminJailResponse::set_jail_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_jail_time(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.GetPlayerAdminJailResponse.jail_time)
}

// string reason = 2;
inline void GetPlayerAdminJailResponse::clear_reason() {
  reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetPlayerAdminJailResponse::reason() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.GetPlayerAdminJailResponse.reason)
  return _internal_reason();
}
inline void GetPlayerAdminJailResponse::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.GetPlayerAdminJailResponse.reason)
}
inline std::string* GetPlayerAdminJailResponse::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:mruv.punishments.GetPlayerAdminJailResponse.reason)
  return _internal_mutable_reason();
}
inline const std::string& GetPlayerAdminJailResponse::_internal_reason() const {
  return reason_.Get();
}
inline void GetPlayerAdminJailResponse::_internal_set_reason(const std::string& value) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetPlayerAdminJailResponse::set_reason(std::string&& value) {
  
  reason_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.punishments.GetPlayerAdminJailResponse.reason)
}
inline void GetPlayerAdminJailResponse::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.punishments.GetPlayerAdminJailResponse.reason)
}
inline void GetPlayerAdminJailResponse::set_reason(const char* value,
    size_t size) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.punishments.GetPlayerAdminJailResponse.reason)
}
inline std::string* GetPlayerAdminJailResponse::_internal_mutable_reason() {
  
  return reason_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetPlayerAdminJailResponse::release_reason() {
  // @@protoc_insertion_point(field_release:mruv.punishments.GetPlayerAdminJailResponse.reason)
  return reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetPlayerAdminJailResponse::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.punishments.GetPlayerAdminJailResponse.reason)
}

// uint32 admin = 3;
inline void GetPlayerAdminJailResponse::clear_admin() {
  admin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetPlayerAdminJailResponse::_internal_admin() const {
  return admin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetPlayerAdminJailResponse::admin() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.GetPlayerAdminJailResponse.admin)
  return _internal_admin();
}
inline void GetPlayerAdminJailResponse::_internal_set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  admin_ = value;
}
inline void GetPlayerAdminJailResponse::set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_admin(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.GetPlayerAdminJailResponse.admin)
}

// int64 date = 4;
inline void GetPlayerAdminJailResponse::clear_date() {
  date_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetPlayerAdminJailResponse::_internal_date() const {
  return date_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetPlayerAdminJailResponse::date() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.GetPlayerAdminJailResponse.date)
  return _internal_date();
}
inline void GetPlayerAdminJailResponse::_internal_set_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  date_ = value;
}
inline void GetPlayerAdminJailResponse::set_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.GetPlayerAdminJailResponse.date)
}

// -------------------------------------------------------------------

// GetBanRequest

// uint32 id = 1;
inline void GetBanRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetBanRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetBanRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.GetBanRequest.id)
  return _internal_id();
}
inline void GetBanRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void GetBanRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.GetBanRequest.id)
}

// -------------------------------------------------------------------

// GetWarnRequest

// uint32 id = 1;
inline void GetWarnRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetWarnRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetWarnRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.GetWarnRequest.id)
  return _internal_id();
}
inline void GetWarnRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void GetWarnRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.GetWarnRequest.id)
}

// -------------------------------------------------------------------

// GetBlockRequest

// uint32 id = 1;
inline void GetBlockRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetBlockRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetBlockRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.GetBlockRequest.id)
  return _internal_id();
}
inline void GetBlockRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void GetBlockRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.GetBlockRequest.id)
}

// -------------------------------------------------------------------

// IsPlayerBannedRequest

// uint32 player = 1;
inline void IsPlayerBannedRequest::clear_player() {
  player_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IsPlayerBannedRequest::_internal_player() const {
  return player_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IsPlayerBannedRequest::player() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.IsPlayerBannedRequest.player)
  return _internal_player();
}
inline void IsPlayerBannedRequest::_internal_set_player(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  player_ = value;
}
inline void IsPlayerBannedRequest::set_player(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_player(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.IsPlayerBannedRequest.player)
}

// string ip = 2;
inline void IsPlayerBannedRequest::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IsPlayerBannedRequest::ip() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.IsPlayerBannedRequest.ip)
  return _internal_ip();
}
inline void IsPlayerBannedRequest::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.IsPlayerBannedRequest.ip)
}
inline std::string* IsPlayerBannedRequest::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:mruv.punishments.IsPlayerBannedRequest.ip)
  return _internal_mutable_ip();
}
inline const std::string& IsPlayerBannedRequest::_internal_ip() const {
  return ip_.Get();
}
inline void IsPlayerBannedRequest::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IsPlayerBannedRequest::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mruv.punishments.IsPlayerBannedRequest.ip)
}
inline void IsPlayerBannedRequest::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mruv.punishments.IsPlayerBannedRequest.ip)
}
inline void IsPlayerBannedRequest::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mruv.punishments.IsPlayerBannedRequest.ip)
}
inline std::string* IsPlayerBannedRequest::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IsPlayerBannedRequest::release_ip() {
  // @@protoc_insertion_point(field_release:mruv.punishments.IsPlayerBannedRequest.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IsPlayerBannedRequest::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mruv.punishments.IsPlayerBannedRequest.ip)
}

// -------------------------------------------------------------------

// IsPlayerBannedResponse

// bool banned = 1;
inline void IsPlayerBannedResponse::clear_banned() {
  banned_ = false;
}
inline bool IsPlayerBannedResponse::_internal_banned() const {
  return banned_;
}
inline bool IsPlayerBannedResponse::banned() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.IsPlayerBannedResponse.banned)
  return _internal_banned();
}
inline void IsPlayerBannedResponse::_internal_set_banned(bool value) {
  
  banned_ = value;
}
inline void IsPlayerBannedResponse::set_banned(bool value) {
  _internal_set_banned(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.IsPlayerBannedResponse.banned)
}

// uint32 ban_id = 2;
inline void IsPlayerBannedResponse::clear_ban_id() {
  ban_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IsPlayerBannedResponse::_internal_ban_id() const {
  return ban_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IsPlayerBannedResponse::ban_id() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.IsPlayerBannedResponse.ban_id)
  return _internal_ban_id();
}
inline void IsPlayerBannedResponse::_internal_set_ban_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ban_id_ = value;
}
inline void IsPlayerBannedResponse::set_ban_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ban_id(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.IsPlayerBannedResponse.ban_id)
}

// -------------------------------------------------------------------

// IsCharacterBlockedRequest

// uint32 character = 1;
inline void IsCharacterBlockedRequest::clear_character() {
  character_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IsCharacterBlockedRequest::_internal_character() const {
  return character_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IsCharacterBlockedRequest::character() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.IsCharacterBlockedRequest.character)
  return _internal_character();
}
inline void IsCharacterBlockedRequest::_internal_set_character(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  character_ = value;
}
inline void IsCharacterBlockedRequest::set_character(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_character(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.IsCharacterBlockedRequest.character)
}

// -------------------------------------------------------------------

// IsCharacterBlockedResponse

// bool blocked = 1;
inline void IsCharacterBlockedResponse::clear_blocked() {
  blocked_ = false;
}
inline bool IsCharacterBlockedResponse::_internal_blocked() const {
  return blocked_;
}
inline bool IsCharacterBlockedResponse::blocked() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.IsCharacterBlockedResponse.blocked)
  return _internal_blocked();
}
inline void IsCharacterBlockedResponse::_internal_set_blocked(bool value) {
  
  blocked_ = value;
}
inline void IsCharacterBlockedResponse::set_blocked(bool value) {
  _internal_set_blocked(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.IsCharacterBlockedResponse.blocked)
}

// uint32 block_id = 2;
inline void IsCharacterBlockedResponse::clear_block_id() {
  block_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IsCharacterBlockedResponse::_internal_block_id() const {
  return block_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IsCharacterBlockedResponse::block_id() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.IsCharacterBlockedResponse.block_id)
  return _internal_block_id();
}
inline void IsCharacterBlockedResponse::_internal_set_block_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  block_id_ = value;
}
inline void IsCharacterBlockedResponse::set_block_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_block_id(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.IsCharacterBlockedResponse.block_id)
}

// -------------------------------------------------------------------

// IsCharacterJailedRequest

// uint32 character = 1;
inline void IsCharacterJailedRequest::clear_character() {
  character_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IsCharacterJailedRequest::_internal_character() const {
  return character_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IsCharacterJailedRequest::character() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.IsCharacterJailedRequest.character)
  return _internal_character();
}
inline void IsCharacterJailedRequest::_internal_set_character(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  character_ = value;
}
inline void IsCharacterJailedRequest::set_character(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_character(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.IsCharacterJailedRequest.character)
}

// -------------------------------------------------------------------

// IsCharacterJailedResponse

// bool jailed = 1;
inline void IsCharacterJailedResponse::clear_jailed() {
  jailed_ = false;
}
inline bool IsCharacterJailedResponse::_internal_jailed() const {
  return jailed_;
}
inline bool IsCharacterJailedResponse::jailed() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.IsCharacterJailedResponse.jailed)
  return _internal_jailed();
}
inline void IsCharacterJailedResponse::_internal_set_jailed(bool value) {
  
  jailed_ = value;
}
inline void IsCharacterJailedResponse::set_jailed(bool value) {
  _internal_set_jailed(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.IsCharacterJailedResponse.jailed)
}

// uint32 jail_time = 2;
inline void IsCharacterJailedResponse::clear_jail_time() {
  jail_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IsCharacterJailedResponse::_internal_jail_time() const {
  return jail_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IsCharacterJailedResponse::jail_time() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.IsCharacterJailedResponse.jail_time)
  return _internal_jail_time();
}
inline void IsCharacterJailedResponse::_internal_set_jail_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  jail_time_ = value;
}
inline void IsCharacterJailedResponse::set_jail_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_jail_time(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.IsCharacterJailedResponse.jail_time)
}

// -------------------------------------------------------------------

// WatchBansRequest

// -------------------------------------------------------------------

// WatchBlocksRequest

// -------------------------------------------------------------------

// WatchWarnsRequest

// -------------------------------------------------------------------

// WatchAdminJailsRequest

// -------------------------------------------------------------------

// WatchUnBansRequest

// -------------------------------------------------------------------

// WatchUnBlocksRequest

// -------------------------------------------------------------------

// WatchUnWarnsRequest

// -------------------------------------------------------------------

// WatchUnAdminJailsRequest

// -------------------------------------------------------------------

// WatchPlayerAcquittalsRequest

// -------------------------------------------------------------------

// WatchPlayerAcquittalsResponse

// -------------------------------------------------------------------

// WatchPlayerPunishmentsRequest

// -------------------------------------------------------------------

// WatchPlayerPunishmentsResponse

// .mruv.punishments.PunishmentType type = 1;
inline void WatchPlayerPunishmentsResponse::clear_type() {
  type_ = 0;
}
inline ::mruv::punishments::PunishmentType WatchPlayerPunishmentsResponse::_internal_type() const {
  return static_cast< ::mruv::punishments::PunishmentType >(type_);
}
inline ::mruv::punishments::PunishmentType WatchPlayerPunishmentsResponse::type() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.WatchPlayerPunishmentsResponse.type)
  return _internal_type();
}
inline void WatchPlayerPunishmentsResponse::_internal_set_type(::mruv::punishments::PunishmentType value) {
  
  type_ = value;
}
inline void WatchPlayerPunishmentsResponse::set_type(::mruv::punishments::PunishmentType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.WatchPlayerPunishmentsResponse.type)
}

// uint32 punishment_id = 2;
inline void WatchPlayerPunishmentsResponse::clear_punishment_id() {
  punishment_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WatchPlayerPunishmentsResponse::_internal_punishment_id() const {
  return punishment_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WatchPlayerPunishmentsResponse::punishment_id() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.WatchPlayerPunishmentsResponse.punishment_id)
  return _internal_punishment_id();
}
inline void WatchPlayerPunishmentsResponse::_internal_set_punishment_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  punishment_id_ = value;
}
inline void WatchPlayerPunishmentsResponse::set_punishment_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_punishment_id(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.WatchPlayerPunishmentsResponse.punishment_id)
}

// -------------------------------------------------------------------

// WatchPunishmentsRequest

// -------------------------------------------------------------------

// WatchPunishmentsResponse

// .mruv.punishments.PunishmentType type = 1;
inline void WatchPunishmentsResponse::clear_type() {
  type_ = 0;
}
inline ::mruv::punishments::PunishmentType WatchPunishmentsResponse::_internal_type() const {
  return static_cast< ::mruv::punishments::PunishmentType >(type_);
}
inline ::mruv::punishments::PunishmentType WatchPunishmentsResponse::type() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.WatchPunishmentsResponse.type)
  return _internal_type();
}
inline void WatchPunishmentsResponse::_internal_set_type(::mruv::punishments::PunishmentType value) {
  
  type_ = value;
}
inline void WatchPunishmentsResponse::set_type(::mruv::punishments::PunishmentType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.WatchPunishmentsResponse.type)
}

// uint32 punishment_id = 2;
inline void WatchPunishmentsResponse::clear_punishment_id() {
  punishment_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WatchPunishmentsResponse::_internal_punishment_id() const {
  return punishment_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WatchPunishmentsResponse::punishment_id() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.WatchPunishmentsResponse.punishment_id)
  return _internal_punishment_id();
}
inline void WatchPunishmentsResponse::_internal_set_punishment_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  punishment_id_ = value;
}
inline void WatchPunishmentsResponse::set_punishment_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_punishment_id(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.WatchPunishmentsResponse.punishment_id)
}

// uint32 player = 3;
inline void WatchPunishmentsResponse::clear_player() {
  player_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WatchPunishmentsResponse::_internal_player() const {
  return player_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WatchPunishmentsResponse::player() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.WatchPunishmentsResponse.player)
  return _internal_player();
}
inline void WatchPunishmentsResponse::_internal_set_player(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  player_ = value;
}
inline void WatchPunishmentsResponse::set_player(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_player(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.WatchPunishmentsResponse.player)
}

// uint32 character = 4;
inline void WatchPunishmentsResponse::clear_character() {
  character_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WatchPunishmentsResponse::_internal_character() const {
  return character_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WatchPunishmentsResponse::character() const {
  // @@protoc_insertion_point(field_get:mruv.punishments.WatchPunishmentsResponse.character)
  return _internal_character();
}
inline void WatchPunishmentsResponse::_internal_set_character(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  character_ = value;
}
inline void WatchPunishmentsResponse::set_character(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_character(value);
  // @@protoc_insertion_point(field_set:mruv.punishments.WatchPunishmentsResponse.character)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace punishments
}  // namespace mruv

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mruv::punishments::PunishmentType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mruv::punishments::PunishmentType>() {
  return ::mruv::punishments::PunishmentType_descriptor();
}
template <> struct is_proto_enum< ::mruv::punishments::AcquittalsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mruv::punishments::AcquittalsType>() {
  return ::mruv::punishments::AcquittalsType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_punishments_2fpunishments_2eproto
