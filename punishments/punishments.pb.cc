// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: punishments/punishments.proto

#include "punishments/punishments.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_punishments_2fpunishments_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BanMessage_punishments_2fpunishments_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_punishments_2fpunishments_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WarnMessage_punishments_2fpunishments_2eproto;
namespace mruv {
namespace economy {
class BanMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BanMessage> _instance;
} _BanMessage_default_instance_;
class WarnMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WarnMessage> _instance;
} _WarnMessage_default_instance_;
class BlockMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlockMessage> _instance;
} _BlockMessage_default_instance_;
class AdminJailMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdminJailMessage> _instance;
} _AdminJailMessage_default_instance_;
class UnBanMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnBanMessage> _instance;
} _UnBanMessage_default_instance_;
class UnBlockMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnBlockMessage> _instance;
} _UnBlockMessage_default_instance_;
class UnWarnMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnWarnMessage> _instance;
} _UnWarnMessage_default_instance_;
class UnAdminJailMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnAdminJailMessage> _instance;
} _UnAdminJailMessage_default_instance_;
class BanRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BanRequest> _instance;
} _BanRequest_default_instance_;
class BanResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BanResponse> _instance;
} _BanResponse_default_instance_;
class BlockRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlockRequest> _instance;
} _BlockRequest_default_instance_;
class BlockResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlockResponse> _instance;
} _BlockResponse_default_instance_;
class WarnRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WarnRequest> _instance;
} _WarnRequest_default_instance_;
class WarnResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WarnResponse> _instance;
} _WarnResponse_default_instance_;
class AdminJailRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdminJailRequest> _instance;
} _AdminJailRequest_default_instance_;
class AdminJailResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdminJailResponse> _instance;
} _AdminJailResponse_default_instance_;
class MuteGlobalChatsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MuteGlobalChatsRequest> _instance;
} _MuteGlobalChatsRequest_default_instance_;
class MuteGlobalChatsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MuteGlobalChatsResponse> _instance;
} _MuteGlobalChatsResponse_default_instance_;
class UnBanRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnBanRequest> _instance;
} _UnBanRequest_default_instance_;
class UnBanResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnBanResponse> _instance;
} _UnBanResponse_default_instance_;
class UnWarnRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnWarnRequest> _instance;
} _UnWarnRequest_default_instance_;
class UnWarnResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnWarnResponse> _instance;
} _UnWarnResponse_default_instance_;
class UnAdminJailRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnAdminJailRequest> _instance;
} _UnAdminJailRequest_default_instance_;
class UnAdminJailResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnAdminJailResponse> _instance;
} _UnAdminJailResponse_default_instance_;
class UnMuteGlobalChatsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnMuteGlobalChatsRequest> _instance;
} _UnMuteGlobalChatsRequest_default_instance_;
class UnMuteGlobalChatsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnMuteGlobalChatsResponse> _instance;
} _UnMuteGlobalChatsResponse_default_instance_;
class GetPlayerBansRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPlayerBansRequest> _instance;
} _GetPlayerBansRequest_default_instance_;
class GetPlayerBansResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPlayerBansResponse> _instance;
} _GetPlayerBansResponse_default_instance_;
class GetPlayerWarnsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPlayerWarnsRequest> _instance;
} _GetPlayerWarnsRequest_default_instance_;
class GetPlayerWarnsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPlayerWarnsResponse> _instance;
} _GetPlayerWarnsResponse_default_instance_;
class GetPlayerAdminJailRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPlayerAdminJailRequest> _instance;
} _GetPlayerAdminJailRequest_default_instance_;
class GetPlayerAdminJailResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPlayerAdminJailResponse> _instance;
} _GetPlayerAdminJailResponse_default_instance_;
class GetBanRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBanRequest> _instance;
} _GetBanRequest_default_instance_;
class GetWarnRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetWarnRequest> _instance;
} _GetWarnRequest_default_instance_;
class GetBlockRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBlockRequest> _instance;
} _GetBlockRequest_default_instance_;
class IsPlayerBannedRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IsPlayerBannedRequest> _instance;
} _IsPlayerBannedRequest_default_instance_;
class IsPlayerBannedResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IsPlayerBannedResponse> _instance;
} _IsPlayerBannedResponse_default_instance_;
class IsCharacterBlockedRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IsCharacterBlockedRequest> _instance;
} _IsCharacterBlockedRequest_default_instance_;
class IsCharacterBlockedResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IsCharacterBlockedResponse> _instance;
} _IsCharacterBlockedResponse_default_instance_;
class IsCharacterJailedRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IsCharacterJailedRequest> _instance;
} _IsCharacterJailedRequest_default_instance_;
class IsCharacterJailedResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IsCharacterJailedResponse> _instance;
} _IsCharacterJailedResponse_default_instance_;
class WatchBansRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WatchBansRequest> _instance;
} _WatchBansRequest_default_instance_;
class WatchBlocksRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WatchBlocksRequest> _instance;
} _WatchBlocksRequest_default_instance_;
class WatchWarnsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WatchWarnsRequest> _instance;
} _WatchWarnsRequest_default_instance_;
class WatchAdminJailsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WatchAdminJailsRequest> _instance;
} _WatchAdminJailsRequest_default_instance_;
class WatchUnBansRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WatchUnBansRequest> _instance;
} _WatchUnBansRequest_default_instance_;
class WatchUnBlocksRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WatchUnBlocksRequest> _instance;
} _WatchUnBlocksRequest_default_instance_;
class WatchUnWarnsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WatchUnWarnsRequest> _instance;
} _WatchUnWarnsRequest_default_instance_;
class WatchUnAdminJailsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WatchUnAdminJailsRequest> _instance;
} _WatchUnAdminJailsRequest_default_instance_;
class WatchPlayerAcquittalsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WatchPlayerAcquittalsRequest> _instance;
} _WatchPlayerAcquittalsRequest_default_instance_;
class WatchPlayerAcquittalsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WatchPlayerAcquittalsResponse> _instance;
} _WatchPlayerAcquittalsResponse_default_instance_;
class WatchPlayerPunishmentsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WatchPlayerPunishmentsRequest> _instance;
} _WatchPlayerPunishmentsRequest_default_instance_;
class WatchPlayerPunishmentsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WatchPlayerPunishmentsResponse> _instance;
} _WatchPlayerPunishmentsResponse_default_instance_;
class WatchPunishmentsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WatchPunishmentsRequest> _instance;
} _WatchPunishmentsRequest_default_instance_;
class WatchPunishmentsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WatchPunishmentsResponse> _instance;
} _WatchPunishmentsResponse_default_instance_;
}  // namespace economy
}  // namespace mruv
static void InitDefaultsscc_info_AdminJailMessage_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_AdminJailMessage_default_instance_;
    new (ptr) ::mruv::economy::AdminJailMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::AdminJailMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdminJailMessage_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AdminJailMessage_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_AdminJailRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_AdminJailRequest_default_instance_;
    new (ptr) ::mruv::economy::AdminJailRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::AdminJailRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdminJailRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AdminJailRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_AdminJailResponse_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_AdminJailResponse_default_instance_;
    new (ptr) ::mruv::economy::AdminJailResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::AdminJailResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdminJailResponse_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AdminJailResponse_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_BanMessage_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_BanMessage_default_instance_;
    new (ptr) ::mruv::economy::BanMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::BanMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BanMessage_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BanMessage_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_BanRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_BanRequest_default_instance_;
    new (ptr) ::mruv::economy::BanRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::BanRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BanRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BanRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_BanResponse_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_BanResponse_default_instance_;
    new (ptr) ::mruv::economy::BanResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::BanResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BanResponse_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BanResponse_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_BlockMessage_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_BlockMessage_default_instance_;
    new (ptr) ::mruv::economy::BlockMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::BlockMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockMessage_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BlockMessage_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_BlockRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_BlockRequest_default_instance_;
    new (ptr) ::mruv::economy::BlockRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::BlockRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BlockRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_BlockResponse_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_BlockResponse_default_instance_;
    new (ptr) ::mruv::economy::BlockResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::BlockResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockResponse_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BlockResponse_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_GetBanRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_GetBanRequest_default_instance_;
    new (ptr) ::mruv::economy::GetBanRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::GetBanRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetBanRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetBanRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_GetBlockRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_GetBlockRequest_default_instance_;
    new (ptr) ::mruv::economy::GetBlockRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::GetBlockRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetBlockRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetBlockRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_GetPlayerAdminJailRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_GetPlayerAdminJailRequest_default_instance_;
    new (ptr) ::mruv::economy::GetPlayerAdminJailRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::GetPlayerAdminJailRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetPlayerAdminJailRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetPlayerAdminJailRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_GetPlayerAdminJailResponse_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_GetPlayerAdminJailResponse_default_instance_;
    new (ptr) ::mruv::economy::GetPlayerAdminJailResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::GetPlayerAdminJailResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetPlayerAdminJailResponse_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetPlayerAdminJailResponse_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_GetPlayerBansRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_GetPlayerBansRequest_default_instance_;
    new (ptr) ::mruv::economy::GetPlayerBansRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::GetPlayerBansRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetPlayerBansRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetPlayerBansRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_GetPlayerBansResponse_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_GetPlayerBansResponse_default_instance_;
    new (ptr) ::mruv::economy::GetPlayerBansResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::GetPlayerBansResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetPlayerBansResponse_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetPlayerBansResponse_punishments_2fpunishments_2eproto}, {
      &scc_info_BanMessage_punishments_2fpunishments_2eproto.base,}};

static void InitDefaultsscc_info_GetPlayerWarnsRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_GetPlayerWarnsRequest_default_instance_;
    new (ptr) ::mruv::economy::GetPlayerWarnsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::GetPlayerWarnsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetPlayerWarnsRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetPlayerWarnsRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_GetPlayerWarnsResponse_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_GetPlayerWarnsResponse_default_instance_;
    new (ptr) ::mruv::economy::GetPlayerWarnsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::GetPlayerWarnsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetPlayerWarnsResponse_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetPlayerWarnsResponse_punishments_2fpunishments_2eproto}, {
      &scc_info_WarnMessage_punishments_2fpunishments_2eproto.base,}};

static void InitDefaultsscc_info_GetWarnRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_GetWarnRequest_default_instance_;
    new (ptr) ::mruv::economy::GetWarnRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::GetWarnRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetWarnRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetWarnRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_IsCharacterBlockedRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_IsCharacterBlockedRequest_default_instance_;
    new (ptr) ::mruv::economy::IsCharacterBlockedRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::IsCharacterBlockedRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IsCharacterBlockedRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IsCharacterBlockedRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_IsCharacterBlockedResponse_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_IsCharacterBlockedResponse_default_instance_;
    new (ptr) ::mruv::economy::IsCharacterBlockedResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::IsCharacterBlockedResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IsCharacterBlockedResponse_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IsCharacterBlockedResponse_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_IsCharacterJailedRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_IsCharacterJailedRequest_default_instance_;
    new (ptr) ::mruv::economy::IsCharacterJailedRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::IsCharacterJailedRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IsCharacterJailedRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IsCharacterJailedRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_IsCharacterJailedResponse_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_IsCharacterJailedResponse_default_instance_;
    new (ptr) ::mruv::economy::IsCharacterJailedResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::IsCharacterJailedResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IsCharacterJailedResponse_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IsCharacterJailedResponse_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_IsPlayerBannedRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_IsPlayerBannedRequest_default_instance_;
    new (ptr) ::mruv::economy::IsPlayerBannedRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::IsPlayerBannedRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IsPlayerBannedRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IsPlayerBannedRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_IsPlayerBannedResponse_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_IsPlayerBannedResponse_default_instance_;
    new (ptr) ::mruv::economy::IsPlayerBannedResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::IsPlayerBannedResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IsPlayerBannedResponse_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IsPlayerBannedResponse_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_MuteGlobalChatsRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_MuteGlobalChatsRequest_default_instance_;
    new (ptr) ::mruv::economy::MuteGlobalChatsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::MuteGlobalChatsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MuteGlobalChatsRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MuteGlobalChatsRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_MuteGlobalChatsResponse_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_MuteGlobalChatsResponse_default_instance_;
    new (ptr) ::mruv::economy::MuteGlobalChatsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::MuteGlobalChatsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MuteGlobalChatsResponse_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MuteGlobalChatsResponse_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_UnAdminJailMessage_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_UnAdminJailMessage_default_instance_;
    new (ptr) ::mruv::economy::UnAdminJailMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::UnAdminJailMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnAdminJailMessage_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnAdminJailMessage_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_UnAdminJailRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_UnAdminJailRequest_default_instance_;
    new (ptr) ::mruv::economy::UnAdminJailRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::UnAdminJailRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnAdminJailRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnAdminJailRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_UnAdminJailResponse_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_UnAdminJailResponse_default_instance_;
    new (ptr) ::mruv::economy::UnAdminJailResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::UnAdminJailResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnAdminJailResponse_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnAdminJailResponse_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_UnBanMessage_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_UnBanMessage_default_instance_;
    new (ptr) ::mruv::economy::UnBanMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::UnBanMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnBanMessage_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnBanMessage_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_UnBanRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_UnBanRequest_default_instance_;
    new (ptr) ::mruv::economy::UnBanRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::UnBanRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnBanRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnBanRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_UnBanResponse_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_UnBanResponse_default_instance_;
    new (ptr) ::mruv::economy::UnBanResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::UnBanResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnBanResponse_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnBanResponse_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_UnBlockMessage_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_UnBlockMessage_default_instance_;
    new (ptr) ::mruv::economy::UnBlockMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::UnBlockMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnBlockMessage_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnBlockMessage_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_UnMuteGlobalChatsRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_UnMuteGlobalChatsRequest_default_instance_;
    new (ptr) ::mruv::economy::UnMuteGlobalChatsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::UnMuteGlobalChatsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnMuteGlobalChatsRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnMuteGlobalChatsRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_UnMuteGlobalChatsResponse_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_UnMuteGlobalChatsResponse_default_instance_;
    new (ptr) ::mruv::economy::UnMuteGlobalChatsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::UnMuteGlobalChatsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnMuteGlobalChatsResponse_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnMuteGlobalChatsResponse_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_UnWarnMessage_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_UnWarnMessage_default_instance_;
    new (ptr) ::mruv::economy::UnWarnMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::UnWarnMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnWarnMessage_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnWarnMessage_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_UnWarnRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_UnWarnRequest_default_instance_;
    new (ptr) ::mruv::economy::UnWarnRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::UnWarnRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnWarnRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnWarnRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_UnWarnResponse_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_UnWarnResponse_default_instance_;
    new (ptr) ::mruv::economy::UnWarnResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::UnWarnResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnWarnResponse_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnWarnResponse_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_WarnMessage_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_WarnMessage_default_instance_;
    new (ptr) ::mruv::economy::WarnMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::WarnMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WarnMessage_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WarnMessage_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_WarnRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_WarnRequest_default_instance_;
    new (ptr) ::mruv::economy::WarnRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::WarnRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WarnRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WarnRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_WarnResponse_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_WarnResponse_default_instance_;
    new (ptr) ::mruv::economy::WarnResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::WarnResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WarnResponse_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WarnResponse_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_WatchAdminJailsRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_WatchAdminJailsRequest_default_instance_;
    new (ptr) ::mruv::economy::WatchAdminJailsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::WatchAdminJailsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatchAdminJailsRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WatchAdminJailsRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_WatchBansRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_WatchBansRequest_default_instance_;
    new (ptr) ::mruv::economy::WatchBansRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::WatchBansRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatchBansRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WatchBansRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_WatchBlocksRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_WatchBlocksRequest_default_instance_;
    new (ptr) ::mruv::economy::WatchBlocksRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::WatchBlocksRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatchBlocksRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WatchBlocksRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_WatchPlayerAcquittalsRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_WatchPlayerAcquittalsRequest_default_instance_;
    new (ptr) ::mruv::economy::WatchPlayerAcquittalsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::WatchPlayerAcquittalsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatchPlayerAcquittalsRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WatchPlayerAcquittalsRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_WatchPlayerAcquittalsResponse_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_WatchPlayerAcquittalsResponse_default_instance_;
    new (ptr) ::mruv::economy::WatchPlayerAcquittalsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::WatchPlayerAcquittalsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatchPlayerAcquittalsResponse_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WatchPlayerAcquittalsResponse_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_WatchPlayerPunishmentsRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_WatchPlayerPunishmentsRequest_default_instance_;
    new (ptr) ::mruv::economy::WatchPlayerPunishmentsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::WatchPlayerPunishmentsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatchPlayerPunishmentsRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WatchPlayerPunishmentsRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_WatchPlayerPunishmentsResponse_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_WatchPlayerPunishmentsResponse_default_instance_;
    new (ptr) ::mruv::economy::WatchPlayerPunishmentsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::WatchPlayerPunishmentsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatchPlayerPunishmentsResponse_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WatchPlayerPunishmentsResponse_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_WatchPunishmentsRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_WatchPunishmentsRequest_default_instance_;
    new (ptr) ::mruv::economy::WatchPunishmentsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::WatchPunishmentsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatchPunishmentsRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WatchPunishmentsRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_WatchPunishmentsResponse_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_WatchPunishmentsResponse_default_instance_;
    new (ptr) ::mruv::economy::WatchPunishmentsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::WatchPunishmentsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatchPunishmentsResponse_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WatchPunishmentsResponse_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_WatchUnAdminJailsRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_WatchUnAdminJailsRequest_default_instance_;
    new (ptr) ::mruv::economy::WatchUnAdminJailsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::WatchUnAdminJailsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatchUnAdminJailsRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WatchUnAdminJailsRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_WatchUnBansRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_WatchUnBansRequest_default_instance_;
    new (ptr) ::mruv::economy::WatchUnBansRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::WatchUnBansRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatchUnBansRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WatchUnBansRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_WatchUnBlocksRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_WatchUnBlocksRequest_default_instance_;
    new (ptr) ::mruv::economy::WatchUnBlocksRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::WatchUnBlocksRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatchUnBlocksRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WatchUnBlocksRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_WatchUnWarnsRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_WatchUnWarnsRequest_default_instance_;
    new (ptr) ::mruv::economy::WatchUnWarnsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::WatchUnWarnsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatchUnWarnsRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WatchUnWarnsRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_WatchWarnsRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::economy::_WatchWarnsRequest_default_instance_;
    new (ptr) ::mruv::economy::WatchWarnsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::economy::WatchWarnsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatchWarnsRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WatchWarnsRequest_punishments_2fpunishments_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_punishments_2fpunishments_2eproto[55];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_punishments_2fpunishments_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_punishments_2fpunishments_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_punishments_2fpunishments_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::BanMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::BanMessage, player_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::BanMessage, character_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::BanMessage, ip_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::BanMessage, expiration_date_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::BanMessage, reason_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::BanMessage, admin_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::BanMessage, ban_date_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::BanMessage, active_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::BanMessage, unban_date_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::BanMessage, unban_admin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::WarnMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::WarnMessage, player_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::WarnMessage, character_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::WarnMessage, expiration_date_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::WarnMessage, reason_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::WarnMessage, admin_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::WarnMessage, warn_date_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::WarnMessage, active_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::WarnMessage, unwarn_date_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::WarnMessage, unwarn_admin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::BlockMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::BlockMessage, player_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::BlockMessage, character_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::BlockMessage, reason_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::BlockMessage, admin_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::BlockMessage, block_date_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::BlockMessage, active_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::BlockMessage, unblock_date_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::BlockMessage, unblock_admin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::AdminJailMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::AdminJailMessage, player_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::AdminJailMessage, character_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::AdminJailMessage, reason_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::AdminJailMessage, admin_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::AdminJailMessage, aj_date_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::AdminJailMessage, jail_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::UnBanMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::UnBanMessage, player_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::UnBanMessage, ban_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::UnBlockMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::UnBlockMessage, player_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::UnBlockMessage, block_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::UnWarnMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::UnWarnMessage, player_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::UnWarnMessage, warn_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::UnAdminJailMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::UnAdminJailMessage, player_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::UnAdminJailMessage, character_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::BanRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::BanRequest, player_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::BanRequest, character_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::BanRequest, ip_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::BanRequest, time_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::BanRequest, reason_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::BanRequest, admin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::BanResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::BanResponse, ban_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::BlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::BlockRequest, character_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::BlockRequest, reason_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::BlockRequest, admin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::BlockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::BlockResponse, block_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::WarnRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::WarnRequest, player_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::WarnRequest, character_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::WarnRequest, time_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::WarnRequest, reason_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::WarnRequest, admin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::WarnResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::WarnResponse, warn_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::AdminJailRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::AdminJailRequest, character_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::AdminJailRequest, time_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::AdminJailRequest, reason_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::AdminJailRequest, admin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::AdminJailResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::MuteGlobalChatsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::MuteGlobalChatsRequest, account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::MuteGlobalChatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::UnBanRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::UnBanRequest, ban_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::UnBanResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::UnWarnRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::UnWarnRequest, warn_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::UnWarnResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::UnAdminJailRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::UnAdminJailRequest, character_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::UnAdminJailResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::UnMuteGlobalChatsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::UnMuteGlobalChatsRequest, account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::UnMuteGlobalChatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::GetPlayerBansRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::GetPlayerBansRequest, player_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::GetPlayerBansRequest, ip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::GetPlayerBansResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::GetPlayerBansResponse, bans_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::GetPlayerWarnsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::GetPlayerWarnsRequest, player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::GetPlayerWarnsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::GetPlayerWarnsResponse, warns_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::GetPlayerAdminJailRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::GetPlayerAdminJailRequest, character_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::GetPlayerAdminJailResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::GetPlayerAdminJailResponse, jail_time_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::GetPlayerAdminJailResponse, reason_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::GetPlayerAdminJailResponse, admin_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::GetPlayerAdminJailResponse, date_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::GetBanRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::GetBanRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::GetWarnRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::GetWarnRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::GetBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::GetBlockRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::IsPlayerBannedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::IsPlayerBannedRequest, player_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::IsPlayerBannedRequest, ip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::IsPlayerBannedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::IsPlayerBannedResponse, banned_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::IsPlayerBannedResponse, ban_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::IsCharacterBlockedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::IsCharacterBlockedRequest, character_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::IsCharacterBlockedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::IsCharacterBlockedResponse, blocked_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::IsCharacterBlockedResponse, block_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::IsCharacterJailedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::IsCharacterJailedRequest, character_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::IsCharacterJailedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::IsCharacterJailedResponse, jailed_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::IsCharacterJailedResponse, jail_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::WatchBansRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::WatchBlocksRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::WatchWarnsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::WatchAdminJailsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::WatchUnBansRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::WatchUnBlocksRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::WatchUnWarnsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::WatchUnAdminJailsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::WatchPlayerAcquittalsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::WatchPlayerAcquittalsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::WatchPlayerPunishmentsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::WatchPlayerPunishmentsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::WatchPlayerPunishmentsResponse, type_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::WatchPlayerPunishmentsResponse, punishment_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::WatchPunishmentsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::WatchPunishmentsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::economy::WatchPunishmentsResponse, type_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::WatchPunishmentsResponse, punishment_id_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::WatchPunishmentsResponse, player_),
  PROTOBUF_FIELD_OFFSET(::mruv::economy::WatchPunishmentsResponse, character_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mruv::economy::BanMessage)},
  { 15, -1, sizeof(::mruv::economy::WarnMessage)},
  { 29, -1, sizeof(::mruv::economy::BlockMessage)},
  { 42, -1, sizeof(::mruv::economy::AdminJailMessage)},
  { 53, -1, sizeof(::mruv::economy::UnBanMessage)},
  { 60, -1, sizeof(::mruv::economy::UnBlockMessage)},
  { 67, -1, sizeof(::mruv::economy::UnWarnMessage)},
  { 74, -1, sizeof(::mruv::economy::UnAdminJailMessage)},
  { 81, -1, sizeof(::mruv::economy::BanRequest)},
  { 92, -1, sizeof(::mruv::economy::BanResponse)},
  { 98, -1, sizeof(::mruv::economy::BlockRequest)},
  { 106, -1, sizeof(::mruv::economy::BlockResponse)},
  { 112, -1, sizeof(::mruv::economy::WarnRequest)},
  { 122, -1, sizeof(::mruv::economy::WarnResponse)},
  { 128, -1, sizeof(::mruv::economy::AdminJailRequest)},
  { 137, -1, sizeof(::mruv::economy::AdminJailResponse)},
  { 142, -1, sizeof(::mruv::economy::MuteGlobalChatsRequest)},
  { 148, -1, sizeof(::mruv::economy::MuteGlobalChatsResponse)},
  { 153, -1, sizeof(::mruv::economy::UnBanRequest)},
  { 159, -1, sizeof(::mruv::economy::UnBanResponse)},
  { 164, -1, sizeof(::mruv::economy::UnWarnRequest)},
  { 170, -1, sizeof(::mruv::economy::UnWarnResponse)},
  { 175, -1, sizeof(::mruv::economy::UnAdminJailRequest)},
  { 181, -1, sizeof(::mruv::economy::UnAdminJailResponse)},
  { 186, -1, sizeof(::mruv::economy::UnMuteGlobalChatsRequest)},
  { 192, -1, sizeof(::mruv::economy::UnMuteGlobalChatsResponse)},
  { 197, -1, sizeof(::mruv::economy::GetPlayerBansRequest)},
  { 204, -1, sizeof(::mruv::economy::GetPlayerBansResponse)},
  { 210, -1, sizeof(::mruv::economy::GetPlayerWarnsRequest)},
  { 216, -1, sizeof(::mruv::economy::GetPlayerWarnsResponse)},
  { 222, -1, sizeof(::mruv::economy::GetPlayerAdminJailRequest)},
  { 228, -1, sizeof(::mruv::economy::GetPlayerAdminJailResponse)},
  { 237, -1, sizeof(::mruv::economy::GetBanRequest)},
  { 243, -1, sizeof(::mruv::economy::GetWarnRequest)},
  { 249, -1, sizeof(::mruv::economy::GetBlockRequest)},
  { 255, -1, sizeof(::mruv::economy::IsPlayerBannedRequest)},
  { 262, -1, sizeof(::mruv::economy::IsPlayerBannedResponse)},
  { 269, -1, sizeof(::mruv::economy::IsCharacterBlockedRequest)},
  { 275, -1, sizeof(::mruv::economy::IsCharacterBlockedResponse)},
  { 282, -1, sizeof(::mruv::economy::IsCharacterJailedRequest)},
  { 288, -1, sizeof(::mruv::economy::IsCharacterJailedResponse)},
  { 295, -1, sizeof(::mruv::economy::WatchBansRequest)},
  { 300, -1, sizeof(::mruv::economy::WatchBlocksRequest)},
  { 305, -1, sizeof(::mruv::economy::WatchWarnsRequest)},
  { 310, -1, sizeof(::mruv::economy::WatchAdminJailsRequest)},
  { 315, -1, sizeof(::mruv::economy::WatchUnBansRequest)},
  { 320, -1, sizeof(::mruv::economy::WatchUnBlocksRequest)},
  { 325, -1, sizeof(::mruv::economy::WatchUnWarnsRequest)},
  { 330, -1, sizeof(::mruv::economy::WatchUnAdminJailsRequest)},
  { 335, -1, sizeof(::mruv::economy::WatchPlayerAcquittalsRequest)},
  { 340, -1, sizeof(::mruv::economy::WatchPlayerAcquittalsResponse)},
  { 345, -1, sizeof(::mruv::economy::WatchPlayerPunishmentsRequest)},
  { 350, -1, sizeof(::mruv::economy::WatchPlayerPunishmentsResponse)},
  { 357, -1, sizeof(::mruv::economy::WatchPunishmentsRequest)},
  { 362, -1, sizeof(::mruv::economy::WatchPunishmentsResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_BanMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_WarnMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_BlockMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_AdminJailMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_UnBanMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_UnBlockMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_UnWarnMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_UnAdminJailMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_BanRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_BanResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_BlockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_BlockResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_WarnRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_WarnResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_AdminJailRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_AdminJailResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_MuteGlobalChatsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_MuteGlobalChatsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_UnBanRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_UnBanResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_UnWarnRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_UnWarnResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_UnAdminJailRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_UnAdminJailResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_UnMuteGlobalChatsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_UnMuteGlobalChatsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_GetPlayerBansRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_GetPlayerBansResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_GetPlayerWarnsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_GetPlayerWarnsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_GetPlayerAdminJailRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_GetPlayerAdminJailResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_GetBanRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_GetWarnRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_GetBlockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_IsPlayerBannedRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_IsPlayerBannedResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_IsCharacterBlockedRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_IsCharacterBlockedResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_IsCharacterJailedRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_IsCharacterJailedResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_WatchBansRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_WatchBlocksRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_WatchWarnsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_WatchAdminJailsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_WatchUnBansRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_WatchUnBlocksRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_WatchUnWarnsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_WatchUnAdminJailsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_WatchPlayerAcquittalsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_WatchPlayerAcquittalsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_WatchPlayerPunishmentsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_WatchPlayerPunishmentsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_WatchPunishmentsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::economy::_WatchPunishmentsResponse_default_instance_),
};

const char descriptor_table_protodef_punishments_2fpunishments_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035punishments/punishments.proto\022\014mruv.ec"
  "onomy\032\034google/api/annotations.proto\"\276\001\n\n"
  "BanMessage\022\016\n\006player\030\001 \001(\r\022\021\n\tcharacter\030"
  "\002 \001(\r\022\n\n\002ip\030\003 \001(\t\022\027\n\017expiration_date\030\004 \001"
  "(\003\022\016\n\006reason\030\005 \001(\t\022\r\n\005admin\030\006 \001(\r\022\020\n\010ban"
  "_date\030\007 \001(\003\022\016\n\006active\030\010 \001(\010\022\022\n\nunban_dat"
  "e\030\t \001(\003\022\023\n\013unban_admin\030\n \001(\r\"\266\001\n\013WarnMes"
  "sage\022\016\n\006player\030\001 \001(\r\022\021\n\tcharacter\030\002 \001(\r\022"
  "\027\n\017expiration_date\030\003 \001(\003\022\016\n\006reason\030\004 \001(\t"
  "\022\r\n\005admin\030\005 \001(\r\022\021\n\twarn_date\030\006 \001(\003\022\016\n\006ac"
  "tive\030\007 \001(\010\022\023\n\013unwarn_date\030\010 \001(\003\022\024\n\014unwar"
  "n_admin\030\t \001(\r\"\241\001\n\014BlockMessage\022\016\n\006player"
  "\030\001 \001(\r\022\021\n\tcharacter\030\002 \001(\r\022\016\n\006reason\030\003 \001("
  "\t\022\r\n\005admin\030\004 \001(\r\022\022\n\nblock_date\030\005 \001(\003\022\016\n\006"
  "active\030\006 \001(\010\022\024\n\014unblock_date\030\007 \001(\003\022\025\n\run"
  "block_admin\030\010 \001(\r\"x\n\020AdminJailMessage\022\016\n"
  "\006player\030\001 \001(\r\022\021\n\tcharacter\030\002 \001(\r\022\016\n\006reas"
  "on\030\003 \001(\t\022\r\n\005admin\030\004 \001(\r\022\017\n\007aj_date\030\005 \001(\003"
  "\022\021\n\tjail_time\030\006 \001(\r\".\n\014UnBanMessage\022\016\n\006p"
  "layer\030\001 \001(\r\022\016\n\006ban_id\030\002 \001(\r\"2\n\016UnBlockMe"
  "ssage\022\016\n\006player\030\001 \001(\r\022\020\n\010block_id\030\002 \001(\r\""
  "0\n\rUnWarnMessage\022\016\n\006player\030\001 \001(\r\022\017\n\007warn"
  "_id\030\002 \001(\r\"7\n\022UnAdminJailMessage\022\016\n\006playe"
  "r\030\001 \001(\r\022\021\n\tcharacter\030\002 \001(\r\"h\n\nBanRequest"
  "\022\016\n\006player\030\001 \001(\r\022\021\n\tcharacter\030\002 \001(\r\022\n\n\002i"
  "p\030\003 \001(\t\022\014\n\004time\030\004 \001(\r\022\016\n\006reason\030\005 \001(\t\022\r\n"
  "\005admin\030\006 \001(\r\"\035\n\013BanResponse\022\016\n\006ban_id\030\001 "
  "\001(\r\"@\n\014BlockRequest\022\021\n\tcharacter\030\001 \001(\r\022\016"
  "\n\006reason\030\002 \001(\t\022\r\n\005admin\030\003 \001(\r\"!\n\rBlockRe"
  "sponse\022\020\n\010block_id\030\001 \001(\r\"]\n\013WarnRequest\022"
  "\016\n\006player\030\001 \001(\r\022\021\n\tcharacter\030\002 \001(\r\022\014\n\004ti"
  "me\030\003 \001(\r\022\016\n\006reason\030\004 \001(\t\022\r\n\005admin\030\005 \001(\r\""
  "\037\n\014WarnResponse\022\017\n\007warn_id\030\001 \001(\r\"R\n\020Admi"
  "nJailRequest\022\021\n\tcharacter\030\001 \001(\r\022\014\n\004time\030"
  "\002 \001(\r\022\016\n\006reason\030\003 \001(\t\022\r\n\005admin\030\004 \001(\r\"\023\n\021"
  "AdminJailResponse\")\n\026MuteGlobalChatsRequ"
  "est\022\017\n\007account\030\001 \001(\r\"\031\n\027MuteGlobalChatsR"
  "esponse\"\036\n\014UnBanRequest\022\016\n\006ban_id\030\002 \001(\r\""
  "\017\n\rUnBanResponse\" \n\rUnWarnRequest\022\017\n\007war"
  "n_id\030\002 \001(\r\"\020\n\016UnWarnResponse\"\'\n\022UnAdminJ"
  "ailRequest\022\021\n\tcharacter\030\001 \001(\r\"\025\n\023UnAdmin"
  "JailResponse\"+\n\030UnMuteGlobalChatsRequest"
  "\022\017\n\007account\030\001 \001(\r\"\033\n\031UnMuteGlobalChatsRe"
  "sponse\"2\n\024GetPlayerBansRequest\022\016\n\006player"
  "\030\001 \001(\r\022\n\n\002ip\030\002 \001(\t\"\?\n\025GetPlayerBansRespo"
  "nse\022&\n\004bans\030\001 \003(\0132\030.mruv.economy.BanMess"
  "age\"\'\n\025GetPlayerWarnsRequest\022\016\n\006player\030\001"
  " \001(\r\"B\n\026GetPlayerWarnsResponse\022(\n\005warns\030"
  "\001 \003(\0132\031.mruv.economy.WarnMessage\".\n\031GetP"
  "layerAdminJailRequest\022\021\n\tcharacter\030\001 \001(\r"
  "\"\\\n\032GetPlayerAdminJailResponse\022\021\n\tjail_t"
  "ime\030\001 \001(\r\022\016\n\006reason\030\002 \001(\t\022\r\n\005admin\030\003 \001(\r"
  "\022\014\n\004date\030\004 \001(\003\"\033\n\rGetBanRequest\022\n\n\002id\030\001 "
  "\001(\r\"\034\n\016GetWarnRequest\022\n\n\002id\030\001 \001(\r\"\035\n\017Get"
  "BlockRequest\022\n\n\002id\030\001 \001(\r\"3\n\025IsPlayerBann"
  "edRequest\022\016\n\006player\030\001 \001(\r\022\n\n\002ip\030\002 \001(\t\"8\n"
  "\026IsPlayerBannedResponse\022\016\n\006banned\030\001 \001(\010\022"
  "\016\n\006ban_id\030\002 \001(\r\".\n\031IsCharacterBlockedReq"
  "uest\022\021\n\tcharacter\030\001 \001(\r\"\?\n\032IsCharacterBl"
  "ockedResponse\022\017\n\007blocked\030\001 \001(\010\022\020\n\010block_"
  "id\030\002 \001(\r\"-\n\030IsCharacterJailedRequest\022\021\n\t"
  "character\030\001 \001(\r\">\n\031IsCharacterJailedResp"
  "onse\022\016\n\006jailed\030\001 \001(\010\022\021\n\tjail_time\030\002 \001(\r\""
  "\022\n\020WatchBansRequest\"\024\n\022WatchBlocksReques"
  "t\"\023\n\021WatchWarnsRequest\"\030\n\026WatchAdminJail"
  "sRequest\"\024\n\022WatchUnBansRequest\"\026\n\024WatchU"
  "nBlocksRequest\"\025\n\023WatchUnWarnsRequest\"\032\n"
  "\030WatchUnAdminJailsRequest\"\036\n\034WatchPlayer"
  "AcquittalsRequest\"\037\n\035WatchPlayerAcquitta"
  "lsResponse\"\037\n\035WatchPlayerPunishmentsRequ"
  "est\"c\n\036WatchPlayerPunishmentsResponse\022*\n"
  "\004type\030\001 \001(\0162\034.mruv.economy.PunishmentTyp"
  "e\022\025\n\rpunishment_id\030\002 \001(\r\"\031\n\027WatchPunishm"
  "entsRequest\"\200\001\n\030WatchPunishmentsResponse"
  "\022*\n\004type\030\001 \001(\0162\034.mruv.economy.Punishment"
  "Type\022\025\n\rpunishment_id\030\002 \001(\r\022\016\n\006player\030\003 "
  "\001(\r\022\021\n\tcharacter\030\004 \001(\r*V\n\016PunishmentType"
  "\022\026\n\022UNKNOWN_PUNISHMENT\020\000\022\007\n\003BAN\020\001\022\t\n\005BLO"
  "CK\020\002\022\010\n\004WARN\020\003\022\016\n\nADMIN_JAIL\020\004*]\n\016Acquit"
  "talsType\022\024\n\020UNKNOWN_ACQUITAL\020\000\022\t\n\005UNBAN\020"
  "\001\022\013\n\007UNBLOCK\020\002\022\n\n\006UNWARN\020\003\022\021\n\rUN_ADMIN_J"
  "AIL\020\0042\326\030\n\026MruVPunishmentsService\022`\n\003Ban\022"
  "\030.mruv.economy.BanRequest\032\031.mruv.economy"
  ".BanResponse\"$\202\323\344\223\002\036\"\034/v1/punishments/ba"
  "n/{player}\022k\n\005Block\022\032.mruv.economy.Block"
  "Request\032\033.mruv.economy.BlockResponse\")\202\323"
  "\344\223\002#\"!/v1/punishments/block/{character}\022"
  "d\n\004Warn\022\031.mruv.economy.WarnRequest\032\032.mru"
  "v.economy.WarnResponse\"%\202\323\344\223\002\037\"\035/v1/puni"
  "shments/warn/{player}\022t\n\tAdminJail\022\036.mru"
  "v.economy.AdminJailRequest\032\037.mruv.econom"
  "y.AdminJailResponse\"&\202\323\344\223\002 \"\036/v1/punishm"
  "ents/aj/{character}\022\206\001\n\017MuteGlobalChats\022"
  "$.mruv.economy.MuteGlobalChatsRequest\032%."
  "mruv.economy.MuteGlobalChatsResponse\"&\202\323"
  "\344\223\002 \"\036/v1/punishments/mute/{account}\022f\n\005"
  "UnBan\022\032.mruv.economy.UnBanRequest\032\033.mruv"
  ".economy.UnBanResponse\"$\202\323\344\223\002\036*\034/v1/puni"
  "shments/ban/{ban_id}\022k\n\006UnWarn\022\033.mruv.ec"
  "onomy.UnWarnRequest\032\034.mruv.economy.UnWar"
  "nResponse\"&\202\323\344\223\002 *\036/v1/punishments/warn/"
  "{warn_id}\022z\n\013UnAdminJail\022 .mruv.economy."
  "UnAdminJailRequest\032!.mruv.economy.UnAdmi"
  "nJailResponse\"&\202\323\344\223\002 *\036/v1/punishments/a"
  "j/{character}\022\214\001\n\021UnMuteGlobalChats\022&.mr"
  "uv.economy.UnMuteGlobalChatsRequest\032\'.mr"
  "uv.economy.UnMuteGlobalChatsResponse\"&\202\323"
  "\344\223\002 *\036/v1/punishments/mute/{account}\022\177\n\r"
  "GetPlayerBans\022\".mruv.economy.GetPlayerBa"
  "nsRequest\032#.mruv.economy.GetPlayerBansRe"
  "sponse\"%\202\323\344\223\002\037\022\035/v1/punishments/bans/{pl"
  "ayer}\022\203\001\n\016GetPlayerWarns\022#.mruv.economy."
  "GetPlayerWarnsRequest\032$.mruv.economy.Get"
  "PlayerWarnsResponse\"&\202\323\344\223\002 \022\036/v1/punishm"
  "ents/warns/{player}\022\217\001\n\022GetPlayerAdminJa"
  "il\022\'.mruv.economy.GetPlayerAdminJailRequ"
  "est\032(.mruv.economy.GetPlayerAdminJailRes"
  "ponse\"&\202\323\344\223\002 \022\036/v1/punishments/aj/{chara"
  "cter}\022b\n\006GetBan\022\033.mruv.economy.GetBanReq"
  "uest\032\030.mruv.economy.BanMessage\"!\202\323\344\223\002\033\022\031"
  "/v1/punishments/bans/{id}\022f\n\007GetWarn\022\034.m"
  "ruv.economy.GetWarnRequest\032\031.mruv.econom"
  "y.WarnMessage\"\"\202\323\344\223\002\034\022\032/v1/punishments/w"
  "arns/{id}\022j\n\010GetBlock\022\035.mruv.economy.Get"
  "BlockRequest\032\032.mruv.economy.BlockMessage"
  "\"#\202\323\344\223\002\035\022\033/v1/punishments/blocks/{id}\022\207\001"
  "\n\016IsPlayerBanned\022#.mruv.economy.IsPlayer"
  "BannedRequest\032$.mruv.economy.IsPlayerBan"
  "nedResponse\"*\202\323\344\223\002$\022\"/v1/punishments/ban"
  "s/{player}/{ip}\022i\n\022IsCharacterBlocked\022\'."
  "mruv.economy.IsCharacterBlockedRequest\032("
  ".mruv.economy.IsCharacterBlockedResponse"
  "\"\000\022f\n\021IsCharacterJailed\022&.mruv.economy.I"
  "sCharacterJailedRequest\032\'.mruv.economy.I"
  "sCharacterJailedResponse\"\000\022I\n\tWatchBans\022"
  "\036.mruv.economy.WatchBansRequest\032\030.mruv.e"
  "conomy.BanMessage\"\0000\001\022O\n\013WatchBlocks\022 .m"
  "ruv.economy.WatchBlocksRequest\032\032.mruv.ec"
  "onomy.BlockMessage\"\0000\001\022L\n\nWatchWarns\022\037.m"
  "ruv.economy.WatchWarnsRequest\032\031.mruv.eco"
  "nomy.WarnMessage\"\0000\001\022[\n\017WatchAdminJails\022"
  "$.mruv.economy.WatchAdminJailsRequest\032\036."
  "mruv.economy.AdminJailMessage\"\0000\001\022O\n\013Wat"
  "chUnBans\022 .mruv.economy.WatchUnBansReque"
  "st\032\032.mruv.economy.UnBanMessage\"\0000\001\022U\n\rWa"
  "tchUnBlocks\022\".mruv.economy.WatchUnBlocks"
  "Request\032\034.mruv.economy.UnBlockMessage\"\0000"
  "\001\022R\n\014WatchUnWarns\022!.mruv.economy.WatchUn"
  "WarnsRequest\032\033.mruv.economy.UnWarnMessag"
  "e\"\0000\001\022a\n\021WatchUnAdminJails\022&.mruv.econom"
  "y.WatchUnAdminJailsRequest\032 .mruv.econom"
  "y.UnAdminJailMessage\"\0000\001\022w\n\026WatchPlayerP"
  "unishments\022+.mruv.economy.WatchPlayerPun"
  "ishmentsRequest\032,.mruv.economy.WatchPlay"
  "erPunishmentsResponse\"\0000\001\022t\n\025WatchPlayer"
  "Acquittals\022*.mruv.economy.WatchPlayerAcq"
  "uittalsRequest\032+.mruv.economy.WatchPlaye"
  "rAcquittalsResponse\"\0000\001\022e\n\020WatchPunishme"
  "nts\022%.mruv.economy.WatchPunishmentsReque"
  "st\032&.mruv.economy.WatchPunishmentsRespon"
  "se\"\0000\001B+Z)github.com/MruV-RP/mruv-pb-go/"
  "punishmentsb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_punishments_2fpunishments_2eproto_deps[1] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_punishments_2fpunishments_2eproto_sccs[55] = {
  &scc_info_AdminJailMessage_punishments_2fpunishments_2eproto.base,
  &scc_info_AdminJailRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_AdminJailResponse_punishments_2fpunishments_2eproto.base,
  &scc_info_BanMessage_punishments_2fpunishments_2eproto.base,
  &scc_info_BanRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_BanResponse_punishments_2fpunishments_2eproto.base,
  &scc_info_BlockMessage_punishments_2fpunishments_2eproto.base,
  &scc_info_BlockRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_BlockResponse_punishments_2fpunishments_2eproto.base,
  &scc_info_GetBanRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_GetBlockRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_GetPlayerAdminJailRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_GetPlayerAdminJailResponse_punishments_2fpunishments_2eproto.base,
  &scc_info_GetPlayerBansRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_GetPlayerBansResponse_punishments_2fpunishments_2eproto.base,
  &scc_info_GetPlayerWarnsRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_GetPlayerWarnsResponse_punishments_2fpunishments_2eproto.base,
  &scc_info_GetWarnRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_IsCharacterBlockedRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_IsCharacterBlockedResponse_punishments_2fpunishments_2eproto.base,
  &scc_info_IsCharacterJailedRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_IsCharacterJailedResponse_punishments_2fpunishments_2eproto.base,
  &scc_info_IsPlayerBannedRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_IsPlayerBannedResponse_punishments_2fpunishments_2eproto.base,
  &scc_info_MuteGlobalChatsRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_MuteGlobalChatsResponse_punishments_2fpunishments_2eproto.base,
  &scc_info_UnAdminJailMessage_punishments_2fpunishments_2eproto.base,
  &scc_info_UnAdminJailRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_UnAdminJailResponse_punishments_2fpunishments_2eproto.base,
  &scc_info_UnBanMessage_punishments_2fpunishments_2eproto.base,
  &scc_info_UnBanRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_UnBanResponse_punishments_2fpunishments_2eproto.base,
  &scc_info_UnBlockMessage_punishments_2fpunishments_2eproto.base,
  &scc_info_UnMuteGlobalChatsRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_UnMuteGlobalChatsResponse_punishments_2fpunishments_2eproto.base,
  &scc_info_UnWarnMessage_punishments_2fpunishments_2eproto.base,
  &scc_info_UnWarnRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_UnWarnResponse_punishments_2fpunishments_2eproto.base,
  &scc_info_WarnMessage_punishments_2fpunishments_2eproto.base,
  &scc_info_WarnRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_WarnResponse_punishments_2fpunishments_2eproto.base,
  &scc_info_WatchAdminJailsRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_WatchBansRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_WatchBlocksRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_WatchPlayerAcquittalsRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_WatchPlayerAcquittalsResponse_punishments_2fpunishments_2eproto.base,
  &scc_info_WatchPlayerPunishmentsRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_WatchPlayerPunishmentsResponse_punishments_2fpunishments_2eproto.base,
  &scc_info_WatchPunishmentsRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_WatchPunishmentsResponse_punishments_2fpunishments_2eproto.base,
  &scc_info_WatchUnAdminJailsRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_WatchUnBansRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_WatchUnBlocksRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_WatchUnWarnsRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_WatchWarnsRequest_punishments_2fpunishments_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_punishments_2fpunishments_2eproto_once;
static bool descriptor_table_punishments_2fpunishments_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_punishments_2fpunishments_2eproto = {
  &descriptor_table_punishments_2fpunishments_2eproto_initialized, descriptor_table_protodef_punishments_2fpunishments_2eproto, "punishments/punishments.proto", 6459,
  &descriptor_table_punishments_2fpunishments_2eproto_once, descriptor_table_punishments_2fpunishments_2eproto_sccs, descriptor_table_punishments_2fpunishments_2eproto_deps, 55, 1,
  schemas, file_default_instances, TableStruct_punishments_2fpunishments_2eproto::offsets,
  file_level_metadata_punishments_2fpunishments_2eproto, 55, file_level_enum_descriptors_punishments_2fpunishments_2eproto, file_level_service_descriptors_punishments_2fpunishments_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_punishments_2fpunishments_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_punishments_2fpunishments_2eproto), true);
namespace mruv {
namespace economy {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PunishmentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_punishments_2fpunishments_2eproto);
  return file_level_enum_descriptors_punishments_2fpunishments_2eproto[0];
}
bool PunishmentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AcquittalsType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_punishments_2fpunishments_2eproto);
  return file_level_enum_descriptors_punishments_2fpunishments_2eproto[1];
}
bool AcquittalsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void BanMessage::InitAsDefaultInstance() {
}
class BanMessage::_Internal {
 public:
};

BanMessage::BanMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.BanMessage)
}
BanMessage::BanMessage(const BanMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reason().empty()) {
    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  ::memcpy(&player_, &from.player_,
    static_cast<size_t>(reinterpret_cast<char*>(&unban_admin_) -
    reinterpret_cast<char*>(&player_)) + sizeof(unban_admin_));
  // @@protoc_insertion_point(copy_constructor:mruv.economy.BanMessage)
}

void BanMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BanMessage_punishments_2fpunishments_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unban_admin_) -
      reinterpret_cast<char*>(&player_)) + sizeof(unban_admin_));
}

BanMessage::~BanMessage() {
  // @@protoc_insertion_point(destructor:mruv.economy.BanMessage)
  SharedDtor();
}

void BanMessage::SharedDtor() {
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BanMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BanMessage& BanMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BanMessage_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void BanMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.BanMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unban_admin_) -
      reinterpret_cast<char*>(&player_)) + sizeof(unban_admin_));
  _internal_metadata_.Clear();
}

const char* BanMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 character = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          character_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.economy.BanMessage.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 expiration_date = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          expiration_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reason = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.economy.BanMessage.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 admin = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 ban_date = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ban_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool active = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 unban_date = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          unban_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 unban_admin = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          unban_admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BanMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.BanMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player = 1;
  if (this->player() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player(), target);
  }

  // uint32 character = 2;
  if (this->character() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_character(), target);
  }

  // string ip = 3;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.economy.BanMessage.ip");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ip(), target);
  }

  // int64 expiration_date = 4;
  if (this->expiration_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_expiration_date(), target);
  }

  // string reason = 5;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.economy.BanMessage.reason");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_reason(), target);
  }

  // uint32 admin = 6;
  if (this->admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_admin(), target);
  }

  // int64 ban_date = 7;
  if (this->ban_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_ban_date(), target);
  }

  // bool active = 8;
  if (this->active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_active(), target);
  }

  // int64 unban_date = 9;
  if (this->unban_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_unban_date(), target);
  }

  // uint32 unban_admin = 10;
  if (this->unban_admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_unban_admin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.BanMessage)
  return target;
}

size_t BanMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.BanMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 3;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string reason = 5;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // uint32 player = 1;
  if (this->player() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player());
  }

  // uint32 character = 2;
  if (this->character() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_character());
  }

  // int64 expiration_date = 4;
  if (this->expiration_date() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_expiration_date());
  }

  // int64 ban_date = 7;
  if (this->ban_date() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ban_date());
  }

  // uint32 admin = 6;
  if (this->admin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_admin());
  }

  // bool active = 8;
  if (this->active() != 0) {
    total_size += 1 + 1;
  }

  // int64 unban_date = 9;
  if (this->unban_date() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_unban_date());
  }

  // uint32 unban_admin = 10;
  if (this->unban_admin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_unban_admin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BanMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.BanMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const BanMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BanMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.BanMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.BanMessage)
    MergeFrom(*source);
  }
}

void BanMessage::MergeFrom(const BanMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.BanMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.reason().size() > 0) {

    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  if (from.player() != 0) {
    _internal_set_player(from._internal_player());
  }
  if (from.character() != 0) {
    _internal_set_character(from._internal_character());
  }
  if (from.expiration_date() != 0) {
    _internal_set_expiration_date(from._internal_expiration_date());
  }
  if (from.ban_date() != 0) {
    _internal_set_ban_date(from._internal_ban_date());
  }
  if (from.admin() != 0) {
    _internal_set_admin(from._internal_admin());
  }
  if (from.active() != 0) {
    _internal_set_active(from._internal_active());
  }
  if (from.unban_date() != 0) {
    _internal_set_unban_date(from._internal_unban_date());
  }
  if (from.unban_admin() != 0) {
    _internal_set_unban_admin(from._internal_unban_admin());
  }
}

void BanMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.BanMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BanMessage::CopyFrom(const BanMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.BanMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BanMessage::IsInitialized() const {
  return true;
}

void BanMessage::InternalSwap(BanMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_, other->player_);
  swap(character_, other->character_);
  swap(expiration_date_, other->expiration_date_);
  swap(ban_date_, other->ban_date_);
  swap(admin_, other->admin_);
  swap(active_, other->active_);
  swap(unban_date_, other->unban_date_);
  swap(unban_admin_, other->unban_admin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BanMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WarnMessage::InitAsDefaultInstance() {
}
class WarnMessage::_Internal {
 public:
};

WarnMessage::WarnMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.WarnMessage)
}
WarnMessage::WarnMessage(const WarnMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reason().empty()) {
    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  ::memcpy(&player_, &from.player_,
    static_cast<size_t>(reinterpret_cast<char*>(&unwarn_admin_) -
    reinterpret_cast<char*>(&player_)) + sizeof(unwarn_admin_));
  // @@protoc_insertion_point(copy_constructor:mruv.economy.WarnMessage)
}

void WarnMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WarnMessage_punishments_2fpunishments_2eproto.base);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unwarn_admin_) -
      reinterpret_cast<char*>(&player_)) + sizeof(unwarn_admin_));
}

WarnMessage::~WarnMessage() {
  // @@protoc_insertion_point(destructor:mruv.economy.WarnMessage)
  SharedDtor();
}

void WarnMessage::SharedDtor() {
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WarnMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WarnMessage& WarnMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WarnMessage_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void WarnMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.WarnMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unwarn_admin_) -
      reinterpret_cast<char*>(&player_)) + sizeof(unwarn_admin_));
  _internal_metadata_.Clear();
}

const char* WarnMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 character = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          character_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 expiration_date = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          expiration_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reason = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.economy.WarnMessage.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 admin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 warn_date = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          warn_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool active = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 unwarn_date = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          unwarn_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 unwarn_admin = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          unwarn_admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WarnMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.WarnMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player = 1;
  if (this->player() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player(), target);
  }

  // uint32 character = 2;
  if (this->character() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_character(), target);
  }

  // int64 expiration_date = 3;
  if (this->expiration_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_expiration_date(), target);
  }

  // string reason = 4;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.economy.WarnMessage.reason");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_reason(), target);
  }

  // uint32 admin = 5;
  if (this->admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_admin(), target);
  }

  // int64 warn_date = 6;
  if (this->warn_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_warn_date(), target);
  }

  // bool active = 7;
  if (this->active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_active(), target);
  }

  // int64 unwarn_date = 8;
  if (this->unwarn_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_unwarn_date(), target);
  }

  // uint32 unwarn_admin = 9;
  if (this->unwarn_admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_unwarn_admin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.WarnMessage)
  return target;
}

size_t WarnMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.WarnMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 4;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // uint32 player = 1;
  if (this->player() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player());
  }

  // uint32 character = 2;
  if (this->character() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_character());
  }

  // int64 expiration_date = 3;
  if (this->expiration_date() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_expiration_date());
  }

  // int64 warn_date = 6;
  if (this->warn_date() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_warn_date());
  }

  // uint32 admin = 5;
  if (this->admin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_admin());
  }

  // bool active = 7;
  if (this->active() != 0) {
    total_size += 1 + 1;
  }

  // int64 unwarn_date = 8;
  if (this->unwarn_date() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_unwarn_date());
  }

  // uint32 unwarn_admin = 9;
  if (this->unwarn_admin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_unwarn_admin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WarnMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.WarnMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const WarnMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WarnMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.WarnMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.WarnMessage)
    MergeFrom(*source);
  }
}

void WarnMessage::MergeFrom(const WarnMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.WarnMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason().size() > 0) {

    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  if (from.player() != 0) {
    _internal_set_player(from._internal_player());
  }
  if (from.character() != 0) {
    _internal_set_character(from._internal_character());
  }
  if (from.expiration_date() != 0) {
    _internal_set_expiration_date(from._internal_expiration_date());
  }
  if (from.warn_date() != 0) {
    _internal_set_warn_date(from._internal_warn_date());
  }
  if (from.admin() != 0) {
    _internal_set_admin(from._internal_admin());
  }
  if (from.active() != 0) {
    _internal_set_active(from._internal_active());
  }
  if (from.unwarn_date() != 0) {
    _internal_set_unwarn_date(from._internal_unwarn_date());
  }
  if (from.unwarn_admin() != 0) {
    _internal_set_unwarn_admin(from._internal_unwarn_admin());
  }
}

void WarnMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.WarnMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarnMessage::CopyFrom(const WarnMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.WarnMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarnMessage::IsInitialized() const {
  return true;
}

void WarnMessage::InternalSwap(WarnMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_, other->player_);
  swap(character_, other->character_);
  swap(expiration_date_, other->expiration_date_);
  swap(warn_date_, other->warn_date_);
  swap(admin_, other->admin_);
  swap(active_, other->active_);
  swap(unwarn_date_, other->unwarn_date_);
  swap(unwarn_admin_, other->unwarn_admin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WarnMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BlockMessage::InitAsDefaultInstance() {
}
class BlockMessage::_Internal {
 public:
};

BlockMessage::BlockMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.BlockMessage)
}
BlockMessage::BlockMessage(const BlockMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reason().empty()) {
    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  ::memcpy(&player_, &from.player_,
    static_cast<size_t>(reinterpret_cast<char*>(&unblock_admin_) -
    reinterpret_cast<char*>(&player_)) + sizeof(unblock_admin_));
  // @@protoc_insertion_point(copy_constructor:mruv.economy.BlockMessage)
}

void BlockMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlockMessage_punishments_2fpunishments_2eproto.base);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unblock_admin_) -
      reinterpret_cast<char*>(&player_)) + sizeof(unblock_admin_));
}

BlockMessage::~BlockMessage() {
  // @@protoc_insertion_point(destructor:mruv.economy.BlockMessage)
  SharedDtor();
}

void BlockMessage::SharedDtor() {
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BlockMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockMessage& BlockMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlockMessage_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void BlockMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.BlockMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unblock_admin_) -
      reinterpret_cast<char*>(&player_)) + sizeof(unblock_admin_));
  _internal_metadata_.Clear();
}

const char* BlockMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 character = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          character_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.economy.BlockMessage.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 admin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 block_date = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          block_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool active = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 unblock_date = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          unblock_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 unblock_admin = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          unblock_admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.BlockMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player = 1;
  if (this->player() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player(), target);
  }

  // uint32 character = 2;
  if (this->character() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_character(), target);
  }

  // string reason = 3;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.economy.BlockMessage.reason");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_reason(), target);
  }

  // uint32 admin = 4;
  if (this->admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_admin(), target);
  }

  // int64 block_date = 5;
  if (this->block_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_block_date(), target);
  }

  // bool active = 6;
  if (this->active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_active(), target);
  }

  // int64 unblock_date = 7;
  if (this->unblock_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_unblock_date(), target);
  }

  // uint32 unblock_admin = 8;
  if (this->unblock_admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_unblock_admin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.BlockMessage)
  return target;
}

size_t BlockMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.BlockMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 3;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // uint32 player = 1;
  if (this->player() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player());
  }

  // uint32 character = 2;
  if (this->character() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_character());
  }

  // int64 block_date = 5;
  if (this->block_date() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_block_date());
  }

  // uint32 admin = 4;
  if (this->admin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_admin());
  }

  // bool active = 6;
  if (this->active() != 0) {
    total_size += 1 + 1;
  }

  // int64 unblock_date = 7;
  if (this->unblock_date() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_unblock_date());
  }

  // uint32 unblock_admin = 8;
  if (this->unblock_admin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_unblock_admin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.BlockMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.BlockMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.BlockMessage)
    MergeFrom(*source);
  }
}

void BlockMessage::MergeFrom(const BlockMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.BlockMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason().size() > 0) {

    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  if (from.player() != 0) {
    _internal_set_player(from._internal_player());
  }
  if (from.character() != 0) {
    _internal_set_character(from._internal_character());
  }
  if (from.block_date() != 0) {
    _internal_set_block_date(from._internal_block_date());
  }
  if (from.admin() != 0) {
    _internal_set_admin(from._internal_admin());
  }
  if (from.active() != 0) {
    _internal_set_active(from._internal_active());
  }
  if (from.unblock_date() != 0) {
    _internal_set_unblock_date(from._internal_unblock_date());
  }
  if (from.unblock_admin() != 0) {
    _internal_set_unblock_admin(from._internal_unblock_admin());
  }
}

void BlockMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.BlockMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockMessage::CopyFrom(const BlockMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.BlockMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockMessage::IsInitialized() const {
  return true;
}

void BlockMessage::InternalSwap(BlockMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_, other->player_);
  swap(character_, other->character_);
  swap(block_date_, other->block_date_);
  swap(admin_, other->admin_);
  swap(active_, other->active_);
  swap(unblock_date_, other->unblock_date_);
  swap(unblock_admin_, other->unblock_admin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AdminJailMessage::InitAsDefaultInstance() {
}
class AdminJailMessage::_Internal {
 public:
};

AdminJailMessage::AdminJailMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.AdminJailMessage)
}
AdminJailMessage::AdminJailMessage(const AdminJailMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reason().empty()) {
    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  ::memcpy(&player_, &from.player_,
    static_cast<size_t>(reinterpret_cast<char*>(&jail_time_) -
    reinterpret_cast<char*>(&player_)) + sizeof(jail_time_));
  // @@protoc_insertion_point(copy_constructor:mruv.economy.AdminJailMessage)
}

void AdminJailMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AdminJailMessage_punishments_2fpunishments_2eproto.base);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&jail_time_) -
      reinterpret_cast<char*>(&player_)) + sizeof(jail_time_));
}

AdminJailMessage::~AdminJailMessage() {
  // @@protoc_insertion_point(destructor:mruv.economy.AdminJailMessage)
  SharedDtor();
}

void AdminJailMessage::SharedDtor() {
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AdminJailMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdminJailMessage& AdminJailMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdminJailMessage_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void AdminJailMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.AdminJailMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&jail_time_) -
      reinterpret_cast<char*>(&player_)) + sizeof(jail_time_));
  _internal_metadata_.Clear();
}

const char* AdminJailMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 character = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          character_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.economy.AdminJailMessage.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 admin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 aj_date = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          aj_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 jail_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          jail_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdminJailMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.AdminJailMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player = 1;
  if (this->player() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player(), target);
  }

  // uint32 character = 2;
  if (this->character() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_character(), target);
  }

  // string reason = 3;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.economy.AdminJailMessage.reason");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_reason(), target);
  }

  // uint32 admin = 4;
  if (this->admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_admin(), target);
  }

  // int64 aj_date = 5;
  if (this->aj_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_aj_date(), target);
  }

  // uint32 jail_time = 6;
  if (this->jail_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_jail_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.AdminJailMessage)
  return target;
}

size_t AdminJailMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.AdminJailMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 3;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // uint32 player = 1;
  if (this->player() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player());
  }

  // uint32 character = 2;
  if (this->character() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_character());
  }

  // int64 aj_date = 5;
  if (this->aj_date() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_aj_date());
  }

  // uint32 admin = 4;
  if (this->admin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_admin());
  }

  // uint32 jail_time = 6;
  if (this->jail_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_jail_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdminJailMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.AdminJailMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const AdminJailMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdminJailMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.AdminJailMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.AdminJailMessage)
    MergeFrom(*source);
  }
}

void AdminJailMessage::MergeFrom(const AdminJailMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.AdminJailMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason().size() > 0) {

    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  if (from.player() != 0) {
    _internal_set_player(from._internal_player());
  }
  if (from.character() != 0) {
    _internal_set_character(from._internal_character());
  }
  if (from.aj_date() != 0) {
    _internal_set_aj_date(from._internal_aj_date());
  }
  if (from.admin() != 0) {
    _internal_set_admin(from._internal_admin());
  }
  if (from.jail_time() != 0) {
    _internal_set_jail_time(from._internal_jail_time());
  }
}

void AdminJailMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.AdminJailMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdminJailMessage::CopyFrom(const AdminJailMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.AdminJailMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminJailMessage::IsInitialized() const {
  return true;
}

void AdminJailMessage::InternalSwap(AdminJailMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_, other->player_);
  swap(character_, other->character_);
  swap(aj_date_, other->aj_date_);
  swap(admin_, other->admin_);
  swap(jail_time_, other->jail_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdminJailMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnBanMessage::InitAsDefaultInstance() {
}
class UnBanMessage::_Internal {
 public:
};

UnBanMessage::UnBanMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.UnBanMessage)
}
UnBanMessage::UnBanMessage(const UnBanMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_, &from.player_,
    static_cast<size_t>(reinterpret_cast<char*>(&ban_id_) -
    reinterpret_cast<char*>(&player_)) + sizeof(ban_id_));
  // @@protoc_insertion_point(copy_constructor:mruv.economy.UnBanMessage)
}

void UnBanMessage::SharedCtor() {
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ban_id_) -
      reinterpret_cast<char*>(&player_)) + sizeof(ban_id_));
}

UnBanMessage::~UnBanMessage() {
  // @@protoc_insertion_point(destructor:mruv.economy.UnBanMessage)
  SharedDtor();
}

void UnBanMessage::SharedDtor() {
}

void UnBanMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnBanMessage& UnBanMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnBanMessage_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void UnBanMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.UnBanMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ban_id_) -
      reinterpret_cast<char*>(&player_)) + sizeof(ban_id_));
  _internal_metadata_.Clear();
}

const char* UnBanMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ban_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ban_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnBanMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.UnBanMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player = 1;
  if (this->player() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player(), target);
  }

  // uint32 ban_id = 2;
  if (this->ban_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ban_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.UnBanMessage)
  return target;
}

size_t UnBanMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.UnBanMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 player = 1;
  if (this->player() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player());
  }

  // uint32 ban_id = 2;
  if (this->ban_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ban_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnBanMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.UnBanMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const UnBanMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnBanMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.UnBanMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.UnBanMessage)
    MergeFrom(*source);
  }
}

void UnBanMessage::MergeFrom(const UnBanMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.UnBanMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player() != 0) {
    _internal_set_player(from._internal_player());
  }
  if (from.ban_id() != 0) {
    _internal_set_ban_id(from._internal_ban_id());
  }
}

void UnBanMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.UnBanMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnBanMessage::CopyFrom(const UnBanMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.UnBanMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnBanMessage::IsInitialized() const {
  return true;
}

void UnBanMessage::InternalSwap(UnBanMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(player_, other->player_);
  swap(ban_id_, other->ban_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnBanMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnBlockMessage::InitAsDefaultInstance() {
}
class UnBlockMessage::_Internal {
 public:
};

UnBlockMessage::UnBlockMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.UnBlockMessage)
}
UnBlockMessage::UnBlockMessage(const UnBlockMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_, &from.player_,
    static_cast<size_t>(reinterpret_cast<char*>(&block_id_) -
    reinterpret_cast<char*>(&player_)) + sizeof(block_id_));
  // @@protoc_insertion_point(copy_constructor:mruv.economy.UnBlockMessage)
}

void UnBlockMessage::SharedCtor() {
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_id_) -
      reinterpret_cast<char*>(&player_)) + sizeof(block_id_));
}

UnBlockMessage::~UnBlockMessage() {
  // @@protoc_insertion_point(destructor:mruv.economy.UnBlockMessage)
  SharedDtor();
}

void UnBlockMessage::SharedDtor() {
}

void UnBlockMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnBlockMessage& UnBlockMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnBlockMessage_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void UnBlockMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.UnBlockMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_id_) -
      reinterpret_cast<char*>(&player_)) + sizeof(block_id_));
  _internal_metadata_.Clear();
}

const char* UnBlockMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 block_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          block_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnBlockMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.UnBlockMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player = 1;
  if (this->player() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player(), target);
  }

  // uint32 block_id = 2;
  if (this->block_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_block_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.UnBlockMessage)
  return target;
}

size_t UnBlockMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.UnBlockMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 player = 1;
  if (this->player() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player());
  }

  // uint32 block_id = 2;
  if (this->block_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_block_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnBlockMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.UnBlockMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const UnBlockMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnBlockMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.UnBlockMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.UnBlockMessage)
    MergeFrom(*source);
  }
}

void UnBlockMessage::MergeFrom(const UnBlockMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.UnBlockMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player() != 0) {
    _internal_set_player(from._internal_player());
  }
  if (from.block_id() != 0) {
    _internal_set_block_id(from._internal_block_id());
  }
}

void UnBlockMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.UnBlockMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnBlockMessage::CopyFrom(const UnBlockMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.UnBlockMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnBlockMessage::IsInitialized() const {
  return true;
}

void UnBlockMessage::InternalSwap(UnBlockMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(player_, other->player_);
  swap(block_id_, other->block_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnBlockMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnWarnMessage::InitAsDefaultInstance() {
}
class UnWarnMessage::_Internal {
 public:
};

UnWarnMessage::UnWarnMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.UnWarnMessage)
}
UnWarnMessage::UnWarnMessage(const UnWarnMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_, &from.player_,
    static_cast<size_t>(reinterpret_cast<char*>(&warn_id_) -
    reinterpret_cast<char*>(&player_)) + sizeof(warn_id_));
  // @@protoc_insertion_point(copy_constructor:mruv.economy.UnWarnMessage)
}

void UnWarnMessage::SharedCtor() {
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&warn_id_) -
      reinterpret_cast<char*>(&player_)) + sizeof(warn_id_));
}

UnWarnMessage::~UnWarnMessage() {
  // @@protoc_insertion_point(destructor:mruv.economy.UnWarnMessage)
  SharedDtor();
}

void UnWarnMessage::SharedDtor() {
}

void UnWarnMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnWarnMessage& UnWarnMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnWarnMessage_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void UnWarnMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.UnWarnMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&warn_id_) -
      reinterpret_cast<char*>(&player_)) + sizeof(warn_id_));
  _internal_metadata_.Clear();
}

const char* UnWarnMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 warn_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          warn_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnWarnMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.UnWarnMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player = 1;
  if (this->player() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player(), target);
  }

  // uint32 warn_id = 2;
  if (this->warn_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_warn_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.UnWarnMessage)
  return target;
}

size_t UnWarnMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.UnWarnMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 player = 1;
  if (this->player() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player());
  }

  // uint32 warn_id = 2;
  if (this->warn_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_warn_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnWarnMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.UnWarnMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const UnWarnMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnWarnMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.UnWarnMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.UnWarnMessage)
    MergeFrom(*source);
  }
}

void UnWarnMessage::MergeFrom(const UnWarnMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.UnWarnMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player() != 0) {
    _internal_set_player(from._internal_player());
  }
  if (from.warn_id() != 0) {
    _internal_set_warn_id(from._internal_warn_id());
  }
}

void UnWarnMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.UnWarnMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnWarnMessage::CopyFrom(const UnWarnMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.UnWarnMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnWarnMessage::IsInitialized() const {
  return true;
}

void UnWarnMessage::InternalSwap(UnWarnMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(player_, other->player_);
  swap(warn_id_, other->warn_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnWarnMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnAdminJailMessage::InitAsDefaultInstance() {
}
class UnAdminJailMessage::_Internal {
 public:
};

UnAdminJailMessage::UnAdminJailMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.UnAdminJailMessage)
}
UnAdminJailMessage::UnAdminJailMessage(const UnAdminJailMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_, &from.player_,
    static_cast<size_t>(reinterpret_cast<char*>(&character_) -
    reinterpret_cast<char*>(&player_)) + sizeof(character_));
  // @@protoc_insertion_point(copy_constructor:mruv.economy.UnAdminJailMessage)
}

void UnAdminJailMessage::SharedCtor() {
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&character_) -
      reinterpret_cast<char*>(&player_)) + sizeof(character_));
}

UnAdminJailMessage::~UnAdminJailMessage() {
  // @@protoc_insertion_point(destructor:mruv.economy.UnAdminJailMessage)
  SharedDtor();
}

void UnAdminJailMessage::SharedDtor() {
}

void UnAdminJailMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnAdminJailMessage& UnAdminJailMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnAdminJailMessage_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void UnAdminJailMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.UnAdminJailMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&character_) -
      reinterpret_cast<char*>(&player_)) + sizeof(character_));
  _internal_metadata_.Clear();
}

const char* UnAdminJailMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 character = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          character_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnAdminJailMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.UnAdminJailMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player = 1;
  if (this->player() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player(), target);
  }

  // uint32 character = 2;
  if (this->character() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_character(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.UnAdminJailMessage)
  return target;
}

size_t UnAdminJailMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.UnAdminJailMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 player = 1;
  if (this->player() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player());
  }

  // uint32 character = 2;
  if (this->character() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_character());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnAdminJailMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.UnAdminJailMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const UnAdminJailMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnAdminJailMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.UnAdminJailMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.UnAdminJailMessage)
    MergeFrom(*source);
  }
}

void UnAdminJailMessage::MergeFrom(const UnAdminJailMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.UnAdminJailMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player() != 0) {
    _internal_set_player(from._internal_player());
  }
  if (from.character() != 0) {
    _internal_set_character(from._internal_character());
  }
}

void UnAdminJailMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.UnAdminJailMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnAdminJailMessage::CopyFrom(const UnAdminJailMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.UnAdminJailMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnAdminJailMessage::IsInitialized() const {
  return true;
}

void UnAdminJailMessage::InternalSwap(UnAdminJailMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(player_, other->player_);
  swap(character_, other->character_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnAdminJailMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BanRequest::InitAsDefaultInstance() {
}
class BanRequest::_Internal {
 public:
};

BanRequest::BanRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.BanRequest)
}
BanRequest::BanRequest(const BanRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reason().empty()) {
    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  ::memcpy(&player_, &from.player_,
    static_cast<size_t>(reinterpret_cast<char*>(&admin_) -
    reinterpret_cast<char*>(&player_)) + sizeof(admin_));
  // @@protoc_insertion_point(copy_constructor:mruv.economy.BanRequest)
}

void BanRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BanRequest_punishments_2fpunishments_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&admin_) -
      reinterpret_cast<char*>(&player_)) + sizeof(admin_));
}

BanRequest::~BanRequest() {
  // @@protoc_insertion_point(destructor:mruv.economy.BanRequest)
  SharedDtor();
}

void BanRequest::SharedDtor() {
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BanRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BanRequest& BanRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BanRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void BanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.BanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&admin_) -
      reinterpret_cast<char*>(&player_)) + sizeof(admin_));
  _internal_metadata_.Clear();
}

const char* BanRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 character = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          character_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.economy.BanRequest.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reason = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.economy.BanRequest.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 admin = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BanRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.BanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player = 1;
  if (this->player() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player(), target);
  }

  // uint32 character = 2;
  if (this->character() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_character(), target);
  }

  // string ip = 3;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.economy.BanRequest.ip");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ip(), target);
  }

  // uint32 time = 4;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_time(), target);
  }

  // string reason = 5;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.economy.BanRequest.reason");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_reason(), target);
  }

  // uint32 admin = 6;
  if (this->admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_admin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.BanRequest)
  return target;
}

size_t BanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.BanRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 3;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string reason = 5;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // uint32 player = 1;
  if (this->player() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player());
  }

  // uint32 character = 2;
  if (this->character() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_character());
  }

  // uint32 time = 4;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_time());
  }

  // uint32 admin = 6;
  if (this->admin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_admin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BanRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.BanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BanRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BanRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.BanRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.BanRequest)
    MergeFrom(*source);
  }
}

void BanRequest::MergeFrom(const BanRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.BanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.reason().size() > 0) {

    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  if (from.player() != 0) {
    _internal_set_player(from._internal_player());
  }
  if (from.character() != 0) {
    _internal_set_character(from._internal_character());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.admin() != 0) {
    _internal_set_admin(from._internal_admin());
  }
}

void BanRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.BanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BanRequest::CopyFrom(const BanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.BanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BanRequest::IsInitialized() const {
  return true;
}

void BanRequest::InternalSwap(BanRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_, other->player_);
  swap(character_, other->character_);
  swap(time_, other->time_);
  swap(admin_, other->admin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BanRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BanResponse::InitAsDefaultInstance() {
}
class BanResponse::_Internal {
 public:
};

BanResponse::BanResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.BanResponse)
}
BanResponse::BanResponse(const BanResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ban_id_ = from.ban_id_;
  // @@protoc_insertion_point(copy_constructor:mruv.economy.BanResponse)
}

void BanResponse::SharedCtor() {
  ban_id_ = 0u;
}

BanResponse::~BanResponse() {
  // @@protoc_insertion_point(destructor:mruv.economy.BanResponse)
  SharedDtor();
}

void BanResponse::SharedDtor() {
}

void BanResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BanResponse& BanResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BanResponse_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void BanResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.BanResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ban_id_ = 0u;
  _internal_metadata_.Clear();
}

const char* BanResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 ban_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ban_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BanResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.BanResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ban_id = 1;
  if (this->ban_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ban_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.BanResponse)
  return target;
}

size_t BanResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.BanResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 ban_id = 1;
  if (this->ban_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ban_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BanResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.BanResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BanResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BanResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.BanResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.BanResponse)
    MergeFrom(*source);
  }
}

void BanResponse::MergeFrom(const BanResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.BanResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ban_id() != 0) {
    _internal_set_ban_id(from._internal_ban_id());
  }
}

void BanResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.BanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BanResponse::CopyFrom(const BanResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.BanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BanResponse::IsInitialized() const {
  return true;
}

void BanResponse::InternalSwap(BanResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ban_id_, other->ban_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BanResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BlockRequest::InitAsDefaultInstance() {
}
class BlockRequest::_Internal {
 public:
};

BlockRequest::BlockRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.BlockRequest)
}
BlockRequest::BlockRequest(const BlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reason().empty()) {
    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  ::memcpy(&character_, &from.character_,
    static_cast<size_t>(reinterpret_cast<char*>(&admin_) -
    reinterpret_cast<char*>(&character_)) + sizeof(admin_));
  // @@protoc_insertion_point(copy_constructor:mruv.economy.BlockRequest)
}

void BlockRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlockRequest_punishments_2fpunishments_2eproto.base);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&character_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&admin_) -
      reinterpret_cast<char*>(&character_)) + sizeof(admin_));
}

BlockRequest::~BlockRequest() {
  // @@protoc_insertion_point(destructor:mruv.economy.BlockRequest)
  SharedDtor();
}

void BlockRequest::SharedDtor() {
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BlockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockRequest& BlockRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlockRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void BlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.BlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&character_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&admin_) -
      reinterpret_cast<char*>(&character_)) + sizeof(admin_));
  _internal_metadata_.Clear();
}

const char* BlockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 character = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          character_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.economy.BlockRequest.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 admin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.BlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 character = 1;
  if (this->character() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_character(), target);
  }

  // string reason = 2;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.economy.BlockRequest.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  // uint32 admin = 3;
  if (this->admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_admin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.BlockRequest)
  return target;
}

size_t BlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.BlockRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 2;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // uint32 character = 1;
  if (this->character() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_character());
  }

  // uint32 admin = 3;
  if (this->admin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_admin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.BlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.BlockRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.BlockRequest)
    MergeFrom(*source);
  }
}

void BlockRequest::MergeFrom(const BlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.BlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason().size() > 0) {

    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  if (from.character() != 0) {
    _internal_set_character(from._internal_character());
  }
  if (from.admin() != 0) {
    _internal_set_admin(from._internal_admin());
  }
}

void BlockRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.BlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockRequest::CopyFrom(const BlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.BlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockRequest::IsInitialized() const {
  return true;
}

void BlockRequest::InternalSwap(BlockRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(character_, other->character_);
  swap(admin_, other->admin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BlockResponse::InitAsDefaultInstance() {
}
class BlockResponse::_Internal {
 public:
};

BlockResponse::BlockResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.BlockResponse)
}
BlockResponse::BlockResponse(const BlockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  block_id_ = from.block_id_;
  // @@protoc_insertion_point(copy_constructor:mruv.economy.BlockResponse)
}

void BlockResponse::SharedCtor() {
  block_id_ = 0u;
}

BlockResponse::~BlockResponse() {
  // @@protoc_insertion_point(destructor:mruv.economy.BlockResponse)
  SharedDtor();
}

void BlockResponse::SharedDtor() {
}

void BlockResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockResponse& BlockResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlockResponse_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void BlockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.BlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_id_ = 0u;
  _internal_metadata_.Clear();
}

const char* BlockResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 block_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          block_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.BlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 block_id = 1;
  if (this->block_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_block_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.BlockResponse)
  return target;
}

size_t BlockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.BlockResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 block_id = 1;
  if (this->block_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_block_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.BlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.BlockResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.BlockResponse)
    MergeFrom(*source);
  }
}

void BlockResponse::MergeFrom(const BlockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.BlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.block_id() != 0) {
    _internal_set_block_id(from._internal_block_id());
  }
}

void BlockResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.BlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockResponse::CopyFrom(const BlockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.BlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockResponse::IsInitialized() const {
  return true;
}

void BlockResponse::InternalSwap(BlockResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(block_id_, other->block_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WarnRequest::InitAsDefaultInstance() {
}
class WarnRequest::_Internal {
 public:
};

WarnRequest::WarnRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.WarnRequest)
}
WarnRequest::WarnRequest(const WarnRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reason().empty()) {
    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  ::memcpy(&player_, &from.player_,
    static_cast<size_t>(reinterpret_cast<char*>(&admin_) -
    reinterpret_cast<char*>(&player_)) + sizeof(admin_));
  // @@protoc_insertion_point(copy_constructor:mruv.economy.WarnRequest)
}

void WarnRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WarnRequest_punishments_2fpunishments_2eproto.base);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&admin_) -
      reinterpret_cast<char*>(&player_)) + sizeof(admin_));
}

WarnRequest::~WarnRequest() {
  // @@protoc_insertion_point(destructor:mruv.economy.WarnRequest)
  SharedDtor();
}

void WarnRequest::SharedDtor() {
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WarnRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WarnRequest& WarnRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WarnRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void WarnRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.WarnRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&admin_) -
      reinterpret_cast<char*>(&player_)) + sizeof(admin_));
  _internal_metadata_.Clear();
}

const char* WarnRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 character = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          character_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reason = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.economy.WarnRequest.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 admin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WarnRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.WarnRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player = 1;
  if (this->player() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player(), target);
  }

  // uint32 character = 2;
  if (this->character() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_character(), target);
  }

  // uint32 time = 3;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_time(), target);
  }

  // string reason = 4;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.economy.WarnRequest.reason");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_reason(), target);
  }

  // uint32 admin = 5;
  if (this->admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_admin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.WarnRequest)
  return target;
}

size_t WarnRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.WarnRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 4;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // uint32 player = 1;
  if (this->player() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player());
  }

  // uint32 character = 2;
  if (this->character() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_character());
  }

  // uint32 time = 3;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_time());
  }

  // uint32 admin = 5;
  if (this->admin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_admin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WarnRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.WarnRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WarnRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WarnRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.WarnRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.WarnRequest)
    MergeFrom(*source);
  }
}

void WarnRequest::MergeFrom(const WarnRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.WarnRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason().size() > 0) {

    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  if (from.player() != 0) {
    _internal_set_player(from._internal_player());
  }
  if (from.character() != 0) {
    _internal_set_character(from._internal_character());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.admin() != 0) {
    _internal_set_admin(from._internal_admin());
  }
}

void WarnRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.WarnRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarnRequest::CopyFrom(const WarnRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.WarnRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarnRequest::IsInitialized() const {
  return true;
}

void WarnRequest::InternalSwap(WarnRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_, other->player_);
  swap(character_, other->character_);
  swap(time_, other->time_);
  swap(admin_, other->admin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WarnRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WarnResponse::InitAsDefaultInstance() {
}
class WarnResponse::_Internal {
 public:
};

WarnResponse::WarnResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.WarnResponse)
}
WarnResponse::WarnResponse(const WarnResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  warn_id_ = from.warn_id_;
  // @@protoc_insertion_point(copy_constructor:mruv.economy.WarnResponse)
}

void WarnResponse::SharedCtor() {
  warn_id_ = 0u;
}

WarnResponse::~WarnResponse() {
  // @@protoc_insertion_point(destructor:mruv.economy.WarnResponse)
  SharedDtor();
}

void WarnResponse::SharedDtor() {
}

void WarnResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WarnResponse& WarnResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WarnResponse_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void WarnResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.WarnResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  warn_id_ = 0u;
  _internal_metadata_.Clear();
}

const char* WarnResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 warn_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          warn_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WarnResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.WarnResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 warn_id = 1;
  if (this->warn_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_warn_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.WarnResponse)
  return target;
}

size_t WarnResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.WarnResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 warn_id = 1;
  if (this->warn_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_warn_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WarnResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.WarnResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const WarnResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WarnResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.WarnResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.WarnResponse)
    MergeFrom(*source);
  }
}

void WarnResponse::MergeFrom(const WarnResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.WarnResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.warn_id() != 0) {
    _internal_set_warn_id(from._internal_warn_id());
  }
}

void WarnResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.WarnResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarnResponse::CopyFrom(const WarnResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.WarnResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarnResponse::IsInitialized() const {
  return true;
}

void WarnResponse::InternalSwap(WarnResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(warn_id_, other->warn_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WarnResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AdminJailRequest::InitAsDefaultInstance() {
}
class AdminJailRequest::_Internal {
 public:
};

AdminJailRequest::AdminJailRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.AdminJailRequest)
}
AdminJailRequest::AdminJailRequest(const AdminJailRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reason().empty()) {
    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  ::memcpy(&character_, &from.character_,
    static_cast<size_t>(reinterpret_cast<char*>(&admin_) -
    reinterpret_cast<char*>(&character_)) + sizeof(admin_));
  // @@protoc_insertion_point(copy_constructor:mruv.economy.AdminJailRequest)
}

void AdminJailRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AdminJailRequest_punishments_2fpunishments_2eproto.base);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&character_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&admin_) -
      reinterpret_cast<char*>(&character_)) + sizeof(admin_));
}

AdminJailRequest::~AdminJailRequest() {
  // @@protoc_insertion_point(destructor:mruv.economy.AdminJailRequest)
  SharedDtor();
}

void AdminJailRequest::SharedDtor() {
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AdminJailRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdminJailRequest& AdminJailRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdminJailRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void AdminJailRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.AdminJailRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&character_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&admin_) -
      reinterpret_cast<char*>(&character_)) + sizeof(admin_));
  _internal_metadata_.Clear();
}

const char* AdminJailRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 character = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          character_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.economy.AdminJailRequest.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 admin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdminJailRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.AdminJailRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 character = 1;
  if (this->character() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_character(), target);
  }

  // uint32 time = 2;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_time(), target);
  }

  // string reason = 3;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.economy.AdminJailRequest.reason");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_reason(), target);
  }

  // uint32 admin = 4;
  if (this->admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_admin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.AdminJailRequest)
  return target;
}

size_t AdminJailRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.AdminJailRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 3;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // uint32 character = 1;
  if (this->character() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_character());
  }

  // uint32 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_time());
  }

  // uint32 admin = 4;
  if (this->admin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_admin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdminJailRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.AdminJailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AdminJailRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdminJailRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.AdminJailRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.AdminJailRequest)
    MergeFrom(*source);
  }
}

void AdminJailRequest::MergeFrom(const AdminJailRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.AdminJailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason().size() > 0) {

    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  if (from.character() != 0) {
    _internal_set_character(from._internal_character());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.admin() != 0) {
    _internal_set_admin(from._internal_admin());
  }
}

void AdminJailRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.AdminJailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdminJailRequest::CopyFrom(const AdminJailRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.AdminJailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminJailRequest::IsInitialized() const {
  return true;
}

void AdminJailRequest::InternalSwap(AdminJailRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(character_, other->character_);
  swap(time_, other->time_);
  swap(admin_, other->admin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdminJailRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AdminJailResponse::InitAsDefaultInstance() {
}
class AdminJailResponse::_Internal {
 public:
};

AdminJailResponse::AdminJailResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.AdminJailResponse)
}
AdminJailResponse::AdminJailResponse(const AdminJailResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.economy.AdminJailResponse)
}

void AdminJailResponse::SharedCtor() {
}

AdminJailResponse::~AdminJailResponse() {
  // @@protoc_insertion_point(destructor:mruv.economy.AdminJailResponse)
  SharedDtor();
}

void AdminJailResponse::SharedDtor() {
}

void AdminJailResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdminJailResponse& AdminJailResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdminJailResponse_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void AdminJailResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.AdminJailResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* AdminJailResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdminJailResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.AdminJailResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.AdminJailResponse)
  return target;
}

size_t AdminJailResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.AdminJailResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdminJailResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.AdminJailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AdminJailResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdminJailResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.AdminJailResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.AdminJailResponse)
    MergeFrom(*source);
  }
}

void AdminJailResponse::MergeFrom(const AdminJailResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.AdminJailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AdminJailResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.AdminJailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdminJailResponse::CopyFrom(const AdminJailResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.AdminJailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminJailResponse::IsInitialized() const {
  return true;
}

void AdminJailResponse::InternalSwap(AdminJailResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdminJailResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MuteGlobalChatsRequest::InitAsDefaultInstance() {
}
class MuteGlobalChatsRequest::_Internal {
 public:
};

MuteGlobalChatsRequest::MuteGlobalChatsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.MuteGlobalChatsRequest)
}
MuteGlobalChatsRequest::MuteGlobalChatsRequest(const MuteGlobalChatsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_ = from.account_;
  // @@protoc_insertion_point(copy_constructor:mruv.economy.MuteGlobalChatsRequest)
}

void MuteGlobalChatsRequest::SharedCtor() {
  account_ = 0u;
}

MuteGlobalChatsRequest::~MuteGlobalChatsRequest() {
  // @@protoc_insertion_point(destructor:mruv.economy.MuteGlobalChatsRequest)
  SharedDtor();
}

void MuteGlobalChatsRequest::SharedDtor() {
}

void MuteGlobalChatsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MuteGlobalChatsRequest& MuteGlobalChatsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MuteGlobalChatsRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void MuteGlobalChatsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.MuteGlobalChatsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_ = 0u;
  _internal_metadata_.Clear();
}

const char* MuteGlobalChatsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          account_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MuteGlobalChatsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.MuteGlobalChatsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 account = 1;
  if (this->account() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.MuteGlobalChatsRequest)
  return target;
}

size_t MuteGlobalChatsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.MuteGlobalChatsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 account = 1;
  if (this->account() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_account());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MuteGlobalChatsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.MuteGlobalChatsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MuteGlobalChatsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MuteGlobalChatsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.MuteGlobalChatsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.MuteGlobalChatsRequest)
    MergeFrom(*source);
  }
}

void MuteGlobalChatsRequest::MergeFrom(const MuteGlobalChatsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.MuteGlobalChatsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account() != 0) {
    _internal_set_account(from._internal_account());
  }
}

void MuteGlobalChatsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.MuteGlobalChatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MuteGlobalChatsRequest::CopyFrom(const MuteGlobalChatsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.MuteGlobalChatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MuteGlobalChatsRequest::IsInitialized() const {
  return true;
}

void MuteGlobalChatsRequest::InternalSwap(MuteGlobalChatsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(account_, other->account_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MuteGlobalChatsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MuteGlobalChatsResponse::InitAsDefaultInstance() {
}
class MuteGlobalChatsResponse::_Internal {
 public:
};

MuteGlobalChatsResponse::MuteGlobalChatsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.MuteGlobalChatsResponse)
}
MuteGlobalChatsResponse::MuteGlobalChatsResponse(const MuteGlobalChatsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.economy.MuteGlobalChatsResponse)
}

void MuteGlobalChatsResponse::SharedCtor() {
}

MuteGlobalChatsResponse::~MuteGlobalChatsResponse() {
  // @@protoc_insertion_point(destructor:mruv.economy.MuteGlobalChatsResponse)
  SharedDtor();
}

void MuteGlobalChatsResponse::SharedDtor() {
}

void MuteGlobalChatsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MuteGlobalChatsResponse& MuteGlobalChatsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MuteGlobalChatsResponse_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void MuteGlobalChatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.MuteGlobalChatsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* MuteGlobalChatsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MuteGlobalChatsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.MuteGlobalChatsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.MuteGlobalChatsResponse)
  return target;
}

size_t MuteGlobalChatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.MuteGlobalChatsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MuteGlobalChatsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.MuteGlobalChatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MuteGlobalChatsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MuteGlobalChatsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.MuteGlobalChatsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.MuteGlobalChatsResponse)
    MergeFrom(*source);
  }
}

void MuteGlobalChatsResponse::MergeFrom(const MuteGlobalChatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.MuteGlobalChatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MuteGlobalChatsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.MuteGlobalChatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MuteGlobalChatsResponse::CopyFrom(const MuteGlobalChatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.MuteGlobalChatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MuteGlobalChatsResponse::IsInitialized() const {
  return true;
}

void MuteGlobalChatsResponse::InternalSwap(MuteGlobalChatsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MuteGlobalChatsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnBanRequest::InitAsDefaultInstance() {
}
class UnBanRequest::_Internal {
 public:
};

UnBanRequest::UnBanRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.UnBanRequest)
}
UnBanRequest::UnBanRequest(const UnBanRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ban_id_ = from.ban_id_;
  // @@protoc_insertion_point(copy_constructor:mruv.economy.UnBanRequest)
}

void UnBanRequest::SharedCtor() {
  ban_id_ = 0u;
}

UnBanRequest::~UnBanRequest() {
  // @@protoc_insertion_point(destructor:mruv.economy.UnBanRequest)
  SharedDtor();
}

void UnBanRequest::SharedDtor() {
}

void UnBanRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnBanRequest& UnBanRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnBanRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void UnBanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.UnBanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ban_id_ = 0u;
  _internal_metadata_.Clear();
}

const char* UnBanRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 ban_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ban_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnBanRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.UnBanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ban_id = 2;
  if (this->ban_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ban_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.UnBanRequest)
  return target;
}

size_t UnBanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.UnBanRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 ban_id = 2;
  if (this->ban_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ban_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnBanRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.UnBanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnBanRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnBanRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.UnBanRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.UnBanRequest)
    MergeFrom(*source);
  }
}

void UnBanRequest::MergeFrom(const UnBanRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.UnBanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ban_id() != 0) {
    _internal_set_ban_id(from._internal_ban_id());
  }
}

void UnBanRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.UnBanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnBanRequest::CopyFrom(const UnBanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.UnBanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnBanRequest::IsInitialized() const {
  return true;
}

void UnBanRequest::InternalSwap(UnBanRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ban_id_, other->ban_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnBanRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnBanResponse::InitAsDefaultInstance() {
}
class UnBanResponse::_Internal {
 public:
};

UnBanResponse::UnBanResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.UnBanResponse)
}
UnBanResponse::UnBanResponse(const UnBanResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.economy.UnBanResponse)
}

void UnBanResponse::SharedCtor() {
}

UnBanResponse::~UnBanResponse() {
  // @@protoc_insertion_point(destructor:mruv.economy.UnBanResponse)
  SharedDtor();
}

void UnBanResponse::SharedDtor() {
}

void UnBanResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnBanResponse& UnBanResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnBanResponse_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void UnBanResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.UnBanResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* UnBanResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnBanResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.UnBanResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.UnBanResponse)
  return target;
}

size_t UnBanResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.UnBanResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnBanResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.UnBanResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UnBanResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnBanResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.UnBanResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.UnBanResponse)
    MergeFrom(*source);
  }
}

void UnBanResponse::MergeFrom(const UnBanResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.UnBanResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UnBanResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.UnBanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnBanResponse::CopyFrom(const UnBanResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.UnBanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnBanResponse::IsInitialized() const {
  return true;
}

void UnBanResponse::InternalSwap(UnBanResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnBanResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnWarnRequest::InitAsDefaultInstance() {
}
class UnWarnRequest::_Internal {
 public:
};

UnWarnRequest::UnWarnRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.UnWarnRequest)
}
UnWarnRequest::UnWarnRequest(const UnWarnRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  warn_id_ = from.warn_id_;
  // @@protoc_insertion_point(copy_constructor:mruv.economy.UnWarnRequest)
}

void UnWarnRequest::SharedCtor() {
  warn_id_ = 0u;
}

UnWarnRequest::~UnWarnRequest() {
  // @@protoc_insertion_point(destructor:mruv.economy.UnWarnRequest)
  SharedDtor();
}

void UnWarnRequest::SharedDtor() {
}

void UnWarnRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnWarnRequest& UnWarnRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnWarnRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void UnWarnRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.UnWarnRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  warn_id_ = 0u;
  _internal_metadata_.Clear();
}

const char* UnWarnRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 warn_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          warn_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnWarnRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.UnWarnRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 warn_id = 2;
  if (this->warn_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_warn_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.UnWarnRequest)
  return target;
}

size_t UnWarnRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.UnWarnRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 warn_id = 2;
  if (this->warn_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_warn_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnWarnRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.UnWarnRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnWarnRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnWarnRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.UnWarnRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.UnWarnRequest)
    MergeFrom(*source);
  }
}

void UnWarnRequest::MergeFrom(const UnWarnRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.UnWarnRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.warn_id() != 0) {
    _internal_set_warn_id(from._internal_warn_id());
  }
}

void UnWarnRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.UnWarnRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnWarnRequest::CopyFrom(const UnWarnRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.UnWarnRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnWarnRequest::IsInitialized() const {
  return true;
}

void UnWarnRequest::InternalSwap(UnWarnRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(warn_id_, other->warn_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnWarnRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnWarnResponse::InitAsDefaultInstance() {
}
class UnWarnResponse::_Internal {
 public:
};

UnWarnResponse::UnWarnResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.UnWarnResponse)
}
UnWarnResponse::UnWarnResponse(const UnWarnResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.economy.UnWarnResponse)
}

void UnWarnResponse::SharedCtor() {
}

UnWarnResponse::~UnWarnResponse() {
  // @@protoc_insertion_point(destructor:mruv.economy.UnWarnResponse)
  SharedDtor();
}

void UnWarnResponse::SharedDtor() {
}

void UnWarnResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnWarnResponse& UnWarnResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnWarnResponse_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void UnWarnResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.UnWarnResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* UnWarnResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnWarnResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.UnWarnResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.UnWarnResponse)
  return target;
}

size_t UnWarnResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.UnWarnResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnWarnResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.UnWarnResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UnWarnResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnWarnResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.UnWarnResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.UnWarnResponse)
    MergeFrom(*source);
  }
}

void UnWarnResponse::MergeFrom(const UnWarnResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.UnWarnResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UnWarnResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.UnWarnResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnWarnResponse::CopyFrom(const UnWarnResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.UnWarnResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnWarnResponse::IsInitialized() const {
  return true;
}

void UnWarnResponse::InternalSwap(UnWarnResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnWarnResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnAdminJailRequest::InitAsDefaultInstance() {
}
class UnAdminJailRequest::_Internal {
 public:
};

UnAdminJailRequest::UnAdminJailRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.UnAdminJailRequest)
}
UnAdminJailRequest::UnAdminJailRequest(const UnAdminJailRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  character_ = from.character_;
  // @@protoc_insertion_point(copy_constructor:mruv.economy.UnAdminJailRequest)
}

void UnAdminJailRequest::SharedCtor() {
  character_ = 0u;
}

UnAdminJailRequest::~UnAdminJailRequest() {
  // @@protoc_insertion_point(destructor:mruv.economy.UnAdminJailRequest)
  SharedDtor();
}

void UnAdminJailRequest::SharedDtor() {
}

void UnAdminJailRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnAdminJailRequest& UnAdminJailRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnAdminJailRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void UnAdminJailRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.UnAdminJailRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  character_ = 0u;
  _internal_metadata_.Clear();
}

const char* UnAdminJailRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 character = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          character_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnAdminJailRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.UnAdminJailRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 character = 1;
  if (this->character() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_character(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.UnAdminJailRequest)
  return target;
}

size_t UnAdminJailRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.UnAdminJailRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 character = 1;
  if (this->character() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_character());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnAdminJailRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.UnAdminJailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnAdminJailRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnAdminJailRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.UnAdminJailRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.UnAdminJailRequest)
    MergeFrom(*source);
  }
}

void UnAdminJailRequest::MergeFrom(const UnAdminJailRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.UnAdminJailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.character() != 0) {
    _internal_set_character(from._internal_character());
  }
}

void UnAdminJailRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.UnAdminJailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnAdminJailRequest::CopyFrom(const UnAdminJailRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.UnAdminJailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnAdminJailRequest::IsInitialized() const {
  return true;
}

void UnAdminJailRequest::InternalSwap(UnAdminJailRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(character_, other->character_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnAdminJailRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnAdminJailResponse::InitAsDefaultInstance() {
}
class UnAdminJailResponse::_Internal {
 public:
};

UnAdminJailResponse::UnAdminJailResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.UnAdminJailResponse)
}
UnAdminJailResponse::UnAdminJailResponse(const UnAdminJailResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.economy.UnAdminJailResponse)
}

void UnAdminJailResponse::SharedCtor() {
}

UnAdminJailResponse::~UnAdminJailResponse() {
  // @@protoc_insertion_point(destructor:mruv.economy.UnAdminJailResponse)
  SharedDtor();
}

void UnAdminJailResponse::SharedDtor() {
}

void UnAdminJailResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnAdminJailResponse& UnAdminJailResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnAdminJailResponse_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void UnAdminJailResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.UnAdminJailResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* UnAdminJailResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnAdminJailResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.UnAdminJailResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.UnAdminJailResponse)
  return target;
}

size_t UnAdminJailResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.UnAdminJailResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnAdminJailResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.UnAdminJailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UnAdminJailResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnAdminJailResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.UnAdminJailResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.UnAdminJailResponse)
    MergeFrom(*source);
  }
}

void UnAdminJailResponse::MergeFrom(const UnAdminJailResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.UnAdminJailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UnAdminJailResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.UnAdminJailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnAdminJailResponse::CopyFrom(const UnAdminJailResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.UnAdminJailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnAdminJailResponse::IsInitialized() const {
  return true;
}

void UnAdminJailResponse::InternalSwap(UnAdminJailResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnAdminJailResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnMuteGlobalChatsRequest::InitAsDefaultInstance() {
}
class UnMuteGlobalChatsRequest::_Internal {
 public:
};

UnMuteGlobalChatsRequest::UnMuteGlobalChatsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.UnMuteGlobalChatsRequest)
}
UnMuteGlobalChatsRequest::UnMuteGlobalChatsRequest(const UnMuteGlobalChatsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_ = from.account_;
  // @@protoc_insertion_point(copy_constructor:mruv.economy.UnMuteGlobalChatsRequest)
}

void UnMuteGlobalChatsRequest::SharedCtor() {
  account_ = 0u;
}

UnMuteGlobalChatsRequest::~UnMuteGlobalChatsRequest() {
  // @@protoc_insertion_point(destructor:mruv.economy.UnMuteGlobalChatsRequest)
  SharedDtor();
}

void UnMuteGlobalChatsRequest::SharedDtor() {
}

void UnMuteGlobalChatsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnMuteGlobalChatsRequest& UnMuteGlobalChatsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnMuteGlobalChatsRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void UnMuteGlobalChatsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.UnMuteGlobalChatsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_ = 0u;
  _internal_metadata_.Clear();
}

const char* UnMuteGlobalChatsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          account_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnMuteGlobalChatsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.UnMuteGlobalChatsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 account = 1;
  if (this->account() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.UnMuteGlobalChatsRequest)
  return target;
}

size_t UnMuteGlobalChatsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.UnMuteGlobalChatsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 account = 1;
  if (this->account() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_account());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnMuteGlobalChatsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.UnMuteGlobalChatsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnMuteGlobalChatsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnMuteGlobalChatsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.UnMuteGlobalChatsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.UnMuteGlobalChatsRequest)
    MergeFrom(*source);
  }
}

void UnMuteGlobalChatsRequest::MergeFrom(const UnMuteGlobalChatsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.UnMuteGlobalChatsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account() != 0) {
    _internal_set_account(from._internal_account());
  }
}

void UnMuteGlobalChatsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.UnMuteGlobalChatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnMuteGlobalChatsRequest::CopyFrom(const UnMuteGlobalChatsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.UnMuteGlobalChatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnMuteGlobalChatsRequest::IsInitialized() const {
  return true;
}

void UnMuteGlobalChatsRequest::InternalSwap(UnMuteGlobalChatsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(account_, other->account_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnMuteGlobalChatsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnMuteGlobalChatsResponse::InitAsDefaultInstance() {
}
class UnMuteGlobalChatsResponse::_Internal {
 public:
};

UnMuteGlobalChatsResponse::UnMuteGlobalChatsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.UnMuteGlobalChatsResponse)
}
UnMuteGlobalChatsResponse::UnMuteGlobalChatsResponse(const UnMuteGlobalChatsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.economy.UnMuteGlobalChatsResponse)
}

void UnMuteGlobalChatsResponse::SharedCtor() {
}

UnMuteGlobalChatsResponse::~UnMuteGlobalChatsResponse() {
  // @@protoc_insertion_point(destructor:mruv.economy.UnMuteGlobalChatsResponse)
  SharedDtor();
}

void UnMuteGlobalChatsResponse::SharedDtor() {
}

void UnMuteGlobalChatsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnMuteGlobalChatsResponse& UnMuteGlobalChatsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnMuteGlobalChatsResponse_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void UnMuteGlobalChatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.UnMuteGlobalChatsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* UnMuteGlobalChatsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnMuteGlobalChatsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.UnMuteGlobalChatsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.UnMuteGlobalChatsResponse)
  return target;
}

size_t UnMuteGlobalChatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.UnMuteGlobalChatsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnMuteGlobalChatsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.UnMuteGlobalChatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UnMuteGlobalChatsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnMuteGlobalChatsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.UnMuteGlobalChatsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.UnMuteGlobalChatsResponse)
    MergeFrom(*source);
  }
}

void UnMuteGlobalChatsResponse::MergeFrom(const UnMuteGlobalChatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.UnMuteGlobalChatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UnMuteGlobalChatsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.UnMuteGlobalChatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnMuteGlobalChatsResponse::CopyFrom(const UnMuteGlobalChatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.UnMuteGlobalChatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnMuteGlobalChatsResponse::IsInitialized() const {
  return true;
}

void UnMuteGlobalChatsResponse::InternalSwap(UnMuteGlobalChatsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnMuteGlobalChatsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPlayerBansRequest::InitAsDefaultInstance() {
}
class GetPlayerBansRequest::_Internal {
 public:
};

GetPlayerBansRequest::GetPlayerBansRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.GetPlayerBansRequest)
}
GetPlayerBansRequest::GetPlayerBansRequest(const GetPlayerBansRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  player_ = from.player_;
  // @@protoc_insertion_point(copy_constructor:mruv.economy.GetPlayerBansRequest)
}

void GetPlayerBansRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetPlayerBansRequest_punishments_2fpunishments_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_ = 0u;
}

GetPlayerBansRequest::~GetPlayerBansRequest() {
  // @@protoc_insertion_point(destructor:mruv.economy.GetPlayerBansRequest)
  SharedDtor();
}

void GetPlayerBansRequest::SharedDtor() {
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetPlayerBansRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPlayerBansRequest& GetPlayerBansRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPlayerBansRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void GetPlayerBansRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.GetPlayerBansRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_ = 0u;
  _internal_metadata_.Clear();
}

const char* GetPlayerBansRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.economy.GetPlayerBansRequest.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPlayerBansRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.GetPlayerBansRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player = 1;
  if (this->player() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player(), target);
  }

  // string ip = 2;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.economy.GetPlayerBansRequest.ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.GetPlayerBansRequest)
  return target;
}

size_t GetPlayerBansRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.GetPlayerBansRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 2;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // uint32 player = 1;
  if (this->player() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPlayerBansRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.GetPlayerBansRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPlayerBansRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPlayerBansRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.GetPlayerBansRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.GetPlayerBansRequest)
    MergeFrom(*source);
  }
}

void GetPlayerBansRequest::MergeFrom(const GetPlayerBansRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.GetPlayerBansRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.player() != 0) {
    _internal_set_player(from._internal_player());
  }
}

void GetPlayerBansRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.GetPlayerBansRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPlayerBansRequest::CopyFrom(const GetPlayerBansRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.GetPlayerBansRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPlayerBansRequest::IsInitialized() const {
  return true;
}

void GetPlayerBansRequest::InternalSwap(GetPlayerBansRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_, other->player_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPlayerBansRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPlayerBansResponse::InitAsDefaultInstance() {
}
class GetPlayerBansResponse::_Internal {
 public:
};

GetPlayerBansResponse::GetPlayerBansResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.GetPlayerBansResponse)
}
GetPlayerBansResponse::GetPlayerBansResponse(const GetPlayerBansResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      bans_(from.bans_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.economy.GetPlayerBansResponse)
}

void GetPlayerBansResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetPlayerBansResponse_punishments_2fpunishments_2eproto.base);
}

GetPlayerBansResponse::~GetPlayerBansResponse() {
  // @@protoc_insertion_point(destructor:mruv.economy.GetPlayerBansResponse)
  SharedDtor();
}

void GetPlayerBansResponse::SharedDtor() {
}

void GetPlayerBansResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPlayerBansResponse& GetPlayerBansResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPlayerBansResponse_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void GetPlayerBansResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.GetPlayerBansResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bans_.Clear();
  _internal_metadata_.Clear();
}

const char* GetPlayerBansResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mruv.economy.BanMessage bans = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bans(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPlayerBansResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.GetPlayerBansResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mruv.economy.BanMessage bans = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bans_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_bans(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.GetPlayerBansResponse)
  return target;
}

size_t GetPlayerBansResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.GetPlayerBansResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mruv.economy.BanMessage bans = 1;
  total_size += 1UL * this->_internal_bans_size();
  for (const auto& msg : this->bans_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPlayerBansResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.GetPlayerBansResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPlayerBansResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPlayerBansResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.GetPlayerBansResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.GetPlayerBansResponse)
    MergeFrom(*source);
  }
}

void GetPlayerBansResponse::MergeFrom(const GetPlayerBansResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.GetPlayerBansResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bans_.MergeFrom(from.bans_);
}

void GetPlayerBansResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.GetPlayerBansResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPlayerBansResponse::CopyFrom(const GetPlayerBansResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.GetPlayerBansResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPlayerBansResponse::IsInitialized() const {
  return true;
}

void GetPlayerBansResponse::InternalSwap(GetPlayerBansResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  bans_.InternalSwap(&other->bans_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPlayerBansResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPlayerWarnsRequest::InitAsDefaultInstance() {
}
class GetPlayerWarnsRequest::_Internal {
 public:
};

GetPlayerWarnsRequest::GetPlayerWarnsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.GetPlayerWarnsRequest)
}
GetPlayerWarnsRequest::GetPlayerWarnsRequest(const GetPlayerWarnsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_ = from.player_;
  // @@protoc_insertion_point(copy_constructor:mruv.economy.GetPlayerWarnsRequest)
}

void GetPlayerWarnsRequest::SharedCtor() {
  player_ = 0u;
}

GetPlayerWarnsRequest::~GetPlayerWarnsRequest() {
  // @@protoc_insertion_point(destructor:mruv.economy.GetPlayerWarnsRequest)
  SharedDtor();
}

void GetPlayerWarnsRequest::SharedDtor() {
}

void GetPlayerWarnsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPlayerWarnsRequest& GetPlayerWarnsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPlayerWarnsRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void GetPlayerWarnsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.GetPlayerWarnsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_ = 0u;
  _internal_metadata_.Clear();
}

const char* GetPlayerWarnsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPlayerWarnsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.GetPlayerWarnsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player = 1;
  if (this->player() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.GetPlayerWarnsRequest)
  return target;
}

size_t GetPlayerWarnsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.GetPlayerWarnsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 player = 1;
  if (this->player() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPlayerWarnsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.GetPlayerWarnsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPlayerWarnsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPlayerWarnsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.GetPlayerWarnsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.GetPlayerWarnsRequest)
    MergeFrom(*source);
  }
}

void GetPlayerWarnsRequest::MergeFrom(const GetPlayerWarnsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.GetPlayerWarnsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player() != 0) {
    _internal_set_player(from._internal_player());
  }
}

void GetPlayerWarnsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.GetPlayerWarnsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPlayerWarnsRequest::CopyFrom(const GetPlayerWarnsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.GetPlayerWarnsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPlayerWarnsRequest::IsInitialized() const {
  return true;
}

void GetPlayerWarnsRequest::InternalSwap(GetPlayerWarnsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(player_, other->player_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPlayerWarnsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPlayerWarnsResponse::InitAsDefaultInstance() {
}
class GetPlayerWarnsResponse::_Internal {
 public:
};

GetPlayerWarnsResponse::GetPlayerWarnsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.GetPlayerWarnsResponse)
}
GetPlayerWarnsResponse::GetPlayerWarnsResponse(const GetPlayerWarnsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      warns_(from.warns_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.economy.GetPlayerWarnsResponse)
}

void GetPlayerWarnsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetPlayerWarnsResponse_punishments_2fpunishments_2eproto.base);
}

GetPlayerWarnsResponse::~GetPlayerWarnsResponse() {
  // @@protoc_insertion_point(destructor:mruv.economy.GetPlayerWarnsResponse)
  SharedDtor();
}

void GetPlayerWarnsResponse::SharedDtor() {
}

void GetPlayerWarnsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPlayerWarnsResponse& GetPlayerWarnsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPlayerWarnsResponse_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void GetPlayerWarnsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.GetPlayerWarnsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  warns_.Clear();
  _internal_metadata_.Clear();
}

const char* GetPlayerWarnsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mruv.economy.WarnMessage warns = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_warns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPlayerWarnsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.GetPlayerWarnsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mruv.economy.WarnMessage warns = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_warns_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_warns(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.GetPlayerWarnsResponse)
  return target;
}

size_t GetPlayerWarnsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.GetPlayerWarnsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mruv.economy.WarnMessage warns = 1;
  total_size += 1UL * this->_internal_warns_size();
  for (const auto& msg : this->warns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPlayerWarnsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.GetPlayerWarnsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPlayerWarnsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPlayerWarnsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.GetPlayerWarnsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.GetPlayerWarnsResponse)
    MergeFrom(*source);
  }
}

void GetPlayerWarnsResponse::MergeFrom(const GetPlayerWarnsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.GetPlayerWarnsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  warns_.MergeFrom(from.warns_);
}

void GetPlayerWarnsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.GetPlayerWarnsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPlayerWarnsResponse::CopyFrom(const GetPlayerWarnsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.GetPlayerWarnsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPlayerWarnsResponse::IsInitialized() const {
  return true;
}

void GetPlayerWarnsResponse::InternalSwap(GetPlayerWarnsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  warns_.InternalSwap(&other->warns_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPlayerWarnsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPlayerAdminJailRequest::InitAsDefaultInstance() {
}
class GetPlayerAdminJailRequest::_Internal {
 public:
};

GetPlayerAdminJailRequest::GetPlayerAdminJailRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.GetPlayerAdminJailRequest)
}
GetPlayerAdminJailRequest::GetPlayerAdminJailRequest(const GetPlayerAdminJailRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  character_ = from.character_;
  // @@protoc_insertion_point(copy_constructor:mruv.economy.GetPlayerAdminJailRequest)
}

void GetPlayerAdminJailRequest::SharedCtor() {
  character_ = 0u;
}

GetPlayerAdminJailRequest::~GetPlayerAdminJailRequest() {
  // @@protoc_insertion_point(destructor:mruv.economy.GetPlayerAdminJailRequest)
  SharedDtor();
}

void GetPlayerAdminJailRequest::SharedDtor() {
}

void GetPlayerAdminJailRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPlayerAdminJailRequest& GetPlayerAdminJailRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPlayerAdminJailRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void GetPlayerAdminJailRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.GetPlayerAdminJailRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  character_ = 0u;
  _internal_metadata_.Clear();
}

const char* GetPlayerAdminJailRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 character = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          character_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPlayerAdminJailRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.GetPlayerAdminJailRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 character = 1;
  if (this->character() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_character(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.GetPlayerAdminJailRequest)
  return target;
}

size_t GetPlayerAdminJailRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.GetPlayerAdminJailRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 character = 1;
  if (this->character() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_character());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPlayerAdminJailRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.GetPlayerAdminJailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPlayerAdminJailRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPlayerAdminJailRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.GetPlayerAdminJailRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.GetPlayerAdminJailRequest)
    MergeFrom(*source);
  }
}

void GetPlayerAdminJailRequest::MergeFrom(const GetPlayerAdminJailRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.GetPlayerAdminJailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.character() != 0) {
    _internal_set_character(from._internal_character());
  }
}

void GetPlayerAdminJailRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.GetPlayerAdminJailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPlayerAdminJailRequest::CopyFrom(const GetPlayerAdminJailRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.GetPlayerAdminJailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPlayerAdminJailRequest::IsInitialized() const {
  return true;
}

void GetPlayerAdminJailRequest::InternalSwap(GetPlayerAdminJailRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(character_, other->character_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPlayerAdminJailRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPlayerAdminJailResponse::InitAsDefaultInstance() {
}
class GetPlayerAdminJailResponse::_Internal {
 public:
};

GetPlayerAdminJailResponse::GetPlayerAdminJailResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.GetPlayerAdminJailResponse)
}
GetPlayerAdminJailResponse::GetPlayerAdminJailResponse(const GetPlayerAdminJailResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reason().empty()) {
    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  ::memcpy(&jail_time_, &from.jail_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&date_) -
    reinterpret_cast<char*>(&jail_time_)) + sizeof(date_));
  // @@protoc_insertion_point(copy_constructor:mruv.economy.GetPlayerAdminJailResponse)
}

void GetPlayerAdminJailResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetPlayerAdminJailResponse_punishments_2fpunishments_2eproto.base);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&jail_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&date_) -
      reinterpret_cast<char*>(&jail_time_)) + sizeof(date_));
}

GetPlayerAdminJailResponse::~GetPlayerAdminJailResponse() {
  // @@protoc_insertion_point(destructor:mruv.economy.GetPlayerAdminJailResponse)
  SharedDtor();
}

void GetPlayerAdminJailResponse::SharedDtor() {
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetPlayerAdminJailResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPlayerAdminJailResponse& GetPlayerAdminJailResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPlayerAdminJailResponse_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void GetPlayerAdminJailResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.GetPlayerAdminJailResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&jail_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&date_) -
      reinterpret_cast<char*>(&jail_time_)) + sizeof(date_));
  _internal_metadata_.Clear();
}

const char* GetPlayerAdminJailResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 jail_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          jail_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.economy.GetPlayerAdminJailResponse.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 admin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 date = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPlayerAdminJailResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.GetPlayerAdminJailResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 jail_time = 1;
  if (this->jail_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_jail_time(), target);
  }

  // string reason = 2;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.economy.GetPlayerAdminJailResponse.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  // uint32 admin = 3;
  if (this->admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_admin(), target);
  }

  // int64 date = 4;
  if (this->date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_date(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.GetPlayerAdminJailResponse)
  return target;
}

size_t GetPlayerAdminJailResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.GetPlayerAdminJailResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 2;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // uint32 jail_time = 1;
  if (this->jail_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_jail_time());
  }

  // uint32 admin = 3;
  if (this->admin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_admin());
  }

  // int64 date = 4;
  if (this->date() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_date());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPlayerAdminJailResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.GetPlayerAdminJailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPlayerAdminJailResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPlayerAdminJailResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.GetPlayerAdminJailResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.GetPlayerAdminJailResponse)
    MergeFrom(*source);
  }
}

void GetPlayerAdminJailResponse::MergeFrom(const GetPlayerAdminJailResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.GetPlayerAdminJailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason().size() > 0) {

    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  if (from.jail_time() != 0) {
    _internal_set_jail_time(from._internal_jail_time());
  }
  if (from.admin() != 0) {
    _internal_set_admin(from._internal_admin());
  }
  if (from.date() != 0) {
    _internal_set_date(from._internal_date());
  }
}

void GetPlayerAdminJailResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.GetPlayerAdminJailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPlayerAdminJailResponse::CopyFrom(const GetPlayerAdminJailResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.GetPlayerAdminJailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPlayerAdminJailResponse::IsInitialized() const {
  return true;
}

void GetPlayerAdminJailResponse::InternalSwap(GetPlayerAdminJailResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(jail_time_, other->jail_time_);
  swap(admin_, other->admin_);
  swap(date_, other->date_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPlayerAdminJailResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetBanRequest::InitAsDefaultInstance() {
}
class GetBanRequest::_Internal {
 public:
};

GetBanRequest::GetBanRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.GetBanRequest)
}
GetBanRequest::GetBanRequest(const GetBanRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.economy.GetBanRequest)
}

void GetBanRequest::SharedCtor() {
  id_ = 0u;
}

GetBanRequest::~GetBanRequest() {
  // @@protoc_insertion_point(destructor:mruv.economy.GetBanRequest)
  SharedDtor();
}

void GetBanRequest::SharedDtor() {
}

void GetBanRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBanRequest& GetBanRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBanRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void GetBanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.GetBanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear();
}

const char* GetBanRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBanRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.GetBanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.GetBanRequest)
  return target;
}

size_t GetBanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.GetBanRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBanRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.GetBanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBanRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBanRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.GetBanRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.GetBanRequest)
    MergeFrom(*source);
  }
}

void GetBanRequest::MergeFrom(const GetBanRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.GetBanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetBanRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.GetBanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBanRequest::CopyFrom(const GetBanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.GetBanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBanRequest::IsInitialized() const {
  return true;
}

void GetBanRequest::InternalSwap(GetBanRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBanRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetWarnRequest::InitAsDefaultInstance() {
}
class GetWarnRequest::_Internal {
 public:
};

GetWarnRequest::GetWarnRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.GetWarnRequest)
}
GetWarnRequest::GetWarnRequest(const GetWarnRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.economy.GetWarnRequest)
}

void GetWarnRequest::SharedCtor() {
  id_ = 0u;
}

GetWarnRequest::~GetWarnRequest() {
  // @@protoc_insertion_point(destructor:mruv.economy.GetWarnRequest)
  SharedDtor();
}

void GetWarnRequest::SharedDtor() {
}

void GetWarnRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetWarnRequest& GetWarnRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetWarnRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void GetWarnRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.GetWarnRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear();
}

const char* GetWarnRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetWarnRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.GetWarnRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.GetWarnRequest)
  return target;
}

size_t GetWarnRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.GetWarnRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetWarnRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.GetWarnRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetWarnRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetWarnRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.GetWarnRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.GetWarnRequest)
    MergeFrom(*source);
  }
}

void GetWarnRequest::MergeFrom(const GetWarnRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.GetWarnRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetWarnRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.GetWarnRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetWarnRequest::CopyFrom(const GetWarnRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.GetWarnRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWarnRequest::IsInitialized() const {
  return true;
}

void GetWarnRequest::InternalSwap(GetWarnRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetWarnRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetBlockRequest::InitAsDefaultInstance() {
}
class GetBlockRequest::_Internal {
 public:
};

GetBlockRequest::GetBlockRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.GetBlockRequest)
}
GetBlockRequest::GetBlockRequest(const GetBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.economy.GetBlockRequest)
}

void GetBlockRequest::SharedCtor() {
  id_ = 0u;
}

GetBlockRequest::~GetBlockRequest() {
  // @@protoc_insertion_point(destructor:mruv.economy.GetBlockRequest)
  SharedDtor();
}

void GetBlockRequest::SharedDtor() {
}

void GetBlockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBlockRequest& GetBlockRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBlockRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void GetBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.GetBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear();
}

const char* GetBlockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBlockRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.GetBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.GetBlockRequest)
  return target;
}

size_t GetBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.GetBlockRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBlockRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.GetBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBlockRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBlockRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.GetBlockRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.GetBlockRequest)
    MergeFrom(*source);
  }
}

void GetBlockRequest::MergeFrom(const GetBlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.GetBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetBlockRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.GetBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBlockRequest::CopyFrom(const GetBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.GetBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockRequest::IsInitialized() const {
  return true;
}

void GetBlockRequest::InternalSwap(GetBlockRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlockRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IsPlayerBannedRequest::InitAsDefaultInstance() {
}
class IsPlayerBannedRequest::_Internal {
 public:
};

IsPlayerBannedRequest::IsPlayerBannedRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.IsPlayerBannedRequest)
}
IsPlayerBannedRequest::IsPlayerBannedRequest(const IsPlayerBannedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  player_ = from.player_;
  // @@protoc_insertion_point(copy_constructor:mruv.economy.IsPlayerBannedRequest)
}

void IsPlayerBannedRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IsPlayerBannedRequest_punishments_2fpunishments_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_ = 0u;
}

IsPlayerBannedRequest::~IsPlayerBannedRequest() {
  // @@protoc_insertion_point(destructor:mruv.economy.IsPlayerBannedRequest)
  SharedDtor();
}

void IsPlayerBannedRequest::SharedDtor() {
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IsPlayerBannedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IsPlayerBannedRequest& IsPlayerBannedRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IsPlayerBannedRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void IsPlayerBannedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.IsPlayerBannedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_ = 0u;
  _internal_metadata_.Clear();
}

const char* IsPlayerBannedRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.economy.IsPlayerBannedRequest.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IsPlayerBannedRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.IsPlayerBannedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player = 1;
  if (this->player() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player(), target);
  }

  // string ip = 2;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.economy.IsPlayerBannedRequest.ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.IsPlayerBannedRequest)
  return target;
}

size_t IsPlayerBannedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.IsPlayerBannedRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 2;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // uint32 player = 1;
  if (this->player() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsPlayerBannedRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.IsPlayerBannedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const IsPlayerBannedRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IsPlayerBannedRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.IsPlayerBannedRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.IsPlayerBannedRequest)
    MergeFrom(*source);
  }
}

void IsPlayerBannedRequest::MergeFrom(const IsPlayerBannedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.IsPlayerBannedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.player() != 0) {
    _internal_set_player(from._internal_player());
  }
}

void IsPlayerBannedRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.IsPlayerBannedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsPlayerBannedRequest::CopyFrom(const IsPlayerBannedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.IsPlayerBannedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsPlayerBannedRequest::IsInitialized() const {
  return true;
}

void IsPlayerBannedRequest::InternalSwap(IsPlayerBannedRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_, other->player_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IsPlayerBannedRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IsPlayerBannedResponse::InitAsDefaultInstance() {
}
class IsPlayerBannedResponse::_Internal {
 public:
};

IsPlayerBannedResponse::IsPlayerBannedResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.IsPlayerBannedResponse)
}
IsPlayerBannedResponse::IsPlayerBannedResponse(const IsPlayerBannedResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&banned_, &from.banned_,
    static_cast<size_t>(reinterpret_cast<char*>(&ban_id_) -
    reinterpret_cast<char*>(&banned_)) + sizeof(ban_id_));
  // @@protoc_insertion_point(copy_constructor:mruv.economy.IsPlayerBannedResponse)
}

void IsPlayerBannedResponse::SharedCtor() {
  ::memset(&banned_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ban_id_) -
      reinterpret_cast<char*>(&banned_)) + sizeof(ban_id_));
}

IsPlayerBannedResponse::~IsPlayerBannedResponse() {
  // @@protoc_insertion_point(destructor:mruv.economy.IsPlayerBannedResponse)
  SharedDtor();
}

void IsPlayerBannedResponse::SharedDtor() {
}

void IsPlayerBannedResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IsPlayerBannedResponse& IsPlayerBannedResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IsPlayerBannedResponse_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void IsPlayerBannedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.IsPlayerBannedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&banned_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ban_id_) -
      reinterpret_cast<char*>(&banned_)) + sizeof(ban_id_));
  _internal_metadata_.Clear();
}

const char* IsPlayerBannedResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool banned = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          banned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ban_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ban_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IsPlayerBannedResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.IsPlayerBannedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool banned = 1;
  if (this->banned() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_banned(), target);
  }

  // uint32 ban_id = 2;
  if (this->ban_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ban_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.IsPlayerBannedResponse)
  return target;
}

size_t IsPlayerBannedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.IsPlayerBannedResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool banned = 1;
  if (this->banned() != 0) {
    total_size += 1 + 1;
  }

  // uint32 ban_id = 2;
  if (this->ban_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ban_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsPlayerBannedResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.IsPlayerBannedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const IsPlayerBannedResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IsPlayerBannedResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.IsPlayerBannedResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.IsPlayerBannedResponse)
    MergeFrom(*source);
  }
}

void IsPlayerBannedResponse::MergeFrom(const IsPlayerBannedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.IsPlayerBannedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.banned() != 0) {
    _internal_set_banned(from._internal_banned());
  }
  if (from.ban_id() != 0) {
    _internal_set_ban_id(from._internal_ban_id());
  }
}

void IsPlayerBannedResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.IsPlayerBannedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsPlayerBannedResponse::CopyFrom(const IsPlayerBannedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.IsPlayerBannedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsPlayerBannedResponse::IsInitialized() const {
  return true;
}

void IsPlayerBannedResponse::InternalSwap(IsPlayerBannedResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(banned_, other->banned_);
  swap(ban_id_, other->ban_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IsPlayerBannedResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IsCharacterBlockedRequest::InitAsDefaultInstance() {
}
class IsCharacterBlockedRequest::_Internal {
 public:
};

IsCharacterBlockedRequest::IsCharacterBlockedRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.IsCharacterBlockedRequest)
}
IsCharacterBlockedRequest::IsCharacterBlockedRequest(const IsCharacterBlockedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  character_ = from.character_;
  // @@protoc_insertion_point(copy_constructor:mruv.economy.IsCharacterBlockedRequest)
}

void IsCharacterBlockedRequest::SharedCtor() {
  character_ = 0u;
}

IsCharacterBlockedRequest::~IsCharacterBlockedRequest() {
  // @@protoc_insertion_point(destructor:mruv.economy.IsCharacterBlockedRequest)
  SharedDtor();
}

void IsCharacterBlockedRequest::SharedDtor() {
}

void IsCharacterBlockedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IsCharacterBlockedRequest& IsCharacterBlockedRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IsCharacterBlockedRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void IsCharacterBlockedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.IsCharacterBlockedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  character_ = 0u;
  _internal_metadata_.Clear();
}

const char* IsCharacterBlockedRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 character = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          character_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IsCharacterBlockedRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.IsCharacterBlockedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 character = 1;
  if (this->character() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_character(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.IsCharacterBlockedRequest)
  return target;
}

size_t IsCharacterBlockedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.IsCharacterBlockedRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 character = 1;
  if (this->character() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_character());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsCharacterBlockedRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.IsCharacterBlockedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const IsCharacterBlockedRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IsCharacterBlockedRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.IsCharacterBlockedRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.IsCharacterBlockedRequest)
    MergeFrom(*source);
  }
}

void IsCharacterBlockedRequest::MergeFrom(const IsCharacterBlockedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.IsCharacterBlockedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.character() != 0) {
    _internal_set_character(from._internal_character());
  }
}

void IsCharacterBlockedRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.IsCharacterBlockedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsCharacterBlockedRequest::CopyFrom(const IsCharacterBlockedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.IsCharacterBlockedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsCharacterBlockedRequest::IsInitialized() const {
  return true;
}

void IsCharacterBlockedRequest::InternalSwap(IsCharacterBlockedRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(character_, other->character_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IsCharacterBlockedRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IsCharacterBlockedResponse::InitAsDefaultInstance() {
}
class IsCharacterBlockedResponse::_Internal {
 public:
};

IsCharacterBlockedResponse::IsCharacterBlockedResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.IsCharacterBlockedResponse)
}
IsCharacterBlockedResponse::IsCharacterBlockedResponse(const IsCharacterBlockedResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&blocked_, &from.blocked_,
    static_cast<size_t>(reinterpret_cast<char*>(&block_id_) -
    reinterpret_cast<char*>(&blocked_)) + sizeof(block_id_));
  // @@protoc_insertion_point(copy_constructor:mruv.economy.IsCharacterBlockedResponse)
}

void IsCharacterBlockedResponse::SharedCtor() {
  ::memset(&blocked_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_id_) -
      reinterpret_cast<char*>(&blocked_)) + sizeof(block_id_));
}

IsCharacterBlockedResponse::~IsCharacterBlockedResponse() {
  // @@protoc_insertion_point(destructor:mruv.economy.IsCharacterBlockedResponse)
  SharedDtor();
}

void IsCharacterBlockedResponse::SharedDtor() {
}

void IsCharacterBlockedResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IsCharacterBlockedResponse& IsCharacterBlockedResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IsCharacterBlockedResponse_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void IsCharacterBlockedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.IsCharacterBlockedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&blocked_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_id_) -
      reinterpret_cast<char*>(&blocked_)) + sizeof(block_id_));
  _internal_metadata_.Clear();
}

const char* IsCharacterBlockedResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool blocked = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          blocked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 block_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          block_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IsCharacterBlockedResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.IsCharacterBlockedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool blocked = 1;
  if (this->blocked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_blocked(), target);
  }

  // uint32 block_id = 2;
  if (this->block_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_block_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.IsCharacterBlockedResponse)
  return target;
}

size_t IsCharacterBlockedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.IsCharacterBlockedResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool blocked = 1;
  if (this->blocked() != 0) {
    total_size += 1 + 1;
  }

  // uint32 block_id = 2;
  if (this->block_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_block_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsCharacterBlockedResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.IsCharacterBlockedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const IsCharacterBlockedResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IsCharacterBlockedResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.IsCharacterBlockedResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.IsCharacterBlockedResponse)
    MergeFrom(*source);
  }
}

void IsCharacterBlockedResponse::MergeFrom(const IsCharacterBlockedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.IsCharacterBlockedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.blocked() != 0) {
    _internal_set_blocked(from._internal_blocked());
  }
  if (from.block_id() != 0) {
    _internal_set_block_id(from._internal_block_id());
  }
}

void IsCharacterBlockedResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.IsCharacterBlockedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsCharacterBlockedResponse::CopyFrom(const IsCharacterBlockedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.IsCharacterBlockedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsCharacterBlockedResponse::IsInitialized() const {
  return true;
}

void IsCharacterBlockedResponse::InternalSwap(IsCharacterBlockedResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(blocked_, other->blocked_);
  swap(block_id_, other->block_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IsCharacterBlockedResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IsCharacterJailedRequest::InitAsDefaultInstance() {
}
class IsCharacterJailedRequest::_Internal {
 public:
};

IsCharacterJailedRequest::IsCharacterJailedRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.IsCharacterJailedRequest)
}
IsCharacterJailedRequest::IsCharacterJailedRequest(const IsCharacterJailedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  character_ = from.character_;
  // @@protoc_insertion_point(copy_constructor:mruv.economy.IsCharacterJailedRequest)
}

void IsCharacterJailedRequest::SharedCtor() {
  character_ = 0u;
}

IsCharacterJailedRequest::~IsCharacterJailedRequest() {
  // @@protoc_insertion_point(destructor:mruv.economy.IsCharacterJailedRequest)
  SharedDtor();
}

void IsCharacterJailedRequest::SharedDtor() {
}

void IsCharacterJailedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IsCharacterJailedRequest& IsCharacterJailedRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IsCharacterJailedRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void IsCharacterJailedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.IsCharacterJailedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  character_ = 0u;
  _internal_metadata_.Clear();
}

const char* IsCharacterJailedRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 character = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          character_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IsCharacterJailedRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.IsCharacterJailedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 character = 1;
  if (this->character() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_character(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.IsCharacterJailedRequest)
  return target;
}

size_t IsCharacterJailedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.IsCharacterJailedRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 character = 1;
  if (this->character() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_character());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsCharacterJailedRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.IsCharacterJailedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const IsCharacterJailedRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IsCharacterJailedRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.IsCharacterJailedRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.IsCharacterJailedRequest)
    MergeFrom(*source);
  }
}

void IsCharacterJailedRequest::MergeFrom(const IsCharacterJailedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.IsCharacterJailedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.character() != 0) {
    _internal_set_character(from._internal_character());
  }
}

void IsCharacterJailedRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.IsCharacterJailedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsCharacterJailedRequest::CopyFrom(const IsCharacterJailedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.IsCharacterJailedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsCharacterJailedRequest::IsInitialized() const {
  return true;
}

void IsCharacterJailedRequest::InternalSwap(IsCharacterJailedRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(character_, other->character_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IsCharacterJailedRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IsCharacterJailedResponse::InitAsDefaultInstance() {
}
class IsCharacterJailedResponse::_Internal {
 public:
};

IsCharacterJailedResponse::IsCharacterJailedResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.IsCharacterJailedResponse)
}
IsCharacterJailedResponse::IsCharacterJailedResponse(const IsCharacterJailedResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&jailed_, &from.jailed_,
    static_cast<size_t>(reinterpret_cast<char*>(&jail_time_) -
    reinterpret_cast<char*>(&jailed_)) + sizeof(jail_time_));
  // @@protoc_insertion_point(copy_constructor:mruv.economy.IsCharacterJailedResponse)
}

void IsCharacterJailedResponse::SharedCtor() {
  ::memset(&jailed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&jail_time_) -
      reinterpret_cast<char*>(&jailed_)) + sizeof(jail_time_));
}

IsCharacterJailedResponse::~IsCharacterJailedResponse() {
  // @@protoc_insertion_point(destructor:mruv.economy.IsCharacterJailedResponse)
  SharedDtor();
}

void IsCharacterJailedResponse::SharedDtor() {
}

void IsCharacterJailedResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IsCharacterJailedResponse& IsCharacterJailedResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IsCharacterJailedResponse_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void IsCharacterJailedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.IsCharacterJailedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&jailed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&jail_time_) -
      reinterpret_cast<char*>(&jailed_)) + sizeof(jail_time_));
  _internal_metadata_.Clear();
}

const char* IsCharacterJailedResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool jailed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          jailed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 jail_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          jail_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IsCharacterJailedResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.IsCharacterJailedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool jailed = 1;
  if (this->jailed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_jailed(), target);
  }

  // uint32 jail_time = 2;
  if (this->jail_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_jail_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.IsCharacterJailedResponse)
  return target;
}

size_t IsCharacterJailedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.IsCharacterJailedResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool jailed = 1;
  if (this->jailed() != 0) {
    total_size += 1 + 1;
  }

  // uint32 jail_time = 2;
  if (this->jail_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_jail_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsCharacterJailedResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.IsCharacterJailedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const IsCharacterJailedResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IsCharacterJailedResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.IsCharacterJailedResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.IsCharacterJailedResponse)
    MergeFrom(*source);
  }
}

void IsCharacterJailedResponse::MergeFrom(const IsCharacterJailedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.IsCharacterJailedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.jailed() != 0) {
    _internal_set_jailed(from._internal_jailed());
  }
  if (from.jail_time() != 0) {
    _internal_set_jail_time(from._internal_jail_time());
  }
}

void IsCharacterJailedResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.IsCharacterJailedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsCharacterJailedResponse::CopyFrom(const IsCharacterJailedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.IsCharacterJailedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsCharacterJailedResponse::IsInitialized() const {
  return true;
}

void IsCharacterJailedResponse::InternalSwap(IsCharacterJailedResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(jailed_, other->jailed_);
  swap(jail_time_, other->jail_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IsCharacterJailedResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WatchBansRequest::InitAsDefaultInstance() {
}
class WatchBansRequest::_Internal {
 public:
};

WatchBansRequest::WatchBansRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.WatchBansRequest)
}
WatchBansRequest::WatchBansRequest(const WatchBansRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.economy.WatchBansRequest)
}

void WatchBansRequest::SharedCtor() {
}

WatchBansRequest::~WatchBansRequest() {
  // @@protoc_insertion_point(destructor:mruv.economy.WatchBansRequest)
  SharedDtor();
}

void WatchBansRequest::SharedDtor() {
}

void WatchBansRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchBansRequest& WatchBansRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WatchBansRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void WatchBansRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.WatchBansRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* WatchBansRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchBansRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.WatchBansRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.WatchBansRequest)
  return target;
}

size_t WatchBansRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.WatchBansRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchBansRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.WatchBansRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchBansRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WatchBansRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.WatchBansRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.WatchBansRequest)
    MergeFrom(*source);
  }
}

void WatchBansRequest::MergeFrom(const WatchBansRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.WatchBansRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WatchBansRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.WatchBansRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchBansRequest::CopyFrom(const WatchBansRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.WatchBansRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchBansRequest::IsInitialized() const {
  return true;
}

void WatchBansRequest::InternalSwap(WatchBansRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchBansRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WatchBlocksRequest::InitAsDefaultInstance() {
}
class WatchBlocksRequest::_Internal {
 public:
};

WatchBlocksRequest::WatchBlocksRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.WatchBlocksRequest)
}
WatchBlocksRequest::WatchBlocksRequest(const WatchBlocksRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.economy.WatchBlocksRequest)
}

void WatchBlocksRequest::SharedCtor() {
}

WatchBlocksRequest::~WatchBlocksRequest() {
  // @@protoc_insertion_point(destructor:mruv.economy.WatchBlocksRequest)
  SharedDtor();
}

void WatchBlocksRequest::SharedDtor() {
}

void WatchBlocksRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchBlocksRequest& WatchBlocksRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WatchBlocksRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void WatchBlocksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.WatchBlocksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* WatchBlocksRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchBlocksRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.WatchBlocksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.WatchBlocksRequest)
  return target;
}

size_t WatchBlocksRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.WatchBlocksRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchBlocksRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.WatchBlocksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchBlocksRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WatchBlocksRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.WatchBlocksRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.WatchBlocksRequest)
    MergeFrom(*source);
  }
}

void WatchBlocksRequest::MergeFrom(const WatchBlocksRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.WatchBlocksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WatchBlocksRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.WatchBlocksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchBlocksRequest::CopyFrom(const WatchBlocksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.WatchBlocksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchBlocksRequest::IsInitialized() const {
  return true;
}

void WatchBlocksRequest::InternalSwap(WatchBlocksRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchBlocksRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WatchWarnsRequest::InitAsDefaultInstance() {
}
class WatchWarnsRequest::_Internal {
 public:
};

WatchWarnsRequest::WatchWarnsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.WatchWarnsRequest)
}
WatchWarnsRequest::WatchWarnsRequest(const WatchWarnsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.economy.WatchWarnsRequest)
}

void WatchWarnsRequest::SharedCtor() {
}

WatchWarnsRequest::~WatchWarnsRequest() {
  // @@protoc_insertion_point(destructor:mruv.economy.WatchWarnsRequest)
  SharedDtor();
}

void WatchWarnsRequest::SharedDtor() {
}

void WatchWarnsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchWarnsRequest& WatchWarnsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WatchWarnsRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void WatchWarnsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.WatchWarnsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* WatchWarnsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchWarnsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.WatchWarnsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.WatchWarnsRequest)
  return target;
}

size_t WatchWarnsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.WatchWarnsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchWarnsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.WatchWarnsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchWarnsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WatchWarnsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.WatchWarnsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.WatchWarnsRequest)
    MergeFrom(*source);
  }
}

void WatchWarnsRequest::MergeFrom(const WatchWarnsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.WatchWarnsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WatchWarnsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.WatchWarnsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchWarnsRequest::CopyFrom(const WatchWarnsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.WatchWarnsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchWarnsRequest::IsInitialized() const {
  return true;
}

void WatchWarnsRequest::InternalSwap(WatchWarnsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchWarnsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WatchAdminJailsRequest::InitAsDefaultInstance() {
}
class WatchAdminJailsRequest::_Internal {
 public:
};

WatchAdminJailsRequest::WatchAdminJailsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.WatchAdminJailsRequest)
}
WatchAdminJailsRequest::WatchAdminJailsRequest(const WatchAdminJailsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.economy.WatchAdminJailsRequest)
}

void WatchAdminJailsRequest::SharedCtor() {
}

WatchAdminJailsRequest::~WatchAdminJailsRequest() {
  // @@protoc_insertion_point(destructor:mruv.economy.WatchAdminJailsRequest)
  SharedDtor();
}

void WatchAdminJailsRequest::SharedDtor() {
}

void WatchAdminJailsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchAdminJailsRequest& WatchAdminJailsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WatchAdminJailsRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void WatchAdminJailsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.WatchAdminJailsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* WatchAdminJailsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchAdminJailsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.WatchAdminJailsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.WatchAdminJailsRequest)
  return target;
}

size_t WatchAdminJailsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.WatchAdminJailsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchAdminJailsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.WatchAdminJailsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchAdminJailsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WatchAdminJailsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.WatchAdminJailsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.WatchAdminJailsRequest)
    MergeFrom(*source);
  }
}

void WatchAdminJailsRequest::MergeFrom(const WatchAdminJailsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.WatchAdminJailsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WatchAdminJailsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.WatchAdminJailsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchAdminJailsRequest::CopyFrom(const WatchAdminJailsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.WatchAdminJailsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchAdminJailsRequest::IsInitialized() const {
  return true;
}

void WatchAdminJailsRequest::InternalSwap(WatchAdminJailsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchAdminJailsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WatchUnBansRequest::InitAsDefaultInstance() {
}
class WatchUnBansRequest::_Internal {
 public:
};

WatchUnBansRequest::WatchUnBansRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.WatchUnBansRequest)
}
WatchUnBansRequest::WatchUnBansRequest(const WatchUnBansRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.economy.WatchUnBansRequest)
}

void WatchUnBansRequest::SharedCtor() {
}

WatchUnBansRequest::~WatchUnBansRequest() {
  // @@protoc_insertion_point(destructor:mruv.economy.WatchUnBansRequest)
  SharedDtor();
}

void WatchUnBansRequest::SharedDtor() {
}

void WatchUnBansRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchUnBansRequest& WatchUnBansRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WatchUnBansRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void WatchUnBansRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.WatchUnBansRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* WatchUnBansRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchUnBansRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.WatchUnBansRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.WatchUnBansRequest)
  return target;
}

size_t WatchUnBansRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.WatchUnBansRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchUnBansRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.WatchUnBansRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchUnBansRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WatchUnBansRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.WatchUnBansRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.WatchUnBansRequest)
    MergeFrom(*source);
  }
}

void WatchUnBansRequest::MergeFrom(const WatchUnBansRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.WatchUnBansRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WatchUnBansRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.WatchUnBansRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchUnBansRequest::CopyFrom(const WatchUnBansRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.WatchUnBansRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchUnBansRequest::IsInitialized() const {
  return true;
}

void WatchUnBansRequest::InternalSwap(WatchUnBansRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchUnBansRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WatchUnBlocksRequest::InitAsDefaultInstance() {
}
class WatchUnBlocksRequest::_Internal {
 public:
};

WatchUnBlocksRequest::WatchUnBlocksRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.WatchUnBlocksRequest)
}
WatchUnBlocksRequest::WatchUnBlocksRequest(const WatchUnBlocksRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.economy.WatchUnBlocksRequest)
}

void WatchUnBlocksRequest::SharedCtor() {
}

WatchUnBlocksRequest::~WatchUnBlocksRequest() {
  // @@protoc_insertion_point(destructor:mruv.economy.WatchUnBlocksRequest)
  SharedDtor();
}

void WatchUnBlocksRequest::SharedDtor() {
}

void WatchUnBlocksRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchUnBlocksRequest& WatchUnBlocksRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WatchUnBlocksRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void WatchUnBlocksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.WatchUnBlocksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* WatchUnBlocksRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchUnBlocksRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.WatchUnBlocksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.WatchUnBlocksRequest)
  return target;
}

size_t WatchUnBlocksRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.WatchUnBlocksRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchUnBlocksRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.WatchUnBlocksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchUnBlocksRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WatchUnBlocksRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.WatchUnBlocksRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.WatchUnBlocksRequest)
    MergeFrom(*source);
  }
}

void WatchUnBlocksRequest::MergeFrom(const WatchUnBlocksRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.WatchUnBlocksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WatchUnBlocksRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.WatchUnBlocksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchUnBlocksRequest::CopyFrom(const WatchUnBlocksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.WatchUnBlocksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchUnBlocksRequest::IsInitialized() const {
  return true;
}

void WatchUnBlocksRequest::InternalSwap(WatchUnBlocksRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchUnBlocksRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WatchUnWarnsRequest::InitAsDefaultInstance() {
}
class WatchUnWarnsRequest::_Internal {
 public:
};

WatchUnWarnsRequest::WatchUnWarnsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.WatchUnWarnsRequest)
}
WatchUnWarnsRequest::WatchUnWarnsRequest(const WatchUnWarnsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.economy.WatchUnWarnsRequest)
}

void WatchUnWarnsRequest::SharedCtor() {
}

WatchUnWarnsRequest::~WatchUnWarnsRequest() {
  // @@protoc_insertion_point(destructor:mruv.economy.WatchUnWarnsRequest)
  SharedDtor();
}

void WatchUnWarnsRequest::SharedDtor() {
}

void WatchUnWarnsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchUnWarnsRequest& WatchUnWarnsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WatchUnWarnsRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void WatchUnWarnsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.WatchUnWarnsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* WatchUnWarnsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchUnWarnsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.WatchUnWarnsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.WatchUnWarnsRequest)
  return target;
}

size_t WatchUnWarnsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.WatchUnWarnsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchUnWarnsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.WatchUnWarnsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchUnWarnsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WatchUnWarnsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.WatchUnWarnsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.WatchUnWarnsRequest)
    MergeFrom(*source);
  }
}

void WatchUnWarnsRequest::MergeFrom(const WatchUnWarnsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.WatchUnWarnsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WatchUnWarnsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.WatchUnWarnsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchUnWarnsRequest::CopyFrom(const WatchUnWarnsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.WatchUnWarnsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchUnWarnsRequest::IsInitialized() const {
  return true;
}

void WatchUnWarnsRequest::InternalSwap(WatchUnWarnsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchUnWarnsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WatchUnAdminJailsRequest::InitAsDefaultInstance() {
}
class WatchUnAdminJailsRequest::_Internal {
 public:
};

WatchUnAdminJailsRequest::WatchUnAdminJailsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.WatchUnAdminJailsRequest)
}
WatchUnAdminJailsRequest::WatchUnAdminJailsRequest(const WatchUnAdminJailsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.economy.WatchUnAdminJailsRequest)
}

void WatchUnAdminJailsRequest::SharedCtor() {
}

WatchUnAdminJailsRequest::~WatchUnAdminJailsRequest() {
  // @@protoc_insertion_point(destructor:mruv.economy.WatchUnAdminJailsRequest)
  SharedDtor();
}

void WatchUnAdminJailsRequest::SharedDtor() {
}

void WatchUnAdminJailsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchUnAdminJailsRequest& WatchUnAdminJailsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WatchUnAdminJailsRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void WatchUnAdminJailsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.WatchUnAdminJailsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* WatchUnAdminJailsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchUnAdminJailsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.WatchUnAdminJailsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.WatchUnAdminJailsRequest)
  return target;
}

size_t WatchUnAdminJailsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.WatchUnAdminJailsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchUnAdminJailsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.WatchUnAdminJailsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchUnAdminJailsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WatchUnAdminJailsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.WatchUnAdminJailsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.WatchUnAdminJailsRequest)
    MergeFrom(*source);
  }
}

void WatchUnAdminJailsRequest::MergeFrom(const WatchUnAdminJailsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.WatchUnAdminJailsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WatchUnAdminJailsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.WatchUnAdminJailsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchUnAdminJailsRequest::CopyFrom(const WatchUnAdminJailsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.WatchUnAdminJailsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchUnAdminJailsRequest::IsInitialized() const {
  return true;
}

void WatchUnAdminJailsRequest::InternalSwap(WatchUnAdminJailsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchUnAdminJailsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WatchPlayerAcquittalsRequest::InitAsDefaultInstance() {
}
class WatchPlayerAcquittalsRequest::_Internal {
 public:
};

WatchPlayerAcquittalsRequest::WatchPlayerAcquittalsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.WatchPlayerAcquittalsRequest)
}
WatchPlayerAcquittalsRequest::WatchPlayerAcquittalsRequest(const WatchPlayerAcquittalsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.economy.WatchPlayerAcquittalsRequest)
}

void WatchPlayerAcquittalsRequest::SharedCtor() {
}

WatchPlayerAcquittalsRequest::~WatchPlayerAcquittalsRequest() {
  // @@protoc_insertion_point(destructor:mruv.economy.WatchPlayerAcquittalsRequest)
  SharedDtor();
}

void WatchPlayerAcquittalsRequest::SharedDtor() {
}

void WatchPlayerAcquittalsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchPlayerAcquittalsRequest& WatchPlayerAcquittalsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WatchPlayerAcquittalsRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void WatchPlayerAcquittalsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.WatchPlayerAcquittalsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* WatchPlayerAcquittalsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchPlayerAcquittalsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.WatchPlayerAcquittalsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.WatchPlayerAcquittalsRequest)
  return target;
}

size_t WatchPlayerAcquittalsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.WatchPlayerAcquittalsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchPlayerAcquittalsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.WatchPlayerAcquittalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchPlayerAcquittalsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WatchPlayerAcquittalsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.WatchPlayerAcquittalsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.WatchPlayerAcquittalsRequest)
    MergeFrom(*source);
  }
}

void WatchPlayerAcquittalsRequest::MergeFrom(const WatchPlayerAcquittalsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.WatchPlayerAcquittalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WatchPlayerAcquittalsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.WatchPlayerAcquittalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchPlayerAcquittalsRequest::CopyFrom(const WatchPlayerAcquittalsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.WatchPlayerAcquittalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchPlayerAcquittalsRequest::IsInitialized() const {
  return true;
}

void WatchPlayerAcquittalsRequest::InternalSwap(WatchPlayerAcquittalsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchPlayerAcquittalsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WatchPlayerAcquittalsResponse::InitAsDefaultInstance() {
}
class WatchPlayerAcquittalsResponse::_Internal {
 public:
};

WatchPlayerAcquittalsResponse::WatchPlayerAcquittalsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.WatchPlayerAcquittalsResponse)
}
WatchPlayerAcquittalsResponse::WatchPlayerAcquittalsResponse(const WatchPlayerAcquittalsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.economy.WatchPlayerAcquittalsResponse)
}

void WatchPlayerAcquittalsResponse::SharedCtor() {
}

WatchPlayerAcquittalsResponse::~WatchPlayerAcquittalsResponse() {
  // @@protoc_insertion_point(destructor:mruv.economy.WatchPlayerAcquittalsResponse)
  SharedDtor();
}

void WatchPlayerAcquittalsResponse::SharedDtor() {
}

void WatchPlayerAcquittalsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchPlayerAcquittalsResponse& WatchPlayerAcquittalsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WatchPlayerAcquittalsResponse_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void WatchPlayerAcquittalsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.WatchPlayerAcquittalsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* WatchPlayerAcquittalsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchPlayerAcquittalsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.WatchPlayerAcquittalsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.WatchPlayerAcquittalsResponse)
  return target;
}

size_t WatchPlayerAcquittalsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.WatchPlayerAcquittalsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchPlayerAcquittalsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.WatchPlayerAcquittalsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchPlayerAcquittalsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WatchPlayerAcquittalsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.WatchPlayerAcquittalsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.WatchPlayerAcquittalsResponse)
    MergeFrom(*source);
  }
}

void WatchPlayerAcquittalsResponse::MergeFrom(const WatchPlayerAcquittalsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.WatchPlayerAcquittalsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WatchPlayerAcquittalsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.WatchPlayerAcquittalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchPlayerAcquittalsResponse::CopyFrom(const WatchPlayerAcquittalsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.WatchPlayerAcquittalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchPlayerAcquittalsResponse::IsInitialized() const {
  return true;
}

void WatchPlayerAcquittalsResponse::InternalSwap(WatchPlayerAcquittalsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchPlayerAcquittalsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WatchPlayerPunishmentsRequest::InitAsDefaultInstance() {
}
class WatchPlayerPunishmentsRequest::_Internal {
 public:
};

WatchPlayerPunishmentsRequest::WatchPlayerPunishmentsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.WatchPlayerPunishmentsRequest)
}
WatchPlayerPunishmentsRequest::WatchPlayerPunishmentsRequest(const WatchPlayerPunishmentsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.economy.WatchPlayerPunishmentsRequest)
}

void WatchPlayerPunishmentsRequest::SharedCtor() {
}

WatchPlayerPunishmentsRequest::~WatchPlayerPunishmentsRequest() {
  // @@protoc_insertion_point(destructor:mruv.economy.WatchPlayerPunishmentsRequest)
  SharedDtor();
}

void WatchPlayerPunishmentsRequest::SharedDtor() {
}

void WatchPlayerPunishmentsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchPlayerPunishmentsRequest& WatchPlayerPunishmentsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WatchPlayerPunishmentsRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void WatchPlayerPunishmentsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.WatchPlayerPunishmentsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* WatchPlayerPunishmentsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchPlayerPunishmentsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.WatchPlayerPunishmentsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.WatchPlayerPunishmentsRequest)
  return target;
}

size_t WatchPlayerPunishmentsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.WatchPlayerPunishmentsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchPlayerPunishmentsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.WatchPlayerPunishmentsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchPlayerPunishmentsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WatchPlayerPunishmentsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.WatchPlayerPunishmentsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.WatchPlayerPunishmentsRequest)
    MergeFrom(*source);
  }
}

void WatchPlayerPunishmentsRequest::MergeFrom(const WatchPlayerPunishmentsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.WatchPlayerPunishmentsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WatchPlayerPunishmentsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.WatchPlayerPunishmentsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchPlayerPunishmentsRequest::CopyFrom(const WatchPlayerPunishmentsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.WatchPlayerPunishmentsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchPlayerPunishmentsRequest::IsInitialized() const {
  return true;
}

void WatchPlayerPunishmentsRequest::InternalSwap(WatchPlayerPunishmentsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchPlayerPunishmentsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WatchPlayerPunishmentsResponse::InitAsDefaultInstance() {
}
class WatchPlayerPunishmentsResponse::_Internal {
 public:
};

WatchPlayerPunishmentsResponse::WatchPlayerPunishmentsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.WatchPlayerPunishmentsResponse)
}
WatchPlayerPunishmentsResponse::WatchPlayerPunishmentsResponse(const WatchPlayerPunishmentsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&punishment_id_) -
    reinterpret_cast<char*>(&type_)) + sizeof(punishment_id_));
  // @@protoc_insertion_point(copy_constructor:mruv.economy.WatchPlayerPunishmentsResponse)
}

void WatchPlayerPunishmentsResponse::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&punishment_id_) -
      reinterpret_cast<char*>(&type_)) + sizeof(punishment_id_));
}

WatchPlayerPunishmentsResponse::~WatchPlayerPunishmentsResponse() {
  // @@protoc_insertion_point(destructor:mruv.economy.WatchPlayerPunishmentsResponse)
  SharedDtor();
}

void WatchPlayerPunishmentsResponse::SharedDtor() {
}

void WatchPlayerPunishmentsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchPlayerPunishmentsResponse& WatchPlayerPunishmentsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WatchPlayerPunishmentsResponse_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void WatchPlayerPunishmentsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.WatchPlayerPunishmentsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&punishment_id_) -
      reinterpret_cast<char*>(&type_)) + sizeof(punishment_id_));
  _internal_metadata_.Clear();
}

const char* WatchPlayerPunishmentsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mruv.economy.PunishmentType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::mruv::economy::PunishmentType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 punishment_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          punishment_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchPlayerPunishmentsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.WatchPlayerPunishmentsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mruv.economy.PunishmentType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // uint32 punishment_id = 2;
  if (this->punishment_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_punishment_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.WatchPlayerPunishmentsResponse)
  return target;
}

size_t WatchPlayerPunishmentsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.WatchPlayerPunishmentsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mruv.economy.PunishmentType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 punishment_id = 2;
  if (this->punishment_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_punishment_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchPlayerPunishmentsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.WatchPlayerPunishmentsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchPlayerPunishmentsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WatchPlayerPunishmentsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.WatchPlayerPunishmentsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.WatchPlayerPunishmentsResponse)
    MergeFrom(*source);
  }
}

void WatchPlayerPunishmentsResponse::MergeFrom(const WatchPlayerPunishmentsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.WatchPlayerPunishmentsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.punishment_id() != 0) {
    _internal_set_punishment_id(from._internal_punishment_id());
  }
}

void WatchPlayerPunishmentsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.WatchPlayerPunishmentsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchPlayerPunishmentsResponse::CopyFrom(const WatchPlayerPunishmentsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.WatchPlayerPunishmentsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchPlayerPunishmentsResponse::IsInitialized() const {
  return true;
}

void WatchPlayerPunishmentsResponse::InternalSwap(WatchPlayerPunishmentsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(punishment_id_, other->punishment_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchPlayerPunishmentsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WatchPunishmentsRequest::InitAsDefaultInstance() {
}
class WatchPunishmentsRequest::_Internal {
 public:
};

WatchPunishmentsRequest::WatchPunishmentsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.WatchPunishmentsRequest)
}
WatchPunishmentsRequest::WatchPunishmentsRequest(const WatchPunishmentsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.economy.WatchPunishmentsRequest)
}

void WatchPunishmentsRequest::SharedCtor() {
}

WatchPunishmentsRequest::~WatchPunishmentsRequest() {
  // @@protoc_insertion_point(destructor:mruv.economy.WatchPunishmentsRequest)
  SharedDtor();
}

void WatchPunishmentsRequest::SharedDtor() {
}

void WatchPunishmentsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchPunishmentsRequest& WatchPunishmentsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WatchPunishmentsRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void WatchPunishmentsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.WatchPunishmentsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* WatchPunishmentsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchPunishmentsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.WatchPunishmentsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.WatchPunishmentsRequest)
  return target;
}

size_t WatchPunishmentsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.WatchPunishmentsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchPunishmentsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.WatchPunishmentsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchPunishmentsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WatchPunishmentsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.WatchPunishmentsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.WatchPunishmentsRequest)
    MergeFrom(*source);
  }
}

void WatchPunishmentsRequest::MergeFrom(const WatchPunishmentsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.WatchPunishmentsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WatchPunishmentsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.WatchPunishmentsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchPunishmentsRequest::CopyFrom(const WatchPunishmentsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.WatchPunishmentsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchPunishmentsRequest::IsInitialized() const {
  return true;
}

void WatchPunishmentsRequest::InternalSwap(WatchPunishmentsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchPunishmentsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WatchPunishmentsResponse::InitAsDefaultInstance() {
}
class WatchPunishmentsResponse::_Internal {
 public:
};

WatchPunishmentsResponse::WatchPunishmentsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.economy.WatchPunishmentsResponse)
}
WatchPunishmentsResponse::WatchPunishmentsResponse(const WatchPunishmentsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&character_) -
    reinterpret_cast<char*>(&type_)) + sizeof(character_));
  // @@protoc_insertion_point(copy_constructor:mruv.economy.WatchPunishmentsResponse)
}

void WatchPunishmentsResponse::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&character_) -
      reinterpret_cast<char*>(&type_)) + sizeof(character_));
}

WatchPunishmentsResponse::~WatchPunishmentsResponse() {
  // @@protoc_insertion_point(destructor:mruv.economy.WatchPunishmentsResponse)
  SharedDtor();
}

void WatchPunishmentsResponse::SharedDtor() {
}

void WatchPunishmentsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchPunishmentsResponse& WatchPunishmentsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WatchPunishmentsResponse_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void WatchPunishmentsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.economy.WatchPunishmentsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&character_) -
      reinterpret_cast<char*>(&type_)) + sizeof(character_));
  _internal_metadata_.Clear();
}

const char* WatchPunishmentsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mruv.economy.PunishmentType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::mruv::economy::PunishmentType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 punishment_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          punishment_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 player = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 character = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          character_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchPunishmentsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.economy.WatchPunishmentsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mruv.economy.PunishmentType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // uint32 punishment_id = 2;
  if (this->punishment_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_punishment_id(), target);
  }

  // uint32 player = 3;
  if (this->player() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_player(), target);
  }

  // uint32 character = 4;
  if (this->character() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_character(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.economy.WatchPunishmentsResponse)
  return target;
}

size_t WatchPunishmentsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.economy.WatchPunishmentsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mruv.economy.PunishmentType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 punishment_id = 2;
  if (this->punishment_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_punishment_id());
  }

  // uint32 player = 3;
  if (this->player() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player());
  }

  // uint32 character = 4;
  if (this->character() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_character());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchPunishmentsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.economy.WatchPunishmentsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchPunishmentsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WatchPunishmentsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.economy.WatchPunishmentsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.economy.WatchPunishmentsResponse)
    MergeFrom(*source);
  }
}

void WatchPunishmentsResponse::MergeFrom(const WatchPunishmentsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.economy.WatchPunishmentsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.punishment_id() != 0) {
    _internal_set_punishment_id(from._internal_punishment_id());
  }
  if (from.player() != 0) {
    _internal_set_player(from._internal_player());
  }
  if (from.character() != 0) {
    _internal_set_character(from._internal_character());
  }
}

void WatchPunishmentsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.economy.WatchPunishmentsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchPunishmentsResponse::CopyFrom(const WatchPunishmentsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.economy.WatchPunishmentsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchPunishmentsResponse::IsInitialized() const {
  return true;
}

void WatchPunishmentsResponse::InternalSwap(WatchPunishmentsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(punishment_id_, other->punishment_id_);
  swap(player_, other->player_);
  swap(character_, other->character_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchPunishmentsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace economy
}  // namespace mruv
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mruv::economy::BanMessage* Arena::CreateMaybeMessage< ::mruv::economy::BanMessage >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::BanMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::WarnMessage* Arena::CreateMaybeMessage< ::mruv::economy::WarnMessage >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::WarnMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::BlockMessage* Arena::CreateMaybeMessage< ::mruv::economy::BlockMessage >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::BlockMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::AdminJailMessage* Arena::CreateMaybeMessage< ::mruv::economy::AdminJailMessage >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::AdminJailMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::UnBanMessage* Arena::CreateMaybeMessage< ::mruv::economy::UnBanMessage >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::UnBanMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::UnBlockMessage* Arena::CreateMaybeMessage< ::mruv::economy::UnBlockMessage >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::UnBlockMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::UnWarnMessage* Arena::CreateMaybeMessage< ::mruv::economy::UnWarnMessage >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::UnWarnMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::UnAdminJailMessage* Arena::CreateMaybeMessage< ::mruv::economy::UnAdminJailMessage >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::UnAdminJailMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::BanRequest* Arena::CreateMaybeMessage< ::mruv::economy::BanRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::BanRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::BanResponse* Arena::CreateMaybeMessage< ::mruv::economy::BanResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::BanResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::BlockRequest* Arena::CreateMaybeMessage< ::mruv::economy::BlockRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::BlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::BlockResponse* Arena::CreateMaybeMessage< ::mruv::economy::BlockResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::BlockResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::WarnRequest* Arena::CreateMaybeMessage< ::mruv::economy::WarnRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::WarnRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::WarnResponse* Arena::CreateMaybeMessage< ::mruv::economy::WarnResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::WarnResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::AdminJailRequest* Arena::CreateMaybeMessage< ::mruv::economy::AdminJailRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::AdminJailRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::AdminJailResponse* Arena::CreateMaybeMessage< ::mruv::economy::AdminJailResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::AdminJailResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::MuteGlobalChatsRequest* Arena::CreateMaybeMessage< ::mruv::economy::MuteGlobalChatsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::MuteGlobalChatsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::MuteGlobalChatsResponse* Arena::CreateMaybeMessage< ::mruv::economy::MuteGlobalChatsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::MuteGlobalChatsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::UnBanRequest* Arena::CreateMaybeMessage< ::mruv::economy::UnBanRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::UnBanRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::UnBanResponse* Arena::CreateMaybeMessage< ::mruv::economy::UnBanResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::UnBanResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::UnWarnRequest* Arena::CreateMaybeMessage< ::mruv::economy::UnWarnRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::UnWarnRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::UnWarnResponse* Arena::CreateMaybeMessage< ::mruv::economy::UnWarnResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::UnWarnResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::UnAdminJailRequest* Arena::CreateMaybeMessage< ::mruv::economy::UnAdminJailRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::UnAdminJailRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::UnAdminJailResponse* Arena::CreateMaybeMessage< ::mruv::economy::UnAdminJailResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::UnAdminJailResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::UnMuteGlobalChatsRequest* Arena::CreateMaybeMessage< ::mruv::economy::UnMuteGlobalChatsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::UnMuteGlobalChatsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::UnMuteGlobalChatsResponse* Arena::CreateMaybeMessage< ::mruv::economy::UnMuteGlobalChatsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::UnMuteGlobalChatsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::GetPlayerBansRequest* Arena::CreateMaybeMessage< ::mruv::economy::GetPlayerBansRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::GetPlayerBansRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::GetPlayerBansResponse* Arena::CreateMaybeMessage< ::mruv::economy::GetPlayerBansResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::GetPlayerBansResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::GetPlayerWarnsRequest* Arena::CreateMaybeMessage< ::mruv::economy::GetPlayerWarnsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::GetPlayerWarnsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::GetPlayerWarnsResponse* Arena::CreateMaybeMessage< ::mruv::economy::GetPlayerWarnsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::GetPlayerWarnsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::GetPlayerAdminJailRequest* Arena::CreateMaybeMessage< ::mruv::economy::GetPlayerAdminJailRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::GetPlayerAdminJailRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::GetPlayerAdminJailResponse* Arena::CreateMaybeMessage< ::mruv::economy::GetPlayerAdminJailResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::GetPlayerAdminJailResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::GetBanRequest* Arena::CreateMaybeMessage< ::mruv::economy::GetBanRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::GetBanRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::GetWarnRequest* Arena::CreateMaybeMessage< ::mruv::economy::GetWarnRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::GetWarnRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::GetBlockRequest* Arena::CreateMaybeMessage< ::mruv::economy::GetBlockRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::GetBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::IsPlayerBannedRequest* Arena::CreateMaybeMessage< ::mruv::economy::IsPlayerBannedRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::IsPlayerBannedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::IsPlayerBannedResponse* Arena::CreateMaybeMessage< ::mruv::economy::IsPlayerBannedResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::IsPlayerBannedResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::IsCharacterBlockedRequest* Arena::CreateMaybeMessage< ::mruv::economy::IsCharacterBlockedRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::IsCharacterBlockedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::IsCharacterBlockedResponse* Arena::CreateMaybeMessage< ::mruv::economy::IsCharacterBlockedResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::IsCharacterBlockedResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::IsCharacterJailedRequest* Arena::CreateMaybeMessage< ::mruv::economy::IsCharacterJailedRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::IsCharacterJailedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::IsCharacterJailedResponse* Arena::CreateMaybeMessage< ::mruv::economy::IsCharacterJailedResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::IsCharacterJailedResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::WatchBansRequest* Arena::CreateMaybeMessage< ::mruv::economy::WatchBansRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::WatchBansRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::WatchBlocksRequest* Arena::CreateMaybeMessage< ::mruv::economy::WatchBlocksRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::WatchBlocksRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::WatchWarnsRequest* Arena::CreateMaybeMessage< ::mruv::economy::WatchWarnsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::WatchWarnsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::WatchAdminJailsRequest* Arena::CreateMaybeMessage< ::mruv::economy::WatchAdminJailsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::WatchAdminJailsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::WatchUnBansRequest* Arena::CreateMaybeMessage< ::mruv::economy::WatchUnBansRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::WatchUnBansRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::WatchUnBlocksRequest* Arena::CreateMaybeMessage< ::mruv::economy::WatchUnBlocksRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::WatchUnBlocksRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::WatchUnWarnsRequest* Arena::CreateMaybeMessage< ::mruv::economy::WatchUnWarnsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::WatchUnWarnsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::WatchUnAdminJailsRequest* Arena::CreateMaybeMessage< ::mruv::economy::WatchUnAdminJailsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::WatchUnAdminJailsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::WatchPlayerAcquittalsRequest* Arena::CreateMaybeMessage< ::mruv::economy::WatchPlayerAcquittalsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::WatchPlayerAcquittalsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::WatchPlayerAcquittalsResponse* Arena::CreateMaybeMessage< ::mruv::economy::WatchPlayerAcquittalsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::WatchPlayerAcquittalsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::WatchPlayerPunishmentsRequest* Arena::CreateMaybeMessage< ::mruv::economy::WatchPlayerPunishmentsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::WatchPlayerPunishmentsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::WatchPlayerPunishmentsResponse* Arena::CreateMaybeMessage< ::mruv::economy::WatchPlayerPunishmentsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::WatchPlayerPunishmentsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::WatchPunishmentsRequest* Arena::CreateMaybeMessage< ::mruv::economy::WatchPunishmentsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::WatchPunishmentsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::economy::WatchPunishmentsResponse* Arena::CreateMaybeMessage< ::mruv::economy::WatchPunishmentsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::economy::WatchPunishmentsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
