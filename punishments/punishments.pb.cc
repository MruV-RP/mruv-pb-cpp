// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: punishments/punishments.proto

#include "punishments/punishments.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_punishments_2fpunishments_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BanMessage_punishments_2fpunishments_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_punishments_2fpunishments_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WarnMessage_punishments_2fpunishments_2eproto;
namespace mruv {
namespace punishments {
class BanMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BanMessage> _instance;
} _BanMessage_default_instance_;
class WarnMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WarnMessage> _instance;
} _WarnMessage_default_instance_;
class BlockMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlockMessage> _instance;
} _BlockMessage_default_instance_;
class AdminJailMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdminJailMessage> _instance;
} _AdminJailMessage_default_instance_;
class UnBanMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnBanMessage> _instance;
} _UnBanMessage_default_instance_;
class UnBlockMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnBlockMessage> _instance;
} _UnBlockMessage_default_instance_;
class UnWarnMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnWarnMessage> _instance;
} _UnWarnMessage_default_instance_;
class UnAdminJailMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnAdminJailMessage> _instance;
} _UnAdminJailMessage_default_instance_;
class BanRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BanRequest> _instance;
} _BanRequest_default_instance_;
class BanResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BanResponse> _instance;
} _BanResponse_default_instance_;
class BlockRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlockRequest> _instance;
} _BlockRequest_default_instance_;
class BlockResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlockResponse> _instance;
} _BlockResponse_default_instance_;
class WarnRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WarnRequest> _instance;
} _WarnRequest_default_instance_;
class WarnResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WarnResponse> _instance;
} _WarnResponse_default_instance_;
class AdminJailRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdminJailRequest> _instance;
} _AdminJailRequest_default_instance_;
class AdminJailResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdminJailResponse> _instance;
} _AdminJailResponse_default_instance_;
class MuteGlobalChatsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MuteGlobalChatsRequest> _instance;
} _MuteGlobalChatsRequest_default_instance_;
class MuteGlobalChatsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MuteGlobalChatsResponse> _instance;
} _MuteGlobalChatsResponse_default_instance_;
class UnBanRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnBanRequest> _instance;
} _UnBanRequest_default_instance_;
class UnBanResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnBanResponse> _instance;
} _UnBanResponse_default_instance_;
class UnBlockRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnBlockRequest> _instance;
} _UnBlockRequest_default_instance_;
class UnBlockResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnBlockResponse> _instance;
} _UnBlockResponse_default_instance_;
class UnWarnRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnWarnRequest> _instance;
} _UnWarnRequest_default_instance_;
class UnWarnResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnWarnResponse> _instance;
} _UnWarnResponse_default_instance_;
class UnAdminJailRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnAdminJailRequest> _instance;
} _UnAdminJailRequest_default_instance_;
class UnAdminJailResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnAdminJailResponse> _instance;
} _UnAdminJailResponse_default_instance_;
class UnMuteGlobalChatsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnMuteGlobalChatsRequest> _instance;
} _UnMuteGlobalChatsRequest_default_instance_;
class UnMuteGlobalChatsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnMuteGlobalChatsResponse> _instance;
} _UnMuteGlobalChatsResponse_default_instance_;
class GetPlayerBansRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPlayerBansRequest> _instance;
} _GetPlayerBansRequest_default_instance_;
class GetPlayerBansResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPlayerBansResponse> _instance;
} _GetPlayerBansResponse_default_instance_;
class GetPlayerWarnsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPlayerWarnsRequest> _instance;
} _GetPlayerWarnsRequest_default_instance_;
class GetPlayerWarnsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPlayerWarnsResponse> _instance;
} _GetPlayerWarnsResponse_default_instance_;
class GetPlayerAdminJailRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPlayerAdminJailRequest> _instance;
} _GetPlayerAdminJailRequest_default_instance_;
class GetPlayerAdminJailResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPlayerAdminJailResponse> _instance;
} _GetPlayerAdminJailResponse_default_instance_;
class GetBanRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBanRequest> _instance;
} _GetBanRequest_default_instance_;
class GetWarnRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetWarnRequest> _instance;
} _GetWarnRequest_default_instance_;
class GetBlockRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBlockRequest> _instance;
} _GetBlockRequest_default_instance_;
class IsPlayerBannedRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IsPlayerBannedRequest> _instance;
} _IsPlayerBannedRequest_default_instance_;
class IsPlayerBannedResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IsPlayerBannedResponse> _instance;
} _IsPlayerBannedResponse_default_instance_;
class IsCharacterBlockedRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IsCharacterBlockedRequest> _instance;
} _IsCharacterBlockedRequest_default_instance_;
class IsCharacterBlockedResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IsCharacterBlockedResponse> _instance;
} _IsCharacterBlockedResponse_default_instance_;
class IsCharacterJailedRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IsCharacterJailedRequest> _instance;
} _IsCharacterJailedRequest_default_instance_;
class IsCharacterJailedResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IsCharacterJailedResponse> _instance;
} _IsCharacterJailedResponse_default_instance_;
class WatchBansRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WatchBansRequest> _instance;
} _WatchBansRequest_default_instance_;
class WatchBlocksRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WatchBlocksRequest> _instance;
} _WatchBlocksRequest_default_instance_;
class WatchWarnsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WatchWarnsRequest> _instance;
} _WatchWarnsRequest_default_instance_;
class WatchAdminJailsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WatchAdminJailsRequest> _instance;
} _WatchAdminJailsRequest_default_instance_;
class WatchUnBansRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WatchUnBansRequest> _instance;
} _WatchUnBansRequest_default_instance_;
class WatchUnBlocksRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WatchUnBlocksRequest> _instance;
} _WatchUnBlocksRequest_default_instance_;
class WatchUnWarnsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WatchUnWarnsRequest> _instance;
} _WatchUnWarnsRequest_default_instance_;
class WatchUnAdminJailsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WatchUnAdminJailsRequest> _instance;
} _WatchUnAdminJailsRequest_default_instance_;
class WatchPlayerAcquittalsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WatchPlayerAcquittalsRequest> _instance;
} _WatchPlayerAcquittalsRequest_default_instance_;
class WatchPlayerAcquittalsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WatchPlayerAcquittalsResponse> _instance;
} _WatchPlayerAcquittalsResponse_default_instance_;
class WatchPlayerPunishmentsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WatchPlayerPunishmentsRequest> _instance;
} _WatchPlayerPunishmentsRequest_default_instance_;
class WatchPlayerPunishmentsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WatchPlayerPunishmentsResponse> _instance;
} _WatchPlayerPunishmentsResponse_default_instance_;
class WatchPunishmentsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WatchPunishmentsRequest> _instance;
} _WatchPunishmentsRequest_default_instance_;
class WatchPunishmentsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WatchPunishmentsResponse> _instance;
} _WatchPunishmentsResponse_default_instance_;
}  // namespace punishments
}  // namespace mruv
static void InitDefaultsscc_info_AdminJailMessage_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_AdminJailMessage_default_instance_;
    new (ptr) ::mruv::punishments::AdminJailMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::AdminJailMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdminJailMessage_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AdminJailMessage_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_AdminJailRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_AdminJailRequest_default_instance_;
    new (ptr) ::mruv::punishments::AdminJailRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::AdminJailRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdminJailRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AdminJailRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_AdminJailResponse_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_AdminJailResponse_default_instance_;
    new (ptr) ::mruv::punishments::AdminJailResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::AdminJailResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdminJailResponse_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AdminJailResponse_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_BanMessage_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_BanMessage_default_instance_;
    new (ptr) ::mruv::punishments::BanMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::BanMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BanMessage_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BanMessage_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_BanRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_BanRequest_default_instance_;
    new (ptr) ::mruv::punishments::BanRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::BanRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BanRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BanRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_BanResponse_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_BanResponse_default_instance_;
    new (ptr) ::mruv::punishments::BanResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::BanResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BanResponse_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BanResponse_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_BlockMessage_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_BlockMessage_default_instance_;
    new (ptr) ::mruv::punishments::BlockMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::BlockMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockMessage_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BlockMessage_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_BlockRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_BlockRequest_default_instance_;
    new (ptr) ::mruv::punishments::BlockRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::BlockRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BlockRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_BlockResponse_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_BlockResponse_default_instance_;
    new (ptr) ::mruv::punishments::BlockResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::BlockResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockResponse_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BlockResponse_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_GetBanRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_GetBanRequest_default_instance_;
    new (ptr) ::mruv::punishments::GetBanRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::GetBanRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetBanRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetBanRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_GetBlockRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_GetBlockRequest_default_instance_;
    new (ptr) ::mruv::punishments::GetBlockRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::GetBlockRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetBlockRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetBlockRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_GetPlayerAdminJailRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_GetPlayerAdminJailRequest_default_instance_;
    new (ptr) ::mruv::punishments::GetPlayerAdminJailRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::GetPlayerAdminJailRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetPlayerAdminJailRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetPlayerAdminJailRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_GetPlayerAdminJailResponse_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_GetPlayerAdminJailResponse_default_instance_;
    new (ptr) ::mruv::punishments::GetPlayerAdminJailResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::GetPlayerAdminJailResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetPlayerAdminJailResponse_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetPlayerAdminJailResponse_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_GetPlayerBansRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_GetPlayerBansRequest_default_instance_;
    new (ptr) ::mruv::punishments::GetPlayerBansRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::GetPlayerBansRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetPlayerBansRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetPlayerBansRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_GetPlayerBansResponse_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_GetPlayerBansResponse_default_instance_;
    new (ptr) ::mruv::punishments::GetPlayerBansResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::GetPlayerBansResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetPlayerBansResponse_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetPlayerBansResponse_punishments_2fpunishments_2eproto}, {
      &scc_info_BanMessage_punishments_2fpunishments_2eproto.base,}};

static void InitDefaultsscc_info_GetPlayerWarnsRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_GetPlayerWarnsRequest_default_instance_;
    new (ptr) ::mruv::punishments::GetPlayerWarnsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::GetPlayerWarnsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetPlayerWarnsRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetPlayerWarnsRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_GetPlayerWarnsResponse_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_GetPlayerWarnsResponse_default_instance_;
    new (ptr) ::mruv::punishments::GetPlayerWarnsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::GetPlayerWarnsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetPlayerWarnsResponse_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetPlayerWarnsResponse_punishments_2fpunishments_2eproto}, {
      &scc_info_WarnMessage_punishments_2fpunishments_2eproto.base,}};

static void InitDefaultsscc_info_GetWarnRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_GetWarnRequest_default_instance_;
    new (ptr) ::mruv::punishments::GetWarnRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::GetWarnRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetWarnRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetWarnRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_IsCharacterBlockedRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_IsCharacterBlockedRequest_default_instance_;
    new (ptr) ::mruv::punishments::IsCharacterBlockedRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::IsCharacterBlockedRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IsCharacterBlockedRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IsCharacterBlockedRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_IsCharacterBlockedResponse_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_IsCharacterBlockedResponse_default_instance_;
    new (ptr) ::mruv::punishments::IsCharacterBlockedResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::IsCharacterBlockedResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IsCharacterBlockedResponse_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IsCharacterBlockedResponse_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_IsCharacterJailedRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_IsCharacterJailedRequest_default_instance_;
    new (ptr) ::mruv::punishments::IsCharacterJailedRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::IsCharacterJailedRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IsCharacterJailedRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IsCharacterJailedRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_IsCharacterJailedResponse_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_IsCharacterJailedResponse_default_instance_;
    new (ptr) ::mruv::punishments::IsCharacterJailedResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::IsCharacterJailedResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IsCharacterJailedResponse_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IsCharacterJailedResponse_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_IsPlayerBannedRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_IsPlayerBannedRequest_default_instance_;
    new (ptr) ::mruv::punishments::IsPlayerBannedRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::IsPlayerBannedRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IsPlayerBannedRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IsPlayerBannedRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_IsPlayerBannedResponse_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_IsPlayerBannedResponse_default_instance_;
    new (ptr) ::mruv::punishments::IsPlayerBannedResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::IsPlayerBannedResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IsPlayerBannedResponse_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IsPlayerBannedResponse_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_MuteGlobalChatsRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_MuteGlobalChatsRequest_default_instance_;
    new (ptr) ::mruv::punishments::MuteGlobalChatsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::MuteGlobalChatsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MuteGlobalChatsRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MuteGlobalChatsRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_MuteGlobalChatsResponse_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_MuteGlobalChatsResponse_default_instance_;
    new (ptr) ::mruv::punishments::MuteGlobalChatsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::MuteGlobalChatsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MuteGlobalChatsResponse_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MuteGlobalChatsResponse_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_UnAdminJailMessage_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_UnAdminJailMessage_default_instance_;
    new (ptr) ::mruv::punishments::UnAdminJailMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::UnAdminJailMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnAdminJailMessage_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnAdminJailMessage_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_UnAdminJailRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_UnAdminJailRequest_default_instance_;
    new (ptr) ::mruv::punishments::UnAdminJailRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::UnAdminJailRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnAdminJailRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnAdminJailRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_UnAdminJailResponse_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_UnAdminJailResponse_default_instance_;
    new (ptr) ::mruv::punishments::UnAdminJailResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::UnAdminJailResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnAdminJailResponse_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnAdminJailResponse_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_UnBanMessage_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_UnBanMessage_default_instance_;
    new (ptr) ::mruv::punishments::UnBanMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::UnBanMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnBanMessage_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnBanMessage_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_UnBanRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_UnBanRequest_default_instance_;
    new (ptr) ::mruv::punishments::UnBanRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::UnBanRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnBanRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnBanRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_UnBanResponse_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_UnBanResponse_default_instance_;
    new (ptr) ::mruv::punishments::UnBanResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::UnBanResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnBanResponse_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnBanResponse_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_UnBlockMessage_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_UnBlockMessage_default_instance_;
    new (ptr) ::mruv::punishments::UnBlockMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::UnBlockMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnBlockMessage_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnBlockMessage_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_UnBlockRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_UnBlockRequest_default_instance_;
    new (ptr) ::mruv::punishments::UnBlockRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::UnBlockRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnBlockRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnBlockRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_UnBlockResponse_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_UnBlockResponse_default_instance_;
    new (ptr) ::mruv::punishments::UnBlockResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::UnBlockResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnBlockResponse_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnBlockResponse_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_UnMuteGlobalChatsRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_UnMuteGlobalChatsRequest_default_instance_;
    new (ptr) ::mruv::punishments::UnMuteGlobalChatsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::UnMuteGlobalChatsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnMuteGlobalChatsRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnMuteGlobalChatsRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_UnMuteGlobalChatsResponse_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_UnMuteGlobalChatsResponse_default_instance_;
    new (ptr) ::mruv::punishments::UnMuteGlobalChatsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::UnMuteGlobalChatsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnMuteGlobalChatsResponse_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnMuteGlobalChatsResponse_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_UnWarnMessage_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_UnWarnMessage_default_instance_;
    new (ptr) ::mruv::punishments::UnWarnMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::UnWarnMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnWarnMessage_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnWarnMessage_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_UnWarnRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_UnWarnRequest_default_instance_;
    new (ptr) ::mruv::punishments::UnWarnRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::UnWarnRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnWarnRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnWarnRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_UnWarnResponse_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_UnWarnResponse_default_instance_;
    new (ptr) ::mruv::punishments::UnWarnResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::UnWarnResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnWarnResponse_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnWarnResponse_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_WarnMessage_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_WarnMessage_default_instance_;
    new (ptr) ::mruv::punishments::WarnMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::WarnMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WarnMessage_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WarnMessage_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_WarnRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_WarnRequest_default_instance_;
    new (ptr) ::mruv::punishments::WarnRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::WarnRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WarnRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WarnRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_WarnResponse_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_WarnResponse_default_instance_;
    new (ptr) ::mruv::punishments::WarnResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::WarnResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WarnResponse_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WarnResponse_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_WatchAdminJailsRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_WatchAdminJailsRequest_default_instance_;
    new (ptr) ::mruv::punishments::WatchAdminJailsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::WatchAdminJailsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatchAdminJailsRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WatchAdminJailsRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_WatchBansRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_WatchBansRequest_default_instance_;
    new (ptr) ::mruv::punishments::WatchBansRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::WatchBansRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatchBansRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WatchBansRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_WatchBlocksRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_WatchBlocksRequest_default_instance_;
    new (ptr) ::mruv::punishments::WatchBlocksRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::WatchBlocksRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatchBlocksRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WatchBlocksRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_WatchPlayerAcquittalsRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_WatchPlayerAcquittalsRequest_default_instance_;
    new (ptr) ::mruv::punishments::WatchPlayerAcquittalsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::WatchPlayerAcquittalsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatchPlayerAcquittalsRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WatchPlayerAcquittalsRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_WatchPlayerAcquittalsResponse_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_WatchPlayerAcquittalsResponse_default_instance_;
    new (ptr) ::mruv::punishments::WatchPlayerAcquittalsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::WatchPlayerAcquittalsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatchPlayerAcquittalsResponse_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WatchPlayerAcquittalsResponse_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_WatchPlayerPunishmentsRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_WatchPlayerPunishmentsRequest_default_instance_;
    new (ptr) ::mruv::punishments::WatchPlayerPunishmentsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::WatchPlayerPunishmentsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatchPlayerPunishmentsRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WatchPlayerPunishmentsRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_WatchPlayerPunishmentsResponse_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_WatchPlayerPunishmentsResponse_default_instance_;
    new (ptr) ::mruv::punishments::WatchPlayerPunishmentsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::WatchPlayerPunishmentsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatchPlayerPunishmentsResponse_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WatchPlayerPunishmentsResponse_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_WatchPunishmentsRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_WatchPunishmentsRequest_default_instance_;
    new (ptr) ::mruv::punishments::WatchPunishmentsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::WatchPunishmentsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatchPunishmentsRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WatchPunishmentsRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_WatchPunishmentsResponse_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_WatchPunishmentsResponse_default_instance_;
    new (ptr) ::mruv::punishments::WatchPunishmentsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::WatchPunishmentsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatchPunishmentsResponse_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WatchPunishmentsResponse_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_WatchUnAdminJailsRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_WatchUnAdminJailsRequest_default_instance_;
    new (ptr) ::mruv::punishments::WatchUnAdminJailsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::WatchUnAdminJailsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatchUnAdminJailsRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WatchUnAdminJailsRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_WatchUnBansRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_WatchUnBansRequest_default_instance_;
    new (ptr) ::mruv::punishments::WatchUnBansRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::WatchUnBansRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatchUnBansRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WatchUnBansRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_WatchUnBlocksRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_WatchUnBlocksRequest_default_instance_;
    new (ptr) ::mruv::punishments::WatchUnBlocksRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::WatchUnBlocksRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatchUnBlocksRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WatchUnBlocksRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_WatchUnWarnsRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_WatchUnWarnsRequest_default_instance_;
    new (ptr) ::mruv::punishments::WatchUnWarnsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::WatchUnWarnsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatchUnWarnsRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WatchUnWarnsRequest_punishments_2fpunishments_2eproto}, {}};

static void InitDefaultsscc_info_WatchWarnsRequest_punishments_2fpunishments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::punishments::_WatchWarnsRequest_default_instance_;
    new (ptr) ::mruv::punishments::WatchWarnsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::punishments::WatchWarnsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatchWarnsRequest_punishments_2fpunishments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WatchWarnsRequest_punishments_2fpunishments_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_punishments_2fpunishments_2eproto[57];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_punishments_2fpunishments_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_punishments_2fpunishments_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_punishments_2fpunishments_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::BanMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::BanMessage, player_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::BanMessage, character_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::BanMessage, ip_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::BanMessage, expiration_date_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::BanMessage, reason_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::BanMessage, admin_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::BanMessage, ban_date_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::BanMessage, active_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::BanMessage, unban_date_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::BanMessage, unban_admin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::WarnMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::WarnMessage, player_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::WarnMessage, character_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::WarnMessage, expiration_date_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::WarnMessage, reason_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::WarnMessage, admin_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::WarnMessage, warn_date_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::WarnMessage, active_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::WarnMessage, unwarn_date_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::WarnMessage, unwarn_admin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::BlockMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::BlockMessage, player_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::BlockMessage, character_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::BlockMessage, reason_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::BlockMessage, admin_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::BlockMessage, block_date_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::BlockMessage, active_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::BlockMessage, unblock_date_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::BlockMessage, unblock_admin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::AdminJailMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::AdminJailMessage, player_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::AdminJailMessage, character_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::AdminJailMessage, reason_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::AdminJailMessage, admin_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::AdminJailMessage, aj_date_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::AdminJailMessage, jail_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::UnBanMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::UnBanMessage, player_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::UnBanMessage, ban_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::UnBlockMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::UnBlockMessage, player_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::UnBlockMessage, block_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::UnWarnMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::UnWarnMessage, player_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::UnWarnMessage, warn_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::UnAdminJailMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::UnAdminJailMessage, player_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::UnAdminJailMessage, character_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::BanRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::BanRequest, player_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::BanRequest, character_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::BanRequest, ip_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::BanRequest, time_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::BanRequest, reason_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::BanRequest, admin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::BanResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::BanResponse, ban_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::BlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::BlockRequest, character_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::BlockRequest, reason_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::BlockRequest, admin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::BlockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::BlockResponse, block_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::WarnRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::WarnRequest, player_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::WarnRequest, character_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::WarnRequest, time_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::WarnRequest, reason_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::WarnRequest, admin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::WarnResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::WarnResponse, warn_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::AdminJailRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::AdminJailRequest, character_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::AdminJailRequest, time_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::AdminJailRequest, reason_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::AdminJailRequest, admin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::AdminJailResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::MuteGlobalChatsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::MuteGlobalChatsRequest, account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::MuteGlobalChatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::UnBanRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::UnBanRequest, ban_id_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::UnBanRequest, reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::UnBanResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::UnBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::UnBlockRequest, block_id_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::UnBlockRequest, reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::UnBlockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::UnWarnRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::UnWarnRequest, warn_id_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::UnWarnRequest, reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::UnWarnResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::UnAdminJailRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::UnAdminJailRequest, character_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::UnAdminJailResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::UnMuteGlobalChatsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::UnMuteGlobalChatsRequest, account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::UnMuteGlobalChatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::GetPlayerBansRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::GetPlayerBansRequest, player_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::GetPlayerBansRequest, ip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::GetPlayerBansResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::GetPlayerBansResponse, bans_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::GetPlayerWarnsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::GetPlayerWarnsRequest, player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::GetPlayerWarnsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::GetPlayerWarnsResponse, warns_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::GetPlayerAdminJailRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::GetPlayerAdminJailRequest, character_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::GetPlayerAdminJailResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::GetPlayerAdminJailResponse, jail_time_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::GetPlayerAdminJailResponse, reason_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::GetPlayerAdminJailResponse, admin_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::GetPlayerAdminJailResponse, date_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::GetBanRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::GetBanRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::GetWarnRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::GetWarnRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::GetBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::GetBlockRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::IsPlayerBannedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::IsPlayerBannedRequest, player_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::IsPlayerBannedRequest, ip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::IsPlayerBannedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::IsPlayerBannedResponse, banned_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::IsPlayerBannedResponse, ban_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::IsCharacterBlockedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::IsCharacterBlockedRequest, character_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::IsCharacterBlockedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::IsCharacterBlockedResponse, blocked_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::IsCharacterBlockedResponse, block_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::IsCharacterJailedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::IsCharacterJailedRequest, character_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::IsCharacterJailedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::IsCharacterJailedResponse, jailed_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::IsCharacterJailedResponse, jail_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::WatchBansRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::WatchBlocksRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::WatchWarnsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::WatchAdminJailsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::WatchUnBansRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::WatchUnBlocksRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::WatchUnWarnsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::WatchUnAdminJailsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::WatchPlayerAcquittalsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::WatchPlayerAcquittalsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::WatchPlayerPunishmentsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::WatchPlayerPunishmentsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::WatchPlayerPunishmentsResponse, type_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::WatchPlayerPunishmentsResponse, punishment_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::WatchPunishmentsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::WatchPunishmentsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::WatchPunishmentsResponse, type_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::WatchPunishmentsResponse, punishment_id_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::WatchPunishmentsResponse, player_),
  PROTOBUF_FIELD_OFFSET(::mruv::punishments::WatchPunishmentsResponse, character_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mruv::punishments::BanMessage)},
  { 15, -1, sizeof(::mruv::punishments::WarnMessage)},
  { 29, -1, sizeof(::mruv::punishments::BlockMessage)},
  { 42, -1, sizeof(::mruv::punishments::AdminJailMessage)},
  { 53, -1, sizeof(::mruv::punishments::UnBanMessage)},
  { 60, -1, sizeof(::mruv::punishments::UnBlockMessage)},
  { 67, -1, sizeof(::mruv::punishments::UnWarnMessage)},
  { 74, -1, sizeof(::mruv::punishments::UnAdminJailMessage)},
  { 81, -1, sizeof(::mruv::punishments::BanRequest)},
  { 92, -1, sizeof(::mruv::punishments::BanResponse)},
  { 98, -1, sizeof(::mruv::punishments::BlockRequest)},
  { 106, -1, sizeof(::mruv::punishments::BlockResponse)},
  { 112, -1, sizeof(::mruv::punishments::WarnRequest)},
  { 122, -1, sizeof(::mruv::punishments::WarnResponse)},
  { 128, -1, sizeof(::mruv::punishments::AdminJailRequest)},
  { 137, -1, sizeof(::mruv::punishments::AdminJailResponse)},
  { 142, -1, sizeof(::mruv::punishments::MuteGlobalChatsRequest)},
  { 148, -1, sizeof(::mruv::punishments::MuteGlobalChatsResponse)},
  { 153, -1, sizeof(::mruv::punishments::UnBanRequest)},
  { 160, -1, sizeof(::mruv::punishments::UnBanResponse)},
  { 165, -1, sizeof(::mruv::punishments::UnBlockRequest)},
  { 172, -1, sizeof(::mruv::punishments::UnBlockResponse)},
  { 177, -1, sizeof(::mruv::punishments::UnWarnRequest)},
  { 184, -1, sizeof(::mruv::punishments::UnWarnResponse)},
  { 189, -1, sizeof(::mruv::punishments::UnAdminJailRequest)},
  { 195, -1, sizeof(::mruv::punishments::UnAdminJailResponse)},
  { 200, -1, sizeof(::mruv::punishments::UnMuteGlobalChatsRequest)},
  { 206, -1, sizeof(::mruv::punishments::UnMuteGlobalChatsResponse)},
  { 211, -1, sizeof(::mruv::punishments::GetPlayerBansRequest)},
  { 218, -1, sizeof(::mruv::punishments::GetPlayerBansResponse)},
  { 224, -1, sizeof(::mruv::punishments::GetPlayerWarnsRequest)},
  { 230, -1, sizeof(::mruv::punishments::GetPlayerWarnsResponse)},
  { 236, -1, sizeof(::mruv::punishments::GetPlayerAdminJailRequest)},
  { 242, -1, sizeof(::mruv::punishments::GetPlayerAdminJailResponse)},
  { 251, -1, sizeof(::mruv::punishments::GetBanRequest)},
  { 257, -1, sizeof(::mruv::punishments::GetWarnRequest)},
  { 263, -1, sizeof(::mruv::punishments::GetBlockRequest)},
  { 269, -1, sizeof(::mruv::punishments::IsPlayerBannedRequest)},
  { 276, -1, sizeof(::mruv::punishments::IsPlayerBannedResponse)},
  { 283, -1, sizeof(::mruv::punishments::IsCharacterBlockedRequest)},
  { 289, -1, sizeof(::mruv::punishments::IsCharacterBlockedResponse)},
  { 296, -1, sizeof(::mruv::punishments::IsCharacterJailedRequest)},
  { 302, -1, sizeof(::mruv::punishments::IsCharacterJailedResponse)},
  { 309, -1, sizeof(::mruv::punishments::WatchBansRequest)},
  { 314, -1, sizeof(::mruv::punishments::WatchBlocksRequest)},
  { 319, -1, sizeof(::mruv::punishments::WatchWarnsRequest)},
  { 324, -1, sizeof(::mruv::punishments::WatchAdminJailsRequest)},
  { 329, -1, sizeof(::mruv::punishments::WatchUnBansRequest)},
  { 334, -1, sizeof(::mruv::punishments::WatchUnBlocksRequest)},
  { 339, -1, sizeof(::mruv::punishments::WatchUnWarnsRequest)},
  { 344, -1, sizeof(::mruv::punishments::WatchUnAdminJailsRequest)},
  { 349, -1, sizeof(::mruv::punishments::WatchPlayerAcquittalsRequest)},
  { 354, -1, sizeof(::mruv::punishments::WatchPlayerAcquittalsResponse)},
  { 359, -1, sizeof(::mruv::punishments::WatchPlayerPunishmentsRequest)},
  { 364, -1, sizeof(::mruv::punishments::WatchPlayerPunishmentsResponse)},
  { 371, -1, sizeof(::mruv::punishments::WatchPunishmentsRequest)},
  { 376, -1, sizeof(::mruv::punishments::WatchPunishmentsResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_BanMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_WarnMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_BlockMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_AdminJailMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_UnBanMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_UnBlockMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_UnWarnMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_UnAdminJailMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_BanRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_BanResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_BlockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_BlockResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_WarnRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_WarnResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_AdminJailRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_AdminJailResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_MuteGlobalChatsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_MuteGlobalChatsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_UnBanRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_UnBanResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_UnBlockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_UnBlockResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_UnWarnRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_UnWarnResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_UnAdminJailRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_UnAdminJailResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_UnMuteGlobalChatsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_UnMuteGlobalChatsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_GetPlayerBansRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_GetPlayerBansResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_GetPlayerWarnsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_GetPlayerWarnsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_GetPlayerAdminJailRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_GetPlayerAdminJailResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_GetBanRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_GetWarnRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_GetBlockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_IsPlayerBannedRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_IsPlayerBannedResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_IsCharacterBlockedRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_IsCharacterBlockedResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_IsCharacterJailedRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_IsCharacterJailedResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_WatchBansRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_WatchBlocksRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_WatchWarnsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_WatchAdminJailsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_WatchUnBansRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_WatchUnBlocksRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_WatchUnWarnsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_WatchUnAdminJailsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_WatchPlayerAcquittalsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_WatchPlayerAcquittalsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_WatchPlayerPunishmentsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_WatchPlayerPunishmentsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_WatchPunishmentsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::punishments::_WatchPunishmentsResponse_default_instance_),
};

const char descriptor_table_protodef_punishments_2fpunishments_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035punishments/punishments.proto\022\020mruv.pu"
  "nishments\032\034google/api/annotations.proto\""
  "\276\001\n\nBanMessage\022\016\n\006player\030\001 \001(\r\022\021\n\tcharac"
  "ter\030\002 \001(\r\022\n\n\002ip\030\003 \001(\t\022\027\n\017expiration_date"
  "\030\004 \001(\003\022\016\n\006reason\030\005 \001(\t\022\r\n\005admin\030\006 \001(\r\022\020\n"
  "\010ban_date\030\007 \001(\003\022\016\n\006active\030\010 \001(\010\022\022\n\nunban"
  "_date\030\t \001(\003\022\023\n\013unban_admin\030\n \001(\r\"\266\001\n\013War"
  "nMessage\022\016\n\006player\030\001 \001(\r\022\021\n\tcharacter\030\002 "
  "\001(\r\022\027\n\017expiration_date\030\003 \001(\003\022\016\n\006reason\030\004"
  " \001(\t\022\r\n\005admin\030\005 \001(\r\022\021\n\twarn_date\030\006 \001(\003\022\016"
  "\n\006active\030\007 \001(\010\022\023\n\013unwarn_date\030\010 \001(\003\022\024\n\014u"
  "nwarn_admin\030\t \001(\r\"\241\001\n\014BlockMessage\022\016\n\006pl"
  "ayer\030\001 \001(\r\022\021\n\tcharacter\030\002 \001(\r\022\016\n\006reason\030"
  "\003 \001(\t\022\r\n\005admin\030\004 \001(\r\022\022\n\nblock_date\030\005 \001(\003"
  "\022\016\n\006active\030\006 \001(\010\022\024\n\014unblock_date\030\007 \001(\003\022\025"
  "\n\runblock_admin\030\010 \001(\r\"x\n\020AdminJailMessag"
  "e\022\016\n\006player\030\001 \001(\r\022\021\n\tcharacter\030\002 \001(\r\022\016\n\006"
  "reason\030\003 \001(\t\022\r\n\005admin\030\004 \001(\r\022\017\n\007aj_date\030\005"
  " \001(\003\022\021\n\tjail_time\030\006 \001(\r\".\n\014UnBanMessage\022"
  "\016\n\006player\030\001 \001(\r\022\016\n\006ban_id\030\002 \001(\r\"2\n\016UnBlo"
  "ckMessage\022\016\n\006player\030\001 \001(\r\022\020\n\010block_id\030\002 "
  "\001(\r\"0\n\rUnWarnMessage\022\016\n\006player\030\001 \001(\r\022\017\n\007"
  "warn_id\030\002 \001(\r\"7\n\022UnAdminJailMessage\022\016\n\006p"
  "layer\030\001 \001(\r\022\021\n\tcharacter\030\002 \001(\r\"h\n\nBanReq"
  "uest\022\016\n\006player\030\001 \001(\r\022\021\n\tcharacter\030\002 \001(\r\022"
  "\n\n\002ip\030\003 \001(\t\022\014\n\004time\030\004 \001(\r\022\016\n\006reason\030\005 \001("
  "\t\022\r\n\005admin\030\006 \001(\r\"\035\n\013BanResponse\022\016\n\006ban_i"
  "d\030\001 \001(\r\"@\n\014BlockRequest\022\021\n\tcharacter\030\001 \001"
  "(\r\022\016\n\006reason\030\002 \001(\t\022\r\n\005admin\030\003 \001(\r\"!\n\rBlo"
  "ckResponse\022\020\n\010block_id\030\001 \001(\r\"]\n\013WarnRequ"
  "est\022\016\n\006player\030\001 \001(\r\022\021\n\tcharacter\030\002 \001(\r\022\014"
  "\n\004time\030\003 \001(\r\022\016\n\006reason\030\004 \001(\t\022\r\n\005admin\030\005 "
  "\001(\r\"\037\n\014WarnResponse\022\017\n\007warn_id\030\001 \001(\r\"R\n\020"
  "AdminJailRequest\022\021\n\tcharacter\030\001 \001(\r\022\014\n\004t"
  "ime\030\002 \001(\r\022\016\n\006reason\030\003 \001(\t\022\r\n\005admin\030\004 \001(\r"
  "\"\023\n\021AdminJailResponse\")\n\026MuteGlobalChats"
  "Request\022\017\n\007account\030\001 \001(\r\"\031\n\027MuteGlobalCh"
  "atsResponse\".\n\014UnBanRequest\022\016\n\006ban_id\030\001 "
  "\001(\r\022\016\n\006reason\030\002 \001(\t\"\017\n\rUnBanResponse\"2\n\016"
  "UnBlockRequest\022\020\n\010block_id\030\001 \001(\r\022\016\n\006reas"
  "on\030\002 \001(\t\"\021\n\017UnBlockResponse\"0\n\rUnWarnReq"
  "uest\022\017\n\007warn_id\030\001 \001(\r\022\016\n\006reason\030\002 \001(\t\"\020\n"
  "\016UnWarnResponse\"\'\n\022UnAdminJailRequest\022\021\n"
  "\tcharacter\030\001 \001(\r\"\025\n\023UnAdminJailResponse\""
  "+\n\030UnMuteGlobalChatsRequest\022\017\n\007account\030\001"
  " \001(\r\"\033\n\031UnMuteGlobalChatsResponse\"2\n\024Get"
  "PlayerBansRequest\022\016\n\006player\030\001 \001(\r\022\n\n\002ip\030"
  "\002 \001(\t\"C\n\025GetPlayerBansResponse\022*\n\004bans\030\001"
  " \003(\0132\034.mruv.punishments.BanMessage\"\'\n\025Ge"
  "tPlayerWarnsRequest\022\016\n\006player\030\001 \001(\r\"F\n\026G"
  "etPlayerWarnsResponse\022,\n\005warns\030\001 \003(\0132\035.m"
  "ruv.punishments.WarnMessage\".\n\031GetPlayer"
  "AdminJailRequest\022\021\n\tcharacter\030\001 \001(\r\"\\\n\032G"
  "etPlayerAdminJailResponse\022\021\n\tjail_time\030\001"
  " \001(\r\022\016\n\006reason\030\002 \001(\t\022\r\n\005admin\030\003 \001(\r\022\014\n\004d"
  "ate\030\004 \001(\003\"\033\n\rGetBanRequest\022\n\n\002id\030\001 \001(\r\"\034"
  "\n\016GetWarnRequest\022\n\n\002id\030\001 \001(\r\"\035\n\017GetBlock"
  "Request\022\n\n\002id\030\001 \001(\r\"3\n\025IsPlayerBannedReq"
  "uest\022\016\n\006player\030\001 \001(\r\022\n\n\002ip\030\002 \001(\t\"8\n\026IsPl"
  "ayerBannedResponse\022\016\n\006banned\030\001 \001(\010\022\016\n\006ba"
  "n_id\030\002 \001(\r\".\n\031IsCharacterBlockedRequest\022"
  "\021\n\tcharacter\030\001 \001(\r\"\?\n\032IsCharacterBlocked"
  "Response\022\017\n\007blocked\030\001 \001(\010\022\020\n\010block_id\030\002 "
  "\001(\r\"-\n\030IsCharacterJailedRequest\022\021\n\tchara"
  "cter\030\001 \001(\r\">\n\031IsCharacterJailedResponse\022"
  "\016\n\006jailed\030\001 \001(\010\022\021\n\tjail_time\030\002 \001(\r\"\022\n\020Wa"
  "tchBansRequest\"\024\n\022WatchBlocksRequest\"\023\n\021"
  "WatchWarnsRequest\"\030\n\026WatchAdminJailsRequ"
  "est\"\024\n\022WatchUnBansRequest\"\026\n\024WatchUnBloc"
  "ksRequest\"\025\n\023WatchUnWarnsRequest\"\032\n\030Watc"
  "hUnAdminJailsRequest\"\036\n\034WatchPlayerAcqui"
  "ttalsRequest\"\037\n\035WatchPlayerAcquittalsRes"
  "ponse\"\037\n\035WatchPlayerPunishmentsRequest\"g"
  "\n\036WatchPlayerPunishmentsResponse\022.\n\004type"
  "\030\001 \001(\0162 .mruv.punishments.PunishmentType"
  "\022\025\n\rpunishment_id\030\002 \001(\r\"\031\n\027WatchPunishme"
  "ntsRequest\"\204\001\n\030WatchPunishmentsResponse\022"
  ".\n\004type\030\001 \001(\0162 .mruv.punishments.Punishm"
  "entType\022\025\n\rpunishment_id\030\002 \001(\r\022\016\n\006player"
  "\030\003 \001(\r\022\021\n\tcharacter\030\004 \001(\r*V\n\016PunishmentT"
  "ype\022\026\n\022UNKNOWN_PUNISHMENT\020\000\022\007\n\003BAN\020\001\022\t\n\005"
  "BLOCK\020\002\022\010\n\004WARN\020\003\022\016\n\nADMIN_JAIL\020\004*]\n\016Acq"
  "uittalsType\022\024\n\020UNKNOWN_ACQUITAL\020\000\022\t\n\005UNB"
  "AN\020\001\022\013\n\007UNBLOCK\020\002\022\n\n\006UNWARN\020\003\022\021\n\rUN_ADMI"
  "N_JAIL\020\0042\312\033\n\026MruVPunishmentsService\022k\n\003B"
  "an\022\034.mruv.punishments.BanRequest\032\035.mruv."
  "punishments.BanResponse\"\'\202\323\344\223\002!\"\034/v1/pun"
  "ishments/ban/{player}:\001*\022v\n\005Block\022\036.mruv"
  ".punishments.BlockRequest\032\037.mruv.punishm"
  "ents.BlockResponse\",\202\323\344\223\002&\"!/v1/punishme"
  "nts/block/{character}:\001*\022o\n\004Warn\022\035.mruv."
  "punishments.WarnRequest\032\036.mruv.punishmen"
  "ts.WarnResponse\"(\202\323\344\223\002\"\"\035/v1/punishments"
  "/warn/{player}:\001*\022\177\n\tAdminJail\022\".mruv.pu"
  "nishments.AdminJailRequest\032#.mruv.punish"
  "ments.AdminJailResponse\")\202\323\344\223\002#\"\036/v1/pun"
  "ishments/aj/{character}:\001*\022\221\001\n\017MuteGloba"
  "lChats\022(.mruv.punishments.MuteGlobalChat"
  "sRequest\032).mruv.punishments.MuteGlobalCh"
  "atsResponse\")\202\323\344\223\002#\"\036/v1/punishments/mut"
  "e/{account}:\001*\022n\n\005UnBan\022\036.mruv.punishmen"
  "ts.UnBanRequest\032\037.mruv.punishments.UnBan"
  "Response\"$\202\323\344\223\002\036*\034/v1/punishments/ban/{b"
  "an_id}\022y\n\007UnBlock\022 .mruv.punishments.UnB"
  "lockRequest\032!.mruv.punishments.UnBlockRe"
  "sponse\")\202\323\344\223\002#*!/v1/punishments/blocks/{"
  "block_id}\022s\n\006UnWarn\022\037.mruv.punishments.U"
  "nWarnRequest\032 .mruv.punishments.UnWarnRe"
  "sponse\"&\202\323\344\223\002 *\036/v1/punishments/warn/{wa"
  "rn_id}\022\202\001\n\013UnAdminJail\022$.mruv.punishment"
  "s.UnAdminJailRequest\032%.mruv.punishments."
  "UnAdminJailResponse\"&\202\323\344\223\002 *\036/v1/punishm"
  "ents/aj/{character}\022\224\001\n\021UnMuteGlobalChat"
  "s\022*.mruv.punishments.UnMuteGlobalChatsRe"
  "quest\032+.mruv.punishments.UnMuteGlobalCha"
  "tsResponse\"&\202\323\344\223\002 *\036/v1/punishments/mute"
  "/{account}\022\207\001\n\rGetPlayerBans\022&.mruv.puni"
  "shments.GetPlayerBansRequest\032\'.mruv.puni"
  "shments.GetPlayerBansResponse\"%\202\323\344\223\002\037\022\035/"
  "v1/punishments/bans/{player}\022\213\001\n\016GetPlay"
  "erWarns\022\'.mruv.punishments.GetPlayerWarn"
  "sRequest\032(.mruv.punishments.GetPlayerWar"
  "nsResponse\"&\202\323\344\223\002 \022\036/v1/punishments/warn"
  "s/{player}\022\227\001\n\022GetPlayerAdminJail\022+.mruv"
  ".punishments.GetPlayerAdminJailRequest\032,"
  ".mruv.punishments.GetPlayerAdminJailResp"
  "onse\"&\202\323\344\223\002 \022\036/v1/punishments/aj/{charac"
  "ter}\022j\n\006GetBan\022\037.mruv.punishments.GetBan"
  "Request\032\034.mruv.punishments.BanMessage\"!\202"
  "\323\344\223\002\033\022\031/v1/punishments/bans/{id}\022n\n\007GetW"
  "arn\022 .mruv.punishments.GetWarnRequest\032\035."
  "mruv.punishments.WarnMessage\"\"\202\323\344\223\002\034\022\032/v"
  "1/punishments/warns/{id}\022r\n\010GetBlock\022!.m"
  "ruv.punishments.GetBlockRequest\032\036.mruv.p"
  "unishments.BlockMessage\"#\202\323\344\223\002\035\022\033/v1/pun"
  "ishments/blocks/{id}\022\217\001\n\016IsPlayerBanned\022"
  "\'.mruv.punishments.IsPlayerBannedRequest"
  "\032(.mruv.punishments.IsPlayerBannedRespon"
  "se\"*\202\323\344\223\002$\022\"/v1/punishments/bans/{player"
  "}/{ip}\022q\n\022IsCharacterBlocked\022+.mruv.puni"
  "shments.IsCharacterBlockedRequest\032,.mruv"
  ".punishments.IsCharacterBlockedResponse\""
  "\000\022n\n\021IsCharacterJailed\022*.mruv.punishment"
  "s.IsCharacterJailedRequest\032+.mruv.punish"
  "ments.IsCharacterJailedResponse\"\000\022Q\n\tWat"
  "chBans\022\".mruv.punishments.WatchBansReque"
  "st\032\034.mruv.punishments.BanMessage\"\0000\001\022W\n\013"
  "WatchBlocks\022$.mruv.punishments.WatchBloc"
  "ksRequest\032\036.mruv.punishments.BlockMessag"
  "e\"\0000\001\022T\n\nWatchWarns\022#.mruv.punishments.W"
  "atchWarnsRequest\032\035.mruv.punishments.Warn"
  "Message\"\0000\001\022c\n\017WatchAdminJails\022(.mruv.pu"
  "nishments.WatchAdminJailsRequest\032\".mruv."
  "punishments.AdminJailMessage\"\0000\001\022W\n\013Watc"
  "hUnBans\022$.mruv.punishments.WatchUnBansRe"
  "quest\032\036.mruv.punishments.UnBanMessage\"\0000"
  "\001\022]\n\rWatchUnBlocks\022&.mruv.punishments.Wa"
  "tchUnBlocksRequest\032 .mruv.punishments.Un"
  "BlockMessage\"\0000\001\022Z\n\014WatchUnWarns\022%.mruv."
  "punishments.WatchUnWarnsRequest\032\037.mruv.p"
  "unishments.UnWarnMessage\"\0000\001\022i\n\021WatchUnA"
  "dminJails\022*.mruv.punishments.WatchUnAdmi"
  "nJailsRequest\032$.mruv.punishments.UnAdmin"
  "JailMessage\"\0000\001\022\177\n\026WatchPlayerPunishment"
  "s\022/.mruv.punishments.WatchPlayerPunishme"
  "ntsRequest\0320.mruv.punishments.WatchPlaye"
  "rPunishmentsResponse\"\0000\001\022|\n\025WatchPlayerA"
  "cquittals\022..mruv.punishments.WatchPlayer"
  "AcquittalsRequest\032/.mruv.punishments.Wat"
  "chPlayerAcquittalsResponse\"\0000\001\022m\n\020WatchP"
  "unishments\022).mruv.punishments.WatchPunis"
  "hmentsRequest\032*.mruv.punishments.WatchPu"
  "nishmentsResponse\"\0000\001B+Z)github.com/MruV"
  "-RP/mruv-pb-go/punishmentsb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_punishments_2fpunishments_2eproto_deps[1] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_punishments_2fpunishments_2eproto_sccs[57] = {
  &scc_info_AdminJailMessage_punishments_2fpunishments_2eproto.base,
  &scc_info_AdminJailRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_AdminJailResponse_punishments_2fpunishments_2eproto.base,
  &scc_info_BanMessage_punishments_2fpunishments_2eproto.base,
  &scc_info_BanRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_BanResponse_punishments_2fpunishments_2eproto.base,
  &scc_info_BlockMessage_punishments_2fpunishments_2eproto.base,
  &scc_info_BlockRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_BlockResponse_punishments_2fpunishments_2eproto.base,
  &scc_info_GetBanRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_GetBlockRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_GetPlayerAdminJailRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_GetPlayerAdminJailResponse_punishments_2fpunishments_2eproto.base,
  &scc_info_GetPlayerBansRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_GetPlayerBansResponse_punishments_2fpunishments_2eproto.base,
  &scc_info_GetPlayerWarnsRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_GetPlayerWarnsResponse_punishments_2fpunishments_2eproto.base,
  &scc_info_GetWarnRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_IsCharacterBlockedRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_IsCharacterBlockedResponse_punishments_2fpunishments_2eproto.base,
  &scc_info_IsCharacterJailedRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_IsCharacterJailedResponse_punishments_2fpunishments_2eproto.base,
  &scc_info_IsPlayerBannedRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_IsPlayerBannedResponse_punishments_2fpunishments_2eproto.base,
  &scc_info_MuteGlobalChatsRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_MuteGlobalChatsResponse_punishments_2fpunishments_2eproto.base,
  &scc_info_UnAdminJailMessage_punishments_2fpunishments_2eproto.base,
  &scc_info_UnAdminJailRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_UnAdminJailResponse_punishments_2fpunishments_2eproto.base,
  &scc_info_UnBanMessage_punishments_2fpunishments_2eproto.base,
  &scc_info_UnBanRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_UnBanResponse_punishments_2fpunishments_2eproto.base,
  &scc_info_UnBlockMessage_punishments_2fpunishments_2eproto.base,
  &scc_info_UnBlockRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_UnBlockResponse_punishments_2fpunishments_2eproto.base,
  &scc_info_UnMuteGlobalChatsRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_UnMuteGlobalChatsResponse_punishments_2fpunishments_2eproto.base,
  &scc_info_UnWarnMessage_punishments_2fpunishments_2eproto.base,
  &scc_info_UnWarnRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_UnWarnResponse_punishments_2fpunishments_2eproto.base,
  &scc_info_WarnMessage_punishments_2fpunishments_2eproto.base,
  &scc_info_WarnRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_WarnResponse_punishments_2fpunishments_2eproto.base,
  &scc_info_WatchAdminJailsRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_WatchBansRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_WatchBlocksRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_WatchPlayerAcquittalsRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_WatchPlayerAcquittalsResponse_punishments_2fpunishments_2eproto.base,
  &scc_info_WatchPlayerPunishmentsRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_WatchPlayerPunishmentsResponse_punishments_2fpunishments_2eproto.base,
  &scc_info_WatchPunishmentsRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_WatchPunishmentsResponse_punishments_2fpunishments_2eproto.base,
  &scc_info_WatchUnAdminJailsRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_WatchUnBansRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_WatchUnBlocksRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_WatchUnWarnsRequest_punishments_2fpunishments_2eproto.base,
  &scc_info_WatchWarnsRequest_punishments_2fpunishments_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_punishments_2fpunishments_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_punishments_2fpunishments_2eproto = {
  false, false, descriptor_table_protodef_punishments_2fpunishments_2eproto, "punishments/punishments.proto", 6954,
  &descriptor_table_punishments_2fpunishments_2eproto_once, descriptor_table_punishments_2fpunishments_2eproto_sccs, descriptor_table_punishments_2fpunishments_2eproto_deps, 57, 1,
  schemas, file_default_instances, TableStruct_punishments_2fpunishments_2eproto::offsets,
  file_level_metadata_punishments_2fpunishments_2eproto, 57, file_level_enum_descriptors_punishments_2fpunishments_2eproto, file_level_service_descriptors_punishments_2fpunishments_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_punishments_2fpunishments_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_punishments_2fpunishments_2eproto)), true);
namespace mruv {
namespace punishments {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PunishmentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_punishments_2fpunishments_2eproto);
  return file_level_enum_descriptors_punishments_2fpunishments_2eproto[0];
}
bool PunishmentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AcquittalsType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_punishments_2fpunishments_2eproto);
  return file_level_enum_descriptors_punishments_2fpunishments_2eproto[1];
}
bool AcquittalsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void BanMessage::InitAsDefaultInstance() {
}
class BanMessage::_Internal {
 public:
};

BanMessage::BanMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.BanMessage)
}
BanMessage::BanMessage(const BanMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip(),
      GetArena());
  }
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reason().empty()) {
    reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reason(),
      GetArena());
  }
  ::memcpy(&player_, &from.player_,
    static_cast<size_t>(reinterpret_cast<char*>(&unban_admin_) -
    reinterpret_cast<char*>(&player_)) + sizeof(unban_admin_));
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.BanMessage)
}

void BanMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BanMessage_punishments_2fpunishments_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unban_admin_) -
      reinterpret_cast<char*>(&player_)) + sizeof(unban_admin_));
}

BanMessage::~BanMessage() {
  // @@protoc_insertion_point(destructor:mruv.punishments.BanMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BanMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BanMessage::ArenaDtor(void* object) {
  BanMessage* _this = reinterpret_cast< BanMessage* >(object);
  (void)_this;
}
void BanMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BanMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BanMessage& BanMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BanMessage_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void BanMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.BanMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unban_admin_) -
      reinterpret_cast<char*>(&player_)) + sizeof(unban_admin_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BanMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 character = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          character_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.punishments.BanMessage.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 expiration_date = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          expiration_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reason = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.punishments.BanMessage.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 admin = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 ban_date = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ban_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool active = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 unban_date = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          unban_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 unban_admin = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          unban_admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BanMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.BanMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player = 1;
  if (this->player() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player(), target);
  }

  // uint32 character = 2;
  if (this->character() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_character(), target);
  }

  // string ip = 3;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.punishments.BanMessage.ip");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ip(), target);
  }

  // int64 expiration_date = 4;
  if (this->expiration_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_expiration_date(), target);
  }

  // string reason = 5;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.punishments.BanMessage.reason");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_reason(), target);
  }

  // uint32 admin = 6;
  if (this->admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_admin(), target);
  }

  // int64 ban_date = 7;
  if (this->ban_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_ban_date(), target);
  }

  // bool active = 8;
  if (this->active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_active(), target);
  }

  // int64 unban_date = 9;
  if (this->unban_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_unban_date(), target);
  }

  // uint32 unban_admin = 10;
  if (this->unban_admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_unban_admin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.BanMessage)
  return target;
}

size_t BanMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.BanMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 3;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string reason = 5;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // uint32 player = 1;
  if (this->player() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player());
  }

  // uint32 character = 2;
  if (this->character() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_character());
  }

  // int64 expiration_date = 4;
  if (this->expiration_date() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_expiration_date());
  }

  // int64 ban_date = 7;
  if (this->ban_date() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ban_date());
  }

  // uint32 admin = 6;
  if (this->admin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_admin());
  }

  // bool active = 8;
  if (this->active() != 0) {
    total_size += 1 + 1;
  }

  // int64 unban_date = 9;
  if (this->unban_date() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_unban_date());
  }

  // uint32 unban_admin = 10;
  if (this->unban_admin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_unban_admin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BanMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.BanMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const BanMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BanMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.BanMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.BanMessage)
    MergeFrom(*source);
  }
}

void BanMessage::MergeFrom(const BanMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.BanMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.reason().size() > 0) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.player() != 0) {
    _internal_set_player(from._internal_player());
  }
  if (from.character() != 0) {
    _internal_set_character(from._internal_character());
  }
  if (from.expiration_date() != 0) {
    _internal_set_expiration_date(from._internal_expiration_date());
  }
  if (from.ban_date() != 0) {
    _internal_set_ban_date(from._internal_ban_date());
  }
  if (from.admin() != 0) {
    _internal_set_admin(from._internal_admin());
  }
  if (from.active() != 0) {
    _internal_set_active(from._internal_active());
  }
  if (from.unban_date() != 0) {
    _internal_set_unban_date(from._internal_unban_date());
  }
  if (from.unban_admin() != 0) {
    _internal_set_unban_admin(from._internal_unban_admin());
  }
}

void BanMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.BanMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BanMessage::CopyFrom(const BanMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.BanMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BanMessage::IsInitialized() const {
  return true;
}

void BanMessage::InternalSwap(BanMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BanMessage, unban_admin_)
      + sizeof(BanMessage::unban_admin_)
      - PROTOBUF_FIELD_OFFSET(BanMessage, player_)>(
          reinterpret_cast<char*>(&player_),
          reinterpret_cast<char*>(&other->player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BanMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WarnMessage::InitAsDefaultInstance() {
}
class WarnMessage::_Internal {
 public:
};

WarnMessage::WarnMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.WarnMessage)
}
WarnMessage::WarnMessage(const WarnMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reason().empty()) {
    reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reason(),
      GetArena());
  }
  ::memcpy(&player_, &from.player_,
    static_cast<size_t>(reinterpret_cast<char*>(&unwarn_admin_) -
    reinterpret_cast<char*>(&player_)) + sizeof(unwarn_admin_));
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.WarnMessage)
}

void WarnMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WarnMessage_punishments_2fpunishments_2eproto.base);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unwarn_admin_) -
      reinterpret_cast<char*>(&player_)) + sizeof(unwarn_admin_));
}

WarnMessage::~WarnMessage() {
  // @@protoc_insertion_point(destructor:mruv.punishments.WarnMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WarnMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WarnMessage::ArenaDtor(void* object) {
  WarnMessage* _this = reinterpret_cast< WarnMessage* >(object);
  (void)_this;
}
void WarnMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WarnMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WarnMessage& WarnMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WarnMessage_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void WarnMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.WarnMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unwarn_admin_) -
      reinterpret_cast<char*>(&player_)) + sizeof(unwarn_admin_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WarnMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 character = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          character_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 expiration_date = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          expiration_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reason = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.punishments.WarnMessage.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 admin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 warn_date = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          warn_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool active = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 unwarn_date = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          unwarn_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 unwarn_admin = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          unwarn_admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WarnMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.WarnMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player = 1;
  if (this->player() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player(), target);
  }

  // uint32 character = 2;
  if (this->character() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_character(), target);
  }

  // int64 expiration_date = 3;
  if (this->expiration_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_expiration_date(), target);
  }

  // string reason = 4;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.punishments.WarnMessage.reason");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_reason(), target);
  }

  // uint32 admin = 5;
  if (this->admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_admin(), target);
  }

  // int64 warn_date = 6;
  if (this->warn_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_warn_date(), target);
  }

  // bool active = 7;
  if (this->active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_active(), target);
  }

  // int64 unwarn_date = 8;
  if (this->unwarn_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_unwarn_date(), target);
  }

  // uint32 unwarn_admin = 9;
  if (this->unwarn_admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_unwarn_admin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.WarnMessage)
  return target;
}

size_t WarnMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.WarnMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 4;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // uint32 player = 1;
  if (this->player() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player());
  }

  // uint32 character = 2;
  if (this->character() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_character());
  }

  // int64 expiration_date = 3;
  if (this->expiration_date() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_expiration_date());
  }

  // int64 warn_date = 6;
  if (this->warn_date() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_warn_date());
  }

  // uint32 admin = 5;
  if (this->admin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_admin());
  }

  // bool active = 7;
  if (this->active() != 0) {
    total_size += 1 + 1;
  }

  // int64 unwarn_date = 8;
  if (this->unwarn_date() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_unwarn_date());
  }

  // uint32 unwarn_admin = 9;
  if (this->unwarn_admin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_unwarn_admin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WarnMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.WarnMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const WarnMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WarnMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.WarnMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.WarnMessage)
    MergeFrom(*source);
  }
}

void WarnMessage::MergeFrom(const WarnMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.WarnMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason().size() > 0) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.player() != 0) {
    _internal_set_player(from._internal_player());
  }
  if (from.character() != 0) {
    _internal_set_character(from._internal_character());
  }
  if (from.expiration_date() != 0) {
    _internal_set_expiration_date(from._internal_expiration_date());
  }
  if (from.warn_date() != 0) {
    _internal_set_warn_date(from._internal_warn_date());
  }
  if (from.admin() != 0) {
    _internal_set_admin(from._internal_admin());
  }
  if (from.active() != 0) {
    _internal_set_active(from._internal_active());
  }
  if (from.unwarn_date() != 0) {
    _internal_set_unwarn_date(from._internal_unwarn_date());
  }
  if (from.unwarn_admin() != 0) {
    _internal_set_unwarn_admin(from._internal_unwarn_admin());
  }
}

void WarnMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.WarnMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarnMessage::CopyFrom(const WarnMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.WarnMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarnMessage::IsInitialized() const {
  return true;
}

void WarnMessage::InternalSwap(WarnMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WarnMessage, unwarn_admin_)
      + sizeof(WarnMessage::unwarn_admin_)
      - PROTOBUF_FIELD_OFFSET(WarnMessage, player_)>(
          reinterpret_cast<char*>(&player_),
          reinterpret_cast<char*>(&other->player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WarnMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BlockMessage::InitAsDefaultInstance() {
}
class BlockMessage::_Internal {
 public:
};

BlockMessage::BlockMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.BlockMessage)
}
BlockMessage::BlockMessage(const BlockMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reason().empty()) {
    reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reason(),
      GetArena());
  }
  ::memcpy(&player_, &from.player_,
    static_cast<size_t>(reinterpret_cast<char*>(&unblock_admin_) -
    reinterpret_cast<char*>(&player_)) + sizeof(unblock_admin_));
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.BlockMessage)
}

void BlockMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlockMessage_punishments_2fpunishments_2eproto.base);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unblock_admin_) -
      reinterpret_cast<char*>(&player_)) + sizeof(unblock_admin_));
}

BlockMessage::~BlockMessage() {
  // @@protoc_insertion_point(destructor:mruv.punishments.BlockMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlockMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BlockMessage::ArenaDtor(void* object) {
  BlockMessage* _this = reinterpret_cast< BlockMessage* >(object);
  (void)_this;
}
void BlockMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockMessage& BlockMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlockMessage_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void BlockMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.BlockMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unblock_admin_) -
      reinterpret_cast<char*>(&player_)) + sizeof(unblock_admin_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 character = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          character_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.punishments.BlockMessage.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 admin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 block_date = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          block_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool active = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 unblock_date = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          unblock_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 unblock_admin = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          unblock_admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.BlockMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player = 1;
  if (this->player() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player(), target);
  }

  // uint32 character = 2;
  if (this->character() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_character(), target);
  }

  // string reason = 3;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.punishments.BlockMessage.reason");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_reason(), target);
  }

  // uint32 admin = 4;
  if (this->admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_admin(), target);
  }

  // int64 block_date = 5;
  if (this->block_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_block_date(), target);
  }

  // bool active = 6;
  if (this->active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_active(), target);
  }

  // int64 unblock_date = 7;
  if (this->unblock_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_unblock_date(), target);
  }

  // uint32 unblock_admin = 8;
  if (this->unblock_admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_unblock_admin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.BlockMessage)
  return target;
}

size_t BlockMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.BlockMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 3;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // uint32 player = 1;
  if (this->player() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player());
  }

  // uint32 character = 2;
  if (this->character() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_character());
  }

  // int64 block_date = 5;
  if (this->block_date() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_block_date());
  }

  // uint32 admin = 4;
  if (this->admin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_admin());
  }

  // bool active = 6;
  if (this->active() != 0) {
    total_size += 1 + 1;
  }

  // int64 unblock_date = 7;
  if (this->unblock_date() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_unblock_date());
  }

  // uint32 unblock_admin = 8;
  if (this->unblock_admin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_unblock_admin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.BlockMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.BlockMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.BlockMessage)
    MergeFrom(*source);
  }
}

void BlockMessage::MergeFrom(const BlockMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.BlockMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason().size() > 0) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.player() != 0) {
    _internal_set_player(from._internal_player());
  }
  if (from.character() != 0) {
    _internal_set_character(from._internal_character());
  }
  if (from.block_date() != 0) {
    _internal_set_block_date(from._internal_block_date());
  }
  if (from.admin() != 0) {
    _internal_set_admin(from._internal_admin());
  }
  if (from.active() != 0) {
    _internal_set_active(from._internal_active());
  }
  if (from.unblock_date() != 0) {
    _internal_set_unblock_date(from._internal_unblock_date());
  }
  if (from.unblock_admin() != 0) {
    _internal_set_unblock_admin(from._internal_unblock_admin());
  }
}

void BlockMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.BlockMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockMessage::CopyFrom(const BlockMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.BlockMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockMessage::IsInitialized() const {
  return true;
}

void BlockMessage::InternalSwap(BlockMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockMessage, unblock_admin_)
      + sizeof(BlockMessage::unblock_admin_)
      - PROTOBUF_FIELD_OFFSET(BlockMessage, player_)>(
          reinterpret_cast<char*>(&player_),
          reinterpret_cast<char*>(&other->player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AdminJailMessage::InitAsDefaultInstance() {
}
class AdminJailMessage::_Internal {
 public:
};

AdminJailMessage::AdminJailMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.AdminJailMessage)
}
AdminJailMessage::AdminJailMessage(const AdminJailMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reason().empty()) {
    reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reason(),
      GetArena());
  }
  ::memcpy(&player_, &from.player_,
    static_cast<size_t>(reinterpret_cast<char*>(&jail_time_) -
    reinterpret_cast<char*>(&player_)) + sizeof(jail_time_));
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.AdminJailMessage)
}

void AdminJailMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AdminJailMessage_punishments_2fpunishments_2eproto.base);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&jail_time_) -
      reinterpret_cast<char*>(&player_)) + sizeof(jail_time_));
}

AdminJailMessage::~AdminJailMessage() {
  // @@protoc_insertion_point(destructor:mruv.punishments.AdminJailMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AdminJailMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AdminJailMessage::ArenaDtor(void* object) {
  AdminJailMessage* _this = reinterpret_cast< AdminJailMessage* >(object);
  (void)_this;
}
void AdminJailMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdminJailMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdminJailMessage& AdminJailMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdminJailMessage_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void AdminJailMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.AdminJailMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&jail_time_) -
      reinterpret_cast<char*>(&player_)) + sizeof(jail_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdminJailMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 character = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          character_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.punishments.AdminJailMessage.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 admin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 aj_date = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          aj_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 jail_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          jail_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdminJailMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.AdminJailMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player = 1;
  if (this->player() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player(), target);
  }

  // uint32 character = 2;
  if (this->character() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_character(), target);
  }

  // string reason = 3;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.punishments.AdminJailMessage.reason");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_reason(), target);
  }

  // uint32 admin = 4;
  if (this->admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_admin(), target);
  }

  // int64 aj_date = 5;
  if (this->aj_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_aj_date(), target);
  }

  // uint32 jail_time = 6;
  if (this->jail_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_jail_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.AdminJailMessage)
  return target;
}

size_t AdminJailMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.AdminJailMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 3;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // uint32 player = 1;
  if (this->player() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player());
  }

  // uint32 character = 2;
  if (this->character() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_character());
  }

  // int64 aj_date = 5;
  if (this->aj_date() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_aj_date());
  }

  // uint32 admin = 4;
  if (this->admin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_admin());
  }

  // uint32 jail_time = 6;
  if (this->jail_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_jail_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdminJailMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.AdminJailMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const AdminJailMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdminJailMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.AdminJailMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.AdminJailMessage)
    MergeFrom(*source);
  }
}

void AdminJailMessage::MergeFrom(const AdminJailMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.AdminJailMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason().size() > 0) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.player() != 0) {
    _internal_set_player(from._internal_player());
  }
  if (from.character() != 0) {
    _internal_set_character(from._internal_character());
  }
  if (from.aj_date() != 0) {
    _internal_set_aj_date(from._internal_aj_date());
  }
  if (from.admin() != 0) {
    _internal_set_admin(from._internal_admin());
  }
  if (from.jail_time() != 0) {
    _internal_set_jail_time(from._internal_jail_time());
  }
}

void AdminJailMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.AdminJailMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdminJailMessage::CopyFrom(const AdminJailMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.AdminJailMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminJailMessage::IsInitialized() const {
  return true;
}

void AdminJailMessage::InternalSwap(AdminJailMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AdminJailMessage, jail_time_)
      + sizeof(AdminJailMessage::jail_time_)
      - PROTOBUF_FIELD_OFFSET(AdminJailMessage, player_)>(
          reinterpret_cast<char*>(&player_),
          reinterpret_cast<char*>(&other->player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AdminJailMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnBanMessage::InitAsDefaultInstance() {
}
class UnBanMessage::_Internal {
 public:
};

UnBanMessage::UnBanMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.UnBanMessage)
}
UnBanMessage::UnBanMessage(const UnBanMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_, &from.player_,
    static_cast<size_t>(reinterpret_cast<char*>(&ban_id_) -
    reinterpret_cast<char*>(&player_)) + sizeof(ban_id_));
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.UnBanMessage)
}

void UnBanMessage::SharedCtor() {
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ban_id_) -
      reinterpret_cast<char*>(&player_)) + sizeof(ban_id_));
}

UnBanMessage::~UnBanMessage() {
  // @@protoc_insertion_point(destructor:mruv.punishments.UnBanMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnBanMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnBanMessage::ArenaDtor(void* object) {
  UnBanMessage* _this = reinterpret_cast< UnBanMessage* >(object);
  (void)_this;
}
void UnBanMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnBanMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnBanMessage& UnBanMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnBanMessage_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void UnBanMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.UnBanMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ban_id_) -
      reinterpret_cast<char*>(&player_)) + sizeof(ban_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnBanMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ban_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ban_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnBanMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.UnBanMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player = 1;
  if (this->player() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player(), target);
  }

  // uint32 ban_id = 2;
  if (this->ban_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ban_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.UnBanMessage)
  return target;
}

size_t UnBanMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.UnBanMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 player = 1;
  if (this->player() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player());
  }

  // uint32 ban_id = 2;
  if (this->ban_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ban_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnBanMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.UnBanMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const UnBanMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnBanMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.UnBanMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.UnBanMessage)
    MergeFrom(*source);
  }
}

void UnBanMessage::MergeFrom(const UnBanMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.UnBanMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player() != 0) {
    _internal_set_player(from._internal_player());
  }
  if (from.ban_id() != 0) {
    _internal_set_ban_id(from._internal_ban_id());
  }
}

void UnBanMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.UnBanMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnBanMessage::CopyFrom(const UnBanMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.UnBanMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnBanMessage::IsInitialized() const {
  return true;
}

void UnBanMessage::InternalSwap(UnBanMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnBanMessage, ban_id_)
      + sizeof(UnBanMessage::ban_id_)
      - PROTOBUF_FIELD_OFFSET(UnBanMessage, player_)>(
          reinterpret_cast<char*>(&player_),
          reinterpret_cast<char*>(&other->player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnBanMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnBlockMessage::InitAsDefaultInstance() {
}
class UnBlockMessage::_Internal {
 public:
};

UnBlockMessage::UnBlockMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.UnBlockMessage)
}
UnBlockMessage::UnBlockMessage(const UnBlockMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_, &from.player_,
    static_cast<size_t>(reinterpret_cast<char*>(&block_id_) -
    reinterpret_cast<char*>(&player_)) + sizeof(block_id_));
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.UnBlockMessage)
}

void UnBlockMessage::SharedCtor() {
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_id_) -
      reinterpret_cast<char*>(&player_)) + sizeof(block_id_));
}

UnBlockMessage::~UnBlockMessage() {
  // @@protoc_insertion_point(destructor:mruv.punishments.UnBlockMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnBlockMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnBlockMessage::ArenaDtor(void* object) {
  UnBlockMessage* _this = reinterpret_cast< UnBlockMessage* >(object);
  (void)_this;
}
void UnBlockMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnBlockMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnBlockMessage& UnBlockMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnBlockMessage_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void UnBlockMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.UnBlockMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_id_) -
      reinterpret_cast<char*>(&player_)) + sizeof(block_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnBlockMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 block_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          block_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnBlockMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.UnBlockMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player = 1;
  if (this->player() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player(), target);
  }

  // uint32 block_id = 2;
  if (this->block_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_block_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.UnBlockMessage)
  return target;
}

size_t UnBlockMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.UnBlockMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 player = 1;
  if (this->player() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player());
  }

  // uint32 block_id = 2;
  if (this->block_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_block_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnBlockMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.UnBlockMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const UnBlockMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnBlockMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.UnBlockMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.UnBlockMessage)
    MergeFrom(*source);
  }
}

void UnBlockMessage::MergeFrom(const UnBlockMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.UnBlockMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player() != 0) {
    _internal_set_player(from._internal_player());
  }
  if (from.block_id() != 0) {
    _internal_set_block_id(from._internal_block_id());
  }
}

void UnBlockMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.UnBlockMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnBlockMessage::CopyFrom(const UnBlockMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.UnBlockMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnBlockMessage::IsInitialized() const {
  return true;
}

void UnBlockMessage::InternalSwap(UnBlockMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnBlockMessage, block_id_)
      + sizeof(UnBlockMessage::block_id_)
      - PROTOBUF_FIELD_OFFSET(UnBlockMessage, player_)>(
          reinterpret_cast<char*>(&player_),
          reinterpret_cast<char*>(&other->player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnBlockMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnWarnMessage::InitAsDefaultInstance() {
}
class UnWarnMessage::_Internal {
 public:
};

UnWarnMessage::UnWarnMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.UnWarnMessage)
}
UnWarnMessage::UnWarnMessage(const UnWarnMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_, &from.player_,
    static_cast<size_t>(reinterpret_cast<char*>(&warn_id_) -
    reinterpret_cast<char*>(&player_)) + sizeof(warn_id_));
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.UnWarnMessage)
}

void UnWarnMessage::SharedCtor() {
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&warn_id_) -
      reinterpret_cast<char*>(&player_)) + sizeof(warn_id_));
}

UnWarnMessage::~UnWarnMessage() {
  // @@protoc_insertion_point(destructor:mruv.punishments.UnWarnMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnWarnMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnWarnMessage::ArenaDtor(void* object) {
  UnWarnMessage* _this = reinterpret_cast< UnWarnMessage* >(object);
  (void)_this;
}
void UnWarnMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnWarnMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnWarnMessage& UnWarnMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnWarnMessage_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void UnWarnMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.UnWarnMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&warn_id_) -
      reinterpret_cast<char*>(&player_)) + sizeof(warn_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnWarnMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 warn_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          warn_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnWarnMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.UnWarnMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player = 1;
  if (this->player() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player(), target);
  }

  // uint32 warn_id = 2;
  if (this->warn_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_warn_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.UnWarnMessage)
  return target;
}

size_t UnWarnMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.UnWarnMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 player = 1;
  if (this->player() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player());
  }

  // uint32 warn_id = 2;
  if (this->warn_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_warn_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnWarnMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.UnWarnMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const UnWarnMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnWarnMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.UnWarnMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.UnWarnMessage)
    MergeFrom(*source);
  }
}

void UnWarnMessage::MergeFrom(const UnWarnMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.UnWarnMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player() != 0) {
    _internal_set_player(from._internal_player());
  }
  if (from.warn_id() != 0) {
    _internal_set_warn_id(from._internal_warn_id());
  }
}

void UnWarnMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.UnWarnMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnWarnMessage::CopyFrom(const UnWarnMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.UnWarnMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnWarnMessage::IsInitialized() const {
  return true;
}

void UnWarnMessage::InternalSwap(UnWarnMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnWarnMessage, warn_id_)
      + sizeof(UnWarnMessage::warn_id_)
      - PROTOBUF_FIELD_OFFSET(UnWarnMessage, player_)>(
          reinterpret_cast<char*>(&player_),
          reinterpret_cast<char*>(&other->player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnWarnMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnAdminJailMessage::InitAsDefaultInstance() {
}
class UnAdminJailMessage::_Internal {
 public:
};

UnAdminJailMessage::UnAdminJailMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.UnAdminJailMessage)
}
UnAdminJailMessage::UnAdminJailMessage(const UnAdminJailMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_, &from.player_,
    static_cast<size_t>(reinterpret_cast<char*>(&character_) -
    reinterpret_cast<char*>(&player_)) + sizeof(character_));
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.UnAdminJailMessage)
}

void UnAdminJailMessage::SharedCtor() {
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&character_) -
      reinterpret_cast<char*>(&player_)) + sizeof(character_));
}

UnAdminJailMessage::~UnAdminJailMessage() {
  // @@protoc_insertion_point(destructor:mruv.punishments.UnAdminJailMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnAdminJailMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnAdminJailMessage::ArenaDtor(void* object) {
  UnAdminJailMessage* _this = reinterpret_cast< UnAdminJailMessage* >(object);
  (void)_this;
}
void UnAdminJailMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnAdminJailMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnAdminJailMessage& UnAdminJailMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnAdminJailMessage_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void UnAdminJailMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.UnAdminJailMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&character_) -
      reinterpret_cast<char*>(&player_)) + sizeof(character_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnAdminJailMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 character = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          character_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnAdminJailMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.UnAdminJailMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player = 1;
  if (this->player() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player(), target);
  }

  // uint32 character = 2;
  if (this->character() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_character(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.UnAdminJailMessage)
  return target;
}

size_t UnAdminJailMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.UnAdminJailMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 player = 1;
  if (this->player() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player());
  }

  // uint32 character = 2;
  if (this->character() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_character());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnAdminJailMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.UnAdminJailMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const UnAdminJailMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnAdminJailMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.UnAdminJailMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.UnAdminJailMessage)
    MergeFrom(*source);
  }
}

void UnAdminJailMessage::MergeFrom(const UnAdminJailMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.UnAdminJailMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player() != 0) {
    _internal_set_player(from._internal_player());
  }
  if (from.character() != 0) {
    _internal_set_character(from._internal_character());
  }
}

void UnAdminJailMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.UnAdminJailMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnAdminJailMessage::CopyFrom(const UnAdminJailMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.UnAdminJailMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnAdminJailMessage::IsInitialized() const {
  return true;
}

void UnAdminJailMessage::InternalSwap(UnAdminJailMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnAdminJailMessage, character_)
      + sizeof(UnAdminJailMessage::character_)
      - PROTOBUF_FIELD_OFFSET(UnAdminJailMessage, player_)>(
          reinterpret_cast<char*>(&player_),
          reinterpret_cast<char*>(&other->player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnAdminJailMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BanRequest::InitAsDefaultInstance() {
}
class BanRequest::_Internal {
 public:
};

BanRequest::BanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.BanRequest)
}
BanRequest::BanRequest(const BanRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip(),
      GetArena());
  }
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reason().empty()) {
    reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reason(),
      GetArena());
  }
  ::memcpy(&player_, &from.player_,
    static_cast<size_t>(reinterpret_cast<char*>(&admin_) -
    reinterpret_cast<char*>(&player_)) + sizeof(admin_));
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.BanRequest)
}

void BanRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BanRequest_punishments_2fpunishments_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&admin_) -
      reinterpret_cast<char*>(&player_)) + sizeof(admin_));
}

BanRequest::~BanRequest() {
  // @@protoc_insertion_point(destructor:mruv.punishments.BanRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BanRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BanRequest::ArenaDtor(void* object) {
  BanRequest* _this = reinterpret_cast< BanRequest* >(object);
  (void)_this;
}
void BanRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BanRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BanRequest& BanRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BanRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void BanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.BanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&admin_) -
      reinterpret_cast<char*>(&player_)) + sizeof(admin_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BanRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 character = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          character_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.punishments.BanRequest.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reason = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.punishments.BanRequest.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 admin = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BanRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.BanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player = 1;
  if (this->player() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player(), target);
  }

  // uint32 character = 2;
  if (this->character() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_character(), target);
  }

  // string ip = 3;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.punishments.BanRequest.ip");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ip(), target);
  }

  // uint32 time = 4;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_time(), target);
  }

  // string reason = 5;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.punishments.BanRequest.reason");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_reason(), target);
  }

  // uint32 admin = 6;
  if (this->admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_admin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.BanRequest)
  return target;
}

size_t BanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.BanRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 3;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string reason = 5;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // uint32 player = 1;
  if (this->player() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player());
  }

  // uint32 character = 2;
  if (this->character() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_character());
  }

  // uint32 time = 4;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_time());
  }

  // uint32 admin = 6;
  if (this->admin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_admin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BanRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.BanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BanRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BanRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.BanRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.BanRequest)
    MergeFrom(*source);
  }
}

void BanRequest::MergeFrom(const BanRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.BanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.reason().size() > 0) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.player() != 0) {
    _internal_set_player(from._internal_player());
  }
  if (from.character() != 0) {
    _internal_set_character(from._internal_character());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.admin() != 0) {
    _internal_set_admin(from._internal_admin());
  }
}

void BanRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.BanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BanRequest::CopyFrom(const BanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.BanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BanRequest::IsInitialized() const {
  return true;
}

void BanRequest::InternalSwap(BanRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BanRequest, admin_)
      + sizeof(BanRequest::admin_)
      - PROTOBUF_FIELD_OFFSET(BanRequest, player_)>(
          reinterpret_cast<char*>(&player_),
          reinterpret_cast<char*>(&other->player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BanRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BanResponse::InitAsDefaultInstance() {
}
class BanResponse::_Internal {
 public:
};

BanResponse::BanResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.BanResponse)
}
BanResponse::BanResponse(const BanResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ban_id_ = from.ban_id_;
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.BanResponse)
}

void BanResponse::SharedCtor() {
  ban_id_ = 0u;
}

BanResponse::~BanResponse() {
  // @@protoc_insertion_point(destructor:mruv.punishments.BanResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BanResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BanResponse::ArenaDtor(void* object) {
  BanResponse* _this = reinterpret_cast< BanResponse* >(object);
  (void)_this;
}
void BanResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BanResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BanResponse& BanResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BanResponse_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void BanResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.BanResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ban_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BanResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 ban_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ban_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BanResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.BanResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ban_id = 1;
  if (this->ban_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ban_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.BanResponse)
  return target;
}

size_t BanResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.BanResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 ban_id = 1;
  if (this->ban_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ban_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BanResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.BanResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BanResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BanResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.BanResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.BanResponse)
    MergeFrom(*source);
  }
}

void BanResponse::MergeFrom(const BanResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.BanResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ban_id() != 0) {
    _internal_set_ban_id(from._internal_ban_id());
  }
}

void BanResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.BanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BanResponse::CopyFrom(const BanResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.BanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BanResponse::IsInitialized() const {
  return true;
}

void BanResponse::InternalSwap(BanResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(ban_id_, other->ban_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BanResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BlockRequest::InitAsDefaultInstance() {
}
class BlockRequest::_Internal {
 public:
};

BlockRequest::BlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.BlockRequest)
}
BlockRequest::BlockRequest(const BlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reason().empty()) {
    reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reason(),
      GetArena());
  }
  ::memcpy(&character_, &from.character_,
    static_cast<size_t>(reinterpret_cast<char*>(&admin_) -
    reinterpret_cast<char*>(&character_)) + sizeof(admin_));
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.BlockRequest)
}

void BlockRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlockRequest_punishments_2fpunishments_2eproto.base);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&character_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&admin_) -
      reinterpret_cast<char*>(&character_)) + sizeof(admin_));
}

BlockRequest::~BlockRequest() {
  // @@protoc_insertion_point(destructor:mruv.punishments.BlockRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BlockRequest::ArenaDtor(void* object) {
  BlockRequest* _this = reinterpret_cast< BlockRequest* >(object);
  (void)_this;
}
void BlockRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockRequest& BlockRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlockRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void BlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.BlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&character_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&admin_) -
      reinterpret_cast<char*>(&character_)) + sizeof(admin_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 character = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          character_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.punishments.BlockRequest.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 admin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.BlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 character = 1;
  if (this->character() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_character(), target);
  }

  // string reason = 2;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.punishments.BlockRequest.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  // uint32 admin = 3;
  if (this->admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_admin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.BlockRequest)
  return target;
}

size_t BlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.BlockRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 2;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // uint32 character = 1;
  if (this->character() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_character());
  }

  // uint32 admin = 3;
  if (this->admin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_admin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.BlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.BlockRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.BlockRequest)
    MergeFrom(*source);
  }
}

void BlockRequest::MergeFrom(const BlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.BlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason().size() > 0) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.character() != 0) {
    _internal_set_character(from._internal_character());
  }
  if (from.admin() != 0) {
    _internal_set_admin(from._internal_admin());
  }
}

void BlockRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.BlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockRequest::CopyFrom(const BlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.BlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockRequest::IsInitialized() const {
  return true;
}

void BlockRequest::InternalSwap(BlockRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockRequest, admin_)
      + sizeof(BlockRequest::admin_)
      - PROTOBUF_FIELD_OFFSET(BlockRequest, character_)>(
          reinterpret_cast<char*>(&character_),
          reinterpret_cast<char*>(&other->character_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BlockResponse::InitAsDefaultInstance() {
}
class BlockResponse::_Internal {
 public:
};

BlockResponse::BlockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.BlockResponse)
}
BlockResponse::BlockResponse(const BlockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  block_id_ = from.block_id_;
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.BlockResponse)
}

void BlockResponse::SharedCtor() {
  block_id_ = 0u;
}

BlockResponse::~BlockResponse() {
  // @@protoc_insertion_point(destructor:mruv.punishments.BlockResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlockResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BlockResponse::ArenaDtor(void* object) {
  BlockResponse* _this = reinterpret_cast< BlockResponse* >(object);
  (void)_this;
}
void BlockResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockResponse& BlockResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlockResponse_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void BlockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.BlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 block_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          block_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.BlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 block_id = 1;
  if (this->block_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_block_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.BlockResponse)
  return target;
}

size_t BlockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.BlockResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 block_id = 1;
  if (this->block_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_block_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.BlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.BlockResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.BlockResponse)
    MergeFrom(*source);
  }
}

void BlockResponse::MergeFrom(const BlockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.BlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.block_id() != 0) {
    _internal_set_block_id(from._internal_block_id());
  }
}

void BlockResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.BlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockResponse::CopyFrom(const BlockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.BlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockResponse::IsInitialized() const {
  return true;
}

void BlockResponse::InternalSwap(BlockResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(block_id_, other->block_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WarnRequest::InitAsDefaultInstance() {
}
class WarnRequest::_Internal {
 public:
};

WarnRequest::WarnRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.WarnRequest)
}
WarnRequest::WarnRequest(const WarnRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reason().empty()) {
    reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reason(),
      GetArena());
  }
  ::memcpy(&player_, &from.player_,
    static_cast<size_t>(reinterpret_cast<char*>(&admin_) -
    reinterpret_cast<char*>(&player_)) + sizeof(admin_));
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.WarnRequest)
}

void WarnRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WarnRequest_punishments_2fpunishments_2eproto.base);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&admin_) -
      reinterpret_cast<char*>(&player_)) + sizeof(admin_));
}

WarnRequest::~WarnRequest() {
  // @@protoc_insertion_point(destructor:mruv.punishments.WarnRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WarnRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WarnRequest::ArenaDtor(void* object) {
  WarnRequest* _this = reinterpret_cast< WarnRequest* >(object);
  (void)_this;
}
void WarnRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WarnRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WarnRequest& WarnRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WarnRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void WarnRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.WarnRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&admin_) -
      reinterpret_cast<char*>(&player_)) + sizeof(admin_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WarnRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 character = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          character_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reason = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.punishments.WarnRequest.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 admin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WarnRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.WarnRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player = 1;
  if (this->player() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player(), target);
  }

  // uint32 character = 2;
  if (this->character() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_character(), target);
  }

  // uint32 time = 3;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_time(), target);
  }

  // string reason = 4;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.punishments.WarnRequest.reason");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_reason(), target);
  }

  // uint32 admin = 5;
  if (this->admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_admin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.WarnRequest)
  return target;
}

size_t WarnRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.WarnRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 4;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // uint32 player = 1;
  if (this->player() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player());
  }

  // uint32 character = 2;
  if (this->character() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_character());
  }

  // uint32 time = 3;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_time());
  }

  // uint32 admin = 5;
  if (this->admin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_admin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WarnRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.WarnRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WarnRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WarnRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.WarnRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.WarnRequest)
    MergeFrom(*source);
  }
}

void WarnRequest::MergeFrom(const WarnRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.WarnRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason().size() > 0) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.player() != 0) {
    _internal_set_player(from._internal_player());
  }
  if (from.character() != 0) {
    _internal_set_character(from._internal_character());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.admin() != 0) {
    _internal_set_admin(from._internal_admin());
  }
}

void WarnRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.WarnRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarnRequest::CopyFrom(const WarnRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.WarnRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarnRequest::IsInitialized() const {
  return true;
}

void WarnRequest::InternalSwap(WarnRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WarnRequest, admin_)
      + sizeof(WarnRequest::admin_)
      - PROTOBUF_FIELD_OFFSET(WarnRequest, player_)>(
          reinterpret_cast<char*>(&player_),
          reinterpret_cast<char*>(&other->player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WarnRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WarnResponse::InitAsDefaultInstance() {
}
class WarnResponse::_Internal {
 public:
};

WarnResponse::WarnResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.WarnResponse)
}
WarnResponse::WarnResponse(const WarnResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  warn_id_ = from.warn_id_;
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.WarnResponse)
}

void WarnResponse::SharedCtor() {
  warn_id_ = 0u;
}

WarnResponse::~WarnResponse() {
  // @@protoc_insertion_point(destructor:mruv.punishments.WarnResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WarnResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WarnResponse::ArenaDtor(void* object) {
  WarnResponse* _this = reinterpret_cast< WarnResponse* >(object);
  (void)_this;
}
void WarnResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WarnResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WarnResponse& WarnResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WarnResponse_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void WarnResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.WarnResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  warn_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WarnResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 warn_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          warn_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WarnResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.WarnResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 warn_id = 1;
  if (this->warn_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_warn_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.WarnResponse)
  return target;
}

size_t WarnResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.WarnResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 warn_id = 1;
  if (this->warn_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_warn_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WarnResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.WarnResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const WarnResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WarnResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.WarnResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.WarnResponse)
    MergeFrom(*source);
  }
}

void WarnResponse::MergeFrom(const WarnResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.WarnResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.warn_id() != 0) {
    _internal_set_warn_id(from._internal_warn_id());
  }
}

void WarnResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.WarnResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarnResponse::CopyFrom(const WarnResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.WarnResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarnResponse::IsInitialized() const {
  return true;
}

void WarnResponse::InternalSwap(WarnResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(warn_id_, other->warn_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WarnResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AdminJailRequest::InitAsDefaultInstance() {
}
class AdminJailRequest::_Internal {
 public:
};

AdminJailRequest::AdminJailRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.AdminJailRequest)
}
AdminJailRequest::AdminJailRequest(const AdminJailRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reason().empty()) {
    reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reason(),
      GetArena());
  }
  ::memcpy(&character_, &from.character_,
    static_cast<size_t>(reinterpret_cast<char*>(&admin_) -
    reinterpret_cast<char*>(&character_)) + sizeof(admin_));
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.AdminJailRequest)
}

void AdminJailRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AdminJailRequest_punishments_2fpunishments_2eproto.base);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&character_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&admin_) -
      reinterpret_cast<char*>(&character_)) + sizeof(admin_));
}

AdminJailRequest::~AdminJailRequest() {
  // @@protoc_insertion_point(destructor:mruv.punishments.AdminJailRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AdminJailRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AdminJailRequest::ArenaDtor(void* object) {
  AdminJailRequest* _this = reinterpret_cast< AdminJailRequest* >(object);
  (void)_this;
}
void AdminJailRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdminJailRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdminJailRequest& AdminJailRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdminJailRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void AdminJailRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.AdminJailRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&character_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&admin_) -
      reinterpret_cast<char*>(&character_)) + sizeof(admin_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdminJailRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 character = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          character_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.punishments.AdminJailRequest.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 admin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdminJailRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.AdminJailRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 character = 1;
  if (this->character() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_character(), target);
  }

  // uint32 time = 2;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_time(), target);
  }

  // string reason = 3;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.punishments.AdminJailRequest.reason");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_reason(), target);
  }

  // uint32 admin = 4;
  if (this->admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_admin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.AdminJailRequest)
  return target;
}

size_t AdminJailRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.AdminJailRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 3;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // uint32 character = 1;
  if (this->character() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_character());
  }

  // uint32 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_time());
  }

  // uint32 admin = 4;
  if (this->admin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_admin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdminJailRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.AdminJailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AdminJailRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdminJailRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.AdminJailRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.AdminJailRequest)
    MergeFrom(*source);
  }
}

void AdminJailRequest::MergeFrom(const AdminJailRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.AdminJailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason().size() > 0) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.character() != 0) {
    _internal_set_character(from._internal_character());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.admin() != 0) {
    _internal_set_admin(from._internal_admin());
  }
}

void AdminJailRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.AdminJailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdminJailRequest::CopyFrom(const AdminJailRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.AdminJailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminJailRequest::IsInitialized() const {
  return true;
}

void AdminJailRequest::InternalSwap(AdminJailRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AdminJailRequest, admin_)
      + sizeof(AdminJailRequest::admin_)
      - PROTOBUF_FIELD_OFFSET(AdminJailRequest, character_)>(
          reinterpret_cast<char*>(&character_),
          reinterpret_cast<char*>(&other->character_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AdminJailRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AdminJailResponse::InitAsDefaultInstance() {
}
class AdminJailResponse::_Internal {
 public:
};

AdminJailResponse::AdminJailResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.AdminJailResponse)
}
AdminJailResponse::AdminJailResponse(const AdminJailResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.AdminJailResponse)
}

void AdminJailResponse::SharedCtor() {
}

AdminJailResponse::~AdminJailResponse() {
  // @@protoc_insertion_point(destructor:mruv.punishments.AdminJailResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AdminJailResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AdminJailResponse::ArenaDtor(void* object) {
  AdminJailResponse* _this = reinterpret_cast< AdminJailResponse* >(object);
  (void)_this;
}
void AdminJailResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdminJailResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdminJailResponse& AdminJailResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdminJailResponse_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void AdminJailResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.AdminJailResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdminJailResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdminJailResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.AdminJailResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.AdminJailResponse)
  return target;
}

size_t AdminJailResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.AdminJailResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdminJailResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.AdminJailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AdminJailResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdminJailResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.AdminJailResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.AdminJailResponse)
    MergeFrom(*source);
  }
}

void AdminJailResponse::MergeFrom(const AdminJailResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.AdminJailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AdminJailResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.AdminJailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdminJailResponse::CopyFrom(const AdminJailResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.AdminJailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminJailResponse::IsInitialized() const {
  return true;
}

void AdminJailResponse::InternalSwap(AdminJailResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdminJailResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MuteGlobalChatsRequest::InitAsDefaultInstance() {
}
class MuteGlobalChatsRequest::_Internal {
 public:
};

MuteGlobalChatsRequest::MuteGlobalChatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.MuteGlobalChatsRequest)
}
MuteGlobalChatsRequest::MuteGlobalChatsRequest(const MuteGlobalChatsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_ = from.account_;
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.MuteGlobalChatsRequest)
}

void MuteGlobalChatsRequest::SharedCtor() {
  account_ = 0u;
}

MuteGlobalChatsRequest::~MuteGlobalChatsRequest() {
  // @@protoc_insertion_point(destructor:mruv.punishments.MuteGlobalChatsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MuteGlobalChatsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MuteGlobalChatsRequest::ArenaDtor(void* object) {
  MuteGlobalChatsRequest* _this = reinterpret_cast< MuteGlobalChatsRequest* >(object);
  (void)_this;
}
void MuteGlobalChatsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MuteGlobalChatsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MuteGlobalChatsRequest& MuteGlobalChatsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MuteGlobalChatsRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void MuteGlobalChatsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.MuteGlobalChatsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MuteGlobalChatsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          account_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MuteGlobalChatsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.MuteGlobalChatsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 account = 1;
  if (this->account() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.MuteGlobalChatsRequest)
  return target;
}

size_t MuteGlobalChatsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.MuteGlobalChatsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 account = 1;
  if (this->account() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_account());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MuteGlobalChatsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.MuteGlobalChatsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MuteGlobalChatsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MuteGlobalChatsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.MuteGlobalChatsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.MuteGlobalChatsRequest)
    MergeFrom(*source);
  }
}

void MuteGlobalChatsRequest::MergeFrom(const MuteGlobalChatsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.MuteGlobalChatsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account() != 0) {
    _internal_set_account(from._internal_account());
  }
}

void MuteGlobalChatsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.MuteGlobalChatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MuteGlobalChatsRequest::CopyFrom(const MuteGlobalChatsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.MuteGlobalChatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MuteGlobalChatsRequest::IsInitialized() const {
  return true;
}

void MuteGlobalChatsRequest::InternalSwap(MuteGlobalChatsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(account_, other->account_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MuteGlobalChatsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MuteGlobalChatsResponse::InitAsDefaultInstance() {
}
class MuteGlobalChatsResponse::_Internal {
 public:
};

MuteGlobalChatsResponse::MuteGlobalChatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.MuteGlobalChatsResponse)
}
MuteGlobalChatsResponse::MuteGlobalChatsResponse(const MuteGlobalChatsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.MuteGlobalChatsResponse)
}

void MuteGlobalChatsResponse::SharedCtor() {
}

MuteGlobalChatsResponse::~MuteGlobalChatsResponse() {
  // @@protoc_insertion_point(destructor:mruv.punishments.MuteGlobalChatsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MuteGlobalChatsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MuteGlobalChatsResponse::ArenaDtor(void* object) {
  MuteGlobalChatsResponse* _this = reinterpret_cast< MuteGlobalChatsResponse* >(object);
  (void)_this;
}
void MuteGlobalChatsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MuteGlobalChatsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MuteGlobalChatsResponse& MuteGlobalChatsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MuteGlobalChatsResponse_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void MuteGlobalChatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.MuteGlobalChatsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MuteGlobalChatsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MuteGlobalChatsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.MuteGlobalChatsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.MuteGlobalChatsResponse)
  return target;
}

size_t MuteGlobalChatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.MuteGlobalChatsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MuteGlobalChatsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.MuteGlobalChatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MuteGlobalChatsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MuteGlobalChatsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.MuteGlobalChatsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.MuteGlobalChatsResponse)
    MergeFrom(*source);
  }
}

void MuteGlobalChatsResponse::MergeFrom(const MuteGlobalChatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.MuteGlobalChatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MuteGlobalChatsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.MuteGlobalChatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MuteGlobalChatsResponse::CopyFrom(const MuteGlobalChatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.MuteGlobalChatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MuteGlobalChatsResponse::IsInitialized() const {
  return true;
}

void MuteGlobalChatsResponse::InternalSwap(MuteGlobalChatsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MuteGlobalChatsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnBanRequest::InitAsDefaultInstance() {
}
class UnBanRequest::_Internal {
 public:
};

UnBanRequest::UnBanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.UnBanRequest)
}
UnBanRequest::UnBanRequest(const UnBanRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reason().empty()) {
    reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reason(),
      GetArena());
  }
  ban_id_ = from.ban_id_;
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.UnBanRequest)
}

void UnBanRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnBanRequest_punishments_2fpunishments_2eproto.base);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ban_id_ = 0u;
}

UnBanRequest::~UnBanRequest() {
  // @@protoc_insertion_point(destructor:mruv.punishments.UnBanRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnBanRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UnBanRequest::ArenaDtor(void* object) {
  UnBanRequest* _this = reinterpret_cast< UnBanRequest* >(object);
  (void)_this;
}
void UnBanRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnBanRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnBanRequest& UnBanRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnBanRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void UnBanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.UnBanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ban_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnBanRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 ban_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ban_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.punishments.UnBanRequest.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnBanRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.UnBanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ban_id = 1;
  if (this->ban_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ban_id(), target);
  }

  // string reason = 2;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.punishments.UnBanRequest.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.UnBanRequest)
  return target;
}

size_t UnBanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.UnBanRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 2;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // uint32 ban_id = 1;
  if (this->ban_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ban_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnBanRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.UnBanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnBanRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnBanRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.UnBanRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.UnBanRequest)
    MergeFrom(*source);
  }
}

void UnBanRequest::MergeFrom(const UnBanRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.UnBanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason().size() > 0) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.ban_id() != 0) {
    _internal_set_ban_id(from._internal_ban_id());
  }
}

void UnBanRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.UnBanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnBanRequest::CopyFrom(const UnBanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.UnBanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnBanRequest::IsInitialized() const {
  return true;
}

void UnBanRequest::InternalSwap(UnBanRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ban_id_, other->ban_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnBanRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnBanResponse::InitAsDefaultInstance() {
}
class UnBanResponse::_Internal {
 public:
};

UnBanResponse::UnBanResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.UnBanResponse)
}
UnBanResponse::UnBanResponse(const UnBanResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.UnBanResponse)
}

void UnBanResponse::SharedCtor() {
}

UnBanResponse::~UnBanResponse() {
  // @@protoc_insertion_point(destructor:mruv.punishments.UnBanResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnBanResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnBanResponse::ArenaDtor(void* object) {
  UnBanResponse* _this = reinterpret_cast< UnBanResponse* >(object);
  (void)_this;
}
void UnBanResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnBanResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnBanResponse& UnBanResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnBanResponse_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void UnBanResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.UnBanResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnBanResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnBanResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.UnBanResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.UnBanResponse)
  return target;
}

size_t UnBanResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.UnBanResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnBanResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.UnBanResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UnBanResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnBanResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.UnBanResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.UnBanResponse)
    MergeFrom(*source);
  }
}

void UnBanResponse::MergeFrom(const UnBanResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.UnBanResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UnBanResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.UnBanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnBanResponse::CopyFrom(const UnBanResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.UnBanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnBanResponse::IsInitialized() const {
  return true;
}

void UnBanResponse::InternalSwap(UnBanResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnBanResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnBlockRequest::InitAsDefaultInstance() {
}
class UnBlockRequest::_Internal {
 public:
};

UnBlockRequest::UnBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.UnBlockRequest)
}
UnBlockRequest::UnBlockRequest(const UnBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reason().empty()) {
    reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reason(),
      GetArena());
  }
  block_id_ = from.block_id_;
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.UnBlockRequest)
}

void UnBlockRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnBlockRequest_punishments_2fpunishments_2eproto.base);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_id_ = 0u;
}

UnBlockRequest::~UnBlockRequest() {
  // @@protoc_insertion_point(destructor:mruv.punishments.UnBlockRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnBlockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UnBlockRequest::ArenaDtor(void* object) {
  UnBlockRequest* _this = reinterpret_cast< UnBlockRequest* >(object);
  (void)_this;
}
void UnBlockRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnBlockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnBlockRequest& UnBlockRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnBlockRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void UnBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.UnBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  block_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnBlockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 block_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          block_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.punishments.UnBlockRequest.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnBlockRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.UnBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 block_id = 1;
  if (this->block_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_block_id(), target);
  }

  // string reason = 2;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.punishments.UnBlockRequest.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.UnBlockRequest)
  return target;
}

size_t UnBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.UnBlockRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 2;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // uint32 block_id = 1;
  if (this->block_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_block_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnBlockRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.UnBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnBlockRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnBlockRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.UnBlockRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.UnBlockRequest)
    MergeFrom(*source);
  }
}

void UnBlockRequest::MergeFrom(const UnBlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.UnBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason().size() > 0) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.block_id() != 0) {
    _internal_set_block_id(from._internal_block_id());
  }
}

void UnBlockRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.UnBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnBlockRequest::CopyFrom(const UnBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.UnBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnBlockRequest::IsInitialized() const {
  return true;
}

void UnBlockRequest::InternalSwap(UnBlockRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(block_id_, other->block_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnBlockRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnBlockResponse::InitAsDefaultInstance() {
}
class UnBlockResponse::_Internal {
 public:
};

UnBlockResponse::UnBlockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.UnBlockResponse)
}
UnBlockResponse::UnBlockResponse(const UnBlockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.UnBlockResponse)
}

void UnBlockResponse::SharedCtor() {
}

UnBlockResponse::~UnBlockResponse() {
  // @@protoc_insertion_point(destructor:mruv.punishments.UnBlockResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnBlockResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnBlockResponse::ArenaDtor(void* object) {
  UnBlockResponse* _this = reinterpret_cast< UnBlockResponse* >(object);
  (void)_this;
}
void UnBlockResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnBlockResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnBlockResponse& UnBlockResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnBlockResponse_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void UnBlockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.UnBlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnBlockResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnBlockResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.UnBlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.UnBlockResponse)
  return target;
}

size_t UnBlockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.UnBlockResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnBlockResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.UnBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UnBlockResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnBlockResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.UnBlockResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.UnBlockResponse)
    MergeFrom(*source);
  }
}

void UnBlockResponse::MergeFrom(const UnBlockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.UnBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UnBlockResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.UnBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnBlockResponse::CopyFrom(const UnBlockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.UnBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnBlockResponse::IsInitialized() const {
  return true;
}

void UnBlockResponse::InternalSwap(UnBlockResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnBlockResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnWarnRequest::InitAsDefaultInstance() {
}
class UnWarnRequest::_Internal {
 public:
};

UnWarnRequest::UnWarnRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.UnWarnRequest)
}
UnWarnRequest::UnWarnRequest(const UnWarnRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reason().empty()) {
    reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reason(),
      GetArena());
  }
  warn_id_ = from.warn_id_;
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.UnWarnRequest)
}

void UnWarnRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnWarnRequest_punishments_2fpunishments_2eproto.base);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  warn_id_ = 0u;
}

UnWarnRequest::~UnWarnRequest() {
  // @@protoc_insertion_point(destructor:mruv.punishments.UnWarnRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnWarnRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UnWarnRequest::ArenaDtor(void* object) {
  UnWarnRequest* _this = reinterpret_cast< UnWarnRequest* >(object);
  (void)_this;
}
void UnWarnRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnWarnRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnWarnRequest& UnWarnRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnWarnRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void UnWarnRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.UnWarnRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  warn_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnWarnRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 warn_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          warn_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.punishments.UnWarnRequest.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnWarnRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.UnWarnRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 warn_id = 1;
  if (this->warn_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_warn_id(), target);
  }

  // string reason = 2;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.punishments.UnWarnRequest.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.UnWarnRequest)
  return target;
}

size_t UnWarnRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.UnWarnRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 2;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // uint32 warn_id = 1;
  if (this->warn_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_warn_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnWarnRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.UnWarnRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnWarnRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnWarnRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.UnWarnRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.UnWarnRequest)
    MergeFrom(*source);
  }
}

void UnWarnRequest::MergeFrom(const UnWarnRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.UnWarnRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason().size() > 0) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.warn_id() != 0) {
    _internal_set_warn_id(from._internal_warn_id());
  }
}

void UnWarnRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.UnWarnRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnWarnRequest::CopyFrom(const UnWarnRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.UnWarnRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnWarnRequest::IsInitialized() const {
  return true;
}

void UnWarnRequest::InternalSwap(UnWarnRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(warn_id_, other->warn_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnWarnRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnWarnResponse::InitAsDefaultInstance() {
}
class UnWarnResponse::_Internal {
 public:
};

UnWarnResponse::UnWarnResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.UnWarnResponse)
}
UnWarnResponse::UnWarnResponse(const UnWarnResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.UnWarnResponse)
}

void UnWarnResponse::SharedCtor() {
}

UnWarnResponse::~UnWarnResponse() {
  // @@protoc_insertion_point(destructor:mruv.punishments.UnWarnResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnWarnResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnWarnResponse::ArenaDtor(void* object) {
  UnWarnResponse* _this = reinterpret_cast< UnWarnResponse* >(object);
  (void)_this;
}
void UnWarnResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnWarnResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnWarnResponse& UnWarnResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnWarnResponse_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void UnWarnResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.UnWarnResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnWarnResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnWarnResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.UnWarnResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.UnWarnResponse)
  return target;
}

size_t UnWarnResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.UnWarnResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnWarnResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.UnWarnResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UnWarnResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnWarnResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.UnWarnResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.UnWarnResponse)
    MergeFrom(*source);
  }
}

void UnWarnResponse::MergeFrom(const UnWarnResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.UnWarnResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UnWarnResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.UnWarnResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnWarnResponse::CopyFrom(const UnWarnResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.UnWarnResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnWarnResponse::IsInitialized() const {
  return true;
}

void UnWarnResponse::InternalSwap(UnWarnResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnWarnResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnAdminJailRequest::InitAsDefaultInstance() {
}
class UnAdminJailRequest::_Internal {
 public:
};

UnAdminJailRequest::UnAdminJailRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.UnAdminJailRequest)
}
UnAdminJailRequest::UnAdminJailRequest(const UnAdminJailRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  character_ = from.character_;
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.UnAdminJailRequest)
}

void UnAdminJailRequest::SharedCtor() {
  character_ = 0u;
}

UnAdminJailRequest::~UnAdminJailRequest() {
  // @@protoc_insertion_point(destructor:mruv.punishments.UnAdminJailRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnAdminJailRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnAdminJailRequest::ArenaDtor(void* object) {
  UnAdminJailRequest* _this = reinterpret_cast< UnAdminJailRequest* >(object);
  (void)_this;
}
void UnAdminJailRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnAdminJailRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnAdminJailRequest& UnAdminJailRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnAdminJailRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void UnAdminJailRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.UnAdminJailRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  character_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnAdminJailRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 character = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          character_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnAdminJailRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.UnAdminJailRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 character = 1;
  if (this->character() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_character(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.UnAdminJailRequest)
  return target;
}

size_t UnAdminJailRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.UnAdminJailRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 character = 1;
  if (this->character() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_character());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnAdminJailRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.UnAdminJailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnAdminJailRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnAdminJailRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.UnAdminJailRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.UnAdminJailRequest)
    MergeFrom(*source);
  }
}

void UnAdminJailRequest::MergeFrom(const UnAdminJailRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.UnAdminJailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.character() != 0) {
    _internal_set_character(from._internal_character());
  }
}

void UnAdminJailRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.UnAdminJailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnAdminJailRequest::CopyFrom(const UnAdminJailRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.UnAdminJailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnAdminJailRequest::IsInitialized() const {
  return true;
}

void UnAdminJailRequest::InternalSwap(UnAdminJailRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(character_, other->character_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnAdminJailRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnAdminJailResponse::InitAsDefaultInstance() {
}
class UnAdminJailResponse::_Internal {
 public:
};

UnAdminJailResponse::UnAdminJailResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.UnAdminJailResponse)
}
UnAdminJailResponse::UnAdminJailResponse(const UnAdminJailResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.UnAdminJailResponse)
}

void UnAdminJailResponse::SharedCtor() {
}

UnAdminJailResponse::~UnAdminJailResponse() {
  // @@protoc_insertion_point(destructor:mruv.punishments.UnAdminJailResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnAdminJailResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnAdminJailResponse::ArenaDtor(void* object) {
  UnAdminJailResponse* _this = reinterpret_cast< UnAdminJailResponse* >(object);
  (void)_this;
}
void UnAdminJailResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnAdminJailResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnAdminJailResponse& UnAdminJailResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnAdminJailResponse_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void UnAdminJailResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.UnAdminJailResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnAdminJailResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnAdminJailResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.UnAdminJailResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.UnAdminJailResponse)
  return target;
}

size_t UnAdminJailResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.UnAdminJailResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnAdminJailResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.UnAdminJailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UnAdminJailResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnAdminJailResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.UnAdminJailResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.UnAdminJailResponse)
    MergeFrom(*source);
  }
}

void UnAdminJailResponse::MergeFrom(const UnAdminJailResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.UnAdminJailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UnAdminJailResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.UnAdminJailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnAdminJailResponse::CopyFrom(const UnAdminJailResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.UnAdminJailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnAdminJailResponse::IsInitialized() const {
  return true;
}

void UnAdminJailResponse::InternalSwap(UnAdminJailResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnAdminJailResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnMuteGlobalChatsRequest::InitAsDefaultInstance() {
}
class UnMuteGlobalChatsRequest::_Internal {
 public:
};

UnMuteGlobalChatsRequest::UnMuteGlobalChatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.UnMuteGlobalChatsRequest)
}
UnMuteGlobalChatsRequest::UnMuteGlobalChatsRequest(const UnMuteGlobalChatsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_ = from.account_;
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.UnMuteGlobalChatsRequest)
}

void UnMuteGlobalChatsRequest::SharedCtor() {
  account_ = 0u;
}

UnMuteGlobalChatsRequest::~UnMuteGlobalChatsRequest() {
  // @@protoc_insertion_point(destructor:mruv.punishments.UnMuteGlobalChatsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnMuteGlobalChatsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnMuteGlobalChatsRequest::ArenaDtor(void* object) {
  UnMuteGlobalChatsRequest* _this = reinterpret_cast< UnMuteGlobalChatsRequest* >(object);
  (void)_this;
}
void UnMuteGlobalChatsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnMuteGlobalChatsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnMuteGlobalChatsRequest& UnMuteGlobalChatsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnMuteGlobalChatsRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void UnMuteGlobalChatsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.UnMuteGlobalChatsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnMuteGlobalChatsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          account_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnMuteGlobalChatsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.UnMuteGlobalChatsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 account = 1;
  if (this->account() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.UnMuteGlobalChatsRequest)
  return target;
}

size_t UnMuteGlobalChatsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.UnMuteGlobalChatsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 account = 1;
  if (this->account() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_account());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnMuteGlobalChatsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.UnMuteGlobalChatsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnMuteGlobalChatsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnMuteGlobalChatsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.UnMuteGlobalChatsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.UnMuteGlobalChatsRequest)
    MergeFrom(*source);
  }
}

void UnMuteGlobalChatsRequest::MergeFrom(const UnMuteGlobalChatsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.UnMuteGlobalChatsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account() != 0) {
    _internal_set_account(from._internal_account());
  }
}

void UnMuteGlobalChatsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.UnMuteGlobalChatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnMuteGlobalChatsRequest::CopyFrom(const UnMuteGlobalChatsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.UnMuteGlobalChatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnMuteGlobalChatsRequest::IsInitialized() const {
  return true;
}

void UnMuteGlobalChatsRequest::InternalSwap(UnMuteGlobalChatsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(account_, other->account_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnMuteGlobalChatsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnMuteGlobalChatsResponse::InitAsDefaultInstance() {
}
class UnMuteGlobalChatsResponse::_Internal {
 public:
};

UnMuteGlobalChatsResponse::UnMuteGlobalChatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.UnMuteGlobalChatsResponse)
}
UnMuteGlobalChatsResponse::UnMuteGlobalChatsResponse(const UnMuteGlobalChatsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.UnMuteGlobalChatsResponse)
}

void UnMuteGlobalChatsResponse::SharedCtor() {
}

UnMuteGlobalChatsResponse::~UnMuteGlobalChatsResponse() {
  // @@protoc_insertion_point(destructor:mruv.punishments.UnMuteGlobalChatsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnMuteGlobalChatsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnMuteGlobalChatsResponse::ArenaDtor(void* object) {
  UnMuteGlobalChatsResponse* _this = reinterpret_cast< UnMuteGlobalChatsResponse* >(object);
  (void)_this;
}
void UnMuteGlobalChatsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnMuteGlobalChatsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnMuteGlobalChatsResponse& UnMuteGlobalChatsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnMuteGlobalChatsResponse_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void UnMuteGlobalChatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.UnMuteGlobalChatsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnMuteGlobalChatsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnMuteGlobalChatsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.UnMuteGlobalChatsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.UnMuteGlobalChatsResponse)
  return target;
}

size_t UnMuteGlobalChatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.UnMuteGlobalChatsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnMuteGlobalChatsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.UnMuteGlobalChatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UnMuteGlobalChatsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnMuteGlobalChatsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.UnMuteGlobalChatsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.UnMuteGlobalChatsResponse)
    MergeFrom(*source);
  }
}

void UnMuteGlobalChatsResponse::MergeFrom(const UnMuteGlobalChatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.UnMuteGlobalChatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UnMuteGlobalChatsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.UnMuteGlobalChatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnMuteGlobalChatsResponse::CopyFrom(const UnMuteGlobalChatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.UnMuteGlobalChatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnMuteGlobalChatsResponse::IsInitialized() const {
  return true;
}

void UnMuteGlobalChatsResponse::InternalSwap(UnMuteGlobalChatsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnMuteGlobalChatsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPlayerBansRequest::InitAsDefaultInstance() {
}
class GetPlayerBansRequest::_Internal {
 public:
};

GetPlayerBansRequest::GetPlayerBansRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.GetPlayerBansRequest)
}
GetPlayerBansRequest::GetPlayerBansRequest(const GetPlayerBansRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip(),
      GetArena());
  }
  player_ = from.player_;
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.GetPlayerBansRequest)
}

void GetPlayerBansRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetPlayerBansRequest_punishments_2fpunishments_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_ = 0u;
}

GetPlayerBansRequest::~GetPlayerBansRequest() {
  // @@protoc_insertion_point(destructor:mruv.punishments.GetPlayerBansRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetPlayerBansRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetPlayerBansRequest::ArenaDtor(void* object) {
  GetPlayerBansRequest* _this = reinterpret_cast< GetPlayerBansRequest* >(object);
  (void)_this;
}
void GetPlayerBansRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPlayerBansRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPlayerBansRequest& GetPlayerBansRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPlayerBansRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void GetPlayerBansRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.GetPlayerBansRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  player_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPlayerBansRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.punishments.GetPlayerBansRequest.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPlayerBansRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.GetPlayerBansRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player = 1;
  if (this->player() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player(), target);
  }

  // string ip = 2;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.punishments.GetPlayerBansRequest.ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.GetPlayerBansRequest)
  return target;
}

size_t GetPlayerBansRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.GetPlayerBansRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 2;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // uint32 player = 1;
  if (this->player() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPlayerBansRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.GetPlayerBansRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPlayerBansRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPlayerBansRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.GetPlayerBansRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.GetPlayerBansRequest)
    MergeFrom(*source);
  }
}

void GetPlayerBansRequest::MergeFrom(const GetPlayerBansRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.GetPlayerBansRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.player() != 0) {
    _internal_set_player(from._internal_player());
  }
}

void GetPlayerBansRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.GetPlayerBansRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPlayerBansRequest::CopyFrom(const GetPlayerBansRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.GetPlayerBansRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPlayerBansRequest::IsInitialized() const {
  return true;
}

void GetPlayerBansRequest::InternalSwap(GetPlayerBansRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(player_, other->player_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPlayerBansRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPlayerBansResponse::InitAsDefaultInstance() {
}
class GetPlayerBansResponse::_Internal {
 public:
};

GetPlayerBansResponse::GetPlayerBansResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bans_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.GetPlayerBansResponse)
}
GetPlayerBansResponse::GetPlayerBansResponse(const GetPlayerBansResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bans_(from.bans_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.GetPlayerBansResponse)
}

void GetPlayerBansResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetPlayerBansResponse_punishments_2fpunishments_2eproto.base);
}

GetPlayerBansResponse::~GetPlayerBansResponse() {
  // @@protoc_insertion_point(destructor:mruv.punishments.GetPlayerBansResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetPlayerBansResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetPlayerBansResponse::ArenaDtor(void* object) {
  GetPlayerBansResponse* _this = reinterpret_cast< GetPlayerBansResponse* >(object);
  (void)_this;
}
void GetPlayerBansResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPlayerBansResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPlayerBansResponse& GetPlayerBansResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPlayerBansResponse_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void GetPlayerBansResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.GetPlayerBansResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bans_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPlayerBansResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mruv.punishments.BanMessage bans = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bans(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPlayerBansResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.GetPlayerBansResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mruv.punishments.BanMessage bans = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bans_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_bans(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.GetPlayerBansResponse)
  return target;
}

size_t GetPlayerBansResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.GetPlayerBansResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mruv.punishments.BanMessage bans = 1;
  total_size += 1UL * this->_internal_bans_size();
  for (const auto& msg : this->bans_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPlayerBansResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.GetPlayerBansResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPlayerBansResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPlayerBansResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.GetPlayerBansResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.GetPlayerBansResponse)
    MergeFrom(*source);
  }
}

void GetPlayerBansResponse::MergeFrom(const GetPlayerBansResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.GetPlayerBansResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bans_.MergeFrom(from.bans_);
}

void GetPlayerBansResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.GetPlayerBansResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPlayerBansResponse::CopyFrom(const GetPlayerBansResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.GetPlayerBansResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPlayerBansResponse::IsInitialized() const {
  return true;
}

void GetPlayerBansResponse::InternalSwap(GetPlayerBansResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bans_.InternalSwap(&other->bans_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPlayerBansResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPlayerWarnsRequest::InitAsDefaultInstance() {
}
class GetPlayerWarnsRequest::_Internal {
 public:
};

GetPlayerWarnsRequest::GetPlayerWarnsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.GetPlayerWarnsRequest)
}
GetPlayerWarnsRequest::GetPlayerWarnsRequest(const GetPlayerWarnsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_ = from.player_;
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.GetPlayerWarnsRequest)
}

void GetPlayerWarnsRequest::SharedCtor() {
  player_ = 0u;
}

GetPlayerWarnsRequest::~GetPlayerWarnsRequest() {
  // @@protoc_insertion_point(destructor:mruv.punishments.GetPlayerWarnsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetPlayerWarnsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetPlayerWarnsRequest::ArenaDtor(void* object) {
  GetPlayerWarnsRequest* _this = reinterpret_cast< GetPlayerWarnsRequest* >(object);
  (void)_this;
}
void GetPlayerWarnsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPlayerWarnsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPlayerWarnsRequest& GetPlayerWarnsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPlayerWarnsRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void GetPlayerWarnsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.GetPlayerWarnsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPlayerWarnsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPlayerWarnsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.GetPlayerWarnsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player = 1;
  if (this->player() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.GetPlayerWarnsRequest)
  return target;
}

size_t GetPlayerWarnsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.GetPlayerWarnsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 player = 1;
  if (this->player() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPlayerWarnsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.GetPlayerWarnsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPlayerWarnsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPlayerWarnsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.GetPlayerWarnsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.GetPlayerWarnsRequest)
    MergeFrom(*source);
  }
}

void GetPlayerWarnsRequest::MergeFrom(const GetPlayerWarnsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.GetPlayerWarnsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player() != 0) {
    _internal_set_player(from._internal_player());
  }
}

void GetPlayerWarnsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.GetPlayerWarnsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPlayerWarnsRequest::CopyFrom(const GetPlayerWarnsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.GetPlayerWarnsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPlayerWarnsRequest::IsInitialized() const {
  return true;
}

void GetPlayerWarnsRequest::InternalSwap(GetPlayerWarnsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(player_, other->player_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPlayerWarnsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPlayerWarnsResponse::InitAsDefaultInstance() {
}
class GetPlayerWarnsResponse::_Internal {
 public:
};

GetPlayerWarnsResponse::GetPlayerWarnsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  warns_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.GetPlayerWarnsResponse)
}
GetPlayerWarnsResponse::GetPlayerWarnsResponse(const GetPlayerWarnsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      warns_(from.warns_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.GetPlayerWarnsResponse)
}

void GetPlayerWarnsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetPlayerWarnsResponse_punishments_2fpunishments_2eproto.base);
}

GetPlayerWarnsResponse::~GetPlayerWarnsResponse() {
  // @@protoc_insertion_point(destructor:mruv.punishments.GetPlayerWarnsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetPlayerWarnsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetPlayerWarnsResponse::ArenaDtor(void* object) {
  GetPlayerWarnsResponse* _this = reinterpret_cast< GetPlayerWarnsResponse* >(object);
  (void)_this;
}
void GetPlayerWarnsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPlayerWarnsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPlayerWarnsResponse& GetPlayerWarnsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPlayerWarnsResponse_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void GetPlayerWarnsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.GetPlayerWarnsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  warns_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPlayerWarnsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mruv.punishments.WarnMessage warns = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_warns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPlayerWarnsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.GetPlayerWarnsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mruv.punishments.WarnMessage warns = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_warns_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_warns(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.GetPlayerWarnsResponse)
  return target;
}

size_t GetPlayerWarnsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.GetPlayerWarnsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mruv.punishments.WarnMessage warns = 1;
  total_size += 1UL * this->_internal_warns_size();
  for (const auto& msg : this->warns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPlayerWarnsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.GetPlayerWarnsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPlayerWarnsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPlayerWarnsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.GetPlayerWarnsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.GetPlayerWarnsResponse)
    MergeFrom(*source);
  }
}

void GetPlayerWarnsResponse::MergeFrom(const GetPlayerWarnsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.GetPlayerWarnsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  warns_.MergeFrom(from.warns_);
}

void GetPlayerWarnsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.GetPlayerWarnsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPlayerWarnsResponse::CopyFrom(const GetPlayerWarnsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.GetPlayerWarnsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPlayerWarnsResponse::IsInitialized() const {
  return true;
}

void GetPlayerWarnsResponse::InternalSwap(GetPlayerWarnsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  warns_.InternalSwap(&other->warns_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPlayerWarnsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPlayerAdminJailRequest::InitAsDefaultInstance() {
}
class GetPlayerAdminJailRequest::_Internal {
 public:
};

GetPlayerAdminJailRequest::GetPlayerAdminJailRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.GetPlayerAdminJailRequest)
}
GetPlayerAdminJailRequest::GetPlayerAdminJailRequest(const GetPlayerAdminJailRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  character_ = from.character_;
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.GetPlayerAdminJailRequest)
}

void GetPlayerAdminJailRequest::SharedCtor() {
  character_ = 0u;
}

GetPlayerAdminJailRequest::~GetPlayerAdminJailRequest() {
  // @@protoc_insertion_point(destructor:mruv.punishments.GetPlayerAdminJailRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetPlayerAdminJailRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetPlayerAdminJailRequest::ArenaDtor(void* object) {
  GetPlayerAdminJailRequest* _this = reinterpret_cast< GetPlayerAdminJailRequest* >(object);
  (void)_this;
}
void GetPlayerAdminJailRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPlayerAdminJailRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPlayerAdminJailRequest& GetPlayerAdminJailRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPlayerAdminJailRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void GetPlayerAdminJailRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.GetPlayerAdminJailRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  character_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPlayerAdminJailRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 character = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          character_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPlayerAdminJailRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.GetPlayerAdminJailRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 character = 1;
  if (this->character() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_character(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.GetPlayerAdminJailRequest)
  return target;
}

size_t GetPlayerAdminJailRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.GetPlayerAdminJailRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 character = 1;
  if (this->character() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_character());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPlayerAdminJailRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.GetPlayerAdminJailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPlayerAdminJailRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPlayerAdminJailRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.GetPlayerAdminJailRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.GetPlayerAdminJailRequest)
    MergeFrom(*source);
  }
}

void GetPlayerAdminJailRequest::MergeFrom(const GetPlayerAdminJailRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.GetPlayerAdminJailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.character() != 0) {
    _internal_set_character(from._internal_character());
  }
}

void GetPlayerAdminJailRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.GetPlayerAdminJailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPlayerAdminJailRequest::CopyFrom(const GetPlayerAdminJailRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.GetPlayerAdminJailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPlayerAdminJailRequest::IsInitialized() const {
  return true;
}

void GetPlayerAdminJailRequest::InternalSwap(GetPlayerAdminJailRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(character_, other->character_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPlayerAdminJailRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPlayerAdminJailResponse::InitAsDefaultInstance() {
}
class GetPlayerAdminJailResponse::_Internal {
 public:
};

GetPlayerAdminJailResponse::GetPlayerAdminJailResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.GetPlayerAdminJailResponse)
}
GetPlayerAdminJailResponse::GetPlayerAdminJailResponse(const GetPlayerAdminJailResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reason().empty()) {
    reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reason(),
      GetArena());
  }
  ::memcpy(&jail_time_, &from.jail_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&date_) -
    reinterpret_cast<char*>(&jail_time_)) + sizeof(date_));
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.GetPlayerAdminJailResponse)
}

void GetPlayerAdminJailResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetPlayerAdminJailResponse_punishments_2fpunishments_2eproto.base);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&jail_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&date_) -
      reinterpret_cast<char*>(&jail_time_)) + sizeof(date_));
}

GetPlayerAdminJailResponse::~GetPlayerAdminJailResponse() {
  // @@protoc_insertion_point(destructor:mruv.punishments.GetPlayerAdminJailResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetPlayerAdminJailResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetPlayerAdminJailResponse::ArenaDtor(void* object) {
  GetPlayerAdminJailResponse* _this = reinterpret_cast< GetPlayerAdminJailResponse* >(object);
  (void)_this;
}
void GetPlayerAdminJailResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPlayerAdminJailResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPlayerAdminJailResponse& GetPlayerAdminJailResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPlayerAdminJailResponse_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void GetPlayerAdminJailResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.GetPlayerAdminJailResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&jail_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&date_) -
      reinterpret_cast<char*>(&jail_time_)) + sizeof(date_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPlayerAdminJailResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 jail_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          jail_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.punishments.GetPlayerAdminJailResponse.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 admin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 date = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPlayerAdminJailResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.GetPlayerAdminJailResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 jail_time = 1;
  if (this->jail_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_jail_time(), target);
  }

  // string reason = 2;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.punishments.GetPlayerAdminJailResponse.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  // uint32 admin = 3;
  if (this->admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_admin(), target);
  }

  // int64 date = 4;
  if (this->date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_date(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.GetPlayerAdminJailResponse)
  return target;
}

size_t GetPlayerAdminJailResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.GetPlayerAdminJailResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 2;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // uint32 jail_time = 1;
  if (this->jail_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_jail_time());
  }

  // uint32 admin = 3;
  if (this->admin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_admin());
  }

  // int64 date = 4;
  if (this->date() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_date());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPlayerAdminJailResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.GetPlayerAdminJailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPlayerAdminJailResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPlayerAdminJailResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.GetPlayerAdminJailResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.GetPlayerAdminJailResponse)
    MergeFrom(*source);
  }
}

void GetPlayerAdminJailResponse::MergeFrom(const GetPlayerAdminJailResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.GetPlayerAdminJailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason().size() > 0) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.jail_time() != 0) {
    _internal_set_jail_time(from._internal_jail_time());
  }
  if (from.admin() != 0) {
    _internal_set_admin(from._internal_admin());
  }
  if (from.date() != 0) {
    _internal_set_date(from._internal_date());
  }
}

void GetPlayerAdminJailResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.GetPlayerAdminJailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPlayerAdminJailResponse::CopyFrom(const GetPlayerAdminJailResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.GetPlayerAdminJailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPlayerAdminJailResponse::IsInitialized() const {
  return true;
}

void GetPlayerAdminJailResponse::InternalSwap(GetPlayerAdminJailResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetPlayerAdminJailResponse, date_)
      + sizeof(GetPlayerAdminJailResponse::date_)
      - PROTOBUF_FIELD_OFFSET(GetPlayerAdminJailResponse, jail_time_)>(
          reinterpret_cast<char*>(&jail_time_),
          reinterpret_cast<char*>(&other->jail_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPlayerAdminJailResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetBanRequest::InitAsDefaultInstance() {
}
class GetBanRequest::_Internal {
 public:
};

GetBanRequest::GetBanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.GetBanRequest)
}
GetBanRequest::GetBanRequest(const GetBanRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.GetBanRequest)
}

void GetBanRequest::SharedCtor() {
  id_ = 0u;
}

GetBanRequest::~GetBanRequest() {
  // @@protoc_insertion_point(destructor:mruv.punishments.GetBanRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetBanRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetBanRequest::ArenaDtor(void* object) {
  GetBanRequest* _this = reinterpret_cast< GetBanRequest* >(object);
  (void)_this;
}
void GetBanRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBanRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBanRequest& GetBanRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBanRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void GetBanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.GetBanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBanRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBanRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.GetBanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.GetBanRequest)
  return target;
}

size_t GetBanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.GetBanRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBanRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.GetBanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBanRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBanRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.GetBanRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.GetBanRequest)
    MergeFrom(*source);
  }
}

void GetBanRequest::MergeFrom(const GetBanRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.GetBanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetBanRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.GetBanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBanRequest::CopyFrom(const GetBanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.GetBanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBanRequest::IsInitialized() const {
  return true;
}

void GetBanRequest::InternalSwap(GetBanRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBanRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetWarnRequest::InitAsDefaultInstance() {
}
class GetWarnRequest::_Internal {
 public:
};

GetWarnRequest::GetWarnRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.GetWarnRequest)
}
GetWarnRequest::GetWarnRequest(const GetWarnRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.GetWarnRequest)
}

void GetWarnRequest::SharedCtor() {
  id_ = 0u;
}

GetWarnRequest::~GetWarnRequest() {
  // @@protoc_insertion_point(destructor:mruv.punishments.GetWarnRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetWarnRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetWarnRequest::ArenaDtor(void* object) {
  GetWarnRequest* _this = reinterpret_cast< GetWarnRequest* >(object);
  (void)_this;
}
void GetWarnRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetWarnRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetWarnRequest& GetWarnRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetWarnRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void GetWarnRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.GetWarnRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetWarnRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetWarnRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.GetWarnRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.GetWarnRequest)
  return target;
}

size_t GetWarnRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.GetWarnRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetWarnRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.GetWarnRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetWarnRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetWarnRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.GetWarnRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.GetWarnRequest)
    MergeFrom(*source);
  }
}

void GetWarnRequest::MergeFrom(const GetWarnRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.GetWarnRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetWarnRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.GetWarnRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetWarnRequest::CopyFrom(const GetWarnRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.GetWarnRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWarnRequest::IsInitialized() const {
  return true;
}

void GetWarnRequest::InternalSwap(GetWarnRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetWarnRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetBlockRequest::InitAsDefaultInstance() {
}
class GetBlockRequest::_Internal {
 public:
};

GetBlockRequest::GetBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.GetBlockRequest)
}
GetBlockRequest::GetBlockRequest(const GetBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.GetBlockRequest)
}

void GetBlockRequest::SharedCtor() {
  id_ = 0u;
}

GetBlockRequest::~GetBlockRequest() {
  // @@protoc_insertion_point(destructor:mruv.punishments.GetBlockRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetBlockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetBlockRequest::ArenaDtor(void* object) {
  GetBlockRequest* _this = reinterpret_cast< GetBlockRequest* >(object);
  (void)_this;
}
void GetBlockRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBlockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBlockRequest& GetBlockRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBlockRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void GetBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.GetBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBlockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBlockRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.GetBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.GetBlockRequest)
  return target;
}

size_t GetBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.GetBlockRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBlockRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.GetBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBlockRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBlockRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.GetBlockRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.GetBlockRequest)
    MergeFrom(*source);
  }
}

void GetBlockRequest::MergeFrom(const GetBlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.GetBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetBlockRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.GetBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBlockRequest::CopyFrom(const GetBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.GetBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockRequest::IsInitialized() const {
  return true;
}

void GetBlockRequest::InternalSwap(GetBlockRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlockRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IsPlayerBannedRequest::InitAsDefaultInstance() {
}
class IsPlayerBannedRequest::_Internal {
 public:
};

IsPlayerBannedRequest::IsPlayerBannedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.IsPlayerBannedRequest)
}
IsPlayerBannedRequest::IsPlayerBannedRequest(const IsPlayerBannedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip(),
      GetArena());
  }
  player_ = from.player_;
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.IsPlayerBannedRequest)
}

void IsPlayerBannedRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IsPlayerBannedRequest_punishments_2fpunishments_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_ = 0u;
}

IsPlayerBannedRequest::~IsPlayerBannedRequest() {
  // @@protoc_insertion_point(destructor:mruv.punishments.IsPlayerBannedRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IsPlayerBannedRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IsPlayerBannedRequest::ArenaDtor(void* object) {
  IsPlayerBannedRequest* _this = reinterpret_cast< IsPlayerBannedRequest* >(object);
  (void)_this;
}
void IsPlayerBannedRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IsPlayerBannedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IsPlayerBannedRequest& IsPlayerBannedRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IsPlayerBannedRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void IsPlayerBannedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.IsPlayerBannedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  player_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IsPlayerBannedRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.punishments.IsPlayerBannedRequest.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IsPlayerBannedRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.IsPlayerBannedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player = 1;
  if (this->player() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player(), target);
  }

  // string ip = 2;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.punishments.IsPlayerBannedRequest.ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.IsPlayerBannedRequest)
  return target;
}

size_t IsPlayerBannedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.IsPlayerBannedRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 2;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // uint32 player = 1;
  if (this->player() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsPlayerBannedRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.IsPlayerBannedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const IsPlayerBannedRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IsPlayerBannedRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.IsPlayerBannedRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.IsPlayerBannedRequest)
    MergeFrom(*source);
  }
}

void IsPlayerBannedRequest::MergeFrom(const IsPlayerBannedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.IsPlayerBannedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.player() != 0) {
    _internal_set_player(from._internal_player());
  }
}

void IsPlayerBannedRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.IsPlayerBannedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsPlayerBannedRequest::CopyFrom(const IsPlayerBannedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.IsPlayerBannedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsPlayerBannedRequest::IsInitialized() const {
  return true;
}

void IsPlayerBannedRequest::InternalSwap(IsPlayerBannedRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(player_, other->player_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IsPlayerBannedRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IsPlayerBannedResponse::InitAsDefaultInstance() {
}
class IsPlayerBannedResponse::_Internal {
 public:
};

IsPlayerBannedResponse::IsPlayerBannedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.IsPlayerBannedResponse)
}
IsPlayerBannedResponse::IsPlayerBannedResponse(const IsPlayerBannedResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&banned_, &from.banned_,
    static_cast<size_t>(reinterpret_cast<char*>(&ban_id_) -
    reinterpret_cast<char*>(&banned_)) + sizeof(ban_id_));
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.IsPlayerBannedResponse)
}

void IsPlayerBannedResponse::SharedCtor() {
  ::memset(&banned_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ban_id_) -
      reinterpret_cast<char*>(&banned_)) + sizeof(ban_id_));
}

IsPlayerBannedResponse::~IsPlayerBannedResponse() {
  // @@protoc_insertion_point(destructor:mruv.punishments.IsPlayerBannedResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IsPlayerBannedResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IsPlayerBannedResponse::ArenaDtor(void* object) {
  IsPlayerBannedResponse* _this = reinterpret_cast< IsPlayerBannedResponse* >(object);
  (void)_this;
}
void IsPlayerBannedResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IsPlayerBannedResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IsPlayerBannedResponse& IsPlayerBannedResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IsPlayerBannedResponse_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void IsPlayerBannedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.IsPlayerBannedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&banned_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ban_id_) -
      reinterpret_cast<char*>(&banned_)) + sizeof(ban_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IsPlayerBannedResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool banned = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          banned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ban_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ban_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IsPlayerBannedResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.IsPlayerBannedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool banned = 1;
  if (this->banned() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_banned(), target);
  }

  // uint32 ban_id = 2;
  if (this->ban_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ban_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.IsPlayerBannedResponse)
  return target;
}

size_t IsPlayerBannedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.IsPlayerBannedResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool banned = 1;
  if (this->banned() != 0) {
    total_size += 1 + 1;
  }

  // uint32 ban_id = 2;
  if (this->ban_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ban_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsPlayerBannedResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.IsPlayerBannedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const IsPlayerBannedResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IsPlayerBannedResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.IsPlayerBannedResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.IsPlayerBannedResponse)
    MergeFrom(*source);
  }
}

void IsPlayerBannedResponse::MergeFrom(const IsPlayerBannedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.IsPlayerBannedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.banned() != 0) {
    _internal_set_banned(from._internal_banned());
  }
  if (from.ban_id() != 0) {
    _internal_set_ban_id(from._internal_ban_id());
  }
}

void IsPlayerBannedResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.IsPlayerBannedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsPlayerBannedResponse::CopyFrom(const IsPlayerBannedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.IsPlayerBannedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsPlayerBannedResponse::IsInitialized() const {
  return true;
}

void IsPlayerBannedResponse::InternalSwap(IsPlayerBannedResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IsPlayerBannedResponse, ban_id_)
      + sizeof(IsPlayerBannedResponse::ban_id_)
      - PROTOBUF_FIELD_OFFSET(IsPlayerBannedResponse, banned_)>(
          reinterpret_cast<char*>(&banned_),
          reinterpret_cast<char*>(&other->banned_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IsPlayerBannedResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IsCharacterBlockedRequest::InitAsDefaultInstance() {
}
class IsCharacterBlockedRequest::_Internal {
 public:
};

IsCharacterBlockedRequest::IsCharacterBlockedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.IsCharacterBlockedRequest)
}
IsCharacterBlockedRequest::IsCharacterBlockedRequest(const IsCharacterBlockedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  character_ = from.character_;
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.IsCharacterBlockedRequest)
}

void IsCharacterBlockedRequest::SharedCtor() {
  character_ = 0u;
}

IsCharacterBlockedRequest::~IsCharacterBlockedRequest() {
  // @@protoc_insertion_point(destructor:mruv.punishments.IsCharacterBlockedRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IsCharacterBlockedRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IsCharacterBlockedRequest::ArenaDtor(void* object) {
  IsCharacterBlockedRequest* _this = reinterpret_cast< IsCharacterBlockedRequest* >(object);
  (void)_this;
}
void IsCharacterBlockedRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IsCharacterBlockedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IsCharacterBlockedRequest& IsCharacterBlockedRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IsCharacterBlockedRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void IsCharacterBlockedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.IsCharacterBlockedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  character_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IsCharacterBlockedRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 character = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          character_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IsCharacterBlockedRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.IsCharacterBlockedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 character = 1;
  if (this->character() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_character(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.IsCharacterBlockedRequest)
  return target;
}

size_t IsCharacterBlockedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.IsCharacterBlockedRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 character = 1;
  if (this->character() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_character());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsCharacterBlockedRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.IsCharacterBlockedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const IsCharacterBlockedRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IsCharacterBlockedRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.IsCharacterBlockedRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.IsCharacterBlockedRequest)
    MergeFrom(*source);
  }
}

void IsCharacterBlockedRequest::MergeFrom(const IsCharacterBlockedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.IsCharacterBlockedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.character() != 0) {
    _internal_set_character(from._internal_character());
  }
}

void IsCharacterBlockedRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.IsCharacterBlockedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsCharacterBlockedRequest::CopyFrom(const IsCharacterBlockedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.IsCharacterBlockedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsCharacterBlockedRequest::IsInitialized() const {
  return true;
}

void IsCharacterBlockedRequest::InternalSwap(IsCharacterBlockedRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(character_, other->character_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IsCharacterBlockedRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IsCharacterBlockedResponse::InitAsDefaultInstance() {
}
class IsCharacterBlockedResponse::_Internal {
 public:
};

IsCharacterBlockedResponse::IsCharacterBlockedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.IsCharacterBlockedResponse)
}
IsCharacterBlockedResponse::IsCharacterBlockedResponse(const IsCharacterBlockedResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&blocked_, &from.blocked_,
    static_cast<size_t>(reinterpret_cast<char*>(&block_id_) -
    reinterpret_cast<char*>(&blocked_)) + sizeof(block_id_));
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.IsCharacterBlockedResponse)
}

void IsCharacterBlockedResponse::SharedCtor() {
  ::memset(&blocked_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_id_) -
      reinterpret_cast<char*>(&blocked_)) + sizeof(block_id_));
}

IsCharacterBlockedResponse::~IsCharacterBlockedResponse() {
  // @@protoc_insertion_point(destructor:mruv.punishments.IsCharacterBlockedResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IsCharacterBlockedResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IsCharacterBlockedResponse::ArenaDtor(void* object) {
  IsCharacterBlockedResponse* _this = reinterpret_cast< IsCharacterBlockedResponse* >(object);
  (void)_this;
}
void IsCharacterBlockedResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IsCharacterBlockedResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IsCharacterBlockedResponse& IsCharacterBlockedResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IsCharacterBlockedResponse_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void IsCharacterBlockedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.IsCharacterBlockedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&blocked_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_id_) -
      reinterpret_cast<char*>(&blocked_)) + sizeof(block_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IsCharacterBlockedResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool blocked = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          blocked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 block_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          block_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IsCharacterBlockedResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.IsCharacterBlockedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool blocked = 1;
  if (this->blocked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_blocked(), target);
  }

  // uint32 block_id = 2;
  if (this->block_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_block_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.IsCharacterBlockedResponse)
  return target;
}

size_t IsCharacterBlockedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.IsCharacterBlockedResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool blocked = 1;
  if (this->blocked() != 0) {
    total_size += 1 + 1;
  }

  // uint32 block_id = 2;
  if (this->block_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_block_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsCharacterBlockedResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.IsCharacterBlockedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const IsCharacterBlockedResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IsCharacterBlockedResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.IsCharacterBlockedResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.IsCharacterBlockedResponse)
    MergeFrom(*source);
  }
}

void IsCharacterBlockedResponse::MergeFrom(const IsCharacterBlockedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.IsCharacterBlockedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.blocked() != 0) {
    _internal_set_blocked(from._internal_blocked());
  }
  if (from.block_id() != 0) {
    _internal_set_block_id(from._internal_block_id());
  }
}

void IsCharacterBlockedResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.IsCharacterBlockedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsCharacterBlockedResponse::CopyFrom(const IsCharacterBlockedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.IsCharacterBlockedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsCharacterBlockedResponse::IsInitialized() const {
  return true;
}

void IsCharacterBlockedResponse::InternalSwap(IsCharacterBlockedResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IsCharacterBlockedResponse, block_id_)
      + sizeof(IsCharacterBlockedResponse::block_id_)
      - PROTOBUF_FIELD_OFFSET(IsCharacterBlockedResponse, blocked_)>(
          reinterpret_cast<char*>(&blocked_),
          reinterpret_cast<char*>(&other->blocked_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IsCharacterBlockedResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IsCharacterJailedRequest::InitAsDefaultInstance() {
}
class IsCharacterJailedRequest::_Internal {
 public:
};

IsCharacterJailedRequest::IsCharacterJailedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.IsCharacterJailedRequest)
}
IsCharacterJailedRequest::IsCharacterJailedRequest(const IsCharacterJailedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  character_ = from.character_;
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.IsCharacterJailedRequest)
}

void IsCharacterJailedRequest::SharedCtor() {
  character_ = 0u;
}

IsCharacterJailedRequest::~IsCharacterJailedRequest() {
  // @@protoc_insertion_point(destructor:mruv.punishments.IsCharacterJailedRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IsCharacterJailedRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IsCharacterJailedRequest::ArenaDtor(void* object) {
  IsCharacterJailedRequest* _this = reinterpret_cast< IsCharacterJailedRequest* >(object);
  (void)_this;
}
void IsCharacterJailedRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IsCharacterJailedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IsCharacterJailedRequest& IsCharacterJailedRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IsCharacterJailedRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void IsCharacterJailedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.IsCharacterJailedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  character_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IsCharacterJailedRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 character = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          character_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IsCharacterJailedRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.IsCharacterJailedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 character = 1;
  if (this->character() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_character(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.IsCharacterJailedRequest)
  return target;
}

size_t IsCharacterJailedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.IsCharacterJailedRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 character = 1;
  if (this->character() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_character());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsCharacterJailedRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.IsCharacterJailedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const IsCharacterJailedRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IsCharacterJailedRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.IsCharacterJailedRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.IsCharacterJailedRequest)
    MergeFrom(*source);
  }
}

void IsCharacterJailedRequest::MergeFrom(const IsCharacterJailedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.IsCharacterJailedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.character() != 0) {
    _internal_set_character(from._internal_character());
  }
}

void IsCharacterJailedRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.IsCharacterJailedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsCharacterJailedRequest::CopyFrom(const IsCharacterJailedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.IsCharacterJailedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsCharacterJailedRequest::IsInitialized() const {
  return true;
}

void IsCharacterJailedRequest::InternalSwap(IsCharacterJailedRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(character_, other->character_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IsCharacterJailedRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IsCharacterJailedResponse::InitAsDefaultInstance() {
}
class IsCharacterJailedResponse::_Internal {
 public:
};

IsCharacterJailedResponse::IsCharacterJailedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.IsCharacterJailedResponse)
}
IsCharacterJailedResponse::IsCharacterJailedResponse(const IsCharacterJailedResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&jailed_, &from.jailed_,
    static_cast<size_t>(reinterpret_cast<char*>(&jail_time_) -
    reinterpret_cast<char*>(&jailed_)) + sizeof(jail_time_));
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.IsCharacterJailedResponse)
}

void IsCharacterJailedResponse::SharedCtor() {
  ::memset(&jailed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&jail_time_) -
      reinterpret_cast<char*>(&jailed_)) + sizeof(jail_time_));
}

IsCharacterJailedResponse::~IsCharacterJailedResponse() {
  // @@protoc_insertion_point(destructor:mruv.punishments.IsCharacterJailedResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IsCharacterJailedResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IsCharacterJailedResponse::ArenaDtor(void* object) {
  IsCharacterJailedResponse* _this = reinterpret_cast< IsCharacterJailedResponse* >(object);
  (void)_this;
}
void IsCharacterJailedResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IsCharacterJailedResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IsCharacterJailedResponse& IsCharacterJailedResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IsCharacterJailedResponse_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void IsCharacterJailedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.IsCharacterJailedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&jailed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&jail_time_) -
      reinterpret_cast<char*>(&jailed_)) + sizeof(jail_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IsCharacterJailedResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool jailed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          jailed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 jail_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          jail_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IsCharacterJailedResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.IsCharacterJailedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool jailed = 1;
  if (this->jailed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_jailed(), target);
  }

  // uint32 jail_time = 2;
  if (this->jail_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_jail_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.IsCharacterJailedResponse)
  return target;
}

size_t IsCharacterJailedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.IsCharacterJailedResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool jailed = 1;
  if (this->jailed() != 0) {
    total_size += 1 + 1;
  }

  // uint32 jail_time = 2;
  if (this->jail_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_jail_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsCharacterJailedResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.IsCharacterJailedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const IsCharacterJailedResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IsCharacterJailedResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.IsCharacterJailedResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.IsCharacterJailedResponse)
    MergeFrom(*source);
  }
}

void IsCharacterJailedResponse::MergeFrom(const IsCharacterJailedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.IsCharacterJailedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.jailed() != 0) {
    _internal_set_jailed(from._internal_jailed());
  }
  if (from.jail_time() != 0) {
    _internal_set_jail_time(from._internal_jail_time());
  }
}

void IsCharacterJailedResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.IsCharacterJailedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsCharacterJailedResponse::CopyFrom(const IsCharacterJailedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.IsCharacterJailedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsCharacterJailedResponse::IsInitialized() const {
  return true;
}

void IsCharacterJailedResponse::InternalSwap(IsCharacterJailedResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IsCharacterJailedResponse, jail_time_)
      + sizeof(IsCharacterJailedResponse::jail_time_)
      - PROTOBUF_FIELD_OFFSET(IsCharacterJailedResponse, jailed_)>(
          reinterpret_cast<char*>(&jailed_),
          reinterpret_cast<char*>(&other->jailed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IsCharacterJailedResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WatchBansRequest::InitAsDefaultInstance() {
}
class WatchBansRequest::_Internal {
 public:
};

WatchBansRequest::WatchBansRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.WatchBansRequest)
}
WatchBansRequest::WatchBansRequest(const WatchBansRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.WatchBansRequest)
}

void WatchBansRequest::SharedCtor() {
}

WatchBansRequest::~WatchBansRequest() {
  // @@protoc_insertion_point(destructor:mruv.punishments.WatchBansRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WatchBansRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WatchBansRequest::ArenaDtor(void* object) {
  WatchBansRequest* _this = reinterpret_cast< WatchBansRequest* >(object);
  (void)_this;
}
void WatchBansRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WatchBansRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchBansRequest& WatchBansRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WatchBansRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void WatchBansRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.WatchBansRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchBansRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchBansRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.WatchBansRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.WatchBansRequest)
  return target;
}

size_t WatchBansRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.WatchBansRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchBansRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.WatchBansRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchBansRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WatchBansRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.WatchBansRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.WatchBansRequest)
    MergeFrom(*source);
  }
}

void WatchBansRequest::MergeFrom(const WatchBansRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.WatchBansRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WatchBansRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.WatchBansRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchBansRequest::CopyFrom(const WatchBansRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.WatchBansRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchBansRequest::IsInitialized() const {
  return true;
}

void WatchBansRequest::InternalSwap(WatchBansRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchBansRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WatchBlocksRequest::InitAsDefaultInstance() {
}
class WatchBlocksRequest::_Internal {
 public:
};

WatchBlocksRequest::WatchBlocksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.WatchBlocksRequest)
}
WatchBlocksRequest::WatchBlocksRequest(const WatchBlocksRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.WatchBlocksRequest)
}

void WatchBlocksRequest::SharedCtor() {
}

WatchBlocksRequest::~WatchBlocksRequest() {
  // @@protoc_insertion_point(destructor:mruv.punishments.WatchBlocksRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WatchBlocksRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WatchBlocksRequest::ArenaDtor(void* object) {
  WatchBlocksRequest* _this = reinterpret_cast< WatchBlocksRequest* >(object);
  (void)_this;
}
void WatchBlocksRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WatchBlocksRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchBlocksRequest& WatchBlocksRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WatchBlocksRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void WatchBlocksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.WatchBlocksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchBlocksRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchBlocksRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.WatchBlocksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.WatchBlocksRequest)
  return target;
}

size_t WatchBlocksRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.WatchBlocksRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchBlocksRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.WatchBlocksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchBlocksRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WatchBlocksRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.WatchBlocksRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.WatchBlocksRequest)
    MergeFrom(*source);
  }
}

void WatchBlocksRequest::MergeFrom(const WatchBlocksRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.WatchBlocksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WatchBlocksRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.WatchBlocksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchBlocksRequest::CopyFrom(const WatchBlocksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.WatchBlocksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchBlocksRequest::IsInitialized() const {
  return true;
}

void WatchBlocksRequest::InternalSwap(WatchBlocksRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchBlocksRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WatchWarnsRequest::InitAsDefaultInstance() {
}
class WatchWarnsRequest::_Internal {
 public:
};

WatchWarnsRequest::WatchWarnsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.WatchWarnsRequest)
}
WatchWarnsRequest::WatchWarnsRequest(const WatchWarnsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.WatchWarnsRequest)
}

void WatchWarnsRequest::SharedCtor() {
}

WatchWarnsRequest::~WatchWarnsRequest() {
  // @@protoc_insertion_point(destructor:mruv.punishments.WatchWarnsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WatchWarnsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WatchWarnsRequest::ArenaDtor(void* object) {
  WatchWarnsRequest* _this = reinterpret_cast< WatchWarnsRequest* >(object);
  (void)_this;
}
void WatchWarnsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WatchWarnsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchWarnsRequest& WatchWarnsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WatchWarnsRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void WatchWarnsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.WatchWarnsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchWarnsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchWarnsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.WatchWarnsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.WatchWarnsRequest)
  return target;
}

size_t WatchWarnsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.WatchWarnsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchWarnsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.WatchWarnsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchWarnsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WatchWarnsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.WatchWarnsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.WatchWarnsRequest)
    MergeFrom(*source);
  }
}

void WatchWarnsRequest::MergeFrom(const WatchWarnsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.WatchWarnsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WatchWarnsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.WatchWarnsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchWarnsRequest::CopyFrom(const WatchWarnsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.WatchWarnsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchWarnsRequest::IsInitialized() const {
  return true;
}

void WatchWarnsRequest::InternalSwap(WatchWarnsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchWarnsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WatchAdminJailsRequest::InitAsDefaultInstance() {
}
class WatchAdminJailsRequest::_Internal {
 public:
};

WatchAdminJailsRequest::WatchAdminJailsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.WatchAdminJailsRequest)
}
WatchAdminJailsRequest::WatchAdminJailsRequest(const WatchAdminJailsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.WatchAdminJailsRequest)
}

void WatchAdminJailsRequest::SharedCtor() {
}

WatchAdminJailsRequest::~WatchAdminJailsRequest() {
  // @@protoc_insertion_point(destructor:mruv.punishments.WatchAdminJailsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WatchAdminJailsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WatchAdminJailsRequest::ArenaDtor(void* object) {
  WatchAdminJailsRequest* _this = reinterpret_cast< WatchAdminJailsRequest* >(object);
  (void)_this;
}
void WatchAdminJailsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WatchAdminJailsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchAdminJailsRequest& WatchAdminJailsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WatchAdminJailsRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void WatchAdminJailsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.WatchAdminJailsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchAdminJailsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchAdminJailsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.WatchAdminJailsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.WatchAdminJailsRequest)
  return target;
}

size_t WatchAdminJailsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.WatchAdminJailsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchAdminJailsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.WatchAdminJailsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchAdminJailsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WatchAdminJailsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.WatchAdminJailsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.WatchAdminJailsRequest)
    MergeFrom(*source);
  }
}

void WatchAdminJailsRequest::MergeFrom(const WatchAdminJailsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.WatchAdminJailsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WatchAdminJailsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.WatchAdminJailsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchAdminJailsRequest::CopyFrom(const WatchAdminJailsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.WatchAdminJailsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchAdminJailsRequest::IsInitialized() const {
  return true;
}

void WatchAdminJailsRequest::InternalSwap(WatchAdminJailsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchAdminJailsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WatchUnBansRequest::InitAsDefaultInstance() {
}
class WatchUnBansRequest::_Internal {
 public:
};

WatchUnBansRequest::WatchUnBansRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.WatchUnBansRequest)
}
WatchUnBansRequest::WatchUnBansRequest(const WatchUnBansRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.WatchUnBansRequest)
}

void WatchUnBansRequest::SharedCtor() {
}

WatchUnBansRequest::~WatchUnBansRequest() {
  // @@protoc_insertion_point(destructor:mruv.punishments.WatchUnBansRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WatchUnBansRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WatchUnBansRequest::ArenaDtor(void* object) {
  WatchUnBansRequest* _this = reinterpret_cast< WatchUnBansRequest* >(object);
  (void)_this;
}
void WatchUnBansRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WatchUnBansRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchUnBansRequest& WatchUnBansRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WatchUnBansRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void WatchUnBansRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.WatchUnBansRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchUnBansRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchUnBansRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.WatchUnBansRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.WatchUnBansRequest)
  return target;
}

size_t WatchUnBansRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.WatchUnBansRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchUnBansRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.WatchUnBansRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchUnBansRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WatchUnBansRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.WatchUnBansRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.WatchUnBansRequest)
    MergeFrom(*source);
  }
}

void WatchUnBansRequest::MergeFrom(const WatchUnBansRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.WatchUnBansRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WatchUnBansRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.WatchUnBansRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchUnBansRequest::CopyFrom(const WatchUnBansRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.WatchUnBansRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchUnBansRequest::IsInitialized() const {
  return true;
}

void WatchUnBansRequest::InternalSwap(WatchUnBansRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchUnBansRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WatchUnBlocksRequest::InitAsDefaultInstance() {
}
class WatchUnBlocksRequest::_Internal {
 public:
};

WatchUnBlocksRequest::WatchUnBlocksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.WatchUnBlocksRequest)
}
WatchUnBlocksRequest::WatchUnBlocksRequest(const WatchUnBlocksRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.WatchUnBlocksRequest)
}

void WatchUnBlocksRequest::SharedCtor() {
}

WatchUnBlocksRequest::~WatchUnBlocksRequest() {
  // @@protoc_insertion_point(destructor:mruv.punishments.WatchUnBlocksRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WatchUnBlocksRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WatchUnBlocksRequest::ArenaDtor(void* object) {
  WatchUnBlocksRequest* _this = reinterpret_cast< WatchUnBlocksRequest* >(object);
  (void)_this;
}
void WatchUnBlocksRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WatchUnBlocksRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchUnBlocksRequest& WatchUnBlocksRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WatchUnBlocksRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void WatchUnBlocksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.WatchUnBlocksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchUnBlocksRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchUnBlocksRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.WatchUnBlocksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.WatchUnBlocksRequest)
  return target;
}

size_t WatchUnBlocksRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.WatchUnBlocksRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchUnBlocksRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.WatchUnBlocksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchUnBlocksRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WatchUnBlocksRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.WatchUnBlocksRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.WatchUnBlocksRequest)
    MergeFrom(*source);
  }
}

void WatchUnBlocksRequest::MergeFrom(const WatchUnBlocksRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.WatchUnBlocksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WatchUnBlocksRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.WatchUnBlocksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchUnBlocksRequest::CopyFrom(const WatchUnBlocksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.WatchUnBlocksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchUnBlocksRequest::IsInitialized() const {
  return true;
}

void WatchUnBlocksRequest::InternalSwap(WatchUnBlocksRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchUnBlocksRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WatchUnWarnsRequest::InitAsDefaultInstance() {
}
class WatchUnWarnsRequest::_Internal {
 public:
};

WatchUnWarnsRequest::WatchUnWarnsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.WatchUnWarnsRequest)
}
WatchUnWarnsRequest::WatchUnWarnsRequest(const WatchUnWarnsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.WatchUnWarnsRequest)
}

void WatchUnWarnsRequest::SharedCtor() {
}

WatchUnWarnsRequest::~WatchUnWarnsRequest() {
  // @@protoc_insertion_point(destructor:mruv.punishments.WatchUnWarnsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WatchUnWarnsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WatchUnWarnsRequest::ArenaDtor(void* object) {
  WatchUnWarnsRequest* _this = reinterpret_cast< WatchUnWarnsRequest* >(object);
  (void)_this;
}
void WatchUnWarnsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WatchUnWarnsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchUnWarnsRequest& WatchUnWarnsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WatchUnWarnsRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void WatchUnWarnsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.WatchUnWarnsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchUnWarnsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchUnWarnsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.WatchUnWarnsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.WatchUnWarnsRequest)
  return target;
}

size_t WatchUnWarnsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.WatchUnWarnsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchUnWarnsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.WatchUnWarnsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchUnWarnsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WatchUnWarnsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.WatchUnWarnsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.WatchUnWarnsRequest)
    MergeFrom(*source);
  }
}

void WatchUnWarnsRequest::MergeFrom(const WatchUnWarnsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.WatchUnWarnsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WatchUnWarnsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.WatchUnWarnsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchUnWarnsRequest::CopyFrom(const WatchUnWarnsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.WatchUnWarnsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchUnWarnsRequest::IsInitialized() const {
  return true;
}

void WatchUnWarnsRequest::InternalSwap(WatchUnWarnsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchUnWarnsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WatchUnAdminJailsRequest::InitAsDefaultInstance() {
}
class WatchUnAdminJailsRequest::_Internal {
 public:
};

WatchUnAdminJailsRequest::WatchUnAdminJailsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.WatchUnAdminJailsRequest)
}
WatchUnAdminJailsRequest::WatchUnAdminJailsRequest(const WatchUnAdminJailsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.WatchUnAdminJailsRequest)
}

void WatchUnAdminJailsRequest::SharedCtor() {
}

WatchUnAdminJailsRequest::~WatchUnAdminJailsRequest() {
  // @@protoc_insertion_point(destructor:mruv.punishments.WatchUnAdminJailsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WatchUnAdminJailsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WatchUnAdminJailsRequest::ArenaDtor(void* object) {
  WatchUnAdminJailsRequest* _this = reinterpret_cast< WatchUnAdminJailsRequest* >(object);
  (void)_this;
}
void WatchUnAdminJailsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WatchUnAdminJailsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchUnAdminJailsRequest& WatchUnAdminJailsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WatchUnAdminJailsRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void WatchUnAdminJailsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.WatchUnAdminJailsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchUnAdminJailsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchUnAdminJailsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.WatchUnAdminJailsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.WatchUnAdminJailsRequest)
  return target;
}

size_t WatchUnAdminJailsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.WatchUnAdminJailsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchUnAdminJailsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.WatchUnAdminJailsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchUnAdminJailsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WatchUnAdminJailsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.WatchUnAdminJailsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.WatchUnAdminJailsRequest)
    MergeFrom(*source);
  }
}

void WatchUnAdminJailsRequest::MergeFrom(const WatchUnAdminJailsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.WatchUnAdminJailsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WatchUnAdminJailsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.WatchUnAdminJailsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchUnAdminJailsRequest::CopyFrom(const WatchUnAdminJailsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.WatchUnAdminJailsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchUnAdminJailsRequest::IsInitialized() const {
  return true;
}

void WatchUnAdminJailsRequest::InternalSwap(WatchUnAdminJailsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchUnAdminJailsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WatchPlayerAcquittalsRequest::InitAsDefaultInstance() {
}
class WatchPlayerAcquittalsRequest::_Internal {
 public:
};

WatchPlayerAcquittalsRequest::WatchPlayerAcquittalsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.WatchPlayerAcquittalsRequest)
}
WatchPlayerAcquittalsRequest::WatchPlayerAcquittalsRequest(const WatchPlayerAcquittalsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.WatchPlayerAcquittalsRequest)
}

void WatchPlayerAcquittalsRequest::SharedCtor() {
}

WatchPlayerAcquittalsRequest::~WatchPlayerAcquittalsRequest() {
  // @@protoc_insertion_point(destructor:mruv.punishments.WatchPlayerAcquittalsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WatchPlayerAcquittalsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WatchPlayerAcquittalsRequest::ArenaDtor(void* object) {
  WatchPlayerAcquittalsRequest* _this = reinterpret_cast< WatchPlayerAcquittalsRequest* >(object);
  (void)_this;
}
void WatchPlayerAcquittalsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WatchPlayerAcquittalsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchPlayerAcquittalsRequest& WatchPlayerAcquittalsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WatchPlayerAcquittalsRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void WatchPlayerAcquittalsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.WatchPlayerAcquittalsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchPlayerAcquittalsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchPlayerAcquittalsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.WatchPlayerAcquittalsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.WatchPlayerAcquittalsRequest)
  return target;
}

size_t WatchPlayerAcquittalsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.WatchPlayerAcquittalsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchPlayerAcquittalsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.WatchPlayerAcquittalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchPlayerAcquittalsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WatchPlayerAcquittalsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.WatchPlayerAcquittalsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.WatchPlayerAcquittalsRequest)
    MergeFrom(*source);
  }
}

void WatchPlayerAcquittalsRequest::MergeFrom(const WatchPlayerAcquittalsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.WatchPlayerAcquittalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WatchPlayerAcquittalsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.WatchPlayerAcquittalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchPlayerAcquittalsRequest::CopyFrom(const WatchPlayerAcquittalsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.WatchPlayerAcquittalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchPlayerAcquittalsRequest::IsInitialized() const {
  return true;
}

void WatchPlayerAcquittalsRequest::InternalSwap(WatchPlayerAcquittalsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchPlayerAcquittalsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WatchPlayerAcquittalsResponse::InitAsDefaultInstance() {
}
class WatchPlayerAcquittalsResponse::_Internal {
 public:
};

WatchPlayerAcquittalsResponse::WatchPlayerAcquittalsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.WatchPlayerAcquittalsResponse)
}
WatchPlayerAcquittalsResponse::WatchPlayerAcquittalsResponse(const WatchPlayerAcquittalsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.WatchPlayerAcquittalsResponse)
}

void WatchPlayerAcquittalsResponse::SharedCtor() {
}

WatchPlayerAcquittalsResponse::~WatchPlayerAcquittalsResponse() {
  // @@protoc_insertion_point(destructor:mruv.punishments.WatchPlayerAcquittalsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WatchPlayerAcquittalsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WatchPlayerAcquittalsResponse::ArenaDtor(void* object) {
  WatchPlayerAcquittalsResponse* _this = reinterpret_cast< WatchPlayerAcquittalsResponse* >(object);
  (void)_this;
}
void WatchPlayerAcquittalsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WatchPlayerAcquittalsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchPlayerAcquittalsResponse& WatchPlayerAcquittalsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WatchPlayerAcquittalsResponse_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void WatchPlayerAcquittalsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.WatchPlayerAcquittalsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchPlayerAcquittalsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchPlayerAcquittalsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.WatchPlayerAcquittalsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.WatchPlayerAcquittalsResponse)
  return target;
}

size_t WatchPlayerAcquittalsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.WatchPlayerAcquittalsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchPlayerAcquittalsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.WatchPlayerAcquittalsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchPlayerAcquittalsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WatchPlayerAcquittalsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.WatchPlayerAcquittalsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.WatchPlayerAcquittalsResponse)
    MergeFrom(*source);
  }
}

void WatchPlayerAcquittalsResponse::MergeFrom(const WatchPlayerAcquittalsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.WatchPlayerAcquittalsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WatchPlayerAcquittalsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.WatchPlayerAcquittalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchPlayerAcquittalsResponse::CopyFrom(const WatchPlayerAcquittalsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.WatchPlayerAcquittalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchPlayerAcquittalsResponse::IsInitialized() const {
  return true;
}

void WatchPlayerAcquittalsResponse::InternalSwap(WatchPlayerAcquittalsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchPlayerAcquittalsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WatchPlayerPunishmentsRequest::InitAsDefaultInstance() {
}
class WatchPlayerPunishmentsRequest::_Internal {
 public:
};

WatchPlayerPunishmentsRequest::WatchPlayerPunishmentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.WatchPlayerPunishmentsRequest)
}
WatchPlayerPunishmentsRequest::WatchPlayerPunishmentsRequest(const WatchPlayerPunishmentsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.WatchPlayerPunishmentsRequest)
}

void WatchPlayerPunishmentsRequest::SharedCtor() {
}

WatchPlayerPunishmentsRequest::~WatchPlayerPunishmentsRequest() {
  // @@protoc_insertion_point(destructor:mruv.punishments.WatchPlayerPunishmentsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WatchPlayerPunishmentsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WatchPlayerPunishmentsRequest::ArenaDtor(void* object) {
  WatchPlayerPunishmentsRequest* _this = reinterpret_cast< WatchPlayerPunishmentsRequest* >(object);
  (void)_this;
}
void WatchPlayerPunishmentsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WatchPlayerPunishmentsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchPlayerPunishmentsRequest& WatchPlayerPunishmentsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WatchPlayerPunishmentsRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void WatchPlayerPunishmentsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.WatchPlayerPunishmentsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchPlayerPunishmentsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchPlayerPunishmentsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.WatchPlayerPunishmentsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.WatchPlayerPunishmentsRequest)
  return target;
}

size_t WatchPlayerPunishmentsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.WatchPlayerPunishmentsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchPlayerPunishmentsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.WatchPlayerPunishmentsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchPlayerPunishmentsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WatchPlayerPunishmentsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.WatchPlayerPunishmentsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.WatchPlayerPunishmentsRequest)
    MergeFrom(*source);
  }
}

void WatchPlayerPunishmentsRequest::MergeFrom(const WatchPlayerPunishmentsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.WatchPlayerPunishmentsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WatchPlayerPunishmentsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.WatchPlayerPunishmentsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchPlayerPunishmentsRequest::CopyFrom(const WatchPlayerPunishmentsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.WatchPlayerPunishmentsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchPlayerPunishmentsRequest::IsInitialized() const {
  return true;
}

void WatchPlayerPunishmentsRequest::InternalSwap(WatchPlayerPunishmentsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchPlayerPunishmentsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WatchPlayerPunishmentsResponse::InitAsDefaultInstance() {
}
class WatchPlayerPunishmentsResponse::_Internal {
 public:
};

WatchPlayerPunishmentsResponse::WatchPlayerPunishmentsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.WatchPlayerPunishmentsResponse)
}
WatchPlayerPunishmentsResponse::WatchPlayerPunishmentsResponse(const WatchPlayerPunishmentsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&punishment_id_) -
    reinterpret_cast<char*>(&type_)) + sizeof(punishment_id_));
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.WatchPlayerPunishmentsResponse)
}

void WatchPlayerPunishmentsResponse::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&punishment_id_) -
      reinterpret_cast<char*>(&type_)) + sizeof(punishment_id_));
}

WatchPlayerPunishmentsResponse::~WatchPlayerPunishmentsResponse() {
  // @@protoc_insertion_point(destructor:mruv.punishments.WatchPlayerPunishmentsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WatchPlayerPunishmentsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WatchPlayerPunishmentsResponse::ArenaDtor(void* object) {
  WatchPlayerPunishmentsResponse* _this = reinterpret_cast< WatchPlayerPunishmentsResponse* >(object);
  (void)_this;
}
void WatchPlayerPunishmentsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WatchPlayerPunishmentsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchPlayerPunishmentsResponse& WatchPlayerPunishmentsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WatchPlayerPunishmentsResponse_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void WatchPlayerPunishmentsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.WatchPlayerPunishmentsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&punishment_id_) -
      reinterpret_cast<char*>(&type_)) + sizeof(punishment_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchPlayerPunishmentsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mruv.punishments.PunishmentType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::mruv::punishments::PunishmentType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 punishment_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          punishment_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchPlayerPunishmentsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.WatchPlayerPunishmentsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mruv.punishments.PunishmentType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // uint32 punishment_id = 2;
  if (this->punishment_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_punishment_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.WatchPlayerPunishmentsResponse)
  return target;
}

size_t WatchPlayerPunishmentsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.WatchPlayerPunishmentsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mruv.punishments.PunishmentType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 punishment_id = 2;
  if (this->punishment_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_punishment_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchPlayerPunishmentsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.WatchPlayerPunishmentsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchPlayerPunishmentsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WatchPlayerPunishmentsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.WatchPlayerPunishmentsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.WatchPlayerPunishmentsResponse)
    MergeFrom(*source);
  }
}

void WatchPlayerPunishmentsResponse::MergeFrom(const WatchPlayerPunishmentsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.WatchPlayerPunishmentsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.punishment_id() != 0) {
    _internal_set_punishment_id(from._internal_punishment_id());
  }
}

void WatchPlayerPunishmentsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.WatchPlayerPunishmentsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchPlayerPunishmentsResponse::CopyFrom(const WatchPlayerPunishmentsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.WatchPlayerPunishmentsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchPlayerPunishmentsResponse::IsInitialized() const {
  return true;
}

void WatchPlayerPunishmentsResponse::InternalSwap(WatchPlayerPunishmentsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WatchPlayerPunishmentsResponse, punishment_id_)
      + sizeof(WatchPlayerPunishmentsResponse::punishment_id_)
      - PROTOBUF_FIELD_OFFSET(WatchPlayerPunishmentsResponse, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchPlayerPunishmentsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WatchPunishmentsRequest::InitAsDefaultInstance() {
}
class WatchPunishmentsRequest::_Internal {
 public:
};

WatchPunishmentsRequest::WatchPunishmentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.WatchPunishmentsRequest)
}
WatchPunishmentsRequest::WatchPunishmentsRequest(const WatchPunishmentsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.WatchPunishmentsRequest)
}

void WatchPunishmentsRequest::SharedCtor() {
}

WatchPunishmentsRequest::~WatchPunishmentsRequest() {
  // @@protoc_insertion_point(destructor:mruv.punishments.WatchPunishmentsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WatchPunishmentsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WatchPunishmentsRequest::ArenaDtor(void* object) {
  WatchPunishmentsRequest* _this = reinterpret_cast< WatchPunishmentsRequest* >(object);
  (void)_this;
}
void WatchPunishmentsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WatchPunishmentsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchPunishmentsRequest& WatchPunishmentsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WatchPunishmentsRequest_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void WatchPunishmentsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.WatchPunishmentsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchPunishmentsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchPunishmentsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.WatchPunishmentsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.WatchPunishmentsRequest)
  return target;
}

size_t WatchPunishmentsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.WatchPunishmentsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchPunishmentsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.WatchPunishmentsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchPunishmentsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WatchPunishmentsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.WatchPunishmentsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.WatchPunishmentsRequest)
    MergeFrom(*source);
  }
}

void WatchPunishmentsRequest::MergeFrom(const WatchPunishmentsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.WatchPunishmentsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WatchPunishmentsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.WatchPunishmentsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchPunishmentsRequest::CopyFrom(const WatchPunishmentsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.WatchPunishmentsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchPunishmentsRequest::IsInitialized() const {
  return true;
}

void WatchPunishmentsRequest::InternalSwap(WatchPunishmentsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchPunishmentsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WatchPunishmentsResponse::InitAsDefaultInstance() {
}
class WatchPunishmentsResponse::_Internal {
 public:
};

WatchPunishmentsResponse::WatchPunishmentsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mruv.punishments.WatchPunishmentsResponse)
}
WatchPunishmentsResponse::WatchPunishmentsResponse(const WatchPunishmentsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&character_) -
    reinterpret_cast<char*>(&type_)) + sizeof(character_));
  // @@protoc_insertion_point(copy_constructor:mruv.punishments.WatchPunishmentsResponse)
}

void WatchPunishmentsResponse::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&character_) -
      reinterpret_cast<char*>(&type_)) + sizeof(character_));
}

WatchPunishmentsResponse::~WatchPunishmentsResponse() {
  // @@protoc_insertion_point(destructor:mruv.punishments.WatchPunishmentsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WatchPunishmentsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WatchPunishmentsResponse::ArenaDtor(void* object) {
  WatchPunishmentsResponse* _this = reinterpret_cast< WatchPunishmentsResponse* >(object);
  (void)_this;
}
void WatchPunishmentsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WatchPunishmentsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchPunishmentsResponse& WatchPunishmentsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WatchPunishmentsResponse_punishments_2fpunishments_2eproto.base);
  return *internal_default_instance();
}


void WatchPunishmentsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.punishments.WatchPunishmentsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&character_) -
      reinterpret_cast<char*>(&type_)) + sizeof(character_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchPunishmentsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mruv.punishments.PunishmentType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::mruv::punishments::PunishmentType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 punishment_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          punishment_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 player = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 character = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          character_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchPunishmentsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.punishments.WatchPunishmentsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mruv.punishments.PunishmentType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // uint32 punishment_id = 2;
  if (this->punishment_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_punishment_id(), target);
  }

  // uint32 player = 3;
  if (this->player() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_player(), target);
  }

  // uint32 character = 4;
  if (this->character() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_character(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.punishments.WatchPunishmentsResponse)
  return target;
}

size_t WatchPunishmentsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.punishments.WatchPunishmentsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mruv.punishments.PunishmentType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 punishment_id = 2;
  if (this->punishment_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_punishment_id());
  }

  // uint32 player = 3;
  if (this->player() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player());
  }

  // uint32 character = 4;
  if (this->character() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_character());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchPunishmentsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.punishments.WatchPunishmentsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchPunishmentsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WatchPunishmentsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.punishments.WatchPunishmentsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.punishments.WatchPunishmentsResponse)
    MergeFrom(*source);
  }
}

void WatchPunishmentsResponse::MergeFrom(const WatchPunishmentsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.punishments.WatchPunishmentsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.punishment_id() != 0) {
    _internal_set_punishment_id(from._internal_punishment_id());
  }
  if (from.player() != 0) {
    _internal_set_player(from._internal_player());
  }
  if (from.character() != 0) {
    _internal_set_character(from._internal_character());
  }
}

void WatchPunishmentsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.punishments.WatchPunishmentsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchPunishmentsResponse::CopyFrom(const WatchPunishmentsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.punishments.WatchPunishmentsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchPunishmentsResponse::IsInitialized() const {
  return true;
}

void WatchPunishmentsResponse::InternalSwap(WatchPunishmentsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WatchPunishmentsResponse, character_)
      + sizeof(WatchPunishmentsResponse::character_)
      - PROTOBUF_FIELD_OFFSET(WatchPunishmentsResponse, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchPunishmentsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace punishments
}  // namespace mruv
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mruv::punishments::BanMessage* Arena::CreateMaybeMessage< ::mruv::punishments::BanMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::BanMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::WarnMessage* Arena::CreateMaybeMessage< ::mruv::punishments::WarnMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::WarnMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::BlockMessage* Arena::CreateMaybeMessage< ::mruv::punishments::BlockMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::BlockMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::AdminJailMessage* Arena::CreateMaybeMessage< ::mruv::punishments::AdminJailMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::AdminJailMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::UnBanMessage* Arena::CreateMaybeMessage< ::mruv::punishments::UnBanMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::UnBanMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::UnBlockMessage* Arena::CreateMaybeMessage< ::mruv::punishments::UnBlockMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::UnBlockMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::UnWarnMessage* Arena::CreateMaybeMessage< ::mruv::punishments::UnWarnMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::UnWarnMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::UnAdminJailMessage* Arena::CreateMaybeMessage< ::mruv::punishments::UnAdminJailMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::UnAdminJailMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::BanRequest* Arena::CreateMaybeMessage< ::mruv::punishments::BanRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::BanRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::BanResponse* Arena::CreateMaybeMessage< ::mruv::punishments::BanResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::BanResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::BlockRequest* Arena::CreateMaybeMessage< ::mruv::punishments::BlockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::BlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::BlockResponse* Arena::CreateMaybeMessage< ::mruv::punishments::BlockResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::BlockResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::WarnRequest* Arena::CreateMaybeMessage< ::mruv::punishments::WarnRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::WarnRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::WarnResponse* Arena::CreateMaybeMessage< ::mruv::punishments::WarnResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::WarnResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::AdminJailRequest* Arena::CreateMaybeMessage< ::mruv::punishments::AdminJailRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::AdminJailRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::AdminJailResponse* Arena::CreateMaybeMessage< ::mruv::punishments::AdminJailResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::AdminJailResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::MuteGlobalChatsRequest* Arena::CreateMaybeMessage< ::mruv::punishments::MuteGlobalChatsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::MuteGlobalChatsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::MuteGlobalChatsResponse* Arena::CreateMaybeMessage< ::mruv::punishments::MuteGlobalChatsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::MuteGlobalChatsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::UnBanRequest* Arena::CreateMaybeMessage< ::mruv::punishments::UnBanRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::UnBanRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::UnBanResponse* Arena::CreateMaybeMessage< ::mruv::punishments::UnBanResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::UnBanResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::UnBlockRequest* Arena::CreateMaybeMessage< ::mruv::punishments::UnBlockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::UnBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::UnBlockResponse* Arena::CreateMaybeMessage< ::mruv::punishments::UnBlockResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::UnBlockResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::UnWarnRequest* Arena::CreateMaybeMessage< ::mruv::punishments::UnWarnRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::UnWarnRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::UnWarnResponse* Arena::CreateMaybeMessage< ::mruv::punishments::UnWarnResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::UnWarnResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::UnAdminJailRequest* Arena::CreateMaybeMessage< ::mruv::punishments::UnAdminJailRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::UnAdminJailRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::UnAdminJailResponse* Arena::CreateMaybeMessage< ::mruv::punishments::UnAdminJailResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::UnAdminJailResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::UnMuteGlobalChatsRequest* Arena::CreateMaybeMessage< ::mruv::punishments::UnMuteGlobalChatsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::UnMuteGlobalChatsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::UnMuteGlobalChatsResponse* Arena::CreateMaybeMessage< ::mruv::punishments::UnMuteGlobalChatsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::UnMuteGlobalChatsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::GetPlayerBansRequest* Arena::CreateMaybeMessage< ::mruv::punishments::GetPlayerBansRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::GetPlayerBansRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::GetPlayerBansResponse* Arena::CreateMaybeMessage< ::mruv::punishments::GetPlayerBansResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::GetPlayerBansResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::GetPlayerWarnsRequest* Arena::CreateMaybeMessage< ::mruv::punishments::GetPlayerWarnsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::GetPlayerWarnsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::GetPlayerWarnsResponse* Arena::CreateMaybeMessage< ::mruv::punishments::GetPlayerWarnsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::GetPlayerWarnsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::GetPlayerAdminJailRequest* Arena::CreateMaybeMessage< ::mruv::punishments::GetPlayerAdminJailRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::GetPlayerAdminJailRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::GetPlayerAdminJailResponse* Arena::CreateMaybeMessage< ::mruv::punishments::GetPlayerAdminJailResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::GetPlayerAdminJailResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::GetBanRequest* Arena::CreateMaybeMessage< ::mruv::punishments::GetBanRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::GetBanRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::GetWarnRequest* Arena::CreateMaybeMessage< ::mruv::punishments::GetWarnRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::GetWarnRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::GetBlockRequest* Arena::CreateMaybeMessage< ::mruv::punishments::GetBlockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::GetBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::IsPlayerBannedRequest* Arena::CreateMaybeMessage< ::mruv::punishments::IsPlayerBannedRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::IsPlayerBannedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::IsPlayerBannedResponse* Arena::CreateMaybeMessage< ::mruv::punishments::IsPlayerBannedResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::IsPlayerBannedResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::IsCharacterBlockedRequest* Arena::CreateMaybeMessage< ::mruv::punishments::IsCharacterBlockedRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::IsCharacterBlockedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::IsCharacterBlockedResponse* Arena::CreateMaybeMessage< ::mruv::punishments::IsCharacterBlockedResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::IsCharacterBlockedResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::IsCharacterJailedRequest* Arena::CreateMaybeMessage< ::mruv::punishments::IsCharacterJailedRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::IsCharacterJailedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::IsCharacterJailedResponse* Arena::CreateMaybeMessage< ::mruv::punishments::IsCharacterJailedResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::IsCharacterJailedResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::WatchBansRequest* Arena::CreateMaybeMessage< ::mruv::punishments::WatchBansRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::WatchBansRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::WatchBlocksRequest* Arena::CreateMaybeMessage< ::mruv::punishments::WatchBlocksRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::WatchBlocksRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::WatchWarnsRequest* Arena::CreateMaybeMessage< ::mruv::punishments::WatchWarnsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::WatchWarnsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::WatchAdminJailsRequest* Arena::CreateMaybeMessage< ::mruv::punishments::WatchAdminJailsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::WatchAdminJailsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::WatchUnBansRequest* Arena::CreateMaybeMessage< ::mruv::punishments::WatchUnBansRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::WatchUnBansRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::WatchUnBlocksRequest* Arena::CreateMaybeMessage< ::mruv::punishments::WatchUnBlocksRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::WatchUnBlocksRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::WatchUnWarnsRequest* Arena::CreateMaybeMessage< ::mruv::punishments::WatchUnWarnsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::WatchUnWarnsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::WatchUnAdminJailsRequest* Arena::CreateMaybeMessage< ::mruv::punishments::WatchUnAdminJailsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::WatchUnAdminJailsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::WatchPlayerAcquittalsRequest* Arena::CreateMaybeMessage< ::mruv::punishments::WatchPlayerAcquittalsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::WatchPlayerAcquittalsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::WatchPlayerAcquittalsResponse* Arena::CreateMaybeMessage< ::mruv::punishments::WatchPlayerAcquittalsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::WatchPlayerAcquittalsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::WatchPlayerPunishmentsRequest* Arena::CreateMaybeMessage< ::mruv::punishments::WatchPlayerPunishmentsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::WatchPlayerPunishmentsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::WatchPlayerPunishmentsResponse* Arena::CreateMaybeMessage< ::mruv::punishments::WatchPlayerPunishmentsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::WatchPlayerPunishmentsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::WatchPunishmentsRequest* Arena::CreateMaybeMessage< ::mruv::punishments::WatchPunishmentsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::WatchPunishmentsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::punishments::WatchPunishmentsResponse* Arena::CreateMaybeMessage< ::mruv::punishments::WatchPunishmentsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mruv::punishments::WatchPunishmentsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
