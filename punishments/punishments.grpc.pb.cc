// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: punishments/punishments.proto

#include "punishments/punishments.pb.h"
#include "punishments/punishments.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace mruv {
namespace economy {

static const char* MruVPunishmentsService_method_names[] = {
  "/mruv.economy.MruVPunishmentsService/Ban",
  "/mruv.economy.MruVPunishmentsService/Block",
  "/mruv.economy.MruVPunishmentsService/Warn",
  "/mruv.economy.MruVPunishmentsService/AdminJail",
  "/mruv.economy.MruVPunishmentsService/MuteGlobalChats",
  "/mruv.economy.MruVPunishmentsService/UnBan",
  "/mruv.economy.MruVPunishmentsService/UnWarn",
  "/mruv.economy.MruVPunishmentsService/UnAdminJail",
  "/mruv.economy.MruVPunishmentsService/UnMuteGlobalChats",
  "/mruv.economy.MruVPunishmentsService/GetPlayerBans",
  "/mruv.economy.MruVPunishmentsService/GetPlayerWarns",
  "/mruv.economy.MruVPunishmentsService/GetPlayerAdminJail",
  "/mruv.economy.MruVPunishmentsService/GetBan",
  "/mruv.economy.MruVPunishmentsService/GetWarn",
  "/mruv.economy.MruVPunishmentsService/GetBlock",
  "/mruv.economy.MruVPunishmentsService/IsPlayerBanned",
  "/mruv.economy.MruVPunishmentsService/IsCharacterBlocked",
  "/mruv.economy.MruVPunishmentsService/IsCharacterJailed",
  "/mruv.economy.MruVPunishmentsService/WatchBans",
  "/mruv.economy.MruVPunishmentsService/WatchBlocks",
  "/mruv.economy.MruVPunishmentsService/WatchWarns",
  "/mruv.economy.MruVPunishmentsService/WatchAdminJails",
  "/mruv.economy.MruVPunishmentsService/WatchUnBans",
  "/mruv.economy.MruVPunishmentsService/WatchUnBlocks",
  "/mruv.economy.MruVPunishmentsService/WatchUnWarns",
  "/mruv.economy.MruVPunishmentsService/WatchUnAdminJails",
  "/mruv.economy.MruVPunishmentsService/WatchPlayerPunishments",
  "/mruv.economy.MruVPunishmentsService/WatchPlayerAcquittals",
  "/mruv.economy.MruVPunishmentsService/WatchPunishments",
};

std::unique_ptr< MruVPunishmentsService::Stub> MruVPunishmentsService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MruVPunishmentsService::Stub> stub(new MruVPunishmentsService::Stub(channel));
  return stub;
}

MruVPunishmentsService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Ban_(MruVPunishmentsService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Block_(MruVPunishmentsService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Warn_(MruVPunishmentsService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AdminJail_(MruVPunishmentsService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MuteGlobalChats_(MruVPunishmentsService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnBan_(MruVPunishmentsService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnWarn_(MruVPunishmentsService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnAdminJail_(MruVPunishmentsService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnMuteGlobalChats_(MruVPunishmentsService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPlayerBans_(MruVPunishmentsService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPlayerWarns_(MruVPunishmentsService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPlayerAdminJail_(MruVPunishmentsService_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBan_(MruVPunishmentsService_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetWarn_(MruVPunishmentsService_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBlock_(MruVPunishmentsService_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsPlayerBanned_(MruVPunishmentsService_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsCharacterBlocked_(MruVPunishmentsService_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsCharacterJailed_(MruVPunishmentsService_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WatchBans_(MruVPunishmentsService_method_names[18], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_WatchBlocks_(MruVPunishmentsService_method_names[19], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_WatchWarns_(MruVPunishmentsService_method_names[20], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_WatchAdminJails_(MruVPunishmentsService_method_names[21], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_WatchUnBans_(MruVPunishmentsService_method_names[22], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_WatchUnBlocks_(MruVPunishmentsService_method_names[23], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_WatchUnWarns_(MruVPunishmentsService_method_names[24], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_WatchUnAdminJails_(MruVPunishmentsService_method_names[25], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_WatchPlayerPunishments_(MruVPunishmentsService_method_names[26], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_WatchPlayerAcquittals_(MruVPunishmentsService_method_names[27], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_WatchPunishments_(MruVPunishmentsService_method_names[28], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status MruVPunishmentsService::Stub::Ban(::grpc::ClientContext* context, const ::mruv::economy::BanRequest& request, ::mruv::economy::BanResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Ban_, context, request, response);
}

void MruVPunishmentsService::Stub::experimental_async::Ban(::grpc::ClientContext* context, const ::mruv::economy::BanRequest* request, ::mruv::economy::BanResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Ban_, context, request, response, std::move(f));
}

void MruVPunishmentsService::Stub::experimental_async::Ban(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::BanResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Ban_, context, request, response, std::move(f));
}

void MruVPunishmentsService::Stub::experimental_async::Ban(::grpc::ClientContext* context, const ::mruv::economy::BanRequest* request, ::mruv::economy::BanResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Ban_, context, request, response, reactor);
}

void MruVPunishmentsService::Stub::experimental_async::Ban(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::BanResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Ban_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::BanResponse>* MruVPunishmentsService::Stub::AsyncBanRaw(::grpc::ClientContext* context, const ::mruv::economy::BanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::BanResponse>::Create(channel_.get(), cq, rpcmethod_Ban_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::BanResponse>* MruVPunishmentsService::Stub::PrepareAsyncBanRaw(::grpc::ClientContext* context, const ::mruv::economy::BanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::BanResponse>::Create(channel_.get(), cq, rpcmethod_Ban_, context, request, false);
}

::grpc::Status MruVPunishmentsService::Stub::Block(::grpc::ClientContext* context, const ::mruv::economy::BlockRequest& request, ::mruv::economy::BlockResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Block_, context, request, response);
}

void MruVPunishmentsService::Stub::experimental_async::Block(::grpc::ClientContext* context, const ::mruv::economy::BlockRequest* request, ::mruv::economy::BlockResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Block_, context, request, response, std::move(f));
}

void MruVPunishmentsService::Stub::experimental_async::Block(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::BlockResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Block_, context, request, response, std::move(f));
}

void MruVPunishmentsService::Stub::experimental_async::Block(::grpc::ClientContext* context, const ::mruv::economy::BlockRequest* request, ::mruv::economy::BlockResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Block_, context, request, response, reactor);
}

void MruVPunishmentsService::Stub::experimental_async::Block(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::BlockResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Block_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::BlockResponse>* MruVPunishmentsService::Stub::AsyncBlockRaw(::grpc::ClientContext* context, const ::mruv::economy::BlockRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::BlockResponse>::Create(channel_.get(), cq, rpcmethod_Block_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::BlockResponse>* MruVPunishmentsService::Stub::PrepareAsyncBlockRaw(::grpc::ClientContext* context, const ::mruv::economy::BlockRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::BlockResponse>::Create(channel_.get(), cq, rpcmethod_Block_, context, request, false);
}

::grpc::Status MruVPunishmentsService::Stub::Warn(::grpc::ClientContext* context, const ::mruv::economy::WarnRequest& request, ::mruv::economy::WarnResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Warn_, context, request, response);
}

void MruVPunishmentsService::Stub::experimental_async::Warn(::grpc::ClientContext* context, const ::mruv::economy::WarnRequest* request, ::mruv::economy::WarnResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Warn_, context, request, response, std::move(f));
}

void MruVPunishmentsService::Stub::experimental_async::Warn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::WarnResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Warn_, context, request, response, std::move(f));
}

void MruVPunishmentsService::Stub::experimental_async::Warn(::grpc::ClientContext* context, const ::mruv::economy::WarnRequest* request, ::mruv::economy::WarnResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Warn_, context, request, response, reactor);
}

void MruVPunishmentsService::Stub::experimental_async::Warn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::WarnResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Warn_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::WarnResponse>* MruVPunishmentsService::Stub::AsyncWarnRaw(::grpc::ClientContext* context, const ::mruv::economy::WarnRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::WarnResponse>::Create(channel_.get(), cq, rpcmethod_Warn_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::WarnResponse>* MruVPunishmentsService::Stub::PrepareAsyncWarnRaw(::grpc::ClientContext* context, const ::mruv::economy::WarnRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::WarnResponse>::Create(channel_.get(), cq, rpcmethod_Warn_, context, request, false);
}

::grpc::Status MruVPunishmentsService::Stub::AdminJail(::grpc::ClientContext* context, const ::mruv::economy::AdminJailRequest& request, ::mruv::economy::AdminJailResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AdminJail_, context, request, response);
}

void MruVPunishmentsService::Stub::experimental_async::AdminJail(::grpc::ClientContext* context, const ::mruv::economy::AdminJailRequest* request, ::mruv::economy::AdminJailResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AdminJail_, context, request, response, std::move(f));
}

void MruVPunishmentsService::Stub::experimental_async::AdminJail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::AdminJailResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AdminJail_, context, request, response, std::move(f));
}

void MruVPunishmentsService::Stub::experimental_async::AdminJail(::grpc::ClientContext* context, const ::mruv::economy::AdminJailRequest* request, ::mruv::economy::AdminJailResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AdminJail_, context, request, response, reactor);
}

void MruVPunishmentsService::Stub::experimental_async::AdminJail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::AdminJailResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AdminJail_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::AdminJailResponse>* MruVPunishmentsService::Stub::AsyncAdminJailRaw(::grpc::ClientContext* context, const ::mruv::economy::AdminJailRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::AdminJailResponse>::Create(channel_.get(), cq, rpcmethod_AdminJail_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::AdminJailResponse>* MruVPunishmentsService::Stub::PrepareAsyncAdminJailRaw(::grpc::ClientContext* context, const ::mruv::economy::AdminJailRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::AdminJailResponse>::Create(channel_.get(), cq, rpcmethod_AdminJail_, context, request, false);
}

::grpc::Status MruVPunishmentsService::Stub::MuteGlobalChats(::grpc::ClientContext* context, const ::mruv::economy::MuteGlobalChatsRequest& request, ::mruv::economy::MuteGlobalChatsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MuteGlobalChats_, context, request, response);
}

void MruVPunishmentsService::Stub::experimental_async::MuteGlobalChats(::grpc::ClientContext* context, const ::mruv::economy::MuteGlobalChatsRequest* request, ::mruv::economy::MuteGlobalChatsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MuteGlobalChats_, context, request, response, std::move(f));
}

void MruVPunishmentsService::Stub::experimental_async::MuteGlobalChats(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::MuteGlobalChatsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MuteGlobalChats_, context, request, response, std::move(f));
}

void MruVPunishmentsService::Stub::experimental_async::MuteGlobalChats(::grpc::ClientContext* context, const ::mruv::economy::MuteGlobalChatsRequest* request, ::mruv::economy::MuteGlobalChatsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MuteGlobalChats_, context, request, response, reactor);
}

void MruVPunishmentsService::Stub::experimental_async::MuteGlobalChats(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::MuteGlobalChatsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MuteGlobalChats_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::MuteGlobalChatsResponse>* MruVPunishmentsService::Stub::AsyncMuteGlobalChatsRaw(::grpc::ClientContext* context, const ::mruv::economy::MuteGlobalChatsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::MuteGlobalChatsResponse>::Create(channel_.get(), cq, rpcmethod_MuteGlobalChats_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::MuteGlobalChatsResponse>* MruVPunishmentsService::Stub::PrepareAsyncMuteGlobalChatsRaw(::grpc::ClientContext* context, const ::mruv::economy::MuteGlobalChatsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::MuteGlobalChatsResponse>::Create(channel_.get(), cq, rpcmethod_MuteGlobalChats_, context, request, false);
}

::grpc::Status MruVPunishmentsService::Stub::UnBan(::grpc::ClientContext* context, const ::mruv::economy::UnBanRequest& request, ::mruv::economy::UnBanResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UnBan_, context, request, response);
}

void MruVPunishmentsService::Stub::experimental_async::UnBan(::grpc::ClientContext* context, const ::mruv::economy::UnBanRequest* request, ::mruv::economy::UnBanResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UnBan_, context, request, response, std::move(f));
}

void MruVPunishmentsService::Stub::experimental_async::UnBan(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::UnBanResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UnBan_, context, request, response, std::move(f));
}

void MruVPunishmentsService::Stub::experimental_async::UnBan(::grpc::ClientContext* context, const ::mruv::economy::UnBanRequest* request, ::mruv::economy::UnBanResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UnBan_, context, request, response, reactor);
}

void MruVPunishmentsService::Stub::experimental_async::UnBan(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::UnBanResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UnBan_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::UnBanResponse>* MruVPunishmentsService::Stub::AsyncUnBanRaw(::grpc::ClientContext* context, const ::mruv::economy::UnBanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::UnBanResponse>::Create(channel_.get(), cq, rpcmethod_UnBan_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::UnBanResponse>* MruVPunishmentsService::Stub::PrepareAsyncUnBanRaw(::grpc::ClientContext* context, const ::mruv::economy::UnBanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::UnBanResponse>::Create(channel_.get(), cq, rpcmethod_UnBan_, context, request, false);
}

::grpc::Status MruVPunishmentsService::Stub::UnWarn(::grpc::ClientContext* context, const ::mruv::economy::UnWarnRequest& request, ::mruv::economy::UnWarnResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UnWarn_, context, request, response);
}

void MruVPunishmentsService::Stub::experimental_async::UnWarn(::grpc::ClientContext* context, const ::mruv::economy::UnWarnRequest* request, ::mruv::economy::UnWarnResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UnWarn_, context, request, response, std::move(f));
}

void MruVPunishmentsService::Stub::experimental_async::UnWarn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::UnWarnResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UnWarn_, context, request, response, std::move(f));
}

void MruVPunishmentsService::Stub::experimental_async::UnWarn(::grpc::ClientContext* context, const ::mruv::economy::UnWarnRequest* request, ::mruv::economy::UnWarnResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UnWarn_, context, request, response, reactor);
}

void MruVPunishmentsService::Stub::experimental_async::UnWarn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::UnWarnResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UnWarn_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::UnWarnResponse>* MruVPunishmentsService::Stub::AsyncUnWarnRaw(::grpc::ClientContext* context, const ::mruv::economy::UnWarnRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::UnWarnResponse>::Create(channel_.get(), cq, rpcmethod_UnWarn_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::UnWarnResponse>* MruVPunishmentsService::Stub::PrepareAsyncUnWarnRaw(::grpc::ClientContext* context, const ::mruv::economy::UnWarnRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::UnWarnResponse>::Create(channel_.get(), cq, rpcmethod_UnWarn_, context, request, false);
}

::grpc::Status MruVPunishmentsService::Stub::UnAdminJail(::grpc::ClientContext* context, const ::mruv::economy::UnAdminJailRequest& request, ::mruv::economy::UnAdminJailResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UnAdminJail_, context, request, response);
}

void MruVPunishmentsService::Stub::experimental_async::UnAdminJail(::grpc::ClientContext* context, const ::mruv::economy::UnAdminJailRequest* request, ::mruv::economy::UnAdminJailResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UnAdminJail_, context, request, response, std::move(f));
}

void MruVPunishmentsService::Stub::experimental_async::UnAdminJail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::UnAdminJailResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UnAdminJail_, context, request, response, std::move(f));
}

void MruVPunishmentsService::Stub::experimental_async::UnAdminJail(::grpc::ClientContext* context, const ::mruv::economy::UnAdminJailRequest* request, ::mruv::economy::UnAdminJailResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UnAdminJail_, context, request, response, reactor);
}

void MruVPunishmentsService::Stub::experimental_async::UnAdminJail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::UnAdminJailResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UnAdminJail_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::UnAdminJailResponse>* MruVPunishmentsService::Stub::AsyncUnAdminJailRaw(::grpc::ClientContext* context, const ::mruv::economy::UnAdminJailRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::UnAdminJailResponse>::Create(channel_.get(), cq, rpcmethod_UnAdminJail_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::UnAdminJailResponse>* MruVPunishmentsService::Stub::PrepareAsyncUnAdminJailRaw(::grpc::ClientContext* context, const ::mruv::economy::UnAdminJailRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::UnAdminJailResponse>::Create(channel_.get(), cq, rpcmethod_UnAdminJail_, context, request, false);
}

::grpc::Status MruVPunishmentsService::Stub::UnMuteGlobalChats(::grpc::ClientContext* context, const ::mruv::economy::UnMuteGlobalChatsRequest& request, ::mruv::economy::UnMuteGlobalChatsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UnMuteGlobalChats_, context, request, response);
}

void MruVPunishmentsService::Stub::experimental_async::UnMuteGlobalChats(::grpc::ClientContext* context, const ::mruv::economy::UnMuteGlobalChatsRequest* request, ::mruv::economy::UnMuteGlobalChatsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UnMuteGlobalChats_, context, request, response, std::move(f));
}

void MruVPunishmentsService::Stub::experimental_async::UnMuteGlobalChats(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::UnMuteGlobalChatsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UnMuteGlobalChats_, context, request, response, std::move(f));
}

void MruVPunishmentsService::Stub::experimental_async::UnMuteGlobalChats(::grpc::ClientContext* context, const ::mruv::economy::UnMuteGlobalChatsRequest* request, ::mruv::economy::UnMuteGlobalChatsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UnMuteGlobalChats_, context, request, response, reactor);
}

void MruVPunishmentsService::Stub::experimental_async::UnMuteGlobalChats(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::UnMuteGlobalChatsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UnMuteGlobalChats_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::UnMuteGlobalChatsResponse>* MruVPunishmentsService::Stub::AsyncUnMuteGlobalChatsRaw(::grpc::ClientContext* context, const ::mruv::economy::UnMuteGlobalChatsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::UnMuteGlobalChatsResponse>::Create(channel_.get(), cq, rpcmethod_UnMuteGlobalChats_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::UnMuteGlobalChatsResponse>* MruVPunishmentsService::Stub::PrepareAsyncUnMuteGlobalChatsRaw(::grpc::ClientContext* context, const ::mruv::economy::UnMuteGlobalChatsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::UnMuteGlobalChatsResponse>::Create(channel_.get(), cq, rpcmethod_UnMuteGlobalChats_, context, request, false);
}

::grpc::Status MruVPunishmentsService::Stub::GetPlayerBans(::grpc::ClientContext* context, const ::mruv::economy::GetPlayerBansRequest& request, ::mruv::economy::GetPlayerBansResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetPlayerBans_, context, request, response);
}

void MruVPunishmentsService::Stub::experimental_async::GetPlayerBans(::grpc::ClientContext* context, const ::mruv::economy::GetPlayerBansRequest* request, ::mruv::economy::GetPlayerBansResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPlayerBans_, context, request, response, std::move(f));
}

void MruVPunishmentsService::Stub::experimental_async::GetPlayerBans(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::GetPlayerBansResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPlayerBans_, context, request, response, std::move(f));
}

void MruVPunishmentsService::Stub::experimental_async::GetPlayerBans(::grpc::ClientContext* context, const ::mruv::economy::GetPlayerBansRequest* request, ::mruv::economy::GetPlayerBansResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPlayerBans_, context, request, response, reactor);
}

void MruVPunishmentsService::Stub::experimental_async::GetPlayerBans(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::GetPlayerBansResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPlayerBans_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::GetPlayerBansResponse>* MruVPunishmentsService::Stub::AsyncGetPlayerBansRaw(::grpc::ClientContext* context, const ::mruv::economy::GetPlayerBansRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::GetPlayerBansResponse>::Create(channel_.get(), cq, rpcmethod_GetPlayerBans_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::GetPlayerBansResponse>* MruVPunishmentsService::Stub::PrepareAsyncGetPlayerBansRaw(::grpc::ClientContext* context, const ::mruv::economy::GetPlayerBansRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::GetPlayerBansResponse>::Create(channel_.get(), cq, rpcmethod_GetPlayerBans_, context, request, false);
}

::grpc::Status MruVPunishmentsService::Stub::GetPlayerWarns(::grpc::ClientContext* context, const ::mruv::economy::GetPlayerWarnsRequest& request, ::mruv::economy::GetPlayerWarnsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetPlayerWarns_, context, request, response);
}

void MruVPunishmentsService::Stub::experimental_async::GetPlayerWarns(::grpc::ClientContext* context, const ::mruv::economy::GetPlayerWarnsRequest* request, ::mruv::economy::GetPlayerWarnsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPlayerWarns_, context, request, response, std::move(f));
}

void MruVPunishmentsService::Stub::experimental_async::GetPlayerWarns(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::GetPlayerWarnsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPlayerWarns_, context, request, response, std::move(f));
}

void MruVPunishmentsService::Stub::experimental_async::GetPlayerWarns(::grpc::ClientContext* context, const ::mruv::economy::GetPlayerWarnsRequest* request, ::mruv::economy::GetPlayerWarnsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPlayerWarns_, context, request, response, reactor);
}

void MruVPunishmentsService::Stub::experimental_async::GetPlayerWarns(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::GetPlayerWarnsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPlayerWarns_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::GetPlayerWarnsResponse>* MruVPunishmentsService::Stub::AsyncGetPlayerWarnsRaw(::grpc::ClientContext* context, const ::mruv::economy::GetPlayerWarnsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::GetPlayerWarnsResponse>::Create(channel_.get(), cq, rpcmethod_GetPlayerWarns_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::GetPlayerWarnsResponse>* MruVPunishmentsService::Stub::PrepareAsyncGetPlayerWarnsRaw(::grpc::ClientContext* context, const ::mruv::economy::GetPlayerWarnsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::GetPlayerWarnsResponse>::Create(channel_.get(), cq, rpcmethod_GetPlayerWarns_, context, request, false);
}

::grpc::Status MruVPunishmentsService::Stub::GetPlayerAdminJail(::grpc::ClientContext* context, const ::mruv::economy::GetPlayerAdminJailRequest& request, ::mruv::economy::GetPlayerAdminJailResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetPlayerAdminJail_, context, request, response);
}

void MruVPunishmentsService::Stub::experimental_async::GetPlayerAdminJail(::grpc::ClientContext* context, const ::mruv::economy::GetPlayerAdminJailRequest* request, ::mruv::economy::GetPlayerAdminJailResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPlayerAdminJail_, context, request, response, std::move(f));
}

void MruVPunishmentsService::Stub::experimental_async::GetPlayerAdminJail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::GetPlayerAdminJailResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPlayerAdminJail_, context, request, response, std::move(f));
}

void MruVPunishmentsService::Stub::experimental_async::GetPlayerAdminJail(::grpc::ClientContext* context, const ::mruv::economy::GetPlayerAdminJailRequest* request, ::mruv::economy::GetPlayerAdminJailResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPlayerAdminJail_, context, request, response, reactor);
}

void MruVPunishmentsService::Stub::experimental_async::GetPlayerAdminJail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::GetPlayerAdminJailResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPlayerAdminJail_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::GetPlayerAdminJailResponse>* MruVPunishmentsService::Stub::AsyncGetPlayerAdminJailRaw(::grpc::ClientContext* context, const ::mruv::economy::GetPlayerAdminJailRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::GetPlayerAdminJailResponse>::Create(channel_.get(), cq, rpcmethod_GetPlayerAdminJail_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::GetPlayerAdminJailResponse>* MruVPunishmentsService::Stub::PrepareAsyncGetPlayerAdminJailRaw(::grpc::ClientContext* context, const ::mruv::economy::GetPlayerAdminJailRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::GetPlayerAdminJailResponse>::Create(channel_.get(), cq, rpcmethod_GetPlayerAdminJail_, context, request, false);
}

::grpc::Status MruVPunishmentsService::Stub::GetBan(::grpc::ClientContext* context, const ::mruv::economy::GetBanRequest& request, ::mruv::economy::BanMessage* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetBan_, context, request, response);
}

void MruVPunishmentsService::Stub::experimental_async::GetBan(::grpc::ClientContext* context, const ::mruv::economy::GetBanRequest* request, ::mruv::economy::BanMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetBan_, context, request, response, std::move(f));
}

void MruVPunishmentsService::Stub::experimental_async::GetBan(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::BanMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetBan_, context, request, response, std::move(f));
}

void MruVPunishmentsService::Stub::experimental_async::GetBan(::grpc::ClientContext* context, const ::mruv::economy::GetBanRequest* request, ::mruv::economy::BanMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetBan_, context, request, response, reactor);
}

void MruVPunishmentsService::Stub::experimental_async::GetBan(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::BanMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetBan_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::BanMessage>* MruVPunishmentsService::Stub::AsyncGetBanRaw(::grpc::ClientContext* context, const ::mruv::economy::GetBanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::BanMessage>::Create(channel_.get(), cq, rpcmethod_GetBan_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::BanMessage>* MruVPunishmentsService::Stub::PrepareAsyncGetBanRaw(::grpc::ClientContext* context, const ::mruv::economy::GetBanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::BanMessage>::Create(channel_.get(), cq, rpcmethod_GetBan_, context, request, false);
}

::grpc::Status MruVPunishmentsService::Stub::GetWarn(::grpc::ClientContext* context, const ::mruv::economy::GetWarnRequest& request, ::mruv::economy::WarnMessage* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetWarn_, context, request, response);
}

void MruVPunishmentsService::Stub::experimental_async::GetWarn(::grpc::ClientContext* context, const ::mruv::economy::GetWarnRequest* request, ::mruv::economy::WarnMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetWarn_, context, request, response, std::move(f));
}

void MruVPunishmentsService::Stub::experimental_async::GetWarn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::WarnMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetWarn_, context, request, response, std::move(f));
}

void MruVPunishmentsService::Stub::experimental_async::GetWarn(::grpc::ClientContext* context, const ::mruv::economy::GetWarnRequest* request, ::mruv::economy::WarnMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetWarn_, context, request, response, reactor);
}

void MruVPunishmentsService::Stub::experimental_async::GetWarn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::WarnMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetWarn_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::WarnMessage>* MruVPunishmentsService::Stub::AsyncGetWarnRaw(::grpc::ClientContext* context, const ::mruv::economy::GetWarnRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::WarnMessage>::Create(channel_.get(), cq, rpcmethod_GetWarn_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::WarnMessage>* MruVPunishmentsService::Stub::PrepareAsyncGetWarnRaw(::grpc::ClientContext* context, const ::mruv::economy::GetWarnRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::WarnMessage>::Create(channel_.get(), cq, rpcmethod_GetWarn_, context, request, false);
}

::grpc::Status MruVPunishmentsService::Stub::GetBlock(::grpc::ClientContext* context, const ::mruv::economy::GetBlockRequest& request, ::mruv::economy::BlockMessage* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetBlock_, context, request, response);
}

void MruVPunishmentsService::Stub::experimental_async::GetBlock(::grpc::ClientContext* context, const ::mruv::economy::GetBlockRequest* request, ::mruv::economy::BlockMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetBlock_, context, request, response, std::move(f));
}

void MruVPunishmentsService::Stub::experimental_async::GetBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::BlockMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetBlock_, context, request, response, std::move(f));
}

void MruVPunishmentsService::Stub::experimental_async::GetBlock(::grpc::ClientContext* context, const ::mruv::economy::GetBlockRequest* request, ::mruv::economy::BlockMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetBlock_, context, request, response, reactor);
}

void MruVPunishmentsService::Stub::experimental_async::GetBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::BlockMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetBlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::BlockMessage>* MruVPunishmentsService::Stub::AsyncGetBlockRaw(::grpc::ClientContext* context, const ::mruv::economy::GetBlockRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::BlockMessage>::Create(channel_.get(), cq, rpcmethod_GetBlock_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::BlockMessage>* MruVPunishmentsService::Stub::PrepareAsyncGetBlockRaw(::grpc::ClientContext* context, const ::mruv::economy::GetBlockRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::BlockMessage>::Create(channel_.get(), cq, rpcmethod_GetBlock_, context, request, false);
}

::grpc::Status MruVPunishmentsService::Stub::IsPlayerBanned(::grpc::ClientContext* context, const ::mruv::economy::IsPlayerBannedRequest& request, ::mruv::economy::IsPlayerBannedResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_IsPlayerBanned_, context, request, response);
}

void MruVPunishmentsService::Stub::experimental_async::IsPlayerBanned(::grpc::ClientContext* context, const ::mruv::economy::IsPlayerBannedRequest* request, ::mruv::economy::IsPlayerBannedResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_IsPlayerBanned_, context, request, response, std::move(f));
}

void MruVPunishmentsService::Stub::experimental_async::IsPlayerBanned(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::IsPlayerBannedResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_IsPlayerBanned_, context, request, response, std::move(f));
}

void MruVPunishmentsService::Stub::experimental_async::IsPlayerBanned(::grpc::ClientContext* context, const ::mruv::economy::IsPlayerBannedRequest* request, ::mruv::economy::IsPlayerBannedResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_IsPlayerBanned_, context, request, response, reactor);
}

void MruVPunishmentsService::Stub::experimental_async::IsPlayerBanned(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::IsPlayerBannedResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_IsPlayerBanned_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::IsPlayerBannedResponse>* MruVPunishmentsService::Stub::AsyncIsPlayerBannedRaw(::grpc::ClientContext* context, const ::mruv::economy::IsPlayerBannedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::IsPlayerBannedResponse>::Create(channel_.get(), cq, rpcmethod_IsPlayerBanned_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::IsPlayerBannedResponse>* MruVPunishmentsService::Stub::PrepareAsyncIsPlayerBannedRaw(::grpc::ClientContext* context, const ::mruv::economy::IsPlayerBannedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::IsPlayerBannedResponse>::Create(channel_.get(), cq, rpcmethod_IsPlayerBanned_, context, request, false);
}

::grpc::Status MruVPunishmentsService::Stub::IsCharacterBlocked(::grpc::ClientContext* context, const ::mruv::economy::IsCharacterBlockedRequest& request, ::mruv::economy::IsCharacterBlockedResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_IsCharacterBlocked_, context, request, response);
}

void MruVPunishmentsService::Stub::experimental_async::IsCharacterBlocked(::grpc::ClientContext* context, const ::mruv::economy::IsCharacterBlockedRequest* request, ::mruv::economy::IsCharacterBlockedResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_IsCharacterBlocked_, context, request, response, std::move(f));
}

void MruVPunishmentsService::Stub::experimental_async::IsCharacterBlocked(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::IsCharacterBlockedResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_IsCharacterBlocked_, context, request, response, std::move(f));
}

void MruVPunishmentsService::Stub::experimental_async::IsCharacterBlocked(::grpc::ClientContext* context, const ::mruv::economy::IsCharacterBlockedRequest* request, ::mruv::economy::IsCharacterBlockedResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_IsCharacterBlocked_, context, request, response, reactor);
}

void MruVPunishmentsService::Stub::experimental_async::IsCharacterBlocked(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::IsCharacterBlockedResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_IsCharacterBlocked_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::IsCharacterBlockedResponse>* MruVPunishmentsService::Stub::AsyncIsCharacterBlockedRaw(::grpc::ClientContext* context, const ::mruv::economy::IsCharacterBlockedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::IsCharacterBlockedResponse>::Create(channel_.get(), cq, rpcmethod_IsCharacterBlocked_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::IsCharacterBlockedResponse>* MruVPunishmentsService::Stub::PrepareAsyncIsCharacterBlockedRaw(::grpc::ClientContext* context, const ::mruv::economy::IsCharacterBlockedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::IsCharacterBlockedResponse>::Create(channel_.get(), cq, rpcmethod_IsCharacterBlocked_, context, request, false);
}

::grpc::Status MruVPunishmentsService::Stub::IsCharacterJailed(::grpc::ClientContext* context, const ::mruv::economy::IsCharacterJailedRequest& request, ::mruv::economy::IsCharacterJailedResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_IsCharacterJailed_, context, request, response);
}

void MruVPunishmentsService::Stub::experimental_async::IsCharacterJailed(::grpc::ClientContext* context, const ::mruv::economy::IsCharacterJailedRequest* request, ::mruv::economy::IsCharacterJailedResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_IsCharacterJailed_, context, request, response, std::move(f));
}

void MruVPunishmentsService::Stub::experimental_async::IsCharacterJailed(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::IsCharacterJailedResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_IsCharacterJailed_, context, request, response, std::move(f));
}

void MruVPunishmentsService::Stub::experimental_async::IsCharacterJailed(::grpc::ClientContext* context, const ::mruv::economy::IsCharacterJailedRequest* request, ::mruv::economy::IsCharacterJailedResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_IsCharacterJailed_, context, request, response, reactor);
}

void MruVPunishmentsService::Stub::experimental_async::IsCharacterJailed(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::economy::IsCharacterJailedResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_IsCharacterJailed_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::IsCharacterJailedResponse>* MruVPunishmentsService::Stub::AsyncIsCharacterJailedRaw(::grpc::ClientContext* context, const ::mruv::economy::IsCharacterJailedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::IsCharacterJailedResponse>::Create(channel_.get(), cq, rpcmethod_IsCharacterJailed_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::economy::IsCharacterJailedResponse>* MruVPunishmentsService::Stub::PrepareAsyncIsCharacterJailedRaw(::grpc::ClientContext* context, const ::mruv::economy::IsCharacterJailedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::economy::IsCharacterJailedResponse>::Create(channel_.get(), cq, rpcmethod_IsCharacterJailed_, context, request, false);
}

::grpc::ClientReader< ::mruv::economy::BanMessage>* MruVPunishmentsService::Stub::WatchBansRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchBansRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::mruv::economy::BanMessage>::Create(channel_.get(), rpcmethod_WatchBans_, context, request);
}

void MruVPunishmentsService::Stub::experimental_async::WatchBans(::grpc::ClientContext* context, ::mruv::economy::WatchBansRequest* request, ::grpc::experimental::ClientReadReactor< ::mruv::economy::BanMessage>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::mruv::economy::BanMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_WatchBans_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mruv::economy::BanMessage>* MruVPunishmentsService::Stub::AsyncWatchBansRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchBansRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::mruv::economy::BanMessage>::Create(channel_.get(), cq, rpcmethod_WatchBans_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mruv::economy::BanMessage>* MruVPunishmentsService::Stub::PrepareAsyncWatchBansRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchBansRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::mruv::economy::BanMessage>::Create(channel_.get(), cq, rpcmethod_WatchBans_, context, request, false, nullptr);
}

::grpc::ClientReader< ::mruv::economy::BlockMessage>* MruVPunishmentsService::Stub::WatchBlocksRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchBlocksRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::mruv::economy::BlockMessage>::Create(channel_.get(), rpcmethod_WatchBlocks_, context, request);
}

void MruVPunishmentsService::Stub::experimental_async::WatchBlocks(::grpc::ClientContext* context, ::mruv::economy::WatchBlocksRequest* request, ::grpc::experimental::ClientReadReactor< ::mruv::economy::BlockMessage>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::mruv::economy::BlockMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_WatchBlocks_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mruv::economy::BlockMessage>* MruVPunishmentsService::Stub::AsyncWatchBlocksRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchBlocksRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::mruv::economy::BlockMessage>::Create(channel_.get(), cq, rpcmethod_WatchBlocks_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mruv::economy::BlockMessage>* MruVPunishmentsService::Stub::PrepareAsyncWatchBlocksRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchBlocksRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::mruv::economy::BlockMessage>::Create(channel_.get(), cq, rpcmethod_WatchBlocks_, context, request, false, nullptr);
}

::grpc::ClientReader< ::mruv::economy::WarnMessage>* MruVPunishmentsService::Stub::WatchWarnsRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchWarnsRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::mruv::economy::WarnMessage>::Create(channel_.get(), rpcmethod_WatchWarns_, context, request);
}

void MruVPunishmentsService::Stub::experimental_async::WatchWarns(::grpc::ClientContext* context, ::mruv::economy::WatchWarnsRequest* request, ::grpc::experimental::ClientReadReactor< ::mruv::economy::WarnMessage>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::mruv::economy::WarnMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_WatchWarns_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mruv::economy::WarnMessage>* MruVPunishmentsService::Stub::AsyncWatchWarnsRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchWarnsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::mruv::economy::WarnMessage>::Create(channel_.get(), cq, rpcmethod_WatchWarns_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mruv::economy::WarnMessage>* MruVPunishmentsService::Stub::PrepareAsyncWatchWarnsRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchWarnsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::mruv::economy::WarnMessage>::Create(channel_.get(), cq, rpcmethod_WatchWarns_, context, request, false, nullptr);
}

::grpc::ClientReader< ::mruv::economy::AdminJailMessage>* MruVPunishmentsService::Stub::WatchAdminJailsRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchAdminJailsRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::mruv::economy::AdminJailMessage>::Create(channel_.get(), rpcmethod_WatchAdminJails_, context, request);
}

void MruVPunishmentsService::Stub::experimental_async::WatchAdminJails(::grpc::ClientContext* context, ::mruv::economy::WatchAdminJailsRequest* request, ::grpc::experimental::ClientReadReactor< ::mruv::economy::AdminJailMessage>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::mruv::economy::AdminJailMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_WatchAdminJails_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mruv::economy::AdminJailMessage>* MruVPunishmentsService::Stub::AsyncWatchAdminJailsRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchAdminJailsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::mruv::economy::AdminJailMessage>::Create(channel_.get(), cq, rpcmethod_WatchAdminJails_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mruv::economy::AdminJailMessage>* MruVPunishmentsService::Stub::PrepareAsyncWatchAdminJailsRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchAdminJailsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::mruv::economy::AdminJailMessage>::Create(channel_.get(), cq, rpcmethod_WatchAdminJails_, context, request, false, nullptr);
}

::grpc::ClientReader< ::mruv::economy::UnBanMessage>* MruVPunishmentsService::Stub::WatchUnBansRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchUnBansRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::mruv::economy::UnBanMessage>::Create(channel_.get(), rpcmethod_WatchUnBans_, context, request);
}

void MruVPunishmentsService::Stub::experimental_async::WatchUnBans(::grpc::ClientContext* context, ::mruv::economy::WatchUnBansRequest* request, ::grpc::experimental::ClientReadReactor< ::mruv::economy::UnBanMessage>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::mruv::economy::UnBanMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_WatchUnBans_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mruv::economy::UnBanMessage>* MruVPunishmentsService::Stub::AsyncWatchUnBansRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchUnBansRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::mruv::economy::UnBanMessage>::Create(channel_.get(), cq, rpcmethod_WatchUnBans_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mruv::economy::UnBanMessage>* MruVPunishmentsService::Stub::PrepareAsyncWatchUnBansRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchUnBansRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::mruv::economy::UnBanMessage>::Create(channel_.get(), cq, rpcmethod_WatchUnBans_, context, request, false, nullptr);
}

::grpc::ClientReader< ::mruv::economy::UnBlockMessage>* MruVPunishmentsService::Stub::WatchUnBlocksRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchUnBlocksRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::mruv::economy::UnBlockMessage>::Create(channel_.get(), rpcmethod_WatchUnBlocks_, context, request);
}

void MruVPunishmentsService::Stub::experimental_async::WatchUnBlocks(::grpc::ClientContext* context, ::mruv::economy::WatchUnBlocksRequest* request, ::grpc::experimental::ClientReadReactor< ::mruv::economy::UnBlockMessage>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::mruv::economy::UnBlockMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_WatchUnBlocks_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mruv::economy::UnBlockMessage>* MruVPunishmentsService::Stub::AsyncWatchUnBlocksRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchUnBlocksRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::mruv::economy::UnBlockMessage>::Create(channel_.get(), cq, rpcmethod_WatchUnBlocks_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mruv::economy::UnBlockMessage>* MruVPunishmentsService::Stub::PrepareAsyncWatchUnBlocksRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchUnBlocksRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::mruv::economy::UnBlockMessage>::Create(channel_.get(), cq, rpcmethod_WatchUnBlocks_, context, request, false, nullptr);
}

::grpc::ClientReader< ::mruv::economy::UnWarnMessage>* MruVPunishmentsService::Stub::WatchUnWarnsRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchUnWarnsRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::mruv::economy::UnWarnMessage>::Create(channel_.get(), rpcmethod_WatchUnWarns_, context, request);
}

void MruVPunishmentsService::Stub::experimental_async::WatchUnWarns(::grpc::ClientContext* context, ::mruv::economy::WatchUnWarnsRequest* request, ::grpc::experimental::ClientReadReactor< ::mruv::economy::UnWarnMessage>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::mruv::economy::UnWarnMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_WatchUnWarns_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mruv::economy::UnWarnMessage>* MruVPunishmentsService::Stub::AsyncWatchUnWarnsRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchUnWarnsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::mruv::economy::UnWarnMessage>::Create(channel_.get(), cq, rpcmethod_WatchUnWarns_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mruv::economy::UnWarnMessage>* MruVPunishmentsService::Stub::PrepareAsyncWatchUnWarnsRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchUnWarnsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::mruv::economy::UnWarnMessage>::Create(channel_.get(), cq, rpcmethod_WatchUnWarns_, context, request, false, nullptr);
}

::grpc::ClientReader< ::mruv::economy::UnAdminJailMessage>* MruVPunishmentsService::Stub::WatchUnAdminJailsRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchUnAdminJailsRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::mruv::economy::UnAdminJailMessage>::Create(channel_.get(), rpcmethod_WatchUnAdminJails_, context, request);
}

void MruVPunishmentsService::Stub::experimental_async::WatchUnAdminJails(::grpc::ClientContext* context, ::mruv::economy::WatchUnAdminJailsRequest* request, ::grpc::experimental::ClientReadReactor< ::mruv::economy::UnAdminJailMessage>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::mruv::economy::UnAdminJailMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_WatchUnAdminJails_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mruv::economy::UnAdminJailMessage>* MruVPunishmentsService::Stub::AsyncWatchUnAdminJailsRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchUnAdminJailsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::mruv::economy::UnAdminJailMessage>::Create(channel_.get(), cq, rpcmethod_WatchUnAdminJails_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mruv::economy::UnAdminJailMessage>* MruVPunishmentsService::Stub::PrepareAsyncWatchUnAdminJailsRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchUnAdminJailsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::mruv::economy::UnAdminJailMessage>::Create(channel_.get(), cq, rpcmethod_WatchUnAdminJails_, context, request, false, nullptr);
}

::grpc::ClientReader< ::mruv::economy::WatchPlayerPunishmentsResponse>* MruVPunishmentsService::Stub::WatchPlayerPunishmentsRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchPlayerPunishmentsRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::mruv::economy::WatchPlayerPunishmentsResponse>::Create(channel_.get(), rpcmethod_WatchPlayerPunishments_, context, request);
}

void MruVPunishmentsService::Stub::experimental_async::WatchPlayerPunishments(::grpc::ClientContext* context, ::mruv::economy::WatchPlayerPunishmentsRequest* request, ::grpc::experimental::ClientReadReactor< ::mruv::economy::WatchPlayerPunishmentsResponse>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::mruv::economy::WatchPlayerPunishmentsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_WatchPlayerPunishments_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mruv::economy::WatchPlayerPunishmentsResponse>* MruVPunishmentsService::Stub::AsyncWatchPlayerPunishmentsRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchPlayerPunishmentsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::mruv::economy::WatchPlayerPunishmentsResponse>::Create(channel_.get(), cq, rpcmethod_WatchPlayerPunishments_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mruv::economy::WatchPlayerPunishmentsResponse>* MruVPunishmentsService::Stub::PrepareAsyncWatchPlayerPunishmentsRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchPlayerPunishmentsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::mruv::economy::WatchPlayerPunishmentsResponse>::Create(channel_.get(), cq, rpcmethod_WatchPlayerPunishments_, context, request, false, nullptr);
}

::grpc::ClientReader< ::mruv::economy::WatchPlayerAcquittalsResponse>* MruVPunishmentsService::Stub::WatchPlayerAcquittalsRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchPlayerAcquittalsRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::mruv::economy::WatchPlayerAcquittalsResponse>::Create(channel_.get(), rpcmethod_WatchPlayerAcquittals_, context, request);
}

void MruVPunishmentsService::Stub::experimental_async::WatchPlayerAcquittals(::grpc::ClientContext* context, ::mruv::economy::WatchPlayerAcquittalsRequest* request, ::grpc::experimental::ClientReadReactor< ::mruv::economy::WatchPlayerAcquittalsResponse>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::mruv::economy::WatchPlayerAcquittalsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_WatchPlayerAcquittals_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mruv::economy::WatchPlayerAcquittalsResponse>* MruVPunishmentsService::Stub::AsyncWatchPlayerAcquittalsRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchPlayerAcquittalsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::mruv::economy::WatchPlayerAcquittalsResponse>::Create(channel_.get(), cq, rpcmethod_WatchPlayerAcquittals_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mruv::economy::WatchPlayerAcquittalsResponse>* MruVPunishmentsService::Stub::PrepareAsyncWatchPlayerAcquittalsRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchPlayerAcquittalsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::mruv::economy::WatchPlayerAcquittalsResponse>::Create(channel_.get(), cq, rpcmethod_WatchPlayerAcquittals_, context, request, false, nullptr);
}

::grpc::ClientReader< ::mruv::economy::WatchPunishmentsResponse>* MruVPunishmentsService::Stub::WatchPunishmentsRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchPunishmentsRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::mruv::economy::WatchPunishmentsResponse>::Create(channel_.get(), rpcmethod_WatchPunishments_, context, request);
}

void MruVPunishmentsService::Stub::experimental_async::WatchPunishments(::grpc::ClientContext* context, ::mruv::economy::WatchPunishmentsRequest* request, ::grpc::experimental::ClientReadReactor< ::mruv::economy::WatchPunishmentsResponse>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::mruv::economy::WatchPunishmentsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_WatchPunishments_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mruv::economy::WatchPunishmentsResponse>* MruVPunishmentsService::Stub::AsyncWatchPunishmentsRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchPunishmentsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::mruv::economy::WatchPunishmentsResponse>::Create(channel_.get(), cq, rpcmethod_WatchPunishments_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mruv::economy::WatchPunishmentsResponse>* MruVPunishmentsService::Stub::PrepareAsyncWatchPunishmentsRaw(::grpc::ClientContext* context, const ::mruv::economy::WatchPunishmentsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::mruv::economy::WatchPunishmentsResponse>::Create(channel_.get(), cq, rpcmethod_WatchPunishments_, context, request, false, nullptr);
}

MruVPunishmentsService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVPunishmentsService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVPunishmentsService::Service, ::mruv::economy::BanRequest, ::mruv::economy::BanResponse>(
          std::mem_fn(&MruVPunishmentsService::Service::Ban), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVPunishmentsService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVPunishmentsService::Service, ::mruv::economy::BlockRequest, ::mruv::economy::BlockResponse>(
          std::mem_fn(&MruVPunishmentsService::Service::Block), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVPunishmentsService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVPunishmentsService::Service, ::mruv::economy::WarnRequest, ::mruv::economy::WarnResponse>(
          std::mem_fn(&MruVPunishmentsService::Service::Warn), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVPunishmentsService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVPunishmentsService::Service, ::mruv::economy::AdminJailRequest, ::mruv::economy::AdminJailResponse>(
          std::mem_fn(&MruVPunishmentsService::Service::AdminJail), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVPunishmentsService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVPunishmentsService::Service, ::mruv::economy::MuteGlobalChatsRequest, ::mruv::economy::MuteGlobalChatsResponse>(
          std::mem_fn(&MruVPunishmentsService::Service::MuteGlobalChats), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVPunishmentsService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVPunishmentsService::Service, ::mruv::economy::UnBanRequest, ::mruv::economy::UnBanResponse>(
          std::mem_fn(&MruVPunishmentsService::Service::UnBan), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVPunishmentsService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVPunishmentsService::Service, ::mruv::economy::UnWarnRequest, ::mruv::economy::UnWarnResponse>(
          std::mem_fn(&MruVPunishmentsService::Service::UnWarn), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVPunishmentsService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVPunishmentsService::Service, ::mruv::economy::UnAdminJailRequest, ::mruv::economy::UnAdminJailResponse>(
          std::mem_fn(&MruVPunishmentsService::Service::UnAdminJail), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVPunishmentsService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVPunishmentsService::Service, ::mruv::economy::UnMuteGlobalChatsRequest, ::mruv::economy::UnMuteGlobalChatsResponse>(
          std::mem_fn(&MruVPunishmentsService::Service::UnMuteGlobalChats), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVPunishmentsService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVPunishmentsService::Service, ::mruv::economy::GetPlayerBansRequest, ::mruv::economy::GetPlayerBansResponse>(
          std::mem_fn(&MruVPunishmentsService::Service::GetPlayerBans), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVPunishmentsService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVPunishmentsService::Service, ::mruv::economy::GetPlayerWarnsRequest, ::mruv::economy::GetPlayerWarnsResponse>(
          std::mem_fn(&MruVPunishmentsService::Service::GetPlayerWarns), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVPunishmentsService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVPunishmentsService::Service, ::mruv::economy::GetPlayerAdminJailRequest, ::mruv::economy::GetPlayerAdminJailResponse>(
          std::mem_fn(&MruVPunishmentsService::Service::GetPlayerAdminJail), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVPunishmentsService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVPunishmentsService::Service, ::mruv::economy::GetBanRequest, ::mruv::economy::BanMessage>(
          std::mem_fn(&MruVPunishmentsService::Service::GetBan), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVPunishmentsService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVPunishmentsService::Service, ::mruv::economy::GetWarnRequest, ::mruv::economy::WarnMessage>(
          std::mem_fn(&MruVPunishmentsService::Service::GetWarn), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVPunishmentsService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVPunishmentsService::Service, ::mruv::economy::GetBlockRequest, ::mruv::economy::BlockMessage>(
          std::mem_fn(&MruVPunishmentsService::Service::GetBlock), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVPunishmentsService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVPunishmentsService::Service, ::mruv::economy::IsPlayerBannedRequest, ::mruv::economy::IsPlayerBannedResponse>(
          std::mem_fn(&MruVPunishmentsService::Service::IsPlayerBanned), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVPunishmentsService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVPunishmentsService::Service, ::mruv::economy::IsCharacterBlockedRequest, ::mruv::economy::IsCharacterBlockedResponse>(
          std::mem_fn(&MruVPunishmentsService::Service::IsCharacterBlocked), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVPunishmentsService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVPunishmentsService::Service, ::mruv::economy::IsCharacterJailedRequest, ::mruv::economy::IsCharacterJailedResponse>(
          std::mem_fn(&MruVPunishmentsService::Service::IsCharacterJailed), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVPunishmentsService_method_names[18],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MruVPunishmentsService::Service, ::mruv::economy::WatchBansRequest, ::mruv::economy::BanMessage>(
          std::mem_fn(&MruVPunishmentsService::Service::WatchBans), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVPunishmentsService_method_names[19],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MruVPunishmentsService::Service, ::mruv::economy::WatchBlocksRequest, ::mruv::economy::BlockMessage>(
          std::mem_fn(&MruVPunishmentsService::Service::WatchBlocks), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVPunishmentsService_method_names[20],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MruVPunishmentsService::Service, ::mruv::economy::WatchWarnsRequest, ::mruv::economy::WarnMessage>(
          std::mem_fn(&MruVPunishmentsService::Service::WatchWarns), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVPunishmentsService_method_names[21],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MruVPunishmentsService::Service, ::mruv::economy::WatchAdminJailsRequest, ::mruv::economy::AdminJailMessage>(
          std::mem_fn(&MruVPunishmentsService::Service::WatchAdminJails), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVPunishmentsService_method_names[22],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MruVPunishmentsService::Service, ::mruv::economy::WatchUnBansRequest, ::mruv::economy::UnBanMessage>(
          std::mem_fn(&MruVPunishmentsService::Service::WatchUnBans), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVPunishmentsService_method_names[23],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MruVPunishmentsService::Service, ::mruv::economy::WatchUnBlocksRequest, ::mruv::economy::UnBlockMessage>(
          std::mem_fn(&MruVPunishmentsService::Service::WatchUnBlocks), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVPunishmentsService_method_names[24],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MruVPunishmentsService::Service, ::mruv::economy::WatchUnWarnsRequest, ::mruv::economy::UnWarnMessage>(
          std::mem_fn(&MruVPunishmentsService::Service::WatchUnWarns), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVPunishmentsService_method_names[25],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MruVPunishmentsService::Service, ::mruv::economy::WatchUnAdminJailsRequest, ::mruv::economy::UnAdminJailMessage>(
          std::mem_fn(&MruVPunishmentsService::Service::WatchUnAdminJails), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVPunishmentsService_method_names[26],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MruVPunishmentsService::Service, ::mruv::economy::WatchPlayerPunishmentsRequest, ::mruv::economy::WatchPlayerPunishmentsResponse>(
          std::mem_fn(&MruVPunishmentsService::Service::WatchPlayerPunishments), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVPunishmentsService_method_names[27],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MruVPunishmentsService::Service, ::mruv::economy::WatchPlayerAcquittalsRequest, ::mruv::economy::WatchPlayerAcquittalsResponse>(
          std::mem_fn(&MruVPunishmentsService::Service::WatchPlayerAcquittals), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVPunishmentsService_method_names[28],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MruVPunishmentsService::Service, ::mruv::economy::WatchPunishmentsRequest, ::mruv::economy::WatchPunishmentsResponse>(
          std::mem_fn(&MruVPunishmentsService::Service::WatchPunishments), this)));
}

MruVPunishmentsService::Service::~Service() {
}

::grpc::Status MruVPunishmentsService::Service::Ban(::grpc::ServerContext* context, const ::mruv::economy::BanRequest* request, ::mruv::economy::BanResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVPunishmentsService::Service::Block(::grpc::ServerContext* context, const ::mruv::economy::BlockRequest* request, ::mruv::economy::BlockResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVPunishmentsService::Service::Warn(::grpc::ServerContext* context, const ::mruv::economy::WarnRequest* request, ::mruv::economy::WarnResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVPunishmentsService::Service::AdminJail(::grpc::ServerContext* context, const ::mruv::economy::AdminJailRequest* request, ::mruv::economy::AdminJailResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVPunishmentsService::Service::MuteGlobalChats(::grpc::ServerContext* context, const ::mruv::economy::MuteGlobalChatsRequest* request, ::mruv::economy::MuteGlobalChatsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVPunishmentsService::Service::UnBan(::grpc::ServerContext* context, const ::mruv::economy::UnBanRequest* request, ::mruv::economy::UnBanResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVPunishmentsService::Service::UnWarn(::grpc::ServerContext* context, const ::mruv::economy::UnWarnRequest* request, ::mruv::economy::UnWarnResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVPunishmentsService::Service::UnAdminJail(::grpc::ServerContext* context, const ::mruv::economy::UnAdminJailRequest* request, ::mruv::economy::UnAdminJailResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVPunishmentsService::Service::UnMuteGlobalChats(::grpc::ServerContext* context, const ::mruv::economy::UnMuteGlobalChatsRequest* request, ::mruv::economy::UnMuteGlobalChatsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVPunishmentsService::Service::GetPlayerBans(::grpc::ServerContext* context, const ::mruv::economy::GetPlayerBansRequest* request, ::mruv::economy::GetPlayerBansResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVPunishmentsService::Service::GetPlayerWarns(::grpc::ServerContext* context, const ::mruv::economy::GetPlayerWarnsRequest* request, ::mruv::economy::GetPlayerWarnsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVPunishmentsService::Service::GetPlayerAdminJail(::grpc::ServerContext* context, const ::mruv::economy::GetPlayerAdminJailRequest* request, ::mruv::economy::GetPlayerAdminJailResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVPunishmentsService::Service::GetBan(::grpc::ServerContext* context, const ::mruv::economy::GetBanRequest* request, ::mruv::economy::BanMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVPunishmentsService::Service::GetWarn(::grpc::ServerContext* context, const ::mruv::economy::GetWarnRequest* request, ::mruv::economy::WarnMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVPunishmentsService::Service::GetBlock(::grpc::ServerContext* context, const ::mruv::economy::GetBlockRequest* request, ::mruv::economy::BlockMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVPunishmentsService::Service::IsPlayerBanned(::grpc::ServerContext* context, const ::mruv::economy::IsPlayerBannedRequest* request, ::mruv::economy::IsPlayerBannedResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVPunishmentsService::Service::IsCharacterBlocked(::grpc::ServerContext* context, const ::mruv::economy::IsCharacterBlockedRequest* request, ::mruv::economy::IsCharacterBlockedResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVPunishmentsService::Service::IsCharacterJailed(::grpc::ServerContext* context, const ::mruv::economy::IsCharacterJailedRequest* request, ::mruv::economy::IsCharacterJailedResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVPunishmentsService::Service::WatchBans(::grpc::ServerContext* context, const ::mruv::economy::WatchBansRequest* request, ::grpc::ServerWriter< ::mruv::economy::BanMessage>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVPunishmentsService::Service::WatchBlocks(::grpc::ServerContext* context, const ::mruv::economy::WatchBlocksRequest* request, ::grpc::ServerWriter< ::mruv::economy::BlockMessage>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVPunishmentsService::Service::WatchWarns(::grpc::ServerContext* context, const ::mruv::economy::WatchWarnsRequest* request, ::grpc::ServerWriter< ::mruv::economy::WarnMessage>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVPunishmentsService::Service::WatchAdminJails(::grpc::ServerContext* context, const ::mruv::economy::WatchAdminJailsRequest* request, ::grpc::ServerWriter< ::mruv::economy::AdminJailMessage>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVPunishmentsService::Service::WatchUnBans(::grpc::ServerContext* context, const ::mruv::economy::WatchUnBansRequest* request, ::grpc::ServerWriter< ::mruv::economy::UnBanMessage>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVPunishmentsService::Service::WatchUnBlocks(::grpc::ServerContext* context, const ::mruv::economy::WatchUnBlocksRequest* request, ::grpc::ServerWriter< ::mruv::economy::UnBlockMessage>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVPunishmentsService::Service::WatchUnWarns(::grpc::ServerContext* context, const ::mruv::economy::WatchUnWarnsRequest* request, ::grpc::ServerWriter< ::mruv::economy::UnWarnMessage>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVPunishmentsService::Service::WatchUnAdminJails(::grpc::ServerContext* context, const ::mruv::economy::WatchUnAdminJailsRequest* request, ::grpc::ServerWriter< ::mruv::economy::UnAdminJailMessage>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVPunishmentsService::Service::WatchPlayerPunishments(::grpc::ServerContext* context, const ::mruv::economy::WatchPlayerPunishmentsRequest* request, ::grpc::ServerWriter< ::mruv::economy::WatchPlayerPunishmentsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVPunishmentsService::Service::WatchPlayerAcquittals(::grpc::ServerContext* context, const ::mruv::economy::WatchPlayerAcquittalsRequest* request, ::grpc::ServerWriter< ::mruv::economy::WatchPlayerAcquittalsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVPunishmentsService::Service::WatchPunishments(::grpc::ServerContext* context, const ::mruv::economy::WatchPunishmentsRequest* request, ::grpc::ServerWriter< ::mruv::economy::WatchPunishmentsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mruv
}  // namespace economy

