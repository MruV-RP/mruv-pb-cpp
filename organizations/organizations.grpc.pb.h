// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: organizations/organizations.proto
#ifndef GRPC_organizations_2forganizations_2eproto__INCLUDED
#define GRPC_organizations_2forganizations_2eproto__INCLUDED

#include "organizations/organizations.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace mruv {
namespace organizations {

// The MruV jobs service provides procedures for managing organizations and fractions.
class MruVOrganizationsService final {
 public:
  static constexpr char const* service_full_name() {
    return "mruv.organizations.MruVOrganizationsService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Create a organization.
    virtual ::grpc::Status CreateOrganization(::grpc::ClientContext* context, const ::mruv::organizations::CreateOrganizationRequest& request, ::mruv::organizations::CreateOrganizationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::organizations::CreateOrganizationResponse>> AsyncCreateOrganization(::grpc::ClientContext* context, const ::mruv::organizations::CreateOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::organizations::CreateOrganizationResponse>>(AsyncCreateOrganizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::organizations::CreateOrganizationResponse>> PrepareAsyncCreateOrganization(::grpc::ClientContext* context, const ::mruv::organizations::CreateOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::organizations::CreateOrganizationResponse>>(PrepareAsyncCreateOrganizationRaw(context, request, cq));
    }
    // Get organization.
    virtual ::grpc::Status GetOrganization(::grpc::ClientContext* context, const ::mruv::organizations::GetOrganizationRequest& request, ::mruv::organizations::GetOrganizationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::organizations::GetOrganizationResponse>> AsyncGetOrganization(::grpc::ClientContext* context, const ::mruv::organizations::GetOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::organizations::GetOrganizationResponse>>(AsyncGetOrganizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::organizations::GetOrganizationResponse>> PrepareAsyncGetOrganization(::grpc::ClientContext* context, const ::mruv::organizations::GetOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::organizations::GetOrganizationResponse>>(PrepareAsyncGetOrganizationRaw(context, request, cq));
    }
    // Update organization.
    virtual ::grpc::Status UpdateOrganization(::grpc::ClientContext* context, const ::mruv::organizations::UpdateOrganizationRequest& request, ::mruv::organizations::UpdateOrganizationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::organizations::UpdateOrganizationResponse>> AsyncUpdateOrganization(::grpc::ClientContext* context, const ::mruv::organizations::UpdateOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::organizations::UpdateOrganizationResponse>>(AsyncUpdateOrganizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::organizations::UpdateOrganizationResponse>> PrepareAsyncUpdateOrganization(::grpc::ClientContext* context, const ::mruv::organizations::UpdateOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::organizations::UpdateOrganizationResponse>>(PrepareAsyncUpdateOrganizationRaw(context, request, cq));
    }
    // Delete organization.
    virtual ::grpc::Status DeleteOrganization(::grpc::ClientContext* context, const ::mruv::organizations::DeleteOrganizationRequest& request, ::mruv::organizations::DeleteOrganizationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::organizations::DeleteOrganizationResponse>> AsyncDeleteOrganization(::grpc::ClientContext* context, const ::mruv::organizations::DeleteOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::organizations::DeleteOrganizationResponse>>(AsyncDeleteOrganizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::organizations::DeleteOrganizationResponse>> PrepareAsyncDeleteOrganization(::grpc::ClientContext* context, const ::mruv::organizations::DeleteOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::organizations::DeleteOrganizationResponse>>(PrepareAsyncDeleteOrganizationRaw(context, request, cq));
    }
    // Assign an organization leader. Leader is a main administrator of a organization, have all rights to manage organization.
    // If the organization leader already exists, the leader will be overwritten.
    virtual ::grpc::Status AssignLeader(::grpc::ClientContext* context, const ::mruv::organizations::AssignLeaderRequest& request, ::mruv::organizations::AssignLeaderResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::organizations::AssignLeaderResponse>> AsyncAssignLeader(::grpc::ClientContext* context, const ::mruv::organizations::AssignLeaderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::organizations::AssignLeaderResponse>>(AsyncAssignLeaderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::organizations::AssignLeaderResponse>> PrepareAsyncAssignLeader(::grpc::ClientContext* context, const ::mruv::organizations::AssignLeaderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::organizations::AssignLeaderResponse>>(PrepareAsyncAssignLeaderRaw(context, request, cq));
    }
    //
    virtual ::grpc::Status UnassignLeader(::grpc::ClientContext* context, const ::mruv::organizations::UnassignLeaderRequest& request, ::mruv::organizations::UnassignLeaderResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::organizations::UnassignLeaderResponse>> AsyncUnassignLeader(::grpc::ClientContext* context, const ::mruv::organizations::UnassignLeaderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::organizations::UnassignLeaderResponse>>(AsyncUnassignLeaderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::organizations::UnassignLeaderResponse>> PrepareAsyncUnassignLeader(::grpc::ClientContext* context, const ::mruv::organizations::UnassignLeaderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mruv::organizations::UnassignLeaderResponse>>(PrepareAsyncUnassignLeaderRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Create a organization.
      virtual void CreateOrganization(::grpc::ClientContext* context, const ::mruv::organizations::CreateOrganizationRequest* request, ::mruv::organizations::CreateOrganizationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateOrganization(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::CreateOrganizationResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateOrganization(::grpc::ClientContext* context, const ::mruv::organizations::CreateOrganizationRequest* request, ::mruv::organizations::CreateOrganizationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateOrganization(::grpc::ClientContext* context, const ::mruv::organizations::CreateOrganizationRequest* request, ::mruv::organizations::CreateOrganizationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateOrganization(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::CreateOrganizationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateOrganization(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::CreateOrganizationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get organization.
      virtual void GetOrganization(::grpc::ClientContext* context, const ::mruv::organizations::GetOrganizationRequest* request, ::mruv::organizations::GetOrganizationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetOrganization(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::GetOrganizationResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetOrganization(::grpc::ClientContext* context, const ::mruv::organizations::GetOrganizationRequest* request, ::mruv::organizations::GetOrganizationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetOrganization(::grpc::ClientContext* context, const ::mruv::organizations::GetOrganizationRequest* request, ::mruv::organizations::GetOrganizationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetOrganization(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::GetOrganizationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetOrganization(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::GetOrganizationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Update organization.
      virtual void UpdateOrganization(::grpc::ClientContext* context, const ::mruv::organizations::UpdateOrganizationRequest* request, ::mruv::organizations::UpdateOrganizationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateOrganization(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::UpdateOrganizationResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateOrganization(::grpc::ClientContext* context, const ::mruv::organizations::UpdateOrganizationRequest* request, ::mruv::organizations::UpdateOrganizationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateOrganization(::grpc::ClientContext* context, const ::mruv::organizations::UpdateOrganizationRequest* request, ::mruv::organizations::UpdateOrganizationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateOrganization(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::UpdateOrganizationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateOrganization(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::UpdateOrganizationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Delete organization.
      virtual void DeleteOrganization(::grpc::ClientContext* context, const ::mruv::organizations::DeleteOrganizationRequest* request, ::mruv::organizations::DeleteOrganizationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteOrganization(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::DeleteOrganizationResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteOrganization(::grpc::ClientContext* context, const ::mruv::organizations::DeleteOrganizationRequest* request, ::mruv::organizations::DeleteOrganizationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteOrganization(::grpc::ClientContext* context, const ::mruv::organizations::DeleteOrganizationRequest* request, ::mruv::organizations::DeleteOrganizationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteOrganization(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::DeleteOrganizationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteOrganization(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::DeleteOrganizationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Assign an organization leader. Leader is a main administrator of a organization, have all rights to manage organization.
      // If the organization leader already exists, the leader will be overwritten.
      virtual void AssignLeader(::grpc::ClientContext* context, const ::mruv::organizations::AssignLeaderRequest* request, ::mruv::organizations::AssignLeaderResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AssignLeader(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::AssignLeaderResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AssignLeader(::grpc::ClientContext* context, const ::mruv::organizations::AssignLeaderRequest* request, ::mruv::organizations::AssignLeaderResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AssignLeader(::grpc::ClientContext* context, const ::mruv::organizations::AssignLeaderRequest* request, ::mruv::organizations::AssignLeaderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AssignLeader(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::AssignLeaderResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AssignLeader(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::AssignLeaderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      //
      virtual void UnassignLeader(::grpc::ClientContext* context, const ::mruv::organizations::UnassignLeaderRequest* request, ::mruv::organizations::UnassignLeaderResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UnassignLeader(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::UnassignLeaderResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UnassignLeader(::grpc::ClientContext* context, const ::mruv::organizations::UnassignLeaderRequest* request, ::mruv::organizations::UnassignLeaderResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UnassignLeader(::grpc::ClientContext* context, const ::mruv::organizations::UnassignLeaderRequest* request, ::mruv::organizations::UnassignLeaderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UnassignLeader(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::UnassignLeaderResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UnassignLeader(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::UnassignLeaderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::organizations::CreateOrganizationResponse>* AsyncCreateOrganizationRaw(::grpc::ClientContext* context, const ::mruv::organizations::CreateOrganizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::organizations::CreateOrganizationResponse>* PrepareAsyncCreateOrganizationRaw(::grpc::ClientContext* context, const ::mruv::organizations::CreateOrganizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::organizations::GetOrganizationResponse>* AsyncGetOrganizationRaw(::grpc::ClientContext* context, const ::mruv::organizations::GetOrganizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::organizations::GetOrganizationResponse>* PrepareAsyncGetOrganizationRaw(::grpc::ClientContext* context, const ::mruv::organizations::GetOrganizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::organizations::UpdateOrganizationResponse>* AsyncUpdateOrganizationRaw(::grpc::ClientContext* context, const ::mruv::organizations::UpdateOrganizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::organizations::UpdateOrganizationResponse>* PrepareAsyncUpdateOrganizationRaw(::grpc::ClientContext* context, const ::mruv::organizations::UpdateOrganizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::organizations::DeleteOrganizationResponse>* AsyncDeleteOrganizationRaw(::grpc::ClientContext* context, const ::mruv::organizations::DeleteOrganizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::organizations::DeleteOrganizationResponse>* PrepareAsyncDeleteOrganizationRaw(::grpc::ClientContext* context, const ::mruv::organizations::DeleteOrganizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::organizations::AssignLeaderResponse>* AsyncAssignLeaderRaw(::grpc::ClientContext* context, const ::mruv::organizations::AssignLeaderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::organizations::AssignLeaderResponse>* PrepareAsyncAssignLeaderRaw(::grpc::ClientContext* context, const ::mruv::organizations::AssignLeaderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::organizations::UnassignLeaderResponse>* AsyncUnassignLeaderRaw(::grpc::ClientContext* context, const ::mruv::organizations::UnassignLeaderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mruv::organizations::UnassignLeaderResponse>* PrepareAsyncUnassignLeaderRaw(::grpc::ClientContext* context, const ::mruv::organizations::UnassignLeaderRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateOrganization(::grpc::ClientContext* context, const ::mruv::organizations::CreateOrganizationRequest& request, ::mruv::organizations::CreateOrganizationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::organizations::CreateOrganizationResponse>> AsyncCreateOrganization(::grpc::ClientContext* context, const ::mruv::organizations::CreateOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::organizations::CreateOrganizationResponse>>(AsyncCreateOrganizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::organizations::CreateOrganizationResponse>> PrepareAsyncCreateOrganization(::grpc::ClientContext* context, const ::mruv::organizations::CreateOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::organizations::CreateOrganizationResponse>>(PrepareAsyncCreateOrganizationRaw(context, request, cq));
    }
    ::grpc::Status GetOrganization(::grpc::ClientContext* context, const ::mruv::organizations::GetOrganizationRequest& request, ::mruv::organizations::GetOrganizationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::organizations::GetOrganizationResponse>> AsyncGetOrganization(::grpc::ClientContext* context, const ::mruv::organizations::GetOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::organizations::GetOrganizationResponse>>(AsyncGetOrganizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::organizations::GetOrganizationResponse>> PrepareAsyncGetOrganization(::grpc::ClientContext* context, const ::mruv::organizations::GetOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::organizations::GetOrganizationResponse>>(PrepareAsyncGetOrganizationRaw(context, request, cq));
    }
    ::grpc::Status UpdateOrganization(::grpc::ClientContext* context, const ::mruv::organizations::UpdateOrganizationRequest& request, ::mruv::organizations::UpdateOrganizationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::organizations::UpdateOrganizationResponse>> AsyncUpdateOrganization(::grpc::ClientContext* context, const ::mruv::organizations::UpdateOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::organizations::UpdateOrganizationResponse>>(AsyncUpdateOrganizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::organizations::UpdateOrganizationResponse>> PrepareAsyncUpdateOrganization(::grpc::ClientContext* context, const ::mruv::organizations::UpdateOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::organizations::UpdateOrganizationResponse>>(PrepareAsyncUpdateOrganizationRaw(context, request, cq));
    }
    ::grpc::Status DeleteOrganization(::grpc::ClientContext* context, const ::mruv::organizations::DeleteOrganizationRequest& request, ::mruv::organizations::DeleteOrganizationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::organizations::DeleteOrganizationResponse>> AsyncDeleteOrganization(::grpc::ClientContext* context, const ::mruv::organizations::DeleteOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::organizations::DeleteOrganizationResponse>>(AsyncDeleteOrganizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::organizations::DeleteOrganizationResponse>> PrepareAsyncDeleteOrganization(::grpc::ClientContext* context, const ::mruv::organizations::DeleteOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::organizations::DeleteOrganizationResponse>>(PrepareAsyncDeleteOrganizationRaw(context, request, cq));
    }
    ::grpc::Status AssignLeader(::grpc::ClientContext* context, const ::mruv::organizations::AssignLeaderRequest& request, ::mruv::organizations::AssignLeaderResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::organizations::AssignLeaderResponse>> AsyncAssignLeader(::grpc::ClientContext* context, const ::mruv::organizations::AssignLeaderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::organizations::AssignLeaderResponse>>(AsyncAssignLeaderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::organizations::AssignLeaderResponse>> PrepareAsyncAssignLeader(::grpc::ClientContext* context, const ::mruv::organizations::AssignLeaderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::organizations::AssignLeaderResponse>>(PrepareAsyncAssignLeaderRaw(context, request, cq));
    }
    ::grpc::Status UnassignLeader(::grpc::ClientContext* context, const ::mruv::organizations::UnassignLeaderRequest& request, ::mruv::organizations::UnassignLeaderResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::organizations::UnassignLeaderResponse>> AsyncUnassignLeader(::grpc::ClientContext* context, const ::mruv::organizations::UnassignLeaderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::organizations::UnassignLeaderResponse>>(AsyncUnassignLeaderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::organizations::UnassignLeaderResponse>> PrepareAsyncUnassignLeader(::grpc::ClientContext* context, const ::mruv::organizations::UnassignLeaderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mruv::organizations::UnassignLeaderResponse>>(PrepareAsyncUnassignLeaderRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateOrganization(::grpc::ClientContext* context, const ::mruv::organizations::CreateOrganizationRequest* request, ::mruv::organizations::CreateOrganizationResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateOrganization(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::CreateOrganizationResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateOrganization(::grpc::ClientContext* context, const ::mruv::organizations::CreateOrganizationRequest* request, ::mruv::organizations::CreateOrganizationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateOrganization(::grpc::ClientContext* context, const ::mruv::organizations::CreateOrganizationRequest* request, ::mruv::organizations::CreateOrganizationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateOrganization(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::CreateOrganizationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateOrganization(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::CreateOrganizationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetOrganization(::grpc::ClientContext* context, const ::mruv::organizations::GetOrganizationRequest* request, ::mruv::organizations::GetOrganizationResponse* response, std::function<void(::grpc::Status)>) override;
      void GetOrganization(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::GetOrganizationResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetOrganization(::grpc::ClientContext* context, const ::mruv::organizations::GetOrganizationRequest* request, ::mruv::organizations::GetOrganizationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetOrganization(::grpc::ClientContext* context, const ::mruv::organizations::GetOrganizationRequest* request, ::mruv::organizations::GetOrganizationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetOrganization(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::GetOrganizationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetOrganization(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::GetOrganizationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateOrganization(::grpc::ClientContext* context, const ::mruv::organizations::UpdateOrganizationRequest* request, ::mruv::organizations::UpdateOrganizationResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateOrganization(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::UpdateOrganizationResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateOrganization(::grpc::ClientContext* context, const ::mruv::organizations::UpdateOrganizationRequest* request, ::mruv::organizations::UpdateOrganizationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateOrganization(::grpc::ClientContext* context, const ::mruv::organizations::UpdateOrganizationRequest* request, ::mruv::organizations::UpdateOrganizationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateOrganization(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::UpdateOrganizationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateOrganization(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::UpdateOrganizationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteOrganization(::grpc::ClientContext* context, const ::mruv::organizations::DeleteOrganizationRequest* request, ::mruv::organizations::DeleteOrganizationResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteOrganization(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::DeleteOrganizationResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteOrganization(::grpc::ClientContext* context, const ::mruv::organizations::DeleteOrganizationRequest* request, ::mruv::organizations::DeleteOrganizationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteOrganization(::grpc::ClientContext* context, const ::mruv::organizations::DeleteOrganizationRequest* request, ::mruv::organizations::DeleteOrganizationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteOrganization(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::DeleteOrganizationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteOrganization(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::DeleteOrganizationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void AssignLeader(::grpc::ClientContext* context, const ::mruv::organizations::AssignLeaderRequest* request, ::mruv::organizations::AssignLeaderResponse* response, std::function<void(::grpc::Status)>) override;
      void AssignLeader(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::AssignLeaderResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AssignLeader(::grpc::ClientContext* context, const ::mruv::organizations::AssignLeaderRequest* request, ::mruv::organizations::AssignLeaderResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AssignLeader(::grpc::ClientContext* context, const ::mruv::organizations::AssignLeaderRequest* request, ::mruv::organizations::AssignLeaderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AssignLeader(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::AssignLeaderResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AssignLeader(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::AssignLeaderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UnassignLeader(::grpc::ClientContext* context, const ::mruv::organizations::UnassignLeaderRequest* request, ::mruv::organizations::UnassignLeaderResponse* response, std::function<void(::grpc::Status)>) override;
      void UnassignLeader(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::UnassignLeaderResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UnassignLeader(::grpc::ClientContext* context, const ::mruv::organizations::UnassignLeaderRequest* request, ::mruv::organizations::UnassignLeaderResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UnassignLeader(::grpc::ClientContext* context, const ::mruv::organizations::UnassignLeaderRequest* request, ::mruv::organizations::UnassignLeaderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UnassignLeader(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::UnassignLeaderResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UnassignLeader(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::UnassignLeaderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mruv::organizations::CreateOrganizationResponse>* AsyncCreateOrganizationRaw(::grpc::ClientContext* context, const ::mruv::organizations::CreateOrganizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::organizations::CreateOrganizationResponse>* PrepareAsyncCreateOrganizationRaw(::grpc::ClientContext* context, const ::mruv::organizations::CreateOrganizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::organizations::GetOrganizationResponse>* AsyncGetOrganizationRaw(::grpc::ClientContext* context, const ::mruv::organizations::GetOrganizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::organizations::GetOrganizationResponse>* PrepareAsyncGetOrganizationRaw(::grpc::ClientContext* context, const ::mruv::organizations::GetOrganizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::organizations::UpdateOrganizationResponse>* AsyncUpdateOrganizationRaw(::grpc::ClientContext* context, const ::mruv::organizations::UpdateOrganizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::organizations::UpdateOrganizationResponse>* PrepareAsyncUpdateOrganizationRaw(::grpc::ClientContext* context, const ::mruv::organizations::UpdateOrganizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::organizations::DeleteOrganizationResponse>* AsyncDeleteOrganizationRaw(::grpc::ClientContext* context, const ::mruv::organizations::DeleteOrganizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::organizations::DeleteOrganizationResponse>* PrepareAsyncDeleteOrganizationRaw(::grpc::ClientContext* context, const ::mruv::organizations::DeleteOrganizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::organizations::AssignLeaderResponse>* AsyncAssignLeaderRaw(::grpc::ClientContext* context, const ::mruv::organizations::AssignLeaderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::organizations::AssignLeaderResponse>* PrepareAsyncAssignLeaderRaw(::grpc::ClientContext* context, const ::mruv::organizations::AssignLeaderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::organizations::UnassignLeaderResponse>* AsyncUnassignLeaderRaw(::grpc::ClientContext* context, const ::mruv::organizations::UnassignLeaderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mruv::organizations::UnassignLeaderResponse>* PrepareAsyncUnassignLeaderRaw(::grpc::ClientContext* context, const ::mruv::organizations::UnassignLeaderRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateOrganization_;
    const ::grpc::internal::RpcMethod rpcmethod_GetOrganization_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateOrganization_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteOrganization_;
    const ::grpc::internal::RpcMethod rpcmethod_AssignLeader_;
    const ::grpc::internal::RpcMethod rpcmethod_UnassignLeader_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Create a organization.
    virtual ::grpc::Status CreateOrganization(::grpc::ServerContext* context, const ::mruv::organizations::CreateOrganizationRequest* request, ::mruv::organizations::CreateOrganizationResponse* response);
    // Get organization.
    virtual ::grpc::Status GetOrganization(::grpc::ServerContext* context, const ::mruv::organizations::GetOrganizationRequest* request, ::mruv::organizations::GetOrganizationResponse* response);
    // Update organization.
    virtual ::grpc::Status UpdateOrganization(::grpc::ServerContext* context, const ::mruv::organizations::UpdateOrganizationRequest* request, ::mruv::organizations::UpdateOrganizationResponse* response);
    // Delete organization.
    virtual ::grpc::Status DeleteOrganization(::grpc::ServerContext* context, const ::mruv::organizations::DeleteOrganizationRequest* request, ::mruv::organizations::DeleteOrganizationResponse* response);
    // Assign an organization leader. Leader is a main administrator of a organization, have all rights to manage organization.
    // If the organization leader already exists, the leader will be overwritten.
    virtual ::grpc::Status AssignLeader(::grpc::ServerContext* context, const ::mruv::organizations::AssignLeaderRequest* request, ::mruv::organizations::AssignLeaderResponse* response);
    //
    virtual ::grpc::Status UnassignLeader(::grpc::ServerContext* context, const ::mruv::organizations::UnassignLeaderRequest* request, ::mruv::organizations::UnassignLeaderResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateOrganization() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOrganization(::grpc::ServerContext* /*context*/, const ::mruv::organizations::CreateOrganizationRequest* /*request*/, ::mruv::organizations::CreateOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateOrganization(::grpc::ServerContext* context, ::mruv::organizations::CreateOrganizationRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::organizations::CreateOrganizationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetOrganization() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrganization(::grpc::ServerContext* /*context*/, const ::mruv::organizations::GetOrganizationRequest* /*request*/, ::mruv::organizations::GetOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOrganization(::grpc::ServerContext* context, ::mruv::organizations::GetOrganizationRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::organizations::GetOrganizationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateOrganization() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrganization(::grpc::ServerContext* /*context*/, const ::mruv::organizations::UpdateOrganizationRequest* /*request*/, ::mruv::organizations::UpdateOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateOrganization(::grpc::ServerContext* context, ::mruv::organizations::UpdateOrganizationRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::organizations::UpdateOrganizationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteOrganization() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOrganization(::grpc::ServerContext* /*context*/, const ::mruv::organizations::DeleteOrganizationRequest* /*request*/, ::mruv::organizations::DeleteOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteOrganization(::grpc::ServerContext* context, ::mruv::organizations::DeleteOrganizationRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::organizations::DeleteOrganizationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AssignLeader : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AssignLeader() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_AssignLeader() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AssignLeader(::grpc::ServerContext* /*context*/, const ::mruv::organizations::AssignLeaderRequest* /*request*/, ::mruv::organizations::AssignLeaderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAssignLeader(::grpc::ServerContext* context, ::mruv::organizations::AssignLeaderRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::organizations::AssignLeaderResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UnassignLeader : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UnassignLeader() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_UnassignLeader() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnassignLeader(::grpc::ServerContext* /*context*/, const ::mruv::organizations::UnassignLeaderRequest* /*request*/, ::mruv::organizations::UnassignLeaderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnassignLeader(::grpc::ServerContext* context, ::mruv::organizations::UnassignLeaderRequest* request, ::grpc::ServerAsyncResponseWriter< ::mruv::organizations::UnassignLeaderResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateOrganization<WithAsyncMethod_GetOrganization<WithAsyncMethod_UpdateOrganization<WithAsyncMethod_DeleteOrganization<WithAsyncMethod_AssignLeader<WithAsyncMethod_UnassignLeader<Service > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateOrganization() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::organizations::CreateOrganizationRequest, ::mruv::organizations::CreateOrganizationResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::organizations::CreateOrganizationRequest* request, ::mruv::organizations::CreateOrganizationResponse* response) { return this->CreateOrganization(context, request, response); }));}
    void SetMessageAllocatorFor_CreateOrganization(
        ::grpc::experimental::MessageAllocator< ::mruv::organizations::CreateOrganizationRequest, ::mruv::organizations::CreateOrganizationResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::organizations::CreateOrganizationRequest, ::mruv::organizations::CreateOrganizationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOrganization(::grpc::ServerContext* /*context*/, const ::mruv::organizations::CreateOrganizationRequest* /*request*/, ::mruv::organizations::CreateOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateOrganization(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::organizations::CreateOrganizationRequest* /*request*/, ::mruv::organizations::CreateOrganizationResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateOrganization(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::organizations::CreateOrganizationRequest* /*request*/, ::mruv::organizations::CreateOrganizationResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetOrganization() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::organizations::GetOrganizationRequest, ::mruv::organizations::GetOrganizationResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::organizations::GetOrganizationRequest* request, ::mruv::organizations::GetOrganizationResponse* response) { return this->GetOrganization(context, request, response); }));}
    void SetMessageAllocatorFor_GetOrganization(
        ::grpc::experimental::MessageAllocator< ::mruv::organizations::GetOrganizationRequest, ::mruv::organizations::GetOrganizationResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::organizations::GetOrganizationRequest, ::mruv::organizations::GetOrganizationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrganization(::grpc::ServerContext* /*context*/, const ::mruv::organizations::GetOrganizationRequest* /*request*/, ::mruv::organizations::GetOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetOrganization(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::organizations::GetOrganizationRequest* /*request*/, ::mruv::organizations::GetOrganizationResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetOrganization(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::organizations::GetOrganizationRequest* /*request*/, ::mruv::organizations::GetOrganizationResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateOrganization() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::organizations::UpdateOrganizationRequest, ::mruv::organizations::UpdateOrganizationResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::organizations::UpdateOrganizationRequest* request, ::mruv::organizations::UpdateOrganizationResponse* response) { return this->UpdateOrganization(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateOrganization(
        ::grpc::experimental::MessageAllocator< ::mruv::organizations::UpdateOrganizationRequest, ::mruv::organizations::UpdateOrganizationResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::organizations::UpdateOrganizationRequest, ::mruv::organizations::UpdateOrganizationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrganization(::grpc::ServerContext* /*context*/, const ::mruv::organizations::UpdateOrganizationRequest* /*request*/, ::mruv::organizations::UpdateOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateOrganization(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::organizations::UpdateOrganizationRequest* /*request*/, ::mruv::organizations::UpdateOrganizationResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateOrganization(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::organizations::UpdateOrganizationRequest* /*request*/, ::mruv::organizations::UpdateOrganizationResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteOrganization() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::organizations::DeleteOrganizationRequest, ::mruv::organizations::DeleteOrganizationResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::organizations::DeleteOrganizationRequest* request, ::mruv::organizations::DeleteOrganizationResponse* response) { return this->DeleteOrganization(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteOrganization(
        ::grpc::experimental::MessageAllocator< ::mruv::organizations::DeleteOrganizationRequest, ::mruv::organizations::DeleteOrganizationResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::organizations::DeleteOrganizationRequest, ::mruv::organizations::DeleteOrganizationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOrganization(::grpc::ServerContext* /*context*/, const ::mruv::organizations::DeleteOrganizationRequest* /*request*/, ::mruv::organizations::DeleteOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteOrganization(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::organizations::DeleteOrganizationRequest* /*request*/, ::mruv::organizations::DeleteOrganizationResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteOrganization(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::organizations::DeleteOrganizationRequest* /*request*/, ::mruv::organizations::DeleteOrganizationResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AssignLeader : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AssignLeader() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::organizations::AssignLeaderRequest, ::mruv::organizations::AssignLeaderResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::organizations::AssignLeaderRequest* request, ::mruv::organizations::AssignLeaderResponse* response) { return this->AssignLeader(context, request, response); }));}
    void SetMessageAllocatorFor_AssignLeader(
        ::grpc::experimental::MessageAllocator< ::mruv::organizations::AssignLeaderRequest, ::mruv::organizations::AssignLeaderResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::organizations::AssignLeaderRequest, ::mruv::organizations::AssignLeaderResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AssignLeader() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AssignLeader(::grpc::ServerContext* /*context*/, const ::mruv::organizations::AssignLeaderRequest* /*request*/, ::mruv::organizations::AssignLeaderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AssignLeader(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::organizations::AssignLeaderRequest* /*request*/, ::mruv::organizations::AssignLeaderResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AssignLeader(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::organizations::AssignLeaderRequest* /*request*/, ::mruv::organizations::AssignLeaderResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UnassignLeader : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UnassignLeader() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mruv::organizations::UnassignLeaderRequest, ::mruv::organizations::UnassignLeaderResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mruv::organizations::UnassignLeaderRequest* request, ::mruv::organizations::UnassignLeaderResponse* response) { return this->UnassignLeader(context, request, response); }));}
    void SetMessageAllocatorFor_UnassignLeader(
        ::grpc::experimental::MessageAllocator< ::mruv::organizations::UnassignLeaderRequest, ::mruv::organizations::UnassignLeaderResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mruv::organizations::UnassignLeaderRequest, ::mruv::organizations::UnassignLeaderResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UnassignLeader() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnassignLeader(::grpc::ServerContext* /*context*/, const ::mruv::organizations::UnassignLeaderRequest* /*request*/, ::mruv::organizations::UnassignLeaderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UnassignLeader(
      ::grpc::CallbackServerContext* /*context*/, const ::mruv::organizations::UnassignLeaderRequest* /*request*/, ::mruv::organizations::UnassignLeaderResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UnassignLeader(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mruv::organizations::UnassignLeaderRequest* /*request*/, ::mruv::organizations::UnassignLeaderResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_CreateOrganization<ExperimentalWithCallbackMethod_GetOrganization<ExperimentalWithCallbackMethod_UpdateOrganization<ExperimentalWithCallbackMethod_DeleteOrganization<ExperimentalWithCallbackMethod_AssignLeader<ExperimentalWithCallbackMethod_UnassignLeader<Service > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_CreateOrganization<ExperimentalWithCallbackMethod_GetOrganization<ExperimentalWithCallbackMethod_UpdateOrganization<ExperimentalWithCallbackMethod_DeleteOrganization<ExperimentalWithCallbackMethod_AssignLeader<ExperimentalWithCallbackMethod_UnassignLeader<Service > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateOrganization() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOrganization(::grpc::ServerContext* /*context*/, const ::mruv::organizations::CreateOrganizationRequest* /*request*/, ::mruv::organizations::CreateOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetOrganization() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrganization(::grpc::ServerContext* /*context*/, const ::mruv::organizations::GetOrganizationRequest* /*request*/, ::mruv::organizations::GetOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateOrganization() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrganization(::grpc::ServerContext* /*context*/, const ::mruv::organizations::UpdateOrganizationRequest* /*request*/, ::mruv::organizations::UpdateOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteOrganization() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOrganization(::grpc::ServerContext* /*context*/, const ::mruv::organizations::DeleteOrganizationRequest* /*request*/, ::mruv::organizations::DeleteOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AssignLeader : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AssignLeader() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_AssignLeader() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AssignLeader(::grpc::ServerContext* /*context*/, const ::mruv::organizations::AssignLeaderRequest* /*request*/, ::mruv::organizations::AssignLeaderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UnassignLeader : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UnassignLeader() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_UnassignLeader() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnassignLeader(::grpc::ServerContext* /*context*/, const ::mruv::organizations::UnassignLeaderRequest* /*request*/, ::mruv::organizations::UnassignLeaderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateOrganization() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOrganization(::grpc::ServerContext* /*context*/, const ::mruv::organizations::CreateOrganizationRequest* /*request*/, ::mruv::organizations::CreateOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateOrganization(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetOrganization() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrganization(::grpc::ServerContext* /*context*/, const ::mruv::organizations::GetOrganizationRequest* /*request*/, ::mruv::organizations::GetOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOrganization(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateOrganization() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrganization(::grpc::ServerContext* /*context*/, const ::mruv::organizations::UpdateOrganizationRequest* /*request*/, ::mruv::organizations::UpdateOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateOrganization(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteOrganization() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOrganization(::grpc::ServerContext* /*context*/, const ::mruv::organizations::DeleteOrganizationRequest* /*request*/, ::mruv::organizations::DeleteOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteOrganization(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AssignLeader : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AssignLeader() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_AssignLeader() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AssignLeader(::grpc::ServerContext* /*context*/, const ::mruv::organizations::AssignLeaderRequest* /*request*/, ::mruv::organizations::AssignLeaderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAssignLeader(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UnassignLeader : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UnassignLeader() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_UnassignLeader() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnassignLeader(::grpc::ServerContext* /*context*/, const ::mruv::organizations::UnassignLeaderRequest* /*request*/, ::mruv::organizations::UnassignLeaderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnassignLeader(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateOrganization() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateOrganization(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOrganization(::grpc::ServerContext* /*context*/, const ::mruv::organizations::CreateOrganizationRequest* /*request*/, ::mruv::organizations::CreateOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateOrganization(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateOrganization(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetOrganization() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetOrganization(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrganization(::grpc::ServerContext* /*context*/, const ::mruv::organizations::GetOrganizationRequest* /*request*/, ::mruv::organizations::GetOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetOrganization(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetOrganization(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateOrganization() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateOrganization(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrganization(::grpc::ServerContext* /*context*/, const ::mruv::organizations::UpdateOrganizationRequest* /*request*/, ::mruv::organizations::UpdateOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateOrganization(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateOrganization(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteOrganization() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteOrganization(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOrganization(::grpc::ServerContext* /*context*/, const ::mruv::organizations::DeleteOrganizationRequest* /*request*/, ::mruv::organizations::DeleteOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteOrganization(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteOrganization(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AssignLeader : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AssignLeader() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AssignLeader(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AssignLeader() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AssignLeader(::grpc::ServerContext* /*context*/, const ::mruv::organizations::AssignLeaderRequest* /*request*/, ::mruv::organizations::AssignLeaderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AssignLeader(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AssignLeader(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UnassignLeader : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UnassignLeader() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UnassignLeader(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UnassignLeader() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnassignLeader(::grpc::ServerContext* /*context*/, const ::mruv::organizations::UnassignLeaderRequest* /*request*/, ::mruv::organizations::UnassignLeaderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UnassignLeader(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UnassignLeader(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateOrganization() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::mruv::organizations::CreateOrganizationRequest, ::mruv::organizations::CreateOrganizationResponse>(std::bind(&WithStreamedUnaryMethod_CreateOrganization<BaseClass>::StreamedCreateOrganization, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateOrganization(::grpc::ServerContext* /*context*/, const ::mruv::organizations::CreateOrganizationRequest* /*request*/, ::mruv::organizations::CreateOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateOrganization(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::organizations::CreateOrganizationRequest,::mruv::organizations::CreateOrganizationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetOrganization() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::mruv::organizations::GetOrganizationRequest, ::mruv::organizations::GetOrganizationResponse>(std::bind(&WithStreamedUnaryMethod_GetOrganization<BaseClass>::StreamedGetOrganization, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOrganization(::grpc::ServerContext* /*context*/, const ::mruv::organizations::GetOrganizationRequest* /*request*/, ::mruv::organizations::GetOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetOrganization(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::organizations::GetOrganizationRequest,::mruv::organizations::GetOrganizationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateOrganization() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::mruv::organizations::UpdateOrganizationRequest, ::mruv::organizations::UpdateOrganizationResponse>(std::bind(&WithStreamedUnaryMethod_UpdateOrganization<BaseClass>::StreamedUpdateOrganization, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateOrganization(::grpc::ServerContext* /*context*/, const ::mruv::organizations::UpdateOrganizationRequest* /*request*/, ::mruv::organizations::UpdateOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateOrganization(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::organizations::UpdateOrganizationRequest,::mruv::organizations::UpdateOrganizationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteOrganization() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::mruv::organizations::DeleteOrganizationRequest, ::mruv::organizations::DeleteOrganizationResponse>(std::bind(&WithStreamedUnaryMethod_DeleteOrganization<BaseClass>::StreamedDeleteOrganization, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteOrganization(::grpc::ServerContext* /*context*/, const ::mruv::organizations::DeleteOrganizationRequest* /*request*/, ::mruv::organizations::DeleteOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteOrganization(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::organizations::DeleteOrganizationRequest,::mruv::organizations::DeleteOrganizationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AssignLeader : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AssignLeader() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::mruv::organizations::AssignLeaderRequest, ::mruv::organizations::AssignLeaderResponse>(std::bind(&WithStreamedUnaryMethod_AssignLeader<BaseClass>::StreamedAssignLeader, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AssignLeader() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AssignLeader(::grpc::ServerContext* /*context*/, const ::mruv::organizations::AssignLeaderRequest* /*request*/, ::mruv::organizations::AssignLeaderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAssignLeader(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::organizations::AssignLeaderRequest,::mruv::organizations::AssignLeaderResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UnassignLeader : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UnassignLeader() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::mruv::organizations::UnassignLeaderRequest, ::mruv::organizations::UnassignLeaderResponse>(std::bind(&WithStreamedUnaryMethod_UnassignLeader<BaseClass>::StreamedUnassignLeader, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UnassignLeader() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UnassignLeader(::grpc::ServerContext* /*context*/, const ::mruv::organizations::UnassignLeaderRequest* /*request*/, ::mruv::organizations::UnassignLeaderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnassignLeader(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mruv::organizations::UnassignLeaderRequest,::mruv::organizations::UnassignLeaderResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateOrganization<WithStreamedUnaryMethod_GetOrganization<WithStreamedUnaryMethod_UpdateOrganization<WithStreamedUnaryMethod_DeleteOrganization<WithStreamedUnaryMethod_AssignLeader<WithStreamedUnaryMethod_UnassignLeader<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateOrganization<WithStreamedUnaryMethod_GetOrganization<WithStreamedUnaryMethod_UpdateOrganization<WithStreamedUnaryMethod_DeleteOrganization<WithStreamedUnaryMethod_AssignLeader<WithStreamedUnaryMethod_UnassignLeader<Service > > > > > > StreamedService;
};

}  // namespace organizations
}  // namespace mruv


#endif  // GRPC_organizations_2forganizations_2eproto__INCLUDED
