// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: organizations/organizations.proto

#include "organizations/organizations.pb.h"
#include "organizations/organizations.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace mruv {
namespace organizations {

static const char* MruVOrganizationsService_method_names[] = {
  "/mruv.organizations.MruVOrganizationsService/CreateOrganization",
  "/mruv.organizations.MruVOrganizationsService/GetOrganization",
  "/mruv.organizations.MruVOrganizationsService/UpdateOrganization",
  "/mruv.organizations.MruVOrganizationsService/DeleteOrganization",
  "/mruv.organizations.MruVOrganizationsService/AssignLeader",
  "/mruv.organizations.MruVOrganizationsService/UnassignLeader",
};

std::unique_ptr< MruVOrganizationsService::Stub> MruVOrganizationsService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MruVOrganizationsService::Stub> stub(new MruVOrganizationsService::Stub(channel));
  return stub;
}

MruVOrganizationsService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateOrganization_(MruVOrganizationsService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOrganization_(MruVOrganizationsService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateOrganization_(MruVOrganizationsService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteOrganization_(MruVOrganizationsService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AssignLeader_(MruVOrganizationsService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnassignLeader_(MruVOrganizationsService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MruVOrganizationsService::Stub::CreateOrganization(::grpc::ClientContext* context, const ::mruv::organizations::CreateOrganizationRequest& request, ::mruv::organizations::CreateOrganizationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateOrganization_, context, request, response);
}

void MruVOrganizationsService::Stub::experimental_async::CreateOrganization(::grpc::ClientContext* context, const ::mruv::organizations::CreateOrganizationRequest* request, ::mruv::organizations::CreateOrganizationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateOrganization_, context, request, response, std::move(f));
}

void MruVOrganizationsService::Stub::experimental_async::CreateOrganization(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::CreateOrganizationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateOrganization_, context, request, response, std::move(f));
}

void MruVOrganizationsService::Stub::experimental_async::CreateOrganization(::grpc::ClientContext* context, const ::mruv::organizations::CreateOrganizationRequest* request, ::mruv::organizations::CreateOrganizationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateOrganization_, context, request, response, reactor);
}

void MruVOrganizationsService::Stub::experimental_async::CreateOrganization(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::CreateOrganizationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateOrganization_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::organizations::CreateOrganizationResponse>* MruVOrganizationsService::Stub::AsyncCreateOrganizationRaw(::grpc::ClientContext* context, const ::mruv::organizations::CreateOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::organizations::CreateOrganizationResponse>::Create(channel_.get(), cq, rpcmethod_CreateOrganization_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::organizations::CreateOrganizationResponse>* MruVOrganizationsService::Stub::PrepareAsyncCreateOrganizationRaw(::grpc::ClientContext* context, const ::mruv::organizations::CreateOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::organizations::CreateOrganizationResponse>::Create(channel_.get(), cq, rpcmethod_CreateOrganization_, context, request, false);
}

::grpc::Status MruVOrganizationsService::Stub::GetOrganization(::grpc::ClientContext* context, const ::mruv::organizations::GetOrganizationRequest& request, ::mruv::organizations::GetOrganizationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetOrganization_, context, request, response);
}

void MruVOrganizationsService::Stub::experimental_async::GetOrganization(::grpc::ClientContext* context, const ::mruv::organizations::GetOrganizationRequest* request, ::mruv::organizations::GetOrganizationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetOrganization_, context, request, response, std::move(f));
}

void MruVOrganizationsService::Stub::experimental_async::GetOrganization(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::GetOrganizationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetOrganization_, context, request, response, std::move(f));
}

void MruVOrganizationsService::Stub::experimental_async::GetOrganization(::grpc::ClientContext* context, const ::mruv::organizations::GetOrganizationRequest* request, ::mruv::organizations::GetOrganizationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetOrganization_, context, request, response, reactor);
}

void MruVOrganizationsService::Stub::experimental_async::GetOrganization(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::GetOrganizationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetOrganization_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::organizations::GetOrganizationResponse>* MruVOrganizationsService::Stub::AsyncGetOrganizationRaw(::grpc::ClientContext* context, const ::mruv::organizations::GetOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::organizations::GetOrganizationResponse>::Create(channel_.get(), cq, rpcmethod_GetOrganization_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::organizations::GetOrganizationResponse>* MruVOrganizationsService::Stub::PrepareAsyncGetOrganizationRaw(::grpc::ClientContext* context, const ::mruv::organizations::GetOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::organizations::GetOrganizationResponse>::Create(channel_.get(), cq, rpcmethod_GetOrganization_, context, request, false);
}

::grpc::Status MruVOrganizationsService::Stub::UpdateOrganization(::grpc::ClientContext* context, const ::mruv::organizations::UpdateOrganizationRequest& request, ::mruv::organizations::UpdateOrganizationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateOrganization_, context, request, response);
}

void MruVOrganizationsService::Stub::experimental_async::UpdateOrganization(::grpc::ClientContext* context, const ::mruv::organizations::UpdateOrganizationRequest* request, ::mruv::organizations::UpdateOrganizationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateOrganization_, context, request, response, std::move(f));
}

void MruVOrganizationsService::Stub::experimental_async::UpdateOrganization(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::UpdateOrganizationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateOrganization_, context, request, response, std::move(f));
}

void MruVOrganizationsService::Stub::experimental_async::UpdateOrganization(::grpc::ClientContext* context, const ::mruv::organizations::UpdateOrganizationRequest* request, ::mruv::organizations::UpdateOrganizationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateOrganization_, context, request, response, reactor);
}

void MruVOrganizationsService::Stub::experimental_async::UpdateOrganization(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::UpdateOrganizationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateOrganization_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::organizations::UpdateOrganizationResponse>* MruVOrganizationsService::Stub::AsyncUpdateOrganizationRaw(::grpc::ClientContext* context, const ::mruv::organizations::UpdateOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::organizations::UpdateOrganizationResponse>::Create(channel_.get(), cq, rpcmethod_UpdateOrganization_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::organizations::UpdateOrganizationResponse>* MruVOrganizationsService::Stub::PrepareAsyncUpdateOrganizationRaw(::grpc::ClientContext* context, const ::mruv::organizations::UpdateOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::organizations::UpdateOrganizationResponse>::Create(channel_.get(), cq, rpcmethod_UpdateOrganization_, context, request, false);
}

::grpc::Status MruVOrganizationsService::Stub::DeleteOrganization(::grpc::ClientContext* context, const ::mruv::organizations::DeleteOrganizationRequest& request, ::mruv::organizations::DeleteOrganizationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteOrganization_, context, request, response);
}

void MruVOrganizationsService::Stub::experimental_async::DeleteOrganization(::grpc::ClientContext* context, const ::mruv::organizations::DeleteOrganizationRequest* request, ::mruv::organizations::DeleteOrganizationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteOrganization_, context, request, response, std::move(f));
}

void MruVOrganizationsService::Stub::experimental_async::DeleteOrganization(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::DeleteOrganizationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteOrganization_, context, request, response, std::move(f));
}

void MruVOrganizationsService::Stub::experimental_async::DeleteOrganization(::grpc::ClientContext* context, const ::mruv::organizations::DeleteOrganizationRequest* request, ::mruv::organizations::DeleteOrganizationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteOrganization_, context, request, response, reactor);
}

void MruVOrganizationsService::Stub::experimental_async::DeleteOrganization(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::DeleteOrganizationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteOrganization_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::organizations::DeleteOrganizationResponse>* MruVOrganizationsService::Stub::AsyncDeleteOrganizationRaw(::grpc::ClientContext* context, const ::mruv::organizations::DeleteOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::organizations::DeleteOrganizationResponse>::Create(channel_.get(), cq, rpcmethod_DeleteOrganization_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::organizations::DeleteOrganizationResponse>* MruVOrganizationsService::Stub::PrepareAsyncDeleteOrganizationRaw(::grpc::ClientContext* context, const ::mruv::organizations::DeleteOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::organizations::DeleteOrganizationResponse>::Create(channel_.get(), cq, rpcmethod_DeleteOrganization_, context, request, false);
}

::grpc::Status MruVOrganizationsService::Stub::AssignLeader(::grpc::ClientContext* context, const ::mruv::organizations::AssignLeaderRequest& request, ::mruv::organizations::AssignLeaderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AssignLeader_, context, request, response);
}

void MruVOrganizationsService::Stub::experimental_async::AssignLeader(::grpc::ClientContext* context, const ::mruv::organizations::AssignLeaderRequest* request, ::mruv::organizations::AssignLeaderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AssignLeader_, context, request, response, std::move(f));
}

void MruVOrganizationsService::Stub::experimental_async::AssignLeader(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::AssignLeaderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AssignLeader_, context, request, response, std::move(f));
}

void MruVOrganizationsService::Stub::experimental_async::AssignLeader(::grpc::ClientContext* context, const ::mruv::organizations::AssignLeaderRequest* request, ::mruv::organizations::AssignLeaderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AssignLeader_, context, request, response, reactor);
}

void MruVOrganizationsService::Stub::experimental_async::AssignLeader(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::AssignLeaderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AssignLeader_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::organizations::AssignLeaderResponse>* MruVOrganizationsService::Stub::AsyncAssignLeaderRaw(::grpc::ClientContext* context, const ::mruv::organizations::AssignLeaderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::organizations::AssignLeaderResponse>::Create(channel_.get(), cq, rpcmethod_AssignLeader_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::organizations::AssignLeaderResponse>* MruVOrganizationsService::Stub::PrepareAsyncAssignLeaderRaw(::grpc::ClientContext* context, const ::mruv::organizations::AssignLeaderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::organizations::AssignLeaderResponse>::Create(channel_.get(), cq, rpcmethod_AssignLeader_, context, request, false);
}

::grpc::Status MruVOrganizationsService::Stub::UnassignLeader(::grpc::ClientContext* context, const ::mruv::organizations::UnassignLeaderRequest& request, ::mruv::organizations::UnassignLeaderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UnassignLeader_, context, request, response);
}

void MruVOrganizationsService::Stub::experimental_async::UnassignLeader(::grpc::ClientContext* context, const ::mruv::organizations::UnassignLeaderRequest* request, ::mruv::organizations::UnassignLeaderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UnassignLeader_, context, request, response, std::move(f));
}

void MruVOrganizationsService::Stub::experimental_async::UnassignLeader(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::UnassignLeaderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UnassignLeader_, context, request, response, std::move(f));
}

void MruVOrganizationsService::Stub::experimental_async::UnassignLeader(::grpc::ClientContext* context, const ::mruv::organizations::UnassignLeaderRequest* request, ::mruv::organizations::UnassignLeaderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UnassignLeader_, context, request, response, reactor);
}

void MruVOrganizationsService::Stub::experimental_async::UnassignLeader(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::organizations::UnassignLeaderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UnassignLeader_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::organizations::UnassignLeaderResponse>* MruVOrganizationsService::Stub::AsyncUnassignLeaderRaw(::grpc::ClientContext* context, const ::mruv::organizations::UnassignLeaderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::organizations::UnassignLeaderResponse>::Create(channel_.get(), cq, rpcmethod_UnassignLeader_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::organizations::UnassignLeaderResponse>* MruVOrganizationsService::Stub::PrepareAsyncUnassignLeaderRaw(::grpc::ClientContext* context, const ::mruv::organizations::UnassignLeaderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::organizations::UnassignLeaderResponse>::Create(channel_.get(), cq, rpcmethod_UnassignLeader_, context, request, false);
}

MruVOrganizationsService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVOrganizationsService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVOrganizationsService::Service, ::mruv::organizations::CreateOrganizationRequest, ::mruv::organizations::CreateOrganizationResponse>(
          std::mem_fn(&MruVOrganizationsService::Service::CreateOrganization), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVOrganizationsService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVOrganizationsService::Service, ::mruv::organizations::GetOrganizationRequest, ::mruv::organizations::GetOrganizationResponse>(
          std::mem_fn(&MruVOrganizationsService::Service::GetOrganization), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVOrganizationsService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVOrganizationsService::Service, ::mruv::organizations::UpdateOrganizationRequest, ::mruv::organizations::UpdateOrganizationResponse>(
          std::mem_fn(&MruVOrganizationsService::Service::UpdateOrganization), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVOrganizationsService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVOrganizationsService::Service, ::mruv::organizations::DeleteOrganizationRequest, ::mruv::organizations::DeleteOrganizationResponse>(
          std::mem_fn(&MruVOrganizationsService::Service::DeleteOrganization), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVOrganizationsService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVOrganizationsService::Service, ::mruv::organizations::AssignLeaderRequest, ::mruv::organizations::AssignLeaderResponse>(
          std::mem_fn(&MruVOrganizationsService::Service::AssignLeader), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVOrganizationsService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVOrganizationsService::Service, ::mruv::organizations::UnassignLeaderRequest, ::mruv::organizations::UnassignLeaderResponse>(
          std::mem_fn(&MruVOrganizationsService::Service::UnassignLeader), this)));
}

MruVOrganizationsService::Service::~Service() {
}

::grpc::Status MruVOrganizationsService::Service::CreateOrganization(::grpc::ServerContext* context, const ::mruv::organizations::CreateOrganizationRequest* request, ::mruv::organizations::CreateOrganizationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVOrganizationsService::Service::GetOrganization(::grpc::ServerContext* context, const ::mruv::organizations::GetOrganizationRequest* request, ::mruv::organizations::GetOrganizationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVOrganizationsService::Service::UpdateOrganization(::grpc::ServerContext* context, const ::mruv::organizations::UpdateOrganizationRequest* request, ::mruv::organizations::UpdateOrganizationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVOrganizationsService::Service::DeleteOrganization(::grpc::ServerContext* context, const ::mruv::organizations::DeleteOrganizationRequest* request, ::mruv::organizations::DeleteOrganizationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVOrganizationsService::Service::AssignLeader(::grpc::ServerContext* context, const ::mruv::organizations::AssignLeaderRequest* request, ::mruv::organizations::AssignLeaderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVOrganizationsService::Service::UnassignLeader(::grpc::ServerContext* context, const ::mruv::organizations::UnassignLeaderRequest* request, ::mruv::organizations::UnassignLeaderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mruv
}  // namespace organizations

