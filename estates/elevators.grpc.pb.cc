// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: estates/elevators.proto

#include "estates/elevators.pb.h"
#include "estates/elevators.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace mruv {
namespace elevators {

static const char* MruVElevatorsService_method_names[] = {
  "/mruv.elevators.MruVElevatorsService/CreateElevator",
  "/mruv.elevators.MruVElevatorsService/GetElevator",
  "/mruv.elevators.MruVElevatorsService/UpdateElevator",
  "/mruv.elevators.MruVElevatorsService/DeleteElevator",
  "/mruv.elevators.MruVElevatorsService/GetElevatorFloors",
};

std::unique_ptr< MruVElevatorsService::Stub> MruVElevatorsService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MruVElevatorsService::Stub> stub(new MruVElevatorsService::Stub(channel));
  return stub;
}

MruVElevatorsService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateElevator_(MruVElevatorsService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetElevator_(MruVElevatorsService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateElevator_(MruVElevatorsService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteElevator_(MruVElevatorsService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetElevatorFloors_(MruVElevatorsService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MruVElevatorsService::Stub::CreateElevator(::grpc::ClientContext* context, const ::mruv::elevators::CreateElevatorRequest& request, ::mruv::elevators::CreateElevatorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateElevator_, context, request, response);
}

void MruVElevatorsService::Stub::experimental_async::CreateElevator(::grpc::ClientContext* context, const ::mruv::elevators::CreateElevatorRequest* request, ::mruv::elevators::CreateElevatorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateElevator_, context, request, response, std::move(f));
}

void MruVElevatorsService::Stub::experimental_async::CreateElevator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::elevators::CreateElevatorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateElevator_, context, request, response, std::move(f));
}

void MruVElevatorsService::Stub::experimental_async::CreateElevator(::grpc::ClientContext* context, const ::mruv::elevators::CreateElevatorRequest* request, ::mruv::elevators::CreateElevatorResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateElevator_, context, request, response, reactor);
}

void MruVElevatorsService::Stub::experimental_async::CreateElevator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::elevators::CreateElevatorResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateElevator_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::elevators::CreateElevatorResponse>* MruVElevatorsService::Stub::AsyncCreateElevatorRaw(::grpc::ClientContext* context, const ::mruv::elevators::CreateElevatorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::elevators::CreateElevatorResponse>::Create(channel_.get(), cq, rpcmethod_CreateElevator_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::elevators::CreateElevatorResponse>* MruVElevatorsService::Stub::PrepareAsyncCreateElevatorRaw(::grpc::ClientContext* context, const ::mruv::elevators::CreateElevatorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::elevators::CreateElevatorResponse>::Create(channel_.get(), cq, rpcmethod_CreateElevator_, context, request, false);
}

::grpc::Status MruVElevatorsService::Stub::GetElevator(::grpc::ClientContext* context, const ::mruv::elevators::GetElevatorRequest& request, ::mruv::elevators::GetElevatorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetElevator_, context, request, response);
}

void MruVElevatorsService::Stub::experimental_async::GetElevator(::grpc::ClientContext* context, const ::mruv::elevators::GetElevatorRequest* request, ::mruv::elevators::GetElevatorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetElevator_, context, request, response, std::move(f));
}

void MruVElevatorsService::Stub::experimental_async::GetElevator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::elevators::GetElevatorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetElevator_, context, request, response, std::move(f));
}

void MruVElevatorsService::Stub::experimental_async::GetElevator(::grpc::ClientContext* context, const ::mruv::elevators::GetElevatorRequest* request, ::mruv::elevators::GetElevatorResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetElevator_, context, request, response, reactor);
}

void MruVElevatorsService::Stub::experimental_async::GetElevator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::elevators::GetElevatorResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetElevator_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::elevators::GetElevatorResponse>* MruVElevatorsService::Stub::AsyncGetElevatorRaw(::grpc::ClientContext* context, const ::mruv::elevators::GetElevatorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::elevators::GetElevatorResponse>::Create(channel_.get(), cq, rpcmethod_GetElevator_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::elevators::GetElevatorResponse>* MruVElevatorsService::Stub::PrepareAsyncGetElevatorRaw(::grpc::ClientContext* context, const ::mruv::elevators::GetElevatorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::elevators::GetElevatorResponse>::Create(channel_.get(), cq, rpcmethod_GetElevator_, context, request, false);
}

::grpc::Status MruVElevatorsService::Stub::UpdateElevator(::grpc::ClientContext* context, const ::mruv::elevators::UpdateElevatorRequest& request, ::mruv::elevators::UpdateElevatorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateElevator_, context, request, response);
}

void MruVElevatorsService::Stub::experimental_async::UpdateElevator(::grpc::ClientContext* context, const ::mruv::elevators::UpdateElevatorRequest* request, ::mruv::elevators::UpdateElevatorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateElevator_, context, request, response, std::move(f));
}

void MruVElevatorsService::Stub::experimental_async::UpdateElevator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::elevators::UpdateElevatorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateElevator_, context, request, response, std::move(f));
}

void MruVElevatorsService::Stub::experimental_async::UpdateElevator(::grpc::ClientContext* context, const ::mruv::elevators::UpdateElevatorRequest* request, ::mruv::elevators::UpdateElevatorResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateElevator_, context, request, response, reactor);
}

void MruVElevatorsService::Stub::experimental_async::UpdateElevator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::elevators::UpdateElevatorResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateElevator_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::elevators::UpdateElevatorResponse>* MruVElevatorsService::Stub::AsyncUpdateElevatorRaw(::grpc::ClientContext* context, const ::mruv::elevators::UpdateElevatorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::elevators::UpdateElevatorResponse>::Create(channel_.get(), cq, rpcmethod_UpdateElevator_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::elevators::UpdateElevatorResponse>* MruVElevatorsService::Stub::PrepareAsyncUpdateElevatorRaw(::grpc::ClientContext* context, const ::mruv::elevators::UpdateElevatorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::elevators::UpdateElevatorResponse>::Create(channel_.get(), cq, rpcmethod_UpdateElevator_, context, request, false);
}

::grpc::Status MruVElevatorsService::Stub::DeleteElevator(::grpc::ClientContext* context, const ::mruv::elevators::DeleteElevatorRequest& request, ::mruv::elevators::DeleteElevatorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteElevator_, context, request, response);
}

void MruVElevatorsService::Stub::experimental_async::DeleteElevator(::grpc::ClientContext* context, const ::mruv::elevators::DeleteElevatorRequest* request, ::mruv::elevators::DeleteElevatorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteElevator_, context, request, response, std::move(f));
}

void MruVElevatorsService::Stub::experimental_async::DeleteElevator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::elevators::DeleteElevatorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteElevator_, context, request, response, std::move(f));
}

void MruVElevatorsService::Stub::experimental_async::DeleteElevator(::grpc::ClientContext* context, const ::mruv::elevators::DeleteElevatorRequest* request, ::mruv::elevators::DeleteElevatorResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteElevator_, context, request, response, reactor);
}

void MruVElevatorsService::Stub::experimental_async::DeleteElevator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::elevators::DeleteElevatorResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteElevator_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::elevators::DeleteElevatorResponse>* MruVElevatorsService::Stub::AsyncDeleteElevatorRaw(::grpc::ClientContext* context, const ::mruv::elevators::DeleteElevatorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::elevators::DeleteElevatorResponse>::Create(channel_.get(), cq, rpcmethod_DeleteElevator_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::elevators::DeleteElevatorResponse>* MruVElevatorsService::Stub::PrepareAsyncDeleteElevatorRaw(::grpc::ClientContext* context, const ::mruv::elevators::DeleteElevatorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::elevators::DeleteElevatorResponse>::Create(channel_.get(), cq, rpcmethod_DeleteElevator_, context, request, false);
}

::grpc::Status MruVElevatorsService::Stub::GetElevatorFloors(::grpc::ClientContext* context, const ::mruv::elevators::GetElevatorFloorsRequest& request, ::mruv::elevators::GetElevatorFloorsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetElevatorFloors_, context, request, response);
}

void MruVElevatorsService::Stub::experimental_async::GetElevatorFloors(::grpc::ClientContext* context, const ::mruv::elevators::GetElevatorFloorsRequest* request, ::mruv::elevators::GetElevatorFloorsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetElevatorFloors_, context, request, response, std::move(f));
}

void MruVElevatorsService::Stub::experimental_async::GetElevatorFloors(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::elevators::GetElevatorFloorsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetElevatorFloors_, context, request, response, std::move(f));
}

void MruVElevatorsService::Stub::experimental_async::GetElevatorFloors(::grpc::ClientContext* context, const ::mruv::elevators::GetElevatorFloorsRequest* request, ::mruv::elevators::GetElevatorFloorsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetElevatorFloors_, context, request, response, reactor);
}

void MruVElevatorsService::Stub::experimental_async::GetElevatorFloors(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::elevators::GetElevatorFloorsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetElevatorFloors_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::elevators::GetElevatorFloorsResponse>* MruVElevatorsService::Stub::AsyncGetElevatorFloorsRaw(::grpc::ClientContext* context, const ::mruv::elevators::GetElevatorFloorsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::elevators::GetElevatorFloorsResponse>::Create(channel_.get(), cq, rpcmethod_GetElevatorFloors_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::elevators::GetElevatorFloorsResponse>* MruVElevatorsService::Stub::PrepareAsyncGetElevatorFloorsRaw(::grpc::ClientContext* context, const ::mruv::elevators::GetElevatorFloorsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::elevators::GetElevatorFloorsResponse>::Create(channel_.get(), cq, rpcmethod_GetElevatorFloors_, context, request, false);
}

MruVElevatorsService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVElevatorsService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVElevatorsService::Service, ::mruv::elevators::CreateElevatorRequest, ::mruv::elevators::CreateElevatorResponse>(
          std::mem_fn(&MruVElevatorsService::Service::CreateElevator), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVElevatorsService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVElevatorsService::Service, ::mruv::elevators::GetElevatorRequest, ::mruv::elevators::GetElevatorResponse>(
          std::mem_fn(&MruVElevatorsService::Service::GetElevator), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVElevatorsService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVElevatorsService::Service, ::mruv::elevators::UpdateElevatorRequest, ::mruv::elevators::UpdateElevatorResponse>(
          std::mem_fn(&MruVElevatorsService::Service::UpdateElevator), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVElevatorsService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVElevatorsService::Service, ::mruv::elevators::DeleteElevatorRequest, ::mruv::elevators::DeleteElevatorResponse>(
          std::mem_fn(&MruVElevatorsService::Service::DeleteElevator), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVElevatorsService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVElevatorsService::Service, ::mruv::elevators::GetElevatorFloorsRequest, ::mruv::elevators::GetElevatorFloorsResponse>(
          std::mem_fn(&MruVElevatorsService::Service::GetElevatorFloors), this)));
}

MruVElevatorsService::Service::~Service() {
}

::grpc::Status MruVElevatorsService::Service::CreateElevator(::grpc::ServerContext* context, const ::mruv::elevators::CreateElevatorRequest* request, ::mruv::elevators::CreateElevatorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVElevatorsService::Service::GetElevator(::grpc::ServerContext* context, const ::mruv::elevators::GetElevatorRequest* request, ::mruv::elevators::GetElevatorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVElevatorsService::Service::UpdateElevator(::grpc::ServerContext* context, const ::mruv::elevators::UpdateElevatorRequest* request, ::mruv::elevators::UpdateElevatorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVElevatorsService::Service::DeleteElevator(::grpc::ServerContext* context, const ::mruv::elevators::DeleteElevatorRequest* request, ::mruv::elevators::DeleteElevatorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVElevatorsService::Service::GetElevatorFloors(::grpc::ServerContext* context, const ::mruv::elevators::GetElevatorFloorsRequest* request, ::mruv::elevators::GetElevatorFloorsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mruv
}  // namespace elevators

