// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: estates/estates.proto

#include "estates/estates.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace mruv {
namespace estates {
class EstateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Estate> _instance;
} _Estate_default_instance_;
class CreateEstateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateEstateRequest> _instance;
} _CreateEstateRequest_default_instance_;
class CreateEstateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateEstateResponse> _instance;
} _CreateEstateResponse_default_instance_;
class GetEstateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetEstateRequest> _instance;
} _GetEstateRequest_default_instance_;
class UpdateEstateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateEstateRequest> _instance;
} _UpdateEstateRequest_default_instance_;
class UpdateEstateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateEstateResponse> _instance;
} _UpdateEstateResponse_default_instance_;
class DeleteEstateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteEstateRequest> _instance;
} _DeleteEstateRequest_default_instance_;
class DeleteEstateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteEstateResponse> _instance;
} _DeleteEstateResponse_default_instance_;
class GetEstatesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetEstatesRequest> _instance;
} _GetEstatesRequest_default_instance_;
class GetEstatesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetEstatesResponse> _instance;
} _GetEstatesResponse_default_instance_;
class AddGateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddGateRequest> _instance;
} _AddGateRequest_default_instance_;
class AddGateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddGateResponse> _instance;
} _AddGateResponse_default_instance_;
class DeleteGateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteGateRequest> _instance;
} _DeleteGateRequest_default_instance_;
class DeleteGateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteGateResponse> _instance;
} _DeleteGateResponse_default_instance_;
class GetEstateGatesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetEstateGatesRequest> _instance;
} _GetEstateGatesRequest_default_instance_;
class GetEstateGatesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetEstateGatesResponse> _instance;
} _GetEstateGatesResponse_default_instance_;
class AddEntranceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddEntranceRequest> _instance;
} _AddEntranceRequest_default_instance_;
class AddEntranceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddEntranceResponse> _instance;
} _AddEntranceResponse_default_instance_;
class RemoveEntranceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoveEntranceRequest> _instance;
} _RemoveEntranceRequest_default_instance_;
class RemoveEntranceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoveEntranceResponse> _instance;
} _RemoveEntranceResponse_default_instance_;
class GetEstateEntrancesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetEstateEntrancesRequest> _instance;
} _GetEstateEntrancesRequest_default_instance_;
class GetEstateEntrancesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetEstateEntrancesResponse> _instance;
} _GetEstateEntrancesResponse_default_instance_;
}  // namespace estates
}  // namespace mruv
static void InitDefaultsscc_info_AddEntranceRequest_estates_2festates_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::estates::_AddEntranceRequest_default_instance_;
    new (ptr) ::mruv::estates::AddEntranceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::estates::AddEntranceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddEntranceRequest_estates_2festates_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddEntranceRequest_estates_2festates_2eproto}, {}};

static void InitDefaultsscc_info_AddEntranceResponse_estates_2festates_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::estates::_AddEntranceResponse_default_instance_;
    new (ptr) ::mruv::estates::AddEntranceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::estates::AddEntranceResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddEntranceResponse_estates_2festates_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddEntranceResponse_estates_2festates_2eproto}, {}};

static void InitDefaultsscc_info_AddGateRequest_estates_2festates_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::estates::_AddGateRequest_default_instance_;
    new (ptr) ::mruv::estates::AddGateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::estates::AddGateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddGateRequest_estates_2festates_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddGateRequest_estates_2festates_2eproto}, {}};

static void InitDefaultsscc_info_AddGateResponse_estates_2festates_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::estates::_AddGateResponse_default_instance_;
    new (ptr) ::mruv::estates::AddGateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::estates::AddGateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddGateResponse_estates_2festates_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddGateResponse_estates_2festates_2eproto}, {}};

static void InitDefaultsscc_info_CreateEstateRequest_estates_2festates_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::estates::_CreateEstateRequest_default_instance_;
    new (ptr) ::mruv::estates::CreateEstateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::estates::CreateEstateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateEstateRequest_estates_2festates_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateEstateRequest_estates_2festates_2eproto}, {}};

static void InitDefaultsscc_info_CreateEstateResponse_estates_2festates_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::estates::_CreateEstateResponse_default_instance_;
    new (ptr) ::mruv::estates::CreateEstateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::estates::CreateEstateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateEstateResponse_estates_2festates_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateEstateResponse_estates_2festates_2eproto}, {}};

static void InitDefaultsscc_info_DeleteEstateRequest_estates_2festates_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::estates::_DeleteEstateRequest_default_instance_;
    new (ptr) ::mruv::estates::DeleteEstateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::estates::DeleteEstateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteEstateRequest_estates_2festates_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteEstateRequest_estates_2festates_2eproto}, {}};

static void InitDefaultsscc_info_DeleteEstateResponse_estates_2festates_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::estates::_DeleteEstateResponse_default_instance_;
    new (ptr) ::mruv::estates::DeleteEstateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::estates::DeleteEstateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteEstateResponse_estates_2festates_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteEstateResponse_estates_2festates_2eproto}, {}};

static void InitDefaultsscc_info_DeleteGateRequest_estates_2festates_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::estates::_DeleteGateRequest_default_instance_;
    new (ptr) ::mruv::estates::DeleteGateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::estates::DeleteGateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteGateRequest_estates_2festates_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteGateRequest_estates_2festates_2eproto}, {}};

static void InitDefaultsscc_info_DeleteGateResponse_estates_2festates_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::estates::_DeleteGateResponse_default_instance_;
    new (ptr) ::mruv::estates::DeleteGateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::estates::DeleteGateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteGateResponse_estates_2festates_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteGateResponse_estates_2festates_2eproto}, {}};

static void InitDefaultsscc_info_Estate_estates_2festates_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::estates::_Estate_default_instance_;
    new (ptr) ::mruv::estates::Estate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::estates::Estate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Estate_estates_2festates_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Estate_estates_2festates_2eproto}, {}};

static void InitDefaultsscc_info_GetEstateEntrancesRequest_estates_2festates_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::estates::_GetEstateEntrancesRequest_default_instance_;
    new (ptr) ::mruv::estates::GetEstateEntrancesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::estates::GetEstateEntrancesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetEstateEntrancesRequest_estates_2festates_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetEstateEntrancesRequest_estates_2festates_2eproto}, {}};

static void InitDefaultsscc_info_GetEstateEntrancesResponse_estates_2festates_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::estates::_GetEstateEntrancesResponse_default_instance_;
    new (ptr) ::mruv::estates::GetEstateEntrancesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::estates::GetEstateEntrancesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetEstateEntrancesResponse_estates_2festates_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetEstateEntrancesResponse_estates_2festates_2eproto}, {}};

static void InitDefaultsscc_info_GetEstateGatesRequest_estates_2festates_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::estates::_GetEstateGatesRequest_default_instance_;
    new (ptr) ::mruv::estates::GetEstateGatesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::estates::GetEstateGatesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetEstateGatesRequest_estates_2festates_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetEstateGatesRequest_estates_2festates_2eproto}, {}};

static void InitDefaultsscc_info_GetEstateGatesResponse_estates_2festates_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::estates::_GetEstateGatesResponse_default_instance_;
    new (ptr) ::mruv::estates::GetEstateGatesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::estates::GetEstateGatesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetEstateGatesResponse_estates_2festates_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetEstateGatesResponse_estates_2festates_2eproto}, {}};

static void InitDefaultsscc_info_GetEstateRequest_estates_2festates_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::estates::_GetEstateRequest_default_instance_;
    new (ptr) ::mruv::estates::GetEstateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::estates::GetEstateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetEstateRequest_estates_2festates_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetEstateRequest_estates_2festates_2eproto}, {}};

static void InitDefaultsscc_info_GetEstatesRequest_estates_2festates_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::estates::_GetEstatesRequest_default_instance_;
    new (ptr) ::mruv::estates::GetEstatesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::estates::GetEstatesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetEstatesRequest_estates_2festates_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetEstatesRequest_estates_2festates_2eproto}, {}};

static void InitDefaultsscc_info_GetEstatesResponse_estates_2festates_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::estates::_GetEstatesResponse_default_instance_;
    new (ptr) ::mruv::estates::GetEstatesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::estates::GetEstatesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetEstatesResponse_estates_2festates_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetEstatesResponse_estates_2festates_2eproto}, {}};

static void InitDefaultsscc_info_RemoveEntranceRequest_estates_2festates_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::estates::_RemoveEntranceRequest_default_instance_;
    new (ptr) ::mruv::estates::RemoveEntranceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::estates::RemoveEntranceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoveEntranceRequest_estates_2festates_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoveEntranceRequest_estates_2festates_2eproto}, {}};

static void InitDefaultsscc_info_RemoveEntranceResponse_estates_2festates_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::estates::_RemoveEntranceResponse_default_instance_;
    new (ptr) ::mruv::estates::RemoveEntranceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::estates::RemoveEntranceResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoveEntranceResponse_estates_2festates_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoveEntranceResponse_estates_2festates_2eproto}, {}};

static void InitDefaultsscc_info_UpdateEstateRequest_estates_2festates_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::estates::_UpdateEstateRequest_default_instance_;
    new (ptr) ::mruv::estates::UpdateEstateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::estates::UpdateEstateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateEstateRequest_estates_2festates_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateEstateRequest_estates_2festates_2eproto}, {}};

static void InitDefaultsscc_info_UpdateEstateResponse_estates_2festates_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mruv::estates::_UpdateEstateResponse_default_instance_;
    new (ptr) ::mruv::estates::UpdateEstateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mruv::estates::UpdateEstateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateEstateResponse_estates_2festates_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateEstateResponse_estates_2festates_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_estates_2festates_2eproto[22];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_estates_2festates_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_estates_2festates_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_estates_2festates_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::estates::Estate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::estates::Estate, id_),
  PROTOBUF_FIELD_OFFSET(::mruv::estates::Estate, name_),
  PROTOBUF_FIELD_OFFSET(::mruv::estates::Estate, description_),
  PROTOBUF_FIELD_OFFSET(::mruv::estates::Estate, entrances_),
  PROTOBUF_FIELD_OFFSET(::mruv::estates::Estate, gates_),
  PROTOBUF_FIELD_OFFSET(::mruv::estates::Estate, rooms_),
  PROTOBUF_FIELD_OFFSET(::mruv::estates::Estate, product_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::estates::CreateEstateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::estates::CreateEstateRequest, name_),
  PROTOBUF_FIELD_OFFSET(::mruv::estates::CreateEstateRequest, description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::estates::CreateEstateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::estates::CreateEstateResponse, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::estates::GetEstateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::estates::GetEstateRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::estates::UpdateEstateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::estates::UpdateEstateRequest, id_),
  PROTOBUF_FIELD_OFFSET(::mruv::estates::UpdateEstateRequest, name_),
  PROTOBUF_FIELD_OFFSET(::mruv::estates::UpdateEstateRequest, description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::estates::UpdateEstateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::estates::DeleteEstateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::estates::DeleteEstateRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::estates::DeleteEstateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::estates::GetEstatesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::estates::GetEstatesRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::estates::GetEstatesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::estates::AddGateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::estates::AddGateRequest, estate_id_),
  PROTOBUF_FIELD_OFFSET(::mruv::estates::AddGateRequest, gate_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::estates::AddGateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::estates::AddGateResponse, gate_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::estates::DeleteGateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::estates::DeleteGateRequest, estate_id_),
  PROTOBUF_FIELD_OFFSET(::mruv::estates::DeleteGateRequest, gate_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::estates::DeleteGateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::estates::DeleteGateResponse, gate_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::estates::GetEstateGatesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::estates::GetEstateGatesRequest, estate_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::estates::GetEstateGatesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::estates::AddEntranceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::estates::AddEntranceRequest, estate_id_),
  PROTOBUF_FIELD_OFFSET(::mruv::estates::AddEntranceRequest, entrance_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::estates::AddEntranceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::estates::AddEntranceResponse, entrance_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::estates::RemoveEntranceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::estates::RemoveEntranceRequest, estate_id_),
  PROTOBUF_FIELD_OFFSET(::mruv::estates::RemoveEntranceRequest, entrance_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::estates::RemoveEntranceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::estates::RemoveEntranceResponse, entrance_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::estates::GetEstateEntrancesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mruv::estates::GetEstateEntrancesRequest, estate_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mruv::estates::GetEstateEntrancesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mruv::estates::Estate)},
  { 12, -1, sizeof(::mruv::estates::CreateEstateRequest)},
  { 19, -1, sizeof(::mruv::estates::CreateEstateResponse)},
  { 25, -1, sizeof(::mruv::estates::GetEstateRequest)},
  { 31, -1, sizeof(::mruv::estates::UpdateEstateRequest)},
  { 39, -1, sizeof(::mruv::estates::UpdateEstateResponse)},
  { 44, -1, sizeof(::mruv::estates::DeleteEstateRequest)},
  { 50, -1, sizeof(::mruv::estates::DeleteEstateResponse)},
  { 55, -1, sizeof(::mruv::estates::GetEstatesRequest)},
  { 61, -1, sizeof(::mruv::estates::GetEstatesResponse)},
  { 66, -1, sizeof(::mruv::estates::AddGateRequest)},
  { 73, -1, sizeof(::mruv::estates::AddGateResponse)},
  { 79, -1, sizeof(::mruv::estates::DeleteGateRequest)},
  { 86, -1, sizeof(::mruv::estates::DeleteGateResponse)},
  { 92, -1, sizeof(::mruv::estates::GetEstateGatesRequest)},
  { 98, -1, sizeof(::mruv::estates::GetEstateGatesResponse)},
  { 103, -1, sizeof(::mruv::estates::AddEntranceRequest)},
  { 110, -1, sizeof(::mruv::estates::AddEntranceResponse)},
  { 116, -1, sizeof(::mruv::estates::RemoveEntranceRequest)},
  { 123, -1, sizeof(::mruv::estates::RemoveEntranceResponse)},
  { 129, -1, sizeof(::mruv::estates::GetEstateEntrancesRequest)},
  { 135, -1, sizeof(::mruv::estates::GetEstateEntrancesResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::estates::_Estate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::estates::_CreateEstateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::estates::_CreateEstateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::estates::_GetEstateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::estates::_UpdateEstateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::estates::_UpdateEstateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::estates::_DeleteEstateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::estates::_DeleteEstateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::estates::_GetEstatesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::estates::_GetEstatesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::estates::_AddGateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::estates::_AddGateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::estates::_DeleteGateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::estates::_DeleteGateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::estates::_GetEstateGatesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::estates::_GetEstateGatesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::estates::_AddEntranceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::estates::_AddEntranceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::estates::_RemoveEntranceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::estates::_RemoveEntranceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::estates::_GetEstateEntrancesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mruv::estates::_GetEstateEntrancesResponse_default_instance_),
};

const char descriptor_table_protodef_estates_2festates_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025estates/estates.proto\022\014mruv.estates\032\034g"
  "oogle/api/annotations.proto\"|\n\006Estate\022\n\n"
  "\002id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\023\n\013description\030\003"
  " \001(\t\022\021\n\tentrances\030\004 \003(\r\022\r\n\005gates\030\005 \003(\r\022\r"
  "\n\005rooms\030\006 \003(\r\022\022\n\nproduct_id\030\007 \001(\r\"8\n\023Cre"
  "ateEstateRequest\022\014\n\004name\030\001 \001(\t\022\023\n\013descri"
  "ption\030\002 \001(\t\"\"\n\024CreateEstateResponse\022\n\n\002i"
  "d\030\001 \001(\r\"\036\n\020GetEstateRequest\022\n\n\002id\030\001 \001(\r\""
  "D\n\023UpdateEstateRequest\022\n\n\002id\030\001 \001(\r\022\014\n\004na"
  "me\030\002 \001(\t\022\023\n\013description\030\003 \001(\t\"\026\n\024UpdateE"
  "stateResponse\"!\n\023DeleteEstateRequest\022\n\n\002"
  "id\030\001 \001(\r\"\026\n\024DeleteEstateResponse\"\037\n\021GetE"
  "statesRequest\022\n\n\002id\030\001 \001(\r\"\024\n\022GetEstatesR"
  "esponse\"4\n\016AddGateRequest\022\021\n\testate_id\030\001"
  " \001(\r\022\017\n\007gate_id\030\002 \001(\r\"%\n\017AddGateResponse"
  "\022\022\n\ngate_count\030\001 \001(\r\"7\n\021DeleteGateReques"
  "t\022\021\n\testate_id\030\001 \001(\r\022\017\n\007gate_id\030\002 \001(\r\"(\n"
  "\022DeleteGateResponse\022\022\n\ngate_count\030\001 \001(\r\""
  "*\n\025GetEstateGatesRequest\022\021\n\testate_id\030\001 "
  "\001(\r\"\030\n\026GetEstateGatesResponse\"<\n\022AddEntr"
  "anceRequest\022\021\n\testate_id\030\001 \001(\r\022\023\n\013entran"
  "ce_id\030\002 \001(\r\"-\n\023AddEntranceResponse\022\026\n\016en"
  "trance_count\030\001 \001(\r\"\?\n\025RemoveEntranceRequ"
  "est\022\021\n\testate_id\030\001 \001(\r\022\023\n\013entrance_id\030\002 "
  "\001(\r\"0\n\026RemoveEntranceResponse\022\026\n\016entranc"
  "e_count\030\001 \001(\r\".\n\031GetEstateEntrancesReque"
  "st\022\021\n\testate_id\030\001 \001(\r\"\034\n\032GetEstateEntran"
  "cesResponse2\304\n\n\021MruVEstateService\022j\n\014Cre"
  "ateEstate\022!.mruv.estates.CreateEstateReq"
  "uest\032\".mruv.estates.CreateEstateResponse"
  "\"\023\202\323\344\223\002\r\"\013/v1/estates\022[\n\tGetEstate\022\036.mru"
  "v.estates.GetEstateRequest\032\024.mruv.estate"
  "s.Estate\"\030\202\323\344\223\002\022\022\020/v1/estates/{id}\022o\n\014Up"
  "dateEstate\022!.mruv.estates.UpdateEstateRe"
  "quest\032\".mruv.estates.UpdateEstateRespons"
  "e\"\030\202\323\344\223\002\0222\020/v1/estates/{id}\022o\n\014DeleteEst"
  "ate\022!.mruv.estates.DeleteEstateRequest\032\""
  ".mruv.estates.DeleteEstateResponse\"\030\202\323\344\223"
  "\002\022*\020/v1/estates/{id}\022d\n\nGetEstates\022\037.mru"
  "v.estates.GetEstatesRequest\032 .mruv.estat"
  "es.GetEstatesResponse\"\023\202\323\344\223\002\r\022\013/v1/estat"
  "es\022m\n\007AddGate\022\034.mruv.estates.AddGateRequ"
  "est\032\035.mruv.estates.AddGateResponse\"%\202\323\344\223"
  "\002\037\"\035/v1/estates/{estate_id}/gates\022\200\001\n\nDe"
  "leteGate\022\037.mruv.estates.DeleteGateReques"
  "t\032 .mruv.estates.DeleteGateResponse\"/\202\323\344"
  "\223\002)*\'/v1/estates/{estate_id}/gates/{gate"
  "_id}\022\201\001\n\016GetEstateGates\022#.mruv.estates.G"
  "etEstateGatesRequest\032$.mruv.estates.GetE"
  "stateGatesResponse\"$\202\323\344\223\002\036\022\034/v1/estate/{"
  "estate_id}/gates\022}\n\013AddEntrance\022 .mruv.e"
  "states.AddEntranceRequest\032!.mruv.estates"
  ".AddEntranceResponse\")\202\323\344\223\002#\"!/v1/estate"
  "s/{estate_id}/entrances\022\224\001\n\016RemoveEntran"
  "ce\022#.mruv.estates.RemoveEntranceRequest\032"
  "$.mruv.estates.RemoveEntranceResponse\"7\202"
  "\323\344\223\0021*//v1/estates/{estate_id}/entrances"
  "/{entrance_id}\022\221\001\n\022GetEstateEntrances\022\'."
  "mruv.estates.GetEstateEntrancesRequest\032("
  ".mruv.estates.GetEstateEntrancesResponse"
  "\"(\202\323\344\223\002\"\022 /v1/estate/{estate_id}/entranc"
  "esB\'Z%github.com/MruV-RP/mruv-pb-go/esta"
  "tesb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_estates_2festates_2eproto_deps[1] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_estates_2festates_2eproto_sccs[22] = {
  &scc_info_AddEntranceRequest_estates_2festates_2eproto.base,
  &scc_info_AddEntranceResponse_estates_2festates_2eproto.base,
  &scc_info_AddGateRequest_estates_2festates_2eproto.base,
  &scc_info_AddGateResponse_estates_2festates_2eproto.base,
  &scc_info_CreateEstateRequest_estates_2festates_2eproto.base,
  &scc_info_CreateEstateResponse_estates_2festates_2eproto.base,
  &scc_info_DeleteEstateRequest_estates_2festates_2eproto.base,
  &scc_info_DeleteEstateResponse_estates_2festates_2eproto.base,
  &scc_info_DeleteGateRequest_estates_2festates_2eproto.base,
  &scc_info_DeleteGateResponse_estates_2festates_2eproto.base,
  &scc_info_Estate_estates_2festates_2eproto.base,
  &scc_info_GetEstateEntrancesRequest_estates_2festates_2eproto.base,
  &scc_info_GetEstateEntrancesResponse_estates_2festates_2eproto.base,
  &scc_info_GetEstateGatesRequest_estates_2festates_2eproto.base,
  &scc_info_GetEstateGatesResponse_estates_2festates_2eproto.base,
  &scc_info_GetEstateRequest_estates_2festates_2eproto.base,
  &scc_info_GetEstatesRequest_estates_2festates_2eproto.base,
  &scc_info_GetEstatesResponse_estates_2festates_2eproto.base,
  &scc_info_RemoveEntranceRequest_estates_2festates_2eproto.base,
  &scc_info_RemoveEntranceResponse_estates_2festates_2eproto.base,
  &scc_info_UpdateEstateRequest_estates_2festates_2eproto.base,
  &scc_info_UpdateEstateResponse_estates_2festates_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_estates_2festates_2eproto_once;
static bool descriptor_table_estates_2festates_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_estates_2festates_2eproto = {
  &descriptor_table_estates_2festates_2eproto_initialized, descriptor_table_protodef_estates_2festates_2eproto, "estates/estates.proto", 2491,
  &descriptor_table_estates_2festates_2eproto_once, descriptor_table_estates_2festates_2eproto_sccs, descriptor_table_estates_2festates_2eproto_deps, 22, 1,
  schemas, file_default_instances, TableStruct_estates_2festates_2eproto::offsets,
  file_level_metadata_estates_2festates_2eproto, 22, file_level_enum_descriptors_estates_2festates_2eproto, file_level_service_descriptors_estates_2festates_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_estates_2festates_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_estates_2festates_2eproto), true);
namespace mruv {
namespace estates {

// ===================================================================

void Estate::InitAsDefaultInstance() {
}
class Estate::_Internal {
 public:
};

Estate::Estate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.estates.Estate)
}
Estate::Estate(const Estate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      entrances_(from.entrances_),
      gates_(from.gates_),
      rooms_(from.rooms_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&product_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(product_id_));
  // @@protoc_insertion_point(copy_constructor:mruv.estates.Estate)
}

void Estate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Estate_estates_2festates_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&product_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(product_id_));
}

Estate::~Estate() {
  // @@protoc_insertion_point(destructor:mruv.estates.Estate)
  SharedDtor();
}

void Estate::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Estate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Estate& Estate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Estate_estates_2festates_2eproto.base);
  return *internal_default_instance();
}


void Estate::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.estates.Estate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entrances_.Clear();
  gates_.Clear();
  rooms_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&product_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(product_id_));
  _internal_metadata_.Clear();
}

const char* Estate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.estates.Estate.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.estates.Estate.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 entrances = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_entrances(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_entrances(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 gates = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_gates(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_gates(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 rooms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_rooms(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_rooms(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 product_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          product_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Estate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.estates.Estate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.estates.Estate.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.estates.Estate.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // repeated uint32 entrances = 4;
  {
    int byte_size = _entrances_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_entrances(), byte_size, target);
    }
  }

  // repeated uint32 gates = 5;
  {
    int byte_size = _gates_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_gates(), byte_size, target);
    }
  }

  // repeated uint32 rooms = 6;
  {
    int byte_size = _rooms_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_rooms(), byte_size, target);
    }
  }

  // uint32 product_id = 7;
  if (this->product_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_product_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.estates.Estate)
  return target;
}

size_t Estate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.estates.Estate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 entrances = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->entrances_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _entrances_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 gates = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->gates_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _gates_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 rooms = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->rooms_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _rooms_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 product_id = 7;
  if (this->product_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_product_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Estate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.estates.Estate)
  GOOGLE_DCHECK_NE(&from, this);
  const Estate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Estate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.estates.Estate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.estates.Estate)
    MergeFrom(*source);
  }
}

void Estate::MergeFrom(const Estate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.estates.Estate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entrances_.MergeFrom(from.entrances_);
  gates_.MergeFrom(from.gates_);
  rooms_.MergeFrom(from.rooms_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.product_id() != 0) {
    _internal_set_product_id(from._internal_product_id());
  }
}

void Estate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.estates.Estate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Estate::CopyFrom(const Estate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.estates.Estate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Estate::IsInitialized() const {
  return true;
}

void Estate::InternalSwap(Estate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  entrances_.InternalSwap(&other->entrances_);
  gates_.InternalSwap(&other->gates_);
  rooms_.InternalSwap(&other->rooms_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(product_id_, other->product_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Estate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateEstateRequest::InitAsDefaultInstance() {
}
class CreateEstateRequest::_Internal {
 public:
};

CreateEstateRequest::CreateEstateRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.estates.CreateEstateRequest)
}
CreateEstateRequest::CreateEstateRequest(const CreateEstateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  // @@protoc_insertion_point(copy_constructor:mruv.estates.CreateEstateRequest)
}

void CreateEstateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateEstateRequest_estates_2festates_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateEstateRequest::~CreateEstateRequest() {
  // @@protoc_insertion_point(destructor:mruv.estates.CreateEstateRequest)
  SharedDtor();
}

void CreateEstateRequest::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateEstateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateEstateRequest& CreateEstateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateEstateRequest_estates_2festates_2eproto.base);
  return *internal_default_instance();
}


void CreateEstateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.estates.CreateEstateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CreateEstateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.estates.CreateEstateRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.estates.CreateEstateRequest.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateEstateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.estates.CreateEstateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.estates.CreateEstateRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.estates.CreateEstateRequest.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.estates.CreateEstateRequest)
  return target;
}

size_t CreateEstateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.estates.CreateEstateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateEstateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.estates.CreateEstateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateEstateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateEstateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.estates.CreateEstateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.estates.CreateEstateRequest)
    MergeFrom(*source);
  }
}

void CreateEstateRequest::MergeFrom(const CreateEstateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.estates.CreateEstateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
}

void CreateEstateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.estates.CreateEstateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateEstateRequest::CopyFrom(const CreateEstateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.estates.CreateEstateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateEstateRequest::IsInitialized() const {
  return true;
}

void CreateEstateRequest::InternalSwap(CreateEstateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateEstateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateEstateResponse::InitAsDefaultInstance() {
}
class CreateEstateResponse::_Internal {
 public:
};

CreateEstateResponse::CreateEstateResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.estates.CreateEstateResponse)
}
CreateEstateResponse::CreateEstateResponse(const CreateEstateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.estates.CreateEstateResponse)
}

void CreateEstateResponse::SharedCtor() {
  id_ = 0u;
}

CreateEstateResponse::~CreateEstateResponse() {
  // @@protoc_insertion_point(destructor:mruv.estates.CreateEstateResponse)
  SharedDtor();
}

void CreateEstateResponse::SharedDtor() {
}

void CreateEstateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateEstateResponse& CreateEstateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateEstateResponse_estates_2festates_2eproto.base);
  return *internal_default_instance();
}


void CreateEstateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.estates.CreateEstateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear();
}

const char* CreateEstateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateEstateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.estates.CreateEstateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.estates.CreateEstateResponse)
  return target;
}

size_t CreateEstateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.estates.CreateEstateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateEstateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.estates.CreateEstateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateEstateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateEstateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.estates.CreateEstateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.estates.CreateEstateResponse)
    MergeFrom(*source);
  }
}

void CreateEstateResponse::MergeFrom(const CreateEstateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.estates.CreateEstateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void CreateEstateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.estates.CreateEstateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateEstateResponse::CopyFrom(const CreateEstateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.estates.CreateEstateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateEstateResponse::IsInitialized() const {
  return true;
}

void CreateEstateResponse::InternalSwap(CreateEstateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateEstateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetEstateRequest::InitAsDefaultInstance() {
}
class GetEstateRequest::_Internal {
 public:
};

GetEstateRequest::GetEstateRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.estates.GetEstateRequest)
}
GetEstateRequest::GetEstateRequest(const GetEstateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.estates.GetEstateRequest)
}

void GetEstateRequest::SharedCtor() {
  id_ = 0u;
}

GetEstateRequest::~GetEstateRequest() {
  // @@protoc_insertion_point(destructor:mruv.estates.GetEstateRequest)
  SharedDtor();
}

void GetEstateRequest::SharedDtor() {
}

void GetEstateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetEstateRequest& GetEstateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetEstateRequest_estates_2festates_2eproto.base);
  return *internal_default_instance();
}


void GetEstateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.estates.GetEstateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear();
}

const char* GetEstateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetEstateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.estates.GetEstateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.estates.GetEstateRequest)
  return target;
}

size_t GetEstateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.estates.GetEstateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetEstateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.estates.GetEstateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetEstateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetEstateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.estates.GetEstateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.estates.GetEstateRequest)
    MergeFrom(*source);
  }
}

void GetEstateRequest::MergeFrom(const GetEstateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.estates.GetEstateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetEstateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.estates.GetEstateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEstateRequest::CopyFrom(const GetEstateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.estates.GetEstateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEstateRequest::IsInitialized() const {
  return true;
}

void GetEstateRequest::InternalSwap(GetEstateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEstateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateEstateRequest::InitAsDefaultInstance() {
}
class UpdateEstateRequest::_Internal {
 public:
};

UpdateEstateRequest::UpdateEstateRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.estates.UpdateEstateRequest)
}
UpdateEstateRequest::UpdateEstateRequest(const UpdateEstateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.estates.UpdateEstateRequest)
}

void UpdateEstateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateEstateRequest_estates_2festates_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
}

UpdateEstateRequest::~UpdateEstateRequest() {
  // @@protoc_insertion_point(destructor:mruv.estates.UpdateEstateRequest)
  SharedDtor();
}

void UpdateEstateRequest::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateEstateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateEstateRequest& UpdateEstateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateEstateRequest_estates_2festates_2eproto.base);
  return *internal_default_instance();
}


void UpdateEstateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.estates.UpdateEstateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
  _internal_metadata_.Clear();
}

const char* UpdateEstateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.estates.UpdateEstateRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mruv.estates.UpdateEstateRequest.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateEstateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.estates.UpdateEstateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.estates.UpdateEstateRequest.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mruv.estates.UpdateEstateRequest.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.estates.UpdateEstateRequest)
  return target;
}

size_t UpdateEstateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.estates.UpdateEstateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateEstateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.estates.UpdateEstateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateEstateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateEstateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.estates.UpdateEstateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.estates.UpdateEstateRequest)
    MergeFrom(*source);
  }
}

void UpdateEstateRequest::MergeFrom(const UpdateEstateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.estates.UpdateEstateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void UpdateEstateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.estates.UpdateEstateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateEstateRequest::CopyFrom(const UpdateEstateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.estates.UpdateEstateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateEstateRequest::IsInitialized() const {
  return true;
}

void UpdateEstateRequest::InternalSwap(UpdateEstateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateEstateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateEstateResponse::InitAsDefaultInstance() {
}
class UpdateEstateResponse::_Internal {
 public:
};

UpdateEstateResponse::UpdateEstateResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.estates.UpdateEstateResponse)
}
UpdateEstateResponse::UpdateEstateResponse(const UpdateEstateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.estates.UpdateEstateResponse)
}

void UpdateEstateResponse::SharedCtor() {
}

UpdateEstateResponse::~UpdateEstateResponse() {
  // @@protoc_insertion_point(destructor:mruv.estates.UpdateEstateResponse)
  SharedDtor();
}

void UpdateEstateResponse::SharedDtor() {
}

void UpdateEstateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateEstateResponse& UpdateEstateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateEstateResponse_estates_2festates_2eproto.base);
  return *internal_default_instance();
}


void UpdateEstateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.estates.UpdateEstateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* UpdateEstateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateEstateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.estates.UpdateEstateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.estates.UpdateEstateResponse)
  return target;
}

size_t UpdateEstateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.estates.UpdateEstateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateEstateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.estates.UpdateEstateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateEstateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateEstateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.estates.UpdateEstateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.estates.UpdateEstateResponse)
    MergeFrom(*source);
  }
}

void UpdateEstateResponse::MergeFrom(const UpdateEstateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.estates.UpdateEstateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UpdateEstateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.estates.UpdateEstateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateEstateResponse::CopyFrom(const UpdateEstateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.estates.UpdateEstateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateEstateResponse::IsInitialized() const {
  return true;
}

void UpdateEstateResponse::InternalSwap(UpdateEstateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateEstateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteEstateRequest::InitAsDefaultInstance() {
}
class DeleteEstateRequest::_Internal {
 public:
};

DeleteEstateRequest::DeleteEstateRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.estates.DeleteEstateRequest)
}
DeleteEstateRequest::DeleteEstateRequest(const DeleteEstateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.estates.DeleteEstateRequest)
}

void DeleteEstateRequest::SharedCtor() {
  id_ = 0u;
}

DeleteEstateRequest::~DeleteEstateRequest() {
  // @@protoc_insertion_point(destructor:mruv.estates.DeleteEstateRequest)
  SharedDtor();
}

void DeleteEstateRequest::SharedDtor() {
}

void DeleteEstateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteEstateRequest& DeleteEstateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteEstateRequest_estates_2festates_2eproto.base);
  return *internal_default_instance();
}


void DeleteEstateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.estates.DeleteEstateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear();
}

const char* DeleteEstateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteEstateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.estates.DeleteEstateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.estates.DeleteEstateRequest)
  return target;
}

size_t DeleteEstateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.estates.DeleteEstateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteEstateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.estates.DeleteEstateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteEstateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteEstateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.estates.DeleteEstateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.estates.DeleteEstateRequest)
    MergeFrom(*source);
  }
}

void DeleteEstateRequest::MergeFrom(const DeleteEstateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.estates.DeleteEstateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void DeleteEstateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.estates.DeleteEstateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteEstateRequest::CopyFrom(const DeleteEstateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.estates.DeleteEstateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteEstateRequest::IsInitialized() const {
  return true;
}

void DeleteEstateRequest::InternalSwap(DeleteEstateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteEstateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteEstateResponse::InitAsDefaultInstance() {
}
class DeleteEstateResponse::_Internal {
 public:
};

DeleteEstateResponse::DeleteEstateResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.estates.DeleteEstateResponse)
}
DeleteEstateResponse::DeleteEstateResponse(const DeleteEstateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.estates.DeleteEstateResponse)
}

void DeleteEstateResponse::SharedCtor() {
}

DeleteEstateResponse::~DeleteEstateResponse() {
  // @@protoc_insertion_point(destructor:mruv.estates.DeleteEstateResponse)
  SharedDtor();
}

void DeleteEstateResponse::SharedDtor() {
}

void DeleteEstateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteEstateResponse& DeleteEstateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteEstateResponse_estates_2festates_2eproto.base);
  return *internal_default_instance();
}


void DeleteEstateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.estates.DeleteEstateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* DeleteEstateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteEstateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.estates.DeleteEstateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.estates.DeleteEstateResponse)
  return target;
}

size_t DeleteEstateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.estates.DeleteEstateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteEstateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.estates.DeleteEstateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteEstateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteEstateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.estates.DeleteEstateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.estates.DeleteEstateResponse)
    MergeFrom(*source);
  }
}

void DeleteEstateResponse::MergeFrom(const DeleteEstateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.estates.DeleteEstateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteEstateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.estates.DeleteEstateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteEstateResponse::CopyFrom(const DeleteEstateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.estates.DeleteEstateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteEstateResponse::IsInitialized() const {
  return true;
}

void DeleteEstateResponse::InternalSwap(DeleteEstateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteEstateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetEstatesRequest::InitAsDefaultInstance() {
}
class GetEstatesRequest::_Internal {
 public:
};

GetEstatesRequest::GetEstatesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.estates.GetEstatesRequest)
}
GetEstatesRequest::GetEstatesRequest(const GetEstatesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mruv.estates.GetEstatesRequest)
}

void GetEstatesRequest::SharedCtor() {
  id_ = 0u;
}

GetEstatesRequest::~GetEstatesRequest() {
  // @@protoc_insertion_point(destructor:mruv.estates.GetEstatesRequest)
  SharedDtor();
}

void GetEstatesRequest::SharedDtor() {
}

void GetEstatesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetEstatesRequest& GetEstatesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetEstatesRequest_estates_2festates_2eproto.base);
  return *internal_default_instance();
}


void GetEstatesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.estates.GetEstatesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear();
}

const char* GetEstatesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetEstatesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.estates.GetEstatesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.estates.GetEstatesRequest)
  return target;
}

size_t GetEstatesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.estates.GetEstatesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetEstatesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.estates.GetEstatesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetEstatesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetEstatesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.estates.GetEstatesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.estates.GetEstatesRequest)
    MergeFrom(*source);
  }
}

void GetEstatesRequest::MergeFrom(const GetEstatesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.estates.GetEstatesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetEstatesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.estates.GetEstatesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEstatesRequest::CopyFrom(const GetEstatesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.estates.GetEstatesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEstatesRequest::IsInitialized() const {
  return true;
}

void GetEstatesRequest::InternalSwap(GetEstatesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEstatesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetEstatesResponse::InitAsDefaultInstance() {
}
class GetEstatesResponse::_Internal {
 public:
};

GetEstatesResponse::GetEstatesResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.estates.GetEstatesResponse)
}
GetEstatesResponse::GetEstatesResponse(const GetEstatesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.estates.GetEstatesResponse)
}

void GetEstatesResponse::SharedCtor() {
}

GetEstatesResponse::~GetEstatesResponse() {
  // @@protoc_insertion_point(destructor:mruv.estates.GetEstatesResponse)
  SharedDtor();
}

void GetEstatesResponse::SharedDtor() {
}

void GetEstatesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetEstatesResponse& GetEstatesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetEstatesResponse_estates_2festates_2eproto.base);
  return *internal_default_instance();
}


void GetEstatesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.estates.GetEstatesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* GetEstatesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetEstatesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.estates.GetEstatesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.estates.GetEstatesResponse)
  return target;
}

size_t GetEstatesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.estates.GetEstatesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetEstatesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.estates.GetEstatesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetEstatesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetEstatesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.estates.GetEstatesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.estates.GetEstatesResponse)
    MergeFrom(*source);
  }
}

void GetEstatesResponse::MergeFrom(const GetEstatesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.estates.GetEstatesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetEstatesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.estates.GetEstatesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEstatesResponse::CopyFrom(const GetEstatesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.estates.GetEstatesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEstatesResponse::IsInitialized() const {
  return true;
}

void GetEstatesResponse::InternalSwap(GetEstatesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEstatesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddGateRequest::InitAsDefaultInstance() {
}
class AddGateRequest::_Internal {
 public:
};

AddGateRequest::AddGateRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.estates.AddGateRequest)
}
AddGateRequest::AddGateRequest(const AddGateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&estate_id_, &from.estate_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&gate_id_) -
    reinterpret_cast<char*>(&estate_id_)) + sizeof(gate_id_));
  // @@protoc_insertion_point(copy_constructor:mruv.estates.AddGateRequest)
}

void AddGateRequest::SharedCtor() {
  ::memset(&estate_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gate_id_) -
      reinterpret_cast<char*>(&estate_id_)) + sizeof(gate_id_));
}

AddGateRequest::~AddGateRequest() {
  // @@protoc_insertion_point(destructor:mruv.estates.AddGateRequest)
  SharedDtor();
}

void AddGateRequest::SharedDtor() {
}

void AddGateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddGateRequest& AddGateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddGateRequest_estates_2festates_2eproto.base);
  return *internal_default_instance();
}


void AddGateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.estates.AddGateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&estate_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gate_id_) -
      reinterpret_cast<char*>(&estate_id_)) + sizeof(gate_id_));
  _internal_metadata_.Clear();
}

const char* AddGateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 estate_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          estate_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 gate_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gate_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddGateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.estates.AddGateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 estate_id = 1;
  if (this->estate_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_estate_id(), target);
  }

  // uint32 gate_id = 2;
  if (this->gate_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gate_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.estates.AddGateRequest)
  return target;
}

size_t AddGateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.estates.AddGateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 estate_id = 1;
  if (this->estate_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_estate_id());
  }

  // uint32 gate_id = 2;
  if (this->gate_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gate_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddGateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.estates.AddGateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddGateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddGateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.estates.AddGateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.estates.AddGateRequest)
    MergeFrom(*source);
  }
}

void AddGateRequest::MergeFrom(const AddGateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.estates.AddGateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.estate_id() != 0) {
    _internal_set_estate_id(from._internal_estate_id());
  }
  if (from.gate_id() != 0) {
    _internal_set_gate_id(from._internal_gate_id());
  }
}

void AddGateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.estates.AddGateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddGateRequest::CopyFrom(const AddGateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.estates.AddGateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddGateRequest::IsInitialized() const {
  return true;
}

void AddGateRequest::InternalSwap(AddGateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(estate_id_, other->estate_id_);
  swap(gate_id_, other->gate_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddGateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddGateResponse::InitAsDefaultInstance() {
}
class AddGateResponse::_Internal {
 public:
};

AddGateResponse::AddGateResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.estates.AddGateResponse)
}
AddGateResponse::AddGateResponse(const AddGateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gate_count_ = from.gate_count_;
  // @@protoc_insertion_point(copy_constructor:mruv.estates.AddGateResponse)
}

void AddGateResponse::SharedCtor() {
  gate_count_ = 0u;
}

AddGateResponse::~AddGateResponse() {
  // @@protoc_insertion_point(destructor:mruv.estates.AddGateResponse)
  SharedDtor();
}

void AddGateResponse::SharedDtor() {
}

void AddGateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddGateResponse& AddGateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddGateResponse_estates_2festates_2eproto.base);
  return *internal_default_instance();
}


void AddGateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.estates.AddGateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gate_count_ = 0u;
  _internal_metadata_.Clear();
}

const char* AddGateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 gate_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gate_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddGateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.estates.AddGateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gate_count = 1;
  if (this->gate_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gate_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.estates.AddGateResponse)
  return target;
}

size_t AddGateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.estates.AddGateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 gate_count = 1;
  if (this->gate_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gate_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddGateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.estates.AddGateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddGateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddGateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.estates.AddGateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.estates.AddGateResponse)
    MergeFrom(*source);
  }
}

void AddGateResponse::MergeFrom(const AddGateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.estates.AddGateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gate_count() != 0) {
    _internal_set_gate_count(from._internal_gate_count());
  }
}

void AddGateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.estates.AddGateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddGateResponse::CopyFrom(const AddGateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.estates.AddGateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddGateResponse::IsInitialized() const {
  return true;
}

void AddGateResponse::InternalSwap(AddGateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(gate_count_, other->gate_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddGateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteGateRequest::InitAsDefaultInstance() {
}
class DeleteGateRequest::_Internal {
 public:
};

DeleteGateRequest::DeleteGateRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.estates.DeleteGateRequest)
}
DeleteGateRequest::DeleteGateRequest(const DeleteGateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&estate_id_, &from.estate_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&gate_id_) -
    reinterpret_cast<char*>(&estate_id_)) + sizeof(gate_id_));
  // @@protoc_insertion_point(copy_constructor:mruv.estates.DeleteGateRequest)
}

void DeleteGateRequest::SharedCtor() {
  ::memset(&estate_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gate_id_) -
      reinterpret_cast<char*>(&estate_id_)) + sizeof(gate_id_));
}

DeleteGateRequest::~DeleteGateRequest() {
  // @@protoc_insertion_point(destructor:mruv.estates.DeleteGateRequest)
  SharedDtor();
}

void DeleteGateRequest::SharedDtor() {
}

void DeleteGateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteGateRequest& DeleteGateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteGateRequest_estates_2festates_2eproto.base);
  return *internal_default_instance();
}


void DeleteGateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.estates.DeleteGateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&estate_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gate_id_) -
      reinterpret_cast<char*>(&estate_id_)) + sizeof(gate_id_));
  _internal_metadata_.Clear();
}

const char* DeleteGateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 estate_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          estate_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 gate_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gate_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteGateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.estates.DeleteGateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 estate_id = 1;
  if (this->estate_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_estate_id(), target);
  }

  // uint32 gate_id = 2;
  if (this->gate_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gate_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.estates.DeleteGateRequest)
  return target;
}

size_t DeleteGateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.estates.DeleteGateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 estate_id = 1;
  if (this->estate_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_estate_id());
  }

  // uint32 gate_id = 2;
  if (this->gate_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gate_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteGateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.estates.DeleteGateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteGateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteGateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.estates.DeleteGateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.estates.DeleteGateRequest)
    MergeFrom(*source);
  }
}

void DeleteGateRequest::MergeFrom(const DeleteGateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.estates.DeleteGateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.estate_id() != 0) {
    _internal_set_estate_id(from._internal_estate_id());
  }
  if (from.gate_id() != 0) {
    _internal_set_gate_id(from._internal_gate_id());
  }
}

void DeleteGateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.estates.DeleteGateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteGateRequest::CopyFrom(const DeleteGateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.estates.DeleteGateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteGateRequest::IsInitialized() const {
  return true;
}

void DeleteGateRequest::InternalSwap(DeleteGateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(estate_id_, other->estate_id_);
  swap(gate_id_, other->gate_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteGateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteGateResponse::InitAsDefaultInstance() {
}
class DeleteGateResponse::_Internal {
 public:
};

DeleteGateResponse::DeleteGateResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.estates.DeleteGateResponse)
}
DeleteGateResponse::DeleteGateResponse(const DeleteGateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gate_count_ = from.gate_count_;
  // @@protoc_insertion_point(copy_constructor:mruv.estates.DeleteGateResponse)
}

void DeleteGateResponse::SharedCtor() {
  gate_count_ = 0u;
}

DeleteGateResponse::~DeleteGateResponse() {
  // @@protoc_insertion_point(destructor:mruv.estates.DeleteGateResponse)
  SharedDtor();
}

void DeleteGateResponse::SharedDtor() {
}

void DeleteGateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteGateResponse& DeleteGateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteGateResponse_estates_2festates_2eproto.base);
  return *internal_default_instance();
}


void DeleteGateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.estates.DeleteGateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gate_count_ = 0u;
  _internal_metadata_.Clear();
}

const char* DeleteGateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 gate_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gate_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteGateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.estates.DeleteGateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gate_count = 1;
  if (this->gate_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gate_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.estates.DeleteGateResponse)
  return target;
}

size_t DeleteGateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.estates.DeleteGateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 gate_count = 1;
  if (this->gate_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gate_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteGateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.estates.DeleteGateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteGateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteGateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.estates.DeleteGateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.estates.DeleteGateResponse)
    MergeFrom(*source);
  }
}

void DeleteGateResponse::MergeFrom(const DeleteGateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.estates.DeleteGateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gate_count() != 0) {
    _internal_set_gate_count(from._internal_gate_count());
  }
}

void DeleteGateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.estates.DeleteGateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteGateResponse::CopyFrom(const DeleteGateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.estates.DeleteGateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteGateResponse::IsInitialized() const {
  return true;
}

void DeleteGateResponse::InternalSwap(DeleteGateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(gate_count_, other->gate_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteGateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetEstateGatesRequest::InitAsDefaultInstance() {
}
class GetEstateGatesRequest::_Internal {
 public:
};

GetEstateGatesRequest::GetEstateGatesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.estates.GetEstateGatesRequest)
}
GetEstateGatesRequest::GetEstateGatesRequest(const GetEstateGatesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  estate_id_ = from.estate_id_;
  // @@protoc_insertion_point(copy_constructor:mruv.estates.GetEstateGatesRequest)
}

void GetEstateGatesRequest::SharedCtor() {
  estate_id_ = 0u;
}

GetEstateGatesRequest::~GetEstateGatesRequest() {
  // @@protoc_insertion_point(destructor:mruv.estates.GetEstateGatesRequest)
  SharedDtor();
}

void GetEstateGatesRequest::SharedDtor() {
}

void GetEstateGatesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetEstateGatesRequest& GetEstateGatesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetEstateGatesRequest_estates_2festates_2eproto.base);
  return *internal_default_instance();
}


void GetEstateGatesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.estates.GetEstateGatesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  estate_id_ = 0u;
  _internal_metadata_.Clear();
}

const char* GetEstateGatesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 estate_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          estate_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetEstateGatesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.estates.GetEstateGatesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 estate_id = 1;
  if (this->estate_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_estate_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.estates.GetEstateGatesRequest)
  return target;
}

size_t GetEstateGatesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.estates.GetEstateGatesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 estate_id = 1;
  if (this->estate_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_estate_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetEstateGatesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.estates.GetEstateGatesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetEstateGatesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetEstateGatesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.estates.GetEstateGatesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.estates.GetEstateGatesRequest)
    MergeFrom(*source);
  }
}

void GetEstateGatesRequest::MergeFrom(const GetEstateGatesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.estates.GetEstateGatesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.estate_id() != 0) {
    _internal_set_estate_id(from._internal_estate_id());
  }
}

void GetEstateGatesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.estates.GetEstateGatesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEstateGatesRequest::CopyFrom(const GetEstateGatesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.estates.GetEstateGatesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEstateGatesRequest::IsInitialized() const {
  return true;
}

void GetEstateGatesRequest::InternalSwap(GetEstateGatesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(estate_id_, other->estate_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEstateGatesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetEstateGatesResponse::InitAsDefaultInstance() {
}
class GetEstateGatesResponse::_Internal {
 public:
};

GetEstateGatesResponse::GetEstateGatesResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.estates.GetEstateGatesResponse)
}
GetEstateGatesResponse::GetEstateGatesResponse(const GetEstateGatesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.estates.GetEstateGatesResponse)
}

void GetEstateGatesResponse::SharedCtor() {
}

GetEstateGatesResponse::~GetEstateGatesResponse() {
  // @@protoc_insertion_point(destructor:mruv.estates.GetEstateGatesResponse)
  SharedDtor();
}

void GetEstateGatesResponse::SharedDtor() {
}

void GetEstateGatesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetEstateGatesResponse& GetEstateGatesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetEstateGatesResponse_estates_2festates_2eproto.base);
  return *internal_default_instance();
}


void GetEstateGatesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.estates.GetEstateGatesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* GetEstateGatesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetEstateGatesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.estates.GetEstateGatesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.estates.GetEstateGatesResponse)
  return target;
}

size_t GetEstateGatesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.estates.GetEstateGatesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetEstateGatesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.estates.GetEstateGatesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetEstateGatesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetEstateGatesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.estates.GetEstateGatesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.estates.GetEstateGatesResponse)
    MergeFrom(*source);
  }
}

void GetEstateGatesResponse::MergeFrom(const GetEstateGatesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.estates.GetEstateGatesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetEstateGatesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.estates.GetEstateGatesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEstateGatesResponse::CopyFrom(const GetEstateGatesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.estates.GetEstateGatesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEstateGatesResponse::IsInitialized() const {
  return true;
}

void GetEstateGatesResponse::InternalSwap(GetEstateGatesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEstateGatesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddEntranceRequest::InitAsDefaultInstance() {
}
class AddEntranceRequest::_Internal {
 public:
};

AddEntranceRequest::AddEntranceRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.estates.AddEntranceRequest)
}
AddEntranceRequest::AddEntranceRequest(const AddEntranceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&estate_id_, &from.estate_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&entrance_id_) -
    reinterpret_cast<char*>(&estate_id_)) + sizeof(entrance_id_));
  // @@protoc_insertion_point(copy_constructor:mruv.estates.AddEntranceRequest)
}

void AddEntranceRequest::SharedCtor() {
  ::memset(&estate_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&entrance_id_) -
      reinterpret_cast<char*>(&estate_id_)) + sizeof(entrance_id_));
}

AddEntranceRequest::~AddEntranceRequest() {
  // @@protoc_insertion_point(destructor:mruv.estates.AddEntranceRequest)
  SharedDtor();
}

void AddEntranceRequest::SharedDtor() {
}

void AddEntranceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddEntranceRequest& AddEntranceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddEntranceRequest_estates_2festates_2eproto.base);
  return *internal_default_instance();
}


void AddEntranceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.estates.AddEntranceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&estate_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&entrance_id_) -
      reinterpret_cast<char*>(&estate_id_)) + sizeof(entrance_id_));
  _internal_metadata_.Clear();
}

const char* AddEntranceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 estate_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          estate_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 entrance_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          entrance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddEntranceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.estates.AddEntranceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 estate_id = 1;
  if (this->estate_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_estate_id(), target);
  }

  // uint32 entrance_id = 2;
  if (this->entrance_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_entrance_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.estates.AddEntranceRequest)
  return target;
}

size_t AddEntranceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.estates.AddEntranceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 estate_id = 1;
  if (this->estate_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_estate_id());
  }

  // uint32 entrance_id = 2;
  if (this->entrance_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_entrance_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddEntranceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.estates.AddEntranceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddEntranceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddEntranceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.estates.AddEntranceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.estates.AddEntranceRequest)
    MergeFrom(*source);
  }
}

void AddEntranceRequest::MergeFrom(const AddEntranceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.estates.AddEntranceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.estate_id() != 0) {
    _internal_set_estate_id(from._internal_estate_id());
  }
  if (from.entrance_id() != 0) {
    _internal_set_entrance_id(from._internal_entrance_id());
  }
}

void AddEntranceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.estates.AddEntranceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddEntranceRequest::CopyFrom(const AddEntranceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.estates.AddEntranceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddEntranceRequest::IsInitialized() const {
  return true;
}

void AddEntranceRequest::InternalSwap(AddEntranceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(estate_id_, other->estate_id_);
  swap(entrance_id_, other->entrance_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddEntranceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddEntranceResponse::InitAsDefaultInstance() {
}
class AddEntranceResponse::_Internal {
 public:
};

AddEntranceResponse::AddEntranceResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.estates.AddEntranceResponse)
}
AddEntranceResponse::AddEntranceResponse(const AddEntranceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entrance_count_ = from.entrance_count_;
  // @@protoc_insertion_point(copy_constructor:mruv.estates.AddEntranceResponse)
}

void AddEntranceResponse::SharedCtor() {
  entrance_count_ = 0u;
}

AddEntranceResponse::~AddEntranceResponse() {
  // @@protoc_insertion_point(destructor:mruv.estates.AddEntranceResponse)
  SharedDtor();
}

void AddEntranceResponse::SharedDtor() {
}

void AddEntranceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddEntranceResponse& AddEntranceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddEntranceResponse_estates_2festates_2eproto.base);
  return *internal_default_instance();
}


void AddEntranceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.estates.AddEntranceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entrance_count_ = 0u;
  _internal_metadata_.Clear();
}

const char* AddEntranceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 entrance_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          entrance_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddEntranceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.estates.AddEntranceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 entrance_count = 1;
  if (this->entrance_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_entrance_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.estates.AddEntranceResponse)
  return target;
}

size_t AddEntranceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.estates.AddEntranceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 entrance_count = 1;
  if (this->entrance_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_entrance_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddEntranceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.estates.AddEntranceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddEntranceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddEntranceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.estates.AddEntranceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.estates.AddEntranceResponse)
    MergeFrom(*source);
  }
}

void AddEntranceResponse::MergeFrom(const AddEntranceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.estates.AddEntranceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.entrance_count() != 0) {
    _internal_set_entrance_count(from._internal_entrance_count());
  }
}

void AddEntranceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.estates.AddEntranceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddEntranceResponse::CopyFrom(const AddEntranceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.estates.AddEntranceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddEntranceResponse::IsInitialized() const {
  return true;
}

void AddEntranceResponse::InternalSwap(AddEntranceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(entrance_count_, other->entrance_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddEntranceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoveEntranceRequest::InitAsDefaultInstance() {
}
class RemoveEntranceRequest::_Internal {
 public:
};

RemoveEntranceRequest::RemoveEntranceRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.estates.RemoveEntranceRequest)
}
RemoveEntranceRequest::RemoveEntranceRequest(const RemoveEntranceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&estate_id_, &from.estate_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&entrance_id_) -
    reinterpret_cast<char*>(&estate_id_)) + sizeof(entrance_id_));
  // @@protoc_insertion_point(copy_constructor:mruv.estates.RemoveEntranceRequest)
}

void RemoveEntranceRequest::SharedCtor() {
  ::memset(&estate_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&entrance_id_) -
      reinterpret_cast<char*>(&estate_id_)) + sizeof(entrance_id_));
}

RemoveEntranceRequest::~RemoveEntranceRequest() {
  // @@protoc_insertion_point(destructor:mruv.estates.RemoveEntranceRequest)
  SharedDtor();
}

void RemoveEntranceRequest::SharedDtor() {
}

void RemoveEntranceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveEntranceRequest& RemoveEntranceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoveEntranceRequest_estates_2festates_2eproto.base);
  return *internal_default_instance();
}


void RemoveEntranceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.estates.RemoveEntranceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&estate_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&entrance_id_) -
      reinterpret_cast<char*>(&estate_id_)) + sizeof(entrance_id_));
  _internal_metadata_.Clear();
}

const char* RemoveEntranceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 estate_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          estate_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 entrance_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          entrance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveEntranceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.estates.RemoveEntranceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 estate_id = 1;
  if (this->estate_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_estate_id(), target);
  }

  // uint32 entrance_id = 2;
  if (this->entrance_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_entrance_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.estates.RemoveEntranceRequest)
  return target;
}

size_t RemoveEntranceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.estates.RemoveEntranceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 estate_id = 1;
  if (this->estate_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_estate_id());
  }

  // uint32 entrance_id = 2;
  if (this->entrance_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_entrance_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveEntranceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.estates.RemoveEntranceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveEntranceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveEntranceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.estates.RemoveEntranceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.estates.RemoveEntranceRequest)
    MergeFrom(*source);
  }
}

void RemoveEntranceRequest::MergeFrom(const RemoveEntranceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.estates.RemoveEntranceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.estate_id() != 0) {
    _internal_set_estate_id(from._internal_estate_id());
  }
  if (from.entrance_id() != 0) {
    _internal_set_entrance_id(from._internal_entrance_id());
  }
}

void RemoveEntranceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.estates.RemoveEntranceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveEntranceRequest::CopyFrom(const RemoveEntranceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.estates.RemoveEntranceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveEntranceRequest::IsInitialized() const {
  return true;
}

void RemoveEntranceRequest::InternalSwap(RemoveEntranceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(estate_id_, other->estate_id_);
  swap(entrance_id_, other->entrance_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveEntranceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoveEntranceResponse::InitAsDefaultInstance() {
}
class RemoveEntranceResponse::_Internal {
 public:
};

RemoveEntranceResponse::RemoveEntranceResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.estates.RemoveEntranceResponse)
}
RemoveEntranceResponse::RemoveEntranceResponse(const RemoveEntranceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entrance_count_ = from.entrance_count_;
  // @@protoc_insertion_point(copy_constructor:mruv.estates.RemoveEntranceResponse)
}

void RemoveEntranceResponse::SharedCtor() {
  entrance_count_ = 0u;
}

RemoveEntranceResponse::~RemoveEntranceResponse() {
  // @@protoc_insertion_point(destructor:mruv.estates.RemoveEntranceResponse)
  SharedDtor();
}

void RemoveEntranceResponse::SharedDtor() {
}

void RemoveEntranceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveEntranceResponse& RemoveEntranceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoveEntranceResponse_estates_2festates_2eproto.base);
  return *internal_default_instance();
}


void RemoveEntranceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.estates.RemoveEntranceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entrance_count_ = 0u;
  _internal_metadata_.Clear();
}

const char* RemoveEntranceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 entrance_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          entrance_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveEntranceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.estates.RemoveEntranceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 entrance_count = 1;
  if (this->entrance_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_entrance_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.estates.RemoveEntranceResponse)
  return target;
}

size_t RemoveEntranceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.estates.RemoveEntranceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 entrance_count = 1;
  if (this->entrance_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_entrance_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveEntranceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.estates.RemoveEntranceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveEntranceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveEntranceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.estates.RemoveEntranceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.estates.RemoveEntranceResponse)
    MergeFrom(*source);
  }
}

void RemoveEntranceResponse::MergeFrom(const RemoveEntranceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.estates.RemoveEntranceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.entrance_count() != 0) {
    _internal_set_entrance_count(from._internal_entrance_count());
  }
}

void RemoveEntranceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.estates.RemoveEntranceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveEntranceResponse::CopyFrom(const RemoveEntranceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.estates.RemoveEntranceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveEntranceResponse::IsInitialized() const {
  return true;
}

void RemoveEntranceResponse::InternalSwap(RemoveEntranceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(entrance_count_, other->entrance_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveEntranceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetEstateEntrancesRequest::InitAsDefaultInstance() {
}
class GetEstateEntrancesRequest::_Internal {
 public:
};

GetEstateEntrancesRequest::GetEstateEntrancesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.estates.GetEstateEntrancesRequest)
}
GetEstateEntrancesRequest::GetEstateEntrancesRequest(const GetEstateEntrancesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  estate_id_ = from.estate_id_;
  // @@protoc_insertion_point(copy_constructor:mruv.estates.GetEstateEntrancesRequest)
}

void GetEstateEntrancesRequest::SharedCtor() {
  estate_id_ = 0u;
}

GetEstateEntrancesRequest::~GetEstateEntrancesRequest() {
  // @@protoc_insertion_point(destructor:mruv.estates.GetEstateEntrancesRequest)
  SharedDtor();
}

void GetEstateEntrancesRequest::SharedDtor() {
}

void GetEstateEntrancesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetEstateEntrancesRequest& GetEstateEntrancesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetEstateEntrancesRequest_estates_2festates_2eproto.base);
  return *internal_default_instance();
}


void GetEstateEntrancesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.estates.GetEstateEntrancesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  estate_id_ = 0u;
  _internal_metadata_.Clear();
}

const char* GetEstateEntrancesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 estate_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          estate_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetEstateEntrancesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.estates.GetEstateEntrancesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 estate_id = 1;
  if (this->estate_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_estate_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.estates.GetEstateEntrancesRequest)
  return target;
}

size_t GetEstateEntrancesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.estates.GetEstateEntrancesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 estate_id = 1;
  if (this->estate_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_estate_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetEstateEntrancesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.estates.GetEstateEntrancesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetEstateEntrancesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetEstateEntrancesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.estates.GetEstateEntrancesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.estates.GetEstateEntrancesRequest)
    MergeFrom(*source);
  }
}

void GetEstateEntrancesRequest::MergeFrom(const GetEstateEntrancesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.estates.GetEstateEntrancesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.estate_id() != 0) {
    _internal_set_estate_id(from._internal_estate_id());
  }
}

void GetEstateEntrancesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.estates.GetEstateEntrancesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEstateEntrancesRequest::CopyFrom(const GetEstateEntrancesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.estates.GetEstateEntrancesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEstateEntrancesRequest::IsInitialized() const {
  return true;
}

void GetEstateEntrancesRequest::InternalSwap(GetEstateEntrancesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(estate_id_, other->estate_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEstateEntrancesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetEstateEntrancesResponse::InitAsDefaultInstance() {
}
class GetEstateEntrancesResponse::_Internal {
 public:
};

GetEstateEntrancesResponse::GetEstateEntrancesResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mruv.estates.GetEstateEntrancesResponse)
}
GetEstateEntrancesResponse::GetEstateEntrancesResponse(const GetEstateEntrancesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mruv.estates.GetEstateEntrancesResponse)
}

void GetEstateEntrancesResponse::SharedCtor() {
}

GetEstateEntrancesResponse::~GetEstateEntrancesResponse() {
  // @@protoc_insertion_point(destructor:mruv.estates.GetEstateEntrancesResponse)
  SharedDtor();
}

void GetEstateEntrancesResponse::SharedDtor() {
}

void GetEstateEntrancesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetEstateEntrancesResponse& GetEstateEntrancesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetEstateEntrancesResponse_estates_2festates_2eproto.base);
  return *internal_default_instance();
}


void GetEstateEntrancesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mruv.estates.GetEstateEntrancesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* GetEstateEntrancesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetEstateEntrancesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mruv.estates.GetEstateEntrancesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mruv.estates.GetEstateEntrancesResponse)
  return target;
}

size_t GetEstateEntrancesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mruv.estates.GetEstateEntrancesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetEstateEntrancesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mruv.estates.GetEstateEntrancesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetEstateEntrancesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetEstateEntrancesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mruv.estates.GetEstateEntrancesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mruv.estates.GetEstateEntrancesResponse)
    MergeFrom(*source);
  }
}

void GetEstateEntrancesResponse::MergeFrom(const GetEstateEntrancesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mruv.estates.GetEstateEntrancesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetEstateEntrancesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mruv.estates.GetEstateEntrancesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEstateEntrancesResponse::CopyFrom(const GetEstateEntrancesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mruv.estates.GetEstateEntrancesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEstateEntrancesResponse::IsInitialized() const {
  return true;
}

void GetEstateEntrancesResponse::InternalSwap(GetEstateEntrancesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEstateEntrancesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace estates
}  // namespace mruv
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mruv::estates::Estate* Arena::CreateMaybeMessage< ::mruv::estates::Estate >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::estates::Estate >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::estates::CreateEstateRequest* Arena::CreateMaybeMessage< ::mruv::estates::CreateEstateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::estates::CreateEstateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::estates::CreateEstateResponse* Arena::CreateMaybeMessage< ::mruv::estates::CreateEstateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::estates::CreateEstateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::estates::GetEstateRequest* Arena::CreateMaybeMessage< ::mruv::estates::GetEstateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::estates::GetEstateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::estates::UpdateEstateRequest* Arena::CreateMaybeMessage< ::mruv::estates::UpdateEstateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::estates::UpdateEstateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::estates::UpdateEstateResponse* Arena::CreateMaybeMessage< ::mruv::estates::UpdateEstateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::estates::UpdateEstateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::estates::DeleteEstateRequest* Arena::CreateMaybeMessage< ::mruv::estates::DeleteEstateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::estates::DeleteEstateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::estates::DeleteEstateResponse* Arena::CreateMaybeMessage< ::mruv::estates::DeleteEstateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::estates::DeleteEstateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::estates::GetEstatesRequest* Arena::CreateMaybeMessage< ::mruv::estates::GetEstatesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::estates::GetEstatesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::estates::GetEstatesResponse* Arena::CreateMaybeMessage< ::mruv::estates::GetEstatesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::estates::GetEstatesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::estates::AddGateRequest* Arena::CreateMaybeMessage< ::mruv::estates::AddGateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::estates::AddGateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::estates::AddGateResponse* Arena::CreateMaybeMessage< ::mruv::estates::AddGateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::estates::AddGateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::estates::DeleteGateRequest* Arena::CreateMaybeMessage< ::mruv::estates::DeleteGateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::estates::DeleteGateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::estates::DeleteGateResponse* Arena::CreateMaybeMessage< ::mruv::estates::DeleteGateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::estates::DeleteGateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::estates::GetEstateGatesRequest* Arena::CreateMaybeMessage< ::mruv::estates::GetEstateGatesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::estates::GetEstateGatesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::estates::GetEstateGatesResponse* Arena::CreateMaybeMessage< ::mruv::estates::GetEstateGatesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::estates::GetEstateGatesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::estates::AddEntranceRequest* Arena::CreateMaybeMessage< ::mruv::estates::AddEntranceRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::estates::AddEntranceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::estates::AddEntranceResponse* Arena::CreateMaybeMessage< ::mruv::estates::AddEntranceResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::estates::AddEntranceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::estates::RemoveEntranceRequest* Arena::CreateMaybeMessage< ::mruv::estates::RemoveEntranceRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::estates::RemoveEntranceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::estates::RemoveEntranceResponse* Arena::CreateMaybeMessage< ::mruv::estates::RemoveEntranceResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::estates::RemoveEntranceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::estates::GetEstateEntrancesRequest* Arena::CreateMaybeMessage< ::mruv::estates::GetEstateEntrancesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::estates::GetEstateEntrancesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mruv::estates::GetEstateEntrancesResponse* Arena::CreateMaybeMessage< ::mruv::estates::GetEstateEntrancesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mruv::estates::GetEstateEntrancesResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
