// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: estates/estates.proto

#include "estates/estates.pb.h"
#include "estates/estates.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace mruv {
namespace estates {

static const char* MruVEstateService_method_names[] = {
  "/mruv.estates.MruVEstateService/CreateEstate",
  "/mruv.estates.MruVEstateService/GetEstate",
  "/mruv.estates.MruVEstateService/UpdateEstate",
  "/mruv.estates.MruVEstateService/DeleteEstate",
  "/mruv.estates.MruVEstateService/GetEstates",
  "/mruv.estates.MruVEstateService/AddGate",
  "/mruv.estates.MruVEstateService/RemoveGate",
  "/mruv.estates.MruVEstateService/GetEstateGates",
  "/mruv.estates.MruVEstateService/AddEntrance",
  "/mruv.estates.MruVEstateService/RemoveEntrance",
  "/mruv.estates.MruVEstateService/GetEstateEntrances",
};

std::unique_ptr< MruVEstateService::Stub> MruVEstateService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MruVEstateService::Stub> stub(new MruVEstateService::Stub(channel));
  return stub;
}

MruVEstateService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateEstate_(MruVEstateService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEstate_(MruVEstateService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateEstate_(MruVEstateService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteEstate_(MruVEstateService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEstates_(MruVEstateService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddGate_(MruVEstateService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveGate_(MruVEstateService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEstateGates_(MruVEstateService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddEntrance_(MruVEstateService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveEntrance_(MruVEstateService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEstateEntrances_(MruVEstateService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MruVEstateService::Stub::CreateEstate(::grpc::ClientContext* context, const ::mruv::estates::CreateEstateRequest& request, ::mruv::estates::CreateEstateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateEstate_, context, request, response);
}

void MruVEstateService::Stub::experimental_async::CreateEstate(::grpc::ClientContext* context, const ::mruv::estates::CreateEstateRequest* request, ::mruv::estates::CreateEstateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateEstate_, context, request, response, std::move(f));
}

void MruVEstateService::Stub::experimental_async::CreateEstate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::estates::CreateEstateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateEstate_, context, request, response, std::move(f));
}

void MruVEstateService::Stub::experimental_async::CreateEstate(::grpc::ClientContext* context, const ::mruv::estates::CreateEstateRequest* request, ::mruv::estates::CreateEstateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateEstate_, context, request, response, reactor);
}

void MruVEstateService::Stub::experimental_async::CreateEstate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::estates::CreateEstateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateEstate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::estates::CreateEstateResponse>* MruVEstateService::Stub::AsyncCreateEstateRaw(::grpc::ClientContext* context, const ::mruv::estates::CreateEstateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::estates::CreateEstateResponse>::Create(channel_.get(), cq, rpcmethod_CreateEstate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::estates::CreateEstateResponse>* MruVEstateService::Stub::PrepareAsyncCreateEstateRaw(::grpc::ClientContext* context, const ::mruv::estates::CreateEstateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::estates::CreateEstateResponse>::Create(channel_.get(), cq, rpcmethod_CreateEstate_, context, request, false);
}

::grpc::Status MruVEstateService::Stub::GetEstate(::grpc::ClientContext* context, const ::mruv::estates::GetEstateRequest& request, ::mruv::estates::Estate* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetEstate_, context, request, response);
}

void MruVEstateService::Stub::experimental_async::GetEstate(::grpc::ClientContext* context, const ::mruv::estates::GetEstateRequest* request, ::mruv::estates::Estate* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetEstate_, context, request, response, std::move(f));
}

void MruVEstateService::Stub::experimental_async::GetEstate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::estates::Estate* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetEstate_, context, request, response, std::move(f));
}

void MruVEstateService::Stub::experimental_async::GetEstate(::grpc::ClientContext* context, const ::mruv::estates::GetEstateRequest* request, ::mruv::estates::Estate* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetEstate_, context, request, response, reactor);
}

void MruVEstateService::Stub::experimental_async::GetEstate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::estates::Estate* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetEstate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::estates::Estate>* MruVEstateService::Stub::AsyncGetEstateRaw(::grpc::ClientContext* context, const ::mruv::estates::GetEstateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::estates::Estate>::Create(channel_.get(), cq, rpcmethod_GetEstate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::estates::Estate>* MruVEstateService::Stub::PrepareAsyncGetEstateRaw(::grpc::ClientContext* context, const ::mruv::estates::GetEstateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::estates::Estate>::Create(channel_.get(), cq, rpcmethod_GetEstate_, context, request, false);
}

::grpc::Status MruVEstateService::Stub::UpdateEstate(::grpc::ClientContext* context, const ::mruv::estates::UpdateEstateRequest& request, ::mruv::estates::UpdateEstateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateEstate_, context, request, response);
}

void MruVEstateService::Stub::experimental_async::UpdateEstate(::grpc::ClientContext* context, const ::mruv::estates::UpdateEstateRequest* request, ::mruv::estates::UpdateEstateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateEstate_, context, request, response, std::move(f));
}

void MruVEstateService::Stub::experimental_async::UpdateEstate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::estates::UpdateEstateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateEstate_, context, request, response, std::move(f));
}

void MruVEstateService::Stub::experimental_async::UpdateEstate(::grpc::ClientContext* context, const ::mruv::estates::UpdateEstateRequest* request, ::mruv::estates::UpdateEstateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateEstate_, context, request, response, reactor);
}

void MruVEstateService::Stub::experimental_async::UpdateEstate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::estates::UpdateEstateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateEstate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::estates::UpdateEstateResponse>* MruVEstateService::Stub::AsyncUpdateEstateRaw(::grpc::ClientContext* context, const ::mruv::estates::UpdateEstateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::estates::UpdateEstateResponse>::Create(channel_.get(), cq, rpcmethod_UpdateEstate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::estates::UpdateEstateResponse>* MruVEstateService::Stub::PrepareAsyncUpdateEstateRaw(::grpc::ClientContext* context, const ::mruv::estates::UpdateEstateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::estates::UpdateEstateResponse>::Create(channel_.get(), cq, rpcmethod_UpdateEstate_, context, request, false);
}

::grpc::Status MruVEstateService::Stub::DeleteEstate(::grpc::ClientContext* context, const ::mruv::estates::DeleteEstateRequest& request, ::mruv::estates::DeleteEstateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteEstate_, context, request, response);
}

void MruVEstateService::Stub::experimental_async::DeleteEstate(::grpc::ClientContext* context, const ::mruv::estates::DeleteEstateRequest* request, ::mruv::estates::DeleteEstateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteEstate_, context, request, response, std::move(f));
}

void MruVEstateService::Stub::experimental_async::DeleteEstate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::estates::DeleteEstateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteEstate_, context, request, response, std::move(f));
}

void MruVEstateService::Stub::experimental_async::DeleteEstate(::grpc::ClientContext* context, const ::mruv::estates::DeleteEstateRequest* request, ::mruv::estates::DeleteEstateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteEstate_, context, request, response, reactor);
}

void MruVEstateService::Stub::experimental_async::DeleteEstate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::estates::DeleteEstateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteEstate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::estates::DeleteEstateResponse>* MruVEstateService::Stub::AsyncDeleteEstateRaw(::grpc::ClientContext* context, const ::mruv::estates::DeleteEstateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::estates::DeleteEstateResponse>::Create(channel_.get(), cq, rpcmethod_DeleteEstate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::estates::DeleteEstateResponse>* MruVEstateService::Stub::PrepareAsyncDeleteEstateRaw(::grpc::ClientContext* context, const ::mruv::estates::DeleteEstateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::estates::DeleteEstateResponse>::Create(channel_.get(), cq, rpcmethod_DeleteEstate_, context, request, false);
}

::grpc::Status MruVEstateService::Stub::GetEstates(::grpc::ClientContext* context, const ::mruv::estates::GetEstatesRequest& request, ::mruv::estates::GetEstatesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetEstates_, context, request, response);
}

void MruVEstateService::Stub::experimental_async::GetEstates(::grpc::ClientContext* context, const ::mruv::estates::GetEstatesRequest* request, ::mruv::estates::GetEstatesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetEstates_, context, request, response, std::move(f));
}

void MruVEstateService::Stub::experimental_async::GetEstates(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::estates::GetEstatesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetEstates_, context, request, response, std::move(f));
}

void MruVEstateService::Stub::experimental_async::GetEstates(::grpc::ClientContext* context, const ::mruv::estates::GetEstatesRequest* request, ::mruv::estates::GetEstatesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetEstates_, context, request, response, reactor);
}

void MruVEstateService::Stub::experimental_async::GetEstates(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::estates::GetEstatesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetEstates_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::estates::GetEstatesResponse>* MruVEstateService::Stub::AsyncGetEstatesRaw(::grpc::ClientContext* context, const ::mruv::estates::GetEstatesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::estates::GetEstatesResponse>::Create(channel_.get(), cq, rpcmethod_GetEstates_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::estates::GetEstatesResponse>* MruVEstateService::Stub::PrepareAsyncGetEstatesRaw(::grpc::ClientContext* context, const ::mruv::estates::GetEstatesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::estates::GetEstatesResponse>::Create(channel_.get(), cq, rpcmethod_GetEstates_, context, request, false);
}

::grpc::Status MruVEstateService::Stub::AddGate(::grpc::ClientContext* context, const ::mruv::estates::AddGateRequest& request, ::mruv::estates::AddGateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddGate_, context, request, response);
}

void MruVEstateService::Stub::experimental_async::AddGate(::grpc::ClientContext* context, const ::mruv::estates::AddGateRequest* request, ::mruv::estates::AddGateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddGate_, context, request, response, std::move(f));
}

void MruVEstateService::Stub::experimental_async::AddGate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::estates::AddGateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddGate_, context, request, response, std::move(f));
}

void MruVEstateService::Stub::experimental_async::AddGate(::grpc::ClientContext* context, const ::mruv::estates::AddGateRequest* request, ::mruv::estates::AddGateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddGate_, context, request, response, reactor);
}

void MruVEstateService::Stub::experimental_async::AddGate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::estates::AddGateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddGate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::estates::AddGateResponse>* MruVEstateService::Stub::AsyncAddGateRaw(::grpc::ClientContext* context, const ::mruv::estates::AddGateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::estates::AddGateResponse>::Create(channel_.get(), cq, rpcmethod_AddGate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::estates::AddGateResponse>* MruVEstateService::Stub::PrepareAsyncAddGateRaw(::grpc::ClientContext* context, const ::mruv::estates::AddGateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::estates::AddGateResponse>::Create(channel_.get(), cq, rpcmethod_AddGate_, context, request, false);
}

::grpc::Status MruVEstateService::Stub::RemoveGate(::grpc::ClientContext* context, const ::mruv::estates::RemoveGateRequest& request, ::mruv::estates::RemoveGateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemoveGate_, context, request, response);
}

void MruVEstateService::Stub::experimental_async::RemoveGate(::grpc::ClientContext* context, const ::mruv::estates::RemoveGateRequest* request, ::mruv::estates::RemoveGateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveGate_, context, request, response, std::move(f));
}

void MruVEstateService::Stub::experimental_async::RemoveGate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::estates::RemoveGateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveGate_, context, request, response, std::move(f));
}

void MruVEstateService::Stub::experimental_async::RemoveGate(::grpc::ClientContext* context, const ::mruv::estates::RemoveGateRequest* request, ::mruv::estates::RemoveGateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveGate_, context, request, response, reactor);
}

void MruVEstateService::Stub::experimental_async::RemoveGate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::estates::RemoveGateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveGate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::estates::RemoveGateResponse>* MruVEstateService::Stub::AsyncRemoveGateRaw(::grpc::ClientContext* context, const ::mruv::estates::RemoveGateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::estates::RemoveGateResponse>::Create(channel_.get(), cq, rpcmethod_RemoveGate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::estates::RemoveGateResponse>* MruVEstateService::Stub::PrepareAsyncRemoveGateRaw(::grpc::ClientContext* context, const ::mruv::estates::RemoveGateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::estates::RemoveGateResponse>::Create(channel_.get(), cq, rpcmethod_RemoveGate_, context, request, false);
}

::grpc::Status MruVEstateService::Stub::GetEstateGates(::grpc::ClientContext* context, const ::mruv::estates::GetEstateGatesRequest& request, ::mruv::estates::GetEstateGatesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetEstateGates_, context, request, response);
}

void MruVEstateService::Stub::experimental_async::GetEstateGates(::grpc::ClientContext* context, const ::mruv::estates::GetEstateGatesRequest* request, ::mruv::estates::GetEstateGatesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetEstateGates_, context, request, response, std::move(f));
}

void MruVEstateService::Stub::experimental_async::GetEstateGates(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::estates::GetEstateGatesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetEstateGates_, context, request, response, std::move(f));
}

void MruVEstateService::Stub::experimental_async::GetEstateGates(::grpc::ClientContext* context, const ::mruv::estates::GetEstateGatesRequest* request, ::mruv::estates::GetEstateGatesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetEstateGates_, context, request, response, reactor);
}

void MruVEstateService::Stub::experimental_async::GetEstateGates(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::estates::GetEstateGatesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetEstateGates_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::estates::GetEstateGatesResponse>* MruVEstateService::Stub::AsyncGetEstateGatesRaw(::grpc::ClientContext* context, const ::mruv::estates::GetEstateGatesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::estates::GetEstateGatesResponse>::Create(channel_.get(), cq, rpcmethod_GetEstateGates_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::estates::GetEstateGatesResponse>* MruVEstateService::Stub::PrepareAsyncGetEstateGatesRaw(::grpc::ClientContext* context, const ::mruv::estates::GetEstateGatesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::estates::GetEstateGatesResponse>::Create(channel_.get(), cq, rpcmethod_GetEstateGates_, context, request, false);
}

::grpc::Status MruVEstateService::Stub::AddEntrance(::grpc::ClientContext* context, const ::mruv::estates::AddEntranceRequest& request, ::mruv::estates::AddEntranceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddEntrance_, context, request, response);
}

void MruVEstateService::Stub::experimental_async::AddEntrance(::grpc::ClientContext* context, const ::mruv::estates::AddEntranceRequest* request, ::mruv::estates::AddEntranceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddEntrance_, context, request, response, std::move(f));
}

void MruVEstateService::Stub::experimental_async::AddEntrance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::estates::AddEntranceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddEntrance_, context, request, response, std::move(f));
}

void MruVEstateService::Stub::experimental_async::AddEntrance(::grpc::ClientContext* context, const ::mruv::estates::AddEntranceRequest* request, ::mruv::estates::AddEntranceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddEntrance_, context, request, response, reactor);
}

void MruVEstateService::Stub::experimental_async::AddEntrance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::estates::AddEntranceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddEntrance_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::estates::AddEntranceResponse>* MruVEstateService::Stub::AsyncAddEntranceRaw(::grpc::ClientContext* context, const ::mruv::estates::AddEntranceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::estates::AddEntranceResponse>::Create(channel_.get(), cq, rpcmethod_AddEntrance_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::estates::AddEntranceResponse>* MruVEstateService::Stub::PrepareAsyncAddEntranceRaw(::grpc::ClientContext* context, const ::mruv::estates::AddEntranceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::estates::AddEntranceResponse>::Create(channel_.get(), cq, rpcmethod_AddEntrance_, context, request, false);
}

::grpc::Status MruVEstateService::Stub::RemoveEntrance(::grpc::ClientContext* context, const ::mruv::estates::RemoveEntranceRequest& request, ::mruv::estates::RemoveEntranceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemoveEntrance_, context, request, response);
}

void MruVEstateService::Stub::experimental_async::RemoveEntrance(::grpc::ClientContext* context, const ::mruv::estates::RemoveEntranceRequest* request, ::mruv::estates::RemoveEntranceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveEntrance_, context, request, response, std::move(f));
}

void MruVEstateService::Stub::experimental_async::RemoveEntrance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::estates::RemoveEntranceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveEntrance_, context, request, response, std::move(f));
}

void MruVEstateService::Stub::experimental_async::RemoveEntrance(::grpc::ClientContext* context, const ::mruv::estates::RemoveEntranceRequest* request, ::mruv::estates::RemoveEntranceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveEntrance_, context, request, response, reactor);
}

void MruVEstateService::Stub::experimental_async::RemoveEntrance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::estates::RemoveEntranceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveEntrance_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::estates::RemoveEntranceResponse>* MruVEstateService::Stub::AsyncRemoveEntranceRaw(::grpc::ClientContext* context, const ::mruv::estates::RemoveEntranceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::estates::RemoveEntranceResponse>::Create(channel_.get(), cq, rpcmethod_RemoveEntrance_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::estates::RemoveEntranceResponse>* MruVEstateService::Stub::PrepareAsyncRemoveEntranceRaw(::grpc::ClientContext* context, const ::mruv::estates::RemoveEntranceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::estates::RemoveEntranceResponse>::Create(channel_.get(), cq, rpcmethod_RemoveEntrance_, context, request, false);
}

::grpc::Status MruVEstateService::Stub::GetEstateEntrances(::grpc::ClientContext* context, const ::mruv::estates::GetEstateEntrancesRequest& request, ::mruv::estates::GetEstateEntrancesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetEstateEntrances_, context, request, response);
}

void MruVEstateService::Stub::experimental_async::GetEstateEntrances(::grpc::ClientContext* context, const ::mruv::estates::GetEstateEntrancesRequest* request, ::mruv::estates::GetEstateEntrancesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetEstateEntrances_, context, request, response, std::move(f));
}

void MruVEstateService::Stub::experimental_async::GetEstateEntrances(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::estates::GetEstateEntrancesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetEstateEntrances_, context, request, response, std::move(f));
}

void MruVEstateService::Stub::experimental_async::GetEstateEntrances(::grpc::ClientContext* context, const ::mruv::estates::GetEstateEntrancesRequest* request, ::mruv::estates::GetEstateEntrancesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetEstateEntrances_, context, request, response, reactor);
}

void MruVEstateService::Stub::experimental_async::GetEstateEntrances(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mruv::estates::GetEstateEntrancesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetEstateEntrances_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mruv::estates::GetEstateEntrancesResponse>* MruVEstateService::Stub::AsyncGetEstateEntrancesRaw(::grpc::ClientContext* context, const ::mruv::estates::GetEstateEntrancesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::estates::GetEstateEntrancesResponse>::Create(channel_.get(), cq, rpcmethod_GetEstateEntrances_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mruv::estates::GetEstateEntrancesResponse>* MruVEstateService::Stub::PrepareAsyncGetEstateEntrancesRaw(::grpc::ClientContext* context, const ::mruv::estates::GetEstateEntrancesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mruv::estates::GetEstateEntrancesResponse>::Create(channel_.get(), cq, rpcmethod_GetEstateEntrances_, context, request, false);
}

MruVEstateService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVEstateService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVEstateService::Service, ::mruv::estates::CreateEstateRequest, ::mruv::estates::CreateEstateResponse>(
          [](MruVEstateService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mruv::estates::CreateEstateRequest* req,
             ::mruv::estates::CreateEstateResponse* resp) {
               return service->CreateEstate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVEstateService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVEstateService::Service, ::mruv::estates::GetEstateRequest, ::mruv::estates::Estate>(
          [](MruVEstateService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mruv::estates::GetEstateRequest* req,
             ::mruv::estates::Estate* resp) {
               return service->GetEstate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVEstateService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVEstateService::Service, ::mruv::estates::UpdateEstateRequest, ::mruv::estates::UpdateEstateResponse>(
          [](MruVEstateService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mruv::estates::UpdateEstateRequest* req,
             ::mruv::estates::UpdateEstateResponse* resp) {
               return service->UpdateEstate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVEstateService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVEstateService::Service, ::mruv::estates::DeleteEstateRequest, ::mruv::estates::DeleteEstateResponse>(
          [](MruVEstateService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mruv::estates::DeleteEstateRequest* req,
             ::mruv::estates::DeleteEstateResponse* resp) {
               return service->DeleteEstate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVEstateService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVEstateService::Service, ::mruv::estates::GetEstatesRequest, ::mruv::estates::GetEstatesResponse>(
          [](MruVEstateService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mruv::estates::GetEstatesRequest* req,
             ::mruv::estates::GetEstatesResponse* resp) {
               return service->GetEstates(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVEstateService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVEstateService::Service, ::mruv::estates::AddGateRequest, ::mruv::estates::AddGateResponse>(
          [](MruVEstateService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mruv::estates::AddGateRequest* req,
             ::mruv::estates::AddGateResponse* resp) {
               return service->AddGate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVEstateService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVEstateService::Service, ::mruv::estates::RemoveGateRequest, ::mruv::estates::RemoveGateResponse>(
          [](MruVEstateService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mruv::estates::RemoveGateRequest* req,
             ::mruv::estates::RemoveGateResponse* resp) {
               return service->RemoveGate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVEstateService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVEstateService::Service, ::mruv::estates::GetEstateGatesRequest, ::mruv::estates::GetEstateGatesResponse>(
          [](MruVEstateService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mruv::estates::GetEstateGatesRequest* req,
             ::mruv::estates::GetEstateGatesResponse* resp) {
               return service->GetEstateGates(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVEstateService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVEstateService::Service, ::mruv::estates::AddEntranceRequest, ::mruv::estates::AddEntranceResponse>(
          [](MruVEstateService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mruv::estates::AddEntranceRequest* req,
             ::mruv::estates::AddEntranceResponse* resp) {
               return service->AddEntrance(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVEstateService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVEstateService::Service, ::mruv::estates::RemoveEntranceRequest, ::mruv::estates::RemoveEntranceResponse>(
          [](MruVEstateService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mruv::estates::RemoveEntranceRequest* req,
             ::mruv::estates::RemoveEntranceResponse* resp) {
               return service->RemoveEntrance(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MruVEstateService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MruVEstateService::Service, ::mruv::estates::GetEstateEntrancesRequest, ::mruv::estates::GetEstateEntrancesResponse>(
          [](MruVEstateService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mruv::estates::GetEstateEntrancesRequest* req,
             ::mruv::estates::GetEstateEntrancesResponse* resp) {
               return service->GetEstateEntrances(ctx, req, resp);
             }, this)));
}

MruVEstateService::Service::~Service() {
}

::grpc::Status MruVEstateService::Service::CreateEstate(::grpc::ServerContext* context, const ::mruv::estates::CreateEstateRequest* request, ::mruv::estates::CreateEstateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVEstateService::Service::GetEstate(::grpc::ServerContext* context, const ::mruv::estates::GetEstateRequest* request, ::mruv::estates::Estate* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVEstateService::Service::UpdateEstate(::grpc::ServerContext* context, const ::mruv::estates::UpdateEstateRequest* request, ::mruv::estates::UpdateEstateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVEstateService::Service::DeleteEstate(::grpc::ServerContext* context, const ::mruv::estates::DeleteEstateRequest* request, ::mruv::estates::DeleteEstateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVEstateService::Service::GetEstates(::grpc::ServerContext* context, const ::mruv::estates::GetEstatesRequest* request, ::mruv::estates::GetEstatesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVEstateService::Service::AddGate(::grpc::ServerContext* context, const ::mruv::estates::AddGateRequest* request, ::mruv::estates::AddGateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVEstateService::Service::RemoveGate(::grpc::ServerContext* context, const ::mruv::estates::RemoveGateRequest* request, ::mruv::estates::RemoveGateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVEstateService::Service::GetEstateGates(::grpc::ServerContext* context, const ::mruv::estates::GetEstateGatesRequest* request, ::mruv::estates::GetEstateGatesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVEstateService::Service::AddEntrance(::grpc::ServerContext* context, const ::mruv::estates::AddEntranceRequest* request, ::mruv::estates::AddEntranceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVEstateService::Service::RemoveEntrance(::grpc::ServerContext* context, const ::mruv::estates::RemoveEntranceRequest* request, ::mruv::estates::RemoveEntranceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MruVEstateService::Service::GetEstateEntrances(::grpc::ServerContext* context, const ::mruv::estates::GetEstateEntrancesRequest* request, ::mruv::estates::GetEstateEntrancesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mruv
}  // namespace estates

