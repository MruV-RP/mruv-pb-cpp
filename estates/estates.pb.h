// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: estates/estates.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_estates_2festates_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_estates_2festates_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_estates_2festates_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_estates_2festates_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[22]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_estates_2festates_2eproto;
namespace mruv {
namespace estates {
class AddEntranceRequest;
class AddEntranceRequestDefaultTypeInternal;
extern AddEntranceRequestDefaultTypeInternal _AddEntranceRequest_default_instance_;
class AddEntranceResponse;
class AddEntranceResponseDefaultTypeInternal;
extern AddEntranceResponseDefaultTypeInternal _AddEntranceResponse_default_instance_;
class AddGateRequest;
class AddGateRequestDefaultTypeInternal;
extern AddGateRequestDefaultTypeInternal _AddGateRequest_default_instance_;
class AddGateResponse;
class AddGateResponseDefaultTypeInternal;
extern AddGateResponseDefaultTypeInternal _AddGateResponse_default_instance_;
class CreateEstateRequest;
class CreateEstateRequestDefaultTypeInternal;
extern CreateEstateRequestDefaultTypeInternal _CreateEstateRequest_default_instance_;
class CreateEstateResponse;
class CreateEstateResponseDefaultTypeInternal;
extern CreateEstateResponseDefaultTypeInternal _CreateEstateResponse_default_instance_;
class DeleteEstateRequest;
class DeleteEstateRequestDefaultTypeInternal;
extern DeleteEstateRequestDefaultTypeInternal _DeleteEstateRequest_default_instance_;
class DeleteEstateResponse;
class DeleteEstateResponseDefaultTypeInternal;
extern DeleteEstateResponseDefaultTypeInternal _DeleteEstateResponse_default_instance_;
class DeleteGateRequest;
class DeleteGateRequestDefaultTypeInternal;
extern DeleteGateRequestDefaultTypeInternal _DeleteGateRequest_default_instance_;
class DeleteGateResponse;
class DeleteGateResponseDefaultTypeInternal;
extern DeleteGateResponseDefaultTypeInternal _DeleteGateResponse_default_instance_;
class Estate;
class EstateDefaultTypeInternal;
extern EstateDefaultTypeInternal _Estate_default_instance_;
class GetEstateEntrancesRequest;
class GetEstateEntrancesRequestDefaultTypeInternal;
extern GetEstateEntrancesRequestDefaultTypeInternal _GetEstateEntrancesRequest_default_instance_;
class GetEstateEntrancesResponse;
class GetEstateEntrancesResponseDefaultTypeInternal;
extern GetEstateEntrancesResponseDefaultTypeInternal _GetEstateEntrancesResponse_default_instance_;
class GetEstateGatesRequest;
class GetEstateGatesRequestDefaultTypeInternal;
extern GetEstateGatesRequestDefaultTypeInternal _GetEstateGatesRequest_default_instance_;
class GetEstateGatesResponse;
class GetEstateGatesResponseDefaultTypeInternal;
extern GetEstateGatesResponseDefaultTypeInternal _GetEstateGatesResponse_default_instance_;
class GetEstateRequest;
class GetEstateRequestDefaultTypeInternal;
extern GetEstateRequestDefaultTypeInternal _GetEstateRequest_default_instance_;
class GetEstatesRequest;
class GetEstatesRequestDefaultTypeInternal;
extern GetEstatesRequestDefaultTypeInternal _GetEstatesRequest_default_instance_;
class GetEstatesResponse;
class GetEstatesResponseDefaultTypeInternal;
extern GetEstatesResponseDefaultTypeInternal _GetEstatesResponse_default_instance_;
class RemoveEntranceRequest;
class RemoveEntranceRequestDefaultTypeInternal;
extern RemoveEntranceRequestDefaultTypeInternal _RemoveEntranceRequest_default_instance_;
class RemoveEntranceResponse;
class RemoveEntranceResponseDefaultTypeInternal;
extern RemoveEntranceResponseDefaultTypeInternal _RemoveEntranceResponse_default_instance_;
class UpdateEstateRequest;
class UpdateEstateRequestDefaultTypeInternal;
extern UpdateEstateRequestDefaultTypeInternal _UpdateEstateRequest_default_instance_;
class UpdateEstateResponse;
class UpdateEstateResponseDefaultTypeInternal;
extern UpdateEstateResponseDefaultTypeInternal _UpdateEstateResponse_default_instance_;
}  // namespace estates
}  // namespace mruv
PROTOBUF_NAMESPACE_OPEN
template<> ::mruv::estates::AddEntranceRequest* Arena::CreateMaybeMessage<::mruv::estates::AddEntranceRequest>(Arena*);
template<> ::mruv::estates::AddEntranceResponse* Arena::CreateMaybeMessage<::mruv::estates::AddEntranceResponse>(Arena*);
template<> ::mruv::estates::AddGateRequest* Arena::CreateMaybeMessage<::mruv::estates::AddGateRequest>(Arena*);
template<> ::mruv::estates::AddGateResponse* Arena::CreateMaybeMessage<::mruv::estates::AddGateResponse>(Arena*);
template<> ::mruv::estates::CreateEstateRequest* Arena::CreateMaybeMessage<::mruv::estates::CreateEstateRequest>(Arena*);
template<> ::mruv::estates::CreateEstateResponse* Arena::CreateMaybeMessage<::mruv::estates::CreateEstateResponse>(Arena*);
template<> ::mruv::estates::DeleteEstateRequest* Arena::CreateMaybeMessage<::mruv::estates::DeleteEstateRequest>(Arena*);
template<> ::mruv::estates::DeleteEstateResponse* Arena::CreateMaybeMessage<::mruv::estates::DeleteEstateResponse>(Arena*);
template<> ::mruv::estates::DeleteGateRequest* Arena::CreateMaybeMessage<::mruv::estates::DeleteGateRequest>(Arena*);
template<> ::mruv::estates::DeleteGateResponse* Arena::CreateMaybeMessage<::mruv::estates::DeleteGateResponse>(Arena*);
template<> ::mruv::estates::Estate* Arena::CreateMaybeMessage<::mruv::estates::Estate>(Arena*);
template<> ::mruv::estates::GetEstateEntrancesRequest* Arena::CreateMaybeMessage<::mruv::estates::GetEstateEntrancesRequest>(Arena*);
template<> ::mruv::estates::GetEstateEntrancesResponse* Arena::CreateMaybeMessage<::mruv::estates::GetEstateEntrancesResponse>(Arena*);
template<> ::mruv::estates::GetEstateGatesRequest* Arena::CreateMaybeMessage<::mruv::estates::GetEstateGatesRequest>(Arena*);
template<> ::mruv::estates::GetEstateGatesResponse* Arena::CreateMaybeMessage<::mruv::estates::GetEstateGatesResponse>(Arena*);
template<> ::mruv::estates::GetEstateRequest* Arena::CreateMaybeMessage<::mruv::estates::GetEstateRequest>(Arena*);
template<> ::mruv::estates::GetEstatesRequest* Arena::CreateMaybeMessage<::mruv::estates::GetEstatesRequest>(Arena*);
template<> ::mruv::estates::GetEstatesResponse* Arena::CreateMaybeMessage<::mruv::estates::GetEstatesResponse>(Arena*);
template<> ::mruv::estates::RemoveEntranceRequest* Arena::CreateMaybeMessage<::mruv::estates::RemoveEntranceRequest>(Arena*);
template<> ::mruv::estates::RemoveEntranceResponse* Arena::CreateMaybeMessage<::mruv::estates::RemoveEntranceResponse>(Arena*);
template<> ::mruv::estates::UpdateEstateRequest* Arena::CreateMaybeMessage<::mruv::estates::UpdateEstateRequest>(Arena*);
template<> ::mruv::estates::UpdateEstateResponse* Arena::CreateMaybeMessage<::mruv::estates::UpdateEstateResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mruv {
namespace estates {

// ===================================================================

class Estate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.estates.Estate) */ {
 public:
  Estate();
  virtual ~Estate();

  Estate(const Estate& from);
  Estate(Estate&& from) noexcept
    : Estate() {
    *this = ::std::move(from);
  }

  inline Estate& operator=(const Estate& from) {
    CopyFrom(from);
    return *this;
  }
  inline Estate& operator=(Estate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Estate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Estate* internal_default_instance() {
    return reinterpret_cast<const Estate*>(
               &_Estate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Estate& a, Estate& b) {
    a.Swap(&b);
  }
  inline void Swap(Estate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Estate* New() const final {
    return CreateMaybeMessage<Estate>(nullptr);
  }

  Estate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Estate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Estate& from);
  void MergeFrom(const Estate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Estate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.estates.Estate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_estates_2festates_2eproto);
    return ::descriptor_table_estates_2festates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntrancesFieldNumber = 4,
    kGatesFieldNumber = 5,
    kRoomsFieldNumber = 6,
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kIdFieldNumber = 1,
    kProductIdFieldNumber = 7,
  };
  // repeated uint32 entrances = 4;
  int entrances_size() const;
  private:
  int _internal_entrances_size() const;
  public:
  void clear_entrances();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_entrances(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_entrances() const;
  void _internal_add_entrances(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_entrances();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 entrances(int index) const;
  void set_entrances(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_entrances(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      entrances() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_entrances();

  // repeated uint32 gates = 5;
  int gates_size() const;
  private:
  int _internal_gates_size() const;
  public:
  void clear_gates();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gates(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_gates() const;
  void _internal_add_gates(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_gates();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 gates(int index) const;
  void set_gates(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_gates(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      gates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_gates();

  // repeated uint32 rooms = 6;
  int rooms_size() const;
  private:
  int _internal_rooms_size() const;
  public:
  void clear_rooms();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rooms(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_rooms() const;
  void _internal_add_rooms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_rooms();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 rooms(int index) const;
  void set_rooms(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_rooms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      rooms() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_rooms();

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 product_id = 7;
  void clear_product_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 product_id() const;
  void set_product_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_product_id() const;
  void _internal_set_product_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.estates.Estate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > entrances_;
  mutable std::atomic<int> _entrances_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > gates_;
  mutable std::atomic<int> _gates_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > rooms_;
  mutable std::atomic<int> _rooms_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 product_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_estates_2festates_2eproto;
};
// -------------------------------------------------------------------

class CreateEstateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.estates.CreateEstateRequest) */ {
 public:
  CreateEstateRequest();
  virtual ~CreateEstateRequest();

  CreateEstateRequest(const CreateEstateRequest& from);
  CreateEstateRequest(CreateEstateRequest&& from) noexcept
    : CreateEstateRequest() {
    *this = ::std::move(from);
  }

  inline CreateEstateRequest& operator=(const CreateEstateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateEstateRequest& operator=(CreateEstateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateEstateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateEstateRequest* internal_default_instance() {
    return reinterpret_cast<const CreateEstateRequest*>(
               &_CreateEstateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateEstateRequest& a, CreateEstateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateEstateRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateEstateRequest* New() const final {
    return CreateMaybeMessage<CreateEstateRequest>(nullptr);
  }

  CreateEstateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateEstateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateEstateRequest& from);
  void MergeFrom(const CreateEstateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateEstateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.estates.CreateEstateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_estates_2festates_2eproto);
    return ::descriptor_table_estates_2festates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // @@protoc_insertion_point(class_scope:mruv.estates.CreateEstateRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_estates_2festates_2eproto;
};
// -------------------------------------------------------------------

class CreateEstateResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.estates.CreateEstateResponse) */ {
 public:
  CreateEstateResponse();
  virtual ~CreateEstateResponse();

  CreateEstateResponse(const CreateEstateResponse& from);
  CreateEstateResponse(CreateEstateResponse&& from) noexcept
    : CreateEstateResponse() {
    *this = ::std::move(from);
  }

  inline CreateEstateResponse& operator=(const CreateEstateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateEstateResponse& operator=(CreateEstateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateEstateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateEstateResponse* internal_default_instance() {
    return reinterpret_cast<const CreateEstateResponse*>(
               &_CreateEstateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateEstateResponse& a, CreateEstateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateEstateResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateEstateResponse* New() const final {
    return CreateMaybeMessage<CreateEstateResponse>(nullptr);
  }

  CreateEstateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateEstateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateEstateResponse& from);
  void MergeFrom(const CreateEstateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateEstateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.estates.CreateEstateResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_estates_2festates_2eproto);
    return ::descriptor_table_estates_2festates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.estates.CreateEstateResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_estates_2festates_2eproto;
};
// -------------------------------------------------------------------

class GetEstateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.estates.GetEstateRequest) */ {
 public:
  GetEstateRequest();
  virtual ~GetEstateRequest();

  GetEstateRequest(const GetEstateRequest& from);
  GetEstateRequest(GetEstateRequest&& from) noexcept
    : GetEstateRequest() {
    *this = ::std::move(from);
  }

  inline GetEstateRequest& operator=(const GetEstateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEstateRequest& operator=(GetEstateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEstateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEstateRequest* internal_default_instance() {
    return reinterpret_cast<const GetEstateRequest*>(
               &_GetEstateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetEstateRequest& a, GetEstateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEstateRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetEstateRequest* New() const final {
    return CreateMaybeMessage<GetEstateRequest>(nullptr);
  }

  GetEstateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEstateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEstateRequest& from);
  void MergeFrom(const GetEstateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEstateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.estates.GetEstateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_estates_2festates_2eproto);
    return ::descriptor_table_estates_2festates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.estates.GetEstateRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_estates_2festates_2eproto;
};
// -------------------------------------------------------------------

class UpdateEstateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.estates.UpdateEstateRequest) */ {
 public:
  UpdateEstateRequest();
  virtual ~UpdateEstateRequest();

  UpdateEstateRequest(const UpdateEstateRequest& from);
  UpdateEstateRequest(UpdateEstateRequest&& from) noexcept
    : UpdateEstateRequest() {
    *this = ::std::move(from);
  }

  inline UpdateEstateRequest& operator=(const UpdateEstateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateEstateRequest& operator=(UpdateEstateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateEstateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateEstateRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateEstateRequest*>(
               &_UpdateEstateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UpdateEstateRequest& a, UpdateEstateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateEstateRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateEstateRequest* New() const final {
    return CreateMaybeMessage<UpdateEstateRequest>(nullptr);
  }

  UpdateEstateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateEstateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateEstateRequest& from);
  void MergeFrom(const UpdateEstateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateEstateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.estates.UpdateEstateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_estates_2festates_2eproto);
    return ::descriptor_table_estates_2festates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.estates.UpdateEstateRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_estates_2festates_2eproto;
};
// -------------------------------------------------------------------

class UpdateEstateResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.estates.UpdateEstateResponse) */ {
 public:
  UpdateEstateResponse();
  virtual ~UpdateEstateResponse();

  UpdateEstateResponse(const UpdateEstateResponse& from);
  UpdateEstateResponse(UpdateEstateResponse&& from) noexcept
    : UpdateEstateResponse() {
    *this = ::std::move(from);
  }

  inline UpdateEstateResponse& operator=(const UpdateEstateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateEstateResponse& operator=(UpdateEstateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateEstateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateEstateResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateEstateResponse*>(
               &_UpdateEstateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UpdateEstateResponse& a, UpdateEstateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateEstateResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateEstateResponse* New() const final {
    return CreateMaybeMessage<UpdateEstateResponse>(nullptr);
  }

  UpdateEstateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateEstateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateEstateResponse& from);
  void MergeFrom(const UpdateEstateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateEstateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.estates.UpdateEstateResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_estates_2festates_2eproto);
    return ::descriptor_table_estates_2festates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.estates.UpdateEstateResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_estates_2festates_2eproto;
};
// -------------------------------------------------------------------

class DeleteEstateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.estates.DeleteEstateRequest) */ {
 public:
  DeleteEstateRequest();
  virtual ~DeleteEstateRequest();

  DeleteEstateRequest(const DeleteEstateRequest& from);
  DeleteEstateRequest(DeleteEstateRequest&& from) noexcept
    : DeleteEstateRequest() {
    *this = ::std::move(from);
  }

  inline DeleteEstateRequest& operator=(const DeleteEstateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteEstateRequest& operator=(DeleteEstateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteEstateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteEstateRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteEstateRequest*>(
               &_DeleteEstateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DeleteEstateRequest& a, DeleteEstateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteEstateRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteEstateRequest* New() const final {
    return CreateMaybeMessage<DeleteEstateRequest>(nullptr);
  }

  DeleteEstateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteEstateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteEstateRequest& from);
  void MergeFrom(const DeleteEstateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteEstateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.estates.DeleteEstateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_estates_2festates_2eproto);
    return ::descriptor_table_estates_2festates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.estates.DeleteEstateRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_estates_2festates_2eproto;
};
// -------------------------------------------------------------------

class DeleteEstateResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.estates.DeleteEstateResponse) */ {
 public:
  DeleteEstateResponse();
  virtual ~DeleteEstateResponse();

  DeleteEstateResponse(const DeleteEstateResponse& from);
  DeleteEstateResponse(DeleteEstateResponse&& from) noexcept
    : DeleteEstateResponse() {
    *this = ::std::move(from);
  }

  inline DeleteEstateResponse& operator=(const DeleteEstateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteEstateResponse& operator=(DeleteEstateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteEstateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteEstateResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteEstateResponse*>(
               &_DeleteEstateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeleteEstateResponse& a, DeleteEstateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteEstateResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteEstateResponse* New() const final {
    return CreateMaybeMessage<DeleteEstateResponse>(nullptr);
  }

  DeleteEstateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteEstateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteEstateResponse& from);
  void MergeFrom(const DeleteEstateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteEstateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.estates.DeleteEstateResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_estates_2festates_2eproto);
    return ::descriptor_table_estates_2festates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.estates.DeleteEstateResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_estates_2festates_2eproto;
};
// -------------------------------------------------------------------

class GetEstatesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.estates.GetEstatesRequest) */ {
 public:
  GetEstatesRequest();
  virtual ~GetEstatesRequest();

  GetEstatesRequest(const GetEstatesRequest& from);
  GetEstatesRequest(GetEstatesRequest&& from) noexcept
    : GetEstatesRequest() {
    *this = ::std::move(from);
  }

  inline GetEstatesRequest& operator=(const GetEstatesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEstatesRequest& operator=(GetEstatesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEstatesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEstatesRequest* internal_default_instance() {
    return reinterpret_cast<const GetEstatesRequest*>(
               &_GetEstatesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetEstatesRequest& a, GetEstatesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEstatesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetEstatesRequest* New() const final {
    return CreateMaybeMessage<GetEstatesRequest>(nullptr);
  }

  GetEstatesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEstatesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEstatesRequest& from);
  void MergeFrom(const GetEstatesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEstatesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.estates.GetEstatesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_estates_2festates_2eproto);
    return ::descriptor_table_estates_2festates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kLimitFieldNumber = 2,
  };
  // uint32 from = 1;
  void clear_from();
  ::PROTOBUF_NAMESPACE_ID::uint32 from() const;
  void set_from(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_from() const;
  void _internal_set_from(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 limit = 2;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.estates.GetEstatesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 from_;
  ::PROTOBUF_NAMESPACE_ID::uint32 limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_estates_2festates_2eproto;
};
// -------------------------------------------------------------------

class GetEstatesResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.estates.GetEstatesResponse) */ {
 public:
  GetEstatesResponse();
  virtual ~GetEstatesResponse();

  GetEstatesResponse(const GetEstatesResponse& from);
  GetEstatesResponse(GetEstatesResponse&& from) noexcept
    : GetEstatesResponse() {
    *this = ::std::move(from);
  }

  inline GetEstatesResponse& operator=(const GetEstatesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEstatesResponse& operator=(GetEstatesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEstatesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEstatesResponse* internal_default_instance() {
    return reinterpret_cast<const GetEstatesResponse*>(
               &_GetEstatesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetEstatesResponse& a, GetEstatesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEstatesResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetEstatesResponse* New() const final {
    return CreateMaybeMessage<GetEstatesResponse>(nullptr);
  }

  GetEstatesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEstatesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEstatesResponse& from);
  void MergeFrom(const GetEstatesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEstatesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.estates.GetEstatesResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_estates_2festates_2eproto);
    return ::descriptor_table_estates_2festates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.estates.GetEstatesResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_estates_2festates_2eproto;
};
// -------------------------------------------------------------------

class AddGateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.estates.AddGateRequest) */ {
 public:
  AddGateRequest();
  virtual ~AddGateRequest();

  AddGateRequest(const AddGateRequest& from);
  AddGateRequest(AddGateRequest&& from) noexcept
    : AddGateRequest() {
    *this = ::std::move(from);
  }

  inline AddGateRequest& operator=(const AddGateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddGateRequest& operator=(AddGateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddGateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddGateRequest* internal_default_instance() {
    return reinterpret_cast<const AddGateRequest*>(
               &_AddGateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(AddGateRequest& a, AddGateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddGateRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddGateRequest* New() const final {
    return CreateMaybeMessage<AddGateRequest>(nullptr);
  }

  AddGateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddGateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddGateRequest& from);
  void MergeFrom(const AddGateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddGateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.estates.AddGateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_estates_2festates_2eproto);
    return ::descriptor_table_estates_2festates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEstateIdFieldNumber = 1,
    kGateIdFieldNumber = 2,
  };
  // uint32 estate_id = 1;
  void clear_estate_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 estate_id() const;
  void set_estate_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_estate_id() const;
  void _internal_set_estate_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 gate_id = 2;
  void clear_gate_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 gate_id() const;
  void set_gate_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gate_id() const;
  void _internal_set_gate_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.estates.AddGateRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 estate_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gate_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_estates_2festates_2eproto;
};
// -------------------------------------------------------------------

class AddGateResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.estates.AddGateResponse) */ {
 public:
  AddGateResponse();
  virtual ~AddGateResponse();

  AddGateResponse(const AddGateResponse& from);
  AddGateResponse(AddGateResponse&& from) noexcept
    : AddGateResponse() {
    *this = ::std::move(from);
  }

  inline AddGateResponse& operator=(const AddGateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddGateResponse& operator=(AddGateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddGateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddGateResponse* internal_default_instance() {
    return reinterpret_cast<const AddGateResponse*>(
               &_AddGateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(AddGateResponse& a, AddGateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddGateResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddGateResponse* New() const final {
    return CreateMaybeMessage<AddGateResponse>(nullptr);
  }

  AddGateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddGateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddGateResponse& from);
  void MergeFrom(const AddGateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddGateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.estates.AddGateResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_estates_2festates_2eproto);
    return ::descriptor_table_estates_2festates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGateCountFieldNumber = 1,
  };
  // uint32 gate_count = 1;
  void clear_gate_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 gate_count() const;
  void set_gate_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gate_count() const;
  void _internal_set_gate_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.estates.AddGateResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gate_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_estates_2festates_2eproto;
};
// -------------------------------------------------------------------

class DeleteGateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.estates.DeleteGateRequest) */ {
 public:
  DeleteGateRequest();
  virtual ~DeleteGateRequest();

  DeleteGateRequest(const DeleteGateRequest& from);
  DeleteGateRequest(DeleteGateRequest&& from) noexcept
    : DeleteGateRequest() {
    *this = ::std::move(from);
  }

  inline DeleteGateRequest& operator=(const DeleteGateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteGateRequest& operator=(DeleteGateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteGateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteGateRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteGateRequest*>(
               &_DeleteGateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DeleteGateRequest& a, DeleteGateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteGateRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteGateRequest* New() const final {
    return CreateMaybeMessage<DeleteGateRequest>(nullptr);
  }

  DeleteGateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteGateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteGateRequest& from);
  void MergeFrom(const DeleteGateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteGateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.estates.DeleteGateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_estates_2festates_2eproto);
    return ::descriptor_table_estates_2festates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEstateIdFieldNumber = 1,
    kGateIdFieldNumber = 2,
  };
  // uint32 estate_id = 1;
  void clear_estate_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 estate_id() const;
  void set_estate_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_estate_id() const;
  void _internal_set_estate_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 gate_id = 2;
  void clear_gate_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 gate_id() const;
  void set_gate_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gate_id() const;
  void _internal_set_gate_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.estates.DeleteGateRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 estate_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gate_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_estates_2festates_2eproto;
};
// -------------------------------------------------------------------

class DeleteGateResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.estates.DeleteGateResponse) */ {
 public:
  DeleteGateResponse();
  virtual ~DeleteGateResponse();

  DeleteGateResponse(const DeleteGateResponse& from);
  DeleteGateResponse(DeleteGateResponse&& from) noexcept
    : DeleteGateResponse() {
    *this = ::std::move(from);
  }

  inline DeleteGateResponse& operator=(const DeleteGateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteGateResponse& operator=(DeleteGateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteGateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteGateResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteGateResponse*>(
               &_DeleteGateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DeleteGateResponse& a, DeleteGateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteGateResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteGateResponse* New() const final {
    return CreateMaybeMessage<DeleteGateResponse>(nullptr);
  }

  DeleteGateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteGateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteGateResponse& from);
  void MergeFrom(const DeleteGateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteGateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.estates.DeleteGateResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_estates_2festates_2eproto);
    return ::descriptor_table_estates_2festates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGateCountFieldNumber = 1,
  };
  // uint32 gate_count = 1;
  void clear_gate_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 gate_count() const;
  void set_gate_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gate_count() const;
  void _internal_set_gate_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.estates.DeleteGateResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gate_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_estates_2festates_2eproto;
};
// -------------------------------------------------------------------

class GetEstateGatesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.estates.GetEstateGatesRequest) */ {
 public:
  GetEstateGatesRequest();
  virtual ~GetEstateGatesRequest();

  GetEstateGatesRequest(const GetEstateGatesRequest& from);
  GetEstateGatesRequest(GetEstateGatesRequest&& from) noexcept
    : GetEstateGatesRequest() {
    *this = ::std::move(from);
  }

  inline GetEstateGatesRequest& operator=(const GetEstateGatesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEstateGatesRequest& operator=(GetEstateGatesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEstateGatesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEstateGatesRequest* internal_default_instance() {
    return reinterpret_cast<const GetEstateGatesRequest*>(
               &_GetEstateGatesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GetEstateGatesRequest& a, GetEstateGatesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEstateGatesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetEstateGatesRequest* New() const final {
    return CreateMaybeMessage<GetEstateGatesRequest>(nullptr);
  }

  GetEstateGatesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEstateGatesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEstateGatesRequest& from);
  void MergeFrom(const GetEstateGatesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEstateGatesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.estates.GetEstateGatesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_estates_2festates_2eproto);
    return ::descriptor_table_estates_2festates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEstateIdFieldNumber = 1,
  };
  // uint32 estate_id = 1;
  void clear_estate_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 estate_id() const;
  void set_estate_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_estate_id() const;
  void _internal_set_estate_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.estates.GetEstateGatesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 estate_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_estates_2festates_2eproto;
};
// -------------------------------------------------------------------

class GetEstateGatesResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.estates.GetEstateGatesResponse) */ {
 public:
  GetEstateGatesResponse();
  virtual ~GetEstateGatesResponse();

  GetEstateGatesResponse(const GetEstateGatesResponse& from);
  GetEstateGatesResponse(GetEstateGatesResponse&& from) noexcept
    : GetEstateGatesResponse() {
    *this = ::std::move(from);
  }

  inline GetEstateGatesResponse& operator=(const GetEstateGatesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEstateGatesResponse& operator=(GetEstateGatesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEstateGatesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEstateGatesResponse* internal_default_instance() {
    return reinterpret_cast<const GetEstateGatesResponse*>(
               &_GetEstateGatesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GetEstateGatesResponse& a, GetEstateGatesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEstateGatesResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetEstateGatesResponse* New() const final {
    return CreateMaybeMessage<GetEstateGatesResponse>(nullptr);
  }

  GetEstateGatesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEstateGatesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEstateGatesResponse& from);
  void MergeFrom(const GetEstateGatesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEstateGatesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.estates.GetEstateGatesResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_estates_2festates_2eproto);
    return ::descriptor_table_estates_2festates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEstatesFieldNumber = 1,
  };
  // repeated .mruv.estates.Estate estates = 1;
  int estates_size() const;
  private:
  int _internal_estates_size() const;
  public:
  void clear_estates();
  ::mruv::estates::Estate* mutable_estates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::estates::Estate >*
      mutable_estates();
  private:
  const ::mruv::estates::Estate& _internal_estates(int index) const;
  ::mruv::estates::Estate* _internal_add_estates();
  public:
  const ::mruv::estates::Estate& estates(int index) const;
  ::mruv::estates::Estate* add_estates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::estates::Estate >&
      estates() const;

  // @@protoc_insertion_point(class_scope:mruv.estates.GetEstateGatesResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::estates::Estate > estates_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_estates_2festates_2eproto;
};
// -------------------------------------------------------------------

class AddEntranceRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.estates.AddEntranceRequest) */ {
 public:
  AddEntranceRequest();
  virtual ~AddEntranceRequest();

  AddEntranceRequest(const AddEntranceRequest& from);
  AddEntranceRequest(AddEntranceRequest&& from) noexcept
    : AddEntranceRequest() {
    *this = ::std::move(from);
  }

  inline AddEntranceRequest& operator=(const AddEntranceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddEntranceRequest& operator=(AddEntranceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddEntranceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddEntranceRequest* internal_default_instance() {
    return reinterpret_cast<const AddEntranceRequest*>(
               &_AddEntranceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(AddEntranceRequest& a, AddEntranceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddEntranceRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddEntranceRequest* New() const final {
    return CreateMaybeMessage<AddEntranceRequest>(nullptr);
  }

  AddEntranceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddEntranceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddEntranceRequest& from);
  void MergeFrom(const AddEntranceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddEntranceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.estates.AddEntranceRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_estates_2festates_2eproto);
    return ::descriptor_table_estates_2festates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEstateIdFieldNumber = 1,
    kEntranceIdFieldNumber = 2,
  };
  // uint32 estate_id = 1;
  void clear_estate_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 estate_id() const;
  void set_estate_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_estate_id() const;
  void _internal_set_estate_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 entrance_id = 2;
  void clear_entrance_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 entrance_id() const;
  void set_entrance_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_entrance_id() const;
  void _internal_set_entrance_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.estates.AddEntranceRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 estate_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 entrance_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_estates_2festates_2eproto;
};
// -------------------------------------------------------------------

class AddEntranceResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.estates.AddEntranceResponse) */ {
 public:
  AddEntranceResponse();
  virtual ~AddEntranceResponse();

  AddEntranceResponse(const AddEntranceResponse& from);
  AddEntranceResponse(AddEntranceResponse&& from) noexcept
    : AddEntranceResponse() {
    *this = ::std::move(from);
  }

  inline AddEntranceResponse& operator=(const AddEntranceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddEntranceResponse& operator=(AddEntranceResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddEntranceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddEntranceResponse* internal_default_instance() {
    return reinterpret_cast<const AddEntranceResponse*>(
               &_AddEntranceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(AddEntranceResponse& a, AddEntranceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddEntranceResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddEntranceResponse* New() const final {
    return CreateMaybeMessage<AddEntranceResponse>(nullptr);
  }

  AddEntranceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddEntranceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddEntranceResponse& from);
  void MergeFrom(const AddEntranceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddEntranceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.estates.AddEntranceResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_estates_2festates_2eproto);
    return ::descriptor_table_estates_2festates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntranceCountFieldNumber = 1,
  };
  // uint32 entrance_count = 1;
  void clear_entrance_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 entrance_count() const;
  void set_entrance_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_entrance_count() const;
  void _internal_set_entrance_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.estates.AddEntranceResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 entrance_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_estates_2festates_2eproto;
};
// -------------------------------------------------------------------

class RemoveEntranceRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.estates.RemoveEntranceRequest) */ {
 public:
  RemoveEntranceRequest();
  virtual ~RemoveEntranceRequest();

  RemoveEntranceRequest(const RemoveEntranceRequest& from);
  RemoveEntranceRequest(RemoveEntranceRequest&& from) noexcept
    : RemoveEntranceRequest() {
    *this = ::std::move(from);
  }

  inline RemoveEntranceRequest& operator=(const RemoveEntranceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveEntranceRequest& operator=(RemoveEntranceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveEntranceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveEntranceRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveEntranceRequest*>(
               &_RemoveEntranceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(RemoveEntranceRequest& a, RemoveEntranceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveEntranceRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveEntranceRequest* New() const final {
    return CreateMaybeMessage<RemoveEntranceRequest>(nullptr);
  }

  RemoveEntranceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveEntranceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveEntranceRequest& from);
  void MergeFrom(const RemoveEntranceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveEntranceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.estates.RemoveEntranceRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_estates_2festates_2eproto);
    return ::descriptor_table_estates_2festates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEstateIdFieldNumber = 1,
    kEntranceIdFieldNumber = 2,
  };
  // uint32 estate_id = 1;
  void clear_estate_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 estate_id() const;
  void set_estate_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_estate_id() const;
  void _internal_set_estate_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 entrance_id = 2;
  void clear_entrance_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 entrance_id() const;
  void set_entrance_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_entrance_id() const;
  void _internal_set_entrance_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.estates.RemoveEntranceRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 estate_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 entrance_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_estates_2festates_2eproto;
};
// -------------------------------------------------------------------

class RemoveEntranceResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.estates.RemoveEntranceResponse) */ {
 public:
  RemoveEntranceResponse();
  virtual ~RemoveEntranceResponse();

  RemoveEntranceResponse(const RemoveEntranceResponse& from);
  RemoveEntranceResponse(RemoveEntranceResponse&& from) noexcept
    : RemoveEntranceResponse() {
    *this = ::std::move(from);
  }

  inline RemoveEntranceResponse& operator=(const RemoveEntranceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveEntranceResponse& operator=(RemoveEntranceResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveEntranceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveEntranceResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveEntranceResponse*>(
               &_RemoveEntranceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(RemoveEntranceResponse& a, RemoveEntranceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveEntranceResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveEntranceResponse* New() const final {
    return CreateMaybeMessage<RemoveEntranceResponse>(nullptr);
  }

  RemoveEntranceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveEntranceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveEntranceResponse& from);
  void MergeFrom(const RemoveEntranceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveEntranceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.estates.RemoveEntranceResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_estates_2festates_2eproto);
    return ::descriptor_table_estates_2festates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntranceCountFieldNumber = 1,
  };
  // uint32 entrance_count = 1;
  void clear_entrance_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 entrance_count() const;
  void set_entrance_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_entrance_count() const;
  void _internal_set_entrance_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.estates.RemoveEntranceResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 entrance_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_estates_2festates_2eproto;
};
// -------------------------------------------------------------------

class GetEstateEntrancesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.estates.GetEstateEntrancesRequest) */ {
 public:
  GetEstateEntrancesRequest();
  virtual ~GetEstateEntrancesRequest();

  GetEstateEntrancesRequest(const GetEstateEntrancesRequest& from);
  GetEstateEntrancesRequest(GetEstateEntrancesRequest&& from) noexcept
    : GetEstateEntrancesRequest() {
    *this = ::std::move(from);
  }

  inline GetEstateEntrancesRequest& operator=(const GetEstateEntrancesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEstateEntrancesRequest& operator=(GetEstateEntrancesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEstateEntrancesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEstateEntrancesRequest* internal_default_instance() {
    return reinterpret_cast<const GetEstateEntrancesRequest*>(
               &_GetEstateEntrancesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GetEstateEntrancesRequest& a, GetEstateEntrancesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEstateEntrancesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetEstateEntrancesRequest* New() const final {
    return CreateMaybeMessage<GetEstateEntrancesRequest>(nullptr);
  }

  GetEstateEntrancesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEstateEntrancesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEstateEntrancesRequest& from);
  void MergeFrom(const GetEstateEntrancesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEstateEntrancesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.estates.GetEstateEntrancesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_estates_2festates_2eproto);
    return ::descriptor_table_estates_2festates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEstateIdFieldNumber = 1,
  };
  // uint32 estate_id = 1;
  void clear_estate_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 estate_id() const;
  void set_estate_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_estate_id() const;
  void _internal_set_estate_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mruv.estates.GetEstateEntrancesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 estate_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_estates_2festates_2eproto;
};
// -------------------------------------------------------------------

class GetEstateEntrancesResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mruv.estates.GetEstateEntrancesResponse) */ {
 public:
  GetEstateEntrancesResponse();
  virtual ~GetEstateEntrancesResponse();

  GetEstateEntrancesResponse(const GetEstateEntrancesResponse& from);
  GetEstateEntrancesResponse(GetEstateEntrancesResponse&& from) noexcept
    : GetEstateEntrancesResponse() {
    *this = ::std::move(from);
  }

  inline GetEstateEntrancesResponse& operator=(const GetEstateEntrancesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEstateEntrancesResponse& operator=(GetEstateEntrancesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEstateEntrancesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEstateEntrancesResponse* internal_default_instance() {
    return reinterpret_cast<const GetEstateEntrancesResponse*>(
               &_GetEstateEntrancesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GetEstateEntrancesResponse& a, GetEstateEntrancesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEstateEntrancesResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetEstateEntrancesResponse* New() const final {
    return CreateMaybeMessage<GetEstateEntrancesResponse>(nullptr);
  }

  GetEstateEntrancesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEstateEntrancesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEstateEntrancesResponse& from);
  void MergeFrom(const GetEstateEntrancesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEstateEntrancesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mruv.estates.GetEstateEntrancesResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_estates_2festates_2eproto);
    return ::descriptor_table_estates_2festates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mruv.estates.GetEstateEntrancesResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_estates_2festates_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Estate

// uint32 id = 1;
inline void Estate::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Estate::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Estate::id() const {
  // @@protoc_insertion_point(field_get:mruv.estates.Estate.id)
  return _internal_id();
}
inline void Estate::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Estate::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.estates.Estate.id)
}

// string name = 2;
inline void Estate::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Estate::name() const {
  // @@protoc_insertion_point(field_get:mruv.estates.Estate.name)
  return _internal_name();
}
inline void Estate::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mruv.estates.Estate.name)
}
inline std::string* Estate::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mruv.estates.Estate.name)
  return _internal_mutable_name();
}
inline const std::string& Estate::_internal_name() const {
  return name_.GetNoArena();
}
inline void Estate::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Estate::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.estates.Estate.name)
}
inline void Estate::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.estates.Estate.name)
}
inline void Estate::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.estates.Estate.name)
}
inline std::string* Estate::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Estate::release_name() {
  // @@protoc_insertion_point(field_release:mruv.estates.Estate.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Estate::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mruv.estates.Estate.name)
}

// string description = 3;
inline void Estate::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Estate::description() const {
  // @@protoc_insertion_point(field_get:mruv.estates.Estate.description)
  return _internal_description();
}
inline void Estate::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:mruv.estates.Estate.description)
}
inline std::string* Estate::mutable_description() {
  // @@protoc_insertion_point(field_mutable:mruv.estates.Estate.description)
  return _internal_mutable_description();
}
inline const std::string& Estate::_internal_description() const {
  return description_.GetNoArena();
}
inline void Estate::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Estate::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.estates.Estate.description)
}
inline void Estate::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.estates.Estate.description)
}
inline void Estate::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.estates.Estate.description)
}
inline std::string* Estate::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Estate::release_description() {
  // @@protoc_insertion_point(field_release:mruv.estates.Estate.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Estate::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:mruv.estates.Estate.description)
}

// repeated uint32 entrances = 4;
inline int Estate::_internal_entrances_size() const {
  return entrances_.size();
}
inline int Estate::entrances_size() const {
  return _internal_entrances_size();
}
inline void Estate::clear_entrances() {
  entrances_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Estate::_internal_entrances(int index) const {
  return entrances_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Estate::entrances(int index) const {
  // @@protoc_insertion_point(field_get:mruv.estates.Estate.entrances)
  return _internal_entrances(index);
}
inline void Estate::set_entrances(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  entrances_.Set(index, value);
  // @@protoc_insertion_point(field_set:mruv.estates.Estate.entrances)
}
inline void Estate::_internal_add_entrances(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  entrances_.Add(value);
}
inline void Estate::add_entrances(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_entrances(value);
  // @@protoc_insertion_point(field_add:mruv.estates.Estate.entrances)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Estate::_internal_entrances() const {
  return entrances_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Estate::entrances() const {
  // @@protoc_insertion_point(field_list:mruv.estates.Estate.entrances)
  return _internal_entrances();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Estate::_internal_mutable_entrances() {
  return &entrances_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Estate::mutable_entrances() {
  // @@protoc_insertion_point(field_mutable_list:mruv.estates.Estate.entrances)
  return _internal_mutable_entrances();
}

// repeated uint32 gates = 5;
inline int Estate::_internal_gates_size() const {
  return gates_.size();
}
inline int Estate::gates_size() const {
  return _internal_gates_size();
}
inline void Estate::clear_gates() {
  gates_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Estate::_internal_gates(int index) const {
  return gates_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Estate::gates(int index) const {
  // @@protoc_insertion_point(field_get:mruv.estates.Estate.gates)
  return _internal_gates(index);
}
inline void Estate::set_gates(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  gates_.Set(index, value);
  // @@protoc_insertion_point(field_set:mruv.estates.Estate.gates)
}
inline void Estate::_internal_add_gates(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  gates_.Add(value);
}
inline void Estate::add_gates(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_gates(value);
  // @@protoc_insertion_point(field_add:mruv.estates.Estate.gates)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Estate::_internal_gates() const {
  return gates_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Estate::gates() const {
  // @@protoc_insertion_point(field_list:mruv.estates.Estate.gates)
  return _internal_gates();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Estate::_internal_mutable_gates() {
  return &gates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Estate::mutable_gates() {
  // @@protoc_insertion_point(field_mutable_list:mruv.estates.Estate.gates)
  return _internal_mutable_gates();
}

// repeated uint32 rooms = 6;
inline int Estate::_internal_rooms_size() const {
  return rooms_.size();
}
inline int Estate::rooms_size() const {
  return _internal_rooms_size();
}
inline void Estate::clear_rooms() {
  rooms_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Estate::_internal_rooms(int index) const {
  return rooms_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Estate::rooms(int index) const {
  // @@protoc_insertion_point(field_get:mruv.estates.Estate.rooms)
  return _internal_rooms(index);
}
inline void Estate::set_rooms(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  rooms_.Set(index, value);
  // @@protoc_insertion_point(field_set:mruv.estates.Estate.rooms)
}
inline void Estate::_internal_add_rooms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  rooms_.Add(value);
}
inline void Estate::add_rooms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_rooms(value);
  // @@protoc_insertion_point(field_add:mruv.estates.Estate.rooms)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Estate::_internal_rooms() const {
  return rooms_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Estate::rooms() const {
  // @@protoc_insertion_point(field_list:mruv.estates.Estate.rooms)
  return _internal_rooms();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Estate::_internal_mutable_rooms() {
  return &rooms_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Estate::mutable_rooms() {
  // @@protoc_insertion_point(field_mutable_list:mruv.estates.Estate.rooms)
  return _internal_mutable_rooms();
}

// uint32 product_id = 7;
inline void Estate::clear_product_id() {
  product_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Estate::_internal_product_id() const {
  return product_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Estate::product_id() const {
  // @@protoc_insertion_point(field_get:mruv.estates.Estate.product_id)
  return _internal_product_id();
}
inline void Estate::_internal_set_product_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  product_id_ = value;
}
inline void Estate::set_product_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_product_id(value);
  // @@protoc_insertion_point(field_set:mruv.estates.Estate.product_id)
}

// -------------------------------------------------------------------

// CreateEstateRequest

// string name = 1;
inline void CreateEstateRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateEstateRequest::name() const {
  // @@protoc_insertion_point(field_get:mruv.estates.CreateEstateRequest.name)
  return _internal_name();
}
inline void CreateEstateRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mruv.estates.CreateEstateRequest.name)
}
inline std::string* CreateEstateRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mruv.estates.CreateEstateRequest.name)
  return _internal_mutable_name();
}
inline const std::string& CreateEstateRequest::_internal_name() const {
  return name_.GetNoArena();
}
inline void CreateEstateRequest::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateEstateRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.estates.CreateEstateRequest.name)
}
inline void CreateEstateRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.estates.CreateEstateRequest.name)
}
inline void CreateEstateRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.estates.CreateEstateRequest.name)
}
inline std::string* CreateEstateRequest::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateEstateRequest::release_name() {
  // @@protoc_insertion_point(field_release:mruv.estates.CreateEstateRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateEstateRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mruv.estates.CreateEstateRequest.name)
}

// string description = 2;
inline void CreateEstateRequest::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateEstateRequest::description() const {
  // @@protoc_insertion_point(field_get:mruv.estates.CreateEstateRequest.description)
  return _internal_description();
}
inline void CreateEstateRequest::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:mruv.estates.CreateEstateRequest.description)
}
inline std::string* CreateEstateRequest::mutable_description() {
  // @@protoc_insertion_point(field_mutable:mruv.estates.CreateEstateRequest.description)
  return _internal_mutable_description();
}
inline const std::string& CreateEstateRequest::_internal_description() const {
  return description_.GetNoArena();
}
inline void CreateEstateRequest::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateEstateRequest::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.estates.CreateEstateRequest.description)
}
inline void CreateEstateRequest::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.estates.CreateEstateRequest.description)
}
inline void CreateEstateRequest::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.estates.CreateEstateRequest.description)
}
inline std::string* CreateEstateRequest::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateEstateRequest::release_description() {
  // @@protoc_insertion_point(field_release:mruv.estates.CreateEstateRequest.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateEstateRequest::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:mruv.estates.CreateEstateRequest.description)
}

// -------------------------------------------------------------------

// CreateEstateResponse

// uint32 id = 1;
inline void CreateEstateResponse::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateEstateResponse::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateEstateResponse::id() const {
  // @@protoc_insertion_point(field_get:mruv.estates.CreateEstateResponse.id)
  return _internal_id();
}
inline void CreateEstateResponse::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void CreateEstateResponse::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.estates.CreateEstateResponse.id)
}

// -------------------------------------------------------------------

// GetEstateRequest

// uint32 id = 1;
inline void GetEstateRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetEstateRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetEstateRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.estates.GetEstateRequest.id)
  return _internal_id();
}
inline void GetEstateRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void GetEstateRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.estates.GetEstateRequest.id)
}

// -------------------------------------------------------------------

// UpdateEstateRequest

// uint32 id = 1;
inline void UpdateEstateRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateEstateRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateEstateRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.estates.UpdateEstateRequest.id)
  return _internal_id();
}
inline void UpdateEstateRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void UpdateEstateRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.estates.UpdateEstateRequest.id)
}

// string name = 2;
inline void UpdateEstateRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpdateEstateRequest::name() const {
  // @@protoc_insertion_point(field_get:mruv.estates.UpdateEstateRequest.name)
  return _internal_name();
}
inline void UpdateEstateRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mruv.estates.UpdateEstateRequest.name)
}
inline std::string* UpdateEstateRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mruv.estates.UpdateEstateRequest.name)
  return _internal_mutable_name();
}
inline const std::string& UpdateEstateRequest::_internal_name() const {
  return name_.GetNoArena();
}
inline void UpdateEstateRequest::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpdateEstateRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.estates.UpdateEstateRequest.name)
}
inline void UpdateEstateRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.estates.UpdateEstateRequest.name)
}
inline void UpdateEstateRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.estates.UpdateEstateRequest.name)
}
inline std::string* UpdateEstateRequest::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateEstateRequest::release_name() {
  // @@protoc_insertion_point(field_release:mruv.estates.UpdateEstateRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateEstateRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mruv.estates.UpdateEstateRequest.name)
}

// string description = 3;
inline void UpdateEstateRequest::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpdateEstateRequest::description() const {
  // @@protoc_insertion_point(field_get:mruv.estates.UpdateEstateRequest.description)
  return _internal_description();
}
inline void UpdateEstateRequest::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:mruv.estates.UpdateEstateRequest.description)
}
inline std::string* UpdateEstateRequest::mutable_description() {
  // @@protoc_insertion_point(field_mutable:mruv.estates.UpdateEstateRequest.description)
  return _internal_mutable_description();
}
inline const std::string& UpdateEstateRequest::_internal_description() const {
  return description_.GetNoArena();
}
inline void UpdateEstateRequest::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpdateEstateRequest::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mruv.estates.UpdateEstateRequest.description)
}
inline void UpdateEstateRequest::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mruv.estates.UpdateEstateRequest.description)
}
inline void UpdateEstateRequest::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mruv.estates.UpdateEstateRequest.description)
}
inline std::string* UpdateEstateRequest::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateEstateRequest::release_description() {
  // @@protoc_insertion_point(field_release:mruv.estates.UpdateEstateRequest.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateEstateRequest::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:mruv.estates.UpdateEstateRequest.description)
}

// -------------------------------------------------------------------

// UpdateEstateResponse

// -------------------------------------------------------------------

// DeleteEstateRequest

// uint32 id = 1;
inline void DeleteEstateRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteEstateRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteEstateRequest::id() const {
  // @@protoc_insertion_point(field_get:mruv.estates.DeleteEstateRequest.id)
  return _internal_id();
}
inline void DeleteEstateRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void DeleteEstateRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mruv.estates.DeleteEstateRequest.id)
}

// -------------------------------------------------------------------

// DeleteEstateResponse

// -------------------------------------------------------------------

// GetEstatesRequest

// uint32 from = 1;
inline void GetEstatesRequest::clear_from() {
  from_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetEstatesRequest::_internal_from() const {
  return from_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetEstatesRequest::from() const {
  // @@protoc_insertion_point(field_get:mruv.estates.GetEstatesRequest.from)
  return _internal_from();
}
inline void GetEstatesRequest::_internal_set_from(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  from_ = value;
}
inline void GetEstatesRequest::set_from(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:mruv.estates.GetEstatesRequest.from)
}

// uint32 limit = 2;
inline void GetEstatesRequest::clear_limit() {
  limit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetEstatesRequest::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetEstatesRequest::limit() const {
  // @@protoc_insertion_point(field_get:mruv.estates.GetEstatesRequest.limit)
  return _internal_limit();
}
inline void GetEstatesRequest::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  limit_ = value;
}
inline void GetEstatesRequest::set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:mruv.estates.GetEstatesRequest.limit)
}

// -------------------------------------------------------------------

// GetEstatesResponse

// -------------------------------------------------------------------

// AddGateRequest

// uint32 estate_id = 1;
inline void AddGateRequest::clear_estate_id() {
  estate_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddGateRequest::_internal_estate_id() const {
  return estate_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddGateRequest::estate_id() const {
  // @@protoc_insertion_point(field_get:mruv.estates.AddGateRequest.estate_id)
  return _internal_estate_id();
}
inline void AddGateRequest::_internal_set_estate_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  estate_id_ = value;
}
inline void AddGateRequest::set_estate_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_estate_id(value);
  // @@protoc_insertion_point(field_set:mruv.estates.AddGateRequest.estate_id)
}

// uint32 gate_id = 2;
inline void AddGateRequest::clear_gate_id() {
  gate_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddGateRequest::_internal_gate_id() const {
  return gate_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddGateRequest::gate_id() const {
  // @@protoc_insertion_point(field_get:mruv.estates.AddGateRequest.gate_id)
  return _internal_gate_id();
}
inline void AddGateRequest::_internal_set_gate_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  gate_id_ = value;
}
inline void AddGateRequest::set_gate_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gate_id(value);
  // @@protoc_insertion_point(field_set:mruv.estates.AddGateRequest.gate_id)
}

// -------------------------------------------------------------------

// AddGateResponse

// uint32 gate_count = 1;
inline void AddGateResponse::clear_gate_count() {
  gate_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddGateResponse::_internal_gate_count() const {
  return gate_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddGateResponse::gate_count() const {
  // @@protoc_insertion_point(field_get:mruv.estates.AddGateResponse.gate_count)
  return _internal_gate_count();
}
inline void AddGateResponse::_internal_set_gate_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  gate_count_ = value;
}
inline void AddGateResponse::set_gate_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gate_count(value);
  // @@protoc_insertion_point(field_set:mruv.estates.AddGateResponse.gate_count)
}

// -------------------------------------------------------------------

// DeleteGateRequest

// uint32 estate_id = 1;
inline void DeleteGateRequest::clear_estate_id() {
  estate_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteGateRequest::_internal_estate_id() const {
  return estate_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteGateRequest::estate_id() const {
  // @@protoc_insertion_point(field_get:mruv.estates.DeleteGateRequest.estate_id)
  return _internal_estate_id();
}
inline void DeleteGateRequest::_internal_set_estate_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  estate_id_ = value;
}
inline void DeleteGateRequest::set_estate_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_estate_id(value);
  // @@protoc_insertion_point(field_set:mruv.estates.DeleteGateRequest.estate_id)
}

// uint32 gate_id = 2;
inline void DeleteGateRequest::clear_gate_id() {
  gate_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteGateRequest::_internal_gate_id() const {
  return gate_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteGateRequest::gate_id() const {
  // @@protoc_insertion_point(field_get:mruv.estates.DeleteGateRequest.gate_id)
  return _internal_gate_id();
}
inline void DeleteGateRequest::_internal_set_gate_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  gate_id_ = value;
}
inline void DeleteGateRequest::set_gate_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gate_id(value);
  // @@protoc_insertion_point(field_set:mruv.estates.DeleteGateRequest.gate_id)
}

// -------------------------------------------------------------------

// DeleteGateResponse

// uint32 gate_count = 1;
inline void DeleteGateResponse::clear_gate_count() {
  gate_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteGateResponse::_internal_gate_count() const {
  return gate_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteGateResponse::gate_count() const {
  // @@protoc_insertion_point(field_get:mruv.estates.DeleteGateResponse.gate_count)
  return _internal_gate_count();
}
inline void DeleteGateResponse::_internal_set_gate_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  gate_count_ = value;
}
inline void DeleteGateResponse::set_gate_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gate_count(value);
  // @@protoc_insertion_point(field_set:mruv.estates.DeleteGateResponse.gate_count)
}

// -------------------------------------------------------------------

// GetEstateGatesRequest

// uint32 estate_id = 1;
inline void GetEstateGatesRequest::clear_estate_id() {
  estate_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetEstateGatesRequest::_internal_estate_id() const {
  return estate_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetEstateGatesRequest::estate_id() const {
  // @@protoc_insertion_point(field_get:mruv.estates.GetEstateGatesRequest.estate_id)
  return _internal_estate_id();
}
inline void GetEstateGatesRequest::_internal_set_estate_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  estate_id_ = value;
}
inline void GetEstateGatesRequest::set_estate_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_estate_id(value);
  // @@protoc_insertion_point(field_set:mruv.estates.GetEstateGatesRequest.estate_id)
}

// -------------------------------------------------------------------

// GetEstateGatesResponse

// repeated .mruv.estates.Estate estates = 1;
inline int GetEstateGatesResponse::_internal_estates_size() const {
  return estates_.size();
}
inline int GetEstateGatesResponse::estates_size() const {
  return _internal_estates_size();
}
inline void GetEstateGatesResponse::clear_estates() {
  estates_.Clear();
}
inline ::mruv::estates::Estate* GetEstateGatesResponse::mutable_estates(int index) {
  // @@protoc_insertion_point(field_mutable:mruv.estates.GetEstateGatesResponse.estates)
  return estates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::estates::Estate >*
GetEstateGatesResponse::mutable_estates() {
  // @@protoc_insertion_point(field_mutable_list:mruv.estates.GetEstateGatesResponse.estates)
  return &estates_;
}
inline const ::mruv::estates::Estate& GetEstateGatesResponse::_internal_estates(int index) const {
  return estates_.Get(index);
}
inline const ::mruv::estates::Estate& GetEstateGatesResponse::estates(int index) const {
  // @@protoc_insertion_point(field_get:mruv.estates.GetEstateGatesResponse.estates)
  return _internal_estates(index);
}
inline ::mruv::estates::Estate* GetEstateGatesResponse::_internal_add_estates() {
  return estates_.Add();
}
inline ::mruv::estates::Estate* GetEstateGatesResponse::add_estates() {
  // @@protoc_insertion_point(field_add:mruv.estates.GetEstateGatesResponse.estates)
  return _internal_add_estates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mruv::estates::Estate >&
GetEstateGatesResponse::estates() const {
  // @@protoc_insertion_point(field_list:mruv.estates.GetEstateGatesResponse.estates)
  return estates_;
}

// -------------------------------------------------------------------

// AddEntranceRequest

// uint32 estate_id = 1;
inline void AddEntranceRequest::clear_estate_id() {
  estate_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddEntranceRequest::_internal_estate_id() const {
  return estate_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddEntranceRequest::estate_id() const {
  // @@protoc_insertion_point(field_get:mruv.estates.AddEntranceRequest.estate_id)
  return _internal_estate_id();
}
inline void AddEntranceRequest::_internal_set_estate_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  estate_id_ = value;
}
inline void AddEntranceRequest::set_estate_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_estate_id(value);
  // @@protoc_insertion_point(field_set:mruv.estates.AddEntranceRequest.estate_id)
}

// uint32 entrance_id = 2;
inline void AddEntranceRequest::clear_entrance_id() {
  entrance_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddEntranceRequest::_internal_entrance_id() const {
  return entrance_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddEntranceRequest::entrance_id() const {
  // @@protoc_insertion_point(field_get:mruv.estates.AddEntranceRequest.entrance_id)
  return _internal_entrance_id();
}
inline void AddEntranceRequest::_internal_set_entrance_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  entrance_id_ = value;
}
inline void AddEntranceRequest::set_entrance_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_entrance_id(value);
  // @@protoc_insertion_point(field_set:mruv.estates.AddEntranceRequest.entrance_id)
}

// -------------------------------------------------------------------

// AddEntranceResponse

// uint32 entrance_count = 1;
inline void AddEntranceResponse::clear_entrance_count() {
  entrance_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddEntranceResponse::_internal_entrance_count() const {
  return entrance_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddEntranceResponse::entrance_count() const {
  // @@protoc_insertion_point(field_get:mruv.estates.AddEntranceResponse.entrance_count)
  return _internal_entrance_count();
}
inline void AddEntranceResponse::_internal_set_entrance_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  entrance_count_ = value;
}
inline void AddEntranceResponse::set_entrance_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_entrance_count(value);
  // @@protoc_insertion_point(field_set:mruv.estates.AddEntranceResponse.entrance_count)
}

// -------------------------------------------------------------------

// RemoveEntranceRequest

// uint32 estate_id = 1;
inline void RemoveEntranceRequest::clear_estate_id() {
  estate_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RemoveEntranceRequest::_internal_estate_id() const {
  return estate_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RemoveEntranceRequest::estate_id() const {
  // @@protoc_insertion_point(field_get:mruv.estates.RemoveEntranceRequest.estate_id)
  return _internal_estate_id();
}
inline void RemoveEntranceRequest::_internal_set_estate_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  estate_id_ = value;
}
inline void RemoveEntranceRequest::set_estate_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_estate_id(value);
  // @@protoc_insertion_point(field_set:mruv.estates.RemoveEntranceRequest.estate_id)
}

// uint32 entrance_id = 2;
inline void RemoveEntranceRequest::clear_entrance_id() {
  entrance_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RemoveEntranceRequest::_internal_entrance_id() const {
  return entrance_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RemoveEntranceRequest::entrance_id() const {
  // @@protoc_insertion_point(field_get:mruv.estates.RemoveEntranceRequest.entrance_id)
  return _internal_entrance_id();
}
inline void RemoveEntranceRequest::_internal_set_entrance_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  entrance_id_ = value;
}
inline void RemoveEntranceRequest::set_entrance_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_entrance_id(value);
  // @@protoc_insertion_point(field_set:mruv.estates.RemoveEntranceRequest.entrance_id)
}

// -------------------------------------------------------------------

// RemoveEntranceResponse

// uint32 entrance_count = 1;
inline void RemoveEntranceResponse::clear_entrance_count() {
  entrance_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RemoveEntranceResponse::_internal_entrance_count() const {
  return entrance_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RemoveEntranceResponse::entrance_count() const {
  // @@protoc_insertion_point(field_get:mruv.estates.RemoveEntranceResponse.entrance_count)
  return _internal_entrance_count();
}
inline void RemoveEntranceResponse::_internal_set_entrance_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  entrance_count_ = value;
}
inline void RemoveEntranceResponse::set_entrance_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_entrance_count(value);
  // @@protoc_insertion_point(field_set:mruv.estates.RemoveEntranceResponse.entrance_count)
}

// -------------------------------------------------------------------

// GetEstateEntrancesRequest

// uint32 estate_id = 1;
inline void GetEstateEntrancesRequest::clear_estate_id() {
  estate_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetEstateEntrancesRequest::_internal_estate_id() const {
  return estate_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetEstateEntrancesRequest::estate_id() const {
  // @@protoc_insertion_point(field_get:mruv.estates.GetEstateEntrancesRequest.estate_id)
  return _internal_estate_id();
}
inline void GetEstateEntrancesRequest::_internal_set_estate_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  estate_id_ = value;
}
inline void GetEstateEntrancesRequest::set_estate_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_estate_id(value);
  // @@protoc_insertion_point(field_set:mruv.estates.GetEstateEntrancesRequest.estate_id)
}

// -------------------------------------------------------------------

// GetEstateEntrancesResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace estates
}  // namespace mruv

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_estates_2festates_2eproto
